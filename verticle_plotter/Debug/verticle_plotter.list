
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb84  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800bd5c  0800bd5c  0000cd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1ac  0800c1ac  0000e1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c1ac  0800c1ac  0000d1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1b4  0800c1b4  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1b4  0800c1b4  0000d1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c1b8  0800c1b8  0000d1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800c1bc  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d2c  200001e8  0800c3a4  0000e1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f14  0800c3a4  0000ef14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029d64  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ea6  00000000  00000000  00037f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b40  00000000  00000000  0003ce28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001526  00000000  00000000  0003e968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c7e4  00000000  00000000  0003fe8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027c98  00000000  00000000  0006c672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011950d  00000000  00000000  0009430a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ad817  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007924  00000000  00000000  001ad85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001b5180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001e8 	.word	0x200001e8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bd44 	.word	0x0800bd44

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001ec 	.word	0x200001ec
 8000214:	0800bd44 	.word	0x0800bd44

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b988 	b.w	8000dbc <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	468e      	mov	lr, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	4688      	mov	r8, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d962      	bls.n	8000ba0 <__udivmoddi4+0xdc>
 8000ada:	fab2 f682 	clz	r6, r2
 8000ade:	b14e      	cbz	r6, 8000af4 <__udivmoddi4+0x30>
 8000ae0:	f1c6 0320 	rsb	r3, r6, #32
 8000ae4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	40b7      	lsls	r7, r6
 8000aee:	ea43 0808 	orr.w	r8, r3, r8
 8000af2:	40b4      	lsls	r4, r6
 8000af4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b00:	0c23      	lsrs	r3, r4, #16
 8000b02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d909      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b18:	f080 80ea 	bcs.w	8000cf0 <__udivmoddi4+0x22c>
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f240 80e7 	bls.w	8000cf0 <__udivmoddi4+0x22c>
 8000b22:	3902      	subs	r1, #2
 8000b24:	443b      	add	r3, r7
 8000b26:	1a9a      	subs	r2, r3, r2
 8000b28:	b2a3      	uxth	r3, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b3a:	459c      	cmp	ip, r3
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x8e>
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b44:	f080 80d6 	bcs.w	8000cf4 <__udivmoddi4+0x230>
 8000b48:	459c      	cmp	ip, r3
 8000b4a:	f240 80d3 	bls.w	8000cf4 <__udivmoddi4+0x230>
 8000b4e:	443b      	add	r3, r7
 8000b50:	3802      	subs	r0, #2
 8000b52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b56:	eba3 030c 	sub.w	r3, r3, ip
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11d      	cbz	r5, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40f3      	lsrs	r3, r6
 8000b60:	2200      	movs	r2, #0
 8000b62:	e9c5 3200 	strd	r3, r2, [r5]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d905      	bls.n	8000b7a <__udivmoddi4+0xb6>
 8000b6e:	b10d      	cbz	r5, 8000b74 <__udivmoddi4+0xb0>
 8000b70:	e9c5 0100 	strd	r0, r1, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	4608      	mov	r0, r1
 8000b78:	e7f5      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d146      	bne.n	8000c10 <__udivmoddi4+0x14c>
 8000b82:	4573      	cmp	r3, lr
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xc8>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 8105 	bhi.w	8000d96 <__udivmoddi4+0x2d2>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4690      	mov	r8, r2
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	d0e5      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000b9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b9e:	e7e2      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f000 8090 	beq.w	8000cc6 <__udivmoddi4+0x202>
 8000ba6:	fab2 f682 	clz	r6, r2
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	f040 80a4 	bne.w	8000cf8 <__udivmoddi4+0x234>
 8000bb0:	1a8a      	subs	r2, r1, r2
 8000bb2:	0c03      	lsrs	r3, r0, #16
 8000bb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb8:	b280      	uxth	r0, r0
 8000bba:	b2bc      	uxth	r4, r7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bc2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bca:	fb04 f20c 	mul.w	r2, r4, ip
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d907      	bls.n	8000be2 <__udivmoddi4+0x11e>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x11c>
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	f200 80e0 	bhi.w	8000da0 <__udivmoddi4+0x2dc>
 8000be0:	46c4      	mov	ip, r8
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000be8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bf0:	fb02 f404 	mul.w	r4, r2, r4
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x144>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x142>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f200 80ca 	bhi.w	8000d9a <__udivmoddi4+0x2d6>
 8000c06:	4602      	mov	r2, r0
 8000c08:	1b1b      	subs	r3, r3, r4
 8000c0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c0e:	e7a5      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c10:	f1c1 0620 	rsb	r6, r1, #32
 8000c14:	408b      	lsls	r3, r1
 8000c16:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1a:	431f      	orrs	r7, r3
 8000c1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c20:	fa20 f306 	lsr.w	r3, r0, r6
 8000c24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	fa1f fc87 	uxth.w	ip, r7
 8000c36:	fbbe f0f9 	udiv	r0, lr, r9
 8000c3a:	0c1c      	lsrs	r4, r3, #16
 8000c3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x1a0>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c56:	f080 809c 	bcs.w	8000d92 <__udivmoddi4+0x2ce>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8099 	bls.w	8000d92 <__udivmoddi4+0x2ce>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	eba4 040e 	sub.w	r4, r4, lr
 8000c68:	fa1f fe83 	uxth.w	lr, r3
 8000c6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c70:	fb09 4413 	mls	r4, r9, r3, r4
 8000c74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x1ce>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c86:	f080 8082 	bcs.w	8000d8e <__udivmoddi4+0x2ca>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d97f      	bls.n	8000d8e <__udivmoddi4+0x2ca>
 8000c8e:	3b02      	subs	r3, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c9e:	4564      	cmp	r4, ip
 8000ca0:	4673      	mov	r3, lr
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	d362      	bcc.n	8000d6c <__udivmoddi4+0x2a8>
 8000ca6:	d05f      	beq.n	8000d68 <__udivmoddi4+0x2a4>
 8000ca8:	b15d      	cbz	r5, 8000cc2 <__udivmoddi4+0x1fe>
 8000caa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cae:	eb64 0409 	sbc.w	r4, r4, r9
 8000cb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	e74f      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000cc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cca:	0c01      	lsrs	r1, r0, #16
 8000ccc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4638      	mov	r0, r7
 8000cda:	463c      	mov	r4, r7
 8000cdc:	46b8      	mov	r8, r7
 8000cde:	46be      	mov	lr, r7
 8000ce0:	2620      	movs	r6, #32
 8000ce2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ce6:	eba2 0208 	sub.w	r2, r2, r8
 8000cea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cee:	e766      	b.n	8000bbe <__udivmoddi4+0xfa>
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	e718      	b.n	8000b26 <__udivmoddi4+0x62>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	e72c      	b.n	8000b52 <__udivmoddi4+0x8e>
 8000cf8:	f1c6 0220 	rsb	r2, r6, #32
 8000cfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	40b1      	lsls	r1, r6
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d12:	b2bc      	uxth	r4, r7
 8000d14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d18:	0c11      	lsrs	r1, r2, #16
 8000d1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1e:	fb08 f904 	mul.w	r9, r8, r4
 8000d22:	40b0      	lsls	r0, r6
 8000d24:	4589      	cmp	r9, r1
 8000d26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d2a:	b280      	uxth	r0, r0
 8000d2c:	d93e      	bls.n	8000dac <__udivmoddi4+0x2e8>
 8000d2e:	1879      	adds	r1, r7, r1
 8000d30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d34:	d201      	bcs.n	8000d3a <__udivmoddi4+0x276>
 8000d36:	4589      	cmp	r9, r1
 8000d38:	d81f      	bhi.n	8000d7a <__udivmoddi4+0x2b6>
 8000d3a:	eba1 0109 	sub.w	r1, r1, r9
 8000d3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d42:	fb09 f804 	mul.w	r8, r9, r4
 8000d46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d50:	4542      	cmp	r2, r8
 8000d52:	d229      	bcs.n	8000da8 <__udivmoddi4+0x2e4>
 8000d54:	18ba      	adds	r2, r7, r2
 8000d56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d5a:	d2c4      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d5c:	4542      	cmp	r2, r8
 8000d5e:	d2c2      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d60:	f1a9 0102 	sub.w	r1, r9, #2
 8000d64:	443a      	add	r2, r7
 8000d66:	e7be      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000d68:	45f0      	cmp	r8, lr
 8000d6a:	d29d      	bcs.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d74:	3801      	subs	r0, #1
 8000d76:	46e1      	mov	r9, ip
 8000d78:	e796      	b.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d7a:	eba7 0909 	sub.w	r9, r7, r9
 8000d7e:	4449      	add	r1, r9
 8000d80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d88:	fb09 f804 	mul.w	r8, r9, r4
 8000d8c:	e7db      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d8e:	4673      	mov	r3, lr
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1ce>
 8000d92:	4650      	mov	r0, sl
 8000d94:	e766      	b.n	8000c64 <__udivmoddi4+0x1a0>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e6fd      	b.n	8000b96 <__udivmoddi4+0xd2>
 8000d9a:	443b      	add	r3, r7
 8000d9c:	3a02      	subs	r2, #2
 8000d9e:	e733      	b.n	8000c08 <__udivmoddi4+0x144>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	e71c      	b.n	8000be2 <__udivmoddi4+0x11e>
 8000da8:	4649      	mov	r1, r9
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000dac:	eba1 0109 	sub.w	r1, r1, r9
 8000db0:	46c4      	mov	ip, r8
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fb09 f804 	mul.w	r8, r9, r4
 8000dba:	e7c4      	b.n	8000d46 <__udivmoddi4+0x282>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6178      	str	r0, [r7, #20]
 8000dc8:	6139      	str	r1, [r7, #16]
 8000dca:	60fa      	str	r2, [r7, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dd2:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000dee:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	e008      	b.n	8000e14 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3301      	adds	r3, #1
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	69fa      	ldr	r2, [r7, #28]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3f2      	bcc.n	8000e02 <ADC_DMA_Init+0x42>
    }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	217f      	movs	r1, #127	@ 0x7f
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 fa49 	bl	80052d0 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6859      	ldr	r1, [r3, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f003 fb32 	bl	80044b4 <HAL_ADC_Start_DMA>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	e012      	b.n	8000e98 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	4413      	add	r3, r2
 8000e84:	617b      	str	r3, [r7, #20]
        samples++;
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7b1b      	ldrb	r3, [r3, #12]
 8000e90:	461a      	mov	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4413      	add	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d3e7      	bcc.n	8000e72 <ADC_DMA_GetValue+0x1a>
    }


    // Calculate raw ADC value and convert to voltage
    if (samples > 0) {
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00f      	beq.n	8000ec8 <ADC_DMA_GetValue+0x70>
        float raw_value = (float)sum / samples;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	ee07 3a90 	vmov	s15, r3
 8000eb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ec0:	edc7 7a02 	vstr	s15, [r7, #8]
        return raw_value;
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	e001      	b.n	8000ecc <ADC_DMA_GetValue+0x74>
    }

    return 0.0f;
 8000ec8:	f04f 0300 	mov.w	r3, #0
}
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <ADC_DMA_GetJoystick>:

    // Compute current using WCS1700 formula
    return 15.1793457908771 * voltage - 24.8674344063837;
}

float ADC_DMA_GetJoystick(ADC_DMA *adc_dma, uint8_t channel_index, float joydata) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eee:	72fb      	strb	r3, [r7, #11]
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff ffaf 	bl	8000e58 <ADC_DMA_GetValue>
 8000efa:	ed87 0a05 	vstr	s0, [r7, #20]

    return mapf(value, 0.0, adc_dma->adc_resolution, 0.0, joydata);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f04:	ed97 2a01 	vldr	s4, [r7, #4]
 8000f08:	eddf 1a08 	vldr	s3, [pc, #32]	@ 8000f2c <ADC_DMA_GetJoystick+0x4c>
 8000f0c:	eeb0 1a67 	vmov.f32	s2, s15
 8000f10:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8000f2c <ADC_DMA_GetJoystick+0x4c>
 8000f14:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f18:	f000 fa92 	bl	8001440 <mapf>
 8000f1c:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f20:	eeb0 0a67 	vmov.f32	s0, s15
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	00000000 	.word	0x00000000

08000f30 <PID_CONTROLLER_Init>:
  if (_u > _upper_limit) return _upper_limit;
  else if (_u < _lower_limit) return _lower_limit;
  return (int32_t)_u;
}

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6178      	str	r0, [r7, #20]
 8000f38:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f3c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f40:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f44:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]

}
 8000f78:	bf00      	nop
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	88fa      	ldrh	r2, [r7, #6]
 8000f9e:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3328      	adds	r3, #40	@ 0x28
 8000fa4:	88fa      	ldrh	r2, [r7, #6]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fb29 	bl	8001600 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	8b3a      	ldrh	r2, [r7, #24]
 8000fb8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fd8:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d15f      	bne.n	80010a6 <MDXX_set_range+0xda>
		if (duty == 0) {
 8000fe6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	d115      	bne.n	8001020 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3310      	adds	r3, #16
 8000ff8:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001178 <MDXX_set_range+0x1ac>
 8000ffc:	ed97 0a02 	vldr	s0, [r7, #8]
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fc25 	bl	8001850 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3328      	adds	r3, #40	@ 0x28
 800100a:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001178 <MDXX_set_range+0x1ac>
 800100e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fc1c 	bl	8001850 <PWM_write_range>
			mdxx->cmd = 0;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800101e:	e0a6      	b.n	800116e <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001020:	edd7 7a01 	vldr	s15, [r7, #4]
 8001024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	dd1a      	ble.n	8001064 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3310      	adds	r3, #16
 8001032:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001178 <MDXX_set_range+0x1ac>
 8001036:	ed97 0a02 	vldr	s0, [r7, #8]
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fc08 	bl	8001850 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3328      	adds	r3, #40	@ 0x28
 8001044:	edd7 0a01 	vldr	s1, [r7, #4]
 8001048:	ed97 0a02 	vldr	s0, [r7, #8]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fbff 	bl	8001850 <PWM_write_range>
			mdxx->cmd = duty;
 8001052:	edd7 7a01 	vldr	s15, [r7, #4]
 8001056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800105a:	ee17 2a90 	vmov	r2, s15
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001062:	e084      	b.n	800116e <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3310      	adds	r3, #16
 8001068:	eddf 0a44 	vldr	s1, [pc, #272]	@ 800117c <MDXX_set_range+0x1b0>
 800106c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fbed 	bl	8001850 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3328      	adds	r3, #40	@ 0x28
 800107a:	edd7 7a01 	vldr	s15, [r7, #4]
 800107e:	eef0 7ae7 	vabs.f32	s15, s15
 8001082:	eef0 0a67 	vmov.f32	s1, s15
 8001086:	ed97 0a02 	vldr	s0, [r7, #8]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fbe0 	bl	8001850 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001090:	edd7 7a01 	vldr	s15, [r7, #4]
 8001094:	eef0 7ae7 	vabs.f32	s15, s15
 8001098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109c:	ee17 2a90 	vmov	r2, s15
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010a4:	e063      	b.n	800116e <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d15e      	bne.n	800116e <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80010b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010bc:	d115      	bne.n	80010ea <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	f005 f846 	bl	800615c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3328      	adds	r3, #40	@ 0x28
 80010d4:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001178 <MDXX_set_range+0x1ac>
 80010d8:	ed97 0a02 	vldr	s0, [r7, #8]
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fbb7 	bl	8001850 <PWM_write_range>
			mdxx->cmd = 0;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010e8:	e041      	b.n	800116e <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80010ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f6:	dd1a      	ble.n	800112e <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001102:	2200      	movs	r2, #0
 8001104:	4619      	mov	r1, r3
 8001106:	f005 f829 	bl	800615c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3328      	adds	r3, #40	@ 0x28
 800110e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001112:	ed97 0a02 	vldr	s0, [r7, #8]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fb9a 	bl	8001850 <PWM_write_range>
			mdxx->cmd = duty;
 800111c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001124:	ee17 2a90 	vmov	r2, s15
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800112c:	e01f      	b.n	800116e <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001138:	2201      	movs	r2, #1
 800113a:	4619      	mov	r1, r3
 800113c:	f005 f80e 	bl	800615c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3328      	adds	r3, #40	@ 0x28
 8001144:	edd7 7a01 	vldr	s15, [r7, #4]
 8001148:	eef0 7ae7 	vabs.f32	s15, s15
 800114c:	eef0 0a67 	vmov.f32	s1, s15
 8001150:	ed97 0a02 	vldr	s0, [r7, #8]
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fb7b 	bl	8001850 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800115a:	edd7 7a01 	vldr	s15, [r7, #4]
 800115e:	eef0 7ae7 	vabs.f32	s15, s15
 8001162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001166:	ee17 2a90 	vmov	r2, s15
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	00000000 	.word	0x00000000
 800117c:	42c80000 	.word	0x42c80000

08001180 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	605a      	str	r2, [r3, #4]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	601a      	str	r2, [r3, #0]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001200:	b580      	push	{r7, lr}
 8001202:	ed2d 8b02 	vpush	{d8}
 8001206:	b08a      	sub	sp, #40	@ 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	460b      	mov	r3, r1
 800120e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001212:	edc7 0a00 	vstr	s1, [r7]
 8001216:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001218:	897b      	ldrh	r3, [r7, #10]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	b29b      	uxth	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <FIR_init+0x2a>
        numTaps += 1;
 8001224:	897b      	ldrh	r3, [r7, #10]
 8001226:	3301      	adds	r3, #1
 8001228:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	897a      	ldrh	r2, [r7, #10]
 800122e:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001236:	897b      	ldrh	r3, [r7, #10]
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4618      	mov	r0, r3
 800123c:	f009 ff14 	bl	800b068 <malloc>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001248:	897b      	ldrh	r3, [r7, #10]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4618      	mov	r0, r3
 800124e:	f009 ff0b 	bl	800b068 <malloc>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80e0 	beq.w	8001424 <FIR_init+0x224>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80db 	beq.w	8001424 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001272:	e00a      	b.n	800128a <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001284:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001286:	3301      	adds	r3, #1
 8001288:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800128a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800128c:	897b      	ldrh	r3, [r7, #10]
 800128e:	429a      	cmp	r2, r3
 8001290:	d3f0      	bcc.n	8001274 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001292:	edd7 6a01 	vldr	s13, [r7, #4]
 8001296:	ed97 7a00 	vldr	s14, [r7]
 800129a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800129e:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 80012a2:	897b      	ldrh	r3, [r7, #10]
 80012a4:	085b      	lsrs	r3, r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80012ae:	e077      	b.n	80013a0 <FIR_init+0x1a0>
            if (i == half_taps) {
 80012b0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80012b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d10c      	bne.n	80012d6 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80012cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012d0:	edc3 7a00 	vstr	s15, [r3]
 80012d4:	e02c      	b.n	8001330 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 80012d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80012d8:	8afb      	ldrh	r3, [r7, #22]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b29b      	uxth	r3, r3
 80012de:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 80012e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80012e4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001430 <FIR_init+0x230>
 80012e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001300:	f009 fff0 	bl	800b2e4 <sinf>
 8001304:	eef0 6a40 	vmov.f32	s13, s0
 8001308:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001314:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001434 <FIR_init+0x234>
 8001318:	ee27 7a87 	vmul.f32	s14, s15, s14
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132c:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	ed93 8a00 	vldr	s16, [r3]
 8001340:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001430 <FIR_init+0x230>
 8001350:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001354:	897b      	ldrh	r3, [r7, #10]
 8001356:	3b01      	subs	r3, #1
 8001358:	ee07 3a90 	vmov	s15, r3
 800135c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001360:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001364:	eeb0 0a66 	vmov.f32	s0, s13
 8001368:	f009 ff78 	bl	800b25c <cosf>
 800136c:	eef0 7a40 	vmov.f32	s15, s0
 8001370:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001438 <FIR_init+0x238>
 8001374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001378:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800143c <FIR_init+0x23c>
 800137c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001390:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001394:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001398:	b29b      	uxth	r3, r3
 800139a:	3301      	adds	r3, #1
 800139c:	b29b      	uxth	r3, r3
 800139e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80013a0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80013a4:	897b      	ldrh	r3, [r7, #10]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	db82      	blt.n	80012b0 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 80013aa:	f04f 0300 	mov.w	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	83fb      	strh	r3, [r7, #30]
 80013b4:	e00f      	b.n	80013d6 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	8bfb      	ldrh	r3, [r7, #30]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80013c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013cc:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80013d0:	8bfb      	ldrh	r3, [r7, #30]
 80013d2:	3301      	adds	r3, #1
 80013d4:	83fb      	strh	r3, [r7, #30]
 80013d6:	8bfa      	ldrh	r2, [r7, #30]
 80013d8:	897b      	ldrh	r3, [r7, #10]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d3eb      	bcc.n	80013b6 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 80013de:	edd7 7a08 	vldr	s15, [r7, #32]
 80013e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	d01b      	beq.n	8001424 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 80013ec:	2300      	movs	r3, #0
 80013ee:	83bb      	strh	r3, [r7, #28]
 80013f0:	e014      	b.n	800141c <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	8bbb      	ldrh	r3, [r7, #28]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	edd3 6a00 	vldr	s13, [r3]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	8bbb      	ldrh	r3, [r7, #28]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	ed97 7a08 	vldr	s14, [r7, #32]
 800140e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001412:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001416:	8bbb      	ldrh	r3, [r7, #28]
 8001418:	3301      	adds	r3, #1
 800141a:	83bb      	strh	r3, [r7, #28]
 800141c:	8bba      	ldrh	r2, [r7, #28]
 800141e:	897b      	ldrh	r3, [r7, #10]
 8001420:	429a      	cmp	r2, r3
 8001422:	d3e6      	bcc.n	80013f2 <FIR_init+0x1f2>
            }
        }
    }
}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	@ 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	ecbd 8b02 	vpop	{d8}
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40c90fdb 	.word	0x40c90fdb
 8001434:	40490fdb 	.word	0x40490fdb
 8001438:	3eeb851f 	.word	0x3eeb851f
 800143c:	3f0a3d71 	.word	0x3f0a3d71

08001440 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	@ 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	ed87 0a05 	vstr	s0, [r7, #20]
 800144a:	edc7 0a04 	vstr	s1, [r7, #16]
 800144e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001452:	edc7 1a02 	vstr	s3, [r7, #8]
 8001456:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 800145a:	ed97 7a05 	vldr	s14, [r7, #20]
 800145e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001462:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001466:	ed97 7a03 	vldr	s14, [r7, #12]
 800146a:	edd7 7a04 	vldr	s15, [r7, #16]
 800146e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001476:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 800147a:	ed97 7a01 	vldr	s14, [r7, #4]
 800147e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001482:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001486:	edd7 7a07 	vldr	s15, [r7, #28]
 800148a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001496:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	ee07 3a90 	vmov	s15, r3
}
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	3724      	adds	r7, #36	@ 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80014b4:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <modbus_1t5_Timeout+0x3c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2201      	movs	r2, #1
 80014ba:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80014bc:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <modbus_1t5_Timeout+0x3c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2200      	movs	r2, #0
 80014c6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <modbus_1t5_Timeout+0x3c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <modbus_1t5_Timeout+0x3c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 0201 	orr.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000204 	.word	0x20000204

080014f0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80014f8:	4b04      	ldr	r3, [pc, #16]	@ (800150c <modbus_3t5_Timeout+0x1c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2201      	movs	r2, #1
 80014fe:	755a      	strb	r2, [r3, #21]

}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	20000204 	.word	0x20000204

08001510 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f008 fcc9 	bl	8009eb0 <HAL_UART_GetError>
 800151e:	4603      	mov	r3, r0
 8001520:	2b20      	cmp	r3, #32
 8001522:	d101      	bne.n	8001528 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001524:	f7ff ffc4 	bl	80014b0 <modbus_1t5_Timeout>

	}
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 800153e:	4a2d      	ldr	r2, [pc, #180]	@ (80015f4 <Modbus_init+0xc4>)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001544:	4b2b      	ldr	r3, [pc, #172]	@ (80015f4 <Modbus_init+0xc4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 800154c:	4b29      	ldr	r3, [pc, #164]	@ (80015f4 <Modbus_init+0xc4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001554:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <Modbus_init+0xc4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 800155c:	4b25      	ldr	r3, [pc, #148]	@ (80015f4 <Modbus_init+0xc4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	7e3a      	ldrb	r2, [r7, #24]
 8001562:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001564:	4b23      	ldr	r3, [pc, #140]	@ (80015f4 <Modbus_init+0xc4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	4a21      	ldr	r2, [pc, #132]	@ (80015f8 <Modbus_init+0xc8>)
 8001572:	210e      	movs	r1, #14
 8001574:	4618      	mov	r0, r3
 8001576:	f006 ff49 	bl	800840c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2110      	movs	r1, #16
 8001580:	4618      	mov	r0, r3
 8001582:	f008 fc3f 	bl	8009e04 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	4618      	mov	r0, r3
 800158c:	f008 fc56 	bl	8009e3c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4a19      	ldr	r2, [pc, #100]	@ (80015fc <Modbus_init+0xcc>)
 8001596:	2104      	movs	r1, #4
 8001598:	4618      	mov	r0, r3
 800159a:	f007 ff87 	bl	80094ac <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <Modbus_init+0xc4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80015a4:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <Modbus_init+0xc4>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <Modbus_init+0xc4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80015b0:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80015b4:	4413      	add	r3, r2
 80015b6:	3302      	adds	r3, #2
 80015b8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015bc:	4619      	mov	r1, r3
 80015be:	f008 f82f 	bl	8009620 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <Modbus_init+0xc4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d10c      	bne.n	80015ec <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80015d2:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <Modbus_init+0xc4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	4618      	mov	r0, r3
 80015da:	f005 fef3 	bl	80073c4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80015de:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <Modbus_init+0xc4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f006 f942 	bl	8007870 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000204 	.word	0x20000204
 80015f8:	080014f1 	.word	0x080014f1
 80015fc:	08001511 	.word	0x08001511

08001600 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	4613      	mov	r3, r2
 800160c:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4a0b      	ldr	r2, [pc, #44]	@ (8001640 <PWM_init+0x40>)
 8001612:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	88fa      	ldrh	r2, [r7, #6]
 800161e:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8001626:	68b8      	ldr	r0, [r7, #8]
 8001628:	f005 fe5c 	bl	80072e4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	4619      	mov	r1, r3
 8001630:	68b8      	ldr	r0, [r7, #8]
 8001632:	f005 ffa3 	bl	800757c <HAL_TIM_PWM_Start>
}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	0a21fe80 	.word	0x0a21fe80

08001644 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8001644:	b5b0      	push	{r4, r5, r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001650:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001654:	edd7 7a02 	vldr	s15, [r7, #8]
 8001658:	eef5 7a40 	vcmp.f32	s15, #0.0
 800165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001660:	d137      	bne.n	80016d2 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	889b      	ldrh	r3, [r3, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d105      	bne.n	8001676 <PWM_write_duty+0x32>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2200      	movs	r2, #0
 8001672:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001674:	e0e1      	b.n	800183a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	889b      	ldrh	r3, [r3, #4]
 800167a:	2b04      	cmp	r3, #4
 800167c:	d105      	bne.n	800168a <PWM_write_duty+0x46>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2300      	movs	r3, #0
 8001686:	6393      	str	r3, [r2, #56]	@ 0x38
 8001688:	e0d7      	b.n	800183a <PWM_write_duty+0x1f6>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	889b      	ldrh	r3, [r3, #4]
 800168e:	2b08      	cmp	r3, #8
 8001690:	d105      	bne.n	800169e <PWM_write_duty+0x5a>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	2300      	movs	r3, #0
 800169a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800169c:	e0cd      	b.n	800183a <PWM_write_duty+0x1f6>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	889b      	ldrh	r3, [r3, #4]
 80016a2:	2b0c      	cmp	r3, #12
 80016a4:	d105      	bne.n	80016b2 <PWM_write_duty+0x6e>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2300      	movs	r3, #0
 80016ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b0:	e0c3      	b.n	800183a <PWM_write_duty+0x1f6>
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	889b      	ldrh	r3, [r3, #4]
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	d105      	bne.n	80016c6 <PWM_write_duty+0x82>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2300      	movs	r3, #0
 80016c2:	6493      	str	r3, [r2, #72]	@ 0x48
 80016c4:	e0b9      	b.n	800183a <PWM_write_duty+0x1f6>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2300      	movs	r3, #0
 80016ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80016d0:	e0b3      	b.n	800183a <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	ee07 3a90 	vmov	s15, r3
 80016da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016de:	ed97 7a02 	vldr	s14, [r7, #8]
 80016e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ea:	ee17 2a90 	vmov	r2, s15
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80016fa:	33fe      	adds	r3, #254	@ 0xfe
 80016fc:	4a51      	ldr	r2, [pc, #324]	@ (8001844 <PWM_write_duty+0x200>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	0bdb      	lsrs	r3, r3, #15
 8001704:	b29b      	uxth	r3, r3
 8001706:	3b01      	subs	r3, #1
 8001708:	b29a      	uxth	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	899b      	ldrh	r3, [r3, #12]
 800171e:	3301      	adds	r3, #1
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001728:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800172c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001734:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001738:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800173c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001740:	ee17 3a90 	vmov	r3, s15
 8001744:	b29a      	uxth	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	89db      	ldrh	r3, [r3, #14]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe feb4 	bl	80004bc <__aeabi_i2d>
 8001754:	4604      	mov	r4, r0
 8001756:	460d      	mov	r5, r1
 8001758:	edd7 7a01 	vldr	s15, [r7, #4]
 800175c:	eef0 7ae7 	vabs.f32	s15, s15
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe febc 	bl	80004e0 <__aeabi_f2d>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4620      	mov	r0, r4
 800176e:	4629      	mov	r1, r5
 8001770:	f7fe ff0e 	bl	8000590 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	4b31      	ldr	r3, [pc, #196]	@ (8001848 <PWM_write_duty+0x204>)
 8001782:	f7ff f82f 	bl	80007e4 <__aeabi_ddiv>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff f911 	bl	80009b4 <__aeabi_d2uiz>
 8001792:	4603      	mov	r3, r0
 8001794:	b29b      	uxth	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	899a      	ldrh	r2, [r3, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	89da      	ldrh	r2, [r3, #14]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	89da      	ldrh	r2, [r3, #14]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	889b      	ldrh	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d106      	bne.n	80017d4 <PWM_write_duty+0x190>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	6952      	ldr	r2, [r2, #20]
 80017d0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80017d2:	e032      	b.n	800183a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	889b      	ldrh	r3, [r3, #4]
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d106      	bne.n	80017ea <PWM_write_duty+0x1a6>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80017e8:	e027      	b.n	800183a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	889b      	ldrh	r3, [r3, #4]
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d106      	bne.n	8001800 <PWM_write_duty+0x1bc>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80017fe:	e01c      	b.n	800183a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	889b      	ldrh	r3, [r3, #4]
 8001804:	2b0c      	cmp	r3, #12
 8001806:	d106      	bne.n	8001816 <PWM_write_duty+0x1d2>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001814:	e011      	b.n	800183a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	889b      	ldrh	r3, [r3, #4]
 800181a:	2b10      	cmp	r3, #16
 800181c:	d106      	bne.n	800182c <PWM_write_duty+0x1e8>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800182a:	e006      	b.n	800183a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001838:	e7ff      	b.n	800183a <PWM_write_duty+0x1f6>
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bdb0      	pop	{r4, r5, r7, pc}
 8001842:	bf00      	nop
 8001844:	80008001 	.word	0x80008001
 8001848:	40590000 	.word	0x40590000
 800184c:	00000000 	.word	0x00000000

08001850 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	ed87 0a02 	vstr	s0, [r7, #8]
 800185c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001860:	edd7 7a02 	vldr	s15, [r7, #8]
 8001864:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186c:	d137      	bne.n	80018de <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	889b      	ldrh	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d105      	bne.n	8001882 <PWM_write_range+0x32>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2200      	movs	r2, #0
 800187e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001880:	e0e1      	b.n	8001a46 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	889b      	ldrh	r3, [r3, #4]
 8001886:	2b04      	cmp	r3, #4
 8001888:	d105      	bne.n	8001896 <PWM_write_range+0x46>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2300      	movs	r3, #0
 8001892:	6393      	str	r3, [r2, #56]	@ 0x38
 8001894:	e0d7      	b.n	8001a46 <PWM_write_range+0x1f6>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	889b      	ldrh	r3, [r3, #4]
 800189a:	2b08      	cmp	r3, #8
 800189c:	d105      	bne.n	80018aa <PWM_write_range+0x5a>
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2300      	movs	r3, #0
 80018a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80018a8:	e0cd      	b.n	8001a46 <PWM_write_range+0x1f6>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	889b      	ldrh	r3, [r3, #4]
 80018ae:	2b0c      	cmp	r3, #12
 80018b0:	d105      	bne.n	80018be <PWM_write_range+0x6e>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2300      	movs	r3, #0
 80018ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80018bc:	e0c3      	b.n	8001a46 <PWM_write_range+0x1f6>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	889b      	ldrh	r3, [r3, #4]
 80018c2:	2b10      	cmp	r3, #16
 80018c4:	d105      	bne.n	80018d2 <PWM_write_range+0x82>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2300      	movs	r3, #0
 80018ce:	6493      	str	r3, [r2, #72]	@ 0x48
 80018d0:	e0b9      	b.n	8001a46 <PWM_write_range+0x1f6>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2300      	movs	r3, #0
 80018da:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80018dc:	e0b3      	b.n	8001a46 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80018ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80018ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f6:	ee17 2a90 	vmov	r2, s15
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001906:	33fe      	adds	r3, #254	@ 0xfe
 8001908:	4a53      	ldr	r2, [pc, #332]	@ (8001a58 <PWM_write_range+0x208>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0bdb      	lsrs	r3, r3, #15
 8001910:	b29b      	uxth	r3, r3
 8001912:	3b01      	subs	r3, #1
 8001914:	b29a      	uxth	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	ee07 3a90 	vmov	s15, r3
 8001922:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	899b      	ldrh	r3, [r3, #12]
 800192a:	3301      	adds	r3, #1
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001934:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001938:	ed97 7a02 	vldr	s14, [r7, #8]
 800193c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001940:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001944:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800194c:	ee17 3a90 	vmov	r3, s15
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	89db      	ldrh	r3, [r3, #14]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fdae 	bl	80004bc <__aeabi_i2d>
 8001960:	4604      	mov	r4, r0
 8001962:	460d      	mov	r5, r1
 8001964:	edd7 7a01 	vldr	s15, [r7, #4]
 8001968:	eef0 7ae7 	vabs.f32	s15, s15
 800196c:	ee17 0a90 	vmov	r0, s15
 8001970:	f7fe fdb6 	bl	80004e0 <__aeabi_f2d>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4620      	mov	r0, r4
 800197a:	4629      	mov	r1, r5
 800197c:	f7fe fe08 	bl	8000590 <__aeabi_dmul>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	a331      	add	r3, pc, #196	@ (adr r3, 8001a50 <PWM_write_range+0x200>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7fe ff29 	bl	80007e4 <__aeabi_ddiv>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	f7ff f80b 	bl	80009b4 <__aeabi_d2uiz>
 800199e:	4603      	mov	r3, r0
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	899a      	ldrh	r2, [r3, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	89da      	ldrh	r2, [r3, #14]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	89da      	ldrh	r2, [r3, #14]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	889b      	ldrh	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <PWM_write_range+0x190>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	6952      	ldr	r2, [r2, #20]
 80019dc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80019de:	e032      	b.n	8001a46 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	889b      	ldrh	r3, [r3, #4]
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d106      	bne.n	80019f6 <PWM_write_range+0x1a6>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80019f4:	e027      	b.n	8001a46 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	889b      	ldrh	r3, [r3, #4]
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d106      	bne.n	8001a0c <PWM_write_range+0x1bc>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001a0a:	e01c      	b.n	8001a46 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	889b      	ldrh	r3, [r3, #4]
 8001a10:	2b0c      	cmp	r3, #12
 8001a12:	d106      	bne.n	8001a22 <PWM_write_range+0x1d2>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001a20:	e011      	b.n	8001a46 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	889b      	ldrh	r3, [r3, #4]
 8001a26:	2b10      	cmp	r3, #16
 8001a28:	d106      	bne.n	8001a38 <PWM_write_range+0x1e8>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001a36:	e006      	b.n	8001a46 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001a44:	e7ff      	b.n	8001a46 <PWM_write_range+0x1f6>
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	00000000 	.word	0x00000000
 8001a54:	40efffe0 	.word	0x40efffe0
 8001a58:	80008001 	.word	0x80008001

08001a5c <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6178      	str	r0, [r7, #20]
 8001a64:	6139      	str	r1, [r7, #16]
 8001a66:	60fa      	str	r2, [r7, #12]
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a6e:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8001abc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	fb93 f2f2 	sdiv	r2, r3, r2
 8001ac6:	68f9      	ldr	r1, [r7, #12]
 8001ac8:	fb01 f202 	mul.w	r2, r1, r2
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001b2a:	213c      	movs	r1, #60	@ 0x3c
 8001b2c:	6938      	ldr	r0, [r7, #16]
 8001b2e:	f005 ffe1 	bl	8007af4 <HAL_TIM_Encoder_Start>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	@ 0x30
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2220      	movs	r2, #32
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f009 fb3d 	bl	800b1d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b5a:	4b39      	ldr	r3, [pc, #228]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001b5c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001b60:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b62:	4b37      	ldr	r3, [pc, #220]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001b64:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b68:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b6a:	4b35      	ldr	r3, [pc, #212]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b70:	4b33      	ldr	r3, [pc, #204]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001b76:	4b32      	ldr	r3, [pc, #200]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b7c:	4b30      	ldr	r3, [pc, #192]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b82:	4b2f      	ldr	r3, [pc, #188]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001b84:	2204      	movs	r2, #4
 8001b86:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b88:	4b2d      	ldr	r3, [pc, #180]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001b94:	4b2a      	ldr	r3, [pc, #168]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001b96:	2202      	movs	r2, #2
 8001b98:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b9a:	4b29      	ldr	r3, [pc, #164]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ba2:	4b27      	ldr	r3, [pc, #156]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ba8:	4b25      	ldr	r3, [pc, #148]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001bae:	4b24      	ldr	r3, [pc, #144]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bb6:	4b22      	ldr	r3, [pc, #136]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001bbc:	4b20      	ldr	r3, [pc, #128]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bc4:	481e      	ldr	r0, [pc, #120]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001bc6:	f002 fab9 	bl	800413c <HAL_ADC_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001bd0:	f000 fc10 	bl	80023f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001bd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4818      	ldr	r0, [pc, #96]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001be0:	f003 fbd8 	bl	8005394 <HAL_ADCEx_MultiModeConfigChannel>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001bea:	f000 fc03 	bl	80023f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <MX_ADC1_Init+0x108>)
 8001bf0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001bf6:	2307      	movs	r3, #7
 8001bf8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bfa:	237f      	movs	r3, #127	@ 0x7f
 8001bfc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	4619      	mov	r1, r3
 8001c0a:	480d      	ldr	r0, [pc, #52]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001c0c:	f002 fd44 	bl	8004698 <HAL_ADC_ConfigChannel>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001c16:	f000 fbed 	bl	80023f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <MX_ADC1_Init+0x10c>)
 8001c1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001c1e:	230c      	movs	r3, #12
 8001c20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4806      	ldr	r0, [pc, #24]	@ (8001c40 <MX_ADC1_Init+0x104>)
 8001c28:	f002 fd36 	bl	8004698 <HAL_ADC_ConfigChannel>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001c32:	f000 fbdf 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	3730      	adds	r7, #48	@ 0x30
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000208 	.word	0x20000208
 8001c44:	19200040 	.word	0x19200040
 8001c48:	1d500080 	.word	0x1d500080

08001c4c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b09e      	sub	sp, #120	@ 0x78
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c64:	f107 0310 	add.w	r3, r7, #16
 8001c68:	2254      	movs	r2, #84	@ 0x54
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f009 fab1 	bl	800b1d4 <memset>
  if(adcHandle->Instance==ADC1)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c7a:	d15e      	bne.n	8001d3a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c80:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c82:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c86:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f005 f877 	bl	8006d80 <HAL_RCCEx_PeriphCLKConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001c98:	f000 fbac 	bl	80023f4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c9c:	4b29      	ldr	r3, [pc, #164]	@ (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca0:	4a28      	ldr	r2, [pc, #160]	@ (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001ca2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ca6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ca8:	4b26      	ldr	r3, [pc, #152]	@ (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb4:	4b23      	ldr	r3, [pc, #140]	@ (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb8:	4a22      	ldr	r2, [pc, #136]	@ (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001cba:	f043 0304 	orr.w	r3, r3, #4
 8001cbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc0:	4b20      	ldr	r3, [pc, #128]	@ (8001d44 <HAL_ADC_MspInit+0xf8>)
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001cdc:	4619      	mov	r1, r3
 8001cde:	481a      	ldr	r0, [pc, #104]	@ (8001d48 <HAL_ADC_MspInit+0xfc>)
 8001ce0:	f004 f8a2 	bl	8005e28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ce4:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <HAL_ADC_MspInit+0x100>)
 8001ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8001d50 <HAL_ADC_MspInit+0x104>)
 8001ce8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001cea:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <HAL_ADC_MspInit+0x100>)
 8001cec:	2205      	movs	r2, #5
 8001cee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cf0:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <HAL_ADC_MspInit+0x100>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_ADC_MspInit+0x100>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cfc:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <HAL_ADC_MspInit+0x100>)
 8001cfe:	2280      	movs	r2, #128	@ 0x80
 8001d00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d02:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <HAL_ADC_MspInit+0x100>)
 8001d04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d0a:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <HAL_ADC_MspInit+0x100>)
 8001d0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <HAL_ADC_MspInit+0x100>)
 8001d14:	2220      	movs	r2, #32
 8001d16:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d18:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <HAL_ADC_MspInit+0x100>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d1e:	480b      	ldr	r0, [pc, #44]	@ (8001d4c <HAL_ADC_MspInit+0x100>)
 8001d20:	f003 fd50 	bl	80057c4 <HAL_DMA_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8001d2a:	f000 fb63 	bl	80023f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a06      	ldr	r2, [pc, #24]	@ (8001d4c <HAL_ADC_MspInit+0x100>)
 8001d32:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d34:	4a05      	ldr	r2, [pc, #20]	@ (8001d4c <HAL_ADC_MspInit+0x100>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	3778      	adds	r7, #120	@ 0x78
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	48000800 	.word	0x48000800
 8001d4c:	20000274 	.word	0x20000274
 8001d50:	40020008 	.word	0x40020008

08001d54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001d5a:	4b22      	ldr	r3, [pc, #136]	@ (8001de4 <MX_DMA_Init+0x90>)
 8001d5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d5e:	4a21      	ldr	r2, [pc, #132]	@ (8001de4 <MX_DMA_Init+0x90>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d66:	4b1f      	ldr	r3, [pc, #124]	@ (8001de4 <MX_DMA_Init+0x90>)
 8001d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d72:	4b1c      	ldr	r3, [pc, #112]	@ (8001de4 <MX_DMA_Init+0x90>)
 8001d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d76:	4a1b      	ldr	r2, [pc, #108]	@ (8001de4 <MX_DMA_Init+0x90>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d7e:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <MX_DMA_Init+0x90>)
 8001d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	200b      	movs	r0, #11
 8001d90:	f003 fce3 	bl	800575a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d94:	200b      	movs	r0, #11
 8001d96:	f003 fcfa 	bl	800578e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	200c      	movs	r0, #12
 8001da0:	f003 fcdb 	bl	800575a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001da4:	200c      	movs	r0, #12
 8001da6:	f003 fcf2 	bl	800578e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	200d      	movs	r0, #13
 8001db0:	f003 fcd3 	bl	800575a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001db4:	200d      	movs	r0, #13
 8001db6:	f003 fcea 	bl	800578e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	200e      	movs	r0, #14
 8001dc0:	f003 fccb 	bl	800575a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001dc4:	200e      	movs	r0, #14
 8001dc6:	f003 fce2 	bl	800578e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	200f      	movs	r0, #15
 8001dd0:	f003 fcc3 	bl	800575a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001dd4:	200f      	movs	r0, #15
 8001dd6:	f003 fcda 	bl	800578e <HAL_NVIC_EnableIRQ>

}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000

08001de8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	@ 0x28
 8001dec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
 8001dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfe:	4b4f      	ldr	r3, [pc, #316]	@ (8001f3c <MX_GPIO_Init+0x154>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e02:	4a4e      	ldr	r2, [pc, #312]	@ (8001f3c <MX_GPIO_Init+0x154>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f3c <MX_GPIO_Init+0x154>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e16:	4b49      	ldr	r3, [pc, #292]	@ (8001f3c <MX_GPIO_Init+0x154>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1a:	4a48      	ldr	r2, [pc, #288]	@ (8001f3c <MX_GPIO_Init+0x154>)
 8001e1c:	f043 0320 	orr.w	r3, r3, #32
 8001e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e22:	4b46      	ldr	r3, [pc, #280]	@ (8001f3c <MX_GPIO_Init+0x154>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	4b43      	ldr	r3, [pc, #268]	@ (8001f3c <MX_GPIO_Init+0x154>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e32:	4a42      	ldr	r2, [pc, #264]	@ (8001f3c <MX_GPIO_Init+0x154>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e3a:	4b40      	ldr	r3, [pc, #256]	@ (8001f3c <MX_GPIO_Init+0x154>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e46:	4b3d      	ldr	r3, [pc, #244]	@ (8001f3c <MX_GPIO_Init+0x154>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4a:	4a3c      	ldr	r2, [pc, #240]	@ (8001f3c <MX_GPIO_Init+0x154>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e52:	4b3a      	ldr	r3, [pc, #232]	@ (8001f3c <MX_GPIO_Init+0x154>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8001e64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e68:	f004 f978 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e72:	4833      	ldr	r0, [pc, #204]	@ (8001f40 <MX_GPIO_Init+0x158>)
 8001e74:	f004 f972 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	482c      	ldr	r0, [pc, #176]	@ (8001f40 <MX_GPIO_Init+0x158>)
 8001e90:	f003 ffca 	bl	8005e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8001e94:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8001e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eb0:	f003 ffba 	bl	8005e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_LIM_Pin LOWER_LIM_Pin UPPER_PHOTO_Pin EMER_Pin
                           PROX_Pin SAVE_Pin */
  GPIO_InitStruct.Pin = UPPER_LIM_Pin|LOWER_LIM_Pin|UPPER_PHOTO_Pin|EMER_Pin
 8001eb4:	f241 03b6 	movw	r3, #4278	@ 0x10b6
 8001eb8:	617b      	str	r3, [r7, #20]
                          |PROX_Pin|SAVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	481e      	ldr	r0, [pc, #120]	@ (8001f44 <MX_GPIO_Init+0x15c>)
 8001eca:	f003 ffad 	bl	8005e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ece:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4816      	ldr	r0, [pc, #88]	@ (8001f40 <MX_GPIO_Init+0x158>)
 8001ee8:	f003 ff9e 	bl	8005e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = LOWER_PHOTO_Pin;
 8001eec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOWER_PHOTO_GPIO_Port, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f04:	f003 ff90 	bl	8005e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : START_Pin DELETE_Pin RESET_SYS_Pin */
  GPIO_InitStruct.Pin = START_Pin|DELETE_Pin|RESET_SYS_Pin;
 8001f08:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4808      	ldr	r0, [pc, #32]	@ (8001f40 <MX_GPIO_Init+0x158>)
 8001f1e:	f003 ff83 	bl	8005e28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	2028      	movs	r0, #40	@ 0x28
 8001f28:	f003 fc17 	bl	800575a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f2c:	2028      	movs	r0, #40	@ 0x28
 8001f2e:	f003 fc2e 	bl	800578e <HAL_NVIC_EnableIRQ>

}
 8001f32:	bf00      	nop
 8001f34:	3728      	adds	r7, #40	@ 0x28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	48000800 	.word	0x48000800
 8001f44:	48000400 	.word	0x48000400

08001f48 <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8001f48:	b5b0      	push	{r4, r5, r7, lr}
 8001f4a:	b0a4      	sub	sp, #144	@ 0x90
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6178      	str	r0, [r7, #20]
 8001f50:	6139      	str	r1, [r7, #16]
 8001f52:	60fa      	str	r2, [r7, #12]
 8001f54:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f58:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8001f6c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001f90:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f94:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8001fa2:	4bc6      	ldr	r3, [pc, #792]	@ (80022bc <Kalman_Start+0x374>)
 8001fa4:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001fa8:	461d      	mov	r5, r3
 8001faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001fba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001fdc:	e028      	b.n	8002030 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8001fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	6979      	ldr	r1, [r7, #20]
 8001fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ff0:	3314      	adds	r3, #20
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8001ff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	3390      	adds	r3, #144	@ 0x90
 8002000:	443b      	add	r3, r7
 8002002:	3b64      	subs	r3, #100	@ 0x64
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	6979      	ldr	r1, [r7, #20]
 8002008:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800200c:	3398      	adds	r3, #152	@ 0x98
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800201a:	3304      	adds	r3, #4
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8002026:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800202a:	3301      	adds	r3, #1
 800202c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002030:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002034:	2b0f      	cmp	r3, #15
 8002036:	ddd2      	ble.n	8001fde <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800203e:	e03a      	b.n	80020b6 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8002040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	3390      	adds	r3, #144	@ 0x90
 8002048:	443b      	add	r3, r7
 800204a:	3b74      	subs	r3, #116	@ 0x74
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	6979      	ldr	r1, [r7, #20]
 8002050:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 800205a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	6979      	ldr	r1, [r7, #20]
 8002068:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800206c:	3324      	adds	r3, #36	@ 0x24
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8002074:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	3390      	adds	r3, #144	@ 0x90
 800207c:	443b      	add	r3, r7
 800207e:	3b14      	subs	r3, #20
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	6979      	ldr	r1, [r7, #20]
 8002084:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002088:	3328      	adds	r3, #40	@ 0x28
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8002090:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	3390      	adds	r3, #144	@ 0x90
 8002098:	443b      	add	r3, r7
 800209a:	3b24      	subs	r3, #36	@ 0x24
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	6979      	ldr	r1, [r7, #20]
 80020a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020a4:	332c      	adds	r3, #44	@ 0x2c
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 80020ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020b0:	3301      	adds	r3, #1
 80020b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80020b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	ddc0      	ble.n	8002040 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2201      	movs	r2, #1
 80020c8:	2104      	movs	r1, #4
 80020ca:	f008 ffb5 	bl	800b038 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3310      	adds	r3, #16
 80020d8:	2204      	movs	r2, #4
 80020da:	2104      	movs	r1, #4
 80020dc:	f008 ffac 	bl	800b038 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	3350      	adds	r3, #80	@ 0x50
 80020ea:	2204      	movs	r2, #4
 80020ec:	2104      	movs	r1, #4
 80020ee:	f008 ffa3 	bl	800b038 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3390      	adds	r3, #144	@ 0x90
 80020fc:	2201      	movs	r2, #1
 80020fe:	2104      	movs	r1, #4
 8002100:	f008 ff9a 	bl	800b038 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	33a0      	adds	r3, #160	@ 0xa0
 800210e:	2204      	movs	r2, #4
 8002110:	2101      	movs	r1, #1
 8002112:	f008 ff91 	bl	800b038 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	33b0      	adds	r3, #176	@ 0xb0
 8002120:	2201      	movs	r2, #1
 8002122:	2104      	movs	r1, #4
 8002124:	f008 ff88 	bl	800b038 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	33c8      	adds	r3, #200	@ 0xc8
 8002132:	2204      	movs	r2, #4
 8002134:	2104      	movs	r1, #4
 8002136:	f008 ff7f 	bl	800b038 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002146:	2201      	movs	r2, #1
 8002148:	2104      	movs	r1, #4
 800214a:	f008 ff75 	bl	800b038 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800215a:	2204      	movs	r2, #4
 800215c:	2101      	movs	r1, #1
 800215e:	f008 ff6b 	bl	800b038 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800216e:	2204      	movs	r2, #4
 8002170:	2104      	movs	r1, #4
 8002172:	f008 ff61 	bl	800b038 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002182:	2204      	movs	r2, #4
 8002184:	2104      	movs	r1, #4
 8002186:	f008 ff57 	bl	800b038 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8002196:	2201      	movs	r2, #1
 8002198:	2104      	movs	r1, #4
 800219a:	f008 ff4d 	bl	800b038 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80021aa:	2201      	movs	r2, #1
 80021ac:	2104      	movs	r1, #4
 80021ae:	f008 ff43 	bl	800b038 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80021be:	2204      	movs	r2, #4
 80021c0:	2101      	movs	r1, #1
 80021c2:	f008 ff39 	bl	800b038 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80021d2:	2201      	movs	r2, #1
 80021d4:	2101      	movs	r1, #1
 80021d6:	f008 ff2f 	bl	800b038 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80021e6:	2201      	movs	r2, #1
 80021e8:	2101      	movs	r1, #1
 80021ea:	f008 ff25 	bl	800b038 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80021fa:	2201      	movs	r2, #1
 80021fc:	2104      	movs	r1, #4
 80021fe:	f008 ff1b 	bl	800b038 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800220e:	2201      	movs	r2, #1
 8002210:	2104      	movs	r1, #4
 8002212:	f008 ff11 	bl	800b038 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8002222:	2201      	movs	r2, #1
 8002224:	2101      	movs	r1, #1
 8002226:	f008 ff07 	bl	800b038 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8002236:	2201      	movs	r2, #1
 8002238:	2101      	movs	r1, #1
 800223a:	f008 fefd 	bl	800b038 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800224a:	2201      	movs	r2, #1
 800224c:	2101      	movs	r1, #1
 800224e:	f008 fef3 	bl	800b038 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800225e:	2201      	movs	r2, #1
 8002260:	2104      	movs	r1, #4
 8002262:	f008 fee9 	bl	800b038 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002272:	2201      	movs	r2, #1
 8002274:	2101      	movs	r1, #1
 8002276:	f008 fedf 	bl	800b038 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002286:	2204      	movs	r2, #4
 8002288:	2104      	movs	r1, #4
 800228a:	f008 fed5 	bl	800b038 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	33c4      	adds	r3, #196	@ 0xc4
 8002298:	2201      	movs	r2, #1
 800229a:	2101      	movs	r1, #1
 800229c:	f008 fecc 	bl	800b038 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80022ac:	2201      	movs	r2, #1
 80022ae:	2101      	movs	r1, #1
 80022b0:	f008 fec2 	bl	800b038 <arm_mat_init_f32>
}
 80022b4:	bf00      	nop
 80022b6:	3790      	adds	r7, #144	@ 0x90
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bdb0      	pop	{r4, r5, r7, pc}
 80022bc:	0800bd5c 	.word	0x0800bd5c

080022c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80022c4:	f001 fc85 	bl	8003bd2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80022c8:	f000 f81d 	bl	8002306 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022cc:	f7ff fd8c 	bl	8001de8 <MX_GPIO_Init>
	MX_DMA_Init();
 80022d0:	f7ff fd40 	bl	8001d54 <MX_DMA_Init>
	MX_ADC1_Init();
 80022d4:	f7ff fc32 	bl	8001b3c <MX_ADC1_Init>
	MX_TIM2_Init();
 80022d8:	f000 fe8e 	bl	8002ff8 <MX_TIM2_Init>
	MX_TIM3_Init();
 80022dc:	f000 feda 	bl	8003094 <MX_TIM3_Init>
	MX_TIM4_Init();
 80022e0:	f000 ff2e 	bl	8003140 <MX_TIM4_Init>
	MX_TIM5_Init();
 80022e4:	f000 ff82 	bl	80031ec <MX_TIM5_Init>
	MX_TIM8_Init();
 80022e8:	f000 ffce 	bl	8003288 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 80022ec:	f001 fa9a 	bl	8003824 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 80022f0:	f001 f892 	bl	8003418 <MX_TIM16_Init>
	MX_TIM1_Init();
 80022f4:	f000 fdec 	bl	8002ed0 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 80022f8:	f001 fa4a 	bl	8003790 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 80022fc:	f000 f880 	bl	8002400 <plotter_begin>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		plotter_update_sensors();
 8002300:	f000 fb34 	bl	800296c <plotter_update_sensors>
 8002304:	e7fc      	b.n	8002300 <main+0x40>

08002306 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002306:	b580      	push	{r7, lr}
 8002308:	b094      	sub	sp, #80	@ 0x50
 800230a:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800230c:	f107 0318 	add.w	r3, r7, #24
 8002310:	2238      	movs	r2, #56	@ 0x38
 8002312:	2100      	movs	r1, #0
 8002314:	4618      	mov	r0, r3
 8002316:	f008 ff5d 	bl	800b1d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002328:	2000      	movs	r0, #0
 800232a:	f003 ff47 	bl	80061bc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800232e:	2302      	movs	r3, #2
 8002330:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002332:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002338:	2340      	movs	r3, #64	@ 0x40
 800233a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800233c:	2302      	movs	r3, #2
 800233e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002340:	2302      	movs	r3, #2
 8002342:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002344:	2304      	movs	r3, #4
 8002346:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8002348:	2355      	movs	r3, #85	@ 0x55
 800234a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800234c:	2302      	movs	r3, #2
 800234e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002350:	2302      	movs	r3, #2
 8002352:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002354:	2302      	movs	r3, #2
 8002356:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002358:	f107 0318 	add.w	r3, r7, #24
 800235c:	4618      	mov	r0, r3
 800235e:	f003 ffe1 	bl	8006324 <HAL_RCC_OscConfig>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <SystemClock_Config+0x66>
		Error_Handler();
 8002368:	f000 f844 	bl	80023f4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800236c:	230f      	movs	r3, #15
 800236e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002370:	2303      	movs	r3, #3
 8002372:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8002380:	1d3b      	adds	r3, r7, #4
 8002382:	2104      	movs	r1, #4
 8002384:	4618      	mov	r0, r3
 8002386:	f004 fadf 	bl	8006948 <HAL_RCC_ClockConfig>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <SystemClock_Config+0x8e>
		Error_Handler();
 8002390:	f000 f830 	bl	80023f4 <Error_Handler>
	}
}
 8002394:	bf00      	nop
 8002396:	3750      	adds	r7, #80	@ 0x50
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_GPIO_EXTI_Callback>:
	default:
		return 0;
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EMER_Pin) {
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	2b10      	cmp	r3, #16
 80023aa:	d105      	bne.n	80023b8 <HAL_GPIO_EXTI_Callback+0x1c>
		rs_current_state = RS_EMERGENCY_TRIGGED;
 80023ac:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <HAL_GPIO_EXTI_Callback+0x28>)
 80023ae:	2205      	movs	r2, #5
 80023b0:	701a      	strb	r2, [r3, #0]
		emer_state = PUSHED;
 80023b2:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
	}
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	200000e8 	.word	0x200000e8
 80023c8:	200000eb 	.word	0x200000eb

080023cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {

	}
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023f8:	b672      	cpsid	i
}
 80023fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023fc:	bf00      	nop
 80023fe:	e7fd      	b.n	80023fc <Error_Handler+0x8>

08002400 <plotter_begin>:
float joystick_y = 0.0f;
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int b1, b2, b3, b4, prox, emer, up_photo, low_photo, up_lim, low_lim;
void plotter_begin() {
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	ed2d 8b02 	vpush	{d8}
 8002406:	b083      	sub	sp, #12
 8002408:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 800240a:	2100      	movs	r1, #0
 800240c:	48c8      	ldr	r0, [pc, #800]	@ (8002730 <plotter_begin+0x330>)
 800240e:	f000 fb8f 	bl	8002b30 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8002412:	eddf 2ac8 	vldr	s5, [pc, #800]	@ 8002734 <plotter_begin+0x334>
 8002416:	ed9f 2ac8 	vldr	s4, [pc, #800]	@ 8002738 <plotter_begin+0x338>
 800241a:	eddf 1ac8 	vldr	s3, [pc, #800]	@ 800273c <plotter_begin+0x33c>
 800241e:	ed9f 1ac7 	vldr	s2, [pc, #796]	@ 800273c <plotter_begin+0x33c>
 8002422:	eddf 0ac7 	vldr	s1, [pc, #796]	@ 8002740 <plotter_begin+0x340>
 8002426:	ed9f 0ac3 	vldr	s0, [pc, #780]	@ 8002734 <plotter_begin+0x334>
 800242a:	48c1      	ldr	r0, [pc, #772]	@ (8002730 <plotter_begin+0x330>)
 800242c:	f000 fbde 	bl	8002bec <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8002430:	2102      	movs	r1, #2
 8002432:	48c4      	ldr	r0, [pc, #784]	@ (8002744 <plotter_begin+0x344>)
 8002434:	f000 fb7c 	bl	8002b30 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8002438:	ed9f 3abe 	vldr	s6, [pc, #760]	@ 8002734 <plotter_begin+0x334>
 800243c:	eddf 2abe 	vldr	s5, [pc, #760]	@ 8002738 <plotter_begin+0x338>
 8002440:	ed9f 2abe 	vldr	s4, [pc, #760]	@ 800273c <plotter_begin+0x33c>
 8002444:	eddf 1abd 	vldr	s3, [pc, #756]	@ 800273c <plotter_begin+0x33c>
 8002448:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800244c:	eddf 0abc 	vldr	s1, [pc, #752]	@ 8002740 <plotter_begin+0x340>
 8002450:	ed9f 0ab8 	vldr	s0, [pc, #736]	@ 8002734 <plotter_begin+0x334>
 8002454:	48bb      	ldr	r0, [pc, #748]	@ (8002744 <plotter_begin+0x344>)
 8002456:	f000 fbf4 	bl	8002c42 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 800245a:	2100      	movs	r1, #0
 800245c:	48ba      	ldr	r0, [pc, #744]	@ (8002748 <plotter_begin+0x348>)
 800245e:	f000 fb67 	bl	8002b30 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8002462:	eef3 2a09 	vmov.f32	s5, #57	@ 0x41c80000  25.0
 8002466:	eebb 2a09 	vmov.f32	s4, #185	@ 0xc1c80000 -25.0
 800246a:	eddf 1ab4 	vldr	s3, [pc, #720]	@ 800273c <plotter_begin+0x33c>
 800246e:	ed9f 1ab3 	vldr	s2, [pc, #716]	@ 800273c <plotter_begin+0x33c>
 8002472:	eddf 0ab3 	vldr	s1, [pc, #716]	@ 8002740 <plotter_begin+0x340>
 8002476:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800247a:	48b3      	ldr	r0, [pc, #716]	@ (8002748 <plotter_begin+0x348>)
 800247c:	f000 fbb6 	bl	8002bec <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8002480:	2102      	movs	r1, #2
 8002482:	48b2      	ldr	r0, [pc, #712]	@ (800274c <plotter_begin+0x34c>)
 8002484:	f000 fb54 	bl	8002b30 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8002488:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 800248c:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8002490:	ed9f 2aaa 	vldr	s4, [pc, #680]	@ 800273c <plotter_begin+0x33c>
 8002494:	eddf 1aa9 	vldr	s3, [pc, #676]	@ 800273c <plotter_begin+0x33c>
 8002498:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800249c:	eddf 0aa8 	vldr	s1, [pc, #672]	@ 8002740 <plotter_begin+0x340>
 80024a0:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80024a4:	48a9      	ldr	r0, [pc, #676]	@ (800274c <plotter_begin+0x34c>)
 80024a6:	f000 fbcc 	bl	8002c42 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 80024aa:	2100      	movs	r1, #0
 80024ac:	48a8      	ldr	r0, [pc, #672]	@ (8002750 <plotter_begin+0x350>)
 80024ae:	f000 fb3f 	bl	8002b30 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80024b2:	4ba8      	ldr	r3, [pc, #672]	@ (8002754 <plotter_begin+0x354>)
 80024b4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7fe fa9a 	bl	80009f4 <__aeabi_d2f>
 80024c0:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 80024c2:	4ba4      	ldr	r3, [pc, #656]	@ (8002754 <plotter_begin+0x354>)
 80024c4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	f7fe fa92 	bl	80009f4 <__aeabi_d2f>
 80024d0:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 80024da:	4b9e      	ldr	r3, [pc, #632]	@ (8002754 <plotter_begin+0x354>)
 80024dc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80024e0:	4610      	mov	r0, r2
 80024e2:	4619      	mov	r1, r3
 80024e4:	f7fe fa86 	bl	80009f4 <__aeabi_d2f>
 80024e8:	4603      	mov	r3, r0
 80024ea:	ee02 3a90 	vmov	s5, r3
 80024ee:	eeb0 2a48 	vmov.f32	s4, s16
 80024f2:	eddf 1a92 	vldr	s3, [pc, #584]	@ 800273c <plotter_begin+0x33c>
 80024f6:	ed9f 1a91 	vldr	s2, [pc, #580]	@ 800273c <plotter_begin+0x33c>
 80024fa:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8002740 <plotter_begin+0x340>
 80024fe:	ee00 4a10 	vmov	s0, r4
 8002502:	4893      	ldr	r0, [pc, #588]	@ (8002750 <plotter_begin+0x350>)
 8002504:	f000 fb72 	bl	8002bec <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8002508:	2102      	movs	r1, #2
 800250a:	4893      	ldr	r0, [pc, #588]	@ (8002758 <plotter_begin+0x358>)
 800250c:	f000 fb10 	bl	8002b30 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8002510:	4b90      	ldr	r3, [pc, #576]	@ (8002754 <plotter_begin+0x354>)
 8002512:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	f7fe fa6b 	bl	80009f4 <__aeabi_d2f>
 800251e:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8002520:	4b8c      	ldr	r3, [pc, #560]	@ (8002754 <plotter_begin+0x354>)
 8002522:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	f7fe fa63 	bl	80009f4 <__aeabi_d2f>
 800252e:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8002530:	ee07 3a90 	vmov	s15, r3
 8002534:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8002538:	4b86      	ldr	r3, [pc, #536]	@ (8002754 <plotter_begin+0x354>)
 800253a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	f7fe fa57 	bl	80009f4 <__aeabi_d2f>
 8002546:	4603      	mov	r3, r0
 8002548:	ee03 3a10 	vmov	s6, r3
 800254c:	eef0 2a48 	vmov.f32	s5, s16
 8002550:	ed9f 2a7a 	vldr	s4, [pc, #488]	@ 800273c <plotter_begin+0x33c>
 8002554:	eddf 1a79 	vldr	s3, [pc, #484]	@ 800273c <plotter_begin+0x33c>
 8002558:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800255c:	eddf 0a78 	vldr	s1, [pc, #480]	@ 8002740 <plotter_begin+0x340>
 8002560:	ee00 4a10 	vmov	s0, r4
 8002564:	487c      	ldr	r0, [pc, #496]	@ (8002758 <plotter_begin+0x358>)
 8002566:	f000 fb6c 	bl	8002c42 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 800256a:	2100      	movs	r1, #0
 800256c:	487b      	ldr	r0, [pc, #492]	@ (800275c <plotter_begin+0x35c>)
 800256e:	f000 fadf 	bl	8002b30 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8002572:	4b7b      	ldr	r3, [pc, #492]	@ (8002760 <plotter_begin+0x360>)
 8002574:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002578:	4610      	mov	r0, r2
 800257a:	4619      	mov	r1, r3
 800257c:	f7fe fa3a 	bl	80009f4 <__aeabi_d2f>
 8002580:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8002582:	4b77      	ldr	r3, [pc, #476]	@ (8002760 <plotter_begin+0x360>)
 8002584:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f7fe fa32 	bl	80009f4 <__aeabi_d2f>
 8002590:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 800259a:	4b71      	ldr	r3, [pc, #452]	@ (8002760 <plotter_begin+0x360>)
 800259c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80025a0:	4610      	mov	r0, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	f7fe fa26 	bl	80009f4 <__aeabi_d2f>
 80025a8:	4603      	mov	r3, r0
 80025aa:	ee02 3a90 	vmov	s5, r3
 80025ae:	eeb0 2a48 	vmov.f32	s4, s16
 80025b2:	eddf 1a62 	vldr	s3, [pc, #392]	@ 800273c <plotter_begin+0x33c>
 80025b6:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 800273c <plotter_begin+0x33c>
 80025ba:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8002740 <plotter_begin+0x340>
 80025be:	ee00 4a10 	vmov	s0, r4
 80025c2:	4866      	ldr	r0, [pc, #408]	@ (800275c <plotter_begin+0x35c>)
 80025c4:	f000 fb12 	bl	8002bec <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 80025c8:	2102      	movs	r1, #2
 80025ca:	4866      	ldr	r0, [pc, #408]	@ (8002764 <plotter_begin+0x364>)
 80025cc:	f000 fab0 	bl	8002b30 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80025d0:	4b63      	ldr	r3, [pc, #396]	@ (8002760 <plotter_begin+0x360>)
 80025d2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f7fe fa0b 	bl	80009f4 <__aeabi_d2f>
 80025de:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 80025e0:	4b5f      	ldr	r3, [pc, #380]	@ (8002760 <plotter_begin+0x360>)
 80025e2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	f7fe fa03 	bl	80009f4 <__aeabi_d2f>
 80025ee:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80025f0:	ee07 3a90 	vmov	s15, r3
 80025f4:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 80025f8:	4b59      	ldr	r3, [pc, #356]	@ (8002760 <plotter_begin+0x360>)
 80025fa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80025fe:	4610      	mov	r0, r2
 8002600:	4619      	mov	r1, r3
 8002602:	f7fe f9f7 	bl	80009f4 <__aeabi_d2f>
 8002606:	4603      	mov	r3, r0
 8002608:	ee03 3a10 	vmov	s6, r3
 800260c:	eef0 2a48 	vmov.f32	s5, s16
 8002610:	ed9f 2a4a 	vldr	s4, [pc, #296]	@ 800273c <plotter_begin+0x33c>
 8002614:	eddf 1a49 	vldr	s3, [pc, #292]	@ 800273c <plotter_begin+0x33c>
 8002618:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800261c:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8002740 <plotter_begin+0x340>
 8002620:	ee00 4a10 	vmov	s0, r4
 8002624:	484f      	ldr	r0, [pc, #316]	@ (8002764 <plotter_begin+0x364>)
 8002626:	f000 fb0c 	bl	8002c42 <SIGNAL_config_square>

	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 800262a:	4b4a      	ldr	r3, [pc, #296]	@ (8002754 <plotter_begin+0x354>)
 800262c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius;
 8002630:	4b4d      	ldr	r3, [pc, #308]	@ (8002768 <plotter_begin+0x368>)
 8002632:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002636:	f7fd ffab 	bl	8000590 <__aeabi_dmul>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 800263e:	4945      	ldr	r1, [pc, #276]	@ (8002754 <plotter_begin+0x354>)
 8002640:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 0.5;
 8002644:	4b43      	ldr	r3, [pc, #268]	@ (8002754 <plotter_begin+0x354>)
 8002646:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	4b47      	ldr	r3, [pc, #284]	@ (800276c <plotter_begin+0x36c>)
 8002650:	f7fd ff9e 	bl	8000590 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	493e      	ldr	r1, [pc, #248]	@ (8002754 <plotter_begin+0x354>)
 800265a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0);
 800265e:	4b42      	ldr	r3, [pc, #264]	@ (8002768 <plotter_begin+0x368>)
 8002660:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	f7fd fddc 	bl	8000224 <__adddf3>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	f7fe f9be 	bl	80009f4 <__aeabi_d2f>
 8002678:	4603      	mov	r3, r0
 800267a:	ee00 3a90 	vmov	s1, r3
 800267e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002686:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800268a:	4939      	ldr	r1, [pc, #228]	@ (8002770 <plotter_begin+0x370>)
 800268c:	4839      	ldr	r0, [pc, #228]	@ (8002774 <plotter_begin+0x374>)
 800268e:	f7ff f9e5 	bl	8001a5c <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8002692:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 800273c <plotter_begin+0x33c>
 8002696:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800269a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800269e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026a2:	4935      	ldr	r1, [pc, #212]	@ (8002778 <plotter_begin+0x378>)
 80026a4:	4835      	ldr	r0, [pc, #212]	@ (800277c <plotter_begin+0x37c>)
 80026a6:	f7ff f9d9 	bl	8001a5c <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 80026aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80026b4:	2204      	movs	r2, #4
 80026b6:	4932      	ldr	r1, [pc, #200]	@ (8002780 <plotter_begin+0x380>)
 80026b8:	4832      	ldr	r0, [pc, #200]	@ (8002784 <plotter_begin+0x384>)
 80026ba:	f7fe fc63 	bl	8000f84 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 80026be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	4b30      	ldr	r3, [pc, #192]	@ (8002788 <plotter_begin+0x388>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	492d      	ldr	r1, [pc, #180]	@ (8002780 <plotter_begin+0x380>)
 80026ca:	4830      	ldr	r0, [pc, #192]	@ (800278c <plotter_begin+0x38c>)
 80026cc:	f7fe fc5a 	bl	8000f84 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 80026d0:	220c      	movs	r2, #12
 80026d2:	492f      	ldr	r1, [pc, #188]	@ (8002790 <plotter_begin+0x390>)
 80026d4:	482f      	ldr	r0, [pc, #188]	@ (8002794 <plotter_begin+0x394>)
 80026d6:	f7fe ff93 	bl	8001600 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 80026da:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800273c <plotter_begin+0x33c>
 80026de:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8002798 <plotter_begin+0x398>
 80026e2:	4828      	ldr	r0, [pc, #160]	@ (8002784 <plotter_begin+0x384>)
 80026e4:	f7fe fc72 	bl	8000fcc <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 80026e8:	eddf 0a14 	vldr	s1, [pc, #80]	@ 800273c <plotter_begin+0x33c>
 80026ec:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8002798 <plotter_begin+0x398>
 80026f0:	4826      	ldr	r0, [pc, #152]	@ (800278c <plotter_begin+0x38c>)
 80026f2:	f7fe fc6b 	bl	8000fcc <MDXX_set_range>
	plotter_pen_up();
 80026f6:	f000 fa0b 	bl	8002b10 <plotter_pen_up>

	PID_CONTROLLER_Init(&prismatic_position_pid, 500, 5, 70,
			ZGX45RGG_400RPM_Constant.qd_max);
 80026fa:	4b16      	ldr	r3, [pc, #88]	@ (8002754 <plotter_begin+0x354>)
 80026fc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&prismatic_position_pid, 500, 5, 70,
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	f7fe f976 	bl	80009f4 <__aeabi_d2f>
 8002708:	4603      	mov	r3, r0
 800270a:	ee01 3a90 	vmov	s3, r3
 800270e:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 800279c <plotter_begin+0x39c>
 8002712:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8002716:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 80027a8 <plotter_begin+0x3a8>
 800271a:	4821      	ldr	r0, [pc, #132]	@ (80027a0 <plotter_begin+0x3a0>)
 800271c:	f7fe fc08 	bl	8000f30 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 7, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8002720:	4b0c      	ldr	r3, [pc, #48]	@ (8002754 <plotter_begin+0x354>)
 8002722:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 7, 0,
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	f7fe f963 	bl	80009f4 <__aeabi_d2f>
 800272e:	e03d      	b.n	80027ac <plotter_begin+0x3ac>
 8002730:	200004e0 	.word	0x200004e0
 8002734:	477fff00 	.word	0x477fff00
 8002738:	c77fff00 	.word	0xc77fff00
 800273c:	00000000 	.word	0x00000000
 8002740:	3dcccccd 	.word	0x3dcccccd
 8002744:	20000524 	.word	0x20000524
 8002748:	20000568 	.word	0x20000568
 800274c:	200005ac 	.word	0x200005ac
 8002750:	200005f0 	.word	0x200005f0
 8002754:	20000060 	.word	0x20000060
 8002758:	20000634 	.word	0x20000634
 800275c:	20000678 	.word	0x20000678
 8002760:	20000000 	.word	0x20000000
 8002764:	200006bc 	.word	0x200006bc
 8002768:	200000c0 	.word	0x200000c0
 800276c:	3fe00000 	.word	0x3fe00000
 8002770:	20001780 	.word	0x20001780
 8002774:	20000370 	.word	0x20000370
 8002778:	200016b4 	.word	0x200016b4
 800277c:	200003cc 	.word	0x200003cc
 8002780:	20001918 	.word	0x20001918
 8002784:	200002d8 	.word	0x200002d8
 8002788:	48000800 	.word	0x48000800
 800278c:	20000324 	.word	0x20000324
 8002790:	2000151c 	.word	0x2000151c
 8002794:	200004b0 	.word	0x200004b0
 8002798:	44fa0000 	.word	0x44fa0000
 800279c:	428c0000 	.word	0x428c0000
 80027a0:	20000428 	.word	0x20000428
 80027a4:	00000000 	.word	0x00000000
 80027a8:	43fa0000 	.word	0x43fa0000
 80027ac:	4603      	mov	r3, r0
 80027ae:	ee01 3a90 	vmov	s3, r3
 80027b2:	ed1f 1a04 	vldr	s2, [pc, #-16]	@ 80027a4 <plotter_begin+0x3a4>
 80027b6:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 80027ba:	ed1f 0a05 	vldr	s0, [pc, #-20]	@ 80027a8 <plotter_begin+0x3a8>
 80027be:	4847      	ldr	r0, [pc, #284]	@ (80028dc <plotter_begin+0x4dc>)
 80027c0:	f7fe fbb6 	bl	8000f30 <PID_CONTROLLER_Init>

	//unit test
	//25 1e-8 0
	//2000 80 0
	PID_CONTROLLER_Init(&revolute_position_pid, 500, 1e-9, 72,
			ZGX45RGG_150RPM_Constant.qd_max);
 80027c4:	4b46      	ldr	r3, [pc, #280]	@ (80028e0 <plotter_begin+0x4e0>)
 80027c6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 500, 1e-9, 72,
 80027ca:	4610      	mov	r0, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	f7fe f911 	bl	80009f4 <__aeabi_d2f>
 80027d2:	4603      	mov	r3, r0
 80027d4:	ee01 3a90 	vmov	s3, r3
 80027d8:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 80028e4 <plotter_begin+0x4e4>
 80027dc:	eddf 0a42 	vldr	s1, [pc, #264]	@ 80028e8 <plotter_begin+0x4e8>
 80027e0:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 80028ec <plotter_begin+0x4ec>
 80027e4:	4842      	ldr	r0, [pc, #264]	@ (80028f0 <plotter_begin+0x4f0>)
 80027e6:	f7fe fba3 	bl	8000f30 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 1000, 20, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 80027ea:	4b3d      	ldr	r3, [pc, #244]	@ (80028e0 <plotter_begin+0x4e0>)
 80027ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 1000, 20, 0,
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	f7fe f8fe 	bl	80009f4 <__aeabi_d2f>
 80027f8:	4603      	mov	r3, r0
 80027fa:	ee01 3a90 	vmov	s3, r3
 80027fe:	ed9f 1a3d 	vldr	s2, [pc, #244]	@ 80028f4 <plotter_begin+0x4f4>
 8002802:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8002806:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 80028f8 <plotter_begin+0x4f8>
 800280a:	483c      	ldr	r0, [pc, #240]	@ (80028fc <plotter_begin+0x4fc>)
 800280c:	f7fe fb90 	bl	8000f30 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8002810:	4933      	ldr	r1, [pc, #204]	@ (80028e0 <plotter_begin+0x4e0>)
 8002812:	483b      	ldr	r0, [pc, #236]	@ (8002900 <plotter_begin+0x500>)
 8002814:	f7fe fcb4 	bl	8001180 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8002818:	493a      	ldr	r1, [pc, #232]	@ (8002904 <plotter_begin+0x504>)
 800281a:	483b      	ldr	r0, [pc, #236]	@ (8002908 <plotter_begin+0x508>)
 800281c:	f7fe fcd0 	bl	80011c0 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8002820:	4a3a      	ldr	r2, [pc, #232]	@ (800290c <plotter_begin+0x50c>)
 8002822:	492f      	ldr	r1, [pc, #188]	@ (80028e0 <plotter_begin+0x4e0>)
 8002824:	483a      	ldr	r0, [pc, #232]	@ (8002910 <plotter_begin+0x510>)
 8002826:	f7fe fcb9 	bl	800119c <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 800282a:	4a38      	ldr	r2, [pc, #224]	@ (800290c <plotter_begin+0x50c>)
 800282c:	4935      	ldr	r1, [pc, #212]	@ (8002904 <plotter_begin+0x504>)
 800282e:	4839      	ldr	r0, [pc, #228]	@ (8002914 <plotter_begin+0x514>)
 8002830:	f7fe fcd4 	bl	80011dc <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE,
 8002834:	2304      	movs	r3, #4
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8002918 <plotter_begin+0x518>
 800283c:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 800291c <plotter_begin+0x51c>
 8002840:	2328      	movs	r3, #40	@ 0x28
 8002842:	4a37      	ldr	r2, [pc, #220]	@ (8002920 <plotter_begin+0x520>)
 8002844:	4937      	ldr	r1, [pc, #220]	@ (8002924 <plotter_begin+0x524>)
 8002846:	4838      	ldr	r0, [pc, #224]	@ (8002928 <plotter_begin+0x528>)
 8002848:	f7fe faba 	bl	8000dc0 <ADC_DMA_Init>
	ADC_CHANNELS, 3.3f, 4095.0f);
	ADC_DMA_Start(&adc_dma);
 800284c:	4836      	ldr	r0, [pc, #216]	@ (8002928 <plotter_begin+0x528>)
 800284e:	f7fe faec 	bl	8000e2a <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002852:	eddf 0a29 	vldr	s1, [pc, #164]	@ 80028f8 <plotter_begin+0x4f8>
 8002856:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800285a:	211f      	movs	r1, #31
 800285c:	4833      	ldr	r0, [pc, #204]	@ (800292c <plotter_begin+0x52c>)
 800285e:	f7fe fccf 	bl	8001200 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002862:	eddf 0a25 	vldr	s1, [pc, #148]	@ 80028f8 <plotter_begin+0x4f8>
 8002866:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800286a:	211f      	movs	r1, #31
 800286c:	4830      	ldr	r0, [pc, #192]	@ (8002930 <plotter_begin+0x530>)
 800286e:	f7fe fcc7 	bl	8001200 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002872:	eddf 0a21 	vldr	s1, [pc, #132]	@ 80028f8 <plotter_begin+0x4f8>
 8002876:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800287a:	211f      	movs	r1, #31
 800287c:	482d      	ldr	r0, [pc, #180]	@ (8002934 <plotter_begin+0x534>)
 800287e:	f7fe fcbf 	bl	8001200 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002882:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80028f8 <plotter_begin+0x4f8>
 8002886:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800288a:	211f      	movs	r1, #31
 800288c:	482a      	ldr	r0, [pc, #168]	@ (8002938 <plotter_begin+0x538>)
 800288e:	f7fe fcb7 	bl	8001200 <FIR_init>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8002892:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 800293c <plotter_begin+0x53c>
 8002896:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800289a:	4a29      	ldr	r2, [pc, #164]	@ (8002940 <plotter_begin+0x540>)
 800289c:	4929      	ldr	r1, [pc, #164]	@ (8002944 <plotter_begin+0x544>)
 800289e:	482a      	ldr	r0, [pc, #168]	@ (8002948 <plotter_begin+0x548>)
 80028a0:	f7ff fb52 	bl	8001f48 <Kalman_Start>
	REVOLUTE_R);
	Kalman_Start(&prismatic_kalman, prismatic_A, prismatic_B, PRISMATIC_Q,
 80028a4:	eddf 0a25 	vldr	s1, [pc, #148]	@ 800293c <plotter_begin+0x53c>
 80028a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80028ac:	4a27      	ldr	r2, [pc, #156]	@ (800294c <plotter_begin+0x54c>)
 80028ae:	4928      	ldr	r1, [pc, #160]	@ (8002950 <plotter_begin+0x550>)
 80028b0:	4828      	ldr	r0, [pc, #160]	@ (8002954 <plotter_begin+0x554>)
 80028b2:	f7ff fb49 	bl	8001f48 <Kalman_Start>
	PRISMATIC_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 80028b6:	23c8      	movs	r3, #200	@ 0xc8
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	2315      	movs	r3, #21
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	4b26      	ldr	r3, [pc, #152]	@ (8002958 <plotter_begin+0x558>)
 80028c0:	4a26      	ldr	r2, [pc, #152]	@ (800295c <plotter_begin+0x55c>)
 80028c2:	4927      	ldr	r1, [pc, #156]	@ (8002960 <plotter_begin+0x560>)
 80028c4:	4827      	ldr	r0, [pc, #156]	@ (8002964 <plotter_begin+0x564>)
 80028c6:	f7fe fe33 	bl	8001530 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80028ca:	4827      	ldr	r0, [pc, #156]	@ (8002968 <plotter_begin+0x568>)
 80028cc:	f004 fd7a 	bl	80073c4 <HAL_TIM_Base_Start_IT>
}
 80028d0:	bf00      	nop
 80028d2:	3704      	adds	r7, #4
 80028d4:	46bd      	mov	sp, r7
 80028d6:	ecbd 8b02 	vpop	{d8}
 80028da:	bd90      	pop	{r4, r7, pc}
 80028dc:	20000444 	.word	0x20000444
 80028e0:	20000000 	.word	0x20000000
 80028e4:	42900000 	.word	0x42900000
 80028e8:	3089705f 	.word	0x3089705f
 80028ec:	43fa0000 	.word	0x43fa0000
 80028f0:	20000460 	.word	0x20000460
 80028f4:	00000000 	.word	0x00000000
 80028f8:	447a0000 	.word	0x447a0000
 80028fc:	2000047c 	.word	0x2000047c
 8002900:	200004a4 	.word	0x200004a4
 8002904:	20000060 	.word	0x20000060
 8002908:	20000498 	.word	0x20000498
 800290c:	200000c0 	.word	0x200000c0
 8002910:	200004a8 	.word	0x200004a8
 8002914:	2000049c 	.word	0x2000049c
 8002918:	457ff000 	.word	0x457ff000
 800291c:	40533333 	.word	0x40533333
 8002920:	20000e30 	.word	0x20000e30
 8002924:	20000208 	.word	0x20000208
 8002928:	200004c8 	.word	0x200004c8
 800292c:	2000070c 	.word	0x2000070c
 8002930:	20000700 	.word	0x20000700
 8002934:	20000724 	.word	0x20000724
 8002938:	20000718 	.word	0x20000718
 800293c:	3d4ccccd 	.word	0x3d4ccccd
 8002940:	2000017c 	.word	0x2000017c
 8002944:	2000013c 	.word	0x2000013c
 8002948:	20000ab0 	.word	0x20000ab0
 800294c:	2000012c 	.word	0x2000012c
 8002950:	200000ec 	.word	0x200000ec
 8002954:	20000730 	.word	0x20000730
 8002958:	20001358 	.word	0x20001358
 800295c:	200019e4 	.word	0x200019e4
 8002960:	20001b7c 	.word	0x20001b7c
 8002964:	20000e80 	.word	0x20000e80
 8002968:	200015e8 	.word	0x200015e8

0800296c <plotter_update_sensors>:
void plotter_reset() {
	QEI_reset(&prismatic_encoder);
	QEI_reset(&revolute_encoder);
}

void plotter_update_sensors() {
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_X_CHANNEL, 1.0);
 8002970:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002974:	2106      	movs	r1, #6
 8002976:	4854      	ldr	r0, [pc, #336]	@ (8002ac8 <plotter_update_sensors+0x15c>)
 8002978:	f7fe fab2 	bl	8000ee0 <ADC_DMA_GetJoystick>
 800297c:	eef0 7a40 	vmov.f32	s15, s0
 8002980:	4b52      	ldr	r3, [pc, #328]	@ (8002acc <plotter_update_sensors+0x160>)
 8002982:	edc3 7a00 	vstr	s15, [r3]
	joystick_y = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_Y_CHANNEL, 1.0);
 8002986:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800298a:	2107      	movs	r1, #7
 800298c:	484e      	ldr	r0, [pc, #312]	@ (8002ac8 <plotter_update_sensors+0x15c>)
 800298e:	f7fe faa7 	bl	8000ee0 <ADC_DMA_GetJoystick>
 8002992:	eef0 7a40 	vmov.f32	s15, s0
 8002996:	4b4e      	ldr	r3, [pc, #312]	@ (8002ad0 <plotter_update_sensors+0x164>)
 8002998:	edc3 7a00 	vstr	s15, [r3]

	b1 = !HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 800299c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029a0:	484c      	ldr	r0, [pc, #304]	@ (8002ad4 <plotter_update_sensors+0x168>)
 80029a2:	f003 fbc3 	bl	800612c <HAL_GPIO_ReadPin>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf0c      	ite	eq
 80029ac:	2301      	moveq	r3, #1
 80029ae:	2300      	movne	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	4b48      	ldr	r3, [pc, #288]	@ (8002ad8 <plotter_update_sensors+0x16c>)
 80029b6:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(SAVE_GPIO_Port, SAVE_Pin);
 80029b8:	2180      	movs	r1, #128	@ 0x80
 80029ba:	4848      	ldr	r0, [pc, #288]	@ (8002adc <plotter_update_sensors+0x170>)
 80029bc:	f003 fbb6 	bl	800612c <HAL_GPIO_ReadPin>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bf0c      	ite	eq
 80029c6:	2301      	moveq	r3, #1
 80029c8:	2300      	movne	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b44      	ldr	r3, [pc, #272]	@ (8002ae0 <plotter_update_sensors+0x174>)
 80029d0:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(DELETE_GPIO_Port, DELETE_Pin);
 80029d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80029d6:	483f      	ldr	r0, [pc, #252]	@ (8002ad4 <plotter_update_sensors+0x168>)
 80029d8:	f003 fba8 	bl	800612c <HAL_GPIO_ReadPin>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bf0c      	ite	eq
 80029e2:	2301      	moveq	r3, #1
 80029e4:	2300      	movne	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b3e      	ldr	r3, [pc, #248]	@ (8002ae4 <plotter_update_sensors+0x178>)
 80029ec:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(RESET_SYS_GPIO_Port, RESET_SYS_Pin);
 80029ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029f2:	4838      	ldr	r0, [pc, #224]	@ (8002ad4 <plotter_update_sensors+0x168>)
 80029f4:	f003 fb9a 	bl	800612c <HAL_GPIO_ReadPin>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	bf0c      	ite	eq
 80029fe:	2301      	moveq	r3, #1
 8002a00:	2300      	movne	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b38      	ldr	r3, [pc, #224]	@ (8002ae8 <plotter_update_sensors+0x17c>)
 8002a08:	601a      	str	r2, [r3, #0]

	prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8002a0a:	2120      	movs	r1, #32
 8002a0c:	4833      	ldr	r0, [pc, #204]	@ (8002adc <plotter_update_sensors+0x170>)
 8002a0e:	f003 fb8d 	bl	800612c <HAL_GPIO_ReadPin>
 8002a12:	4603      	mov	r3, r0
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b35      	ldr	r3, [pc, #212]	@ (8002aec <plotter_update_sensors+0x180>)
 8002a18:	601a      	str	r2, [r3, #0]
	up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 8002a1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a1e:	482f      	ldr	r0, [pc, #188]	@ (8002adc <plotter_update_sensors+0x170>)
 8002a20:	f003 fb84 	bl	800612c <HAL_GPIO_ReadPin>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b31      	ldr	r3, [pc, #196]	@ (8002af0 <plotter_update_sensors+0x184>)
 8002a2a:	601a      	str	r2, [r3, #0]
	low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8002a2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a34:	f003 fb7a 	bl	800612c <HAL_GPIO_ReadPin>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002af4 <plotter_update_sensors+0x188>)
 8002a3e:	601a      	str	r2, [r3, #0]
	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8002a40:	2102      	movs	r1, #2
 8002a42:	4826      	ldr	r0, [pc, #152]	@ (8002adc <plotter_update_sensors+0x170>)
 8002a44:	f003 fb72 	bl	800612c <HAL_GPIO_ReadPin>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002af8 <plotter_update_sensors+0x18c>)
 8002a4e:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8002a50:	2104      	movs	r1, #4
 8002a52:	4822      	ldr	r0, [pc, #136]	@ (8002adc <plotter_update_sensors+0x170>)
 8002a54:	f003 fb6a 	bl	800612c <HAL_GPIO_ReadPin>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4b27      	ldr	r3, [pc, #156]	@ (8002afc <plotter_update_sensors+0x190>)
 8002a5e:	601a      	str	r2, [r3, #0]

	emer = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8002a60:	2110      	movs	r1, #16
 8002a62:	481e      	ldr	r0, [pc, #120]	@ (8002adc <plotter_update_sensors+0x170>)
 8002a64:	f003 fb62 	bl	800612c <HAL_GPIO_ReadPin>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b24      	ldr	r3, [pc, #144]	@ (8002b00 <plotter_update_sensors+0x194>)
 8002a6e:	601a      	str	r2, [r3, #0]

	if (up_lim) {
 8002a70:	4b21      	ldr	r3, [pc, #132]	@ (8002af8 <plotter_update_sensors+0x18c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <plotter_update_sensors+0x114>
		servo_state = PEN_UP;
 8002a78:	4b22      	ldr	r3, [pc, #136]	@ (8002b04 <plotter_update_sensors+0x198>)
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	e00a      	b.n	8002a96 <plotter_update_sensors+0x12a>
	} else if (low_lim) {
 8002a80:	4b1e      	ldr	r3, [pc, #120]	@ (8002afc <plotter_update_sensors+0x190>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <plotter_update_sensors+0x124>
		servo_state = PEN_DOWN;
 8002a88:	4b1e      	ldr	r3, [pc, #120]	@ (8002b04 <plotter_update_sensors+0x198>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e002      	b.n	8002a96 <plotter_update_sensors+0x12a>
	} else {
		servo_state = PEN_IDLE;
 8002a90:	4b1c      	ldr	r3, [pc, #112]	@ (8002b04 <plotter_update_sensors+0x198>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
	}

	if (up_photo) {
 8002a96:	4b16      	ldr	r3, [pc, #88]	@ (8002af0 <plotter_update_sensors+0x184>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <plotter_update_sensors+0x13a>
		prismatic_state = PP_AT_TOP_END_POSITION;
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b08 <plotter_update_sensors+0x19c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	e006      	b.n	8002ab4 <plotter_update_sensors+0x148>
	} else if (low_photo) {
 8002aa6:	4b13      	ldr	r3, [pc, #76]	@ (8002af4 <plotter_update_sensors+0x188>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <plotter_update_sensors+0x148>
		prismatic_state = PP_AT_BOTTOM_END_POSITION;
 8002aae:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <plotter_update_sensors+0x19c>)
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	701a      	strb	r2, [r3, #0]
	}

	if (prox) {
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8002aec <plotter_update_sensors+0x180>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <plotter_update_sensors+0x156>
		revolute_state = RP_AT_HOME_POSITION;
 8002abc:	4b13      	ldr	r3, [pc, #76]	@ (8002b0c <plotter_update_sensors+0x1a0>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
	}

//    prismatic_current = ADC_DMA_ComputeCurrent(&adc_dma, PRISMATIC_CURRENT_CHANNEL, PRISMATIC_CURRENT_OFFSET);
//    revolute_current = ADC_DMA_ComputeCurrent(&adc_dma, REVOLUTE_CURRENT_CHANNEL, REVOLUTE_CURRENT_OFFSET);
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200004c8 	.word	0x200004c8
 8002acc:	200014e8 	.word	0x200014e8
 8002ad0:	200014ec 	.word	0x200014ec
 8002ad4:	48000800 	.word	0x48000800
 8002ad8:	200014f0 	.word	0x200014f0
 8002adc:	48000400 	.word	0x48000400
 8002ae0:	200014f4 	.word	0x200014f4
 8002ae4:	200014f8 	.word	0x200014f8
 8002ae8:	200014fc 	.word	0x200014fc
 8002aec:	20001500 	.word	0x20001500
 8002af0:	20001508 	.word	0x20001508
 8002af4:	2000150c 	.word	0x2000150c
 8002af8:	20001510 	.word	0x20001510
 8002afc:	20001514 	.word	0x20001514
 8002b00:	20001504 	.word	0x20001504
 8002b04:	200002d4 	.word	0x200002d4
 8002b08:	200000e9 	.word	0x200000e9
 8002b0c:	200000ea 	.word	0x200000ea

08002b10 <plotter_pen_up>:

void plotter_pen_up() {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8002b14:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8002b18:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8002b28 <plotter_pen_up+0x18>
 8002b1c:	4803      	ldr	r0, [pc, #12]	@ (8002b2c <plotter_pen_up+0x1c>)
 8002b1e:	f7fe fd91 	bl	8001644 <PWM_write_duty>
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	42480000 	.word	0x42480000
 8002b2c:	200004b0 	.word	0x200004b0

08002b30 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002b48:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002b50:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a1b      	ldr	r2, [pc, #108]	@ (8002be4 <SIGNAL_init+0xb4>)
 8002b76:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002b7e:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d828      	bhi.n	8002bd8 <SIGNAL_init+0xa8>
 8002b86:	a201      	add	r2, pc, #4	@ (adr r2, 8002b8c <SIGNAL_init+0x5c>)
 8002b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8c:	08002bd7 	.word	0x08002bd7
 8002b90:	08002b9d 	.word	0x08002b9d
 8002b94:	08002bbb 	.word	0x08002bbb
 8002b98:	08002bc5 	.word	0x08002bc5
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002ba8:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a0e      	ldr	r2, [pc, #56]	@ (8002be8 <SIGNAL_init+0xb8>)
 8002bae:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002bb6:	621a      	str	r2, [r3, #32]
            break;
 8002bb8:	e00e      	b.n	8002bd8 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002bc0:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8002bc2:	e009      	b.n	8002bd8 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002bd2:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8002bd4:	e000      	b.n	8002bd8 <SIGNAL_init+0xa8>
            break;
 8002bd6:	bf00      	nop
    }
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	bf800000 	.word	0xbf800000
 8002be8:	41200000 	.word	0x41200000

08002bec <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8002bec:	b480      	push	{r7}
 8002bee:	b089      	sub	sp, #36	@ 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	61f8      	str	r0, [r7, #28]
 8002bf4:	ed87 0a06 	vstr	s0, [r7, #24]
 8002bf8:	edc7 0a05 	vstr	s1, [r7, #20]
 8002bfc:	ed87 1a04 	vstr	s2, [r7, #16]
 8002c00:	edc7 1a03 	vstr	s3, [r7, #12]
 8002c04:	ed87 2a02 	vstr	s4, [r7, #8]
 8002c08:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002c36:	bf00      	nop
 8002c38:	3724      	adds	r7, #36	@ 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8002c42:	b480      	push	{r7}
 8002c44:	b089      	sub	sp, #36	@ 0x24
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	61f8      	str	r0, [r7, #28]
 8002c4a:	ed87 0a06 	vstr	s0, [r7, #24]
 8002c4e:	edc7 0a05 	vstr	s1, [r7, #20]
 8002c52:	ed87 1a04 	vstr	s2, [r7, #16]
 8002c56:	edc7 1a03 	vstr	s3, [r7, #12]
 8002c5a:	ed87 2a02 	vstr	s4, [r7, #8]
 8002c5e:	edc7 2a01 	vstr	s5, [r7, #4]
 8002c62:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002c96:	bf00      	nop
 8002c98:	3724      	adds	r7, #36	@ 0x24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002caa:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce8 <HAL_MspInit+0x44>)
 8002cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cae:	4a0e      	ldr	r2, [pc, #56]	@ (8002ce8 <HAL_MspInit+0x44>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce8 <HAL_MspInit+0x44>)
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	4b09      	ldr	r3, [pc, #36]	@ (8002ce8 <HAL_MspInit+0x44>)
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc6:	4a08      	ldr	r2, [pc, #32]	@ (8002ce8 <HAL_MspInit+0x44>)
 8002cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ccc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cce:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <HAL_MspInit+0x44>)
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002cda:	f003 fb13 	bl	8006304 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000

08002cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cf0:	bf00      	nop
 8002cf2:	e7fd      	b.n	8002cf0 <NMI_Handler+0x4>

08002cf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cf8:	bf00      	nop
 8002cfa:	e7fd      	b.n	8002cf8 <HardFault_Handler+0x4>

08002cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d00:	bf00      	nop
 8002d02:	e7fd      	b.n	8002d00 <MemManage_Handler+0x4>

08002d04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d08:	bf00      	nop
 8002d0a:	e7fd      	b.n	8002d08 <BusFault_Handler+0x4>

08002d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d10:	bf00      	nop
 8002d12:	e7fd      	b.n	8002d10 <UsageFault_Handler+0x4>

08002d14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d42:	f000 ff99 	bl	8003c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d50:	4802      	ldr	r0, [pc, #8]	@ (8002d5c <DMA1_Channel1_IRQHandler+0x10>)
 8002d52:	f002 ff1a 	bl	8005b8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000274 	.word	0x20000274

08002d60 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002d64:	4802      	ldr	r0, [pc, #8]	@ (8002d70 <DMA1_Channel2_IRQHandler+0x10>)
 8002d66:	f002 ff10 	bl	8005b8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20001d08 	.word	0x20001d08

08002d74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002d78:	4802      	ldr	r0, [pc, #8]	@ (8002d84 <DMA1_Channel3_IRQHandler+0x10>)
 8002d7a:	f002 ff06 	bl	8005b8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20001d68 	.word	0x20001d68

08002d88 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002d8c:	4802      	ldr	r0, [pc, #8]	@ (8002d98 <DMA1_Channel4_IRQHandler+0x10>)
 8002d8e:	f002 fefc 	bl	8005b8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20001c48 	.word	0x20001c48

08002d9c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002da0:	4802      	ldr	r0, [pc, #8]	@ (8002dac <DMA1_Channel5_IRQHandler+0x10>)
 8002da2:	f002 fef2 	bl	8005b8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20001ca8 	.word	0x20001ca8

08002db0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002db4:	4803      	ldr	r0, [pc, #12]	@ (8002dc4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002db6:	f004 ff2b 	bl	8007c10 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002dba:	4803      	ldr	r0, [pc, #12]	@ (8002dc8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002dbc:	f004 ff28 	bl	8007c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	2000151c 	.word	0x2000151c
 8002dc8:	200019e4 	.word	0x200019e4

08002dcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dd0:	4802      	ldr	r0, [pc, #8]	@ (8002ddc <TIM2_IRQHandler+0x10>)
 8002dd2:	f004 ff1d 	bl	8007c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	200015e8 	.word	0x200015e8

08002de0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002de4:	4802      	ldr	r0, [pc, #8]	@ (8002df0 <TIM3_IRQHandler+0x10>)
 8002de6:	f004 ff13 	bl	8007c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200016b4 	.word	0x200016b4

08002df4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002df8:	4802      	ldr	r0, [pc, #8]	@ (8002e04 <TIM4_IRQHandler+0x10>)
 8002dfa:	f004 ff09 	bl	8007c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20001780 	.word	0x20001780

08002e08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e0c:	4802      	ldr	r0, [pc, #8]	@ (8002e18 <USART2_IRQHandler+0x10>)
 8002e0e:	f006 fc53 	bl	80096b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20001b7c 	.word	0x20001b7c

08002e1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002e20:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002e24:	f003 f9b2 	bl	800618c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002e30:	4802      	ldr	r0, [pc, #8]	@ (8002e3c <LPUART1_IRQHandler+0x10>)
 8002e32:	f006 fc41 	bl	80096b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20001ab0 	.word	0x20001ab0

08002e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e48:	4a14      	ldr	r2, [pc, #80]	@ (8002e9c <_sbrk+0x5c>)
 8002e4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ea0 <_sbrk+0x60>)
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e54:	4b13      	ldr	r3, [pc, #76]	@ (8002ea4 <_sbrk+0x64>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ea4 <_sbrk+0x64>)
 8002e5e:	4a12      	ldr	r2, [pc, #72]	@ (8002ea8 <_sbrk+0x68>)
 8002e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e62:	4b10      	ldr	r3, [pc, #64]	@ (8002ea4 <_sbrk+0x64>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d207      	bcs.n	8002e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e70:	f008 f9c8 	bl	800b204 <__errno>
 8002e74:	4603      	mov	r3, r0
 8002e76:	220c      	movs	r2, #12
 8002e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	e009      	b.n	8002e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e80:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <_sbrk+0x64>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e86:	4b07      	ldr	r3, [pc, #28]	@ (8002ea4 <_sbrk+0x64>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ea4 <_sbrk+0x64>)
 8002e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e92:	68fb      	ldr	r3, [r7, #12]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20020000 	.word	0x20020000
 8002ea0:	00000400 	.word	0x00000400
 8002ea4:	20001518 	.word	0x20001518
 8002ea8:	20001f18 	.word	0x20001f18

08002eac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002eb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <SystemInit+0x20>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb6:	4a05      	ldr	r2, [pc, #20]	@ (8002ecc <SystemInit+0x20>)
 8002eb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ebc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b098      	sub	sp, #96	@ 0x60
 8002ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ee2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	60da      	str	r2, [r3, #12]
 8002ef0:	611a      	str	r2, [r3, #16]
 8002ef2:	615a      	str	r2, [r3, #20]
 8002ef4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ef6:	1d3b      	adds	r3, r7, #4
 8002ef8:	2234      	movs	r2, #52	@ 0x34
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f008 f969 	bl	800b1d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f02:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff0 <MX_TIM1_Init+0x120>)
 8002f04:	4a3b      	ldr	r2, [pc, #236]	@ (8002ff4 <MX_TIM1_Init+0x124>)
 8002f06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002f08:	4b39      	ldr	r3, [pc, #228]	@ (8002ff0 <MX_TIM1_Init+0x120>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f0e:	4b38      	ldr	r3, [pc, #224]	@ (8002ff0 <MX_TIM1_Init+0x120>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002f14:	4b36      	ldr	r3, [pc, #216]	@ (8002ff0 <MX_TIM1_Init+0x120>)
 8002f16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f1a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f1c:	4b34      	ldr	r3, [pc, #208]	@ (8002ff0 <MX_TIM1_Init+0x120>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f22:	4b33      	ldr	r3, [pc, #204]	@ (8002ff0 <MX_TIM1_Init+0x120>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f28:	4b31      	ldr	r3, [pc, #196]	@ (8002ff0 <MX_TIM1_Init+0x120>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f2e:	4830      	ldr	r0, [pc, #192]	@ (8002ff0 <MX_TIM1_Init+0x120>)
 8002f30:	f004 fac0 	bl	80074b4 <HAL_TIM_PWM_Init>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002f3a:	f7ff fa5b 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f4a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4827      	ldr	r0, [pc, #156]	@ (8002ff0 <MX_TIM1_Init+0x120>)
 8002f52:	f006 f8d1 	bl	80090f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002f5c:	f7ff fa4a 	bl	80023f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f60:	2360      	movs	r3, #96	@ 0x60
 8002f62:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f70:	2300      	movs	r3, #0
 8002f72:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f74:	2300      	movs	r3, #0
 8002f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f7c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f80:	220c      	movs	r2, #12
 8002f82:	4619      	mov	r1, r3
 8002f84:	481a      	ldr	r0, [pc, #104]	@ (8002ff0 <MX_TIM1_Init+0x120>)
 8002f86:	f004 ffbd 	bl	8007f04 <HAL_TIM_PWM_ConfigChannel>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002f90:	f7ff fa30 	bl	80023f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002fba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002fcc:	1d3b      	adds	r3, r7, #4
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4807      	ldr	r0, [pc, #28]	@ (8002ff0 <MX_TIM1_Init+0x120>)
 8002fd2:	f006 f927 	bl	8009224 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002fdc:	f7ff fa0a 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002fe0:	4803      	ldr	r0, [pc, #12]	@ (8002ff0 <MX_TIM1_Init+0x120>)
 8002fe2:	f000 fb5b 	bl	800369c <HAL_TIM_MspPostInit>

}
 8002fe6:	bf00      	nop
 8002fe8:	3760      	adds	r7, #96	@ 0x60
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	2000151c 	.word	0x2000151c
 8002ff4:	40012c00 	.word	0x40012c00

08002ff8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ffe:	f107 0310 	add.w	r3, r7, #16
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800300c:	1d3b      	adds	r3, r7, #4
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	605a      	str	r2, [r3, #4]
 8003014:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003016:	4b1e      	ldr	r3, [pc, #120]	@ (8003090 <MX_TIM2_Init+0x98>)
 8003018:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800301c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800301e:	4b1c      	ldr	r3, [pc, #112]	@ (8003090 <MX_TIM2_Init+0x98>)
 8003020:	22a9      	movs	r2, #169	@ 0xa9
 8003022:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003024:	4b1a      	ldr	r3, [pc, #104]	@ (8003090 <MX_TIM2_Init+0x98>)
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800302a:	4b19      	ldr	r3, [pc, #100]	@ (8003090 <MX_TIM2_Init+0x98>)
 800302c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003030:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003032:	4b17      	ldr	r3, [pc, #92]	@ (8003090 <MX_TIM2_Init+0x98>)
 8003034:	2200      	movs	r2, #0
 8003036:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003038:	4b15      	ldr	r3, [pc, #84]	@ (8003090 <MX_TIM2_Init+0x98>)
 800303a:	2200      	movs	r2, #0
 800303c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800303e:	4814      	ldr	r0, [pc, #80]	@ (8003090 <MX_TIM2_Init+0x98>)
 8003040:	f004 f8ec 	bl	800721c <HAL_TIM_Base_Init>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800304a:	f7ff f9d3 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800304e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003052:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003054:	f107 0310 	add.w	r3, r7, #16
 8003058:	4619      	mov	r1, r3
 800305a:	480d      	ldr	r0, [pc, #52]	@ (8003090 <MX_TIM2_Init+0x98>)
 800305c:	f005 f866 	bl	800812c <HAL_TIM_ConfigClockSource>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003066:	f7ff f9c5 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	4619      	mov	r1, r3
 8003076:	4806      	ldr	r0, [pc, #24]	@ (8003090 <MX_TIM2_Init+0x98>)
 8003078:	f006 f83e 	bl	80090f8 <HAL_TIMEx_MasterConfigSynchronization>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003082:	f7ff f9b7 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003086:	bf00      	nop
 8003088:	3720      	adds	r7, #32
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	200015e8 	.word	0x200015e8

08003094 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08c      	sub	sp, #48	@ 0x30
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800309a:	f107 030c 	add.w	r3, r7, #12
 800309e:	2224      	movs	r2, #36	@ 0x24
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f008 f896 	bl	800b1d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030a8:	463b      	mov	r3, r7
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	605a      	str	r2, [r3, #4]
 80030b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030b2:	4b21      	ldr	r3, [pc, #132]	@ (8003138 <MX_TIM3_Init+0xa4>)
 80030b4:	4a21      	ldr	r2, [pc, #132]	@ (800313c <MX_TIM3_Init+0xa8>)
 80030b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80030b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003138 <MX_TIM3_Init+0xa4>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030be:	4b1e      	ldr	r3, [pc, #120]	@ (8003138 <MX_TIM3_Init+0xa4>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80030c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003138 <MX_TIM3_Init+0xa4>)
 80030c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003138 <MX_TIM3_Init+0xa4>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030d2:	4b19      	ldr	r3, [pc, #100]	@ (8003138 <MX_TIM3_Init+0xa4>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80030d8:	2303      	movs	r3, #3
 80030da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80030dc:	2300      	movs	r3, #0
 80030de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80030e0:	2301      	movs	r3, #1
 80030e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030ec:	2300      	movs	r3, #0
 80030ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030f0:	2301      	movs	r3, #1
 80030f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80030f4:	2300      	movs	r3, #0
 80030f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80030fc:	f107 030c 	add.w	r3, r7, #12
 8003100:	4619      	mov	r1, r3
 8003102:	480d      	ldr	r0, [pc, #52]	@ (8003138 <MX_TIM3_Init+0xa4>)
 8003104:	f004 fc42 	bl	800798c <HAL_TIM_Encoder_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800310e:	f7ff f971 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003112:	2300      	movs	r3, #0
 8003114:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800311a:	463b      	mov	r3, r7
 800311c:	4619      	mov	r1, r3
 800311e:	4806      	ldr	r0, [pc, #24]	@ (8003138 <MX_TIM3_Init+0xa4>)
 8003120:	f005 ffea 	bl	80090f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800312a:	f7ff f963 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800312e:	bf00      	nop
 8003130:	3730      	adds	r7, #48	@ 0x30
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	200016b4 	.word	0x200016b4
 800313c:	40000400 	.word	0x40000400

08003140 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08c      	sub	sp, #48	@ 0x30
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003146:	f107 030c 	add.w	r3, r7, #12
 800314a:	2224      	movs	r2, #36	@ 0x24
 800314c:	2100      	movs	r1, #0
 800314e:	4618      	mov	r0, r3
 8003150:	f008 f840 	bl	800b1d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003154:	463b      	mov	r3, r7
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	605a      	str	r2, [r3, #4]
 800315c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800315e:	4b21      	ldr	r3, [pc, #132]	@ (80031e4 <MX_TIM4_Init+0xa4>)
 8003160:	4a21      	ldr	r2, [pc, #132]	@ (80031e8 <MX_TIM4_Init+0xa8>)
 8003162:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003164:	4b1f      	ldr	r3, [pc, #124]	@ (80031e4 <MX_TIM4_Init+0xa4>)
 8003166:	2200      	movs	r2, #0
 8003168:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800316a:	4b1e      	ldr	r3, [pc, #120]	@ (80031e4 <MX_TIM4_Init+0xa4>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003170:	4b1c      	ldr	r3, [pc, #112]	@ (80031e4 <MX_TIM4_Init+0xa4>)
 8003172:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003176:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003178:	4b1a      	ldr	r3, [pc, #104]	@ (80031e4 <MX_TIM4_Init+0xa4>)
 800317a:	2200      	movs	r2, #0
 800317c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800317e:	4b19      	ldr	r3, [pc, #100]	@ (80031e4 <MX_TIM4_Init+0xa4>)
 8003180:	2200      	movs	r2, #0
 8003182:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003184:	2303      	movs	r3, #3
 8003186:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003188:	2300      	movs	r3, #0
 800318a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800318c:	2301      	movs	r3, #1
 800318e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003190:	2300      	movs	r3, #0
 8003192:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003198:	2300      	movs	r3, #0
 800319a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800319c:	2301      	movs	r3, #1
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80031a0:	2300      	movs	r3, #0
 80031a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80031a8:	f107 030c 	add.w	r3, r7, #12
 80031ac:	4619      	mov	r1, r3
 80031ae:	480d      	ldr	r0, [pc, #52]	@ (80031e4 <MX_TIM4_Init+0xa4>)
 80031b0:	f004 fbec 	bl	800798c <HAL_TIM_Encoder_Init>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80031ba:	f7ff f91b 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031be:	2300      	movs	r3, #0
 80031c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80031c6:	463b      	mov	r3, r7
 80031c8:	4619      	mov	r1, r3
 80031ca:	4806      	ldr	r0, [pc, #24]	@ (80031e4 <MX_TIM4_Init+0xa4>)
 80031cc:	f005 ff94 	bl	80090f8 <HAL_TIMEx_MasterConfigSynchronization>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80031d6:	f7ff f90d 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80031da:	bf00      	nop
 80031dc:	3730      	adds	r7, #48	@ 0x30
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20001780 	.word	0x20001780
 80031e8:	40000800 	.word	0x40000800

080031ec <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031f2:	f107 0310 	add.w	r3, r7, #16
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	605a      	str	r2, [r3, #4]
 80031fc:	609a      	str	r2, [r3, #8]
 80031fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003200:	1d3b      	adds	r3, r7, #4
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	605a      	str	r2, [r3, #4]
 8003208:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800320a:	4b1d      	ldr	r3, [pc, #116]	@ (8003280 <MX_TIM5_Init+0x94>)
 800320c:	4a1d      	ldr	r2, [pc, #116]	@ (8003284 <MX_TIM5_Init+0x98>)
 800320e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8003210:	4b1b      	ldr	r3, [pc, #108]	@ (8003280 <MX_TIM5_Init+0x94>)
 8003212:	22a9      	movs	r2, #169	@ 0xa9
 8003214:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003216:	4b1a      	ldr	r3, [pc, #104]	@ (8003280 <MX_TIM5_Init+0x94>)
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800321c:	4b18      	ldr	r3, [pc, #96]	@ (8003280 <MX_TIM5_Init+0x94>)
 800321e:	f04f 32ff 	mov.w	r2, #4294967295
 8003222:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003224:	4b16      	ldr	r3, [pc, #88]	@ (8003280 <MX_TIM5_Init+0x94>)
 8003226:	2200      	movs	r2, #0
 8003228:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800322a:	4b15      	ldr	r3, [pc, #84]	@ (8003280 <MX_TIM5_Init+0x94>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003230:	4813      	ldr	r0, [pc, #76]	@ (8003280 <MX_TIM5_Init+0x94>)
 8003232:	f003 fff3 	bl	800721c <HAL_TIM_Base_Init>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800323c:	f7ff f8da 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003240:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003244:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003246:	f107 0310 	add.w	r3, r7, #16
 800324a:	4619      	mov	r1, r3
 800324c:	480c      	ldr	r0, [pc, #48]	@ (8003280 <MX_TIM5_Init+0x94>)
 800324e:	f004 ff6d 	bl	800812c <HAL_TIM_ConfigClockSource>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003258:	f7ff f8cc 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800325c:	2300      	movs	r3, #0
 800325e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003264:	1d3b      	adds	r3, r7, #4
 8003266:	4619      	mov	r1, r3
 8003268:	4805      	ldr	r0, [pc, #20]	@ (8003280 <MX_TIM5_Init+0x94>)
 800326a:	f005 ff45 	bl	80090f8 <HAL_TIMEx_MasterConfigSynchronization>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003274:	f7ff f8be 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003278:	bf00      	nop
 800327a:	3720      	adds	r7, #32
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	2000184c 	.word	0x2000184c
 8003284:	40000c00 	.word	0x40000c00

08003288 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b09c      	sub	sp, #112	@ 0x70
 800328c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800328e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800329c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
 80032b8:	615a      	str	r2, [r3, #20]
 80032ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032bc:	1d3b      	adds	r3, r7, #4
 80032be:	2234      	movs	r2, #52	@ 0x34
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f007 ff86 	bl	800b1d4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80032c8:	4b51      	ldr	r3, [pc, #324]	@ (8003410 <MX_TIM8_Init+0x188>)
 80032ca:	4a52      	ldr	r2, [pc, #328]	@ (8003414 <MX_TIM8_Init+0x18c>)
 80032cc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80032ce:	4b50      	ldr	r3, [pc, #320]	@ (8003410 <MX_TIM8_Init+0x188>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003410 <MX_TIM8_Init+0x188>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80032da:	4b4d      	ldr	r3, [pc, #308]	@ (8003410 <MX_TIM8_Init+0x188>)
 80032dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032e0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003410 <MX_TIM8_Init+0x188>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80032e8:	4b49      	ldr	r3, [pc, #292]	@ (8003410 <MX_TIM8_Init+0x188>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ee:	4b48      	ldr	r3, [pc, #288]	@ (8003410 <MX_TIM8_Init+0x188>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80032f4:	4846      	ldr	r0, [pc, #280]	@ (8003410 <MX_TIM8_Init+0x188>)
 80032f6:	f003 ff91 	bl	800721c <HAL_TIM_Base_Init>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003300:	f7ff f878 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003304:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003308:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800330a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800330e:	4619      	mov	r1, r3
 8003310:	483f      	ldr	r0, [pc, #252]	@ (8003410 <MX_TIM8_Init+0x188>)
 8003312:	f004 ff0b 	bl	800812c <HAL_TIM_ConfigClockSource>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800331c:	f7ff f86a 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003320:	483b      	ldr	r0, [pc, #236]	@ (8003410 <MX_TIM8_Init+0x188>)
 8003322:	f004 f8c7 	bl	80074b4 <HAL_TIM_PWM_Init>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800332c:	f7ff f862 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003330:	2300      	movs	r3, #0
 8003332:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003334:	2300      	movs	r3, #0
 8003336:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003338:	2300      	movs	r3, #0
 800333a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800333c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003340:	4619      	mov	r1, r3
 8003342:	4833      	ldr	r0, [pc, #204]	@ (8003410 <MX_TIM8_Init+0x188>)
 8003344:	f005 fed8 	bl	80090f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800334e:	f7ff f851 	bl	80023f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003352:	2360      	movs	r3, #96	@ 0x60
 8003354:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800335a:	2300      	movs	r3, #0
 800335c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800335e:	2300      	movs	r3, #0
 8003360:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003362:	2300      	movs	r3, #0
 8003364:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003366:	2300      	movs	r3, #0
 8003368:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800336a:	2300      	movs	r3, #0
 800336c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800336e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003372:	2200      	movs	r2, #0
 8003374:	4619      	mov	r1, r3
 8003376:	4826      	ldr	r0, [pc, #152]	@ (8003410 <MX_TIM8_Init+0x188>)
 8003378:	f004 fdc4 	bl	8007f04 <HAL_TIM_PWM_ConfigChannel>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8003382:	f7ff f837 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003386:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800338a:	2204      	movs	r2, #4
 800338c:	4619      	mov	r1, r3
 800338e:	4820      	ldr	r0, [pc, #128]	@ (8003410 <MX_TIM8_Init+0x188>)
 8003390:	f004 fdb8 	bl	8007f04 <HAL_TIM_PWM_ConfigChannel>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 800339a:	f7ff f82b 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800339e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80033a2:	2208      	movs	r2, #8
 80033a4:	4619      	mov	r1, r3
 80033a6:	481a      	ldr	r0, [pc, #104]	@ (8003410 <MX_TIM8_Init+0x188>)
 80033a8:	f004 fdac 	bl	8007f04 <HAL_TIM_PWM_ConfigChannel>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 80033b2:	f7ff f81f 	bl	80023f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80033d4:	2300      	movs	r3, #0
 80033d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80033d8:	2300      	movs	r3, #0
 80033da:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80033dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80033e6:	2300      	movs	r3, #0
 80033e8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80033ee:	1d3b      	adds	r3, r7, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4807      	ldr	r0, [pc, #28]	@ (8003410 <MX_TIM8_Init+0x188>)
 80033f4:	f005 ff16 	bl	8009224 <HAL_TIMEx_ConfigBreakDeadTime>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 80033fe:	f7fe fff9 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003402:	4803      	ldr	r0, [pc, #12]	@ (8003410 <MX_TIM8_Init+0x188>)
 8003404:	f000 f94a 	bl	800369c <HAL_TIM_MspPostInit>

}
 8003408:	bf00      	nop
 800340a:	3770      	adds	r7, #112	@ 0x70
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20001918 	.word	0x20001918
 8003414:	40013400 	.word	0x40013400

08003418 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800341c:	4b14      	ldr	r3, [pc, #80]	@ (8003470 <MX_TIM16_Init+0x58>)
 800341e:	4a15      	ldr	r2, [pc, #84]	@ (8003474 <MX_TIM16_Init+0x5c>)
 8003420:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8003422:	4b13      	ldr	r3, [pc, #76]	@ (8003470 <MX_TIM16_Init+0x58>)
 8003424:	22a9      	movs	r2, #169	@ 0xa9
 8003426:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003428:	4b11      	ldr	r3, [pc, #68]	@ (8003470 <MX_TIM16_Init+0x58>)
 800342a:	2200      	movs	r2, #0
 800342c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800342e:	4b10      	ldr	r3, [pc, #64]	@ (8003470 <MX_TIM16_Init+0x58>)
 8003430:	f240 4279 	movw	r2, #1145	@ 0x479
 8003434:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003436:	4b0e      	ldr	r3, [pc, #56]	@ (8003470 <MX_TIM16_Init+0x58>)
 8003438:	2200      	movs	r2, #0
 800343a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800343c:	4b0c      	ldr	r3, [pc, #48]	@ (8003470 <MX_TIM16_Init+0x58>)
 800343e:	2200      	movs	r2, #0
 8003440:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003442:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <MX_TIM16_Init+0x58>)
 8003444:	2200      	movs	r2, #0
 8003446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003448:	4809      	ldr	r0, [pc, #36]	@ (8003470 <MX_TIM16_Init+0x58>)
 800344a:	f003 fee7 	bl	800721c <HAL_TIM_Base_Init>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003454:	f7fe ffce 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003458:	2108      	movs	r1, #8
 800345a:	4805      	ldr	r0, [pc, #20]	@ (8003470 <MX_TIM16_Init+0x58>)
 800345c:	f004 f9a0 	bl	80077a0 <HAL_TIM_OnePulse_Init>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8003466:	f7fe ffc5 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200019e4 	.word	0x200019e4
 8003474:	40014400 	.word	0x40014400

08003478 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a0d      	ldr	r2, [pc, #52]	@ (80034bc <HAL_TIM_PWM_MspInit+0x44>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d113      	bne.n	80034b2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800348a:	4b0d      	ldr	r3, [pc, #52]	@ (80034c0 <HAL_TIM_PWM_MspInit+0x48>)
 800348c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348e:	4a0c      	ldr	r2, [pc, #48]	@ (80034c0 <HAL_TIM_PWM_MspInit+0x48>)
 8003490:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003494:	6613      	str	r3, [r2, #96]	@ 0x60
 8003496:	4b0a      	ldr	r3, [pc, #40]	@ (80034c0 <HAL_TIM_PWM_MspInit+0x48>)
 8003498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800349a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80034a2:	2200      	movs	r2, #0
 80034a4:	2100      	movs	r1, #0
 80034a6:	2019      	movs	r0, #25
 80034a8:	f002 f957 	bl	800575a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80034ac:	2019      	movs	r0, #25
 80034ae:	f002 f96e 	bl	800578e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40012c00 	.word	0x40012c00
 80034c0:	40021000 	.word	0x40021000

080034c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d4:	d114      	bne.n	8003500 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003584 <HAL_TIM_Base_MspInit+0xc0>)
 80034d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034da:	4a2a      	ldr	r2, [pc, #168]	@ (8003584 <HAL_TIM_Base_MspInit+0xc0>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80034e2:	4b28      	ldr	r3, [pc, #160]	@ (8003584 <HAL_TIM_Base_MspInit+0xc0>)
 80034e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034ee:	2200      	movs	r2, #0
 80034f0:	2100      	movs	r1, #0
 80034f2:	201c      	movs	r0, #28
 80034f4:	f002 f931 	bl	800575a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034f8:	201c      	movs	r0, #28
 80034fa:	f002 f948 	bl	800578e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80034fe:	e03c      	b.n	800357a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a20      	ldr	r2, [pc, #128]	@ (8003588 <HAL_TIM_Base_MspInit+0xc4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10c      	bne.n	8003524 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800350a:	4b1e      	ldr	r3, [pc, #120]	@ (8003584 <HAL_TIM_Base_MspInit+0xc0>)
 800350c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350e:	4a1d      	ldr	r2, [pc, #116]	@ (8003584 <HAL_TIM_Base_MspInit+0xc0>)
 8003510:	f043 0308 	orr.w	r3, r3, #8
 8003514:	6593      	str	r3, [r2, #88]	@ 0x58
 8003516:	4b1b      	ldr	r3, [pc, #108]	@ (8003584 <HAL_TIM_Base_MspInit+0xc0>)
 8003518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	693b      	ldr	r3, [r7, #16]
}
 8003522:	e02a      	b.n	800357a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a18      	ldr	r2, [pc, #96]	@ (800358c <HAL_TIM_Base_MspInit+0xc8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d10c      	bne.n	8003548 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800352e:	4b15      	ldr	r3, [pc, #84]	@ (8003584 <HAL_TIM_Base_MspInit+0xc0>)
 8003530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003532:	4a14      	ldr	r2, [pc, #80]	@ (8003584 <HAL_TIM_Base_MspInit+0xc0>)
 8003534:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003538:	6613      	str	r3, [r2, #96]	@ 0x60
 800353a:	4b12      	ldr	r3, [pc, #72]	@ (8003584 <HAL_TIM_Base_MspInit+0xc0>)
 800353c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
}
 8003546:	e018      	b.n	800357a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a10      	ldr	r2, [pc, #64]	@ (8003590 <HAL_TIM_Base_MspInit+0xcc>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d113      	bne.n	800357a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003552:	4b0c      	ldr	r3, [pc, #48]	@ (8003584 <HAL_TIM_Base_MspInit+0xc0>)
 8003554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003556:	4a0b      	ldr	r2, [pc, #44]	@ (8003584 <HAL_TIM_Base_MspInit+0xc0>)
 8003558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800355c:	6613      	str	r3, [r2, #96]	@ 0x60
 800355e:	4b09      	ldr	r3, [pc, #36]	@ (8003584 <HAL_TIM_Base_MspInit+0xc0>)
 8003560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800356a:	2200      	movs	r2, #0
 800356c:	2100      	movs	r1, #0
 800356e:	2019      	movs	r0, #25
 8003570:	f002 f8f3 	bl	800575a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003574:	2019      	movs	r0, #25
 8003576:	f002 f90a 	bl	800578e <HAL_NVIC_EnableIRQ>
}
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	40000c00 	.word	0x40000c00
 800358c:	40013400 	.word	0x40013400
 8003590:	40014400 	.word	0x40014400

08003594 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08c      	sub	sp, #48	@ 0x30
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359c:	f107 031c 	add.w	r3, r7, #28
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a37      	ldr	r2, [pc, #220]	@ (8003690 <HAL_TIM_Encoder_MspInit+0xfc>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d131      	bne.n	800361a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035b6:	4b37      	ldr	r3, [pc, #220]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x100>)
 80035b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ba:	4a36      	ldr	r2, [pc, #216]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x100>)
 80035bc:	f043 0302 	orr.w	r3, r3, #2
 80035c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80035c2:	4b34      	ldr	r3, [pc, #208]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x100>)
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ce:	4b31      	ldr	r3, [pc, #196]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x100>)
 80035d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d2:	4a30      	ldr	r2, [pc, #192]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x100>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035da:	4b2e      	ldr	r3, [pc, #184]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x100>)
 80035dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035e6:	23c0      	movs	r3, #192	@ 0xc0
 80035e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ea:	2302      	movs	r3, #2
 80035ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f2:	2300      	movs	r3, #0
 80035f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035f6:	2302      	movs	r3, #2
 80035f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fa:	f107 031c 	add.w	r3, r7, #28
 80035fe:	4619      	mov	r1, r3
 8003600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003604:	f002 fc10 	bl	8005e28 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003608:	2200      	movs	r2, #0
 800360a:	2100      	movs	r1, #0
 800360c:	201d      	movs	r0, #29
 800360e:	f002 f8a4 	bl	800575a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003612:	201d      	movs	r0, #29
 8003614:	f002 f8bb 	bl	800578e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003618:	e036      	b.n	8003688 <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM4)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1e      	ldr	r2, [pc, #120]	@ (8003698 <HAL_TIM_Encoder_MspInit+0x104>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d131      	bne.n	8003688 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003624:	4b1b      	ldr	r3, [pc, #108]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x100>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003628:	4a1a      	ldr	r2, [pc, #104]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x100>)
 800362a:	f043 0304 	orr.w	r3, r3, #4
 800362e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003630:	4b18      	ldr	r3, [pc, #96]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x100>)
 8003632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363c:	4b15      	ldr	r3, [pc, #84]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x100>)
 800363e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003640:	4a14      	ldr	r2, [pc, #80]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x100>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003648:	4b12      	ldr	r3, [pc, #72]	@ (8003694 <HAL_TIM_Encoder_MspInit+0x100>)
 800364a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003654:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	2300      	movs	r3, #0
 8003664:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003666:	230a      	movs	r3, #10
 8003668:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366a:	f107 031c 	add.w	r3, r7, #28
 800366e:	4619      	mov	r1, r3
 8003670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003674:	f002 fbd8 	bl	8005e28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003678:	2200      	movs	r2, #0
 800367a:	2100      	movs	r1, #0
 800367c:	201e      	movs	r0, #30
 800367e:	f002 f86c 	bl	800575a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003682:	201e      	movs	r0, #30
 8003684:	f002 f883 	bl	800578e <HAL_NVIC_EnableIRQ>
}
 8003688:	bf00      	nop
 800368a:	3730      	adds	r7, #48	@ 0x30
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40000400 	.word	0x40000400
 8003694:	40021000 	.word	0x40021000
 8003698:	40000800 	.word	0x40000800

0800369c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	@ 0x28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a30      	ldr	r2, [pc, #192]	@ (800377c <HAL_TIM_MspPostInit+0xe0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d11c      	bne.n	80036f8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036be:	4b30      	ldr	r3, [pc, #192]	@ (8003780 <HAL_TIM_MspPostInit+0xe4>)
 80036c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003780 <HAL_TIM_MspPostInit+0xe4>)
 80036c4:	f043 0304 	orr.w	r3, r3, #4
 80036c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003780 <HAL_TIM_MspPostInit+0xe4>)
 80036cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80036d6:	2308      	movs	r3, #8
 80036d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036da:	2302      	movs	r3, #2
 80036dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e2:	2300      	movs	r3, #0
 80036e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80036e6:	2302      	movs	r3, #2
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ea:	f107 0314 	add.w	r3, r7, #20
 80036ee:	4619      	mov	r1, r3
 80036f0:	4824      	ldr	r0, [pc, #144]	@ (8003784 <HAL_TIM_MspPostInit+0xe8>)
 80036f2:	f002 fb99 	bl	8005e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80036f6:	e03d      	b.n	8003774 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM8)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a22      	ldr	r2, [pc, #136]	@ (8003788 <HAL_TIM_MspPostInit+0xec>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d138      	bne.n	8003774 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003702:	4b1f      	ldr	r3, [pc, #124]	@ (8003780 <HAL_TIM_MspPostInit+0xe4>)
 8003704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003706:	4a1e      	ldr	r2, [pc, #120]	@ (8003780 <HAL_TIM_MspPostInit+0xe4>)
 8003708:	f043 0304 	orr.w	r3, r3, #4
 800370c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800370e:	4b1c      	ldr	r3, [pc, #112]	@ (8003780 <HAL_TIM_MspPostInit+0xe4>)
 8003710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371a:	4b19      	ldr	r3, [pc, #100]	@ (8003780 <HAL_TIM_MspPostInit+0xe4>)
 800371c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371e:	4a18      	ldr	r2, [pc, #96]	@ (8003780 <HAL_TIM_MspPostInit+0xe4>)
 8003720:	f043 0302 	orr.w	r3, r3, #2
 8003724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003726:	4b16      	ldr	r3, [pc, #88]	@ (8003780 <HAL_TIM_MspPostInit+0xe4>)
 8003728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003732:	23c0      	movs	r3, #192	@ 0xc0
 8003734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003736:	2302      	movs	r3, #2
 8003738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373e:	2300      	movs	r3, #0
 8003740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003742:	2304      	movs	r3, #4
 8003744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003746:	f107 0314 	add.w	r3, r7, #20
 800374a:	4619      	mov	r1, r3
 800374c:	480d      	ldr	r0, [pc, #52]	@ (8003784 <HAL_TIM_MspPostInit+0xe8>)
 800374e:	f002 fb6b 	bl	8005e28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003752:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003758:	2302      	movs	r3, #2
 800375a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003760:	2300      	movs	r3, #0
 8003762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003764:	230a      	movs	r3, #10
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003768:	f107 0314 	add.w	r3, r7, #20
 800376c:	4619      	mov	r1, r3
 800376e:	4807      	ldr	r0, [pc, #28]	@ (800378c <HAL_TIM_MspPostInit+0xf0>)
 8003770:	f002 fb5a 	bl	8005e28 <HAL_GPIO_Init>
}
 8003774:	bf00      	nop
 8003776:	3728      	adds	r7, #40	@ 0x28
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40012c00 	.word	0x40012c00
 8003780:	40021000 	.word	0x40021000
 8003784:	48000800 	.word	0x48000800
 8003788:	40013400 	.word	0x40013400
 800378c:	48000400 	.word	0x48000400

08003790 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003794:	4b20      	ldr	r3, [pc, #128]	@ (8003818 <MX_LPUART1_UART_Init+0x88>)
 8003796:	4a21      	ldr	r2, [pc, #132]	@ (800381c <MX_LPUART1_UART_Init+0x8c>)
 8003798:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800379a:	4b1f      	ldr	r3, [pc, #124]	@ (8003818 <MX_LPUART1_UART_Init+0x88>)
 800379c:	4a20      	ldr	r2, [pc, #128]	@ (8003820 <MX_LPUART1_UART_Init+0x90>)
 800379e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003818 <MX_LPUART1_UART_Init+0x88>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80037a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003818 <MX_LPUART1_UART_Init+0x88>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80037ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003818 <MX_LPUART1_UART_Init+0x88>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80037b2:	4b19      	ldr	r3, [pc, #100]	@ (8003818 <MX_LPUART1_UART_Init+0x88>)
 80037b4:	220c      	movs	r2, #12
 80037b6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037b8:	4b17      	ldr	r3, [pc, #92]	@ (8003818 <MX_LPUART1_UART_Init+0x88>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037be:	4b16      	ldr	r3, [pc, #88]	@ (8003818 <MX_LPUART1_UART_Init+0x88>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80037c4:	4b14      	ldr	r3, [pc, #80]	@ (8003818 <MX_LPUART1_UART_Init+0x88>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037ca:	4b13      	ldr	r3, [pc, #76]	@ (8003818 <MX_LPUART1_UART_Init+0x88>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80037d0:	4811      	ldr	r0, [pc, #68]	@ (8003818 <MX_LPUART1_UART_Init+0x88>)
 80037d2:	f005 fe0b 	bl	80093ec <HAL_UART_Init>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80037dc:	f7fe fe0a 	bl	80023f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037e0:	2100      	movs	r1, #0
 80037e2:	480d      	ldr	r0, [pc, #52]	@ (8003818 <MX_LPUART1_UART_Init+0x88>)
 80037e4:	f007 fb5e 	bl	800aea4 <HAL_UARTEx_SetTxFifoThreshold>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80037ee:	f7fe fe01 	bl	80023f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037f2:	2100      	movs	r1, #0
 80037f4:	4808      	ldr	r0, [pc, #32]	@ (8003818 <MX_LPUART1_UART_Init+0x88>)
 80037f6:	f007 fb93 	bl	800af20 <HAL_UARTEx_SetRxFifoThreshold>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8003800:	f7fe fdf8 	bl	80023f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003804:	4804      	ldr	r0, [pc, #16]	@ (8003818 <MX_LPUART1_UART_Init+0x88>)
 8003806:	f007 fb14 	bl	800ae32 <HAL_UARTEx_DisableFifoMode>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8003810:	f7fe fdf0 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003814:	bf00      	nop
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20001ab0 	.word	0x20001ab0
 800381c:	40008000 	.word	0x40008000
 8003820:	001e8480 	.word	0x001e8480

08003824 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003828:	4b23      	ldr	r3, [pc, #140]	@ (80038b8 <MX_USART2_UART_Init+0x94>)
 800382a:	4a24      	ldr	r2, [pc, #144]	@ (80038bc <MX_USART2_UART_Init+0x98>)
 800382c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800382e:	4b22      	ldr	r3, [pc, #136]	@ (80038b8 <MX_USART2_UART_Init+0x94>)
 8003830:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003836:	4b20      	ldr	r3, [pc, #128]	@ (80038b8 <MX_USART2_UART_Init+0x94>)
 8003838:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800383c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800383e:	4b1e      	ldr	r3, [pc, #120]	@ (80038b8 <MX_USART2_UART_Init+0x94>)
 8003840:	2200      	movs	r2, #0
 8003842:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003844:	4b1c      	ldr	r3, [pc, #112]	@ (80038b8 <MX_USART2_UART_Init+0x94>)
 8003846:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800384a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800384c:	4b1a      	ldr	r3, [pc, #104]	@ (80038b8 <MX_USART2_UART_Init+0x94>)
 800384e:	220c      	movs	r2, #12
 8003850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003852:	4b19      	ldr	r3, [pc, #100]	@ (80038b8 <MX_USART2_UART_Init+0x94>)
 8003854:	2200      	movs	r2, #0
 8003856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003858:	4b17      	ldr	r3, [pc, #92]	@ (80038b8 <MX_USART2_UART_Init+0x94>)
 800385a:	2200      	movs	r2, #0
 800385c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800385e:	4b16      	ldr	r3, [pc, #88]	@ (80038b8 <MX_USART2_UART_Init+0x94>)
 8003860:	2200      	movs	r2, #0
 8003862:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003864:	4b14      	ldr	r3, [pc, #80]	@ (80038b8 <MX_USART2_UART_Init+0x94>)
 8003866:	2200      	movs	r2, #0
 8003868:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800386a:	4b13      	ldr	r3, [pc, #76]	@ (80038b8 <MX_USART2_UART_Init+0x94>)
 800386c:	2200      	movs	r2, #0
 800386e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003870:	4811      	ldr	r0, [pc, #68]	@ (80038b8 <MX_USART2_UART_Init+0x94>)
 8003872:	f005 fdbb 	bl	80093ec <HAL_UART_Init>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800387c:	f7fe fdba 	bl	80023f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003880:	2100      	movs	r1, #0
 8003882:	480d      	ldr	r0, [pc, #52]	@ (80038b8 <MX_USART2_UART_Init+0x94>)
 8003884:	f007 fb0e 	bl	800aea4 <HAL_UARTEx_SetTxFifoThreshold>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800388e:	f7fe fdb1 	bl	80023f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003892:	2100      	movs	r1, #0
 8003894:	4808      	ldr	r0, [pc, #32]	@ (80038b8 <MX_USART2_UART_Init+0x94>)
 8003896:	f007 fb43 	bl	800af20 <HAL_UARTEx_SetRxFifoThreshold>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80038a0:	f7fe fda8 	bl	80023f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80038a4:	4804      	ldr	r0, [pc, #16]	@ (80038b8 <MX_USART2_UART_Init+0x94>)
 80038a6:	f007 fac4 	bl	800ae32 <HAL_UARTEx_DisableFifoMode>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80038b0:	f7fe fda0 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038b4:	bf00      	nop
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20001b7c 	.word	0x20001b7c
 80038bc:	40004400 	.word	0x40004400

080038c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b0a0      	sub	sp, #128	@ 0x80
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038d8:	f107 0318 	add.w	r3, r7, #24
 80038dc:	2254      	movs	r2, #84	@ 0x54
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f007 fc77 	bl	800b1d4 <memset>
  if(uartHandle->Instance==LPUART1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a99      	ldr	r2, [pc, #612]	@ (8003b50 <HAL_UART_MspInit+0x290>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	f040 8093 	bne.w	8003a18 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80038f2:	2320      	movs	r3, #32
 80038f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80038f6:	2300      	movs	r3, #0
 80038f8:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038fa:	f107 0318 	add.w	r3, r7, #24
 80038fe:	4618      	mov	r0, r3
 8003900:	f003 fa3e 	bl	8006d80 <HAL_RCCEx_PeriphCLKConfig>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800390a:	f7fe fd73 	bl	80023f4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800390e:	4b91      	ldr	r3, [pc, #580]	@ (8003b54 <HAL_UART_MspInit+0x294>)
 8003910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003912:	4a90      	ldr	r2, [pc, #576]	@ (8003b54 <HAL_UART_MspInit+0x294>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800391a:	4b8e      	ldr	r3, [pc, #568]	@ (8003b54 <HAL_UART_MspInit+0x294>)
 800391c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003926:	4b8b      	ldr	r3, [pc, #556]	@ (8003b54 <HAL_UART_MspInit+0x294>)
 8003928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392a:	4a8a      	ldr	r2, [pc, #552]	@ (8003b54 <HAL_UART_MspInit+0x294>)
 800392c:	f043 0302 	orr.w	r3, r3, #2
 8003930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003932:	4b88      	ldr	r3, [pc, #544]	@ (8003b54 <HAL_UART_MspInit+0x294>)
 8003934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800393e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003942:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003944:	2302      	movs	r3, #2
 8003946:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394c:	2300      	movs	r3, #0
 800394e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003950:	2308      	movs	r3, #8
 8003952:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003954:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003958:	4619      	mov	r1, r3
 800395a:	487f      	ldr	r0, [pc, #508]	@ (8003b58 <HAL_UART_MspInit+0x298>)
 800395c:	f002 fa64 	bl	8005e28 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8003960:	4b7e      	ldr	r3, [pc, #504]	@ (8003b5c <HAL_UART_MspInit+0x29c>)
 8003962:	4a7f      	ldr	r2, [pc, #508]	@ (8003b60 <HAL_UART_MspInit+0x2a0>)
 8003964:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003966:	4b7d      	ldr	r3, [pc, #500]	@ (8003b5c <HAL_UART_MspInit+0x29c>)
 8003968:	2222      	movs	r2, #34	@ 0x22
 800396a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800396c:	4b7b      	ldr	r3, [pc, #492]	@ (8003b5c <HAL_UART_MspInit+0x29c>)
 800396e:	2200      	movs	r2, #0
 8003970:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003972:	4b7a      	ldr	r3, [pc, #488]	@ (8003b5c <HAL_UART_MspInit+0x29c>)
 8003974:	2200      	movs	r2, #0
 8003976:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003978:	4b78      	ldr	r3, [pc, #480]	@ (8003b5c <HAL_UART_MspInit+0x29c>)
 800397a:	2280      	movs	r2, #128	@ 0x80
 800397c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800397e:	4b77      	ldr	r3, [pc, #476]	@ (8003b5c <HAL_UART_MspInit+0x29c>)
 8003980:	2200      	movs	r2, #0
 8003982:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003984:	4b75      	ldr	r3, [pc, #468]	@ (8003b5c <HAL_UART_MspInit+0x29c>)
 8003986:	2200      	movs	r2, #0
 8003988:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800398a:	4b74      	ldr	r3, [pc, #464]	@ (8003b5c <HAL_UART_MspInit+0x29c>)
 800398c:	2200      	movs	r2, #0
 800398e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003990:	4b72      	ldr	r3, [pc, #456]	@ (8003b5c <HAL_UART_MspInit+0x29c>)
 8003992:	2200      	movs	r2, #0
 8003994:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003996:	4871      	ldr	r0, [pc, #452]	@ (8003b5c <HAL_UART_MspInit+0x29c>)
 8003998:	f001 ff14 	bl	80057c4 <HAL_DMA_Init>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80039a2:	f7fe fd27 	bl	80023f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a6c      	ldr	r2, [pc, #432]	@ (8003b5c <HAL_UART_MspInit+0x29c>)
 80039aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80039ae:	4a6b      	ldr	r2, [pc, #428]	@ (8003b5c <HAL_UART_MspInit+0x29c>)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 80039b4:	4b6b      	ldr	r3, [pc, #428]	@ (8003b64 <HAL_UART_MspInit+0x2a4>)
 80039b6:	4a6c      	ldr	r2, [pc, #432]	@ (8003b68 <HAL_UART_MspInit+0x2a8>)
 80039b8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80039ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003b64 <HAL_UART_MspInit+0x2a4>)
 80039bc:	2223      	movs	r2, #35	@ 0x23
 80039be:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039c0:	4b68      	ldr	r3, [pc, #416]	@ (8003b64 <HAL_UART_MspInit+0x2a4>)
 80039c2:	2210      	movs	r2, #16
 80039c4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039c6:	4b67      	ldr	r3, [pc, #412]	@ (8003b64 <HAL_UART_MspInit+0x2a4>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039cc:	4b65      	ldr	r3, [pc, #404]	@ (8003b64 <HAL_UART_MspInit+0x2a4>)
 80039ce:	2280      	movs	r2, #128	@ 0x80
 80039d0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039d2:	4b64      	ldr	r3, [pc, #400]	@ (8003b64 <HAL_UART_MspInit+0x2a4>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039d8:	4b62      	ldr	r3, [pc, #392]	@ (8003b64 <HAL_UART_MspInit+0x2a4>)
 80039da:	2200      	movs	r2, #0
 80039dc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80039de:	4b61      	ldr	r3, [pc, #388]	@ (8003b64 <HAL_UART_MspInit+0x2a4>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039e4:	4b5f      	ldr	r3, [pc, #380]	@ (8003b64 <HAL_UART_MspInit+0x2a4>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80039ea:	485e      	ldr	r0, [pc, #376]	@ (8003b64 <HAL_UART_MspInit+0x2a4>)
 80039ec:	f001 feea 	bl	80057c4 <HAL_DMA_Init>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80039f6:	f7fe fcfd 	bl	80023f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a59      	ldr	r2, [pc, #356]	@ (8003b64 <HAL_UART_MspInit+0x2a4>)
 80039fe:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a00:	4a58      	ldr	r2, [pc, #352]	@ (8003b64 <HAL_UART_MspInit+0x2a4>)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003a06:	2200      	movs	r2, #0
 8003a08:	2100      	movs	r1, #0
 8003a0a:	205b      	movs	r0, #91	@ 0x5b
 8003a0c:	f001 fea5 	bl	800575a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003a10:	205b      	movs	r0, #91	@ 0x5b
 8003a12:	f001 febc 	bl	800578e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003a16:	e097      	b.n	8003b48 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a53      	ldr	r2, [pc, #332]	@ (8003b6c <HAL_UART_MspInit+0x2ac>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	f040 8092 	bne.w	8003b48 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a24:	2302      	movs	r3, #2
 8003a26:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a2c:	f107 0318 	add.w	r3, r7, #24
 8003a30:	4618      	mov	r0, r3
 8003a32:	f003 f9a5 	bl	8006d80 <HAL_RCCEx_PeriphCLKConfig>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8003a3c:	f7fe fcda 	bl	80023f4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a40:	4b44      	ldr	r3, [pc, #272]	@ (8003b54 <HAL_UART_MspInit+0x294>)
 8003a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a44:	4a43      	ldr	r2, [pc, #268]	@ (8003b54 <HAL_UART_MspInit+0x294>)
 8003a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a4c:	4b41      	ldr	r3, [pc, #260]	@ (8003b54 <HAL_UART_MspInit+0x294>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a58:	4b3e      	ldr	r3, [pc, #248]	@ (8003b54 <HAL_UART_MspInit+0x294>)
 8003a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5c:	4a3d      	ldr	r2, [pc, #244]	@ (8003b54 <HAL_UART_MspInit+0x294>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a64:	4b3b      	ldr	r3, [pc, #236]	@ (8003b54 <HAL_UART_MspInit+0x294>)
 8003a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a70:	230c      	movs	r3, #12
 8003a72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a74:	2302      	movs	r3, #2
 8003a76:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a80:	2307      	movs	r3, #7
 8003a82:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a84:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003a88:	4619      	mov	r1, r3
 8003a8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a8e:	f002 f9cb 	bl	8005e28 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003a92:	4b37      	ldr	r3, [pc, #220]	@ (8003b70 <HAL_UART_MspInit+0x2b0>)
 8003a94:	4a37      	ldr	r2, [pc, #220]	@ (8003b74 <HAL_UART_MspInit+0x2b4>)
 8003a96:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003a98:	4b35      	ldr	r3, [pc, #212]	@ (8003b70 <HAL_UART_MspInit+0x2b0>)
 8003a9a:	221a      	movs	r2, #26
 8003a9c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a9e:	4b34      	ldr	r3, [pc, #208]	@ (8003b70 <HAL_UART_MspInit+0x2b0>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aa4:	4b32      	ldr	r3, [pc, #200]	@ (8003b70 <HAL_UART_MspInit+0x2b0>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003aaa:	4b31      	ldr	r3, [pc, #196]	@ (8003b70 <HAL_UART_MspInit+0x2b0>)
 8003aac:	2280      	movs	r2, #128	@ 0x80
 8003aae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8003b70 <HAL_UART_MspInit+0x2b0>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ab6:	4b2e      	ldr	r3, [pc, #184]	@ (8003b70 <HAL_UART_MspInit+0x2b0>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003abc:	4b2c      	ldr	r3, [pc, #176]	@ (8003b70 <HAL_UART_MspInit+0x2b0>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8003b70 <HAL_UART_MspInit+0x2b0>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003ac8:	4829      	ldr	r0, [pc, #164]	@ (8003b70 <HAL_UART_MspInit+0x2b0>)
 8003aca:	f001 fe7b 	bl	80057c4 <HAL_DMA_Init>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8003ad4:	f7fe fc8e 	bl	80023f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a25      	ldr	r2, [pc, #148]	@ (8003b70 <HAL_UART_MspInit+0x2b0>)
 8003adc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003ae0:	4a23      	ldr	r2, [pc, #140]	@ (8003b70 <HAL_UART_MspInit+0x2b0>)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8003ae6:	4b24      	ldr	r3, [pc, #144]	@ (8003b78 <HAL_UART_MspInit+0x2b8>)
 8003ae8:	4a24      	ldr	r2, [pc, #144]	@ (8003b7c <HAL_UART_MspInit+0x2bc>)
 8003aea:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003aec:	4b22      	ldr	r3, [pc, #136]	@ (8003b78 <HAL_UART_MspInit+0x2b8>)
 8003aee:	221b      	movs	r2, #27
 8003af0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003af2:	4b21      	ldr	r3, [pc, #132]	@ (8003b78 <HAL_UART_MspInit+0x2b8>)
 8003af4:	2210      	movs	r2, #16
 8003af6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003af8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b78 <HAL_UART_MspInit+0x2b8>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003afe:	4b1e      	ldr	r3, [pc, #120]	@ (8003b78 <HAL_UART_MspInit+0x2b8>)
 8003b00:	2280      	movs	r2, #128	@ 0x80
 8003b02:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b04:	4b1c      	ldr	r3, [pc, #112]	@ (8003b78 <HAL_UART_MspInit+0x2b8>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b78 <HAL_UART_MspInit+0x2b8>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003b10:	4b19      	ldr	r3, [pc, #100]	@ (8003b78 <HAL_UART_MspInit+0x2b8>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b16:	4b18      	ldr	r3, [pc, #96]	@ (8003b78 <HAL_UART_MspInit+0x2b8>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003b1c:	4816      	ldr	r0, [pc, #88]	@ (8003b78 <HAL_UART_MspInit+0x2b8>)
 8003b1e:	f001 fe51 	bl	80057c4 <HAL_DMA_Init>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8003b28:	f7fe fc64 	bl	80023f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a12      	ldr	r2, [pc, #72]	@ (8003b78 <HAL_UART_MspInit+0x2b8>)
 8003b30:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003b32:	4a11      	ldr	r2, [pc, #68]	@ (8003b78 <HAL_UART_MspInit+0x2b8>)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	2026      	movs	r0, #38	@ 0x26
 8003b3e:	f001 fe0c 	bl	800575a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b42:	2026      	movs	r0, #38	@ 0x26
 8003b44:	f001 fe23 	bl	800578e <HAL_NVIC_EnableIRQ>
}
 8003b48:	bf00      	nop
 8003b4a:	3780      	adds	r7, #128	@ 0x80
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40008000 	.word	0x40008000
 8003b54:	40021000 	.word	0x40021000
 8003b58:	48000400 	.word	0x48000400
 8003b5c:	20001c48 	.word	0x20001c48
 8003b60:	40020044 	.word	0x40020044
 8003b64:	20001ca8 	.word	0x20001ca8
 8003b68:	40020058 	.word	0x40020058
 8003b6c:	40004400 	.word	0x40004400
 8003b70:	20001d08 	.word	0x20001d08
 8003b74:	4002001c 	.word	0x4002001c
 8003b78:	20001d68 	.word	0x20001d68
 8003b7c:	40020030 	.word	0x40020030

08003b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b80:	480d      	ldr	r0, [pc, #52]	@ (8003bb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b84:	f7ff f992 	bl	8002eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b88:	480c      	ldr	r0, [pc, #48]	@ (8003bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8003b8a:	490d      	ldr	r1, [pc, #52]	@ (8003bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bc4 <LoopForever+0xe>)
  movs r3, #0
 8003b8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003b90:	e002      	b.n	8003b98 <LoopCopyDataInit>

08003b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b96:	3304      	adds	r3, #4

08003b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b9c:	d3f9      	bcc.n	8003b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8003bcc <LoopForever+0x16>)
  movs r3, #0
 8003ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ba4:	e001      	b.n	8003baa <LoopFillZerobss>

08003ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ba8:	3204      	adds	r2, #4

08003baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bac:	d3fb      	bcc.n	8003ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bae:	f007 fb2f 	bl	800b210 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003bb2:	f7fe fb85 	bl	80022c0 <main>

08003bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8003bb6:	e7fe      	b.n	8003bb6 <LoopForever>
  ldr   r0, =_estack
 8003bb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bc0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003bc4:	0800c1bc 	.word	0x0800c1bc
  ldr r2, =_sbss
 8003bc8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003bcc:	20001f14 	.word	0x20001f14

08003bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003bd0:	e7fe      	b.n	8003bd0 <ADC1_2_IRQHandler>

08003bd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bdc:	2003      	movs	r0, #3
 8003bde:	f001 fdb1 	bl	8005744 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003be2:	2000      	movs	r0, #0
 8003be4:	f000 f80e 	bl	8003c04 <HAL_InitTick>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	71fb      	strb	r3, [r7, #7]
 8003bf2:	e001      	b.n	8003bf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003bf4:	f7ff f856 	bl	8002ca4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bf8:	79fb      	ldrb	r3, [r7, #7]

}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003c10:	4b16      	ldr	r3, [pc, #88]	@ (8003c6c <HAL_InitTick+0x68>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d022      	beq.n	8003c5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003c18:	4b15      	ldr	r3, [pc, #84]	@ (8003c70 <HAL_InitTick+0x6c>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	4b13      	ldr	r3, [pc, #76]	@ (8003c6c <HAL_InitTick+0x68>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f001 fdbc 	bl	80057aa <HAL_SYSTICK_Config>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10f      	bne.n	8003c58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b0f      	cmp	r3, #15
 8003c3c:	d809      	bhi.n	8003c52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c3e:	2200      	movs	r2, #0
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	f04f 30ff 	mov.w	r0, #4294967295
 8003c46:	f001 fd88 	bl	800575a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c74 <HAL_InitTick+0x70>)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	e007      	b.n	8003c62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	73fb      	strb	r3, [r7, #15]
 8003c56:	e004      	b.n	8003c62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
 8003c5c:	e001      	b.n	8003c62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20000194 	.word	0x20000194
 8003c70:	2000018c 	.word	0x2000018c
 8003c74:	20000190 	.word	0x20000190

08003c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c7c:	4b05      	ldr	r3, [pc, #20]	@ (8003c94 <HAL_IncTick+0x1c>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4b05      	ldr	r3, [pc, #20]	@ (8003c98 <HAL_IncTick+0x20>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4413      	add	r3, r2
 8003c86:	4a03      	ldr	r2, [pc, #12]	@ (8003c94 <HAL_IncTick+0x1c>)
 8003c88:	6013      	str	r3, [r2, #0]
}
 8003c8a:	bf00      	nop
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	20001dc8 	.word	0x20001dc8
 8003c98:	20000194 	.word	0x20000194

08003c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003ca0:	4b03      	ldr	r3, [pc, #12]	@ (8003cb0 <HAL_GetTick+0x14>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20001dc8 	.word	0x20001dc8

08003cb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	609a      	str	r2, [r3, #8]
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	609a      	str	r2, [r3, #8]
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3360      	adds	r3, #96	@ 0x60
 8003d2e:	461a      	mov	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <LL_ADC_SetOffset+0x44>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003d54:	bf00      	nop
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	03fff000 	.word	0x03fff000

08003d64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3360      	adds	r3, #96	@ 0x60
 8003d72:	461a      	mov	r2, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	3360      	adds	r3, #96	@ 0x60
 8003da0:	461a      	mov	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003dba:	bf00      	nop
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b087      	sub	sp, #28
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3360      	adds	r3, #96	@ 0x60
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003df0:	bf00      	nop
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3360      	adds	r3, #96	@ 0x60
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	431a      	orrs	r2, r3
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003e26:	bf00      	nop
 8003e28:	371c      	adds	r7, #28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	615a      	str	r2, [r3, #20]
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e000      	b.n	8003e72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b087      	sub	sp, #28
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	3330      	adds	r3, #48	@ 0x30
 8003e8e:	461a      	mov	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	0a1b      	lsrs	r3, r3, #8
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	4413      	add	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	211f      	movs	r1, #31
 8003eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	401a      	ands	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	0e9b      	lsrs	r3, r3, #26
 8003eb6:	f003 011f 	and.w	r1, r3, #31
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003eca:	bf00      	nop
 8003ecc:	371c      	adds	r7, #28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b087      	sub	sp, #28
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3314      	adds	r3, #20
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	0e5b      	lsrs	r3, r3, #25
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	4413      	add	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	0d1b      	lsrs	r3, r3, #20
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	2107      	movs	r1, #7
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	401a      	ands	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	0d1b      	lsrs	r3, r3, #20
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f44:	43db      	mvns	r3, r3
 8003f46:	401a      	ands	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f003 0318 	and.w	r3, r3, #24
 8003f4e:	4908      	ldr	r1, [pc, #32]	@ (8003f70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003f50:	40d9      	lsrs	r1, r3
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	400b      	ands	r3, r1
 8003f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003f62:	bf00      	nop
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	0007ffff 	.word	0x0007ffff

08003f74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 031f 	and.w	r3, r3, #31
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003fa0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6093      	str	r3, [r2, #8]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fc8:	d101      	bne.n	8003fce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003fec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ff0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004014:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004018:	d101      	bne.n	800401e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800403c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004040:	f043 0201 	orr.w	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004064:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004068:	f043 0202 	orr.w	r2, r3, #2
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <LL_ADC_IsEnabled+0x18>
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <LL_ADC_IsEnabled+0x1a>
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d101      	bne.n	80040ba <LL_ADC_IsDisableOngoing+0x18>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <LL_ADC_IsDisableOngoing+0x1a>
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80040dc:	f043 0204 	orr.w	r2, r3, #4
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b04      	cmp	r3, #4
 8004102:	d101      	bne.n	8004108 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b08      	cmp	r3, #8
 8004128:	d101      	bne.n	800412e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800413c:	b590      	push	{r4, r7, lr}
 800413e:	b089      	sub	sp, #36	@ 0x24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e1a9      	b.n	80044aa <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fd fd71 	bl	8001c4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff ff19 	bl	8003fb4 <LL_ADC_IsDeepPowerDownEnabled>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d004      	beq.n	8004192 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff feff 	bl	8003f90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff ff34 	bl	8004004 <LL_ADC_IsInternalRegulatorEnabled>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d115      	bne.n	80041ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff ff18 	bl	8003fdc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041ac:	4b9c      	ldr	r3, [pc, #624]	@ (8004420 <HAL_ADC_Init+0x2e4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	099b      	lsrs	r3, r3, #6
 80041b2:	4a9c      	ldr	r2, [pc, #624]	@ (8004424 <HAL_ADC_Init+0x2e8>)
 80041b4:	fba2 2303 	umull	r2, r3, r2, r3
 80041b8:	099b      	lsrs	r3, r3, #6
 80041ba:	3301      	adds	r3, #1
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80041c0:	e002      	b.n	80041c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f9      	bne.n	80041c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff ff16 	bl	8004004 <LL_ADC_IsInternalRegulatorEnabled>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10d      	bne.n	80041fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e2:	f043 0210 	orr.w	r2, r3, #16
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ee:	f043 0201 	orr.w	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff ff76 	bl	80040f0 <LL_ADC_REG_IsConversionOngoing>
 8004204:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 8142 	bne.w	8004498 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2b00      	cmp	r3, #0
 8004218:	f040 813e 	bne.w	8004498 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004220:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004224:	f043 0202 	orr.w	r2, r3, #2
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff ff23 	bl	800407c <LL_ADC_IsEnabled>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d141      	bne.n	80042c0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004244:	d004      	beq.n	8004250 <HAL_ADC_Init+0x114>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a77      	ldr	r2, [pc, #476]	@ (8004428 <HAL_ADC_Init+0x2ec>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d10f      	bne.n	8004270 <HAL_ADC_Init+0x134>
 8004250:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004254:	f7ff ff12 	bl	800407c <LL_ADC_IsEnabled>
 8004258:	4604      	mov	r4, r0
 800425a:	4873      	ldr	r0, [pc, #460]	@ (8004428 <HAL_ADC_Init+0x2ec>)
 800425c:	f7ff ff0e 	bl	800407c <LL_ADC_IsEnabled>
 8004260:	4603      	mov	r3, r0
 8004262:	4323      	orrs	r3, r4
 8004264:	2b00      	cmp	r3, #0
 8004266:	bf0c      	ite	eq
 8004268:	2301      	moveq	r3, #1
 800426a:	2300      	movne	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	e012      	b.n	8004296 <HAL_ADC_Init+0x15a>
 8004270:	486e      	ldr	r0, [pc, #440]	@ (800442c <HAL_ADC_Init+0x2f0>)
 8004272:	f7ff ff03 	bl	800407c <LL_ADC_IsEnabled>
 8004276:	4604      	mov	r4, r0
 8004278:	486d      	ldr	r0, [pc, #436]	@ (8004430 <HAL_ADC_Init+0x2f4>)
 800427a:	f7ff feff 	bl	800407c <LL_ADC_IsEnabled>
 800427e:	4603      	mov	r3, r0
 8004280:	431c      	orrs	r4, r3
 8004282:	486c      	ldr	r0, [pc, #432]	@ (8004434 <HAL_ADC_Init+0x2f8>)
 8004284:	f7ff fefa 	bl	800407c <LL_ADC_IsEnabled>
 8004288:	4603      	mov	r3, r0
 800428a:	4323      	orrs	r3, r4
 800428c:	2b00      	cmp	r3, #0
 800428e:	bf0c      	ite	eq
 8004290:	2301      	moveq	r3, #1
 8004292:	2300      	movne	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d012      	beq.n	80042c0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042a2:	d004      	beq.n	80042ae <HAL_ADC_Init+0x172>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a5f      	ldr	r2, [pc, #380]	@ (8004428 <HAL_ADC_Init+0x2ec>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d101      	bne.n	80042b2 <HAL_ADC_Init+0x176>
 80042ae:	4a62      	ldr	r2, [pc, #392]	@ (8004438 <HAL_ADC_Init+0x2fc>)
 80042b0:	e000      	b.n	80042b4 <HAL_ADC_Init+0x178>
 80042b2:	4a62      	ldr	r2, [pc, #392]	@ (800443c <HAL_ADC_Init+0x300>)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f7ff fcfa 	bl	8003cb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	7f5b      	ldrb	r3, [r3, #29]
 80042c4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042ca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80042d0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80042d6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042de:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d106      	bne.n	80042fc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f2:	3b01      	subs	r3, #1
 80042f4:	045b      	lsls	r3, r3, #17
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004300:	2b00      	cmp	r3, #0
 8004302:	d009      	beq.n	8004318 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004310:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4313      	orrs	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	4b48      	ldr	r3, [pc, #288]	@ (8004440 <HAL_ADC_Init+0x304>)
 8004320:	4013      	ands	r3, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	69b9      	ldr	r1, [r7, #24]
 8004328:	430b      	orrs	r3, r1
 800432a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fee5 	bl	8004116 <LL_ADC_INJ_IsConversionOngoing>
 800434c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d17f      	bne.n	8004454 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d17c      	bne.n	8004454 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800435e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004366:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004368:	4313      	orrs	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004376:	f023 0302 	bic.w	r3, r3, #2
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6812      	ldr	r2, [r2, #0]
 800437e:	69b9      	ldr	r1, [r7, #24]
 8004380:	430b      	orrs	r3, r1
 8004382:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d017      	beq.n	80043bc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800439a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80043a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80043a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6911      	ldr	r1, [r2, #16]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	430b      	orrs	r3, r1
 80043b6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80043ba:	e013      	b.n	80043e4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80043ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80043dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043e0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d12a      	bne.n	8004444 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80043f8:	f023 0304 	bic.w	r3, r3, #4
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004404:	4311      	orrs	r1, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800440a:	4311      	orrs	r1, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004410:	430a      	orrs	r2, r1
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0201 	orr.w	r2, r2, #1
 800441c:	611a      	str	r2, [r3, #16]
 800441e:	e019      	b.n	8004454 <HAL_ADC_Init+0x318>
 8004420:	2000018c 	.word	0x2000018c
 8004424:	053e2d63 	.word	0x053e2d63
 8004428:	50000100 	.word	0x50000100
 800442c:	50000400 	.word	0x50000400
 8004430:	50000500 	.word	0x50000500
 8004434:	50000600 	.word	0x50000600
 8004438:	50000300 	.word	0x50000300
 800443c:	50000700 	.word	0x50000700
 8004440:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0201 	bic.w	r2, r2, #1
 8004452:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d10c      	bne.n	8004476 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004462:	f023 010f 	bic.w	r1, r3, #15
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	1e5a      	subs	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	631a      	str	r2, [r3, #48]	@ 0x30
 8004474:	e007      	b.n	8004486 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 020f 	bic.w	r2, r2, #15
 8004484:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448a:	f023 0303 	bic.w	r3, r3, #3
 800448e:	f043 0201 	orr.w	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004496:	e007      	b.n	80044a8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449c:	f043 0210 	orr.w	r2, r3, #16
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80044a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3724      	adds	r7, #36	@ 0x24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd90      	pop	{r4, r7, pc}
 80044b2:	bf00      	nop

080044b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044c8:	d004      	beq.n	80044d4 <HAL_ADC_Start_DMA+0x20>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a5a      	ldr	r2, [pc, #360]	@ (8004638 <HAL_ADC_Start_DMA+0x184>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d101      	bne.n	80044d8 <HAL_ADC_Start_DMA+0x24>
 80044d4:	4b59      	ldr	r3, [pc, #356]	@ (800463c <HAL_ADC_Start_DMA+0x188>)
 80044d6:	e000      	b.n	80044da <HAL_ADC_Start_DMA+0x26>
 80044d8:	4b59      	ldr	r3, [pc, #356]	@ (8004640 <HAL_ADC_Start_DMA+0x18c>)
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fd4a 	bl	8003f74 <LL_ADC_GetMultimode>
 80044e0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff fe02 	bl	80040f0 <LL_ADC_REG_IsConversionOngoing>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f040 809b 	bne.w	800462a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_ADC_Start_DMA+0x4e>
 80044fe:	2302      	movs	r3, #2
 8004500:	e096      	b.n	8004630 <HAL_ADC_Start_DMA+0x17c>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a4d      	ldr	r2, [pc, #308]	@ (8004644 <HAL_ADC_Start_DMA+0x190>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d008      	beq.n	8004526 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b05      	cmp	r3, #5
 800451e:	d002      	beq.n	8004526 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	2b09      	cmp	r3, #9
 8004524:	d17a      	bne.n	800461c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fcf6 	bl	8004f18 <ADC_Enable>
 800452c:	4603      	mov	r3, r0
 800452e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004530:	7dfb      	ldrb	r3, [r7, #23]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d16d      	bne.n	8004612 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800453e:	f023 0301 	bic.w	r3, r3, #1
 8004542:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a3a      	ldr	r2, [pc, #232]	@ (8004638 <HAL_ADC_Start_DMA+0x184>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d009      	beq.n	8004568 <HAL_ADC_Start_DMA+0xb4>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a3b      	ldr	r2, [pc, #236]	@ (8004648 <HAL_ADC_Start_DMA+0x194>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d002      	beq.n	8004564 <HAL_ADC_Start_DMA+0xb0>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	e003      	b.n	800456c <HAL_ADC_Start_DMA+0xb8>
 8004564:	4b39      	ldr	r3, [pc, #228]	@ (800464c <HAL_ADC_Start_DMA+0x198>)
 8004566:	e001      	b.n	800456c <HAL_ADC_Start_DMA+0xb8>
 8004568:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	4293      	cmp	r3, r2
 8004572:	d002      	beq.n	800457a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d105      	bne.n	8004586 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800457e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d006      	beq.n	80045a0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004596:	f023 0206 	bic.w	r2, r3, #6
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	661a      	str	r2, [r3, #96]	@ 0x60
 800459e:	e002      	b.n	80045a6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045aa:	4a29      	ldr	r2, [pc, #164]	@ (8004650 <HAL_ADC_Start_DMA+0x19c>)
 80045ac:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b2:	4a28      	ldr	r2, [pc, #160]	@ (8004654 <HAL_ADC_Start_DMA+0x1a0>)
 80045b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ba:	4a27      	ldr	r2, [pc, #156]	@ (8004658 <HAL_ADC_Start_DMA+0x1a4>)
 80045bc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	221c      	movs	r2, #28
 80045c4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0210 	orr.w	r2, r2, #16
 80045dc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0201 	orr.w	r2, r2, #1
 80045ec:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3340      	adds	r3, #64	@ 0x40
 80045f8:	4619      	mov	r1, r3
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f001 f989 	bl	8005914 <HAL_DMA_Start_IT>
 8004602:	4603      	mov	r3, r0
 8004604:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff fd5c 	bl	80040c8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004610:	e00d      	b.n	800462e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800461a:	e008      	b.n	800462e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004628:	e001      	b.n	800462e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800462a:	2302      	movs	r3, #2
 800462c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800462e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	50000100 	.word	0x50000100
 800463c:	50000300 	.word	0x50000300
 8004640:	50000700 	.word	0x50000700
 8004644:	50000600 	.word	0x50000600
 8004648:	50000500 	.word	0x50000500
 800464c:	50000400 	.word	0x50000400
 8004650:	08005103 	.word	0x08005103
 8004654:	080051db 	.word	0x080051db
 8004658:	080051f7 	.word	0x080051f7

0800465c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b0b6      	sub	sp, #216	@ 0xd8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d102      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x24>
 80046b6:	2302      	movs	r3, #2
 80046b8:	f000 bc13 	b.w	8004ee2 <HAL_ADC_ConfigChannel+0x84a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fd11 	bl	80040f0 <LL_ADC_REG_IsConversionOngoing>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f040 83f3 	bne.w	8004ebc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6859      	ldr	r1, [r3, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	f7ff fbcb 	bl	8003e7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff fcff 	bl	80040f0 <LL_ADC_REG_IsConversionOngoing>
 80046f2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff fd0b 	bl	8004116 <LL_ADC_INJ_IsConversionOngoing>
 8004700:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004704:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004708:	2b00      	cmp	r3, #0
 800470a:	f040 81d9 	bne.w	8004ac0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800470e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004712:	2b00      	cmp	r3, #0
 8004714:	f040 81d4 	bne.w	8004ac0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004720:	d10f      	bne.n	8004742 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2200      	movs	r2, #0
 800472c:	4619      	mov	r1, r3
 800472e:	f7ff fbd2 	bl	8003ed6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fb79 	bl	8003e32 <LL_ADC_SetSamplingTimeCommonConfig>
 8004740:	e00e      	b.n	8004760 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	6819      	ldr	r1, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	461a      	mov	r2, r3
 8004750:	f7ff fbc1 	bl	8003ed6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2100      	movs	r1, #0
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fb69 	bl	8003e32 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	08db      	lsrs	r3, r3, #3
 800476c:	f003 0303 	and.w	r3, r3, #3
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b04      	cmp	r3, #4
 8004780:	d022      	beq.n	80047c8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6919      	ldr	r1, [r3, #16]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004792:	f7ff fac3 	bl	8003d1c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6919      	ldr	r1, [r3, #16]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	461a      	mov	r2, r3
 80047a4:	f7ff fb0f 	bl	8003dc6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d102      	bne.n	80047be <HAL_ADC_ConfigChannel+0x126>
 80047b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047bc:	e000      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x128>
 80047be:	2300      	movs	r3, #0
 80047c0:	461a      	mov	r2, r3
 80047c2:	f7ff fb1b 	bl	8003dfc <LL_ADC_SetOffsetSaturation>
 80047c6:	e17b      	b.n	8004ac0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2100      	movs	r1, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff fac8 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10a      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x15c>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2100      	movs	r1, #0
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff fabd 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 80047ea:	4603      	mov	r3, r0
 80047ec:	0e9b      	lsrs	r3, r3, #26
 80047ee:	f003 021f 	and.w	r2, r3, #31
 80047f2:	e01e      	b.n	8004832 <HAL_ADC_ConfigChannel+0x19a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2100      	movs	r1, #0
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fab2 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 8004800:	4603      	mov	r3, r0
 8004802:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004806:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800480a:	fa93 f3a3 	rbit	r3, r3
 800480e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004816:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800481a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004822:	2320      	movs	r3, #32
 8004824:	e004      	b.n	8004830 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004826:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800482a:	fab3 f383 	clz	r3, r3
 800482e:	b2db      	uxtb	r3, r3
 8004830:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800483a:	2b00      	cmp	r3, #0
 800483c:	d105      	bne.n	800484a <HAL_ADC_ConfigChannel+0x1b2>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	0e9b      	lsrs	r3, r3, #26
 8004844:	f003 031f 	and.w	r3, r3, #31
 8004848:	e018      	b.n	800487c <HAL_ADC_ConfigChannel+0x1e4>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004852:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004856:	fa93 f3a3 	rbit	r3, r3
 800485a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800485e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004866:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800486e:	2320      	movs	r3, #32
 8004870:	e004      	b.n	800487c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004872:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004876:	fab3 f383 	clz	r3, r3
 800487a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800487c:	429a      	cmp	r2, r3
 800487e:	d106      	bne.n	800488e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2200      	movs	r2, #0
 8004886:	2100      	movs	r1, #0
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff fa81 	bl	8003d90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2101      	movs	r1, #1
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff fa65 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 800489a:	4603      	mov	r3, r0
 800489c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <HAL_ADC_ConfigChannel+0x222>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2101      	movs	r1, #1
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fa5a 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 80048b0:	4603      	mov	r3, r0
 80048b2:	0e9b      	lsrs	r3, r3, #26
 80048b4:	f003 021f 	and.w	r2, r3, #31
 80048b8:	e01e      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x260>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2101      	movs	r1, #1
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff fa4f 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80048d0:	fa93 f3a3 	rbit	r3, r3
 80048d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80048d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80048dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80048e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80048e8:	2320      	movs	r3, #32
 80048ea:	e004      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80048ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048f0:	fab3 f383 	clz	r3, r3
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004900:	2b00      	cmp	r3, #0
 8004902:	d105      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x278>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	0e9b      	lsrs	r3, r3, #26
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	e018      	b.n	8004942 <HAL_ADC_ConfigChannel+0x2aa>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004918:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800491c:	fa93 f3a3 	rbit	r3, r3
 8004920:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004924:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004928:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800492c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004934:	2320      	movs	r3, #32
 8004936:	e004      	b.n	8004942 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004938:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800493c:	fab3 f383 	clz	r3, r3
 8004940:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004942:	429a      	cmp	r2, r3
 8004944:	d106      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2200      	movs	r2, #0
 800494c:	2101      	movs	r1, #1
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fa1e 	bl	8003d90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2102      	movs	r1, #2
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fa02 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 8004960:	4603      	mov	r3, r0
 8004962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10a      	bne.n	8004980 <HAL_ADC_ConfigChannel+0x2e8>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2102      	movs	r1, #2
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff f9f7 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 8004976:	4603      	mov	r3, r0
 8004978:	0e9b      	lsrs	r3, r3, #26
 800497a:	f003 021f 	and.w	r2, r3, #31
 800497e:	e01e      	b.n	80049be <HAL_ADC_ConfigChannel+0x326>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2102      	movs	r1, #2
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff f9ec 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 800498c:	4603      	mov	r3, r0
 800498e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004996:	fa93 f3a3 	rbit	r3, r3
 800499a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800499e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80049a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80049a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80049ae:	2320      	movs	r3, #32
 80049b0:	e004      	b.n	80049bc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80049b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80049b6:	fab3 f383 	clz	r3, r3
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d105      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x33e>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	0e9b      	lsrs	r3, r3, #26
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	e016      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x36c>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049e2:	fa93 f3a3 	rbit	r3, r3
 80049e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80049e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80049ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80049f6:	2320      	movs	r3, #32
 80049f8:	e004      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80049fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049fe:	fab3 f383 	clz	r3, r3
 8004a02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d106      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2102      	movs	r1, #2
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff f9bd 	bl	8003d90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2103      	movs	r1, #3
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff f9a1 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <HAL_ADC_ConfigChannel+0x3aa>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2103      	movs	r1, #3
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff f996 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	0e9b      	lsrs	r3, r3, #26
 8004a3c:	f003 021f 	and.w	r2, r3, #31
 8004a40:	e017      	b.n	8004a72 <HAL_ADC_ConfigChannel+0x3da>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2103      	movs	r1, #3
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff f98b 	bl	8003d64 <LL_ADC_GetOffsetChannel>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a54:	fa93 f3a3 	rbit	r3, r3
 8004a58:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004a5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a5c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004a5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004a64:	2320      	movs	r3, #32
 8004a66:	e003      	b.n	8004a70 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004a68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a6a:	fab3 f383 	clz	r3, r3
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d105      	bne.n	8004a8a <HAL_ADC_ConfigChannel+0x3f2>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	0e9b      	lsrs	r3, r3, #26
 8004a84:	f003 031f 	and.w	r3, r3, #31
 8004a88:	e011      	b.n	8004aae <HAL_ADC_ConfigChannel+0x416>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a92:	fa93 f3a3 	rbit	r3, r3
 8004a96:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004aa2:	2320      	movs	r3, #32
 8004aa4:	e003      	b.n	8004aae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aa8:	fab3 f383 	clz	r3, r3
 8004aac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d106      	bne.n	8004ac0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2103      	movs	r1, #3
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff f968 	bl	8003d90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff fad9 	bl	800407c <LL_ADC_IsEnabled>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f040 813d 	bne.w	8004d4c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6819      	ldr	r1, [r3, #0]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f7ff fa24 	bl	8003f2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4aa2      	ldr	r2, [pc, #648]	@ (8004d74 <HAL_ADC_ConfigChannel+0x6dc>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	f040 812e 	bne.w	8004d4c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10b      	bne.n	8004b18 <HAL_ADC_ConfigChannel+0x480>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	0e9b      	lsrs	r3, r3, #26
 8004b06:	3301      	adds	r3, #1
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	2b09      	cmp	r3, #9
 8004b0e:	bf94      	ite	ls
 8004b10:	2301      	movls	r3, #1
 8004b12:	2300      	movhi	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	e019      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x4b4>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b20:	fa93 f3a3 	rbit	r3, r3
 8004b24:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b28:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004b2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004b30:	2320      	movs	r3, #32
 8004b32:	e003      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004b34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b36:	fab3 f383 	clz	r3, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	f003 031f 	and.w	r3, r3, #31
 8004b42:	2b09      	cmp	r3, #9
 8004b44:	bf94      	ite	ls
 8004b46:	2301      	movls	r3, #1
 8004b48:	2300      	movhi	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d079      	beq.n	8004c44 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d107      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0x4d4>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	0e9b      	lsrs	r3, r3, #26
 8004b62:	3301      	adds	r3, #1
 8004b64:	069b      	lsls	r3, r3, #26
 8004b66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b6a:	e015      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x500>
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b74:	fa93 f3a3 	rbit	r3, r3
 8004b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b7c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004b84:	2320      	movs	r3, #32
 8004b86:	e003      	b.n	8004b90 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b8a:	fab3 f383 	clz	r3, r3
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	3301      	adds	r3, #1
 8004b92:	069b      	lsls	r3, r3, #26
 8004b94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x520>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	0e9b      	lsrs	r3, r3, #26
 8004baa:	3301      	adds	r3, #1
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb6:	e017      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x550>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bc0:	fa93 f3a3 	rbit	r3, r3
 8004bc4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004bd0:	2320      	movs	r3, #32
 8004bd2:	e003      	b.n	8004bdc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bd6:	fab3 f383 	clz	r3, r3
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	3301      	adds	r3, #1
 8004bde:	f003 031f 	and.w	r3, r3, #31
 8004be2:	2101      	movs	r1, #1
 8004be4:	fa01 f303 	lsl.w	r3, r1, r3
 8004be8:	ea42 0103 	orr.w	r1, r2, r3
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <HAL_ADC_ConfigChannel+0x576>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	0e9b      	lsrs	r3, r3, #26
 8004bfe:	3301      	adds	r3, #1
 8004c00:	f003 021f 	and.w	r2, r3, #31
 8004c04:	4613      	mov	r3, r2
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	4413      	add	r3, r2
 8004c0a:	051b      	lsls	r3, r3, #20
 8004c0c:	e018      	b.n	8004c40 <HAL_ADC_ConfigChannel+0x5a8>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c16:	fa93 f3a3 	rbit	r3, r3
 8004c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004c26:	2320      	movs	r3, #32
 8004c28:	e003      	b.n	8004c32 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c2c:	fab3 f383 	clz	r3, r3
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	3301      	adds	r3, #1
 8004c34:	f003 021f 	and.w	r2, r3, #31
 8004c38:	4613      	mov	r3, r2
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	4413      	add	r3, r2
 8004c3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c40:	430b      	orrs	r3, r1
 8004c42:	e07e      	b.n	8004d42 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d107      	bne.n	8004c60 <HAL_ADC_ConfigChannel+0x5c8>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	0e9b      	lsrs	r3, r3, #26
 8004c56:	3301      	adds	r3, #1
 8004c58:	069b      	lsls	r3, r3, #26
 8004c5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c5e:	e015      	b.n	8004c8c <HAL_ADC_ConfigChannel+0x5f4>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c68:	fa93 f3a3 	rbit	r3, r3
 8004c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c70:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004c78:	2320      	movs	r3, #32
 8004c7a:	e003      	b.n	8004c84 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7e:	fab3 f383 	clz	r3, r3
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	3301      	adds	r3, #1
 8004c86:	069b      	lsls	r3, r3, #26
 8004c88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d109      	bne.n	8004cac <HAL_ADC_ConfigChannel+0x614>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	0e9b      	lsrs	r3, r3, #26
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8004caa:	e017      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x644>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	fa93 f3a3 	rbit	r3, r3
 8004cb8:	61fb      	str	r3, [r7, #28]
  return result;
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004cc4:	2320      	movs	r3, #32
 8004cc6:	e003      	b.n	8004cd0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cca:	fab3 f383 	clz	r3, r3
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	f003 031f 	and.w	r3, r3, #31
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cdc:	ea42 0103 	orr.w	r1, r2, r3
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10d      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x670>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	0e9b      	lsrs	r3, r3, #26
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	f003 021f 	and.w	r2, r3, #31
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3b1e      	subs	r3, #30
 8004d00:	051b      	lsls	r3, r3, #20
 8004d02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d06:	e01b      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x6a8>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	fa93 f3a3 	rbit	r3, r3
 8004d14:	613b      	str	r3, [r7, #16]
  return result;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004d20:	2320      	movs	r3, #32
 8004d22:	e003      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	fab3 f383 	clz	r3, r3
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f003 021f 	and.w	r2, r3, #31
 8004d32:	4613      	mov	r3, r2
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	4413      	add	r3, r2
 8004d38:	3b1e      	subs	r3, #30
 8004d3a:	051b      	lsls	r3, r3, #20
 8004d3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d40:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d46:	4619      	mov	r1, r3
 8004d48:	f7ff f8c5 	bl	8003ed6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	4b09      	ldr	r3, [pc, #36]	@ (8004d78 <HAL_ADC_ConfigChannel+0x6e0>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 80be 	beq.w	8004ed6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d62:	d004      	beq.n	8004d6e <HAL_ADC_ConfigChannel+0x6d6>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a04      	ldr	r2, [pc, #16]	@ (8004d7c <HAL_ADC_ConfigChannel+0x6e4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d10a      	bne.n	8004d84 <HAL_ADC_ConfigChannel+0x6ec>
 8004d6e:	4b04      	ldr	r3, [pc, #16]	@ (8004d80 <HAL_ADC_ConfigChannel+0x6e8>)
 8004d70:	e009      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x6ee>
 8004d72:	bf00      	nop
 8004d74:	407f0000 	.word	0x407f0000
 8004d78:	80080000 	.word	0x80080000
 8004d7c:	50000100 	.word	0x50000100
 8004d80:	50000300 	.word	0x50000300
 8004d84:	4b59      	ldr	r3, [pc, #356]	@ (8004eec <HAL_ADC_ConfigChannel+0x854>)
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fe ffba 	bl	8003d00 <LL_ADC_GetCommonPathInternalCh>
 8004d8c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a56      	ldr	r2, [pc, #344]	@ (8004ef0 <HAL_ADC_ConfigChannel+0x858>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d004      	beq.n	8004da4 <HAL_ADC_ConfigChannel+0x70c>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a55      	ldr	r2, [pc, #340]	@ (8004ef4 <HAL_ADC_ConfigChannel+0x85c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d13a      	bne.n	8004e1a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004da4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004da8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d134      	bne.n	8004e1a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004db8:	d005      	beq.n	8004dc6 <HAL_ADC_ConfigChannel+0x72e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a4e      	ldr	r2, [pc, #312]	@ (8004ef8 <HAL_ADC_ConfigChannel+0x860>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	f040 8085 	bne.w	8004ed0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dce:	d004      	beq.n	8004dda <HAL_ADC_ConfigChannel+0x742>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a49      	ldr	r2, [pc, #292]	@ (8004efc <HAL_ADC_ConfigChannel+0x864>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d101      	bne.n	8004dde <HAL_ADC_ConfigChannel+0x746>
 8004dda:	4a49      	ldr	r2, [pc, #292]	@ (8004f00 <HAL_ADC_ConfigChannel+0x868>)
 8004ddc:	e000      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x748>
 8004dde:	4a43      	ldr	r2, [pc, #268]	@ (8004eec <HAL_ADC_ConfigChannel+0x854>)
 8004de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004de4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004de8:	4619      	mov	r1, r3
 8004dea:	4610      	mov	r0, r2
 8004dec:	f7fe ff75 	bl	8003cda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004df0:	4b44      	ldr	r3, [pc, #272]	@ (8004f04 <HAL_ADC_ConfigChannel+0x86c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	099b      	lsrs	r3, r3, #6
 8004df6:	4a44      	ldr	r2, [pc, #272]	@ (8004f08 <HAL_ADC_ConfigChannel+0x870>)
 8004df8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfc:	099b      	lsrs	r3, r3, #6
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	4613      	mov	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e0a:	e002      	b.n	8004e12 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f9      	bne.n	8004e0c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e18:	e05a      	b.n	8004ed0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a3b      	ldr	r2, [pc, #236]	@ (8004f0c <HAL_ADC_ConfigChannel+0x874>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d125      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d11f      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a31      	ldr	r2, [pc, #196]	@ (8004efc <HAL_ADC_ConfigChannel+0x864>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d104      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x7ac>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a34      	ldr	r2, [pc, #208]	@ (8004f10 <HAL_ADC_ConfigChannel+0x878>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d047      	beq.n	8004ed4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e4c:	d004      	beq.n	8004e58 <HAL_ADC_ConfigChannel+0x7c0>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a2a      	ldr	r2, [pc, #168]	@ (8004efc <HAL_ADC_ConfigChannel+0x864>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d101      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x7c4>
 8004e58:	4a29      	ldr	r2, [pc, #164]	@ (8004f00 <HAL_ADC_ConfigChannel+0x868>)
 8004e5a:	e000      	b.n	8004e5e <HAL_ADC_ConfigChannel+0x7c6>
 8004e5c:	4a23      	ldr	r2, [pc, #140]	@ (8004eec <HAL_ADC_ConfigChannel+0x854>)
 8004e5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e66:	4619      	mov	r1, r3
 8004e68:	4610      	mov	r0, r2
 8004e6a:	f7fe ff36 	bl	8003cda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e6e:	e031      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a27      	ldr	r2, [pc, #156]	@ (8004f14 <HAL_ADC_ConfigChannel+0x87c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d12d      	bne.n	8004ed6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d127      	bne.n	8004ed6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004efc <HAL_ADC_ConfigChannel+0x864>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d022      	beq.n	8004ed6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e98:	d004      	beq.n	8004ea4 <HAL_ADC_ConfigChannel+0x80c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a17      	ldr	r2, [pc, #92]	@ (8004efc <HAL_ADC_ConfigChannel+0x864>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d101      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x810>
 8004ea4:	4a16      	ldr	r2, [pc, #88]	@ (8004f00 <HAL_ADC_ConfigChannel+0x868>)
 8004ea6:	e000      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x812>
 8004ea8:	4a10      	ldr	r2, [pc, #64]	@ (8004eec <HAL_ADC_ConfigChannel+0x854>)
 8004eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004eae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f7fe ff10 	bl	8003cda <LL_ADC_SetCommonPathInternalCh>
 8004eba:	e00c      	b.n	8004ed6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ec0:	f043 0220 	orr.w	r2, r3, #32
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004ece:	e002      	b.n	8004ed6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ed0:	bf00      	nop
 8004ed2:	e000      	b.n	8004ed6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ed4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004ede:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	37d8      	adds	r7, #216	@ 0xd8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	50000700 	.word	0x50000700
 8004ef0:	c3210000 	.word	0xc3210000
 8004ef4:	90c00010 	.word	0x90c00010
 8004ef8:	50000600 	.word	0x50000600
 8004efc:	50000100 	.word	0x50000100
 8004f00:	50000300 	.word	0x50000300
 8004f04:	2000018c 	.word	0x2000018c
 8004f08:	053e2d63 	.word	0x053e2d63
 8004f0c:	c7520000 	.word	0xc7520000
 8004f10:	50000500 	.word	0x50000500
 8004f14:	cb840000 	.word	0xcb840000

08004f18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff f8a7 	bl	800407c <LL_ADC_IsEnabled>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d176      	bne.n	8005022 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800502c <ADC_Enable+0x114>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00d      	beq.n	8004f5e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f46:	f043 0210 	orr.w	r2, r3, #16
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f52:	f043 0201 	orr.w	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e062      	b.n	8005024 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff f862 	bl	800402c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f70:	d004      	beq.n	8004f7c <ADC_Enable+0x64>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2e      	ldr	r2, [pc, #184]	@ (8005030 <ADC_Enable+0x118>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d101      	bne.n	8004f80 <ADC_Enable+0x68>
 8004f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8005034 <ADC_Enable+0x11c>)
 8004f7e:	e000      	b.n	8004f82 <ADC_Enable+0x6a>
 8004f80:	4b2d      	ldr	r3, [pc, #180]	@ (8005038 <ADC_Enable+0x120>)
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fe febc 	bl	8003d00 <LL_ADC_GetCommonPathInternalCh>
 8004f88:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004f8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d013      	beq.n	8004fba <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f92:	4b2a      	ldr	r3, [pc, #168]	@ (800503c <ADC_Enable+0x124>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	099b      	lsrs	r3, r3, #6
 8004f98:	4a29      	ldr	r2, [pc, #164]	@ (8005040 <ADC_Enable+0x128>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	099b      	lsrs	r3, r3, #6
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004fac:	e002      	b.n	8004fb4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f9      	bne.n	8004fae <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004fba:	f7fe fe6f 	bl	8003c9c <HAL_GetTick>
 8004fbe:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fc0:	e028      	b.n	8005014 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff f858 	bl	800407c <LL_ADC_IsEnabled>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d104      	bne.n	8004fdc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff f828 	bl	800402c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004fdc:	f7fe fe5e 	bl	8003c9c <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d914      	bls.n	8005014 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d00d      	beq.n	8005014 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ffc:	f043 0210 	orr.w	r2, r3, #16
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005008:	f043 0201 	orr.w	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e007      	b.n	8005024 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b01      	cmp	r3, #1
 8005020:	d1cf      	bne.n	8004fc2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	8000003f 	.word	0x8000003f
 8005030:	50000100 	.word	0x50000100
 8005034:	50000300 	.word	0x50000300
 8005038:	50000700 	.word	0x50000700
 800503c:	2000018c 	.word	0x2000018c
 8005040:	053e2d63 	.word	0x053e2d63

08005044 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff f826 	bl	80040a2 <LL_ADC_IsDisableOngoing>
 8005056:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff f80d 	bl	800407c <LL_ADC_IsEnabled>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d047      	beq.n	80050f8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d144      	bne.n	80050f8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 030d 	and.w	r3, r3, #13
 8005078:	2b01      	cmp	r3, #1
 800507a:	d10c      	bne.n	8005096 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f7fe ffe7 	bl	8004054 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2203      	movs	r2, #3
 800508c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800508e:	f7fe fe05 	bl	8003c9c <HAL_GetTick>
 8005092:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005094:	e029      	b.n	80050ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800509a:	f043 0210 	orr.w	r2, r3, #16
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050a6:	f043 0201 	orr.w	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e023      	b.n	80050fa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80050b2:	f7fe fdf3 	bl	8003c9c <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d914      	bls.n	80050ea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00d      	beq.n	80050ea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d2:	f043 0210 	orr.w	r2, r3, #16
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050de:	f043 0201 	orr.w	r2, r3, #1
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e007      	b.n	80050fa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1dc      	bne.n	80050b2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005114:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005118:	2b00      	cmp	r3, #0
 800511a:	d14b      	bne.n	80051b4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005120:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d021      	beq.n	800517a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f7fe fe8c 	bl	8003e58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d032      	beq.n	80051ac <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d12b      	bne.n	80051ac <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005158:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005164:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d11f      	bne.n	80051ac <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005170:	f043 0201 	orr.w	r2, r3, #1
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005178:	e018      	b.n	80051ac <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d111      	bne.n	80051ac <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800518c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005198:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d105      	bne.n	80051ac <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a4:	f043 0201 	orr.w	r2, r3, #1
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f7ff fa55 	bl	800465c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80051b2:	e00e      	b.n	80051d2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7ff fa5f 	bl	8004684 <HAL_ADC_ErrorCallback>
}
 80051c6:	e004      	b.n	80051d2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	4798      	blx	r3
}
 80051d2:	bf00      	nop
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f7ff fa41 	bl	8004670 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80051ee:	bf00      	nop
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005202:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005208:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005214:	f043 0204 	orr.w	r2, r3, #4
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f7ff fa31 	bl	8004684 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <LL_ADC_IsEnabled>:
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b01      	cmp	r3, #1
 800523c:	d101      	bne.n	8005242 <LL_ADC_IsEnabled+0x18>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <LL_ADC_IsEnabled+0x1a>
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <LL_ADC_StartCalibration>:
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005262:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800526c:	4313      	orrs	r3, r2
 800526e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	609a      	str	r2, [r3, #8]
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <LL_ADC_IsCalibrationOnGoing>:
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005292:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005296:	d101      	bne.n	800529c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <LL_ADC_REG_IsConversionOngoing>:
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 0304 	and.w	r3, r3, #4
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d101      	bne.n	80052c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80052da:	2300      	movs	r3, #0
 80052dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_ADCEx_Calibration_Start+0x1c>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e04d      	b.n	8005388 <HAL_ADCEx_Calibration_Start+0xb8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7ff fea5 	bl	8005044 <ADC_Disable>
 80052fa:	4603      	mov	r3, r0
 80052fc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d136      	bne.n	8005372 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005308:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800530c:	f023 0302 	bic.w	r3, r3, #2
 8005310:	f043 0202 	orr.w	r2, r3, #2
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6839      	ldr	r1, [r7, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f7ff ff96 	bl	8005250 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005324:	e014      	b.n	8005350 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	3301      	adds	r3, #1
 800532a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4a18      	ldr	r2, [pc, #96]	@ (8005390 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d90d      	bls.n	8005350 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005338:	f023 0312 	bic.w	r3, r3, #18
 800533c:	f043 0210 	orr.w	r2, r3, #16
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e01b      	b.n	8005388 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff ff94 	bl	8005282 <LL_ADC_IsCalibrationOnGoing>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e2      	bne.n	8005326 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005364:	f023 0303 	bic.w	r3, r3, #3
 8005368:	f043 0201 	orr.w	r2, r3, #1
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005370:	e005      	b.n	800537e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005376:	f043 0210 	orr.w	r2, r3, #16
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005386:	7bfb      	ldrb	r3, [r7, #15]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	0004de01 	.word	0x0004de01

08005394 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005394:	b590      	push	{r4, r7, lr}
 8005396:	b0a1      	sub	sp, #132	@ 0x84
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e0e7      	b.n	8005582 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80053ba:	2300      	movs	r3, #0
 80053bc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80053be:	2300      	movs	r3, #0
 80053c0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053ca:	d102      	bne.n	80053d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80053cc:	4b6f      	ldr	r3, [pc, #444]	@ (800558c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80053ce:	60bb      	str	r3, [r7, #8]
 80053d0:	e009      	b.n	80053e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a6e      	ldr	r2, [pc, #440]	@ (8005590 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d102      	bne.n	80053e2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80053dc:	4b6d      	ldr	r3, [pc, #436]	@ (8005594 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80053de:	60bb      	str	r3, [r7, #8]
 80053e0:	e001      	b.n	80053e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80053e2:	2300      	movs	r3, #0
 80053e4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10b      	bne.n	8005404 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f0:	f043 0220 	orr.w	r2, r3, #32
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e0be      	b.n	8005582 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff ff4f 	bl	80052aa <LL_ADC_REG_IsConversionOngoing>
 800540c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff ff49 	bl	80052aa <LL_ADC_REG_IsConversionOngoing>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	f040 80a0 	bne.w	8005560 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005420:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005422:	2b00      	cmp	r3, #0
 8005424:	f040 809c 	bne.w	8005560 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005430:	d004      	beq.n	800543c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a55      	ldr	r2, [pc, #340]	@ (800558c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d101      	bne.n	8005440 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800543c:	4b56      	ldr	r3, [pc, #344]	@ (8005598 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800543e:	e000      	b.n	8005442 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005440:	4b56      	ldr	r3, [pc, #344]	@ (800559c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005442:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d04b      	beq.n	80054e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800544c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	6859      	ldr	r1, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800545e:	035b      	lsls	r3, r3, #13
 8005460:	430b      	orrs	r3, r1
 8005462:	431a      	orrs	r2, r3
 8005464:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005466:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005470:	d004      	beq.n	800547c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a45      	ldr	r2, [pc, #276]	@ (800558c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d10f      	bne.n	800549c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800547c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005480:	f7ff fed3 	bl	800522a <LL_ADC_IsEnabled>
 8005484:	4604      	mov	r4, r0
 8005486:	4841      	ldr	r0, [pc, #260]	@ (800558c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005488:	f7ff fecf 	bl	800522a <LL_ADC_IsEnabled>
 800548c:	4603      	mov	r3, r0
 800548e:	4323      	orrs	r3, r4
 8005490:	2b00      	cmp	r3, #0
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	e012      	b.n	80054c2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800549c:	483c      	ldr	r0, [pc, #240]	@ (8005590 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800549e:	f7ff fec4 	bl	800522a <LL_ADC_IsEnabled>
 80054a2:	4604      	mov	r4, r0
 80054a4:	483b      	ldr	r0, [pc, #236]	@ (8005594 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80054a6:	f7ff fec0 	bl	800522a <LL_ADC_IsEnabled>
 80054aa:	4603      	mov	r3, r0
 80054ac:	431c      	orrs	r4, r3
 80054ae:	483c      	ldr	r0, [pc, #240]	@ (80055a0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80054b0:	f7ff febb 	bl	800522a <LL_ADC_IsEnabled>
 80054b4:	4603      	mov	r3, r0
 80054b6:	4323      	orrs	r3, r4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	bf0c      	ite	eq
 80054bc:	2301      	moveq	r3, #1
 80054be:	2300      	movne	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d056      	beq.n	8005574 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80054c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80054ce:	f023 030f 	bic.w	r3, r3, #15
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	6811      	ldr	r1, [r2, #0]
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	6892      	ldr	r2, [r2, #8]
 80054da:	430a      	orrs	r2, r1
 80054dc:	431a      	orrs	r2, r3
 80054de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054e0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80054e2:	e047      	b.n	8005574 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80054e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054ee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054f8:	d004      	beq.n	8005504 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a23      	ldr	r2, [pc, #140]	@ (800558c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d10f      	bne.n	8005524 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005504:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005508:	f7ff fe8f 	bl	800522a <LL_ADC_IsEnabled>
 800550c:	4604      	mov	r4, r0
 800550e:	481f      	ldr	r0, [pc, #124]	@ (800558c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005510:	f7ff fe8b 	bl	800522a <LL_ADC_IsEnabled>
 8005514:	4603      	mov	r3, r0
 8005516:	4323      	orrs	r3, r4
 8005518:	2b00      	cmp	r3, #0
 800551a:	bf0c      	ite	eq
 800551c:	2301      	moveq	r3, #1
 800551e:	2300      	movne	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	e012      	b.n	800554a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005524:	481a      	ldr	r0, [pc, #104]	@ (8005590 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005526:	f7ff fe80 	bl	800522a <LL_ADC_IsEnabled>
 800552a:	4604      	mov	r4, r0
 800552c:	4819      	ldr	r0, [pc, #100]	@ (8005594 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800552e:	f7ff fe7c 	bl	800522a <LL_ADC_IsEnabled>
 8005532:	4603      	mov	r3, r0
 8005534:	431c      	orrs	r4, r3
 8005536:	481a      	ldr	r0, [pc, #104]	@ (80055a0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005538:	f7ff fe77 	bl	800522a <LL_ADC_IsEnabled>
 800553c:	4603      	mov	r3, r0
 800553e:	4323      	orrs	r3, r4
 8005540:	2b00      	cmp	r3, #0
 8005542:	bf0c      	ite	eq
 8005544:	2301      	moveq	r3, #1
 8005546:	2300      	movne	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d012      	beq.n	8005574 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800554e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005556:	f023 030f 	bic.w	r3, r3, #15
 800555a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800555c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800555e:	e009      	b.n	8005574 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005564:	f043 0220 	orr.w	r2, r3, #32
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005572:	e000      	b.n	8005576 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005574:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800557e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005582:	4618      	mov	r0, r3
 8005584:	3784      	adds	r7, #132	@ 0x84
 8005586:	46bd      	mov	sp, r7
 8005588:	bd90      	pop	{r4, r7, pc}
 800558a:	bf00      	nop
 800558c:	50000100 	.word	0x50000100
 8005590:	50000400 	.word	0x50000400
 8005594:	50000500 	.word	0x50000500
 8005598:	50000300 	.word	0x50000300
 800559c:	50000700 	.word	0x50000700
 80055a0:	50000600 	.word	0x50000600

080055a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055b4:	4b0c      	ldr	r3, [pc, #48]	@ (80055e8 <__NVIC_SetPriorityGrouping+0x44>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80055c0:	4013      	ands	r3, r2
 80055c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80055d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055d6:	4a04      	ldr	r2, [pc, #16]	@ (80055e8 <__NVIC_SetPriorityGrouping+0x44>)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	60d3      	str	r3, [r2, #12]
}
 80055dc:	bf00      	nop
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	e000ed00 	.word	0xe000ed00

080055ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055f0:	4b04      	ldr	r3, [pc, #16]	@ (8005604 <__NVIC_GetPriorityGrouping+0x18>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	0a1b      	lsrs	r3, r3, #8
 80055f6:	f003 0307 	and.w	r3, r3, #7
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	e000ed00 	.word	0xe000ed00

08005608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005616:	2b00      	cmp	r3, #0
 8005618:	db0b      	blt.n	8005632 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	f003 021f 	and.w	r2, r3, #31
 8005620:	4907      	ldr	r1, [pc, #28]	@ (8005640 <__NVIC_EnableIRQ+0x38>)
 8005622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	2001      	movs	r0, #1
 800562a:	fa00 f202 	lsl.w	r2, r0, r2
 800562e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	e000e100 	.word	0xe000e100

08005644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	4603      	mov	r3, r0
 800564c:	6039      	str	r1, [r7, #0]
 800564e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005654:	2b00      	cmp	r3, #0
 8005656:	db0a      	blt.n	800566e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	b2da      	uxtb	r2, r3
 800565c:	490c      	ldr	r1, [pc, #48]	@ (8005690 <__NVIC_SetPriority+0x4c>)
 800565e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005662:	0112      	lsls	r2, r2, #4
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	440b      	add	r3, r1
 8005668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800566c:	e00a      	b.n	8005684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	b2da      	uxtb	r2, r3
 8005672:	4908      	ldr	r1, [pc, #32]	@ (8005694 <__NVIC_SetPriority+0x50>)
 8005674:	79fb      	ldrb	r3, [r7, #7]
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	3b04      	subs	r3, #4
 800567c:	0112      	lsls	r2, r2, #4
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	440b      	add	r3, r1
 8005682:	761a      	strb	r2, [r3, #24]
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	e000e100 	.word	0xe000e100
 8005694:	e000ed00 	.word	0xe000ed00

08005698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005698:	b480      	push	{r7}
 800569a:	b089      	sub	sp, #36	@ 0x24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f1c3 0307 	rsb	r3, r3, #7
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	bf28      	it	cs
 80056b6:	2304      	movcs	r3, #4
 80056b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	3304      	adds	r3, #4
 80056be:	2b06      	cmp	r3, #6
 80056c0:	d902      	bls.n	80056c8 <NVIC_EncodePriority+0x30>
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	3b03      	subs	r3, #3
 80056c6:	e000      	b.n	80056ca <NVIC_EncodePriority+0x32>
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056cc:	f04f 32ff 	mov.w	r2, #4294967295
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	43da      	mvns	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	401a      	ands	r2, r3
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056e0:	f04f 31ff 	mov.w	r1, #4294967295
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ea:	43d9      	mvns	r1, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056f0:	4313      	orrs	r3, r2
         );
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3724      	adds	r7, #36	@ 0x24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
	...

08005700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3b01      	subs	r3, #1
 800570c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005710:	d301      	bcc.n	8005716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005712:	2301      	movs	r3, #1
 8005714:	e00f      	b.n	8005736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005716:	4a0a      	ldr	r2, [pc, #40]	@ (8005740 <SysTick_Config+0x40>)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3b01      	subs	r3, #1
 800571c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800571e:	210f      	movs	r1, #15
 8005720:	f04f 30ff 	mov.w	r0, #4294967295
 8005724:	f7ff ff8e 	bl	8005644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005728:	4b05      	ldr	r3, [pc, #20]	@ (8005740 <SysTick_Config+0x40>)
 800572a:	2200      	movs	r2, #0
 800572c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800572e:	4b04      	ldr	r3, [pc, #16]	@ (8005740 <SysTick_Config+0x40>)
 8005730:	2207      	movs	r2, #7
 8005732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	e000e010 	.word	0xe000e010

08005744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff ff29 	bl	80055a4 <__NVIC_SetPriorityGrouping>
}
 8005752:	bf00      	nop
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b086      	sub	sp, #24
 800575e:	af00      	add	r7, sp, #0
 8005760:	4603      	mov	r3, r0
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
 8005766:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005768:	f7ff ff40 	bl	80055ec <__NVIC_GetPriorityGrouping>
 800576c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	6978      	ldr	r0, [r7, #20]
 8005774:	f7ff ff90 	bl	8005698 <NVIC_EncodePriority>
 8005778:	4602      	mov	r2, r0
 800577a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800577e:	4611      	mov	r1, r2
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff ff5f 	bl	8005644 <__NVIC_SetPriority>
}
 8005786:	bf00      	nop
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b082      	sub	sp, #8
 8005792:	af00      	add	r7, sp, #0
 8005794:	4603      	mov	r3, r0
 8005796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff ff33 	bl	8005608 <__NVIC_EnableIRQ>
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff ffa4 	bl	8005700 <SysTick_Config>
 80057b8:	4603      	mov	r3, r0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e08d      	b.n	80058f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	4b47      	ldr	r3, [pc, #284]	@ (80058fc <HAL_DMA_Init+0x138>)
 80057de:	429a      	cmp	r2, r3
 80057e0:	d80f      	bhi.n	8005802 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	4b45      	ldr	r3, [pc, #276]	@ (8005900 <HAL_DMA_Init+0x13c>)
 80057ea:	4413      	add	r3, r2
 80057ec:	4a45      	ldr	r2, [pc, #276]	@ (8005904 <HAL_DMA_Init+0x140>)
 80057ee:	fba2 2303 	umull	r2, r3, r2, r3
 80057f2:	091b      	lsrs	r3, r3, #4
 80057f4:	009a      	lsls	r2, r3, #2
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a42      	ldr	r2, [pc, #264]	@ (8005908 <HAL_DMA_Init+0x144>)
 80057fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8005800:	e00e      	b.n	8005820 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	4b40      	ldr	r3, [pc, #256]	@ (800590c <HAL_DMA_Init+0x148>)
 800580a:	4413      	add	r3, r2
 800580c:	4a3d      	ldr	r2, [pc, #244]	@ (8005904 <HAL_DMA_Init+0x140>)
 800580e:	fba2 2303 	umull	r2, r3, r2, r3
 8005812:	091b      	lsrs	r3, r3, #4
 8005814:	009a      	lsls	r2, r3, #2
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a3c      	ldr	r2, [pc, #240]	@ (8005910 <HAL_DMA_Init+0x14c>)
 800581e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800583a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800585c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fa76 	bl	8005d64 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005880:	d102      	bne.n	8005888 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800589c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d010      	beq.n	80058c8 <HAL_DMA_Init+0x104>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d80c      	bhi.n	80058c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fa96 	bl	8005de0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80058c4:	605a      	str	r2, [r3, #4]
 80058c6:	e008      	b.n	80058da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40020407 	.word	0x40020407
 8005900:	bffdfff8 	.word	0xbffdfff8
 8005904:	cccccccd 	.word	0xcccccccd
 8005908:	40020000 	.word	0x40020000
 800590c:	bffdfbf8 	.word	0xbffdfbf8
 8005910:	40020400 	.word	0x40020400

08005914 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_DMA_Start_IT+0x20>
 8005930:	2302      	movs	r3, #2
 8005932:	e066      	b.n	8005a02 <HAL_DMA_Start_IT+0xee>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b01      	cmp	r3, #1
 8005946:	d155      	bne.n	80059f4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0201 	bic.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	68b9      	ldr	r1, [r7, #8]
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 f9bb 	bl	8005ce8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005976:	2b00      	cmp	r3, #0
 8005978:	d008      	beq.n	800598c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 020e 	orr.w	r2, r2, #14
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	e00f      	b.n	80059ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0204 	bic.w	r2, r2, #4
 800599a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 020a 	orr.w	r2, r2, #10
 80059aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d007      	beq.n	80059ca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059c8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d007      	beq.n	80059e2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	e005      	b.n	8005a00 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80059fc:	2302      	movs	r3, #2
 80059fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b085      	sub	sp, #20
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d005      	beq.n	8005a2e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2204      	movs	r2, #4
 8005a26:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	73fb      	strb	r3, [r7, #15]
 8005a2c:	e037      	b.n	8005a9e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 020e 	bic.w	r2, r2, #14
 8005a3c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a4c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0201 	bic.w	r2, r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a62:	f003 021f 	and.w	r2, r3, #31
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a70:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a7a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00c      	beq.n	8005a9e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a92:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a9c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d00d      	beq.n	8005af0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2204      	movs	r2, #4
 8005ad8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	73fb      	strb	r3, [r7, #15]
 8005aee:	e047      	b.n	8005b80 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 020e 	bic.w	r2, r2, #14
 8005afe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0201 	bic.w	r2, r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b1a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b24:	f003 021f 	and.w	r2, r3, #31
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8005b32:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b3c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00c      	beq.n	8005b60 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b54:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005b5e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	4798      	blx	r3
    }
  }
  return status;
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ba6:	f003 031f 	and.w	r3, r3, #31
 8005baa:	2204      	movs	r2, #4
 8005bac:	409a      	lsls	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d026      	beq.n	8005c04 <HAL_DMA_IRQHandler+0x7a>
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d021      	beq.n	8005c04 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0204 	bic.w	r2, r2, #4
 8005bdc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be2:	f003 021f 	and.w	r2, r3, #31
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bea:	2104      	movs	r1, #4
 8005bec:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d071      	beq.n	8005cde <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005c02:	e06c      	b.n	8005cde <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c08:	f003 031f 	and.w	r3, r3, #31
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	409a      	lsls	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4013      	ands	r3, r2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d02e      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d029      	beq.n	8005c76 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10b      	bne.n	8005c48 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 020a 	bic.w	r2, r2, #10
 8005c3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c4c:	f003 021f 	and.w	r2, r3, #31
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c54:	2102      	movs	r1, #2
 8005c56:	fa01 f202 	lsl.w	r2, r1, r2
 8005c5a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d038      	beq.n	8005cde <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005c74:	e033      	b.n	8005cde <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7a:	f003 031f 	and.w	r3, r3, #31
 8005c7e:	2208      	movs	r2, #8
 8005c80:	409a      	lsls	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4013      	ands	r3, r2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d02a      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d025      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 020e 	bic.w	r2, r2, #14
 8005ca2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca8:	f003 021f 	and.w	r2, r3, #31
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8005cb6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d004      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005cde:	bf00      	nop
 8005ce0:	bf00      	nop
}
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
 8005cf4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005cfe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d004      	beq.n	8005d12 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005d10:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d16:	f003 021f 	and.w	r2, r3, #31
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1e:	2101      	movs	r1, #1
 8005d20:	fa01 f202 	lsl.w	r2, r1, r2
 8005d24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	2b10      	cmp	r3, #16
 8005d34:	d108      	bne.n	8005d48 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d46:	e007      	b.n	8005d58 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	60da      	str	r2, [r3, #12]
}
 8005d58:	bf00      	nop
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	4b16      	ldr	r3, [pc, #88]	@ (8005dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d802      	bhi.n	8005d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005d78:	4b15      	ldr	r3, [pc, #84]	@ (8005dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	e001      	b.n	8005d82 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005d7e:	4b15      	ldr	r3, [pc, #84]	@ (8005dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005d80:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	3b08      	subs	r3, #8
 8005d8e:	4a12      	ldr	r2, [pc, #72]	@ (8005dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005d90:	fba2 2303 	umull	r2, r3, r2, r3
 8005d94:	091b      	lsrs	r3, r3, #4
 8005d96:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9c:	089b      	lsrs	r3, r3, #2
 8005d9e:	009a      	lsls	r2, r3, #2
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4413      	add	r3, r2
 8005da4:	461a      	mov	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a0b      	ldr	r2, [pc, #44]	@ (8005ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005dae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f003 031f 	and.w	r3, r3, #31
 8005db6:	2201      	movs	r2, #1
 8005db8:	409a      	lsls	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005dbe:	bf00      	nop
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	40020407 	.word	0x40020407
 8005dd0:	40020800 	.word	0x40020800
 8005dd4:	40020820 	.word	0x40020820
 8005dd8:	cccccccd 	.word	0xcccccccd
 8005ddc:	40020880 	.word	0x40020880

08005de0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4b0b      	ldr	r3, [pc, #44]	@ (8005e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005df4:	4413      	add	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	461a      	mov	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a08      	ldr	r2, [pc, #32]	@ (8005e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005e02:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	f003 031f 	and.w	r3, r3, #31
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	409a      	lsls	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005e14:	bf00      	nop
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	1000823f 	.word	0x1000823f
 8005e24:	40020940 	.word	0x40020940

08005e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005e36:	e15a      	b.n	80060ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	fa01 f303 	lsl.w	r3, r1, r3
 8005e44:	4013      	ands	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 814c 	beq.w	80060e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d005      	beq.n	8005e68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d130      	bne.n	8005eca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	2203      	movs	r2, #3
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	091b      	lsrs	r3, r3, #4
 8005eb4:	f003 0201 	and.w	r2, r3, #1
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d017      	beq.n	8005f06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	2203      	movs	r2, #3
 8005ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee6:	43db      	mvns	r3, r3
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4013      	ands	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d123      	bne.n	8005f5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	08da      	lsrs	r2, r3, #3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3208      	adds	r2, #8
 8005f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	220f      	movs	r2, #15
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	43db      	mvns	r3, r3
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4013      	ands	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	08da      	lsrs	r2, r3, #3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3208      	adds	r2, #8
 8005f54:	6939      	ldr	r1, [r7, #16]
 8005f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	2203      	movs	r2, #3
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	43db      	mvns	r3, r3
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f003 0203 	and.w	r2, r3, #3
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 80a6 	beq.w	80060e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f9c:	4b5b      	ldr	r3, [pc, #364]	@ (800610c <HAL_GPIO_Init+0x2e4>)
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa0:	4a5a      	ldr	r2, [pc, #360]	@ (800610c <HAL_GPIO_Init+0x2e4>)
 8005fa2:	f043 0301 	orr.w	r3, r3, #1
 8005fa6:	6613      	str	r3, [r2, #96]	@ 0x60
 8005fa8:	4b58      	ldr	r3, [pc, #352]	@ (800610c <HAL_GPIO_Init+0x2e4>)
 8005faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	60bb      	str	r3, [r7, #8]
 8005fb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fb4:	4a56      	ldr	r2, [pc, #344]	@ (8006110 <HAL_GPIO_Init+0x2e8>)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	089b      	lsrs	r3, r3, #2
 8005fba:	3302      	adds	r3, #2
 8005fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f003 0303 	and.w	r3, r3, #3
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	220f      	movs	r2, #15
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005fde:	d01f      	beq.n	8006020 <HAL_GPIO_Init+0x1f8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a4c      	ldr	r2, [pc, #304]	@ (8006114 <HAL_GPIO_Init+0x2ec>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d019      	beq.n	800601c <HAL_GPIO_Init+0x1f4>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a4b      	ldr	r2, [pc, #300]	@ (8006118 <HAL_GPIO_Init+0x2f0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d013      	beq.n	8006018 <HAL_GPIO_Init+0x1f0>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a4a      	ldr	r2, [pc, #296]	@ (800611c <HAL_GPIO_Init+0x2f4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00d      	beq.n	8006014 <HAL_GPIO_Init+0x1ec>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a49      	ldr	r2, [pc, #292]	@ (8006120 <HAL_GPIO_Init+0x2f8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d007      	beq.n	8006010 <HAL_GPIO_Init+0x1e8>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a48      	ldr	r2, [pc, #288]	@ (8006124 <HAL_GPIO_Init+0x2fc>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d101      	bne.n	800600c <HAL_GPIO_Init+0x1e4>
 8006008:	2305      	movs	r3, #5
 800600a:	e00a      	b.n	8006022 <HAL_GPIO_Init+0x1fa>
 800600c:	2306      	movs	r3, #6
 800600e:	e008      	b.n	8006022 <HAL_GPIO_Init+0x1fa>
 8006010:	2304      	movs	r3, #4
 8006012:	e006      	b.n	8006022 <HAL_GPIO_Init+0x1fa>
 8006014:	2303      	movs	r3, #3
 8006016:	e004      	b.n	8006022 <HAL_GPIO_Init+0x1fa>
 8006018:	2302      	movs	r3, #2
 800601a:	e002      	b.n	8006022 <HAL_GPIO_Init+0x1fa>
 800601c:	2301      	movs	r3, #1
 800601e:	e000      	b.n	8006022 <HAL_GPIO_Init+0x1fa>
 8006020:	2300      	movs	r3, #0
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	f002 0203 	and.w	r2, r2, #3
 8006028:	0092      	lsls	r2, r2, #2
 800602a:	4093      	lsls	r3, r2
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	4313      	orrs	r3, r2
 8006030:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006032:	4937      	ldr	r1, [pc, #220]	@ (8006110 <HAL_GPIO_Init+0x2e8>)
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	089b      	lsrs	r3, r3, #2
 8006038:	3302      	adds	r3, #2
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006040:	4b39      	ldr	r3, [pc, #228]	@ (8006128 <HAL_GPIO_Init+0x300>)
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	43db      	mvns	r3, r3
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4013      	ands	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006064:	4a30      	ldr	r2, [pc, #192]	@ (8006128 <HAL_GPIO_Init+0x300>)
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800606a:	4b2f      	ldr	r3, [pc, #188]	@ (8006128 <HAL_GPIO_Init+0x300>)
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	43db      	mvns	r3, r3
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4013      	ands	r3, r2
 8006078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800608e:	4a26      	ldr	r2, [pc, #152]	@ (8006128 <HAL_GPIO_Init+0x300>)
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006094:	4b24      	ldr	r3, [pc, #144]	@ (8006128 <HAL_GPIO_Init+0x300>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	43db      	mvns	r3, r3
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4013      	ands	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80060b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006128 <HAL_GPIO_Init+0x300>)
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80060be:	4b1a      	ldr	r3, [pc, #104]	@ (8006128 <HAL_GPIO_Init+0x300>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	43db      	mvns	r3, r3
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4013      	ands	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80060e2:	4a11      	ldr	r2, [pc, #68]	@ (8006128 <HAL_GPIO_Init+0x300>)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	3301      	adds	r3, #1
 80060ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	fa22 f303 	lsr.w	r3, r2, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f47f ae9d 	bne.w	8005e38 <HAL_GPIO_Init+0x10>
  }
}
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	371c      	adds	r7, #28
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	40021000 	.word	0x40021000
 8006110:	40010000 	.word	0x40010000
 8006114:	48000400 	.word	0x48000400
 8006118:	48000800 	.word	0x48000800
 800611c:	48000c00 	.word	0x48000c00
 8006120:	48001000 	.word	0x48001000
 8006124:	48001400 	.word	0x48001400
 8006128:	40010400 	.word	0x40010400

0800612c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	887b      	ldrh	r3, [r7, #2]
 800613e:	4013      	ands	r3, r2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006144:	2301      	movs	r3, #1
 8006146:	73fb      	strb	r3, [r7, #15]
 8006148:	e001      	b.n	800614e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800614a:	2300      	movs	r3, #0
 800614c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800614e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	807b      	strh	r3, [r7, #2]
 8006168:	4613      	mov	r3, r2
 800616a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800616c:	787b      	ldrb	r3, [r7, #1]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006172:	887a      	ldrh	r2, [r7, #2]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006178:	e002      	b.n	8006180 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800617a:	887a      	ldrh	r2, [r7, #2]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	4603      	mov	r3, r0
 8006194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006196:	4b08      	ldr	r3, [pc, #32]	@ (80061b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006198:	695a      	ldr	r2, [r3, #20]
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	4013      	ands	r3, r2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d006      	beq.n	80061b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80061a2:	4a05      	ldr	r2, [pc, #20]	@ (80061b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80061a4:	88fb      	ldrh	r3, [r7, #6]
 80061a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80061a8:	88fb      	ldrh	r3, [r7, #6]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fc f8f6 	bl	800239c <HAL_GPIO_EXTI_Callback>
  }
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40010400 	.word	0x40010400

080061bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d141      	bne.n	800624e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80061ca:	4b4b      	ldr	r3, [pc, #300]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80061d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061d6:	d131      	bne.n	800623c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061d8:	4b47      	ldr	r3, [pc, #284]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061de:	4a46      	ldr	r2, [pc, #280]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061e8:	4b43      	ldr	r3, [pc, #268]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061f0:	4a41      	ldr	r2, [pc, #260]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061f8:	4b40      	ldr	r3, [pc, #256]	@ (80062fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2232      	movs	r2, #50	@ 0x32
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	4a3f      	ldr	r2, [pc, #252]	@ (8006300 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006204:	fba2 2303 	umull	r2, r3, r2, r3
 8006208:	0c9b      	lsrs	r3, r3, #18
 800620a:	3301      	adds	r3, #1
 800620c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800620e:	e002      	b.n	8006216 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3b01      	subs	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006216:	4b38      	ldr	r3, [pc, #224]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800621e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006222:	d102      	bne.n	800622a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1f2      	bne.n	8006210 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800622a:	4b33      	ldr	r3, [pc, #204]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006236:	d158      	bne.n	80062ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e057      	b.n	80062ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800623c:	4b2e      	ldr	r3, [pc, #184]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800623e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006242:	4a2d      	ldr	r2, [pc, #180]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006248:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800624c:	e04d      	b.n	80062ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006254:	d141      	bne.n	80062da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006256:	4b28      	ldr	r3, [pc, #160]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800625e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006262:	d131      	bne.n	80062c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006264:	4b24      	ldr	r3, [pc, #144]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800626a:	4a23      	ldr	r2, [pc, #140]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800626c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006270:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006274:	4b20      	ldr	r3, [pc, #128]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800627c:	4a1e      	ldr	r2, [pc, #120]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800627e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006282:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006284:	4b1d      	ldr	r3, [pc, #116]	@ (80062fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2232      	movs	r2, #50	@ 0x32
 800628a:	fb02 f303 	mul.w	r3, r2, r3
 800628e:	4a1c      	ldr	r2, [pc, #112]	@ (8006300 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006290:	fba2 2303 	umull	r2, r3, r2, r3
 8006294:	0c9b      	lsrs	r3, r3, #18
 8006296:	3301      	adds	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800629a:	e002      	b.n	80062a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3b01      	subs	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062a2:	4b15      	ldr	r3, [pc, #84]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ae:	d102      	bne.n	80062b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1f2      	bne.n	800629c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80062b6:	4b10      	ldr	r3, [pc, #64]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062c2:	d112      	bne.n	80062ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e011      	b.n	80062ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062c8:	4b0b      	ldr	r3, [pc, #44]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062ce:	4a0a      	ldr	r2, [pc, #40]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80062d8:	e007      	b.n	80062ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80062da:	4b07      	ldr	r3, [pc, #28]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80062e2:	4a05      	ldr	r2, [pc, #20]	@ (80062f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	40007000 	.word	0x40007000
 80062fc:	2000018c 	.word	0x2000018c
 8006300:	431bde83 	.word	0x431bde83

08006304 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006308:	4b05      	ldr	r3, [pc, #20]	@ (8006320 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	4a04      	ldr	r2, [pc, #16]	@ (8006320 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800630e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006312:	6093      	str	r3, [r2, #8]
}
 8006314:	bf00      	nop
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	40007000 	.word	0x40007000

08006324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e2fe      	b.n	8006934 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d075      	beq.n	800642e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006342:	4b97      	ldr	r3, [pc, #604]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 030c 	and.w	r3, r3, #12
 800634a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800634c:	4b94      	ldr	r3, [pc, #592]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	2b0c      	cmp	r3, #12
 800635a:	d102      	bne.n	8006362 <HAL_RCC_OscConfig+0x3e>
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2b03      	cmp	r3, #3
 8006360:	d002      	beq.n	8006368 <HAL_RCC_OscConfig+0x44>
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	2b08      	cmp	r3, #8
 8006366:	d10b      	bne.n	8006380 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006368:	4b8d      	ldr	r3, [pc, #564]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d05b      	beq.n	800642c <HAL_RCC_OscConfig+0x108>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d157      	bne.n	800642c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e2d9      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006388:	d106      	bne.n	8006398 <HAL_RCC_OscConfig+0x74>
 800638a:	4b85      	ldr	r3, [pc, #532]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a84      	ldr	r2, [pc, #528]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	e01d      	b.n	80063d4 <HAL_RCC_OscConfig+0xb0>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063a0:	d10c      	bne.n	80063bc <HAL_RCC_OscConfig+0x98>
 80063a2:	4b7f      	ldr	r3, [pc, #508]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a7e      	ldr	r2, [pc, #504]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	4b7c      	ldr	r3, [pc, #496]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a7b      	ldr	r2, [pc, #492]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	e00b      	b.n	80063d4 <HAL_RCC_OscConfig+0xb0>
 80063bc:	4b78      	ldr	r3, [pc, #480]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a77      	ldr	r2, [pc, #476]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	4b75      	ldr	r3, [pc, #468]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a74      	ldr	r2, [pc, #464]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d013      	beq.n	8006404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063dc:	f7fd fc5e 	bl	8003c9c <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063e2:	e008      	b.n	80063f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063e4:	f7fd fc5a 	bl	8003c9c <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b64      	cmp	r3, #100	@ 0x64
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e29e      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063f6:	4b6a      	ldr	r3, [pc, #424]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0f0      	beq.n	80063e4 <HAL_RCC_OscConfig+0xc0>
 8006402:	e014      	b.n	800642e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006404:	f7fd fc4a 	bl	8003c9c <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800640c:	f7fd fc46 	bl	8003c9c <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b64      	cmp	r3, #100	@ 0x64
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e28a      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800641e:	4b60      	ldr	r3, [pc, #384]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f0      	bne.n	800640c <HAL_RCC_OscConfig+0xe8>
 800642a:	e000      	b.n	800642e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800642c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d075      	beq.n	8006526 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800643a:	4b59      	ldr	r3, [pc, #356]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 030c 	and.w	r3, r3, #12
 8006442:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006444:	4b56      	ldr	r3, [pc, #344]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f003 0303 	and.w	r3, r3, #3
 800644c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b0c      	cmp	r3, #12
 8006452:	d102      	bne.n	800645a <HAL_RCC_OscConfig+0x136>
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d002      	beq.n	8006460 <HAL_RCC_OscConfig+0x13c>
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	2b04      	cmp	r3, #4
 800645e:	d11f      	bne.n	80064a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006460:	4b4f      	ldr	r3, [pc, #316]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <HAL_RCC_OscConfig+0x154>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e25d      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006478:	4b49      	ldr	r3, [pc, #292]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	061b      	lsls	r3, r3, #24
 8006486:	4946      	ldr	r1, [pc, #280]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006488:	4313      	orrs	r3, r2
 800648a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800648c:	4b45      	ldr	r3, [pc, #276]	@ (80065a4 <HAL_RCC_OscConfig+0x280>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4618      	mov	r0, r3
 8006492:	f7fd fbb7 	bl	8003c04 <HAL_InitTick>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d043      	beq.n	8006524 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e249      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d023      	beq.n	80064f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064a8:	4b3d      	ldr	r3, [pc, #244]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a3c      	ldr	r2, [pc, #240]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80064ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b4:	f7fd fbf2 	bl	8003c9c <HAL_GetTick>
 80064b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064bc:	f7fd fbee 	bl	8003c9c <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e232      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064ce:	4b34      	ldr	r3, [pc, #208]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0f0      	beq.n	80064bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064da:	4b31      	ldr	r3, [pc, #196]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	061b      	lsls	r3, r3, #24
 80064e8:	492d      	ldr	r1, [pc, #180]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	604b      	str	r3, [r1, #4]
 80064ee:	e01a      	b.n	8006526 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064f0:	4b2b      	ldr	r3, [pc, #172]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a2a      	ldr	r2, [pc, #168]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 80064f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fc:	f7fd fbce 	bl	8003c9c <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006504:	f7fd fbca 	bl	8003c9c <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e20e      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006516:	4b22      	ldr	r3, [pc, #136]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1f0      	bne.n	8006504 <HAL_RCC_OscConfig+0x1e0>
 8006522:	e000      	b.n	8006526 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006524:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0308 	and.w	r3, r3, #8
 800652e:	2b00      	cmp	r3, #0
 8006530:	d041      	beq.n	80065b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d01c      	beq.n	8006574 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800653a:	4b19      	ldr	r3, [pc, #100]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 800653c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006540:	4a17      	ldr	r2, [pc, #92]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800654a:	f7fd fba7 	bl	8003c9c <HAL_GetTick>
 800654e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006550:	e008      	b.n	8006564 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006552:	f7fd fba3 	bl	8003c9c <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e1e7      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006564:	4b0e      	ldr	r3, [pc, #56]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0ef      	beq.n	8006552 <HAL_RCC_OscConfig+0x22e>
 8006572:	e020      	b.n	80065b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006574:	4b0a      	ldr	r3, [pc, #40]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 8006576:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800657a:	4a09      	ldr	r2, [pc, #36]	@ (80065a0 <HAL_RCC_OscConfig+0x27c>)
 800657c:	f023 0301 	bic.w	r3, r3, #1
 8006580:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006584:	f7fd fb8a 	bl	8003c9c <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800658a:	e00d      	b.n	80065a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800658c:	f7fd fb86 	bl	8003c9c <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d906      	bls.n	80065a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e1ca      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
 800659e:	bf00      	nop
 80065a0:	40021000 	.word	0x40021000
 80065a4:	20000190 	.word	0x20000190
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065a8:	4b8c      	ldr	r3, [pc, #560]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80065aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1ea      	bne.n	800658c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 80a6 	beq.w	8006710 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065c4:	2300      	movs	r3, #0
 80065c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065c8:	4b84      	ldr	r3, [pc, #528]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80065ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <HAL_RCC_OscConfig+0x2b4>
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <HAL_RCC_OscConfig+0x2b6>
 80065d8:	2300      	movs	r3, #0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00d      	beq.n	80065fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065de:	4b7f      	ldr	r3, [pc, #508]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80065e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065e2:	4a7e      	ldr	r2, [pc, #504]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80065e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80065ea:	4b7c      	ldr	r3, [pc, #496]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80065ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80065f6:	2301      	movs	r3, #1
 80065f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065fa:	4b79      	ldr	r3, [pc, #484]	@ (80067e0 <HAL_RCC_OscConfig+0x4bc>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006602:	2b00      	cmp	r3, #0
 8006604:	d118      	bne.n	8006638 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006606:	4b76      	ldr	r3, [pc, #472]	@ (80067e0 <HAL_RCC_OscConfig+0x4bc>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a75      	ldr	r2, [pc, #468]	@ (80067e0 <HAL_RCC_OscConfig+0x4bc>)
 800660c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006612:	f7fd fb43 	bl	8003c9c <HAL_GetTick>
 8006616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006618:	e008      	b.n	800662c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800661a:	f7fd fb3f 	bl	8003c9c <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	2b02      	cmp	r3, #2
 8006626:	d901      	bls.n	800662c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e183      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800662c:	4b6c      	ldr	r3, [pc, #432]	@ (80067e0 <HAL_RCC_OscConfig+0x4bc>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0f0      	beq.n	800661a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d108      	bne.n	8006652 <HAL_RCC_OscConfig+0x32e>
 8006640:	4b66      	ldr	r3, [pc, #408]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006646:	4a65      	ldr	r2, [pc, #404]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006648:	f043 0301 	orr.w	r3, r3, #1
 800664c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006650:	e024      	b.n	800669c <HAL_RCC_OscConfig+0x378>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	2b05      	cmp	r3, #5
 8006658:	d110      	bne.n	800667c <HAL_RCC_OscConfig+0x358>
 800665a:	4b60      	ldr	r3, [pc, #384]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 800665c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006660:	4a5e      	ldr	r2, [pc, #376]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006662:	f043 0304 	orr.w	r3, r3, #4
 8006666:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800666a:	4b5c      	ldr	r3, [pc, #368]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 800666c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006670:	4a5a      	ldr	r2, [pc, #360]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006672:	f043 0301 	orr.w	r3, r3, #1
 8006676:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800667a:	e00f      	b.n	800669c <HAL_RCC_OscConfig+0x378>
 800667c:	4b57      	ldr	r3, [pc, #348]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 800667e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006682:	4a56      	ldr	r2, [pc, #344]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006684:	f023 0301 	bic.w	r3, r3, #1
 8006688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800668c:	4b53      	ldr	r3, [pc, #332]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 800668e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006692:	4a52      	ldr	r2, [pc, #328]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006694:	f023 0304 	bic.w	r3, r3, #4
 8006698:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d016      	beq.n	80066d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a4:	f7fd fafa 	bl	8003c9c <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066aa:	e00a      	b.n	80066c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ac:	f7fd faf6 	bl	8003c9c <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e138      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066c2:	4b46      	ldr	r3, [pc, #280]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80066c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0ed      	beq.n	80066ac <HAL_RCC_OscConfig+0x388>
 80066d0:	e015      	b.n	80066fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d2:	f7fd fae3 	bl	8003c9c <HAL_GetTick>
 80066d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066d8:	e00a      	b.n	80066f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066da:	f7fd fadf 	bl	8003c9c <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d901      	bls.n	80066f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e121      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066f0:	4b3a      	ldr	r3, [pc, #232]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80066f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1ed      	bne.n	80066da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066fe:	7ffb      	ldrb	r3, [r7, #31]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d105      	bne.n	8006710 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006704:	4b35      	ldr	r3, [pc, #212]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006708:	4a34      	ldr	r2, [pc, #208]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 800670a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800670e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0320 	and.w	r3, r3, #32
 8006718:	2b00      	cmp	r3, #0
 800671a:	d03c      	beq.n	8006796 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01c      	beq.n	800675e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006724:	4b2d      	ldr	r3, [pc, #180]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006726:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800672a:	4a2c      	ldr	r2, [pc, #176]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 800672c:	f043 0301 	orr.w	r3, r3, #1
 8006730:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006734:	f7fd fab2 	bl	8003c9c <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800673c:	f7fd faae 	bl	8003c9c <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e0f2      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800674e:	4b23      	ldr	r3, [pc, #140]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006750:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0ef      	beq.n	800673c <HAL_RCC_OscConfig+0x418>
 800675c:	e01b      	b.n	8006796 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800675e:	4b1f      	ldr	r3, [pc, #124]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006760:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006764:	4a1d      	ldr	r2, [pc, #116]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 8006766:	f023 0301 	bic.w	r3, r3, #1
 800676a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676e:	f7fd fa95 	bl	8003c9c <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006776:	f7fd fa91 	bl	8003c9c <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e0d5      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006788:	4b14      	ldr	r3, [pc, #80]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 800678a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1ef      	bne.n	8006776 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 80c9 	beq.w	8006932 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067a0:	4b0e      	ldr	r3, [pc, #56]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f003 030c 	and.w	r3, r3, #12
 80067a8:	2b0c      	cmp	r3, #12
 80067aa:	f000 8083 	beq.w	80068b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d15e      	bne.n	8006874 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b6:	4b09      	ldr	r3, [pc, #36]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a08      	ldr	r2, [pc, #32]	@ (80067dc <HAL_RCC_OscConfig+0x4b8>)
 80067bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c2:	f7fd fa6b 	bl	8003c9c <HAL_GetTick>
 80067c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067c8:	e00c      	b.n	80067e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ca:	f7fd fa67 	bl	8003c9c <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d905      	bls.n	80067e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e0ab      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
 80067dc:	40021000 	.word	0x40021000
 80067e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067e4:	4b55      	ldr	r3, [pc, #340]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1ec      	bne.n	80067ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067f0:	4b52      	ldr	r3, [pc, #328]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	4b52      	ldr	r3, [pc, #328]	@ (8006940 <HAL_RCC_OscConfig+0x61c>)
 80067f6:	4013      	ands	r3, r2
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6a11      	ldr	r1, [r2, #32]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006800:	3a01      	subs	r2, #1
 8006802:	0112      	lsls	r2, r2, #4
 8006804:	4311      	orrs	r1, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800680a:	0212      	lsls	r2, r2, #8
 800680c:	4311      	orrs	r1, r2
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006812:	0852      	lsrs	r2, r2, #1
 8006814:	3a01      	subs	r2, #1
 8006816:	0552      	lsls	r2, r2, #21
 8006818:	4311      	orrs	r1, r2
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800681e:	0852      	lsrs	r2, r2, #1
 8006820:	3a01      	subs	r2, #1
 8006822:	0652      	lsls	r2, r2, #25
 8006824:	4311      	orrs	r1, r2
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800682a:	06d2      	lsls	r2, r2, #27
 800682c:	430a      	orrs	r2, r1
 800682e:	4943      	ldr	r1, [pc, #268]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 8006830:	4313      	orrs	r3, r2
 8006832:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006834:	4b41      	ldr	r3, [pc, #260]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a40      	ldr	r2, [pc, #256]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 800683a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800683e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006840:	4b3e      	ldr	r3, [pc, #248]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	4a3d      	ldr	r2, [pc, #244]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 8006846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800684a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800684c:	f7fd fa26 	bl	8003c9c <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006852:	e008      	b.n	8006866 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006854:	f7fd fa22 	bl	8003c9c <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e066      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006866:	4b35      	ldr	r3, [pc, #212]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0f0      	beq.n	8006854 <HAL_RCC_OscConfig+0x530>
 8006872:	e05e      	b.n	8006932 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006874:	4b31      	ldr	r3, [pc, #196]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a30      	ldr	r2, [pc, #192]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 800687a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800687e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006880:	f7fd fa0c 	bl	8003c9c <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006888:	f7fd fa08 	bl	8003c9c <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e04c      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800689a:	4b28      	ldr	r3, [pc, #160]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f0      	bne.n	8006888 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80068a6:	4b25      	ldr	r3, [pc, #148]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	4924      	ldr	r1, [pc, #144]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 80068ac:	4b25      	ldr	r3, [pc, #148]	@ (8006944 <HAL_RCC_OscConfig+0x620>)
 80068ae:	4013      	ands	r3, r2
 80068b0:	60cb      	str	r3, [r1, #12]
 80068b2:	e03e      	b.n	8006932 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d101      	bne.n	80068c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e039      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80068c0:	4b1e      	ldr	r3, [pc, #120]	@ (800693c <HAL_RCC_OscConfig+0x618>)
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f003 0203 	and.w	r2, r3, #3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d12c      	bne.n	800692e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068de:	3b01      	subs	r3, #1
 80068e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d123      	bne.n	800692e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d11b      	bne.n	800692e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006900:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006902:	429a      	cmp	r2, r3
 8006904:	d113      	bne.n	800692e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006910:	085b      	lsrs	r3, r3, #1
 8006912:	3b01      	subs	r3, #1
 8006914:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006916:	429a      	cmp	r2, r3
 8006918:	d109      	bne.n	800692e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006924:	085b      	lsrs	r3, r3, #1
 8006926:	3b01      	subs	r3, #1
 8006928:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800692a:	429a      	cmp	r2, r3
 800692c:	d001      	beq.n	8006932 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e000      	b.n	8006934 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3720      	adds	r7, #32
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	40021000 	.word	0x40021000
 8006940:	019f800c 	.word	0x019f800c
 8006944:	feeefffc 	.word	0xfeeefffc

08006948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006952:	2300      	movs	r3, #0
 8006954:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e11e      	b.n	8006b9e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006960:	4b91      	ldr	r3, [pc, #580]	@ (8006ba8 <HAL_RCC_ClockConfig+0x260>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 030f 	and.w	r3, r3, #15
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d910      	bls.n	8006990 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696e:	4b8e      	ldr	r3, [pc, #568]	@ (8006ba8 <HAL_RCC_ClockConfig+0x260>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f023 020f 	bic.w	r2, r3, #15
 8006976:	498c      	ldr	r1, [pc, #560]	@ (8006ba8 <HAL_RCC_ClockConfig+0x260>)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	4313      	orrs	r3, r2
 800697c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800697e:	4b8a      	ldr	r3, [pc, #552]	@ (8006ba8 <HAL_RCC_ClockConfig+0x260>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 030f 	and.w	r3, r3, #15
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d001      	beq.n	8006990 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e106      	b.n	8006b9e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d073      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d129      	bne.n	80069f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069a4:	4b81      	ldr	r3, [pc, #516]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e0f4      	b.n	8006b9e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80069b4:	f000 f99e 	bl	8006cf4 <RCC_GetSysClockFreqFromPLLSource>
 80069b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	4a7c      	ldr	r2, [pc, #496]	@ (8006bb0 <HAL_RCC_ClockConfig+0x268>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d93f      	bls.n	8006a42 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80069c2:	4b7a      	ldr	r3, [pc, #488]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d009      	beq.n	80069e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d033      	beq.n	8006a42 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d12f      	bne.n	8006a42 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80069e2:	4b72      	ldr	r3, [pc, #456]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069ea:	4a70      	ldr	r2, [pc, #448]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 80069ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80069f2:	2380      	movs	r3, #128	@ 0x80
 80069f4:	617b      	str	r3, [r7, #20]
 80069f6:	e024      	b.n	8006a42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d107      	bne.n	8006a10 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a00:	4b6a      	ldr	r3, [pc, #424]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d109      	bne.n	8006a20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e0c6      	b.n	8006b9e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a10:	4b66      	ldr	r3, [pc, #408]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e0be      	b.n	8006b9e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006a20:	f000 f8ce 	bl	8006bc0 <HAL_RCC_GetSysClockFreq>
 8006a24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	4a61      	ldr	r2, [pc, #388]	@ (8006bb0 <HAL_RCC_ClockConfig+0x268>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d909      	bls.n	8006a42 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a2e:	4b5f      	ldr	r3, [pc, #380]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a36:	4a5d      	ldr	r2, [pc, #372]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a3c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006a3e:	2380      	movs	r3, #128	@ 0x80
 8006a40:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a42:	4b5a      	ldr	r3, [pc, #360]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f023 0203 	bic.w	r2, r3, #3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	4957      	ldr	r1, [pc, #348]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a54:	f7fd f922 	bl	8003c9c <HAL_GetTick>
 8006a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a5a:	e00a      	b.n	8006a72 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a5c:	f7fd f91e 	bl	8003c9c <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e095      	b.n	8006b9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a72:	4b4e      	ldr	r3, [pc, #312]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 020c 	and.w	r2, r3, #12
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d1eb      	bne.n	8006a5c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d023      	beq.n	8006ad8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a9c:	4b43      	ldr	r3, [pc, #268]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	4a42      	ldr	r2, [pc, #264]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006aa2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006aa6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d007      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006ab4:	4b3d      	ldr	r3, [pc, #244]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006abc:	4a3b      	ldr	r2, [pc, #236]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006abe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006ac2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ac4:	4b39      	ldr	r3, [pc, #228]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	4936      	ldr	r1, [pc, #216]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	608b      	str	r3, [r1, #8]
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	2b80      	cmp	r3, #128	@ 0x80
 8006adc:	d105      	bne.n	8006aea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006ade:	4b33      	ldr	r3, [pc, #204]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	4a32      	ldr	r2, [pc, #200]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006ae4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ae8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006aea:	4b2f      	ldr	r3, [pc, #188]	@ (8006ba8 <HAL_RCC_ClockConfig+0x260>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d21d      	bcs.n	8006b34 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af8:	4b2b      	ldr	r3, [pc, #172]	@ (8006ba8 <HAL_RCC_ClockConfig+0x260>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f023 020f 	bic.w	r2, r3, #15
 8006b00:	4929      	ldr	r1, [pc, #164]	@ (8006ba8 <HAL_RCC_ClockConfig+0x260>)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006b08:	f7fd f8c8 	bl	8003c9c <HAL_GetTick>
 8006b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b0e:	e00a      	b.n	8006b26 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b10:	f7fd f8c4 	bl	8003c9c <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e03b      	b.n	8006b9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b26:	4b20      	ldr	r3, [pc, #128]	@ (8006ba8 <HAL_RCC_ClockConfig+0x260>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 030f 	and.w	r3, r3, #15
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d1ed      	bne.n	8006b10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d008      	beq.n	8006b52 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b40:	4b1a      	ldr	r3, [pc, #104]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	4917      	ldr	r1, [pc, #92]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0308 	and.w	r3, r3, #8
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d009      	beq.n	8006b72 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b5e:	4b13      	ldr	r3, [pc, #76]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	490f      	ldr	r1, [pc, #60]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b72:	f000 f825 	bl	8006bc0 <HAL_RCC_GetSysClockFreq>
 8006b76:	4602      	mov	r2, r0
 8006b78:	4b0c      	ldr	r3, [pc, #48]	@ (8006bac <HAL_RCC_ClockConfig+0x264>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	091b      	lsrs	r3, r3, #4
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	490c      	ldr	r1, [pc, #48]	@ (8006bb4 <HAL_RCC_ClockConfig+0x26c>)
 8006b84:	5ccb      	ldrb	r3, [r1, r3]
 8006b86:	f003 031f 	and.w	r3, r3, #31
 8006b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8006bb8 <HAL_RCC_ClockConfig+0x270>)
 8006b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006b92:	4b0a      	ldr	r3, [pc, #40]	@ (8006bbc <HAL_RCC_ClockConfig+0x274>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fd f834 	bl	8003c04 <HAL_InitTick>
 8006b9c:	4603      	mov	r3, r0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	40022000 	.word	0x40022000
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	04c4b400 	.word	0x04c4b400
 8006bb4:	0800bd9c 	.word	0x0800bd9c
 8006bb8:	2000018c 	.word	0x2000018c
 8006bbc:	20000190 	.word	0x20000190

08006bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006bc6:	4b2c      	ldr	r3, [pc, #176]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 030c 	and.w	r3, r3, #12
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d102      	bne.n	8006bd8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006bd4:	613b      	str	r3, [r7, #16]
 8006bd6:	e047      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006bd8:	4b27      	ldr	r3, [pc, #156]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 030c 	and.w	r3, r3, #12
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d102      	bne.n	8006bea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006be4:	4b26      	ldr	r3, [pc, #152]	@ (8006c80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006be6:	613b      	str	r3, [r7, #16]
 8006be8:	e03e      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006bea:	4b23      	ldr	r3, [pc, #140]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 030c 	and.w	r3, r3, #12
 8006bf2:	2b0c      	cmp	r3, #12
 8006bf4:	d136      	bne.n	8006c64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bf6:	4b20      	ldr	r3, [pc, #128]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c00:	4b1d      	ldr	r3, [pc, #116]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	091b      	lsrs	r3, r3, #4
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d10c      	bne.n	8006c2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c14:	4a1a      	ldr	r2, [pc, #104]	@ (8006c80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1c:	4a16      	ldr	r2, [pc, #88]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c1e:	68d2      	ldr	r2, [r2, #12]
 8006c20:	0a12      	lsrs	r2, r2, #8
 8006c22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c26:	fb02 f303 	mul.w	r3, r2, r3
 8006c2a:	617b      	str	r3, [r7, #20]
      break;
 8006c2c:	e00c      	b.n	8006c48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c2e:	4a13      	ldr	r2, [pc, #76]	@ (8006c7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c36:	4a10      	ldr	r2, [pc, #64]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c38:	68d2      	ldr	r2, [r2, #12]
 8006c3a:	0a12      	lsrs	r2, r2, #8
 8006c3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c40:	fb02 f303 	mul.w	r3, r2, r3
 8006c44:	617b      	str	r3, [r7, #20]
      break;
 8006c46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c48:	4b0b      	ldr	r3, [pc, #44]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	0e5b      	lsrs	r3, r3, #25
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	3301      	adds	r3, #1
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	e001      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006c68:	693b      	ldr	r3, [r7, #16]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	00f42400 	.word	0x00f42400
 8006c80:	016e3600 	.word	0x016e3600

08006c84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c88:	4b03      	ldr	r3, [pc, #12]	@ (8006c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	2000018c 	.word	0x2000018c

08006c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ca0:	f7ff fff0 	bl	8006c84 <HAL_RCC_GetHCLKFreq>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	4b06      	ldr	r3, [pc, #24]	@ (8006cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	0a1b      	lsrs	r3, r3, #8
 8006cac:	f003 0307 	and.w	r3, r3, #7
 8006cb0:	4904      	ldr	r1, [pc, #16]	@ (8006cc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cb2:	5ccb      	ldrb	r3, [r1, r3]
 8006cb4:	f003 031f 	and.w	r3, r3, #31
 8006cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	0800bdac 	.word	0x0800bdac

08006cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ccc:	f7ff ffda 	bl	8006c84 <HAL_RCC_GetHCLKFreq>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	4b06      	ldr	r3, [pc, #24]	@ (8006cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	0adb      	lsrs	r3, r3, #11
 8006cd8:	f003 0307 	and.w	r3, r3, #7
 8006cdc:	4904      	ldr	r1, [pc, #16]	@ (8006cf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cde:	5ccb      	ldrb	r3, [r1, r3]
 8006ce0:	f003 031f 	and.w	r3, r3, #31
 8006ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	40021000 	.word	0x40021000
 8006cf0:	0800bdac 	.word	0x0800bdac

08006cf4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8006d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d04:	4b1b      	ldr	r3, [pc, #108]	@ (8006d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	091b      	lsrs	r3, r3, #4
 8006d0a:	f003 030f 	and.w	r3, r3, #15
 8006d0e:	3301      	adds	r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d10c      	bne.n	8006d32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d18:	4a17      	ldr	r2, [pc, #92]	@ (8006d78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d20:	4a14      	ldr	r2, [pc, #80]	@ (8006d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d22:	68d2      	ldr	r2, [r2, #12]
 8006d24:	0a12      	lsrs	r2, r2, #8
 8006d26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d2a:	fb02 f303 	mul.w	r3, r2, r3
 8006d2e:	617b      	str	r3, [r7, #20]
    break;
 8006d30:	e00c      	b.n	8006d4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d32:	4a12      	ldr	r2, [pc, #72]	@ (8006d7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8006d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d3c:	68d2      	ldr	r2, [r2, #12]
 8006d3e:	0a12      	lsrs	r2, r2, #8
 8006d40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d44:	fb02 f303 	mul.w	r3, r2, r3
 8006d48:	617b      	str	r3, [r7, #20]
    break;
 8006d4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d4c:	4b09      	ldr	r3, [pc, #36]	@ (8006d74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	0e5b      	lsrs	r3, r3, #25
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	3301      	adds	r3, #1
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006d66:	687b      	ldr	r3, [r7, #4]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	371c      	adds	r7, #28
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	40021000 	.word	0x40021000
 8006d78:	016e3600 	.word	0x016e3600
 8006d7c:	00f42400 	.word	0x00f42400

08006d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d88:	2300      	movs	r3, #0
 8006d8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 8098 	beq.w	8006ece <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006da2:	4b43      	ldr	r3, [pc, #268]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10d      	bne.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dae:	4b40      	ldr	r3, [pc, #256]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006db2:	4a3f      	ldr	r2, [pc, #252]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006db8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dba:	4b3d      	ldr	r3, [pc, #244]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dc2:	60bb      	str	r3, [r7, #8]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dca:	4b3a      	ldr	r3, [pc, #232]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a39      	ldr	r2, [pc, #228]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006dd6:	f7fc ff61 	bl	8003c9c <HAL_GetTick>
 8006dda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ddc:	e009      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dde:	f7fc ff5d 	bl	8003c9c <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d902      	bls.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	74fb      	strb	r3, [r7, #19]
        break;
 8006df0:	e005      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006df2:	4b30      	ldr	r3, [pc, #192]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0ef      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006dfe:	7cfb      	ldrb	r3, [r7, #19]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d159      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e04:	4b2a      	ldr	r3, [pc, #168]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d01e      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d019      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e20:	4b23      	ldr	r3, [pc, #140]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e2c:	4b20      	ldr	r3, [pc, #128]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e32:	4a1f      	ldr	r2, [pc, #124]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e42:	4a1b      	ldr	r2, [pc, #108]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e4c:	4a18      	ldr	r2, [pc, #96]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d016      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5e:	f7fc ff1d 	bl	8003c9c <HAL_GetTick>
 8006e62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e64:	e00b      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e66:	f7fc ff19 	bl	8003c9c <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d902      	bls.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	74fb      	strb	r3, [r7, #19]
            break;
 8006e7c:	e006      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d0ec      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006e8c:	7cfb      	ldrb	r3, [r7, #19]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10b      	bne.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e92:	4b07      	ldr	r3, [pc, #28]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea0:	4903      	ldr	r1, [pc, #12]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006ea8:	e008      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006eaa:	7cfb      	ldrb	r3, [r7, #19]
 8006eac:	74bb      	strb	r3, [r7, #18]
 8006eae:	e005      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006eb0:	40021000 	.word	0x40021000
 8006eb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb8:	7cfb      	ldrb	r3, [r7, #19]
 8006eba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ebc:	7c7b      	ldrb	r3, [r7, #17]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d105      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ec2:	4ba7      	ldr	r3, [pc, #668]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ec6:	4aa6      	ldr	r2, [pc, #664]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ec8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ecc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006eda:	4ba1      	ldr	r3, [pc, #644]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ee0:	f023 0203 	bic.w	r2, r3, #3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	499d      	ldr	r1, [pc, #628]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006efc:	4b98      	ldr	r3, [pc, #608]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f02:	f023 020c 	bic.w	r2, r3, #12
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	4995      	ldr	r1, [pc, #596]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0304 	and.w	r3, r3, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f1e:	4b90      	ldr	r3, [pc, #576]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	498c      	ldr	r1, [pc, #560]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0308 	and.w	r3, r3, #8
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00a      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f40:	4b87      	ldr	r3, [pc, #540]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	4984      	ldr	r1, [pc, #528]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0310 	and.w	r3, r3, #16
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00a      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f62:	4b7f      	ldr	r3, [pc, #508]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	497b      	ldr	r1, [pc, #492]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0320 	and.w	r3, r3, #32
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00a      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f84:	4b76      	ldr	r3, [pc, #472]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	4973      	ldr	r1, [pc, #460]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fa6:	4b6e      	ldr	r3, [pc, #440]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	496a      	ldr	r1, [pc, #424]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00a      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006fc8:	4b65      	ldr	r3, [pc, #404]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	4962      	ldr	r1, [pc, #392]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fea:	4b5d      	ldr	r3, [pc, #372]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ff0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff8:	4959      	ldr	r1, [pc, #356]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00a      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800700c:	4b54      	ldr	r3, [pc, #336]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800700e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007012:	f023 0203 	bic.w	r2, r3, #3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701a:	4951      	ldr	r1, [pc, #324]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800701c:	4313      	orrs	r3, r2
 800701e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00a      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800702e:	4b4c      	ldr	r3, [pc, #304]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007034:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703c:	4948      	ldr	r1, [pc, #288]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800703e:	4313      	orrs	r3, r2
 8007040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800704c:	2b00      	cmp	r3, #0
 800704e:	d015      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007050:	4b43      	ldr	r3, [pc, #268]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007056:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800705e:	4940      	ldr	r1, [pc, #256]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007060:	4313      	orrs	r3, r2
 8007062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800706e:	d105      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007070:	4b3b      	ldr	r3, [pc, #236]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	4a3a      	ldr	r2, [pc, #232]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800707a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007084:	2b00      	cmp	r3, #0
 8007086:	d015      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007088:	4b35      	ldr	r3, [pc, #212]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800708a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800708e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007096:	4932      	ldr	r1, [pc, #200]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007098:	4313      	orrs	r3, r2
 800709a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070a6:	d105      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	4a2c      	ldr	r2, [pc, #176]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070b2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d015      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070c0:	4b27      	ldr	r3, [pc, #156]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ce:	4924      	ldr	r1, [pc, #144]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070de:	d105      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070e0:	4b1f      	ldr	r3, [pc, #124]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	4a1e      	ldr	r2, [pc, #120]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d015      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070f8:	4b19      	ldr	r3, [pc, #100]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007106:	4916      	ldr	r1, [pc, #88]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007108:	4313      	orrs	r3, r2
 800710a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007112:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007116:	d105      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007118:	4b11      	ldr	r3, [pc, #68]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	4a10      	ldr	r2, [pc, #64]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800711e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007122:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d019      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007130:	4b0b      	ldr	r3, [pc, #44]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007136:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713e:	4908      	ldr	r1, [pc, #32]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007140:	4313      	orrs	r3, r2
 8007142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800714e:	d109      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007150:	4b03      	ldr	r3, [pc, #12]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	4a02      	ldr	r2, [pc, #8]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007156:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800715a:	60d3      	str	r3, [r2, #12]
 800715c:	e002      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800715e:	bf00      	nop
 8007160:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d015      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007170:	4b29      	ldr	r3, [pc, #164]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007176:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800717e:	4926      	ldr	r1, [pc, #152]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007180:	4313      	orrs	r3, r2
 8007182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800718e:	d105      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007190:	4b21      	ldr	r3, [pc, #132]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	4a20      	ldr	r2, [pc, #128]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007196:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800719a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d015      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80071a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ae:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071b6:	4918      	ldr	r1, [pc, #96]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071c6:	d105      	bne.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80071c8:	4b13      	ldr	r3, [pc, #76]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	4a12      	ldr	r2, [pc, #72]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d015      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80071e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071ee:	490a      	ldr	r1, [pc, #40]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071fe:	d105      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007200:	4b05      	ldr	r3, [pc, #20]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	4a04      	ldr	r2, [pc, #16]	@ (8007218 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800720a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800720c:	7cbb      	ldrb	r3, [r7, #18]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	40021000 	.word	0x40021000

0800721c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e054      	b.n	80072d8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d111      	bne.n	800725e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f001 fee2 	bl	800900c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800724c:	2b00      	cmp	r3, #0
 800724e:	d102      	bne.n	8007256 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a23      	ldr	r2, [pc, #140]	@ (80072e0 <HAL_TIM_Base_Init+0xc4>)
 8007254:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2202      	movs	r2, #2
 8007262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	3304      	adds	r3, #4
 800726e:	4619      	mov	r1, r3
 8007270:	4610      	mov	r0, r2
 8007272:	f001 fa2b 	bl	80086cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	080034c5 	.word	0x080034c5

080072e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d001      	beq.n	80072fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e04c      	b.n	8007396 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a26      	ldr	r2, [pc, #152]	@ (80073a4 <HAL_TIM_Base_Start+0xc0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d022      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007316:	d01d      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a22      	ldr	r2, [pc, #136]	@ (80073a8 <HAL_TIM_Base_Start+0xc4>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d018      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a21      	ldr	r2, [pc, #132]	@ (80073ac <HAL_TIM_Base_Start+0xc8>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d013      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a1f      	ldr	r2, [pc, #124]	@ (80073b0 <HAL_TIM_Base_Start+0xcc>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d00e      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a1e      	ldr	r2, [pc, #120]	@ (80073b4 <HAL_TIM_Base_Start+0xd0>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d009      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a1c      	ldr	r2, [pc, #112]	@ (80073b8 <HAL_TIM_Base_Start+0xd4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d004      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a1b      	ldr	r2, [pc, #108]	@ (80073bc <HAL_TIM_Base_Start+0xd8>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d115      	bne.n	8007380 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689a      	ldr	r2, [r3, #8]
 800735a:	4b19      	ldr	r3, [pc, #100]	@ (80073c0 <HAL_TIM_Base_Start+0xdc>)
 800735c:	4013      	ands	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b06      	cmp	r3, #6
 8007364:	d015      	beq.n	8007392 <HAL_TIM_Base_Start+0xae>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800736c:	d011      	beq.n	8007392 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f042 0201 	orr.w	r2, r2, #1
 800737c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800737e:	e008      	b.n	8007392 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f042 0201 	orr.w	r2, r2, #1
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	e000      	b.n	8007394 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007392:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	40012c00 	.word	0x40012c00
 80073a8:	40000400 	.word	0x40000400
 80073ac:	40000800 	.word	0x40000800
 80073b0:	40000c00 	.word	0x40000c00
 80073b4:	40013400 	.word	0x40013400
 80073b8:	40014000 	.word	0x40014000
 80073bc:	40015000 	.word	0x40015000
 80073c0:	00010007 	.word	0x00010007

080073c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d001      	beq.n	80073dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e054      	b.n	8007486 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0201 	orr.w	r2, r2, #1
 80073f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a26      	ldr	r2, [pc, #152]	@ (8007494 <HAL_TIM_Base_Start_IT+0xd0>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d022      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x80>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007406:	d01d      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x80>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a22      	ldr	r2, [pc, #136]	@ (8007498 <HAL_TIM_Base_Start_IT+0xd4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d018      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x80>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a21      	ldr	r2, [pc, #132]	@ (800749c <HAL_TIM_Base_Start_IT+0xd8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d013      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x80>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a1f      	ldr	r2, [pc, #124]	@ (80074a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00e      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x80>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a1e      	ldr	r2, [pc, #120]	@ (80074a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d009      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x80>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a1c      	ldr	r2, [pc, #112]	@ (80074a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d004      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x80>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a1b      	ldr	r2, [pc, #108]	@ (80074ac <HAL_TIM_Base_Start_IT+0xe8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d115      	bne.n	8007470 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689a      	ldr	r2, [r3, #8]
 800744a:	4b19      	ldr	r3, [pc, #100]	@ (80074b0 <HAL_TIM_Base_Start_IT+0xec>)
 800744c:	4013      	ands	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b06      	cmp	r3, #6
 8007454:	d015      	beq.n	8007482 <HAL_TIM_Base_Start_IT+0xbe>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800745c:	d011      	beq.n	8007482 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f042 0201 	orr.w	r2, r2, #1
 800746c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800746e:	e008      	b.n	8007482 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f042 0201 	orr.w	r2, r2, #1
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	e000      	b.n	8007484 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007482:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	40012c00 	.word	0x40012c00
 8007498:	40000400 	.word	0x40000400
 800749c:	40000800 	.word	0x40000800
 80074a0:	40000c00 	.word	0x40000c00
 80074a4:	40013400 	.word	0x40013400
 80074a8:	40014000 	.word	0x40014000
 80074ac:	40015000 	.word	0x40015000
 80074b0:	00010007 	.word	0x00010007

080074b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e054      	b.n	8007570 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d111      	bne.n	80074f6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f001 fd96 	bl	800900c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d102      	bne.n	80074ee <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a23      	ldr	r2, [pc, #140]	@ (8007578 <HAL_TIM_PWM_Init+0xc4>)
 80074ec:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2202      	movs	r2, #2
 80074fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3304      	adds	r3, #4
 8007506:	4619      	mov	r1, r3
 8007508:	4610      	mov	r0, r2
 800750a:	f001 f8df 	bl	80086cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	08003479 	.word	0x08003479

0800757c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d109      	bne.n	80075a0 <HAL_TIM_PWM_Start+0x24>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b01      	cmp	r3, #1
 8007596:	bf14      	ite	ne
 8007598:	2301      	movne	r3, #1
 800759a:	2300      	moveq	r3, #0
 800759c:	b2db      	uxtb	r3, r3
 800759e:	e03c      	b.n	800761a <HAL_TIM_PWM_Start+0x9e>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d109      	bne.n	80075ba <HAL_TIM_PWM_Start+0x3e>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	bf14      	ite	ne
 80075b2:	2301      	movne	r3, #1
 80075b4:	2300      	moveq	r3, #0
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	e02f      	b.n	800761a <HAL_TIM_PWM_Start+0x9e>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d109      	bne.n	80075d4 <HAL_TIM_PWM_Start+0x58>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	bf14      	ite	ne
 80075cc:	2301      	movne	r3, #1
 80075ce:	2300      	moveq	r3, #0
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	e022      	b.n	800761a <HAL_TIM_PWM_Start+0x9e>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2b0c      	cmp	r3, #12
 80075d8:	d109      	bne.n	80075ee <HAL_TIM_PWM_Start+0x72>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	bf14      	ite	ne
 80075e6:	2301      	movne	r3, #1
 80075e8:	2300      	moveq	r3, #0
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	e015      	b.n	800761a <HAL_TIM_PWM_Start+0x9e>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b10      	cmp	r3, #16
 80075f2:	d109      	bne.n	8007608 <HAL_TIM_PWM_Start+0x8c>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	bf14      	ite	ne
 8007600:	2301      	movne	r3, #1
 8007602:	2300      	moveq	r3, #0
 8007604:	b2db      	uxtb	r3, r3
 8007606:	e008      	b.n	800761a <HAL_TIM_PWM_Start+0x9e>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b01      	cmp	r3, #1
 8007612:	bf14      	ite	ne
 8007614:	2301      	movne	r3, #1
 8007616:	2300      	moveq	r3, #0
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e0a6      	b.n	8007770 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d104      	bne.n	8007632 <HAL_TIM_PWM_Start+0xb6>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007630:	e023      	b.n	800767a <HAL_TIM_PWM_Start+0xfe>
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2b04      	cmp	r3, #4
 8007636:	d104      	bne.n	8007642 <HAL_TIM_PWM_Start+0xc6>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007640:	e01b      	b.n	800767a <HAL_TIM_PWM_Start+0xfe>
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b08      	cmp	r3, #8
 8007646:	d104      	bne.n	8007652 <HAL_TIM_PWM_Start+0xd6>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007650:	e013      	b.n	800767a <HAL_TIM_PWM_Start+0xfe>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b0c      	cmp	r3, #12
 8007656:	d104      	bne.n	8007662 <HAL_TIM_PWM_Start+0xe6>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2202      	movs	r2, #2
 800765c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007660:	e00b      	b.n	800767a <HAL_TIM_PWM_Start+0xfe>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b10      	cmp	r3, #16
 8007666:	d104      	bne.n	8007672 <HAL_TIM_PWM_Start+0xf6>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007670:	e003      	b.n	800767a <HAL_TIM_PWM_Start+0xfe>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2202      	movs	r2, #2
 8007676:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2201      	movs	r2, #1
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	4618      	mov	r0, r3
 8007684:	f001 fc9c 	bl	8008fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a3a      	ldr	r2, [pc, #232]	@ (8007778 <HAL_TIM_PWM_Start+0x1fc>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d018      	beq.n	80076c4 <HAL_TIM_PWM_Start+0x148>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a39      	ldr	r2, [pc, #228]	@ (800777c <HAL_TIM_PWM_Start+0x200>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d013      	beq.n	80076c4 <HAL_TIM_PWM_Start+0x148>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a37      	ldr	r2, [pc, #220]	@ (8007780 <HAL_TIM_PWM_Start+0x204>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00e      	beq.n	80076c4 <HAL_TIM_PWM_Start+0x148>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a36      	ldr	r2, [pc, #216]	@ (8007784 <HAL_TIM_PWM_Start+0x208>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d009      	beq.n	80076c4 <HAL_TIM_PWM_Start+0x148>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a34      	ldr	r2, [pc, #208]	@ (8007788 <HAL_TIM_PWM_Start+0x20c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d004      	beq.n	80076c4 <HAL_TIM_PWM_Start+0x148>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a33      	ldr	r2, [pc, #204]	@ (800778c <HAL_TIM_PWM_Start+0x210>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d101      	bne.n	80076c8 <HAL_TIM_PWM_Start+0x14c>
 80076c4:	2301      	movs	r3, #1
 80076c6:	e000      	b.n	80076ca <HAL_TIM_PWM_Start+0x14e>
 80076c8:	2300      	movs	r3, #0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d007      	beq.n	80076de <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a25      	ldr	r2, [pc, #148]	@ (8007778 <HAL_TIM_PWM_Start+0x1fc>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d022      	beq.n	800772e <HAL_TIM_PWM_Start+0x1b2>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076f0:	d01d      	beq.n	800772e <HAL_TIM_PWM_Start+0x1b2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a26      	ldr	r2, [pc, #152]	@ (8007790 <HAL_TIM_PWM_Start+0x214>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d018      	beq.n	800772e <HAL_TIM_PWM_Start+0x1b2>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a24      	ldr	r2, [pc, #144]	@ (8007794 <HAL_TIM_PWM_Start+0x218>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d013      	beq.n	800772e <HAL_TIM_PWM_Start+0x1b2>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a23      	ldr	r2, [pc, #140]	@ (8007798 <HAL_TIM_PWM_Start+0x21c>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d00e      	beq.n	800772e <HAL_TIM_PWM_Start+0x1b2>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a19      	ldr	r2, [pc, #100]	@ (800777c <HAL_TIM_PWM_Start+0x200>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d009      	beq.n	800772e <HAL_TIM_PWM_Start+0x1b2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a18      	ldr	r2, [pc, #96]	@ (8007780 <HAL_TIM_PWM_Start+0x204>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d004      	beq.n	800772e <HAL_TIM_PWM_Start+0x1b2>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a18      	ldr	r2, [pc, #96]	@ (800778c <HAL_TIM_PWM_Start+0x210>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d115      	bne.n	800775a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689a      	ldr	r2, [r3, #8]
 8007734:	4b19      	ldr	r3, [pc, #100]	@ (800779c <HAL_TIM_PWM_Start+0x220>)
 8007736:	4013      	ands	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2b06      	cmp	r3, #6
 800773e:	d015      	beq.n	800776c <HAL_TIM_PWM_Start+0x1f0>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007746:	d011      	beq.n	800776c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0201 	orr.w	r2, r2, #1
 8007756:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007758:	e008      	b.n	800776c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f042 0201 	orr.w	r2, r2, #1
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	e000      	b.n	800776e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800776c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	40012c00 	.word	0x40012c00
 800777c:	40013400 	.word	0x40013400
 8007780:	40014000 	.word	0x40014000
 8007784:	40014400 	.word	0x40014400
 8007788:	40014800 	.word	0x40014800
 800778c:	40015000 	.word	0x40015000
 8007790:	40000400 	.word	0x40000400
 8007794:	40000800 	.word	0x40000800
 8007798:	40000c00 	.word	0x40000c00
 800779c:	00010007 	.word	0x00010007

080077a0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d101      	bne.n	80077b4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e04c      	b.n	800784e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d111      	bne.n	80077e4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f001 fc1f 	bl	800900c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d102      	bne.n	80077dc <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a1f      	ldr	r2, [pc, #124]	@ (8007858 <HAL_TIM_OnePulse_Init+0xb8>)
 80077da:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	3304      	adds	r3, #4
 80077f4:	4619      	mov	r1, r3
 80077f6:	4610      	mov	r0, r2
 80077f8:	f000 ff68 	bl	80086cc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0208 	bic.w	r2, r2, #8
 800780a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6819      	ldr	r1, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	0800785d 	.word	0x0800785d

0800785c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007880:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007888:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007890:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007898:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d108      	bne.n	80078b2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d105      	bne.n	80078b2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078a6:	7b7b      	ldrb	r3, [r7, #13]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d102      	bne.n	80078b2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80078ac:	7b3b      	ldrb	r3, [r7, #12]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d001      	beq.n	80078b6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e059      	b.n	800796a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2202      	movs	r2, #2
 80078ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2202      	movs	r2, #2
 80078c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2202      	movs	r2, #2
 80078ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2202      	movs	r2, #2
 80078d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68da      	ldr	r2, [r3, #12]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f042 0202 	orr.w	r2, r2, #2
 80078e4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f042 0204 	orr.w	r2, r2, #4
 80078f4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2201      	movs	r2, #1
 80078fc:	2100      	movs	r1, #0
 80078fe:	4618      	mov	r0, r3
 8007900:	f001 fb5e 	bl	8008fc0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2201      	movs	r2, #1
 800790a:	2104      	movs	r1, #4
 800790c:	4618      	mov	r0, r3
 800790e:	f001 fb57 	bl	8008fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a17      	ldr	r2, [pc, #92]	@ (8007974 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d018      	beq.n	800794e <HAL_TIM_OnePulse_Start_IT+0xde>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a15      	ldr	r2, [pc, #84]	@ (8007978 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d013      	beq.n	800794e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a14      	ldr	r2, [pc, #80]	@ (800797c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d00e      	beq.n	800794e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a12      	ldr	r2, [pc, #72]	@ (8007980 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d009      	beq.n	800794e <HAL_TIM_OnePulse_Start_IT+0xde>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a11      	ldr	r2, [pc, #68]	@ (8007984 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d004      	beq.n	800794e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a0f      	ldr	r2, [pc, #60]	@ (8007988 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d101      	bne.n	8007952 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800794e:	2301      	movs	r3, #1
 8007950:	e000      	b.n	8007954 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007952:	2300      	movs	r3, #0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d007      	beq.n	8007968 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007966:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	40012c00 	.word	0x40012c00
 8007978:	40013400 	.word	0x40013400
 800797c:	40014000 	.word	0x40014000
 8007980:	40014400 	.word	0x40014400
 8007984:	40014800 	.word	0x40014800
 8007988:	40015000 	.word	0x40015000

0800798c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e0a2      	b.n	8007ae6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d111      	bne.n	80079d0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 fb29 	bl	800900c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d102      	bne.n	80079c8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a4a      	ldr	r2, [pc, #296]	@ (8007af0 <HAL_TIM_Encoder_Init+0x164>)
 80079c6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	6812      	ldr	r2, [r2, #0]
 80079e2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80079e6:	f023 0307 	bic.w	r3, r3, #7
 80079ea:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4619      	mov	r1, r3
 80079f6:	4610      	mov	r0, r2
 80079f8:	f000 fe68 	bl	80086cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a24:	f023 0303 	bic.w	r3, r3, #3
 8007a28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	689a      	ldr	r2, [r3, #8]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	4313      	orrs	r3, r2
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007a42:	f023 030c 	bic.w	r3, r3, #12
 8007a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007a4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	68da      	ldr	r2, [r3, #12]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	021b      	lsls	r3, r3, #8
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	011a      	lsls	r2, r3, #4
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
 8007a70:	031b      	lsls	r3, r3, #12
 8007a72:	4313      	orrs	r3, r2
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007a80:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007a88:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	011b      	lsls	r3, r3, #4
 8007a94:	4313      	orrs	r3, r2
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	08003595 	.word	0x08003595

08007af4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b0c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b14:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b1c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d110      	bne.n	8007b46 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d102      	bne.n	8007b30 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b2a:	7b7b      	ldrb	r3, [r7, #13]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d001      	beq.n	8007b34 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e069      	b.n	8007c08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b44:	e031      	b.n	8007baa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d110      	bne.n	8007b6e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d102      	bne.n	8007b58 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b52:	7b3b      	ldrb	r3, [r7, #12]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d001      	beq.n	8007b5c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e055      	b.n	8007c08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b6c:	e01d      	b.n	8007baa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d108      	bne.n	8007b86 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d105      	bne.n	8007b86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b7a:	7b7b      	ldrb	r3, [r7, #13]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d102      	bne.n	8007b86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b80:	7b3b      	ldrb	r3, [r7, #12]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d001      	beq.n	8007b8a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e03e      	b.n	8007c08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2202      	movs	r2, #2
 8007b96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <HAL_TIM_Encoder_Start+0xc4>
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d008      	beq.n	8007bc8 <HAL_TIM_Encoder_Start+0xd4>
 8007bb6:	e00f      	b.n	8007bd8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 f9fd 	bl	8008fc0 <TIM_CCxChannelCmd>
      break;
 8007bc6:	e016      	b.n	8007bf6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	2104      	movs	r1, #4
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f001 f9f5 	bl	8008fc0 <TIM_CCxChannelCmd>
      break;
 8007bd6:	e00e      	b.n	8007bf6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	2100      	movs	r1, #0
 8007be0:	4618      	mov	r0, r3
 8007be2:	f001 f9ed 	bl	8008fc0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2201      	movs	r2, #1
 8007bec:	2104      	movs	r1, #4
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f001 f9e6 	bl	8008fc0 <TIM_CCxChannelCmd>
      break;
 8007bf4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f042 0201 	orr.w	r2, r2, #1
 8007c04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d026      	beq.n	8007c80 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f003 0302 	and.w	r3, r3, #2
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d021      	beq.n	8007c80 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f06f 0202 	mvn.w	r2, #2
 8007c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	f003 0303 	and.w	r3, r3, #3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d005      	beq.n	8007c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	4798      	blx	r3
 8007c64:	e009      	b.n	8007c7a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	f003 0304 	and.w	r3, r3, #4
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d026      	beq.n	8007cd8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d021      	beq.n	8007cd8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f06f 0204 	mvn.w	r2, #4
 8007c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d005      	beq.n	8007cbe <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	4798      	blx	r3
 8007cbc:	e009      	b.n	8007cd2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	f003 0308 	and.w	r3, r3, #8
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d026      	beq.n	8007d30 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f003 0308 	and.w	r3, r3, #8
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d021      	beq.n	8007d30 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f06f 0208 	mvn.w	r2, #8
 8007cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2204      	movs	r2, #4
 8007cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	f003 0303 	and.w	r3, r3, #3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d005      	beq.n	8007d16 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	4798      	blx	r3
 8007d14:	e009      	b.n	8007d2a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f003 0310 	and.w	r3, r3, #16
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d026      	beq.n	8007d88 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f003 0310 	and.w	r3, r3, #16
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d021      	beq.n	8007d88 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f06f 0210 	mvn.w	r2, #16
 8007d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2208      	movs	r2, #8
 8007d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	4798      	blx	r3
 8007d6c:	e009      	b.n	8007d82 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00e      	beq.n	8007db0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d009      	beq.n	8007db0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f06f 0201 	mvn.w	r2, #1
 8007da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d104      	bne.n	8007dc4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00e      	beq.n	8007de2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d009      	beq.n	8007de2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00e      	beq.n	8007e0a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d009      	beq.n	8007e0a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00e      	beq.n	8007e32 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d009      	beq.n	8007e32 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	f003 0320 	and.w	r3, r3, #32
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00e      	beq.n	8007e5a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f003 0320 	and.w	r3, r3, #32
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d009      	beq.n	8007e5a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f06f 0220 	mvn.w	r2, #32
 8007e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00e      	beq.n	8007e82 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d009      	beq.n	8007e82 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00e      	beq.n	8007eaa <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d009      	beq.n	8007eaa <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00e      	beq.n	8007ed2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d009      	beq.n	8007ed2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00e      	beq.n	8007efa <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d009      	beq.n	8007efa <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007efa:	bf00      	nop
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
	...

08007f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e0ff      	b.n	8008122 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b14      	cmp	r3, #20
 8007f2e:	f200 80f0 	bhi.w	8008112 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007f32:	a201      	add	r2, pc, #4	@ (adr r2, 8007f38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f38:	08007f8d 	.word	0x08007f8d
 8007f3c:	08008113 	.word	0x08008113
 8007f40:	08008113 	.word	0x08008113
 8007f44:	08008113 	.word	0x08008113
 8007f48:	08007fcd 	.word	0x08007fcd
 8007f4c:	08008113 	.word	0x08008113
 8007f50:	08008113 	.word	0x08008113
 8007f54:	08008113 	.word	0x08008113
 8007f58:	0800800f 	.word	0x0800800f
 8007f5c:	08008113 	.word	0x08008113
 8007f60:	08008113 	.word	0x08008113
 8007f64:	08008113 	.word	0x08008113
 8007f68:	0800804f 	.word	0x0800804f
 8007f6c:	08008113 	.word	0x08008113
 8007f70:	08008113 	.word	0x08008113
 8007f74:	08008113 	.word	0x08008113
 8007f78:	08008091 	.word	0x08008091
 8007f7c:	08008113 	.word	0x08008113
 8007f80:	08008113 	.word	0x08008113
 8007f84:	08008113 	.word	0x08008113
 8007f88:	080080d1 	.word	0x080080d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68b9      	ldr	r1, [r7, #8]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 fc4e 	bl	8008834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	699a      	ldr	r2, [r3, #24]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0208 	orr.w	r2, r2, #8
 8007fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	699a      	ldr	r2, [r3, #24]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0204 	bic.w	r2, r2, #4
 8007fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6999      	ldr	r1, [r3, #24]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	691a      	ldr	r2, [r3, #16]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	619a      	str	r2, [r3, #24]
      break;
 8007fca:	e0a5      	b.n	8008118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68b9      	ldr	r1, [r7, #8]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fcc8 	bl	8008968 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699a      	ldr	r2, [r3, #24]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	699a      	ldr	r2, [r3, #24]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6999      	ldr	r1, [r3, #24]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	021a      	lsls	r2, r3, #8
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	619a      	str	r2, [r3, #24]
      break;
 800800c:	e084      	b.n	8008118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68b9      	ldr	r1, [r7, #8]
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fd3b 	bl	8008a90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	69da      	ldr	r2, [r3, #28]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f042 0208 	orr.w	r2, r2, #8
 8008028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69da      	ldr	r2, [r3, #28]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f022 0204 	bic.w	r2, r2, #4
 8008038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	69d9      	ldr	r1, [r3, #28]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	430a      	orrs	r2, r1
 800804a:	61da      	str	r2, [r3, #28]
      break;
 800804c:	e064      	b.n	8008118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68b9      	ldr	r1, [r7, #8]
 8008054:	4618      	mov	r0, r3
 8008056:	f000 fdad 	bl	8008bb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69da      	ldr	r2, [r3, #28]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	69da      	ldr	r2, [r3, #28]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	69d9      	ldr	r1, [r3, #28]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	021a      	lsls	r2, r3, #8
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	61da      	str	r2, [r3, #28]
      break;
 800808e:	e043      	b.n	8008118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68b9      	ldr	r1, [r7, #8]
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fe20 	bl	8008cdc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0208 	orr.w	r2, r2, #8
 80080aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0204 	bic.w	r2, r2, #4
 80080ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	691a      	ldr	r2, [r3, #16]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80080ce:	e023      	b.n	8008118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68b9      	ldr	r1, [r7, #8]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 fe6a 	bl	8008db0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	021a      	lsls	r2, r3, #8
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008110:	e002      	b.n	8008118 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	75fb      	strb	r3, [r7, #23]
      break;
 8008116:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008120:	7dfb      	ldrb	r3, [r7, #23]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3718      	adds	r7, #24
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop

0800812c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008140:	2b01      	cmp	r3, #1
 8008142:	d101      	bne.n	8008148 <HAL_TIM_ConfigClockSource+0x1c>
 8008144:	2302      	movs	r3, #2
 8008146:	e0f6      	b.n	8008336 <HAL_TIM_ConfigClockSource+0x20a>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2202      	movs	r2, #2
 8008154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008166:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800816a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008172:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a6f      	ldr	r2, [pc, #444]	@ (8008340 <HAL_TIM_ConfigClockSource+0x214>)
 8008182:	4293      	cmp	r3, r2
 8008184:	f000 80c1 	beq.w	800830a <HAL_TIM_ConfigClockSource+0x1de>
 8008188:	4a6d      	ldr	r2, [pc, #436]	@ (8008340 <HAL_TIM_ConfigClockSource+0x214>)
 800818a:	4293      	cmp	r3, r2
 800818c:	f200 80c6 	bhi.w	800831c <HAL_TIM_ConfigClockSource+0x1f0>
 8008190:	4a6c      	ldr	r2, [pc, #432]	@ (8008344 <HAL_TIM_ConfigClockSource+0x218>)
 8008192:	4293      	cmp	r3, r2
 8008194:	f000 80b9 	beq.w	800830a <HAL_TIM_ConfigClockSource+0x1de>
 8008198:	4a6a      	ldr	r2, [pc, #424]	@ (8008344 <HAL_TIM_ConfigClockSource+0x218>)
 800819a:	4293      	cmp	r3, r2
 800819c:	f200 80be 	bhi.w	800831c <HAL_TIM_ConfigClockSource+0x1f0>
 80081a0:	4a69      	ldr	r2, [pc, #420]	@ (8008348 <HAL_TIM_ConfigClockSource+0x21c>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	f000 80b1 	beq.w	800830a <HAL_TIM_ConfigClockSource+0x1de>
 80081a8:	4a67      	ldr	r2, [pc, #412]	@ (8008348 <HAL_TIM_ConfigClockSource+0x21c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	f200 80b6 	bhi.w	800831c <HAL_TIM_ConfigClockSource+0x1f0>
 80081b0:	4a66      	ldr	r2, [pc, #408]	@ (800834c <HAL_TIM_ConfigClockSource+0x220>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	f000 80a9 	beq.w	800830a <HAL_TIM_ConfigClockSource+0x1de>
 80081b8:	4a64      	ldr	r2, [pc, #400]	@ (800834c <HAL_TIM_ConfigClockSource+0x220>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	f200 80ae 	bhi.w	800831c <HAL_TIM_ConfigClockSource+0x1f0>
 80081c0:	4a63      	ldr	r2, [pc, #396]	@ (8008350 <HAL_TIM_ConfigClockSource+0x224>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	f000 80a1 	beq.w	800830a <HAL_TIM_ConfigClockSource+0x1de>
 80081c8:	4a61      	ldr	r2, [pc, #388]	@ (8008350 <HAL_TIM_ConfigClockSource+0x224>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	f200 80a6 	bhi.w	800831c <HAL_TIM_ConfigClockSource+0x1f0>
 80081d0:	4a60      	ldr	r2, [pc, #384]	@ (8008354 <HAL_TIM_ConfigClockSource+0x228>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	f000 8099 	beq.w	800830a <HAL_TIM_ConfigClockSource+0x1de>
 80081d8:	4a5e      	ldr	r2, [pc, #376]	@ (8008354 <HAL_TIM_ConfigClockSource+0x228>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	f200 809e 	bhi.w	800831c <HAL_TIM_ConfigClockSource+0x1f0>
 80081e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081e4:	f000 8091 	beq.w	800830a <HAL_TIM_ConfigClockSource+0x1de>
 80081e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081ec:	f200 8096 	bhi.w	800831c <HAL_TIM_ConfigClockSource+0x1f0>
 80081f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081f4:	f000 8089 	beq.w	800830a <HAL_TIM_ConfigClockSource+0x1de>
 80081f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081fc:	f200 808e 	bhi.w	800831c <HAL_TIM_ConfigClockSource+0x1f0>
 8008200:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008204:	d03e      	beq.n	8008284 <HAL_TIM_ConfigClockSource+0x158>
 8008206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800820a:	f200 8087 	bhi.w	800831c <HAL_TIM_ConfigClockSource+0x1f0>
 800820e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008212:	f000 8086 	beq.w	8008322 <HAL_TIM_ConfigClockSource+0x1f6>
 8008216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800821a:	d87f      	bhi.n	800831c <HAL_TIM_ConfigClockSource+0x1f0>
 800821c:	2b70      	cmp	r3, #112	@ 0x70
 800821e:	d01a      	beq.n	8008256 <HAL_TIM_ConfigClockSource+0x12a>
 8008220:	2b70      	cmp	r3, #112	@ 0x70
 8008222:	d87b      	bhi.n	800831c <HAL_TIM_ConfigClockSource+0x1f0>
 8008224:	2b60      	cmp	r3, #96	@ 0x60
 8008226:	d050      	beq.n	80082ca <HAL_TIM_ConfigClockSource+0x19e>
 8008228:	2b60      	cmp	r3, #96	@ 0x60
 800822a:	d877      	bhi.n	800831c <HAL_TIM_ConfigClockSource+0x1f0>
 800822c:	2b50      	cmp	r3, #80	@ 0x50
 800822e:	d03c      	beq.n	80082aa <HAL_TIM_ConfigClockSource+0x17e>
 8008230:	2b50      	cmp	r3, #80	@ 0x50
 8008232:	d873      	bhi.n	800831c <HAL_TIM_ConfigClockSource+0x1f0>
 8008234:	2b40      	cmp	r3, #64	@ 0x40
 8008236:	d058      	beq.n	80082ea <HAL_TIM_ConfigClockSource+0x1be>
 8008238:	2b40      	cmp	r3, #64	@ 0x40
 800823a:	d86f      	bhi.n	800831c <HAL_TIM_ConfigClockSource+0x1f0>
 800823c:	2b30      	cmp	r3, #48	@ 0x30
 800823e:	d064      	beq.n	800830a <HAL_TIM_ConfigClockSource+0x1de>
 8008240:	2b30      	cmp	r3, #48	@ 0x30
 8008242:	d86b      	bhi.n	800831c <HAL_TIM_ConfigClockSource+0x1f0>
 8008244:	2b20      	cmp	r3, #32
 8008246:	d060      	beq.n	800830a <HAL_TIM_ConfigClockSource+0x1de>
 8008248:	2b20      	cmp	r3, #32
 800824a:	d867      	bhi.n	800831c <HAL_TIM_ConfigClockSource+0x1f0>
 800824c:	2b00      	cmp	r3, #0
 800824e:	d05c      	beq.n	800830a <HAL_TIM_ConfigClockSource+0x1de>
 8008250:	2b10      	cmp	r3, #16
 8008252:	d05a      	beq.n	800830a <HAL_TIM_ConfigClockSource+0x1de>
 8008254:	e062      	b.n	800831c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008266:	f000 fe8b 	bl	8008f80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008278:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	609a      	str	r2, [r3, #8]
      break;
 8008282:	e04f      	b.n	8008324 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008294:	f000 fe74 	bl	8008f80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	689a      	ldr	r2, [r3, #8]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80082a6:	609a      	str	r2, [r3, #8]
      break;
 80082a8:	e03c      	b.n	8008324 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082b6:	461a      	mov	r2, r3
 80082b8:	f000 fde6 	bl	8008e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2150      	movs	r1, #80	@ 0x50
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fe3f 	bl	8008f46 <TIM_ITRx_SetConfig>
      break;
 80082c8:	e02c      	b.n	8008324 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082d6:	461a      	mov	r2, r3
 80082d8:	f000 fe05 	bl	8008ee6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2160      	movs	r1, #96	@ 0x60
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 fe2f 	bl	8008f46 <TIM_ITRx_SetConfig>
      break;
 80082e8:	e01c      	b.n	8008324 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082f6:	461a      	mov	r2, r3
 80082f8:	f000 fdc6 	bl	8008e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2140      	movs	r1, #64	@ 0x40
 8008302:	4618      	mov	r0, r3
 8008304:	f000 fe1f 	bl	8008f46 <TIM_ITRx_SetConfig>
      break;
 8008308:	e00c      	b.n	8008324 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4619      	mov	r1, r3
 8008314:	4610      	mov	r0, r2
 8008316:	f000 fe16 	bl	8008f46 <TIM_ITRx_SetConfig>
      break;
 800831a:	e003      	b.n	8008324 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	73fb      	strb	r3, [r7, #15]
      break;
 8008320:	e000      	b.n	8008324 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	00100070 	.word	0x00100070
 8008344:	00100060 	.word	0x00100060
 8008348:	00100050 	.word	0x00100050
 800834c:	00100040 	.word	0x00100040
 8008350:	00100030 	.word	0x00100030
 8008354:	00100020 	.word	0x00100020

08008358 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	460b      	mov	r3, r1
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e14a      	b.n	80086be <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b01      	cmp	r3, #1
 8008432:	f040 80dd 	bne.w	80085f0 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008436:	7afb      	ldrb	r3, [r7, #11]
 8008438:	2b1f      	cmp	r3, #31
 800843a:	f200 80d6 	bhi.w	80085ea <HAL_TIM_RegisterCallback+0x1de>
 800843e:	a201      	add	r2, pc, #4	@ (adr r2, 8008444 <HAL_TIM_RegisterCallback+0x38>)
 8008440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008444:	080084c5 	.word	0x080084c5
 8008448:	080084cd 	.word	0x080084cd
 800844c:	080084d5 	.word	0x080084d5
 8008450:	080084dd 	.word	0x080084dd
 8008454:	080084e5 	.word	0x080084e5
 8008458:	080084ed 	.word	0x080084ed
 800845c:	080084f5 	.word	0x080084f5
 8008460:	080084fd 	.word	0x080084fd
 8008464:	08008505 	.word	0x08008505
 8008468:	0800850d 	.word	0x0800850d
 800846c:	08008515 	.word	0x08008515
 8008470:	0800851d 	.word	0x0800851d
 8008474:	08008525 	.word	0x08008525
 8008478:	0800852d 	.word	0x0800852d
 800847c:	08008537 	.word	0x08008537
 8008480:	08008541 	.word	0x08008541
 8008484:	0800854b 	.word	0x0800854b
 8008488:	08008555 	.word	0x08008555
 800848c:	0800855f 	.word	0x0800855f
 8008490:	08008569 	.word	0x08008569
 8008494:	08008573 	.word	0x08008573
 8008498:	0800857d 	.word	0x0800857d
 800849c:	08008587 	.word	0x08008587
 80084a0:	08008591 	.word	0x08008591
 80084a4:	0800859b 	.word	0x0800859b
 80084a8:	080085a5 	.word	0x080085a5
 80084ac:	080085af 	.word	0x080085af
 80084b0:	080085b9 	.word	0x080085b9
 80084b4:	080085c3 	.word	0x080085c3
 80084b8:	080085cd 	.word	0x080085cd
 80084bc:	080085d7 	.word	0x080085d7
 80084c0:	080085e1 	.word	0x080085e1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80084ca:	e0f7      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80084d2:	e0f3      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80084da:	e0ef      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80084e2:	e0eb      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80084ea:	e0e7      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80084f2:	e0e3      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80084fa:	e0df      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008502:	e0db      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800850a:	e0d7      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008512:	e0d3      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800851a:	e0cf      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008522:	e0cb      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800852a:	e0c7      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008534:	e0c2      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800853e:	e0bd      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008548:	e0b8      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008552:	e0b3      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800855c:	e0ae      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008566:	e0a9      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008570:	e0a4      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800857a:	e09f      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008584:	e09a      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800858e:	e095      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008598:	e090      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80085a2:	e08b      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80085ac:	e086      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80085b6:	e081      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80085c0:	e07c      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80085ca:	e077      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80085d4:	e072      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80085de:	e06d      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80085e8:	e068      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	75fb      	strb	r3, [r7, #23]
        break;
 80085ee:	e065      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d15d      	bne.n	80086b8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80085fc:	7afb      	ldrb	r3, [r7, #11]
 80085fe:	2b0d      	cmp	r3, #13
 8008600:	d857      	bhi.n	80086b2 <HAL_TIM_RegisterCallback+0x2a6>
 8008602:	a201      	add	r2, pc, #4	@ (adr r2, 8008608 <HAL_TIM_RegisterCallback+0x1fc>)
 8008604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008608:	08008641 	.word	0x08008641
 800860c:	08008649 	.word	0x08008649
 8008610:	08008651 	.word	0x08008651
 8008614:	08008659 	.word	0x08008659
 8008618:	08008661 	.word	0x08008661
 800861c:	08008669 	.word	0x08008669
 8008620:	08008671 	.word	0x08008671
 8008624:	08008679 	.word	0x08008679
 8008628:	08008681 	.word	0x08008681
 800862c:	08008689 	.word	0x08008689
 8008630:	08008691 	.word	0x08008691
 8008634:	08008699 	.word	0x08008699
 8008638:	080086a1 	.word	0x080086a1
 800863c:	080086a9 	.word	0x080086a9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008646:	e039      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800864e:	e035      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008656:	e031      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800865e:	e02d      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008666:	e029      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800866e:	e025      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008676:	e021      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800867e:	e01d      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008686:	e019      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800868e:	e015      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008696:	e011      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800869e:	e00d      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80086a6:	e009      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80086b0:	e004      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	75fb      	strb	r3, [r7, #23]
        break;
 80086b6:	e001      	b.n	80086bc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80086bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop

080086cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a4c      	ldr	r2, [pc, #304]	@ (8008810 <TIM_Base_SetConfig+0x144>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d017      	beq.n	8008714 <TIM_Base_SetConfig+0x48>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ea:	d013      	beq.n	8008714 <TIM_Base_SetConfig+0x48>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a49      	ldr	r2, [pc, #292]	@ (8008814 <TIM_Base_SetConfig+0x148>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d00f      	beq.n	8008714 <TIM_Base_SetConfig+0x48>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a48      	ldr	r2, [pc, #288]	@ (8008818 <TIM_Base_SetConfig+0x14c>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d00b      	beq.n	8008714 <TIM_Base_SetConfig+0x48>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a47      	ldr	r2, [pc, #284]	@ (800881c <TIM_Base_SetConfig+0x150>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d007      	beq.n	8008714 <TIM_Base_SetConfig+0x48>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a46      	ldr	r2, [pc, #280]	@ (8008820 <TIM_Base_SetConfig+0x154>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d003      	beq.n	8008714 <TIM_Base_SetConfig+0x48>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a45      	ldr	r2, [pc, #276]	@ (8008824 <TIM_Base_SetConfig+0x158>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d108      	bne.n	8008726 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800871a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	4313      	orrs	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a39      	ldr	r2, [pc, #228]	@ (8008810 <TIM_Base_SetConfig+0x144>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d023      	beq.n	8008776 <TIM_Base_SetConfig+0xaa>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008734:	d01f      	beq.n	8008776 <TIM_Base_SetConfig+0xaa>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a36      	ldr	r2, [pc, #216]	@ (8008814 <TIM_Base_SetConfig+0x148>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d01b      	beq.n	8008776 <TIM_Base_SetConfig+0xaa>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a35      	ldr	r2, [pc, #212]	@ (8008818 <TIM_Base_SetConfig+0x14c>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d017      	beq.n	8008776 <TIM_Base_SetConfig+0xaa>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a34      	ldr	r2, [pc, #208]	@ (800881c <TIM_Base_SetConfig+0x150>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d013      	beq.n	8008776 <TIM_Base_SetConfig+0xaa>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a33      	ldr	r2, [pc, #204]	@ (8008820 <TIM_Base_SetConfig+0x154>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d00f      	beq.n	8008776 <TIM_Base_SetConfig+0xaa>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a33      	ldr	r2, [pc, #204]	@ (8008828 <TIM_Base_SetConfig+0x15c>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d00b      	beq.n	8008776 <TIM_Base_SetConfig+0xaa>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a32      	ldr	r2, [pc, #200]	@ (800882c <TIM_Base_SetConfig+0x160>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d007      	beq.n	8008776 <TIM_Base_SetConfig+0xaa>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a31      	ldr	r2, [pc, #196]	@ (8008830 <TIM_Base_SetConfig+0x164>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d003      	beq.n	8008776 <TIM_Base_SetConfig+0xaa>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a2c      	ldr	r2, [pc, #176]	@ (8008824 <TIM_Base_SetConfig+0x158>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d108      	bne.n	8008788 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800877c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	4313      	orrs	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a18      	ldr	r2, [pc, #96]	@ (8008810 <TIM_Base_SetConfig+0x144>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d013      	beq.n	80087dc <TIM_Base_SetConfig+0x110>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a1a      	ldr	r2, [pc, #104]	@ (8008820 <TIM_Base_SetConfig+0x154>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d00f      	beq.n	80087dc <TIM_Base_SetConfig+0x110>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a1a      	ldr	r2, [pc, #104]	@ (8008828 <TIM_Base_SetConfig+0x15c>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d00b      	beq.n	80087dc <TIM_Base_SetConfig+0x110>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a19      	ldr	r2, [pc, #100]	@ (800882c <TIM_Base_SetConfig+0x160>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d007      	beq.n	80087dc <TIM_Base_SetConfig+0x110>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a18      	ldr	r2, [pc, #96]	@ (8008830 <TIM_Base_SetConfig+0x164>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d003      	beq.n	80087dc <TIM_Base_SetConfig+0x110>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a13      	ldr	r2, [pc, #76]	@ (8008824 <TIM_Base_SetConfig+0x158>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d103      	bne.n	80087e4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	691a      	ldr	r2, [r3, #16]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d105      	bne.n	8008802 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	f023 0201 	bic.w	r2, r3, #1
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	611a      	str	r2, [r3, #16]
  }
}
 8008802:	bf00      	nop
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	40012c00 	.word	0x40012c00
 8008814:	40000400 	.word	0x40000400
 8008818:	40000800 	.word	0x40000800
 800881c:	40000c00 	.word	0x40000c00
 8008820:	40013400 	.word	0x40013400
 8008824:	40015000 	.word	0x40015000
 8008828:	40014000 	.word	0x40014000
 800882c:	40014400 	.word	0x40014400
 8008830:	40014800 	.word	0x40014800

08008834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008834:	b480      	push	{r7}
 8008836:	b087      	sub	sp, #28
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a1b      	ldr	r3, [r3, #32]
 8008848:	f023 0201 	bic.w	r2, r3, #1
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f023 0303 	bic.w	r3, r3, #3
 800886e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	4313      	orrs	r3, r2
 8008878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f023 0302 	bic.w	r3, r3, #2
 8008880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	4313      	orrs	r3, r2
 800888a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a30      	ldr	r2, [pc, #192]	@ (8008950 <TIM_OC1_SetConfig+0x11c>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d013      	beq.n	80088bc <TIM_OC1_SetConfig+0x88>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a2f      	ldr	r2, [pc, #188]	@ (8008954 <TIM_OC1_SetConfig+0x120>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d00f      	beq.n	80088bc <TIM_OC1_SetConfig+0x88>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a2e      	ldr	r2, [pc, #184]	@ (8008958 <TIM_OC1_SetConfig+0x124>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d00b      	beq.n	80088bc <TIM_OC1_SetConfig+0x88>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a2d      	ldr	r2, [pc, #180]	@ (800895c <TIM_OC1_SetConfig+0x128>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d007      	beq.n	80088bc <TIM_OC1_SetConfig+0x88>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a2c      	ldr	r2, [pc, #176]	@ (8008960 <TIM_OC1_SetConfig+0x12c>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d003      	beq.n	80088bc <TIM_OC1_SetConfig+0x88>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a2b      	ldr	r2, [pc, #172]	@ (8008964 <TIM_OC1_SetConfig+0x130>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d10c      	bne.n	80088d6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f023 0308 	bic.w	r3, r3, #8
 80088c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f023 0304 	bic.w	r3, r3, #4
 80088d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008950 <TIM_OC1_SetConfig+0x11c>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d013      	beq.n	8008906 <TIM_OC1_SetConfig+0xd2>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008954 <TIM_OC1_SetConfig+0x120>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d00f      	beq.n	8008906 <TIM_OC1_SetConfig+0xd2>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008958 <TIM_OC1_SetConfig+0x124>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d00b      	beq.n	8008906 <TIM_OC1_SetConfig+0xd2>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a1a      	ldr	r2, [pc, #104]	@ (800895c <TIM_OC1_SetConfig+0x128>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d007      	beq.n	8008906 <TIM_OC1_SetConfig+0xd2>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a19      	ldr	r2, [pc, #100]	@ (8008960 <TIM_OC1_SetConfig+0x12c>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d003      	beq.n	8008906 <TIM_OC1_SetConfig+0xd2>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a18      	ldr	r2, [pc, #96]	@ (8008964 <TIM_OC1_SetConfig+0x130>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d111      	bne.n	800892a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800890c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	4313      	orrs	r3, r2
 800891e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	4313      	orrs	r3, r2
 8008928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	685a      	ldr	r2, [r3, #4]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	621a      	str	r2, [r3, #32]
}
 8008944:	bf00      	nop
 8008946:	371c      	adds	r7, #28
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	40012c00 	.word	0x40012c00
 8008954:	40013400 	.word	0x40013400
 8008958:	40014000 	.word	0x40014000
 800895c:	40014400 	.word	0x40014400
 8008960:	40014800 	.word	0x40014800
 8008964:	40015000 	.word	0x40015000

08008968 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008968:	b480      	push	{r7}
 800896a:	b087      	sub	sp, #28
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a1b      	ldr	r3, [r3, #32]
 800897c:	f023 0210 	bic.w	r2, r3, #16
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800899a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	021b      	lsls	r3, r3, #8
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	f023 0320 	bic.w	r3, r3, #32
 80089b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	011b      	lsls	r3, r3, #4
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a2c      	ldr	r2, [pc, #176]	@ (8008a78 <TIM_OC2_SetConfig+0x110>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d007      	beq.n	80089dc <TIM_OC2_SetConfig+0x74>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a2b      	ldr	r2, [pc, #172]	@ (8008a7c <TIM_OC2_SetConfig+0x114>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d003      	beq.n	80089dc <TIM_OC2_SetConfig+0x74>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008a80 <TIM_OC2_SetConfig+0x118>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d10d      	bne.n	80089f8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	011b      	lsls	r3, r3, #4
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a1f      	ldr	r2, [pc, #124]	@ (8008a78 <TIM_OC2_SetConfig+0x110>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d013      	beq.n	8008a28 <TIM_OC2_SetConfig+0xc0>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a1e      	ldr	r2, [pc, #120]	@ (8008a7c <TIM_OC2_SetConfig+0x114>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d00f      	beq.n	8008a28 <TIM_OC2_SetConfig+0xc0>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8008a84 <TIM_OC2_SetConfig+0x11c>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d00b      	beq.n	8008a28 <TIM_OC2_SetConfig+0xc0>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a1d      	ldr	r2, [pc, #116]	@ (8008a88 <TIM_OC2_SetConfig+0x120>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d007      	beq.n	8008a28 <TIM_OC2_SetConfig+0xc0>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8008a8c <TIM_OC2_SetConfig+0x124>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d003      	beq.n	8008a28 <TIM_OC2_SetConfig+0xc0>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a17      	ldr	r2, [pc, #92]	@ (8008a80 <TIM_OC2_SetConfig+0x118>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d113      	bne.n	8008a50 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	621a      	str	r2, [r3, #32]
}
 8008a6a:	bf00      	nop
 8008a6c:	371c      	adds	r7, #28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	40012c00 	.word	0x40012c00
 8008a7c:	40013400 	.word	0x40013400
 8008a80:	40015000 	.word	0x40015000
 8008a84:	40014000 	.word	0x40014000
 8008a88:	40014400 	.word	0x40014400
 8008a8c:	40014800 	.word	0x40014800

08008a90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b087      	sub	sp, #28
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a1b      	ldr	r3, [r3, #32]
 8008aa4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f023 0303 	bic.w	r3, r3, #3
 8008aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	021b      	lsls	r3, r3, #8
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a2b      	ldr	r2, [pc, #172]	@ (8008b9c <TIM_OC3_SetConfig+0x10c>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d007      	beq.n	8008b02 <TIM_OC3_SetConfig+0x72>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a2a      	ldr	r2, [pc, #168]	@ (8008ba0 <TIM_OC3_SetConfig+0x110>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d003      	beq.n	8008b02 <TIM_OC3_SetConfig+0x72>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a29      	ldr	r2, [pc, #164]	@ (8008ba4 <TIM_OC3_SetConfig+0x114>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d10d      	bne.n	8008b1e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	021b      	lsls	r3, r3, #8
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a1e      	ldr	r2, [pc, #120]	@ (8008b9c <TIM_OC3_SetConfig+0x10c>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d013      	beq.n	8008b4e <TIM_OC3_SetConfig+0xbe>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba0 <TIM_OC3_SetConfig+0x110>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d00f      	beq.n	8008b4e <TIM_OC3_SetConfig+0xbe>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba8 <TIM_OC3_SetConfig+0x118>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d00b      	beq.n	8008b4e <TIM_OC3_SetConfig+0xbe>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a1c      	ldr	r2, [pc, #112]	@ (8008bac <TIM_OC3_SetConfig+0x11c>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d007      	beq.n	8008b4e <TIM_OC3_SetConfig+0xbe>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a1b      	ldr	r2, [pc, #108]	@ (8008bb0 <TIM_OC3_SetConfig+0x120>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d003      	beq.n	8008b4e <TIM_OC3_SetConfig+0xbe>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a16      	ldr	r2, [pc, #88]	@ (8008ba4 <TIM_OC3_SetConfig+0x114>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d113      	bne.n	8008b76 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	011b      	lsls	r3, r3, #4
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	011b      	lsls	r3, r3, #4
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	621a      	str	r2, [r3, #32]
}
 8008b90:	bf00      	nop
 8008b92:	371c      	adds	r7, #28
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	40012c00 	.word	0x40012c00
 8008ba0:	40013400 	.word	0x40013400
 8008ba4:	40015000 	.word	0x40015000
 8008ba8:	40014000 	.word	0x40014000
 8008bac:	40014400 	.word	0x40014400
 8008bb0:	40014800 	.word	0x40014800

08008bb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008be2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	021b      	lsls	r3, r3, #8
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	031b      	lsls	r3, r3, #12
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a2c      	ldr	r2, [pc, #176]	@ (8008cc4 <TIM_OC4_SetConfig+0x110>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d007      	beq.n	8008c28 <TIM_OC4_SetConfig+0x74>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a2b      	ldr	r2, [pc, #172]	@ (8008cc8 <TIM_OC4_SetConfig+0x114>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d003      	beq.n	8008c28 <TIM_OC4_SetConfig+0x74>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a2a      	ldr	r2, [pc, #168]	@ (8008ccc <TIM_OC4_SetConfig+0x118>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d10d      	bne.n	8008c44 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	031b      	lsls	r3, r3, #12
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a1f      	ldr	r2, [pc, #124]	@ (8008cc4 <TIM_OC4_SetConfig+0x110>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d013      	beq.n	8008c74 <TIM_OC4_SetConfig+0xc0>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8008cc8 <TIM_OC4_SetConfig+0x114>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d00f      	beq.n	8008c74 <TIM_OC4_SetConfig+0xc0>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a1e      	ldr	r2, [pc, #120]	@ (8008cd0 <TIM_OC4_SetConfig+0x11c>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d00b      	beq.n	8008c74 <TIM_OC4_SetConfig+0xc0>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8008cd4 <TIM_OC4_SetConfig+0x120>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d007      	beq.n	8008c74 <TIM_OC4_SetConfig+0xc0>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a1c      	ldr	r2, [pc, #112]	@ (8008cd8 <TIM_OC4_SetConfig+0x124>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d003      	beq.n	8008c74 <TIM_OC4_SetConfig+0xc0>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a17      	ldr	r2, [pc, #92]	@ (8008ccc <TIM_OC4_SetConfig+0x118>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d113      	bne.n	8008c9c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c7a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c82:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	019b      	lsls	r3, r3, #6
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	019b      	lsls	r3, r3, #6
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	697a      	ldr	r2, [r7, #20]
 8008cb4:	621a      	str	r2, [r3, #32]
}
 8008cb6:	bf00      	nop
 8008cb8:	371c      	adds	r7, #28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	40012c00 	.word	0x40012c00
 8008cc8:	40013400 	.word	0x40013400
 8008ccc:	40015000 	.word	0x40015000
 8008cd0:	40014000 	.word	0x40014000
 8008cd4:	40014400 	.word	0x40014400
 8008cd8:	40014800 	.word	0x40014800

08008cdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a1b      	ldr	r3, [r3, #32]
 8008cf0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008d20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	041b      	lsls	r3, r3, #16
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a19      	ldr	r2, [pc, #100]	@ (8008d98 <TIM_OC5_SetConfig+0xbc>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d013      	beq.n	8008d5e <TIM_OC5_SetConfig+0x82>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a18      	ldr	r2, [pc, #96]	@ (8008d9c <TIM_OC5_SetConfig+0xc0>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d00f      	beq.n	8008d5e <TIM_OC5_SetConfig+0x82>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a17      	ldr	r2, [pc, #92]	@ (8008da0 <TIM_OC5_SetConfig+0xc4>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d00b      	beq.n	8008d5e <TIM_OC5_SetConfig+0x82>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a16      	ldr	r2, [pc, #88]	@ (8008da4 <TIM_OC5_SetConfig+0xc8>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d007      	beq.n	8008d5e <TIM_OC5_SetConfig+0x82>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a15      	ldr	r2, [pc, #84]	@ (8008da8 <TIM_OC5_SetConfig+0xcc>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d003      	beq.n	8008d5e <TIM_OC5_SetConfig+0x82>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a14      	ldr	r2, [pc, #80]	@ (8008dac <TIM_OC5_SetConfig+0xd0>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d109      	bne.n	8008d72 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	695b      	ldr	r3, [r3, #20]
 8008d6a:	021b      	lsls	r3, r3, #8
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	621a      	str	r2, [r3, #32]
}
 8008d8c:	bf00      	nop
 8008d8e:	371c      	adds	r7, #28
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	40012c00 	.word	0x40012c00
 8008d9c:	40013400 	.word	0x40013400
 8008da0:	40014000 	.word	0x40014000
 8008da4:	40014400 	.word	0x40014400
 8008da8:	40014800 	.word	0x40014800
 8008dac:	40015000 	.word	0x40015000

08008db0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a1b      	ldr	r3, [r3, #32]
 8008dc4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008dde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	021b      	lsls	r3, r3, #8
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008df6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	051b      	lsls	r3, r3, #20
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a1a      	ldr	r2, [pc, #104]	@ (8008e70 <TIM_OC6_SetConfig+0xc0>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d013      	beq.n	8008e34 <TIM_OC6_SetConfig+0x84>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a19      	ldr	r2, [pc, #100]	@ (8008e74 <TIM_OC6_SetConfig+0xc4>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d00f      	beq.n	8008e34 <TIM_OC6_SetConfig+0x84>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a18      	ldr	r2, [pc, #96]	@ (8008e78 <TIM_OC6_SetConfig+0xc8>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d00b      	beq.n	8008e34 <TIM_OC6_SetConfig+0x84>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a17      	ldr	r2, [pc, #92]	@ (8008e7c <TIM_OC6_SetConfig+0xcc>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d007      	beq.n	8008e34 <TIM_OC6_SetConfig+0x84>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a16      	ldr	r2, [pc, #88]	@ (8008e80 <TIM_OC6_SetConfig+0xd0>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d003      	beq.n	8008e34 <TIM_OC6_SetConfig+0x84>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a15      	ldr	r2, [pc, #84]	@ (8008e84 <TIM_OC6_SetConfig+0xd4>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d109      	bne.n	8008e48 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	029b      	lsls	r3, r3, #10
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	685a      	ldr	r2, [r3, #4]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	621a      	str	r2, [r3, #32]
}
 8008e62:	bf00      	nop
 8008e64:	371c      	adds	r7, #28
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	40012c00 	.word	0x40012c00
 8008e74:	40013400 	.word	0x40013400
 8008e78:	40014000 	.word	0x40014000
 8008e7c:	40014400 	.word	0x40014400
 8008e80:	40014800 	.word	0x40014800
 8008e84:	40015000 	.word	0x40015000

08008e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b087      	sub	sp, #28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6a1b      	ldr	r3, [r3, #32]
 8008e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	f023 0201 	bic.w	r2, r3, #1
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	011b      	lsls	r3, r3, #4
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f023 030a 	bic.w	r3, r3, #10
 8008ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	621a      	str	r2, [r3, #32]
}
 8008eda:	bf00      	nop
 8008edc:	371c      	adds	r7, #28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b087      	sub	sp, #28
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	f023 0210 	bic.w	r2, r3, #16
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	031b      	lsls	r3, r3, #12
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	011b      	lsls	r3, r3, #4
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	621a      	str	r2, [r3, #32]
}
 8008f3a:	bf00      	nop
 8008f3c:	371c      	adds	r7, #28
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	f043 0307 	orr.w	r3, r3, #7
 8008f6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	609a      	str	r2, [r3, #8]
}
 8008f74:	bf00      	nop
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b087      	sub	sp, #28
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	021a      	lsls	r2, r3, #8
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	697a      	ldr	r2, [r7, #20]
 8008fb2:	609a      	str	r2, [r3, #8]
}
 8008fb4:	bf00      	nop
 8008fb6:	371c      	adds	r7, #28
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	f003 031f 	and.w	r3, r3, #31
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6a1a      	ldr	r2, [r3, #32]
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	43db      	mvns	r3, r3
 8008fe2:	401a      	ands	r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6a1a      	ldr	r2, [r3, #32]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	f003 031f 	and.w	r3, r3, #31
 8008ff2:	6879      	ldr	r1, [r7, #4]
 8008ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	621a      	str	r2, [r3, #32]
}
 8008ffe:	bf00      	nop
 8009000:	371c      	adds	r7, #28
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
	...

0800900c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a26      	ldr	r2, [pc, #152]	@ (80090b0 <TIM_ResetCallback+0xa4>)
 8009018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a25      	ldr	r2, [pc, #148]	@ (80090b4 <TIM_ResetCallback+0xa8>)
 8009020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a24      	ldr	r2, [pc, #144]	@ (80090b8 <TIM_ResetCallback+0xac>)
 8009028:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a23      	ldr	r2, [pc, #140]	@ (80090bc <TIM_ResetCallback+0xb0>)
 8009030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a22      	ldr	r2, [pc, #136]	@ (80090c0 <TIM_ResetCallback+0xb4>)
 8009038:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a21      	ldr	r2, [pc, #132]	@ (80090c4 <TIM_ResetCallback+0xb8>)
 8009040:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a20      	ldr	r2, [pc, #128]	@ (80090c8 <TIM_ResetCallback+0xbc>)
 8009048:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a1f      	ldr	r2, [pc, #124]	@ (80090cc <TIM_ResetCallback+0xc0>)
 8009050:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a1e      	ldr	r2, [pc, #120]	@ (80090d0 <TIM_ResetCallback+0xc4>)
 8009058:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a1d      	ldr	r2, [pc, #116]	@ (80090d4 <TIM_ResetCallback+0xc8>)
 8009060:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a1c      	ldr	r2, [pc, #112]	@ (80090d8 <TIM_ResetCallback+0xcc>)
 8009068:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a1b      	ldr	r2, [pc, #108]	@ (80090dc <TIM_ResetCallback+0xd0>)
 8009070:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a1a      	ldr	r2, [pc, #104]	@ (80090e0 <TIM_ResetCallback+0xd4>)
 8009078:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a19      	ldr	r2, [pc, #100]	@ (80090e4 <TIM_ResetCallback+0xd8>)
 8009080:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a18      	ldr	r2, [pc, #96]	@ (80090e8 <TIM_ResetCallback+0xdc>)
 8009088:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a17      	ldr	r2, [pc, #92]	@ (80090ec <TIM_ResetCallback+0xe0>)
 8009090:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a16      	ldr	r2, [pc, #88]	@ (80090f0 <TIM_ResetCallback+0xe4>)
 8009098:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a15      	ldr	r2, [pc, #84]	@ (80090f4 <TIM_ResetCallback+0xe8>)
 80090a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80090a4:	bf00      	nop
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	080023e1 	.word	0x080023e1
 80090b4:	08008359 	.word	0x08008359
 80090b8:	080083d1 	.word	0x080083d1
 80090bc:	080083e5 	.word	0x080083e5
 80090c0:	08008381 	.word	0x08008381
 80090c4:	08008395 	.word	0x08008395
 80090c8:	0800836d 	.word	0x0800836d
 80090cc:	080083a9 	.word	0x080083a9
 80090d0:	080083bd 	.word	0x080083bd
 80090d4:	080083f9 	.word	0x080083f9
 80090d8:	0800934d 	.word	0x0800934d
 80090dc:	08009361 	.word	0x08009361
 80090e0:	08009375 	.word	0x08009375
 80090e4:	08009389 	.word	0x08009389
 80090e8:	0800939d 	.word	0x0800939d
 80090ec:	080093b1 	.word	0x080093b1
 80090f0:	080093c5 	.word	0x080093c5
 80090f4:	080093d9 	.word	0x080093d9

080090f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009108:	2b01      	cmp	r3, #1
 800910a:	d101      	bne.n	8009110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800910c:	2302      	movs	r3, #2
 800910e:	e074      	b.n	80091fa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2202      	movs	r2, #2
 800911c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a34      	ldr	r2, [pc, #208]	@ (8009208 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d009      	beq.n	800914e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a33      	ldr	r2, [pc, #204]	@ (800920c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d004      	beq.n	800914e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a31      	ldr	r2, [pc, #196]	@ (8009210 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d108      	bne.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009154:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	4313      	orrs	r3, r2
 800915e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800916a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	4313      	orrs	r3, r2
 8009174:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a21      	ldr	r2, [pc, #132]	@ (8009208 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d022      	beq.n	80091ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009190:	d01d      	beq.n	80091ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a1f      	ldr	r2, [pc, #124]	@ (8009214 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d018      	beq.n	80091ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a1d      	ldr	r2, [pc, #116]	@ (8009218 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d013      	beq.n	80091ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a1c      	ldr	r2, [pc, #112]	@ (800921c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d00e      	beq.n	80091ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a15      	ldr	r2, [pc, #84]	@ (800920c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d009      	beq.n	80091ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a18      	ldr	r2, [pc, #96]	@ (8009220 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d004      	beq.n	80091ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a11      	ldr	r2, [pc, #68]	@ (8009210 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d10c      	bne.n	80091e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	4313      	orrs	r3, r2
 80091de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68ba      	ldr	r2, [r7, #8]
 80091e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	40012c00 	.word	0x40012c00
 800920c:	40013400 	.word	0x40013400
 8009210:	40015000 	.word	0x40015000
 8009214:	40000400 	.word	0x40000400
 8009218:	40000800 	.word	0x40000800
 800921c:	40000c00 	.word	0x40000c00
 8009220:	40014000 	.word	0x40014000

08009224 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800922e:	2300      	movs	r3, #0
 8009230:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009238:	2b01      	cmp	r3, #1
 800923a:	d101      	bne.n	8009240 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800923c:	2302      	movs	r3, #2
 800923e:	e078      	b.n	8009332 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	4313      	orrs	r3, r2
 8009254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	4313      	orrs	r3, r2
 8009262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	4313      	orrs	r3, r2
 8009270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4313      	orrs	r3, r2
 800927e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	4313      	orrs	r3, r2
 800928c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	695b      	ldr	r3, [r3, #20]
 8009298:	4313      	orrs	r3, r2
 800929a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092a6:	4313      	orrs	r3, r2
 80092a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	699b      	ldr	r3, [r3, #24]
 80092b4:	041b      	lsls	r3, r3, #16
 80092b6:	4313      	orrs	r3, r2
 80092b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	69db      	ldr	r3, [r3, #28]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a1c      	ldr	r2, [pc, #112]	@ (8009340 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d009      	beq.n	80092e6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a1b      	ldr	r2, [pc, #108]	@ (8009344 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d004      	beq.n	80092e6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a19      	ldr	r2, [pc, #100]	@ (8009348 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d11c      	bne.n	8009320 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f0:	051b      	lsls	r3, r3, #20
 80092f2:	4313      	orrs	r3, r2
 80092f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	6a1b      	ldr	r3, [r3, #32]
 8009300:	4313      	orrs	r3, r2
 8009302:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800930e:	4313      	orrs	r3, r2
 8009310:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931c:	4313      	orrs	r3, r2
 800931e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	40012c00 	.word	0x40012c00
 8009344:	40013400 	.word	0x40013400
 8009348:	40015000 	.word	0x40015000

0800934c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009368:	bf00      	nop
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e050      	b.n	80094a0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009404:	2b00      	cmp	r3, #0
 8009406:	d114      	bne.n	8009432 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fd5b 	bl	8009ecc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800941c:	2b00      	cmp	r3, #0
 800941e:	d103      	bne.n	8009428 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a21      	ldr	r2, [pc, #132]	@ (80094a8 <HAL_UART_Init+0xbc>)
 8009424:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2224      	movs	r2, #36	@ 0x24
 8009436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f022 0201 	bic.w	r2, r2, #1
 8009448:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f001 f888 	bl	800a568 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fd89 	bl	8009f70 <UART_SetConfig>
 800945e:	4603      	mov	r3, r0
 8009460:	2b01      	cmp	r3, #1
 8009462:	d101      	bne.n	8009468 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e01b      	b.n	80094a0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	689a      	ldr	r2, [r3, #8]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009486:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f042 0201 	orr.w	r2, r2, #1
 8009496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f001 f907 	bl	800a6ac <UART_CheckIdleState>
 800949e:	4603      	mov	r3, r0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3708      	adds	r7, #8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	080038c1 	.word	0x080038c1

080094ac <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	460b      	mov	r3, r1
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d109      	bne.n	80094d8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	e09c      	b.n	8009612 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094de:	2b20      	cmp	r3, #32
 80094e0:	d16c      	bne.n	80095bc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80094e2:	7afb      	ldrb	r3, [r7, #11]
 80094e4:	2b0c      	cmp	r3, #12
 80094e6:	d85e      	bhi.n	80095a6 <HAL_UART_RegisterCallback+0xfa>
 80094e8:	a201      	add	r2, pc, #4	@ (adr r2, 80094f0 <HAL_UART_RegisterCallback+0x44>)
 80094ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ee:	bf00      	nop
 80094f0:	08009525 	.word	0x08009525
 80094f4:	0800952f 	.word	0x0800952f
 80094f8:	08009539 	.word	0x08009539
 80094fc:	08009543 	.word	0x08009543
 8009500:	0800954d 	.word	0x0800954d
 8009504:	08009557 	.word	0x08009557
 8009508:	08009561 	.word	0x08009561
 800950c:	0800956b 	.word	0x0800956b
 8009510:	08009575 	.word	0x08009575
 8009514:	0800957f 	.word	0x0800957f
 8009518:	08009589 	.word	0x08009589
 800951c:	08009593 	.word	0x08009593
 8009520:	0800959d 	.word	0x0800959d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800952c:	e070      	b.n	8009610 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009536:	e06b      	b.n	8009610 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009540:	e066      	b.n	8009610 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800954a:	e061      	b.n	8009610 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009554:	e05c      	b.n	8009610 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800955e:	e057      	b.n	8009610 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009568:	e052      	b.n	8009610 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009572:	e04d      	b.n	8009610 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800957c:	e048      	b.n	8009610 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009586:	e043      	b.n	8009610 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009590:	e03e      	b.n	8009610 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800959a:	e039      	b.n	8009610 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80095a4:	e034      	b.n	8009610 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	75fb      	strb	r3, [r7, #23]
        break;
 80095ba:	e029      	b.n	8009610 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d11a      	bne.n	80095fc <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80095c6:	7afb      	ldrb	r3, [r7, #11]
 80095c8:	2b0b      	cmp	r3, #11
 80095ca:	d002      	beq.n	80095d2 <HAL_UART_RegisterCallback+0x126>
 80095cc:	2b0c      	cmp	r3, #12
 80095ce:	d005      	beq.n	80095dc <HAL_UART_RegisterCallback+0x130>
 80095d0:	e009      	b.n	80095e6 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80095da:	e019      	b.n	8009610 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80095e4:	e014      	b.n	8009610 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	75fb      	strb	r3, [r7, #23]
        break;
 80095fa:	e009      	b.n	8009610 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009602:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009610:	7dfb      	ldrb	r3, [r7, #23]
}
 8009612:	4618      	mov	r0, r3
 8009614:	371c      	adds	r7, #28
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop

08009620 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b08a      	sub	sp, #40	@ 0x28
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	4613      	mov	r3, r2
 800962c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009634:	2b20      	cmp	r3, #32
 8009636:	d137      	bne.n	80096a8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <HAL_UART_Receive_DMA+0x24>
 800963e:	88fb      	ldrh	r3, [r7, #6]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d101      	bne.n	8009648 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	e030      	b.n	80096aa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a18      	ldr	r2, [pc, #96]	@ (80096b4 <HAL_UART_Receive_DMA+0x94>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d01f      	beq.n	8009698 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d018      	beq.n	8009698 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	e853 3f00 	ldrex	r3, [r3]
 8009672:	613b      	str	r3, [r7, #16]
   return(result);
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800967a:	627b      	str	r3, [r7, #36]	@ 0x24
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	461a      	mov	r2, r3
 8009682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009684:	623b      	str	r3, [r7, #32]
 8009686:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009688:	69f9      	ldr	r1, [r7, #28]
 800968a:	6a3a      	ldr	r2, [r7, #32]
 800968c:	e841 2300 	strex	r3, r2, [r1]
 8009690:	61bb      	str	r3, [r7, #24]
   return(result);
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1e6      	bne.n	8009666 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009698:	88fb      	ldrh	r3, [r7, #6]
 800969a:	461a      	mov	r2, r3
 800969c:	68b9      	ldr	r1, [r7, #8]
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f001 f91c 	bl	800a8dc <UART_Start_Receive_DMA>
 80096a4:	4603      	mov	r3, r0
 80096a6:	e000      	b.n	80096aa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80096a8:	2302      	movs	r3, #2
  }
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3728      	adds	r7, #40	@ 0x28
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	40008000 	.word	0x40008000

080096b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b0ba      	sub	sp, #232	@ 0xe8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80096de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80096e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80096e6:	4013      	ands	r3, r2
 80096e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80096ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d11b      	bne.n	800972c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096f8:	f003 0320 	and.w	r3, r3, #32
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d015      	beq.n	800972c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009704:	f003 0320 	and.w	r3, r3, #32
 8009708:	2b00      	cmp	r3, #0
 800970a:	d105      	bne.n	8009718 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800970c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009714:	2b00      	cmp	r3, #0
 8009716:	d009      	beq.n	800972c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800971c:	2b00      	cmp	r3, #0
 800971e:	f000 8312 	beq.w	8009d46 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	4798      	blx	r3
      }
      return;
 800972a:	e30c      	b.n	8009d46 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800972c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 8129 	beq.w	8009988 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009736:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800973a:	4b90      	ldr	r3, [pc, #576]	@ (800997c <HAL_UART_IRQHandler+0x2c4>)
 800973c:	4013      	ands	r3, r2
 800973e:	2b00      	cmp	r3, #0
 8009740:	d106      	bne.n	8009750 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009742:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009746:	4b8e      	ldr	r3, [pc, #568]	@ (8009980 <HAL_UART_IRQHandler+0x2c8>)
 8009748:	4013      	ands	r3, r2
 800974a:	2b00      	cmp	r3, #0
 800974c:	f000 811c 	beq.w	8009988 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009754:	f003 0301 	and.w	r3, r3, #1
 8009758:	2b00      	cmp	r3, #0
 800975a:	d011      	beq.n	8009780 <HAL_UART_IRQHandler+0xc8>
 800975c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00b      	beq.n	8009780 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2201      	movs	r2, #1
 800976e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009776:	f043 0201 	orr.w	r2, r3, #1
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009784:	f003 0302 	and.w	r3, r3, #2
 8009788:	2b00      	cmp	r3, #0
 800978a:	d011      	beq.n	80097b0 <HAL_UART_IRQHandler+0xf8>
 800978c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009790:	f003 0301 	and.w	r3, r3, #1
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00b      	beq.n	80097b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2202      	movs	r2, #2
 800979e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097a6:	f043 0204 	orr.w	r2, r3, #4
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097b4:	f003 0304 	and.w	r3, r3, #4
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d011      	beq.n	80097e0 <HAL_UART_IRQHandler+0x128>
 80097bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00b      	beq.n	80097e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2204      	movs	r2, #4
 80097ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097d6:	f043 0202 	orr.w	r2, r3, #2
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80097e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097e4:	f003 0308 	and.w	r3, r3, #8
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d017      	beq.n	800981c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097f0:	f003 0320 	and.w	r3, r3, #32
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d105      	bne.n	8009804 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80097f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80097fc:	4b5f      	ldr	r3, [pc, #380]	@ (800997c <HAL_UART_IRQHandler+0x2c4>)
 80097fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00b      	beq.n	800981c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2208      	movs	r2, #8
 800980a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009812:	f043 0208 	orr.w	r2, r3, #8
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800981c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009824:	2b00      	cmp	r3, #0
 8009826:	d012      	beq.n	800984e <HAL_UART_IRQHandler+0x196>
 8009828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800982c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00c      	beq.n	800984e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800983c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009844:	f043 0220 	orr.w	r2, r3, #32
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 8278 	beq.w	8009d4a <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800985a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800985e:	f003 0320 	and.w	r3, r3, #32
 8009862:	2b00      	cmp	r3, #0
 8009864:	d013      	beq.n	800988e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b00      	cmp	r3, #0
 8009870:	d105      	bne.n	800987e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d007      	beq.n	800988e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009882:	2b00      	cmp	r3, #0
 8009884:	d003      	beq.n	800988e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009894:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098a2:	2b40      	cmp	r3, #64	@ 0x40
 80098a4:	d005      	beq.n	80098b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80098aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d058      	beq.n	8009964 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f001 f8f9 	bl	800aaaa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c2:	2b40      	cmp	r3, #64	@ 0x40
 80098c4:	d148      	bne.n	8009958 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3308      	adds	r3, #8
 80098cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80098d4:	e853 3f00 	ldrex	r3, [r3]
 80098d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80098dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3308      	adds	r3, #8
 80098ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80098f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80098f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80098fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009902:	e841 2300 	strex	r3, r2, [r1]
 8009906:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800990a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1d9      	bne.n	80098c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009918:	2b00      	cmp	r3, #0
 800991a:	d017      	beq.n	800994c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009922:	4a18      	ldr	r2, [pc, #96]	@ (8009984 <HAL_UART_IRQHandler+0x2cc>)
 8009924:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800992c:	4618      	mov	r0, r3
 800992e:	f7fc f8c5 	bl	8005abc <HAL_DMA_Abort_IT>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d01f      	beq.n	8009978 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800993e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009946:	4610      	mov	r0, r2
 8009948:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800994a:	e015      	b.n	8009978 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009956:	e00f      	b.n	8009978 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009962:	e009      	b.n	8009978 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009976:	e1e8      	b.n	8009d4a <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009978:	bf00      	nop
    return;
 800997a:	e1e6      	b.n	8009d4a <HAL_UART_IRQHandler+0x692>
 800997c:	10000001 	.word	0x10000001
 8009980:	04000120 	.word	0x04000120
 8009984:	0800ad75 	.word	0x0800ad75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800998c:	2b01      	cmp	r3, #1
 800998e:	f040 8176 	bne.w	8009c7e <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009996:	f003 0310 	and.w	r3, r3, #16
 800999a:	2b00      	cmp	r3, #0
 800999c:	f000 816f 	beq.w	8009c7e <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80099a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099a4:	f003 0310 	and.w	r3, r3, #16
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f000 8168 	beq.w	8009c7e <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2210      	movs	r2, #16
 80099b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c0:	2b40      	cmp	r3, #64	@ 0x40
 80099c2:	f040 80dc 	bne.w	8009b7e <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80099d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 80b1 	beq.w	8009b40 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099e8:	429a      	cmp	r2, r3
 80099ea:	f080 80a9 	bcs.w	8009b40 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 0320 	and.w	r3, r3, #32
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	f040 8087 	bne.w	8009b1a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a18:	e853 3f00 	ldrex	r3, [r3]
 8009a1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	461a      	mov	r2, r3
 8009a32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009a36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a3a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009a42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009a46:	e841 2300 	strex	r3, r2, [r1]
 8009a4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1da      	bne.n	8009a0c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3308      	adds	r3, #8
 8009a5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a60:	e853 3f00 	ldrex	r3, [r3]
 8009a64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009a66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a68:	f023 0301 	bic.w	r3, r3, #1
 8009a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3308      	adds	r3, #8
 8009a76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009a7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009a7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009a82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e1      	bne.n	8009a56 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3308      	adds	r3, #8
 8009a98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009aa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009aa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009ab6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009abc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009abe:	e841 2300 	strex	r3, r2, [r1]
 8009ac2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009ac4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1e3      	bne.n	8009a92 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2220      	movs	r2, #32
 8009ace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ae0:	e853 3f00 	ldrex	r3, [r3]
 8009ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ae8:	f023 0310 	bic.w	r3, r3, #16
 8009aec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	461a      	mov	r2, r3
 8009af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009afa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009afc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b02:	e841 2300 	strex	r3, r2, [r1]
 8009b06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1e4      	bne.n	8009ad8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fb ff78 	bl	8005a0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2202      	movs	r2, #2
 8009b1e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009b32:	b292      	uxth	r2, r2
 8009b34:	1a8a      	subs	r2, r1, r2
 8009b36:	b292      	uxth	r2, r2
 8009b38:	4611      	mov	r1, r2
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009b3e:	e106      	b.n	8009d4e <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	f040 80ff 	bne.w	8009d4e <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 0320 	and.w	r3, r3, #32
 8009b5e:	2b20      	cmp	r3, #32
 8009b60:	f040 80f5 	bne.w	8009d4e <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2202      	movs	r2, #2
 8009b68:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009b76:	4611      	mov	r1, r2
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	4798      	blx	r3
      return;
 8009b7c:	e0e7      	b.n	8009d4e <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f000 80d9 	beq.w	8009d52 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8009ba0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f000 80d4 	beq.w	8009d52 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb2:	e853 3f00 	ldrex	r3, [r3]
 8009bb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009bcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009bd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009bd4:	e841 2300 	strex	r3, r2, [r1]
 8009bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1e4      	bne.n	8009baa <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3308      	adds	r3, #8
 8009be6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bea:	e853 3f00 	ldrex	r3, [r3]
 8009bee:	623b      	str	r3, [r7, #32]
   return(result);
 8009bf0:	6a3b      	ldr	r3, [r7, #32]
 8009bf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009bf6:	f023 0301 	bic.w	r3, r3, #1
 8009bfa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	3308      	adds	r3, #8
 8009c04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009c08:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c10:	e841 2300 	strex	r3, r2, [r1]
 8009c14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1e1      	bne.n	8009be0 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2220      	movs	r2, #32
 8009c20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	e853 3f00 	ldrex	r3, [r3]
 8009c3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f023 0310 	bic.w	r3, r3, #16
 8009c44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009c52:	61fb      	str	r3, [r7, #28]
 8009c54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c56:	69b9      	ldr	r1, [r7, #24]
 8009c58:	69fa      	ldr	r2, [r7, #28]
 8009c5a:	e841 2300 	strex	r3, r2, [r1]
 8009c5e:	617b      	str	r3, [r7, #20]
   return(result);
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1e4      	bne.n	8009c30 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2202      	movs	r2, #2
 8009c6a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009c72:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009c76:	4611      	mov	r1, r2
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c7c:	e069      	b.n	8009d52 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d010      	beq.n	8009cac <HAL_UART_IRQHandler+0x5f4>
 8009c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00a      	beq.n	8009cac <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009c9e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009caa:	e055      	b.n	8009d58 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d014      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d105      	bne.n	8009cd0 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d008      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d03e      	beq.n	8009d56 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	4798      	blx	r3
    }
    return;
 8009ce0:	e039      	b.n	8009d56 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d009      	beq.n	8009d02 <HAL_UART_IRQHandler+0x64a>
 8009cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d003      	beq.n	8009d02 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f001 f84e 	bl	800ad9c <UART_EndTransmit_IT>
    return;
 8009d00:	e02a      	b.n	8009d58 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00b      	beq.n	8009d26 <HAL_UART_IRQHandler+0x66e>
 8009d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d12:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d005      	beq.n	8009d26 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d24:	e018      	b.n	8009d58 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d012      	beq.n	8009d58 <HAL_UART_IRQHandler+0x6a0>
 8009d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	da0e      	bge.n	8009d58 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d44:	e008      	b.n	8009d58 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009d46:	bf00      	nop
 8009d48:	e006      	b.n	8009d58 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009d4a:	bf00      	nop
 8009d4c:	e004      	b.n	8009d58 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009d4e:	bf00      	nop
 8009d50:	e002      	b.n	8009d58 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009d52:	bf00      	nop
 8009d54:	e000      	b.n	8009d58 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009d56:	bf00      	nop
  }
}
 8009d58:	37e8      	adds	r7, #232	@ 0xe8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop

08009d60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a09      	ldr	r2, [pc, #36]	@ (8009e38 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d009      	beq.n	8009e2c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	683a      	ldr	r2, [r7, #0]
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	615a      	str	r2, [r3, #20]
  }
}
 8009e2c:	bf00      	nop
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr
 8009e38:	40008000 	.word	0x40008000

08009e3c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a18      	ldr	r2, [pc, #96]	@ (8009eac <HAL_UART_EnableReceiverTimeout+0x70>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d027      	beq.n	8009e9e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e54:	2b20      	cmp	r3, #32
 8009e56:	d120      	bne.n	8009e9a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d101      	bne.n	8009e66 <HAL_UART_EnableReceiverTimeout+0x2a>
 8009e62:	2302      	movs	r3, #2
 8009e64:	e01c      	b.n	8009ea0 <HAL_UART_EnableReceiverTimeout+0x64>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2224      	movs	r2, #36	@ 0x24
 8009e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009e84:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2220      	movs	r2, #32
 8009e8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	e002      	b.n	8009ea0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	e000      	b.n	8009ea0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
  }
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	40008000 	.word	0x40008000

08009eb0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	370c      	adds	r7, #12
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
	...

08009ecc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8009f40 <UART_InitCallbacksToDefault+0x74>)
 8009ed8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a19      	ldr	r2, [pc, #100]	@ (8009f44 <UART_InitCallbacksToDefault+0x78>)
 8009ee0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a18      	ldr	r2, [pc, #96]	@ (8009f48 <UART_InitCallbacksToDefault+0x7c>)
 8009ee8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a17      	ldr	r2, [pc, #92]	@ (8009f4c <UART_InitCallbacksToDefault+0x80>)
 8009ef0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a16      	ldr	r2, [pc, #88]	@ (8009f50 <UART_InitCallbacksToDefault+0x84>)
 8009ef8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a15      	ldr	r2, [pc, #84]	@ (8009f54 <UART_InitCallbacksToDefault+0x88>)
 8009f00:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a14      	ldr	r2, [pc, #80]	@ (8009f58 <UART_InitCallbacksToDefault+0x8c>)
 8009f08:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a13      	ldr	r2, [pc, #76]	@ (8009f5c <UART_InitCallbacksToDefault+0x90>)
 8009f10:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a12      	ldr	r2, [pc, #72]	@ (8009f60 <UART_InitCallbacksToDefault+0x94>)
 8009f18:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a11      	ldr	r2, [pc, #68]	@ (8009f64 <UART_InitCallbacksToDefault+0x98>)
 8009f20:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4a10      	ldr	r2, [pc, #64]	@ (8009f68 <UART_InitCallbacksToDefault+0x9c>)
 8009f28:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a0f      	ldr	r2, [pc, #60]	@ (8009f6c <UART_InitCallbacksToDefault+0xa0>)
 8009f30:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	08009d75 	.word	0x08009d75
 8009f44:	08009d61 	.word	0x08009d61
 8009f48:	08009d89 	.word	0x08009d89
 8009f4c:	080023cd 	.word	0x080023cd
 8009f50:	08009d9d 	.word	0x08009d9d
 8009f54:	08009db1 	.word	0x08009db1
 8009f58:	08009dc5 	.word	0x08009dc5
 8009f5c:	08009dd9 	.word	0x08009dd9
 8009f60:	0800adf7 	.word	0x0800adf7
 8009f64:	0800ae0b 	.word	0x0800ae0b
 8009f68:	0800ae1f 	.word	0x0800ae1f
 8009f6c:	08009ded 	.word	0x08009ded

08009f70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f74:	b08c      	sub	sp, #48	@ 0x30
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	689a      	ldr	r2, [r3, #8]
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	431a      	orrs	r2, r3
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	431a      	orrs	r2, r3
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	69db      	ldr	r3, [r3, #28]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	4baa      	ldr	r3, [pc, #680]	@ (800a248 <UART_SetConfig+0x2d8>)
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	6812      	ldr	r2, [r2, #0]
 8009fa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fa8:	430b      	orrs	r3, r1
 8009faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	68da      	ldr	r2, [r3, #12]
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	699b      	ldr	r3, [r3, #24]
 8009fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a9f      	ldr	r2, [pc, #636]	@ (800a24c <UART_SetConfig+0x2dc>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d004      	beq.n	8009fdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	6a1b      	ldr	r3, [r3, #32]
 8009fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009fe6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009fea:	697a      	ldr	r2, [r7, #20]
 8009fec:	6812      	ldr	r2, [r2, #0]
 8009fee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ff0:	430b      	orrs	r3, r1
 8009ff2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffa:	f023 010f 	bic.w	r1, r3, #15
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	430a      	orrs	r2, r1
 800a008:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a90      	ldr	r2, [pc, #576]	@ (800a250 <UART_SetConfig+0x2e0>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d125      	bne.n	800a060 <UART_SetConfig+0xf0>
 800a014:	4b8f      	ldr	r3, [pc, #572]	@ (800a254 <UART_SetConfig+0x2e4>)
 800a016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a01a:	f003 0303 	and.w	r3, r3, #3
 800a01e:	2b03      	cmp	r3, #3
 800a020:	d81a      	bhi.n	800a058 <UART_SetConfig+0xe8>
 800a022:	a201      	add	r2, pc, #4	@ (adr r2, 800a028 <UART_SetConfig+0xb8>)
 800a024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a028:	0800a039 	.word	0x0800a039
 800a02c:	0800a049 	.word	0x0800a049
 800a030:	0800a041 	.word	0x0800a041
 800a034:	0800a051 	.word	0x0800a051
 800a038:	2301      	movs	r3, #1
 800a03a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a03e:	e116      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a040:	2302      	movs	r3, #2
 800a042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a046:	e112      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a048:	2304      	movs	r3, #4
 800a04a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a04e:	e10e      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a050:	2308      	movs	r3, #8
 800a052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a056:	e10a      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a058:	2310      	movs	r3, #16
 800a05a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a05e:	e106      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a7c      	ldr	r2, [pc, #496]	@ (800a258 <UART_SetConfig+0x2e8>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d138      	bne.n	800a0dc <UART_SetConfig+0x16c>
 800a06a:	4b7a      	ldr	r3, [pc, #488]	@ (800a254 <UART_SetConfig+0x2e4>)
 800a06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a070:	f003 030c 	and.w	r3, r3, #12
 800a074:	2b0c      	cmp	r3, #12
 800a076:	d82d      	bhi.n	800a0d4 <UART_SetConfig+0x164>
 800a078:	a201      	add	r2, pc, #4	@ (adr r2, 800a080 <UART_SetConfig+0x110>)
 800a07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07e:	bf00      	nop
 800a080:	0800a0b5 	.word	0x0800a0b5
 800a084:	0800a0d5 	.word	0x0800a0d5
 800a088:	0800a0d5 	.word	0x0800a0d5
 800a08c:	0800a0d5 	.word	0x0800a0d5
 800a090:	0800a0c5 	.word	0x0800a0c5
 800a094:	0800a0d5 	.word	0x0800a0d5
 800a098:	0800a0d5 	.word	0x0800a0d5
 800a09c:	0800a0d5 	.word	0x0800a0d5
 800a0a0:	0800a0bd 	.word	0x0800a0bd
 800a0a4:	0800a0d5 	.word	0x0800a0d5
 800a0a8:	0800a0d5 	.word	0x0800a0d5
 800a0ac:	0800a0d5 	.word	0x0800a0d5
 800a0b0:	0800a0cd 	.word	0x0800a0cd
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ba:	e0d8      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a0bc:	2302      	movs	r3, #2
 800a0be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0c2:	e0d4      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a0c4:	2304      	movs	r3, #4
 800a0c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ca:	e0d0      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a0cc:	2308      	movs	r3, #8
 800a0ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0d2:	e0cc      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a0d4:	2310      	movs	r3, #16
 800a0d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0da:	e0c8      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a5e      	ldr	r2, [pc, #376]	@ (800a25c <UART_SetConfig+0x2ec>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d125      	bne.n	800a132 <UART_SetConfig+0x1c2>
 800a0e6:	4b5b      	ldr	r3, [pc, #364]	@ (800a254 <UART_SetConfig+0x2e4>)
 800a0e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a0f0:	2b30      	cmp	r3, #48	@ 0x30
 800a0f2:	d016      	beq.n	800a122 <UART_SetConfig+0x1b2>
 800a0f4:	2b30      	cmp	r3, #48	@ 0x30
 800a0f6:	d818      	bhi.n	800a12a <UART_SetConfig+0x1ba>
 800a0f8:	2b20      	cmp	r3, #32
 800a0fa:	d00a      	beq.n	800a112 <UART_SetConfig+0x1a2>
 800a0fc:	2b20      	cmp	r3, #32
 800a0fe:	d814      	bhi.n	800a12a <UART_SetConfig+0x1ba>
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <UART_SetConfig+0x19a>
 800a104:	2b10      	cmp	r3, #16
 800a106:	d008      	beq.n	800a11a <UART_SetConfig+0x1aa>
 800a108:	e00f      	b.n	800a12a <UART_SetConfig+0x1ba>
 800a10a:	2300      	movs	r3, #0
 800a10c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a110:	e0ad      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a112:	2302      	movs	r3, #2
 800a114:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a118:	e0a9      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a11a:	2304      	movs	r3, #4
 800a11c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a120:	e0a5      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a122:	2308      	movs	r3, #8
 800a124:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a128:	e0a1      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a12a:	2310      	movs	r3, #16
 800a12c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a130:	e09d      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a4a      	ldr	r2, [pc, #296]	@ (800a260 <UART_SetConfig+0x2f0>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d125      	bne.n	800a188 <UART_SetConfig+0x218>
 800a13c:	4b45      	ldr	r3, [pc, #276]	@ (800a254 <UART_SetConfig+0x2e4>)
 800a13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a142:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a146:	2bc0      	cmp	r3, #192	@ 0xc0
 800a148:	d016      	beq.n	800a178 <UART_SetConfig+0x208>
 800a14a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a14c:	d818      	bhi.n	800a180 <UART_SetConfig+0x210>
 800a14e:	2b80      	cmp	r3, #128	@ 0x80
 800a150:	d00a      	beq.n	800a168 <UART_SetConfig+0x1f8>
 800a152:	2b80      	cmp	r3, #128	@ 0x80
 800a154:	d814      	bhi.n	800a180 <UART_SetConfig+0x210>
 800a156:	2b00      	cmp	r3, #0
 800a158:	d002      	beq.n	800a160 <UART_SetConfig+0x1f0>
 800a15a:	2b40      	cmp	r3, #64	@ 0x40
 800a15c:	d008      	beq.n	800a170 <UART_SetConfig+0x200>
 800a15e:	e00f      	b.n	800a180 <UART_SetConfig+0x210>
 800a160:	2300      	movs	r3, #0
 800a162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a166:	e082      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a168:	2302      	movs	r3, #2
 800a16a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a16e:	e07e      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a170:	2304      	movs	r3, #4
 800a172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a176:	e07a      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a178:	2308      	movs	r3, #8
 800a17a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a17e:	e076      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a180:	2310      	movs	r3, #16
 800a182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a186:	e072      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a35      	ldr	r2, [pc, #212]	@ (800a264 <UART_SetConfig+0x2f4>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d12a      	bne.n	800a1e8 <UART_SetConfig+0x278>
 800a192:	4b30      	ldr	r3, [pc, #192]	@ (800a254 <UART_SetConfig+0x2e4>)
 800a194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a198:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a19c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1a0:	d01a      	beq.n	800a1d8 <UART_SetConfig+0x268>
 800a1a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1a6:	d81b      	bhi.n	800a1e0 <UART_SetConfig+0x270>
 800a1a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1ac:	d00c      	beq.n	800a1c8 <UART_SetConfig+0x258>
 800a1ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1b2:	d815      	bhi.n	800a1e0 <UART_SetConfig+0x270>
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d003      	beq.n	800a1c0 <UART_SetConfig+0x250>
 800a1b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1bc:	d008      	beq.n	800a1d0 <UART_SetConfig+0x260>
 800a1be:	e00f      	b.n	800a1e0 <UART_SetConfig+0x270>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1c6:	e052      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a1c8:	2302      	movs	r3, #2
 800a1ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ce:	e04e      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a1d0:	2304      	movs	r3, #4
 800a1d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1d6:	e04a      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a1d8:	2308      	movs	r3, #8
 800a1da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1de:	e046      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a1e0:	2310      	movs	r3, #16
 800a1e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1e6:	e042      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a17      	ldr	r2, [pc, #92]	@ (800a24c <UART_SetConfig+0x2dc>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d13a      	bne.n	800a268 <UART_SetConfig+0x2f8>
 800a1f2:	4b18      	ldr	r3, [pc, #96]	@ (800a254 <UART_SetConfig+0x2e4>)
 800a1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a1fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a200:	d01a      	beq.n	800a238 <UART_SetConfig+0x2c8>
 800a202:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a206:	d81b      	bhi.n	800a240 <UART_SetConfig+0x2d0>
 800a208:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a20c:	d00c      	beq.n	800a228 <UART_SetConfig+0x2b8>
 800a20e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a212:	d815      	bhi.n	800a240 <UART_SetConfig+0x2d0>
 800a214:	2b00      	cmp	r3, #0
 800a216:	d003      	beq.n	800a220 <UART_SetConfig+0x2b0>
 800a218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a21c:	d008      	beq.n	800a230 <UART_SetConfig+0x2c0>
 800a21e:	e00f      	b.n	800a240 <UART_SetConfig+0x2d0>
 800a220:	2300      	movs	r3, #0
 800a222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a226:	e022      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a228:	2302      	movs	r3, #2
 800a22a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a22e:	e01e      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a230:	2304      	movs	r3, #4
 800a232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a236:	e01a      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a238:	2308      	movs	r3, #8
 800a23a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a23e:	e016      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a240:	2310      	movs	r3, #16
 800a242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a246:	e012      	b.n	800a26e <UART_SetConfig+0x2fe>
 800a248:	cfff69f3 	.word	0xcfff69f3
 800a24c:	40008000 	.word	0x40008000
 800a250:	40013800 	.word	0x40013800
 800a254:	40021000 	.word	0x40021000
 800a258:	40004400 	.word	0x40004400
 800a25c:	40004800 	.word	0x40004800
 800a260:	40004c00 	.word	0x40004c00
 800a264:	40005000 	.word	0x40005000
 800a268:	2310      	movs	r3, #16
 800a26a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4aae      	ldr	r2, [pc, #696]	@ (800a52c <UART_SetConfig+0x5bc>)
 800a274:	4293      	cmp	r3, r2
 800a276:	f040 8097 	bne.w	800a3a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a27a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a27e:	2b08      	cmp	r3, #8
 800a280:	d823      	bhi.n	800a2ca <UART_SetConfig+0x35a>
 800a282:	a201      	add	r2, pc, #4	@ (adr r2, 800a288 <UART_SetConfig+0x318>)
 800a284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a288:	0800a2ad 	.word	0x0800a2ad
 800a28c:	0800a2cb 	.word	0x0800a2cb
 800a290:	0800a2b5 	.word	0x0800a2b5
 800a294:	0800a2cb 	.word	0x0800a2cb
 800a298:	0800a2bb 	.word	0x0800a2bb
 800a29c:	0800a2cb 	.word	0x0800a2cb
 800a2a0:	0800a2cb 	.word	0x0800a2cb
 800a2a4:	0800a2cb 	.word	0x0800a2cb
 800a2a8:	0800a2c3 	.word	0x0800a2c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2ac:	f7fc fcf6 	bl	8006c9c <HAL_RCC_GetPCLK1Freq>
 800a2b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2b2:	e010      	b.n	800a2d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2b4:	4b9e      	ldr	r3, [pc, #632]	@ (800a530 <UART_SetConfig+0x5c0>)
 800a2b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a2b8:	e00d      	b.n	800a2d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2ba:	f7fc fc81 	bl	8006bc0 <HAL_RCC_GetSysClockFreq>
 800a2be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2c0:	e009      	b.n	800a2d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a2c8:	e005      	b.n	800a2d6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a2d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f000 8130 	beq.w	800a53e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e2:	4a94      	ldr	r2, [pc, #592]	@ (800a534 <UART_SetConfig+0x5c4>)
 800a2e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	005b      	lsls	r3, r3, #1
 800a2fa:	4413      	add	r3, r2
 800a2fc:	69ba      	ldr	r2, [r7, #24]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d305      	bcc.n	800a30e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a308:	69ba      	ldr	r2, [r7, #24]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d903      	bls.n	800a316 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a30e:	2301      	movs	r3, #1
 800a310:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a314:	e113      	b.n	800a53e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a318:	2200      	movs	r2, #0
 800a31a:	60bb      	str	r3, [r7, #8]
 800a31c:	60fa      	str	r2, [r7, #12]
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a322:	4a84      	ldr	r2, [pc, #528]	@ (800a534 <UART_SetConfig+0x5c4>)
 800a324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a328:	b29b      	uxth	r3, r3
 800a32a:	2200      	movs	r2, #0
 800a32c:	603b      	str	r3, [r7, #0]
 800a32e:	607a      	str	r2, [r7, #4]
 800a330:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a334:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a338:	f7f6 fbac 	bl	8000a94 <__aeabi_uldivmod>
 800a33c:	4602      	mov	r2, r0
 800a33e:	460b      	mov	r3, r1
 800a340:	4610      	mov	r0, r2
 800a342:	4619      	mov	r1, r3
 800a344:	f04f 0200 	mov.w	r2, #0
 800a348:	f04f 0300 	mov.w	r3, #0
 800a34c:	020b      	lsls	r3, r1, #8
 800a34e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a352:	0202      	lsls	r2, r0, #8
 800a354:	6979      	ldr	r1, [r7, #20]
 800a356:	6849      	ldr	r1, [r1, #4]
 800a358:	0849      	lsrs	r1, r1, #1
 800a35a:	2000      	movs	r0, #0
 800a35c:	460c      	mov	r4, r1
 800a35e:	4605      	mov	r5, r0
 800a360:	eb12 0804 	adds.w	r8, r2, r4
 800a364:	eb43 0905 	adc.w	r9, r3, r5
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	469a      	mov	sl, r3
 800a370:	4693      	mov	fp, r2
 800a372:	4652      	mov	r2, sl
 800a374:	465b      	mov	r3, fp
 800a376:	4640      	mov	r0, r8
 800a378:	4649      	mov	r1, r9
 800a37a:	f7f6 fb8b 	bl	8000a94 <__aeabi_uldivmod>
 800a37e:	4602      	mov	r2, r0
 800a380:	460b      	mov	r3, r1
 800a382:	4613      	mov	r3, r2
 800a384:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a386:	6a3b      	ldr	r3, [r7, #32]
 800a388:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a38c:	d308      	bcc.n	800a3a0 <UART_SetConfig+0x430>
 800a38e:	6a3b      	ldr	r3, [r7, #32]
 800a390:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a394:	d204      	bcs.n	800a3a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6a3a      	ldr	r2, [r7, #32]
 800a39c:	60da      	str	r2, [r3, #12]
 800a39e:	e0ce      	b.n	800a53e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a3a6:	e0ca      	b.n	800a53e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	69db      	ldr	r3, [r3, #28]
 800a3ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3b0:	d166      	bne.n	800a480 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a3b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a3b6:	2b08      	cmp	r3, #8
 800a3b8:	d827      	bhi.n	800a40a <UART_SetConfig+0x49a>
 800a3ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c0 <UART_SetConfig+0x450>)
 800a3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c0:	0800a3e5 	.word	0x0800a3e5
 800a3c4:	0800a3ed 	.word	0x0800a3ed
 800a3c8:	0800a3f5 	.word	0x0800a3f5
 800a3cc:	0800a40b 	.word	0x0800a40b
 800a3d0:	0800a3fb 	.word	0x0800a3fb
 800a3d4:	0800a40b 	.word	0x0800a40b
 800a3d8:	0800a40b 	.word	0x0800a40b
 800a3dc:	0800a40b 	.word	0x0800a40b
 800a3e0:	0800a403 	.word	0x0800a403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3e4:	f7fc fc5a 	bl	8006c9c <HAL_RCC_GetPCLK1Freq>
 800a3e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3ea:	e014      	b.n	800a416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3ec:	f7fc fc6c 	bl	8006cc8 <HAL_RCC_GetPCLK2Freq>
 800a3f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3f2:	e010      	b.n	800a416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3f4:	4b4e      	ldr	r3, [pc, #312]	@ (800a530 <UART_SetConfig+0x5c0>)
 800a3f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3f8:	e00d      	b.n	800a416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3fa:	f7fc fbe1 	bl	8006bc0 <HAL_RCC_GetSysClockFreq>
 800a3fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a400:	e009      	b.n	800a416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a406:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a408:	e005      	b.n	800a416 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a40a:	2300      	movs	r3, #0
 800a40c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a414:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f000 8090 	beq.w	800a53e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a422:	4a44      	ldr	r2, [pc, #272]	@ (800a534 <UART_SetConfig+0x5c4>)
 800a424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a428:	461a      	mov	r2, r3
 800a42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a430:	005a      	lsls	r2, r3, #1
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	085b      	lsrs	r3, r3, #1
 800a438:	441a      	add	r2, r3
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a442:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a444:	6a3b      	ldr	r3, [r7, #32]
 800a446:	2b0f      	cmp	r3, #15
 800a448:	d916      	bls.n	800a478 <UART_SetConfig+0x508>
 800a44a:	6a3b      	ldr	r3, [r7, #32]
 800a44c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a450:	d212      	bcs.n	800a478 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a452:	6a3b      	ldr	r3, [r7, #32]
 800a454:	b29b      	uxth	r3, r3
 800a456:	f023 030f 	bic.w	r3, r3, #15
 800a45a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a45c:	6a3b      	ldr	r3, [r7, #32]
 800a45e:	085b      	lsrs	r3, r3, #1
 800a460:	b29b      	uxth	r3, r3
 800a462:	f003 0307 	and.w	r3, r3, #7
 800a466:	b29a      	uxth	r2, r3
 800a468:	8bfb      	ldrh	r3, [r7, #30]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	8bfa      	ldrh	r2, [r7, #30]
 800a474:	60da      	str	r2, [r3, #12]
 800a476:	e062      	b.n	800a53e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a47e:	e05e      	b.n	800a53e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a480:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a484:	2b08      	cmp	r3, #8
 800a486:	d828      	bhi.n	800a4da <UART_SetConfig+0x56a>
 800a488:	a201      	add	r2, pc, #4	@ (adr r2, 800a490 <UART_SetConfig+0x520>)
 800a48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48e:	bf00      	nop
 800a490:	0800a4b5 	.word	0x0800a4b5
 800a494:	0800a4bd 	.word	0x0800a4bd
 800a498:	0800a4c5 	.word	0x0800a4c5
 800a49c:	0800a4db 	.word	0x0800a4db
 800a4a0:	0800a4cb 	.word	0x0800a4cb
 800a4a4:	0800a4db 	.word	0x0800a4db
 800a4a8:	0800a4db 	.word	0x0800a4db
 800a4ac:	0800a4db 	.word	0x0800a4db
 800a4b0:	0800a4d3 	.word	0x0800a4d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4b4:	f7fc fbf2 	bl	8006c9c <HAL_RCC_GetPCLK1Freq>
 800a4b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a4ba:	e014      	b.n	800a4e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4bc:	f7fc fc04 	bl	8006cc8 <HAL_RCC_GetPCLK2Freq>
 800a4c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a4c2:	e010      	b.n	800a4e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4c4:	4b1a      	ldr	r3, [pc, #104]	@ (800a530 <UART_SetConfig+0x5c0>)
 800a4c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a4c8:	e00d      	b.n	800a4e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4ca:	f7fc fb79 	bl	8006bc0 <HAL_RCC_GetSysClockFreq>
 800a4ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a4d0:	e009      	b.n	800a4e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a4d8:	e005      	b.n	800a4e6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a4e4:	bf00      	nop
    }

    if (pclk != 0U)
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d028      	beq.n	800a53e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f0:	4a10      	ldr	r2, [pc, #64]	@ (800a534 <UART_SetConfig+0x5c4>)
 800a4f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	085b      	lsrs	r3, r3, #1
 800a504:	441a      	add	r2, r3
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a50e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	2b0f      	cmp	r3, #15
 800a514:	d910      	bls.n	800a538 <UART_SetConfig+0x5c8>
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a51c:	d20c      	bcs.n	800a538 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	b29a      	uxth	r2, r3
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	60da      	str	r2, [r3, #12]
 800a528:	e009      	b.n	800a53e <UART_SetConfig+0x5ce>
 800a52a:	bf00      	nop
 800a52c:	40008000 	.word	0x40008000
 800a530:	00f42400 	.word	0x00f42400
 800a534:	0800bdb4 	.word	0x0800bdb4
      }
      else
      {
        ret = HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2201      	movs	r2, #1
 800a542:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	2201      	movs	r2, #1
 800a54a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	2200      	movs	r2, #0
 800a552:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	2200      	movs	r2, #0
 800a558:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a55a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3730      	adds	r7, #48	@ 0x30
 800a562:	46bd      	mov	sp, r7
 800a564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a574:	f003 0308 	and.w	r3, r3, #8
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00a      	beq.n	800a592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a596:	f003 0301 	and.w	r3, r3, #1
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00a      	beq.n	800a5b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b8:	f003 0302 	and.w	r3, r3, #2
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00a      	beq.n	800a5d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5da:	f003 0304 	and.w	r3, r3, #4
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00a      	beq.n	800a5f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	430a      	orrs	r2, r1
 800a5f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5fc:	f003 0310 	and.w	r3, r3, #16
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00a      	beq.n	800a61a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	430a      	orrs	r2, r1
 800a618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a61e:	f003 0320 	and.w	r3, r3, #32
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00a      	beq.n	800a63c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	430a      	orrs	r2, r1
 800a63a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a644:	2b00      	cmp	r3, #0
 800a646:	d01a      	beq.n	800a67e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	430a      	orrs	r2, r1
 800a65c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a662:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a666:	d10a      	bne.n	800a67e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	430a      	orrs	r2, r1
 800a67c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00a      	beq.n	800a6a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	430a      	orrs	r2, r1
 800a69e:	605a      	str	r2, [r3, #4]
  }
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b098      	sub	sp, #96	@ 0x60
 800a6b0:	af02      	add	r7, sp, #8
 800a6b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a6bc:	f7f9 faee 	bl	8003c9c <HAL_GetTick>
 800a6c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 0308 	and.w	r3, r3, #8
 800a6cc:	2b08      	cmp	r3, #8
 800a6ce:	d12f      	bne.n	800a730 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f88e 	bl	800a800 <UART_WaitOnFlagUntilTimeout>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d022      	beq.n	800a730 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f2:	e853 3f00 	ldrex	r3, [r3]
 800a6f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a6f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6fe:	653b      	str	r3, [r7, #80]	@ 0x50
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	461a      	mov	r2, r3
 800a706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a708:	647b      	str	r3, [r7, #68]	@ 0x44
 800a70a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a70e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a710:	e841 2300 	strex	r3, r2, [r1]
 800a714:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1e6      	bne.n	800a6ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2220      	movs	r2, #32
 800a720:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a72c:	2303      	movs	r3, #3
 800a72e:	e063      	b.n	800a7f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 0304 	and.w	r3, r3, #4
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	d149      	bne.n	800a7d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a73e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a746:	2200      	movs	r2, #0
 800a748:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f857 	bl	800a800 <UART_WaitOnFlagUntilTimeout>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d03c      	beq.n	800a7d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a760:	e853 3f00 	ldrex	r3, [r3]
 800a764:	623b      	str	r3, [r7, #32]
   return(result);
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a76c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	461a      	mov	r2, r3
 800a774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a776:	633b      	str	r3, [r7, #48]	@ 0x30
 800a778:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a77c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a77e:	e841 2300 	strex	r3, r2, [r1]
 800a782:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1e6      	bne.n	800a758 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	3308      	adds	r3, #8
 800a790:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	e853 3f00 	ldrex	r3, [r3]
 800a798:	60fb      	str	r3, [r7, #12]
   return(result);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f023 0301 	bic.w	r3, r3, #1
 800a7a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	3308      	adds	r3, #8
 800a7a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7aa:	61fa      	str	r2, [r7, #28]
 800a7ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ae:	69b9      	ldr	r1, [r7, #24]
 800a7b0:	69fa      	ldr	r2, [r7, #28]
 800a7b2:	e841 2300 	strex	r3, r2, [r1]
 800a7b6:	617b      	str	r3, [r7, #20]
   return(result);
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1e5      	bne.n	800a78a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2220      	movs	r2, #32
 800a7c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e012      	b.n	800a7f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2220      	movs	r2, #32
 800a7d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2220      	movs	r2, #32
 800a7de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3758      	adds	r7, #88	@ 0x58
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	603b      	str	r3, [r7, #0]
 800a80c:	4613      	mov	r3, r2
 800a80e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a810:	e04f      	b.n	800a8b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a818:	d04b      	beq.n	800a8b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a81a:	f7f9 fa3f 	bl	8003c9c <HAL_GetTick>
 800a81e:	4602      	mov	r2, r0
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	69ba      	ldr	r2, [r7, #24]
 800a826:	429a      	cmp	r2, r3
 800a828:	d302      	bcc.n	800a830 <UART_WaitOnFlagUntilTimeout+0x30>
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d101      	bne.n	800a834 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a830:	2303      	movs	r3, #3
 800a832:	e04e      	b.n	800a8d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f003 0304 	and.w	r3, r3, #4
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d037      	beq.n	800a8b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	2b80      	cmp	r3, #128	@ 0x80
 800a846:	d034      	beq.n	800a8b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	2b40      	cmp	r3, #64	@ 0x40
 800a84c:	d031      	beq.n	800a8b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	69db      	ldr	r3, [r3, #28]
 800a854:	f003 0308 	and.w	r3, r3, #8
 800a858:	2b08      	cmp	r3, #8
 800a85a:	d110      	bne.n	800a87e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2208      	movs	r2, #8
 800a862:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f000 f920 	bl	800aaaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2208      	movs	r2, #8
 800a86e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	e029      	b.n	800a8d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	69db      	ldr	r3, [r3, #28]
 800a884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a88c:	d111      	bne.n	800a8b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a896:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 f906 	bl	800aaaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2220      	movs	r2, #32
 800a8a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e00f      	b.n	800a8d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	69da      	ldr	r2, [r3, #28]
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	4013      	ands	r3, r2
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	bf0c      	ite	eq
 800a8c2:	2301      	moveq	r3, #1
 800a8c4:	2300      	movne	r3, #0
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	79fb      	ldrb	r3, [r7, #7]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d0a0      	beq.n	800a812 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b096      	sub	sp, #88	@ 0x58
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	68ba      	ldr	r2, [r7, #8]
 800a8ee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	88fa      	ldrh	r2, [r7, #6]
 800a8f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2222      	movs	r2, #34	@ 0x22
 800a904:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d02d      	beq.n	800a96e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a918:	4a40      	ldr	r2, [pc, #256]	@ (800aa1c <UART_Start_Receive_DMA+0x140>)
 800a91a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a922:	4a3f      	ldr	r2, [pc, #252]	@ (800aa20 <UART_Start_Receive_DMA+0x144>)
 800a924:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a92c:	4a3d      	ldr	r2, [pc, #244]	@ (800aa24 <UART_Start_Receive_DMA+0x148>)
 800a92e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a936:	2200      	movs	r2, #0
 800a938:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3324      	adds	r3, #36	@ 0x24
 800a946:	4619      	mov	r1, r3
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a94c:	461a      	mov	r2, r3
 800a94e:	88fb      	ldrh	r3, [r7, #6]
 800a950:	f7fa ffe0 	bl	8005914 <HAL_DMA_Start_IT>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d009      	beq.n	800a96e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2210      	movs	r2, #16
 800a95e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2220      	movs	r2, #32
 800a966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e051      	b.n	800aa12 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d018      	beq.n	800a9a8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a97e:	e853 3f00 	ldrex	r3, [r3]
 800a982:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a98a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	461a      	mov	r2, r3
 800a992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a994:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a996:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a998:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a99a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a99c:	e841 2300 	strex	r3, r2, [r1]
 800a9a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a9a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1e6      	bne.n	800a976 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9b2:	e853 3f00 	ldrex	r3, [r3]
 800a9b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ba:	f043 0301 	orr.w	r3, r3, #1
 800a9be:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a9c8:	637a      	str	r2, [r7, #52]	@ 0x34
 800a9ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a9ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9d0:	e841 2300 	strex	r3, r2, [r1]
 800a9d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1e5      	bne.n	800a9a8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	3308      	adds	r3, #8
 800a9e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	e853 3f00 	ldrex	r3, [r3]
 800a9ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a9fc:	623a      	str	r2, [r7, #32]
 800a9fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa00:	69f9      	ldr	r1, [r7, #28]
 800aa02:	6a3a      	ldr	r2, [r7, #32]
 800aa04:	e841 2300 	strex	r3, r2, [r1]
 800aa08:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d1e5      	bne.n	800a9dc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3758      	adds	r7, #88	@ 0x58
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	0800ab77 	.word	0x0800ab77
 800aa20:	0800acab 	.word	0x0800acab
 800aa24:	0800acf1 	.word	0x0800acf1

0800aa28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b08f      	sub	sp, #60	@ 0x3c
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	e853 3f00 	ldrex	r3, [r3]
 800aa3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800aa44:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa50:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa56:	e841 2300 	strex	r3, r2, [r1]
 800aa5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1e6      	bne.n	800aa30 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3308      	adds	r3, #8
 800aa68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	e853 3f00 	ldrex	r3, [r3]
 800aa70:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aa78:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	3308      	adds	r3, #8
 800aa80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa82:	61ba      	str	r2, [r7, #24]
 800aa84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa86:	6979      	ldr	r1, [r7, #20]
 800aa88:	69ba      	ldr	r2, [r7, #24]
 800aa8a:	e841 2300 	strex	r3, r2, [r1]
 800aa8e:	613b      	str	r3, [r7, #16]
   return(result);
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1e5      	bne.n	800aa62 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2220      	movs	r2, #32
 800aa9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800aa9e:	bf00      	nop
 800aaa0:	373c      	adds	r7, #60	@ 0x3c
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aaaa:	b480      	push	{r7}
 800aaac:	b095      	sub	sp, #84	@ 0x54
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaba:	e853 3f00 	ldrex	r3, [r3]
 800aabe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	461a      	mov	r2, r3
 800aace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aad0:	643b      	str	r3, [r7, #64]	@ 0x40
 800aad2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aad6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aad8:	e841 2300 	strex	r3, r2, [r1]
 800aadc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1e6      	bne.n	800aab2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	3308      	adds	r3, #8
 800aaea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaec:	6a3b      	ldr	r3, [r7, #32]
 800aaee:	e853 3f00 	ldrex	r3, [r3]
 800aaf2:	61fb      	str	r3, [r7, #28]
   return(result);
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aafa:	f023 0301 	bic.w	r3, r3, #1
 800aafe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	3308      	adds	r3, #8
 800ab06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ab0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab10:	e841 2300 	strex	r3, r2, [r1]
 800ab14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d1e3      	bne.n	800aae4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d118      	bne.n	800ab56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	e853 3f00 	ldrex	r3, [r3]
 800ab30:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	f023 0310 	bic.w	r3, r3, #16
 800ab38:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab42:	61bb      	str	r3, [r7, #24]
 800ab44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab46:	6979      	ldr	r1, [r7, #20]
 800ab48:	69ba      	ldr	r2, [r7, #24]
 800ab4a:	e841 2300 	strex	r3, r2, [r1]
 800ab4e:	613b      	str	r3, [r7, #16]
   return(result);
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1e6      	bne.n	800ab24 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2220      	movs	r2, #32
 800ab5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ab6a:	bf00      	nop
 800ab6c:	3754      	adds	r7, #84	@ 0x54
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr

0800ab76 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b09c      	sub	sp, #112	@ 0x70
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab82:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 0320 	and.w	r3, r3, #32
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d171      	bne.n	800ac76 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ab92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab94:	2200      	movs	r2, #0
 800ab96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aba2:	e853 3f00 	ldrex	r3, [r3]
 800aba6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aba8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abaa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abae:	66bb      	str	r3, [r7, #104]	@ 0x68
 800abb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	461a      	mov	r2, r3
 800abb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800abb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800abba:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800abbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800abc0:	e841 2300 	strex	r3, r2, [r1]
 800abc4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800abc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1e6      	bne.n	800ab9a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	3308      	adds	r3, #8
 800abd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd6:	e853 3f00 	ldrex	r3, [r3]
 800abda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800abdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abde:	f023 0301 	bic.w	r3, r3, #1
 800abe2:	667b      	str	r3, [r7, #100]	@ 0x64
 800abe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	3308      	adds	r3, #8
 800abea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800abec:	647a      	str	r2, [r7, #68]	@ 0x44
 800abee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800abf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abf4:	e841 2300 	strex	r3, r2, [r1]
 800abf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800abfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1e5      	bne.n	800abcc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	3308      	adds	r3, #8
 800ac06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0a:	e853 3f00 	ldrex	r3, [r3]
 800ac0e:	623b      	str	r3, [r7, #32]
   return(result);
 800ac10:	6a3b      	ldr	r3, [r7, #32]
 800ac12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac16:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	3308      	adds	r3, #8
 800ac1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ac20:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac28:	e841 2300 	strex	r3, r2, [r1]
 800ac2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1e5      	bne.n	800ac00 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac36:	2220      	movs	r2, #32
 800ac38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d118      	bne.n	800ac76 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	e853 3f00 	ldrex	r3, [r3]
 800ac50:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f023 0310 	bic.w	r3, r3, #16
 800ac58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac62:	61fb      	str	r3, [r7, #28]
 800ac64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac66:	69b9      	ldr	r1, [r7, #24]
 800ac68:	69fa      	ldr	r2, [r7, #28]
 800ac6a:	e841 2300 	strex	r3, r2, [r1]
 800ac6e:	617b      	str	r3, [r7, #20]
   return(result);
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d1e6      	bne.n	800ac44 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac78:	2200      	movs	r2, #0
 800ac7a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d109      	bne.n	800ac98 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800ac84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac86:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ac8a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ac8c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ac90:	4611      	mov	r1, r2
 800ac92:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ac94:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac96:	e004      	b.n	800aca2 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800ac98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ac9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aca0:	4798      	blx	r3
}
 800aca2:	bf00      	nop
 800aca4:	3770      	adds	r7, #112	@ 0x70
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b084      	sub	sp, #16
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2201      	movs	r2, #1
 800acbc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d10b      	bne.n	800acde <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800acd2:	0852      	lsrs	r2, r2, #1
 800acd4:	b292      	uxth	r2, r2
 800acd6:	4611      	mov	r1, r2
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800acdc:	e004      	b.n	800ace8 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	4798      	blx	r3
}
 800ace8:	bf00      	nop
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acfc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad04:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad0c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad18:	2b80      	cmp	r3, #128	@ 0x80
 800ad1a:	d109      	bne.n	800ad30 <UART_DMAError+0x40>
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	2b21      	cmp	r3, #33	@ 0x21
 800ad20:	d106      	bne.n	800ad30 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ad2a:	6978      	ldr	r0, [r7, #20]
 800ad2c:	f7ff fe7c 	bl	800aa28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad3a:	2b40      	cmp	r3, #64	@ 0x40
 800ad3c:	d109      	bne.n	800ad52 <UART_DMAError+0x62>
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2b22      	cmp	r3, #34	@ 0x22
 800ad42:	d106      	bne.n	800ad52 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ad4c:	6978      	ldr	r0, [r7, #20]
 800ad4e:	f7ff feac 	bl	800aaaa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad58:	f043 0210 	orr.w	r2, r3, #16
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ad68:	6978      	ldr	r0, [r7, #20]
 800ad6a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad6c:	bf00      	nop
 800ad6e:	3718      	adds	r7, #24
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad94:	bf00      	nop
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b088      	sub	sp, #32
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	e853 3f00 	ldrex	r3, [r3]
 800adb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adb8:	61fb      	str	r3, [r7, #28]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	461a      	mov	r2, r3
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	61bb      	str	r3, [r7, #24]
 800adc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc6:	6979      	ldr	r1, [r7, #20]
 800adc8:	69ba      	ldr	r2, [r7, #24]
 800adca:	e841 2300 	strex	r3, r2, [r1]
 800adce:	613b      	str	r3, [r7, #16]
   return(result);
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1e6      	bne.n	800ada4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2220      	movs	r2, #32
 800adda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adee:	bf00      	nop
 800adf0:	3720      	adds	r7, #32
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b083      	sub	sp, #12
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800adfe:	bf00      	nop
 800ae00:	370c      	adds	r7, #12
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b083      	sub	sp, #12
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae12:	bf00      	nop
 800ae14:	370c      	adds	r7, #12
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr

0800ae1e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b083      	sub	sp, #12
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ae26:	bf00      	nop
 800ae28:	370c      	adds	r7, #12
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae32:	b480      	push	{r7}
 800ae34:	b085      	sub	sp, #20
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d101      	bne.n	800ae48 <HAL_UARTEx_DisableFifoMode+0x16>
 800ae44:	2302      	movs	r3, #2
 800ae46:	e027      	b.n	800ae98 <HAL_UARTEx_DisableFifoMode+0x66>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2224      	movs	r2, #36	@ 0x24
 800ae54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f022 0201 	bic.w	r2, r2, #1
 800ae6e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ae76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2220      	movs	r2, #32
 800ae8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3714      	adds	r7, #20
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d101      	bne.n	800aebc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aeb8:	2302      	movs	r3, #2
 800aeba:	e02d      	b.n	800af18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2224      	movs	r2, #36	@ 0x24
 800aec8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f022 0201 	bic.w	r2, r2, #1
 800aee2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	683a      	ldr	r2, [r7, #0]
 800aef4:	430a      	orrs	r2, r1
 800aef6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f84f 	bl	800af9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2220      	movs	r2, #32
 800af0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af30:	2b01      	cmp	r3, #1
 800af32:	d101      	bne.n	800af38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af34:	2302      	movs	r3, #2
 800af36:	e02d      	b.n	800af94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2224      	movs	r2, #36	@ 0x24
 800af44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f022 0201 	bic.w	r2, r2, #1
 800af5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	683a      	ldr	r2, [r7, #0]
 800af70:	430a      	orrs	r2, r1
 800af72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f811 	bl	800af9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2220      	movs	r2, #32
 800af86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b085      	sub	sp, #20
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d108      	bne.n	800afbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800afbc:	e031      	b.n	800b022 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800afbe:	2308      	movs	r3, #8
 800afc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800afc2:	2308      	movs	r3, #8
 800afc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	0e5b      	lsrs	r3, r3, #25
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	f003 0307 	and.w	r3, r3, #7
 800afd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	0f5b      	lsrs	r3, r3, #29
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	f003 0307 	and.w	r3, r3, #7
 800afe4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800afe6:	7bbb      	ldrb	r3, [r7, #14]
 800afe8:	7b3a      	ldrb	r2, [r7, #12]
 800afea:	4911      	ldr	r1, [pc, #68]	@ (800b030 <UARTEx_SetNbDataToProcess+0x94>)
 800afec:	5c8a      	ldrb	r2, [r1, r2]
 800afee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aff2:	7b3a      	ldrb	r2, [r7, #12]
 800aff4:	490f      	ldr	r1, [pc, #60]	@ (800b034 <UARTEx_SetNbDataToProcess+0x98>)
 800aff6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aff8:	fb93 f3f2 	sdiv	r3, r3, r2
 800affc:	b29a      	uxth	r2, r3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b004:	7bfb      	ldrb	r3, [r7, #15]
 800b006:	7b7a      	ldrb	r2, [r7, #13]
 800b008:	4909      	ldr	r1, [pc, #36]	@ (800b030 <UARTEx_SetNbDataToProcess+0x94>)
 800b00a:	5c8a      	ldrb	r2, [r1, r2]
 800b00c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b010:	7b7a      	ldrb	r2, [r7, #13]
 800b012:	4908      	ldr	r1, [pc, #32]	@ (800b034 <UARTEx_SetNbDataToProcess+0x98>)
 800b014:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b016:	fb93 f3f2 	sdiv	r3, r3, r2
 800b01a:	b29a      	uxth	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b022:	bf00      	nop
 800b024:	3714      	adds	r7, #20
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	0800bdcc 	.word	0x0800bdcc
 800b034:	0800bdd4 	.word	0x0800bdd4

0800b038 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	607b      	str	r3, [r7, #4]
 800b042:	460b      	mov	r3, r1
 800b044:	817b      	strh	r3, [r7, #10]
 800b046:	4613      	mov	r3, r2
 800b048:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	897a      	ldrh	r2, [r7, #10]
 800b04e:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	893a      	ldrh	r2, [r7, #8]
 800b054:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	605a      	str	r2, [r3, #4]
}
 800b05c:	bf00      	nop
 800b05e:	3714      	adds	r7, #20
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <malloc>:
 800b068:	4b02      	ldr	r3, [pc, #8]	@ (800b074 <malloc+0xc>)
 800b06a:	4601      	mov	r1, r0
 800b06c:	6818      	ldr	r0, [r3, #0]
 800b06e:	f000 b825 	b.w	800b0bc <_malloc_r>
 800b072:	bf00      	nop
 800b074:	20000198 	.word	0x20000198

0800b078 <sbrk_aligned>:
 800b078:	b570      	push	{r4, r5, r6, lr}
 800b07a:	4e0f      	ldr	r6, [pc, #60]	@ (800b0b8 <sbrk_aligned+0x40>)
 800b07c:	460c      	mov	r4, r1
 800b07e:	6831      	ldr	r1, [r6, #0]
 800b080:	4605      	mov	r5, r0
 800b082:	b911      	cbnz	r1, 800b08a <sbrk_aligned+0x12>
 800b084:	f000 f8ae 	bl	800b1e4 <_sbrk_r>
 800b088:	6030      	str	r0, [r6, #0]
 800b08a:	4621      	mov	r1, r4
 800b08c:	4628      	mov	r0, r5
 800b08e:	f000 f8a9 	bl	800b1e4 <_sbrk_r>
 800b092:	1c43      	adds	r3, r0, #1
 800b094:	d103      	bne.n	800b09e <sbrk_aligned+0x26>
 800b096:	f04f 34ff 	mov.w	r4, #4294967295
 800b09a:	4620      	mov	r0, r4
 800b09c:	bd70      	pop	{r4, r5, r6, pc}
 800b09e:	1cc4      	adds	r4, r0, #3
 800b0a0:	f024 0403 	bic.w	r4, r4, #3
 800b0a4:	42a0      	cmp	r0, r4
 800b0a6:	d0f8      	beq.n	800b09a <sbrk_aligned+0x22>
 800b0a8:	1a21      	subs	r1, r4, r0
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	f000 f89a 	bl	800b1e4 <_sbrk_r>
 800b0b0:	3001      	adds	r0, #1
 800b0b2:	d1f2      	bne.n	800b09a <sbrk_aligned+0x22>
 800b0b4:	e7ef      	b.n	800b096 <sbrk_aligned+0x1e>
 800b0b6:	bf00      	nop
 800b0b8:	20001dcc 	.word	0x20001dcc

0800b0bc <_malloc_r>:
 800b0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c0:	1ccd      	adds	r5, r1, #3
 800b0c2:	f025 0503 	bic.w	r5, r5, #3
 800b0c6:	3508      	adds	r5, #8
 800b0c8:	2d0c      	cmp	r5, #12
 800b0ca:	bf38      	it	cc
 800b0cc:	250c      	movcc	r5, #12
 800b0ce:	2d00      	cmp	r5, #0
 800b0d0:	4606      	mov	r6, r0
 800b0d2:	db01      	blt.n	800b0d8 <_malloc_r+0x1c>
 800b0d4:	42a9      	cmp	r1, r5
 800b0d6:	d904      	bls.n	800b0e2 <_malloc_r+0x26>
 800b0d8:	230c      	movs	r3, #12
 800b0da:	6033      	str	r3, [r6, #0]
 800b0dc:	2000      	movs	r0, #0
 800b0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b1b8 <_malloc_r+0xfc>
 800b0e6:	f000 f869 	bl	800b1bc <__malloc_lock>
 800b0ea:	f8d8 3000 	ldr.w	r3, [r8]
 800b0ee:	461c      	mov	r4, r3
 800b0f0:	bb44      	cbnz	r4, 800b144 <_malloc_r+0x88>
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f7ff ffbf 	bl	800b078 <sbrk_aligned>
 800b0fa:	1c43      	adds	r3, r0, #1
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	d158      	bne.n	800b1b2 <_malloc_r+0xf6>
 800b100:	f8d8 4000 	ldr.w	r4, [r8]
 800b104:	4627      	mov	r7, r4
 800b106:	2f00      	cmp	r7, #0
 800b108:	d143      	bne.n	800b192 <_malloc_r+0xd6>
 800b10a:	2c00      	cmp	r4, #0
 800b10c:	d04b      	beq.n	800b1a6 <_malloc_r+0xea>
 800b10e:	6823      	ldr	r3, [r4, #0]
 800b110:	4639      	mov	r1, r7
 800b112:	4630      	mov	r0, r6
 800b114:	eb04 0903 	add.w	r9, r4, r3
 800b118:	f000 f864 	bl	800b1e4 <_sbrk_r>
 800b11c:	4581      	cmp	r9, r0
 800b11e:	d142      	bne.n	800b1a6 <_malloc_r+0xea>
 800b120:	6821      	ldr	r1, [r4, #0]
 800b122:	1a6d      	subs	r5, r5, r1
 800b124:	4629      	mov	r1, r5
 800b126:	4630      	mov	r0, r6
 800b128:	f7ff ffa6 	bl	800b078 <sbrk_aligned>
 800b12c:	3001      	adds	r0, #1
 800b12e:	d03a      	beq.n	800b1a6 <_malloc_r+0xea>
 800b130:	6823      	ldr	r3, [r4, #0]
 800b132:	442b      	add	r3, r5
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	f8d8 3000 	ldr.w	r3, [r8]
 800b13a:	685a      	ldr	r2, [r3, #4]
 800b13c:	bb62      	cbnz	r2, 800b198 <_malloc_r+0xdc>
 800b13e:	f8c8 7000 	str.w	r7, [r8]
 800b142:	e00f      	b.n	800b164 <_malloc_r+0xa8>
 800b144:	6822      	ldr	r2, [r4, #0]
 800b146:	1b52      	subs	r2, r2, r5
 800b148:	d420      	bmi.n	800b18c <_malloc_r+0xd0>
 800b14a:	2a0b      	cmp	r2, #11
 800b14c:	d917      	bls.n	800b17e <_malloc_r+0xc2>
 800b14e:	1961      	adds	r1, r4, r5
 800b150:	42a3      	cmp	r3, r4
 800b152:	6025      	str	r5, [r4, #0]
 800b154:	bf18      	it	ne
 800b156:	6059      	strne	r1, [r3, #4]
 800b158:	6863      	ldr	r3, [r4, #4]
 800b15a:	bf08      	it	eq
 800b15c:	f8c8 1000 	streq.w	r1, [r8]
 800b160:	5162      	str	r2, [r4, r5]
 800b162:	604b      	str	r3, [r1, #4]
 800b164:	4630      	mov	r0, r6
 800b166:	f000 f82f 	bl	800b1c8 <__malloc_unlock>
 800b16a:	f104 000b 	add.w	r0, r4, #11
 800b16e:	1d23      	adds	r3, r4, #4
 800b170:	f020 0007 	bic.w	r0, r0, #7
 800b174:	1ac2      	subs	r2, r0, r3
 800b176:	bf1c      	itt	ne
 800b178:	1a1b      	subne	r3, r3, r0
 800b17a:	50a3      	strne	r3, [r4, r2]
 800b17c:	e7af      	b.n	800b0de <_malloc_r+0x22>
 800b17e:	6862      	ldr	r2, [r4, #4]
 800b180:	42a3      	cmp	r3, r4
 800b182:	bf0c      	ite	eq
 800b184:	f8c8 2000 	streq.w	r2, [r8]
 800b188:	605a      	strne	r2, [r3, #4]
 800b18a:	e7eb      	b.n	800b164 <_malloc_r+0xa8>
 800b18c:	4623      	mov	r3, r4
 800b18e:	6864      	ldr	r4, [r4, #4]
 800b190:	e7ae      	b.n	800b0f0 <_malloc_r+0x34>
 800b192:	463c      	mov	r4, r7
 800b194:	687f      	ldr	r7, [r7, #4]
 800b196:	e7b6      	b.n	800b106 <_malloc_r+0x4a>
 800b198:	461a      	mov	r2, r3
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	42a3      	cmp	r3, r4
 800b19e:	d1fb      	bne.n	800b198 <_malloc_r+0xdc>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	6053      	str	r3, [r2, #4]
 800b1a4:	e7de      	b.n	800b164 <_malloc_r+0xa8>
 800b1a6:	230c      	movs	r3, #12
 800b1a8:	6033      	str	r3, [r6, #0]
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f000 f80c 	bl	800b1c8 <__malloc_unlock>
 800b1b0:	e794      	b.n	800b0dc <_malloc_r+0x20>
 800b1b2:	6005      	str	r5, [r0, #0]
 800b1b4:	e7d6      	b.n	800b164 <_malloc_r+0xa8>
 800b1b6:	bf00      	nop
 800b1b8:	20001dd0 	.word	0x20001dd0

0800b1bc <__malloc_lock>:
 800b1bc:	4801      	ldr	r0, [pc, #4]	@ (800b1c4 <__malloc_lock+0x8>)
 800b1be:	f000 b84b 	b.w	800b258 <__retarget_lock_acquire_recursive>
 800b1c2:	bf00      	nop
 800b1c4:	20001f10 	.word	0x20001f10

0800b1c8 <__malloc_unlock>:
 800b1c8:	4801      	ldr	r0, [pc, #4]	@ (800b1d0 <__malloc_unlock+0x8>)
 800b1ca:	f000 b846 	b.w	800b25a <__retarget_lock_release_recursive>
 800b1ce:	bf00      	nop
 800b1d0:	20001f10 	.word	0x20001f10

0800b1d4 <memset>:
 800b1d4:	4402      	add	r2, r0
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d100      	bne.n	800b1de <memset+0xa>
 800b1dc:	4770      	bx	lr
 800b1de:	f803 1b01 	strb.w	r1, [r3], #1
 800b1e2:	e7f9      	b.n	800b1d8 <memset+0x4>

0800b1e4 <_sbrk_r>:
 800b1e4:	b538      	push	{r3, r4, r5, lr}
 800b1e6:	4d06      	ldr	r5, [pc, #24]	@ (800b200 <_sbrk_r+0x1c>)
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	4608      	mov	r0, r1
 800b1ee:	602b      	str	r3, [r5, #0]
 800b1f0:	f7f7 fe26 	bl	8002e40 <_sbrk>
 800b1f4:	1c43      	adds	r3, r0, #1
 800b1f6:	d102      	bne.n	800b1fe <_sbrk_r+0x1a>
 800b1f8:	682b      	ldr	r3, [r5, #0]
 800b1fa:	b103      	cbz	r3, 800b1fe <_sbrk_r+0x1a>
 800b1fc:	6023      	str	r3, [r4, #0]
 800b1fe:	bd38      	pop	{r3, r4, r5, pc}
 800b200:	20001f0c 	.word	0x20001f0c

0800b204 <__errno>:
 800b204:	4b01      	ldr	r3, [pc, #4]	@ (800b20c <__errno+0x8>)
 800b206:	6818      	ldr	r0, [r3, #0]
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	20000198 	.word	0x20000198

0800b210 <__libc_init_array>:
 800b210:	b570      	push	{r4, r5, r6, lr}
 800b212:	4d0d      	ldr	r5, [pc, #52]	@ (800b248 <__libc_init_array+0x38>)
 800b214:	4c0d      	ldr	r4, [pc, #52]	@ (800b24c <__libc_init_array+0x3c>)
 800b216:	1b64      	subs	r4, r4, r5
 800b218:	10a4      	asrs	r4, r4, #2
 800b21a:	2600      	movs	r6, #0
 800b21c:	42a6      	cmp	r6, r4
 800b21e:	d109      	bne.n	800b234 <__libc_init_array+0x24>
 800b220:	4d0b      	ldr	r5, [pc, #44]	@ (800b250 <__libc_init_array+0x40>)
 800b222:	4c0c      	ldr	r4, [pc, #48]	@ (800b254 <__libc_init_array+0x44>)
 800b224:	f000 fd8e 	bl	800bd44 <_init>
 800b228:	1b64      	subs	r4, r4, r5
 800b22a:	10a4      	asrs	r4, r4, #2
 800b22c:	2600      	movs	r6, #0
 800b22e:	42a6      	cmp	r6, r4
 800b230:	d105      	bne.n	800b23e <__libc_init_array+0x2e>
 800b232:	bd70      	pop	{r4, r5, r6, pc}
 800b234:	f855 3b04 	ldr.w	r3, [r5], #4
 800b238:	4798      	blx	r3
 800b23a:	3601      	adds	r6, #1
 800b23c:	e7ee      	b.n	800b21c <__libc_init_array+0xc>
 800b23e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b242:	4798      	blx	r3
 800b244:	3601      	adds	r6, #1
 800b246:	e7f2      	b.n	800b22e <__libc_init_array+0x1e>
 800b248:	0800c1b4 	.word	0x0800c1b4
 800b24c:	0800c1b4 	.word	0x0800c1b4
 800b250:	0800c1b4 	.word	0x0800c1b4
 800b254:	0800c1b8 	.word	0x0800c1b8

0800b258 <__retarget_lock_acquire_recursive>:
 800b258:	4770      	bx	lr

0800b25a <__retarget_lock_release_recursive>:
 800b25a:	4770      	bx	lr

0800b25c <cosf>:
 800b25c:	ee10 3a10 	vmov	r3, s0
 800b260:	b507      	push	{r0, r1, r2, lr}
 800b262:	4a1e      	ldr	r2, [pc, #120]	@ (800b2dc <cosf+0x80>)
 800b264:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b268:	4293      	cmp	r3, r2
 800b26a:	d806      	bhi.n	800b27a <cosf+0x1e>
 800b26c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800b2e0 <cosf+0x84>
 800b270:	b003      	add	sp, #12
 800b272:	f85d eb04 	ldr.w	lr, [sp], #4
 800b276:	f000 b87b 	b.w	800b370 <__kernel_cosf>
 800b27a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b27e:	d304      	bcc.n	800b28a <cosf+0x2e>
 800b280:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b284:	b003      	add	sp, #12
 800b286:	f85d fb04 	ldr.w	pc, [sp], #4
 800b28a:	4668      	mov	r0, sp
 800b28c:	f000 f910 	bl	800b4b0 <__ieee754_rem_pio2f>
 800b290:	f000 0003 	and.w	r0, r0, #3
 800b294:	2801      	cmp	r0, #1
 800b296:	d009      	beq.n	800b2ac <cosf+0x50>
 800b298:	2802      	cmp	r0, #2
 800b29a:	d010      	beq.n	800b2be <cosf+0x62>
 800b29c:	b9b0      	cbnz	r0, 800b2cc <cosf+0x70>
 800b29e:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2a2:	ed9d 0a00 	vldr	s0, [sp]
 800b2a6:	f000 f863 	bl	800b370 <__kernel_cosf>
 800b2aa:	e7eb      	b.n	800b284 <cosf+0x28>
 800b2ac:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2b0:	ed9d 0a00 	vldr	s0, [sp]
 800b2b4:	f000 f8b4 	bl	800b420 <__kernel_sinf>
 800b2b8:	eeb1 0a40 	vneg.f32	s0, s0
 800b2bc:	e7e2      	b.n	800b284 <cosf+0x28>
 800b2be:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2c2:	ed9d 0a00 	vldr	s0, [sp]
 800b2c6:	f000 f853 	bl	800b370 <__kernel_cosf>
 800b2ca:	e7f5      	b.n	800b2b8 <cosf+0x5c>
 800b2cc:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2d0:	ed9d 0a00 	vldr	s0, [sp]
 800b2d4:	2001      	movs	r0, #1
 800b2d6:	f000 f8a3 	bl	800b420 <__kernel_sinf>
 800b2da:	e7d3      	b.n	800b284 <cosf+0x28>
 800b2dc:	3f490fd8 	.word	0x3f490fd8
 800b2e0:	00000000 	.word	0x00000000

0800b2e4 <sinf>:
 800b2e4:	ee10 3a10 	vmov	r3, s0
 800b2e8:	b507      	push	{r0, r1, r2, lr}
 800b2ea:	4a1f      	ldr	r2, [pc, #124]	@ (800b368 <sinf+0x84>)
 800b2ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d807      	bhi.n	800b304 <sinf+0x20>
 800b2f4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b36c <sinf+0x88>
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	b003      	add	sp, #12
 800b2fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b300:	f000 b88e 	b.w	800b420 <__kernel_sinf>
 800b304:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b308:	d304      	bcc.n	800b314 <sinf+0x30>
 800b30a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b30e:	b003      	add	sp, #12
 800b310:	f85d fb04 	ldr.w	pc, [sp], #4
 800b314:	4668      	mov	r0, sp
 800b316:	f000 f8cb 	bl	800b4b0 <__ieee754_rem_pio2f>
 800b31a:	f000 0003 	and.w	r0, r0, #3
 800b31e:	2801      	cmp	r0, #1
 800b320:	d00a      	beq.n	800b338 <sinf+0x54>
 800b322:	2802      	cmp	r0, #2
 800b324:	d00f      	beq.n	800b346 <sinf+0x62>
 800b326:	b9c0      	cbnz	r0, 800b35a <sinf+0x76>
 800b328:	eddd 0a01 	vldr	s1, [sp, #4]
 800b32c:	ed9d 0a00 	vldr	s0, [sp]
 800b330:	2001      	movs	r0, #1
 800b332:	f000 f875 	bl	800b420 <__kernel_sinf>
 800b336:	e7ea      	b.n	800b30e <sinf+0x2a>
 800b338:	eddd 0a01 	vldr	s1, [sp, #4]
 800b33c:	ed9d 0a00 	vldr	s0, [sp]
 800b340:	f000 f816 	bl	800b370 <__kernel_cosf>
 800b344:	e7e3      	b.n	800b30e <sinf+0x2a>
 800b346:	eddd 0a01 	vldr	s1, [sp, #4]
 800b34a:	ed9d 0a00 	vldr	s0, [sp]
 800b34e:	2001      	movs	r0, #1
 800b350:	f000 f866 	bl	800b420 <__kernel_sinf>
 800b354:	eeb1 0a40 	vneg.f32	s0, s0
 800b358:	e7d9      	b.n	800b30e <sinf+0x2a>
 800b35a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b35e:	ed9d 0a00 	vldr	s0, [sp]
 800b362:	f000 f805 	bl	800b370 <__kernel_cosf>
 800b366:	e7f5      	b.n	800b354 <sinf+0x70>
 800b368:	3f490fd8 	.word	0x3f490fd8
 800b36c:	00000000 	.word	0x00000000

0800b370 <__kernel_cosf>:
 800b370:	ee10 3a10 	vmov	r3, s0
 800b374:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b378:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b37c:	eef0 6a40 	vmov.f32	s13, s0
 800b380:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b384:	d204      	bcs.n	800b390 <__kernel_cosf+0x20>
 800b386:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b38a:	ee17 2a90 	vmov	r2, s15
 800b38e:	b342      	cbz	r2, 800b3e2 <__kernel_cosf+0x72>
 800b390:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b394:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b400 <__kernel_cosf+0x90>
 800b398:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b404 <__kernel_cosf+0x94>
 800b39c:	4a1a      	ldr	r2, [pc, #104]	@ (800b408 <__kernel_cosf+0x98>)
 800b39e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b40c <__kernel_cosf+0x9c>
 800b3a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b3ac:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b410 <__kernel_cosf+0xa0>
 800b3b0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b3b4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b414 <__kernel_cosf+0xa4>
 800b3b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b3bc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b418 <__kernel_cosf+0xa8>
 800b3c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b3c4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b3c8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b3cc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b3d0:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b3d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3d8:	d804      	bhi.n	800b3e4 <__kernel_cosf+0x74>
 800b3da:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b3de:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b3e2:	4770      	bx	lr
 800b3e4:	4a0d      	ldr	r2, [pc, #52]	@ (800b41c <__kernel_cosf+0xac>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	bf9a      	itte	ls
 800b3ea:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b3ee:	ee07 3a10 	vmovls	s14, r3
 800b3f2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b3f6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b3fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3fe:	e7ec      	b.n	800b3da <__kernel_cosf+0x6a>
 800b400:	ad47d74e 	.word	0xad47d74e
 800b404:	310f74f6 	.word	0x310f74f6
 800b408:	3e999999 	.word	0x3e999999
 800b40c:	b493f27c 	.word	0xb493f27c
 800b410:	37d00d01 	.word	0x37d00d01
 800b414:	bab60b61 	.word	0xbab60b61
 800b418:	3d2aaaab 	.word	0x3d2aaaab
 800b41c:	3f480000 	.word	0x3f480000

0800b420 <__kernel_sinf>:
 800b420:	ee10 3a10 	vmov	r3, s0
 800b424:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b428:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b42c:	d204      	bcs.n	800b438 <__kernel_sinf+0x18>
 800b42e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b432:	ee17 3a90 	vmov	r3, s15
 800b436:	b35b      	cbz	r3, 800b490 <__kernel_sinf+0x70>
 800b438:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b43c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b494 <__kernel_sinf+0x74>
 800b440:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b498 <__kernel_sinf+0x78>
 800b444:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b448:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b49c <__kernel_sinf+0x7c>
 800b44c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b450:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b4a0 <__kernel_sinf+0x80>
 800b454:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b458:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b4a4 <__kernel_sinf+0x84>
 800b45c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b460:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b464:	b930      	cbnz	r0, 800b474 <__kernel_sinf+0x54>
 800b466:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b4a8 <__kernel_sinf+0x88>
 800b46a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b46e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b472:	4770      	bx	lr
 800b474:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b478:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b47c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b480:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b484:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b4ac <__kernel_sinf+0x8c>
 800b488:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b48c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	2f2ec9d3 	.word	0x2f2ec9d3
 800b498:	b2d72f34 	.word	0xb2d72f34
 800b49c:	3638ef1b 	.word	0x3638ef1b
 800b4a0:	b9500d01 	.word	0xb9500d01
 800b4a4:	3c088889 	.word	0x3c088889
 800b4a8:	be2aaaab 	.word	0xbe2aaaab
 800b4ac:	3e2aaaab 	.word	0x3e2aaaab

0800b4b0 <__ieee754_rem_pio2f>:
 800b4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4b2:	ee10 6a10 	vmov	r6, s0
 800b4b6:	4b88      	ldr	r3, [pc, #544]	@ (800b6d8 <__ieee754_rem_pio2f+0x228>)
 800b4b8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b4bc:	429d      	cmp	r5, r3
 800b4be:	b087      	sub	sp, #28
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	d805      	bhi.n	800b4d0 <__ieee754_rem_pio2f+0x20>
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	ed80 0a00 	vstr	s0, [r0]
 800b4ca:	6043      	str	r3, [r0, #4]
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	e022      	b.n	800b516 <__ieee754_rem_pio2f+0x66>
 800b4d0:	4b82      	ldr	r3, [pc, #520]	@ (800b6dc <__ieee754_rem_pio2f+0x22c>)
 800b4d2:	429d      	cmp	r5, r3
 800b4d4:	d83a      	bhi.n	800b54c <__ieee754_rem_pio2f+0x9c>
 800b4d6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b4da:	2e00      	cmp	r6, #0
 800b4dc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b6e0 <__ieee754_rem_pio2f+0x230>
 800b4e0:	4a80      	ldr	r2, [pc, #512]	@ (800b6e4 <__ieee754_rem_pio2f+0x234>)
 800b4e2:	f023 030f 	bic.w	r3, r3, #15
 800b4e6:	dd18      	ble.n	800b51a <__ieee754_rem_pio2f+0x6a>
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b4ee:	bf09      	itett	eq
 800b4f0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b6e8 <__ieee754_rem_pio2f+0x238>
 800b4f4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b6ec <__ieee754_rem_pio2f+0x23c>
 800b4f8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b6f0 <__ieee754_rem_pio2f+0x240>
 800b4fc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b500:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b504:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b508:	ed80 7a00 	vstr	s14, [r0]
 800b50c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b510:	edc0 7a01 	vstr	s15, [r0, #4]
 800b514:	2001      	movs	r0, #1
 800b516:	b007      	add	sp, #28
 800b518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b51a:	4293      	cmp	r3, r2
 800b51c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b520:	bf09      	itett	eq
 800b522:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b6e8 <__ieee754_rem_pio2f+0x238>
 800b526:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b6ec <__ieee754_rem_pio2f+0x23c>
 800b52a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b6f0 <__ieee754_rem_pio2f+0x240>
 800b52e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b532:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b536:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b53a:	ed80 7a00 	vstr	s14, [r0]
 800b53e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b542:	edc0 7a01 	vstr	s15, [r0, #4]
 800b546:	f04f 30ff 	mov.w	r0, #4294967295
 800b54a:	e7e4      	b.n	800b516 <__ieee754_rem_pio2f+0x66>
 800b54c:	4b69      	ldr	r3, [pc, #420]	@ (800b6f4 <__ieee754_rem_pio2f+0x244>)
 800b54e:	429d      	cmp	r5, r3
 800b550:	d873      	bhi.n	800b63a <__ieee754_rem_pio2f+0x18a>
 800b552:	f000 f8dd 	bl	800b710 <fabsf>
 800b556:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b6f8 <__ieee754_rem_pio2f+0x248>
 800b55a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b55e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b56a:	ee17 0a90 	vmov	r0, s15
 800b56e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b6e0 <__ieee754_rem_pio2f+0x230>
 800b572:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b576:	281f      	cmp	r0, #31
 800b578:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b6ec <__ieee754_rem_pio2f+0x23c>
 800b57c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b580:	eeb1 6a47 	vneg.f32	s12, s14
 800b584:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b588:	ee16 1a90 	vmov	r1, s13
 800b58c:	dc09      	bgt.n	800b5a2 <__ieee754_rem_pio2f+0xf2>
 800b58e:	4a5b      	ldr	r2, [pc, #364]	@ (800b6fc <__ieee754_rem_pio2f+0x24c>)
 800b590:	1e47      	subs	r7, r0, #1
 800b592:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b596:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b59a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d107      	bne.n	800b5b2 <__ieee754_rem_pio2f+0x102>
 800b5a2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b5a6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b5aa:	2a08      	cmp	r2, #8
 800b5ac:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b5b0:	dc14      	bgt.n	800b5dc <__ieee754_rem_pio2f+0x12c>
 800b5b2:	6021      	str	r1, [r4, #0]
 800b5b4:	ed94 7a00 	vldr	s14, [r4]
 800b5b8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b5bc:	2e00      	cmp	r6, #0
 800b5be:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b5c2:	ed84 0a01 	vstr	s0, [r4, #4]
 800b5c6:	daa6      	bge.n	800b516 <__ieee754_rem_pio2f+0x66>
 800b5c8:	eeb1 7a47 	vneg.f32	s14, s14
 800b5cc:	eeb1 0a40 	vneg.f32	s0, s0
 800b5d0:	ed84 7a00 	vstr	s14, [r4]
 800b5d4:	ed84 0a01 	vstr	s0, [r4, #4]
 800b5d8:	4240      	negs	r0, r0
 800b5da:	e79c      	b.n	800b516 <__ieee754_rem_pio2f+0x66>
 800b5dc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b6e8 <__ieee754_rem_pio2f+0x238>
 800b5e0:	eef0 6a40 	vmov.f32	s13, s0
 800b5e4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b5e8:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b5ec:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b5f0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b6f0 <__ieee754_rem_pio2f+0x240>
 800b5f4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b5f8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b5fc:	ee15 2a90 	vmov	r2, s11
 800b600:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b604:	1a5b      	subs	r3, r3, r1
 800b606:	2b19      	cmp	r3, #25
 800b608:	dc04      	bgt.n	800b614 <__ieee754_rem_pio2f+0x164>
 800b60a:	edc4 5a00 	vstr	s11, [r4]
 800b60e:	eeb0 0a66 	vmov.f32	s0, s13
 800b612:	e7cf      	b.n	800b5b4 <__ieee754_rem_pio2f+0x104>
 800b614:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b700 <__ieee754_rem_pio2f+0x250>
 800b618:	eeb0 0a66 	vmov.f32	s0, s13
 800b61c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b620:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b624:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b704 <__ieee754_rem_pio2f+0x254>
 800b628:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b62c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b630:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b634:	ed84 7a00 	vstr	s14, [r4]
 800b638:	e7bc      	b.n	800b5b4 <__ieee754_rem_pio2f+0x104>
 800b63a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b63e:	d306      	bcc.n	800b64e <__ieee754_rem_pio2f+0x19e>
 800b640:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b644:	edc0 7a01 	vstr	s15, [r0, #4]
 800b648:	edc0 7a00 	vstr	s15, [r0]
 800b64c:	e73e      	b.n	800b4cc <__ieee754_rem_pio2f+0x1c>
 800b64e:	15ea      	asrs	r2, r5, #23
 800b650:	3a86      	subs	r2, #134	@ 0x86
 800b652:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b656:	ee07 3a90 	vmov	s15, r3
 800b65a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b65e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b708 <__ieee754_rem_pio2f+0x258>
 800b662:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b666:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b66a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b66e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b672:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b676:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b67a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b67e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b682:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b686:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b68e:	edcd 7a05 	vstr	s15, [sp, #20]
 800b692:	d11e      	bne.n	800b6d2 <__ieee754_rem_pio2f+0x222>
 800b694:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b69c:	bf0c      	ite	eq
 800b69e:	2301      	moveq	r3, #1
 800b6a0:	2302      	movne	r3, #2
 800b6a2:	491a      	ldr	r1, [pc, #104]	@ (800b70c <__ieee754_rem_pio2f+0x25c>)
 800b6a4:	9101      	str	r1, [sp, #4]
 800b6a6:	2102      	movs	r1, #2
 800b6a8:	9100      	str	r1, [sp, #0]
 800b6aa:	a803      	add	r0, sp, #12
 800b6ac:	4621      	mov	r1, r4
 800b6ae:	f000 f89d 	bl	800b7ec <__kernel_rem_pio2f>
 800b6b2:	2e00      	cmp	r6, #0
 800b6b4:	f6bf af2f 	bge.w	800b516 <__ieee754_rem_pio2f+0x66>
 800b6b8:	edd4 7a00 	vldr	s15, [r4]
 800b6bc:	eef1 7a67 	vneg.f32	s15, s15
 800b6c0:	edc4 7a00 	vstr	s15, [r4]
 800b6c4:	edd4 7a01 	vldr	s15, [r4, #4]
 800b6c8:	eef1 7a67 	vneg.f32	s15, s15
 800b6cc:	edc4 7a01 	vstr	s15, [r4, #4]
 800b6d0:	e782      	b.n	800b5d8 <__ieee754_rem_pio2f+0x128>
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	e7e5      	b.n	800b6a2 <__ieee754_rem_pio2f+0x1f2>
 800b6d6:	bf00      	nop
 800b6d8:	3f490fd8 	.word	0x3f490fd8
 800b6dc:	4016cbe3 	.word	0x4016cbe3
 800b6e0:	3fc90f80 	.word	0x3fc90f80
 800b6e4:	3fc90fd0 	.word	0x3fc90fd0
 800b6e8:	37354400 	.word	0x37354400
 800b6ec:	37354443 	.word	0x37354443
 800b6f0:	2e85a308 	.word	0x2e85a308
 800b6f4:	43490f80 	.word	0x43490f80
 800b6f8:	3f22f984 	.word	0x3f22f984
 800b6fc:	0800bddc 	.word	0x0800bddc
 800b700:	2e85a300 	.word	0x2e85a300
 800b704:	248d3132 	.word	0x248d3132
 800b708:	43800000 	.word	0x43800000
 800b70c:	0800be5c 	.word	0x0800be5c

0800b710 <fabsf>:
 800b710:	ee10 3a10 	vmov	r3, s0
 800b714:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b718:	ee00 3a10 	vmov	s0, r3
 800b71c:	4770      	bx	lr
	...

0800b720 <scalbnf>:
 800b720:	ee10 3a10 	vmov	r3, s0
 800b724:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b728:	d02b      	beq.n	800b782 <scalbnf+0x62>
 800b72a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b72e:	d302      	bcc.n	800b736 <scalbnf+0x16>
 800b730:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b734:	4770      	bx	lr
 800b736:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b73a:	d123      	bne.n	800b784 <scalbnf+0x64>
 800b73c:	4b24      	ldr	r3, [pc, #144]	@ (800b7d0 <scalbnf+0xb0>)
 800b73e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b7d4 <scalbnf+0xb4>
 800b742:	4298      	cmp	r0, r3
 800b744:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b748:	db17      	blt.n	800b77a <scalbnf+0x5a>
 800b74a:	ee10 3a10 	vmov	r3, s0
 800b74e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b752:	3a19      	subs	r2, #25
 800b754:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b758:	4288      	cmp	r0, r1
 800b75a:	dd15      	ble.n	800b788 <scalbnf+0x68>
 800b75c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b7d8 <scalbnf+0xb8>
 800b760:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b7dc <scalbnf+0xbc>
 800b764:	ee10 3a10 	vmov	r3, s0
 800b768:	eeb0 7a67 	vmov.f32	s14, s15
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	bfb8      	it	lt
 800b770:	eef0 7a66 	vmovlt.f32	s15, s13
 800b774:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b778:	4770      	bx	lr
 800b77a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b7e0 <scalbnf+0xc0>
 800b77e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b782:	4770      	bx	lr
 800b784:	0dd2      	lsrs	r2, r2, #23
 800b786:	e7e5      	b.n	800b754 <scalbnf+0x34>
 800b788:	4410      	add	r0, r2
 800b78a:	28fe      	cmp	r0, #254	@ 0xfe
 800b78c:	dce6      	bgt.n	800b75c <scalbnf+0x3c>
 800b78e:	2800      	cmp	r0, #0
 800b790:	dd06      	ble.n	800b7a0 <scalbnf+0x80>
 800b792:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b796:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b79a:	ee00 3a10 	vmov	s0, r3
 800b79e:	4770      	bx	lr
 800b7a0:	f110 0f16 	cmn.w	r0, #22
 800b7a4:	da09      	bge.n	800b7ba <scalbnf+0x9a>
 800b7a6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b7e0 <scalbnf+0xc0>
 800b7aa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b7e4 <scalbnf+0xc4>
 800b7ae:	ee10 3a10 	vmov	r3, s0
 800b7b2:	eeb0 7a67 	vmov.f32	s14, s15
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	e7d9      	b.n	800b76e <scalbnf+0x4e>
 800b7ba:	3019      	adds	r0, #25
 800b7bc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b7c0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b7c4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b7e8 <scalbnf+0xc8>
 800b7c8:	ee07 3a90 	vmov	s15, r3
 800b7cc:	e7d7      	b.n	800b77e <scalbnf+0x5e>
 800b7ce:	bf00      	nop
 800b7d0:	ffff3cb0 	.word	0xffff3cb0
 800b7d4:	4c000000 	.word	0x4c000000
 800b7d8:	7149f2ca 	.word	0x7149f2ca
 800b7dc:	f149f2ca 	.word	0xf149f2ca
 800b7e0:	0da24260 	.word	0x0da24260
 800b7e4:	8da24260 	.word	0x8da24260
 800b7e8:	33000000 	.word	0x33000000

0800b7ec <__kernel_rem_pio2f>:
 800b7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f0:	ed2d 8b04 	vpush	{d8-d9}
 800b7f4:	b0d9      	sub	sp, #356	@ 0x164
 800b7f6:	4690      	mov	r8, r2
 800b7f8:	9001      	str	r0, [sp, #4]
 800b7fa:	4ab6      	ldr	r2, [pc, #728]	@ (800bad4 <__kernel_rem_pio2f+0x2e8>)
 800b7fc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b7fe:	f118 0f04 	cmn.w	r8, #4
 800b802:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b806:	460f      	mov	r7, r1
 800b808:	f103 3bff 	add.w	fp, r3, #4294967295
 800b80c:	db26      	blt.n	800b85c <__kernel_rem_pio2f+0x70>
 800b80e:	f1b8 0203 	subs.w	r2, r8, #3
 800b812:	bf48      	it	mi
 800b814:	f108 0204 	addmi.w	r2, r8, #4
 800b818:	10d2      	asrs	r2, r2, #3
 800b81a:	1c55      	adds	r5, r2, #1
 800b81c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b81e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800bae4 <__kernel_rem_pio2f+0x2f8>
 800b822:	00e8      	lsls	r0, r5, #3
 800b824:	eba2 060b 	sub.w	r6, r2, fp
 800b828:	9002      	str	r0, [sp, #8]
 800b82a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b82e:	eb0a 0c0b 	add.w	ip, sl, fp
 800b832:	ac1c      	add	r4, sp, #112	@ 0x70
 800b834:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b838:	2000      	movs	r0, #0
 800b83a:	4560      	cmp	r0, ip
 800b83c:	dd10      	ble.n	800b860 <__kernel_rem_pio2f+0x74>
 800b83e:	a91c      	add	r1, sp, #112	@ 0x70
 800b840:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b844:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b848:	2600      	movs	r6, #0
 800b84a:	4556      	cmp	r6, sl
 800b84c:	dc24      	bgt.n	800b898 <__kernel_rem_pio2f+0xac>
 800b84e:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b852:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800bae4 <__kernel_rem_pio2f+0x2f8>
 800b856:	4684      	mov	ip, r0
 800b858:	2400      	movs	r4, #0
 800b85a:	e016      	b.n	800b88a <__kernel_rem_pio2f+0x9e>
 800b85c:	2200      	movs	r2, #0
 800b85e:	e7dc      	b.n	800b81a <__kernel_rem_pio2f+0x2e>
 800b860:	42c6      	cmn	r6, r0
 800b862:	bf5d      	ittte	pl
 800b864:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b868:	ee07 1a90 	vmovpl	s15, r1
 800b86c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b870:	eef0 7a47 	vmovmi.f32	s15, s14
 800b874:	ece4 7a01 	vstmia	r4!, {s15}
 800b878:	3001      	adds	r0, #1
 800b87a:	e7de      	b.n	800b83a <__kernel_rem_pio2f+0x4e>
 800b87c:	ecfe 6a01 	vldmia	lr!, {s13}
 800b880:	ed3c 7a01 	vldmdb	ip!, {s14}
 800b884:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b888:	3401      	adds	r4, #1
 800b88a:	455c      	cmp	r4, fp
 800b88c:	ddf6      	ble.n	800b87c <__kernel_rem_pio2f+0x90>
 800b88e:	ece9 7a01 	vstmia	r9!, {s15}
 800b892:	3601      	adds	r6, #1
 800b894:	3004      	adds	r0, #4
 800b896:	e7d8      	b.n	800b84a <__kernel_rem_pio2f+0x5e>
 800b898:	a908      	add	r1, sp, #32
 800b89a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b89e:	9104      	str	r1, [sp, #16]
 800b8a0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b8a2:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800bae0 <__kernel_rem_pio2f+0x2f4>
 800b8a6:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800badc <__kernel_rem_pio2f+0x2f0>
 800b8aa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b8ae:	9203      	str	r2, [sp, #12]
 800b8b0:	4654      	mov	r4, sl
 800b8b2:	00a2      	lsls	r2, r4, #2
 800b8b4:	9205      	str	r2, [sp, #20]
 800b8b6:	aa58      	add	r2, sp, #352	@ 0x160
 800b8b8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b8bc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800b8c0:	a944      	add	r1, sp, #272	@ 0x110
 800b8c2:	aa08      	add	r2, sp, #32
 800b8c4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b8c8:	4694      	mov	ip, r2
 800b8ca:	4626      	mov	r6, r4
 800b8cc:	2e00      	cmp	r6, #0
 800b8ce:	dc4c      	bgt.n	800b96a <__kernel_rem_pio2f+0x17e>
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b8d6:	f7ff ff23 	bl	800b720 <scalbnf>
 800b8da:	eeb0 8a40 	vmov.f32	s16, s0
 800b8de:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800b8e2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b8e6:	f000 f9e9 	bl	800bcbc <floorf>
 800b8ea:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800b8ee:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b8f2:	2d00      	cmp	r5, #0
 800b8f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b8f8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b8fc:	ee17 9a90 	vmov	r9, s15
 800b900:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b904:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b908:	dd41      	ble.n	800b98e <__kernel_rem_pio2f+0x1a2>
 800b90a:	f104 3cff 	add.w	ip, r4, #4294967295
 800b90e:	a908      	add	r1, sp, #32
 800b910:	f1c5 0e08 	rsb	lr, r5, #8
 800b914:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800b918:	fa46 f00e 	asr.w	r0, r6, lr
 800b91c:	4481      	add	r9, r0
 800b91e:	fa00 f00e 	lsl.w	r0, r0, lr
 800b922:	1a36      	subs	r6, r6, r0
 800b924:	f1c5 0007 	rsb	r0, r5, #7
 800b928:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800b92c:	4106      	asrs	r6, r0
 800b92e:	2e00      	cmp	r6, #0
 800b930:	dd3c      	ble.n	800b9ac <__kernel_rem_pio2f+0x1c0>
 800b932:	f04f 0e00 	mov.w	lr, #0
 800b936:	f109 0901 	add.w	r9, r9, #1
 800b93a:	4670      	mov	r0, lr
 800b93c:	4574      	cmp	r4, lr
 800b93e:	dc68      	bgt.n	800ba12 <__kernel_rem_pio2f+0x226>
 800b940:	2d00      	cmp	r5, #0
 800b942:	dd03      	ble.n	800b94c <__kernel_rem_pio2f+0x160>
 800b944:	2d01      	cmp	r5, #1
 800b946:	d074      	beq.n	800ba32 <__kernel_rem_pio2f+0x246>
 800b948:	2d02      	cmp	r5, #2
 800b94a:	d07d      	beq.n	800ba48 <__kernel_rem_pio2f+0x25c>
 800b94c:	2e02      	cmp	r6, #2
 800b94e:	d12d      	bne.n	800b9ac <__kernel_rem_pio2f+0x1c0>
 800b950:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b954:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b958:	b340      	cbz	r0, 800b9ac <__kernel_rem_pio2f+0x1c0>
 800b95a:	4628      	mov	r0, r5
 800b95c:	9306      	str	r3, [sp, #24]
 800b95e:	f7ff fedf 	bl	800b720 <scalbnf>
 800b962:	9b06      	ldr	r3, [sp, #24]
 800b964:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b968:	e020      	b.n	800b9ac <__kernel_rem_pio2f+0x1c0>
 800b96a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b96e:	3e01      	subs	r6, #1
 800b970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b978:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b97c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b980:	ecac 0a01 	vstmia	ip!, {s0}
 800b984:	ed30 0a01 	vldmdb	r0!, {s0}
 800b988:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b98c:	e79e      	b.n	800b8cc <__kernel_rem_pio2f+0xe0>
 800b98e:	d105      	bne.n	800b99c <__kernel_rem_pio2f+0x1b0>
 800b990:	1e60      	subs	r0, r4, #1
 800b992:	a908      	add	r1, sp, #32
 800b994:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b998:	11f6      	asrs	r6, r6, #7
 800b99a:	e7c8      	b.n	800b92e <__kernel_rem_pio2f+0x142>
 800b99c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b9a0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9a8:	da31      	bge.n	800ba0e <__kernel_rem_pio2f+0x222>
 800b9aa:	2600      	movs	r6, #0
 800b9ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9b4:	f040 8098 	bne.w	800bae8 <__kernel_rem_pio2f+0x2fc>
 800b9b8:	1e60      	subs	r0, r4, #1
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	4550      	cmp	r0, sl
 800b9be:	da4b      	bge.n	800ba58 <__kernel_rem_pio2f+0x26c>
 800b9c0:	2a00      	cmp	r2, #0
 800b9c2:	d065      	beq.n	800ba90 <__kernel_rem_pio2f+0x2a4>
 800b9c4:	3c01      	subs	r4, #1
 800b9c6:	ab08      	add	r3, sp, #32
 800b9c8:	3d08      	subs	r5, #8
 800b9ca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d0f8      	beq.n	800b9c4 <__kernel_rem_pio2f+0x1d8>
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b9d8:	f7ff fea2 	bl	800b720 <scalbnf>
 800b9dc:	1c63      	adds	r3, r4, #1
 800b9de:	aa44      	add	r2, sp, #272	@ 0x110
 800b9e0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800bae0 <__kernel_rem_pio2f+0x2f4>
 800b9e4:	0099      	lsls	r1, r3, #2
 800b9e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b9ea:	4623      	mov	r3, r4
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f280 80a9 	bge.w	800bb44 <__kernel_rem_pio2f+0x358>
 800b9f2:	4623      	mov	r3, r4
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f2c0 80c7 	blt.w	800bb88 <__kernel_rem_pio2f+0x39c>
 800b9fa:	aa44      	add	r2, sp, #272	@ 0x110
 800b9fc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ba00:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800bad8 <__kernel_rem_pio2f+0x2ec>
 800ba04:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800bae4 <__kernel_rem_pio2f+0x2f8>
 800ba08:	2000      	movs	r0, #0
 800ba0a:	1ae2      	subs	r2, r4, r3
 800ba0c:	e0b1      	b.n	800bb72 <__kernel_rem_pio2f+0x386>
 800ba0e:	2602      	movs	r6, #2
 800ba10:	e78f      	b.n	800b932 <__kernel_rem_pio2f+0x146>
 800ba12:	f852 1b04 	ldr.w	r1, [r2], #4
 800ba16:	b948      	cbnz	r0, 800ba2c <__kernel_rem_pio2f+0x240>
 800ba18:	b121      	cbz	r1, 800ba24 <__kernel_rem_pio2f+0x238>
 800ba1a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800ba1e:	f842 1c04 	str.w	r1, [r2, #-4]
 800ba22:	2101      	movs	r1, #1
 800ba24:	f10e 0e01 	add.w	lr, lr, #1
 800ba28:	4608      	mov	r0, r1
 800ba2a:	e787      	b.n	800b93c <__kernel_rem_pio2f+0x150>
 800ba2c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800ba30:	e7f5      	b.n	800ba1e <__kernel_rem_pio2f+0x232>
 800ba32:	f104 3cff 	add.w	ip, r4, #4294967295
 800ba36:	aa08      	add	r2, sp, #32
 800ba38:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ba3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ba40:	a908      	add	r1, sp, #32
 800ba42:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800ba46:	e781      	b.n	800b94c <__kernel_rem_pio2f+0x160>
 800ba48:	f104 3cff 	add.w	ip, r4, #4294967295
 800ba4c:	aa08      	add	r2, sp, #32
 800ba4e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ba52:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800ba56:	e7f3      	b.n	800ba40 <__kernel_rem_pio2f+0x254>
 800ba58:	a908      	add	r1, sp, #32
 800ba5a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ba5e:	3801      	subs	r0, #1
 800ba60:	430a      	orrs	r2, r1
 800ba62:	e7ab      	b.n	800b9bc <__kernel_rem_pio2f+0x1d0>
 800ba64:	3201      	adds	r2, #1
 800ba66:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800ba6a:	2e00      	cmp	r6, #0
 800ba6c:	d0fa      	beq.n	800ba64 <__kernel_rem_pio2f+0x278>
 800ba6e:	9905      	ldr	r1, [sp, #20]
 800ba70:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800ba74:	eb0d 0001 	add.w	r0, sp, r1
 800ba78:	18e6      	adds	r6, r4, r3
 800ba7a:	a91c      	add	r1, sp, #112	@ 0x70
 800ba7c:	f104 0c01 	add.w	ip, r4, #1
 800ba80:	384c      	subs	r0, #76	@ 0x4c
 800ba82:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800ba86:	4422      	add	r2, r4
 800ba88:	4562      	cmp	r2, ip
 800ba8a:	da04      	bge.n	800ba96 <__kernel_rem_pio2f+0x2aa>
 800ba8c:	4614      	mov	r4, r2
 800ba8e:	e710      	b.n	800b8b2 <__kernel_rem_pio2f+0xc6>
 800ba90:	9804      	ldr	r0, [sp, #16]
 800ba92:	2201      	movs	r2, #1
 800ba94:	e7e7      	b.n	800ba66 <__kernel_rem_pio2f+0x27a>
 800ba96:	9903      	ldr	r1, [sp, #12]
 800ba98:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ba9c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800baa0:	9105      	str	r1, [sp, #20]
 800baa2:	ee07 1a90 	vmov	s15, r1
 800baa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800baaa:	2400      	movs	r4, #0
 800baac:	ece6 7a01 	vstmia	r6!, {s15}
 800bab0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800bae4 <__kernel_rem_pio2f+0x2f8>
 800bab4:	46b1      	mov	r9, r6
 800bab6:	455c      	cmp	r4, fp
 800bab8:	dd04      	ble.n	800bac4 <__kernel_rem_pio2f+0x2d8>
 800baba:	ece0 7a01 	vstmia	r0!, {s15}
 800babe:	f10c 0c01 	add.w	ip, ip, #1
 800bac2:	e7e1      	b.n	800ba88 <__kernel_rem_pio2f+0x29c>
 800bac4:	ecfe 6a01 	vldmia	lr!, {s13}
 800bac8:	ed39 7a01 	vldmdb	r9!, {s14}
 800bacc:	3401      	adds	r4, #1
 800bace:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bad2:	e7f0      	b.n	800bab6 <__kernel_rem_pio2f+0x2ca>
 800bad4:	0800c1a0 	.word	0x0800c1a0
 800bad8:	0800c174 	.word	0x0800c174
 800badc:	43800000 	.word	0x43800000
 800bae0:	3b800000 	.word	0x3b800000
 800bae4:	00000000 	.word	0x00000000
 800bae8:	9b02      	ldr	r3, [sp, #8]
 800baea:	eeb0 0a48 	vmov.f32	s0, s16
 800baee:	eba3 0008 	sub.w	r0, r3, r8
 800baf2:	f7ff fe15 	bl	800b720 <scalbnf>
 800baf6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800badc <__kernel_rem_pio2f+0x2f0>
 800bafa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb02:	db19      	blt.n	800bb38 <__kernel_rem_pio2f+0x34c>
 800bb04:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800bae0 <__kernel_rem_pio2f+0x2f4>
 800bb08:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bb0c:	aa08      	add	r2, sp, #32
 800bb0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb12:	3508      	adds	r5, #8
 800bb14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb18:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bb1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bb24:	ee10 3a10 	vmov	r3, s0
 800bb28:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bb2c:	ee17 3a90 	vmov	r3, s15
 800bb30:	3401      	adds	r4, #1
 800bb32:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bb36:	e74c      	b.n	800b9d2 <__kernel_rem_pio2f+0x1e6>
 800bb38:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bb3c:	aa08      	add	r2, sp, #32
 800bb3e:	ee10 3a10 	vmov	r3, s0
 800bb42:	e7f6      	b.n	800bb32 <__kernel_rem_pio2f+0x346>
 800bb44:	a808      	add	r0, sp, #32
 800bb46:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800bb4a:	9001      	str	r0, [sp, #4]
 800bb4c:	ee07 0a90 	vmov	s15, r0
 800bb50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb54:	3b01      	subs	r3, #1
 800bb56:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bb5a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bb5e:	ed62 7a01 	vstmdb	r2!, {s15}
 800bb62:	e743      	b.n	800b9ec <__kernel_rem_pio2f+0x200>
 800bb64:	ecfc 6a01 	vldmia	ip!, {s13}
 800bb68:	ecb5 7a01 	vldmia	r5!, {s14}
 800bb6c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bb70:	3001      	adds	r0, #1
 800bb72:	4550      	cmp	r0, sl
 800bb74:	dc01      	bgt.n	800bb7a <__kernel_rem_pio2f+0x38e>
 800bb76:	4290      	cmp	r0, r2
 800bb78:	ddf4      	ble.n	800bb64 <__kernel_rem_pio2f+0x378>
 800bb7a:	a858      	add	r0, sp, #352	@ 0x160
 800bb7c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800bb80:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800bb84:	3b01      	subs	r3, #1
 800bb86:	e735      	b.n	800b9f4 <__kernel_rem_pio2f+0x208>
 800bb88:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800bb8a:	2b02      	cmp	r3, #2
 800bb8c:	dc09      	bgt.n	800bba2 <__kernel_rem_pio2f+0x3b6>
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	dc27      	bgt.n	800bbe2 <__kernel_rem_pio2f+0x3f6>
 800bb92:	d040      	beq.n	800bc16 <__kernel_rem_pio2f+0x42a>
 800bb94:	f009 0007 	and.w	r0, r9, #7
 800bb98:	b059      	add	sp, #356	@ 0x164
 800bb9a:	ecbd 8b04 	vpop	{d8-d9}
 800bb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800bba4:	2b03      	cmp	r3, #3
 800bba6:	d1f5      	bne.n	800bb94 <__kernel_rem_pio2f+0x3a8>
 800bba8:	aa30      	add	r2, sp, #192	@ 0xc0
 800bbaa:	1f0b      	subs	r3, r1, #4
 800bbac:	4413      	add	r3, r2
 800bbae:	461a      	mov	r2, r3
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	dc50      	bgt.n	800bc58 <__kernel_rem_pio2f+0x46c>
 800bbb6:	4622      	mov	r2, r4
 800bbb8:	2a01      	cmp	r2, #1
 800bbba:	dc5d      	bgt.n	800bc78 <__kernel_rem_pio2f+0x48c>
 800bbbc:	ab30      	add	r3, sp, #192	@ 0xc0
 800bbbe:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800bae4 <__kernel_rem_pio2f+0x2f8>
 800bbc2:	440b      	add	r3, r1
 800bbc4:	2c01      	cmp	r4, #1
 800bbc6:	dc67      	bgt.n	800bc98 <__kernel_rem_pio2f+0x4ac>
 800bbc8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800bbcc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800bbd0:	2e00      	cmp	r6, #0
 800bbd2:	d167      	bne.n	800bca4 <__kernel_rem_pio2f+0x4b8>
 800bbd4:	edc7 6a00 	vstr	s13, [r7]
 800bbd8:	ed87 7a01 	vstr	s14, [r7, #4]
 800bbdc:	edc7 7a02 	vstr	s15, [r7, #8]
 800bbe0:	e7d8      	b.n	800bb94 <__kernel_rem_pio2f+0x3a8>
 800bbe2:	ab30      	add	r3, sp, #192	@ 0xc0
 800bbe4:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800bae4 <__kernel_rem_pio2f+0x2f8>
 800bbe8:	440b      	add	r3, r1
 800bbea:	4622      	mov	r2, r4
 800bbec:	2a00      	cmp	r2, #0
 800bbee:	da24      	bge.n	800bc3a <__kernel_rem_pio2f+0x44e>
 800bbf0:	b34e      	cbz	r6, 800bc46 <__kernel_rem_pio2f+0x45a>
 800bbf2:	eef1 7a47 	vneg.f32	s15, s14
 800bbf6:	edc7 7a00 	vstr	s15, [r7]
 800bbfa:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800bbfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc02:	aa31      	add	r2, sp, #196	@ 0xc4
 800bc04:	2301      	movs	r3, #1
 800bc06:	429c      	cmp	r4, r3
 800bc08:	da20      	bge.n	800bc4c <__kernel_rem_pio2f+0x460>
 800bc0a:	b10e      	cbz	r6, 800bc10 <__kernel_rem_pio2f+0x424>
 800bc0c:	eef1 7a67 	vneg.f32	s15, s15
 800bc10:	edc7 7a01 	vstr	s15, [r7, #4]
 800bc14:	e7be      	b.n	800bb94 <__kernel_rem_pio2f+0x3a8>
 800bc16:	ab30      	add	r3, sp, #192	@ 0xc0
 800bc18:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800bae4 <__kernel_rem_pio2f+0x2f8>
 800bc1c:	440b      	add	r3, r1
 800bc1e:	2c00      	cmp	r4, #0
 800bc20:	da05      	bge.n	800bc2e <__kernel_rem_pio2f+0x442>
 800bc22:	b10e      	cbz	r6, 800bc28 <__kernel_rem_pio2f+0x43c>
 800bc24:	eef1 7a67 	vneg.f32	s15, s15
 800bc28:	edc7 7a00 	vstr	s15, [r7]
 800bc2c:	e7b2      	b.n	800bb94 <__kernel_rem_pio2f+0x3a8>
 800bc2e:	ed33 7a01 	vldmdb	r3!, {s14}
 800bc32:	3c01      	subs	r4, #1
 800bc34:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc38:	e7f1      	b.n	800bc1e <__kernel_rem_pio2f+0x432>
 800bc3a:	ed73 7a01 	vldmdb	r3!, {s15}
 800bc3e:	3a01      	subs	r2, #1
 800bc40:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bc44:	e7d2      	b.n	800bbec <__kernel_rem_pio2f+0x400>
 800bc46:	eef0 7a47 	vmov.f32	s15, s14
 800bc4a:	e7d4      	b.n	800bbf6 <__kernel_rem_pio2f+0x40a>
 800bc4c:	ecb2 7a01 	vldmia	r2!, {s14}
 800bc50:	3301      	adds	r3, #1
 800bc52:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc56:	e7d6      	b.n	800bc06 <__kernel_rem_pio2f+0x41a>
 800bc58:	ed72 7a01 	vldmdb	r2!, {s15}
 800bc5c:	edd2 6a01 	vldr	s13, [r2, #4]
 800bc60:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bc64:	3801      	subs	r0, #1
 800bc66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc6a:	ed82 7a00 	vstr	s14, [r2]
 800bc6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc72:	edc2 7a01 	vstr	s15, [r2, #4]
 800bc76:	e79c      	b.n	800bbb2 <__kernel_rem_pio2f+0x3c6>
 800bc78:	ed73 7a01 	vldmdb	r3!, {s15}
 800bc7c:	edd3 6a01 	vldr	s13, [r3, #4]
 800bc80:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bc84:	3a01      	subs	r2, #1
 800bc86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc8a:	ed83 7a00 	vstr	s14, [r3]
 800bc8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc92:	edc3 7a01 	vstr	s15, [r3, #4]
 800bc96:	e78f      	b.n	800bbb8 <__kernel_rem_pio2f+0x3cc>
 800bc98:	ed33 7a01 	vldmdb	r3!, {s14}
 800bc9c:	3c01      	subs	r4, #1
 800bc9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bca2:	e78f      	b.n	800bbc4 <__kernel_rem_pio2f+0x3d8>
 800bca4:	eef1 6a66 	vneg.f32	s13, s13
 800bca8:	eeb1 7a47 	vneg.f32	s14, s14
 800bcac:	edc7 6a00 	vstr	s13, [r7]
 800bcb0:	ed87 7a01 	vstr	s14, [r7, #4]
 800bcb4:	eef1 7a67 	vneg.f32	s15, s15
 800bcb8:	e790      	b.n	800bbdc <__kernel_rem_pio2f+0x3f0>
 800bcba:	bf00      	nop

0800bcbc <floorf>:
 800bcbc:	ee10 3a10 	vmov	r3, s0
 800bcc0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bcc4:	3a7f      	subs	r2, #127	@ 0x7f
 800bcc6:	2a16      	cmp	r2, #22
 800bcc8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bccc:	dc2b      	bgt.n	800bd26 <floorf+0x6a>
 800bcce:	2a00      	cmp	r2, #0
 800bcd0:	da12      	bge.n	800bcf8 <floorf+0x3c>
 800bcd2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bd38 <floorf+0x7c>
 800bcd6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bcda:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bcde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bce2:	dd06      	ble.n	800bcf2 <floorf+0x36>
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	da24      	bge.n	800bd32 <floorf+0x76>
 800bce8:	2900      	cmp	r1, #0
 800bcea:	4b14      	ldr	r3, [pc, #80]	@ (800bd3c <floorf+0x80>)
 800bcec:	bf08      	it	eq
 800bcee:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bcf2:	ee00 3a10 	vmov	s0, r3
 800bcf6:	4770      	bx	lr
 800bcf8:	4911      	ldr	r1, [pc, #68]	@ (800bd40 <floorf+0x84>)
 800bcfa:	4111      	asrs	r1, r2
 800bcfc:	420b      	tst	r3, r1
 800bcfe:	d0fa      	beq.n	800bcf6 <floorf+0x3a>
 800bd00:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800bd38 <floorf+0x7c>
 800bd04:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bd08:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bd0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd10:	ddef      	ble.n	800bcf2 <floorf+0x36>
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	bfbe      	ittt	lt
 800bd16:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800bd1a:	fa40 f202 	asrlt.w	r2, r0, r2
 800bd1e:	189b      	addlt	r3, r3, r2
 800bd20:	ea23 0301 	bic.w	r3, r3, r1
 800bd24:	e7e5      	b.n	800bcf2 <floorf+0x36>
 800bd26:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bd2a:	d3e4      	bcc.n	800bcf6 <floorf+0x3a>
 800bd2c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bd30:	4770      	bx	lr
 800bd32:	2300      	movs	r3, #0
 800bd34:	e7dd      	b.n	800bcf2 <floorf+0x36>
 800bd36:	bf00      	nop
 800bd38:	7149f2ca 	.word	0x7149f2ca
 800bd3c:	bf800000 	.word	0xbf800000
 800bd40:	007fffff 	.word	0x007fffff

0800bd44 <_init>:
 800bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd46:	bf00      	nop
 800bd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd4a:	bc08      	pop	{r3}
 800bd4c:	469e      	mov	lr, r3
 800bd4e:	4770      	bx	lr

0800bd50 <_fini>:
 800bd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd52:	bf00      	nop
 800bd54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd56:	bc08      	pop	{r3}
 800bd58:	469e      	mov	lr, r3
 800bd5a:	4770      	bx	lr
