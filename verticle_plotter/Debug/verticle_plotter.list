
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014358  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  08014530  08014530  00015530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b60  08014b60  00016394  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014b60  08014b60  00015b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b68  08014b68  00016394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014b68  08014b68  00015b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014b6c  08014b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000394  20000000  08014b70  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002224  20000394  08014f04  00016394  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025b8  08014f04  000165b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016394  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c740  00000000  00000000  000163c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055d5  00000000  00000000  00042b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d10  00000000  00000000  000480e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016b8  00000000  00000000  00049df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db96  00000000  00000000  0004b4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bdeb  00000000  00000000  0007903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a2a9  00000000  00000000  000a4e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bf0d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084c0  00000000  00000000  001bf118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c75d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000394 	.word	0x20000394
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08014518 	.word	0x08014518

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000398 	.word	0x20000398
 8000214:	08014518 	.word	0x08014518

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00a fddc 	bl	800bb9c <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f009 fec5 	bl	800ad80 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe95 	bl	8001e6a <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PID_CONTROLLER_Reset>:

void PID_CONTROLLER_Reset(PID_CONTROLLER *controller) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    controller->ek_1 = 0.0f;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
    controller->ek_2 = 0.0f;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
    controller->u = 0.0f;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
    controller->prev_Kp = controller->Kp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
    controller->prev_Ki = controller->Ki;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
    controller->prev_Kd = controller->Kd;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3328      	adds	r3, #40	@ 0x28
 80013a0:	88fa      	ldrh	r2, [r7, #6]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 faf3 	bl	8003990 <PWM_init>
	mdxx->GPIOx = GPIOx;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8b3a      	ldrh	r2, [r7, #24]
 80013b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013d4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d15f      	bne.n	80014a2 <MDXX_set_range+0xda>
		if (duty == 0) {
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d115      	bne.n	800141c <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3310      	adds	r3, #16
 80013f4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001574 <MDXX_set_range+0x1ac>
 80013f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 fbef 	bl	8003be0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3328      	adds	r3, #40	@ 0x28
 8001406:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001574 <MDXX_set_range+0x1ac>
 800140a:	ed97 0a02 	vldr	s0, [r7, #8]
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fbe6 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = 0;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800141a:	e0a6      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 800141c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd1a      	ble.n	8001460 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3310      	adds	r3, #16
 800142e:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001574 <MDXX_set_range+0x1ac>
 8001432:	ed97 0a02 	vldr	s0, [r7, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fbd2 	bl	8003be0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3328      	adds	r3, #40	@ 0x28
 8001440:	edd7 0a01 	vldr	s1, [r7, #4]
 8001444:	ed97 0a02 	vldr	s0, [r7, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f002 fbc9 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = duty;
 800144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001456:	ee17 2a90 	vmov	r2, s15
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145e:	e084      	b.n	800156a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3310      	adds	r3, #16
 8001464:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001578 <MDXX_set_range+0x1b0>
 8001468:	ed97 0a02 	vldr	s0, [r7, #8]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fbb7 	bl	8003be0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3328      	adds	r3, #40	@ 0x28
 8001476:	edd7 7a01 	vldr	s15, [r7, #4]
 800147a:	eef0 7ae7 	vabs.f32	s15, s15
 800147e:	eef0 0a67 	vmov.f32	s1, s15
 8001482:	ed97 0a02 	vldr	s0, [r7, #8]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fbaa 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001490:	eef0 7ae7 	vabs.f32	s15, s15
 8001494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001498:	ee17 2a90 	vmov	r2, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e063      	b.n	800156a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d15e      	bne.n	800156a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80014ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d115      	bne.n	80014e6 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	f00b faae 	bl	800ca28 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3328      	adds	r3, #40	@ 0x28
 80014d0:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001574 <MDXX_set_range+0x1ac>
 80014d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 fb81 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = 0;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e041      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd1a      	ble.n	800152a <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	f00b fa91 	bl	800ca28 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3328      	adds	r3, #40	@ 0x28
 800150a:	edd7 0a01 	vldr	s1, [r7, #4]
 800150e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fb64 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = duty;
 8001518:	edd7 7a01 	vldr	s15, [r7, #4]
 800151c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001520:	ee17 2a90 	vmov	r2, s15
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001528:	e01f      	b.n	800156a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f00b fa76 	bl	800ca28 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3328      	adds	r3, #40	@ 0x28
 8001540:	edd7 7a01 	vldr	s15, [r7, #4]
 8001544:	eef0 7ae7 	vabs.f32	s15, s15
 8001548:	eef0 0a67 	vmov.f32	s1, s15
 800154c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f002 fb45 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001556:	edd7 7a01 	vldr	s15, [r7, #4]
 800155a:	eef0 7ae7 	vabs.f32	s15, s15
 800155e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001562:	ee17 2a90 	vmov	r2, s15
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	00000000 	.word	0x00000000
 8001578:	42c80000 	.word	0x42c80000

0800157c <REVOLUTE_MOTOR_FFD_Init>:
	.offset = 30.07e-3,
    .c = 24.13e-3,
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	ed2d 8b02 	vpush	{d8}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015b8:	f7fe ffea 	bl	8000590 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	461d      	mov	r5, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015d4:	f7fe ffdc 	bl	8000590 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe fe20 	bl	8000224 <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015f4:	f7ff f8f6 	bl	80007e4 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff faa8 	bl	8000b54 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 8001608:	ed97 7a00 	vldr	s14, [r7]
 800160c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa96 	bl	8000b54 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eeb1 8a67 	vneg.f32	s16, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa89 	bl	8000b54 <__aeabi_d2f>
 8001642:	4604      	mov	r4, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fa80 	bl	8000b54 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef1 8a67 	vneg.f32	s17, s15
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa73 	bl	8000b54 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	ee02 3a10 	vmov	s4, r3
 8001674:	eef0 1a68 	vmov.f32	s3, s17
 8001678:	ee01 4a10 	vmov	s2, r4
 800167c:	eef0 0a48 	vmov.f32	s1, s16
 8001680:	ed97 0a02 	vldr	s0, [r7, #8]
 8001684:	f000 fbf1 	bl	8001e6a <mapf>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
}
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	ecbd 8b02 	vpop	{d8}
 8001698:	bdb0      	pop	{r4, r5, r7, pc}

0800169a <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	605a      	str	r2, [r3, #4]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float s){
 80016be:	b5b0      	push	{r4, r5, r7, lr}
 80016c0:	ed2d 8b02 	vpush	{d8}
 80016c4:	b088      	sub	sp, #32
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	ed87 0a02 	vstr	s0, [r7, #8]
 80016ce:	edc7 0a01 	vstr	s1, [r7, #4]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s + motor->En->offset);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e6:	ee17 0a90 	vmov	r0, s15
 80016ea:	f7fe fef9 	bl	80004e0 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	68b8      	ldr	r0, [r7, #8]
 80016f4:	f7fe fef4 	bl	80004e0 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	ec43 2b10 	vmov	d0, r2, r3
 8001700:	f011 f856 	bl	80127b0 <sin>
 8001704:	ec53 2b10 	vmov	r2, r3, d0
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe ff40 	bl	8000590 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001728:	ee17 0a90 	vmov	r0, s15
 800172c:	f7fe fed8 	bl	80004e0 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe ff2a 	bl	8000590 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa06 	bl	8000b54 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->slide_rail_mass * motor->En->g * sin(q) * (motor->En->c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	ed93 7a02 	vldr	s14, [r3, #8]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe febc 	bl	80004e0 <__aeabi_f2d>
 8001768:	4604      	mov	r4, r0
 800176a:	460d      	mov	r5, r1
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f7fe feb7 	bl	80004e0 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ec43 2b10 	vmov	d0, r2, r3
 800177a:	f011 f819 	bl	80127b0 <sin>
 800177e:	ec53 2b10 	vmov	r2, r3, d0
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe ff03 	bl	8000590 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4614      	mov	r4, r2
 8001790:	461d      	mov	r5, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fea1 	bl	80004e0 <__aeabi_f2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7fe fef3 	bl	8000590 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f9cf 	bl	8000b54 <__aeabi_d2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017ca:	f7ff f80b 	bl	80007e4 <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f9bd 	bl	8000b54 <__aeabi_d2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter - gravity_compensate_rail) * transfer_function;
 80017de:	ed97 7a07 	vldr	s14, [r7, #28]
 80017e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80017ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f2:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f9a7 	bl	8000b54 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb1 8a67 	vneg.f32	s16, s15
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f99a 	bl	8000b54 <__aeabi_d2f>
 8001820:	4604      	mov	r4, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f991 	bl	8000b54 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef1 8a67 	vneg.f32	s17, s15
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f984 	bl	8000b54 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	ee02 3a10 	vmov	s4, r3
 8001852:	eef0 1a68 	vmov.f32	s3, s17
 8001856:	ee01 4a10 	vmov	s2, r4
 800185a:	eef0 0a48 	vmov.f32	s1, s16
 800185e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001862:	f000 fb02 	bl	8001e6a <mapf>
 8001866:	eef0 7a40 	vmov.f32	s15, s0
}
 800186a:	eeb0 0a67 	vmov.f32	s0, s15
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	ecbd 8b02 	vpop	{d8}
 8001876:	bdb0      	pop	{r4, r5, r7, pc}

08001878 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	0000      	movs	r0, r0
	...

08001898 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	ed2d 8b02 	vpush	{d8}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018b8:	f7fe fe6a 	bl	8000590 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018d4:	f7fe fe5c 	bl	8000590 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fca0 	bl	8000224 <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018f4:	f7fe ff76 	bl	80007e4 <__aeabi_ddiv>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff f928 	bl	8000b54 <__aeabi_d2f>
 8001904:	4603      	mov	r3, r0
 8001906:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 8001908:	ed97 7a00 	vldr	s14, [r7]
 800190c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001918:	68b8      	ldr	r0, [r7, #8]
 800191a:	f7fe fde1 	bl	80004e0 <__aeabi_f2d>
 800191e:	a326      	add	r3, pc, #152	@ (adr r3, 80019b8 <PRISMATIC_MOTOR_FFD_Compute+0x120>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe fe34 	bl	8000590 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	f7ff f910 	bl	8000b54 <__aeabi_d2f>
 8001934:	4604      	mov	r4, r0
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f7ff f907 	bl	8000b54 <__aeabi_d2f>
 8001946:	4603      	mov	r3, r0
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eeb1 8a67 	vneg.f32	s16, s15
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f8fa 	bl	8000b54 <__aeabi_d2f>
 8001960:	4605      	mov	r5, r0
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f8f1 	bl	8000b54 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eef1 8a67 	vneg.f32	s17, s15
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff f8e4 	bl	8000b54 <__aeabi_d2f>
 800198c:	4603      	mov	r3, r0
 800198e:	ee02 3a10 	vmov	s4, r3
 8001992:	eef0 1a68 	vmov.f32	s3, s17
 8001996:	ee01 5a10 	vmov	s2, r5
 800199a:	eef0 0a48 	vmov.f32	s1, s16
 800199e:	ee00 4a10 	vmov	s0, r4
 80019a2:	f000 fa62 	bl	8001e6a <mapf>
 80019a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80019aa:	eeb0 0a67 	vmov.f32	s0, s15
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	ecbd 8b02 	vpop	{d8}
 80019b6:	bdb0      	pop	{r4, r5, r7, pc}
 80019b8:	9999999a 	.word	0x9999999a
 80019bc:	3fb99999 	.word	0x3fb99999

080019c0 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	0000      	movs	r0, r0
	...

080019e8 <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	ed2d 8b02 	vpush	{d8}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80019f8:	edc7 0a01 	vstr	s1, [r7, #4]
 80019fc:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a14:	ee17 0a90 	vmov	r0, s15
 8001a18:	f7fe fd62 	bl	80004e0 <__aeabi_f2d>
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	460d      	mov	r5, r1
 8001a20:	68b8      	ldr	r0, [r7, #8]
 8001a22:	f7fe fd5d 	bl	80004e0 <__aeabi_f2d>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	ec43 2b10 	vmov	d0, r2, r3
 8001a2e:	f010 fe6b 	bl	8012708 <cos>
 8001a32:	ec53 2b10 	vmov	r2, r3, d0
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f7fe fda9 	bl	8000590 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff f885 	bl	8000b54 <__aeabi_d2f>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a66:	ed97 7a00 	vldr	s14, [r7]
 8001a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6e:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd2d 	bl	80004e0 <__aeabi_f2d>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	f7fe fd7f 	bl	8000590 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001aa2:	f7fe fe9f 	bl	80007e4 <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f851 	bl	8000b54 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001ab6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aba:	edd7 7a06 	vldr	s15, [r7, #24]
 8001abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aca:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001ace:	6938      	ldr	r0, [r7, #16]
 8001ad0:	f7fe fd06 	bl	80004e0 <__aeabi_f2d>
 8001ad4:	a326      	add	r3, pc, #152	@ (adr r3, 8001b70 <PRISMATIC_MOTOR_DFD_Compute+0x188>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fd59 	bl	8000590 <__aeabi_dmul>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f835 	bl	8000b54 <__aeabi_d2f>
 8001aea:	4604      	mov	r4, r0
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f7ff f82c 	bl	8000b54 <__aeabi_d2f>
 8001afc:	4603      	mov	r3, r0
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb1 8a67 	vneg.f32	s16, s15
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7ff f81f 	bl	8000b54 <__aeabi_d2f>
 8001b16:	4605      	mov	r5, r0
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7ff f816 	bl	8000b54 <__aeabi_d2f>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef1 8a67 	vneg.f32	s17, s15
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f809 	bl	8000b54 <__aeabi_d2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	ee02 3a10 	vmov	s4, r3
 8001b48:	eef0 1a68 	vmov.f32	s3, s17
 8001b4c:	ee01 5a10 	vmov	s2, r5
 8001b50:	eef0 0a48 	vmov.f32	s1, s16
 8001b54:	ee00 4a10 	vmov	s0, r4
 8001b58:	f000 f987 	bl	8001e6a <mapf>
 8001b5c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b60:	eeb0 0a67 	vmov.f32	s0, s15
 8001b64:	3720      	adds	r7, #32
 8001b66:	46bd      	mov	sp, r7
 8001b68:	ecbd 8b02 	vpop	{d8}
 8001b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	9999999a 	.word	0x9999999a
 8001b74:	3fb99999 	.word	0x3fb99999

08001b78 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	ed2d 8b02 	vpush	{d8}
 8001b7e:	b08a      	sub	sp, #40	@ 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	460b      	mov	r3, r1
 8001b86:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b8a:	edc7 0a00 	vstr	s1, [r7]
 8001b8e:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b90:	897b      	ldrh	r3, [r7, #10]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <FIR_init+0x2a>
        numTaps += 1;
 8001b9c:	897b      	ldrh	r3, [r7, #10]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	897a      	ldrh	r2, [r7, #10]
 8001ba6:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001bae:	897b      	ldrh	r3, [r7, #10]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f010 fca0 	bl	80124f8 <malloc>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001bc0:	897b      	ldrh	r3, [r7, #10]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f010 fc97 	bl	80124f8 <malloc>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80e0 	beq.w	8001d9c <FIR_init+0x224>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80db 	beq.w	8001d9c <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001be6:	2300      	movs	r3, #0
 8001be8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bea:	e00a      	b.n	8001c02 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001bfc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bfe:	3301      	adds	r3, #1
 8001c00:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001c02:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001c04:	897b      	ldrh	r3, [r7, #10]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d3f0      	bcc.n	8001bec <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001c0a:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c0e:	ed97 7a00 	vldr	s14, [r7]
 8001c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c16:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001c1a:	897b      	ldrh	r3, [r7, #10]
 8001c1c:	085b      	lsrs	r3, r3, #1
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001c22:	2300      	movs	r3, #0
 8001c24:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001c26:	e077      	b.n	8001d18 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001c28:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001c2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d10c      	bne.n	8001c4e <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c44:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c48:	edc3 7a00 	vstr	s15, [r3]
 8001c4c:	e02c      	b.n	8001ca8 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001c4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c50:	8afb      	ldrh	r3, [r7, #22]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001c58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c5c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001da8 <FIR_init+0x230>
 8001c60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c74:	eeb0 0a67 	vmov.f32	s0, s15
 8001c78:	f010 fe70 	bl	801295c <sinf>
 8001c7c:	eef0 6a40 	vmov.f32	s13, s0
 8001c80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001dac <FIR_init+0x234>
 8001c90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca4:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	ed93 8a00 	vldr	s16, [r3]
 8001cb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001da8 <FIR_init+0x230>
 8001cc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ccc:	897b      	ldrh	r3, [r7, #10]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cdc:	eeb0 0a66 	vmov.f32	s0, s13
 8001ce0:	f010 fdf8 	bl	80128d4 <cosf>
 8001ce4:	eef0 7a40 	vmov.f32	s15, s0
 8001ce8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001db0 <FIR_init+0x238>
 8001cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001db4 <FIR_init+0x23c>
 8001cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d08:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001d0c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001d18:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001d1c:	897b      	ldrh	r3, [r7, #10]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	db82      	blt.n	8001c28 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001d28:	2300      	movs	r3, #0
 8001d2a:	83fb      	strh	r3, [r7, #30]
 8001d2c:	e00f      	b.n	8001d4e <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	8bfb      	ldrh	r3, [r7, #30]
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001d48:	8bfb      	ldrh	r3, [r7, #30]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	83fb      	strh	r3, [r7, #30]
 8001d4e:	8bfa      	ldrh	r2, [r7, #30]
 8001d50:	897b      	ldrh	r3, [r7, #10]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d3eb      	bcc.n	8001d2e <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001d56:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	d01b      	beq.n	8001d9c <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d64:	2300      	movs	r3, #0
 8001d66:	83bb      	strh	r3, [r7, #28]
 8001d68:	e014      	b.n	8001d94 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	8bbb      	ldrh	r3, [r7, #28]
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	edd3 6a00 	vldr	s13, [r3]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	8bbb      	ldrh	r3, [r7, #28]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d8a:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d8e:	8bbb      	ldrh	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	83bb      	strh	r3, [r7, #28]
 8001d94:	8bba      	ldrh	r2, [r7, #28]
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d3e6      	bcc.n	8001d6a <FIR_init+0x1f2>
            }
        }
    }
}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	@ 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	ecbd 8b02 	vpop	{d8}
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40c90fdb 	.word	0x40c90fdb
 8001dac:	40490fdb 	.word	0x40490fdb
 8001db0:	3eeb851f 	.word	0x3eeb851f
 8001db4:	3f0a3d71 	.word	0x3f0a3d71

08001db8 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	895b      	ldrh	r3, [r3, #10]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	895b      	ldrh	r3, [r3, #10]
 8001dde:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001de0:	2300      	movs	r3, #0
 8001de2:	813b      	strh	r3, [r7, #8]
 8001de4:	e023      	b.n	8001e2e <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	897b      	ldrh	r3, [r7, #10]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	ed93 7a00 	vldr	s14, [r3]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	893b      	ldrh	r3, [r7, #8]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e06:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0e:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 8001e12:	897b      	ldrh	r3, [r7, #10]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d104      	bne.n	8001e22 <FIR_process+0x6a>
            index = fir->numTaps - 1;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	891b      	ldrh	r3, [r3, #8]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	817b      	strh	r3, [r7, #10]
 8001e20:	e002      	b.n	8001e28 <FIR_process+0x70>
        } else {
            index--;
 8001e22:	897b      	ldrh	r3, [r7, #10]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001e28:	893b      	ldrh	r3, [r7, #8]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	813b      	strh	r3, [r7, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	891b      	ldrh	r3, [r3, #8]
 8001e32:	893a      	ldrh	r2, [r7, #8]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d3d6      	bcc.n	8001de6 <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	895b      	ldrh	r3, [r3, #10]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	895a      	ldrh	r2, [r3, #10]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	891b      	ldrh	r3, [r3, #8]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d302      	bcc.n	8001e56 <FIR_process+0x9e>
        fir->bufferIndex = 0;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	815a      	strh	r2, [r3, #10]
    }

    return output;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	ee07 3a90 	vmov	s15, r3
}
 8001e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001e6a:	b480      	push	{r7}
 8001e6c:	b089      	sub	sp, #36	@ 0x24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e74:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e78:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e7c:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e80:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001e84:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e8c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e90:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e94:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea0:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001ea4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ea8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec0:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	ee07 3a90 	vmov	s15, r3
}
 8001eca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ece:	3724      	adds	r7, #36	@ 0x24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001edc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2200      	movs	r2, #0
 8001eee:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001ef0:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	200003b0 	.word	0x200003b0

08001f18 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001f20:	4b04      	ldr	r3, [pc, #16]	@ (8001f34 <modbus_3t5_Timeout+0x1c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	755a      	strb	r2, [r3, #21]

}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	200003b0 	.word	0x200003b0

08001f38 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f00e fcbf 	bl	80108c4 <HAL_UART_GetError>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d101      	bne.n	8001f50 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001f4c:	f7ff ffc4 	bl	8001ed8 <modbus_1t5_Timeout>

	}
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001f66:	4a2d      	ldr	r2, [pc, #180]	@ (800201c <Modbus_init+0xc4>)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800201c <Modbus_init+0xc4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001f74:	4b29      	ldr	r3, [pc, #164]	@ (800201c <Modbus_init+0xc4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001f7c:	4b27      	ldr	r3, [pc, #156]	@ (800201c <Modbus_init+0xc4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001f84:	4b25      	ldr	r3, [pc, #148]	@ (800201c <Modbus_init+0xc4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	7e3a      	ldrb	r2, [r7, #24]
 8001f8a:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001f8c:	4b23      	ldr	r3, [pc, #140]	@ (800201c <Modbus_init+0xc4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	4a21      	ldr	r2, [pc, #132]	@ (8002020 <Modbus_init+0xc8>)
 8001f9a:	210e      	movs	r1, #14
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f00c feb5 	bl	800ed0c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2110      	movs	r1, #16
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00e fc35 	bl	8010818 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f00e fc4c 	bl	8010850 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4a19      	ldr	r2, [pc, #100]	@ (8002024 <Modbus_init+0xcc>)
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f00d fef3 	bl	800fdac <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <Modbus_init+0xc4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001fcc:	4b13      	ldr	r3, [pc, #76]	@ (800201c <Modbus_init+0xc4>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b12      	ldr	r3, [pc, #72]	@ (800201c <Modbus_init+0xc4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001fd8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001fdc:	4413      	add	r3, r2
 8001fde:	3302      	adds	r3, #2
 8001fe0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f00e f81b 	bl	8010020 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001fea:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <Modbus_init+0xc4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10c      	bne.n	8002014 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001ffa:	4b08      	ldr	r3, [pc, #32]	@ (800201c <Modbus_init+0xc4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	4618      	mov	r0, r3
 8002002:	f00b fe5f 	bl	800dcc4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8002006:	4b05      	ldr	r3, [pc, #20]	@ (800201c <Modbus_init+0xc4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f00c f8ae 	bl	800e170 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200003b0 	.word	0x200003b0
 8002020:	08001f19 	.word	0x08001f19
 8002024:	08001f39 	.word	0x08001f39

08002028 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8002034:	23ff      	movs	r3, #255	@ 0xff
 8002036:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8002038:	23ff      	movs	r3, #255	@ 0xff
 800203a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800203c:	e013      	b.n	8002066 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	7bbb      	ldrb	r3, [r7, #14]
 8002048:	4053      	eors	r3, r2
 800204a:	b2db      	uxtb	r3, r3
 800204c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800204e:	4a10      	ldr	r2, [pc, #64]	@ (8002090 <CRC16+0x68>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4413      	add	r3, r2
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	4053      	eors	r3, r2
 800205a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800205c:	4a0d      	ldr	r2, [pc, #52]	@ (8002094 <CRC16+0x6c>)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	4413      	add	r3, r2
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8002066:	883b      	ldrh	r3, [r7, #0]
 8002068:	1e5a      	subs	r2, r3, #1
 800206a:	803a      	strh	r2, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1e6      	bne.n	800203e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	b21b      	sxth	r3, r3
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	b21a      	sxth	r2, r3
 8002078:	7bbb      	ldrb	r3, [r7, #14]
 800207a:	b21b      	sxth	r3, r3
 800207c:	4313      	orrs	r3, r2
 800207e:	b21b      	sxth	r3, r3
 8002080:	b29b      	uxth	r3, r3
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000218 	.word	0x20000218
 8002094:	20000118 	.word	0x20000118

08002098 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800209e:	4b7e      	ldr	r3, [pc, #504]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	7ddb      	ldrb	r3, [r3, #23]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d80a      	bhi.n	80020c0 <Modbus_Protocal_Worker+0x28>
 80020aa:	a201      	add	r2, pc, #4	@ (adr r2, 80020b0 <Modbus_Protocal_Worker+0x18>)
 80020ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b0:	080020cb 	.word	0x080020cb
 80020b4:	0800225f 	.word	0x0800225f
 80020b8:	08002157 	.word	0x08002157
 80020bc:	0800219b 	.word	0x0800219b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80020c0:	4b75      	ldr	r3, [pc, #468]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2201      	movs	r2, #1
 80020c6:	75da      	strb	r2, [r3, #23]
		break;
 80020c8:	e0e1      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80020ca:	4b73      	ldr	r3, [pc, #460]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80020d6:	4b70      	ldr	r3, [pc, #448]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2202      	movs	r2, #2
 80020dc:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80020de:	f000 f9cd 	bl	800247c <Modbus_Emission>
 80020e2:	e018      	b.n	8002116 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80020e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80020ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d00b      	beq.n	8002116 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80020fe:	4b66      	ldr	r3, [pc, #408]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2200      	movs	r2, #0
 8002104:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8002106:	4b64      	ldr	r3, [pc, #400]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2200      	movs	r2, #0
 800210c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800210e:	4b62      	ldr	r3, [pc, #392]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2203      	movs	r2, #3
 8002114:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8002116:	4b60      	ldr	r3, [pc, #384]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002120:	2b20      	cmp	r3, #32
 8002122:	f040 80ad 	bne.w	8002280 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8002126:	4b5c      	ldr	r3, [pc, #368]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8002130:	4b59      	ldr	r3, [pc, #356]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8002136:	4b58      	ldr	r3, [pc, #352]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4b57      	ldr	r3, [pc, #348]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8002142:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8002146:	4413      	add	r3, r2
 8002148:	3302      	adds	r3, #2
 800214a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800214e:	4619      	mov	r1, r3
 8002150:	f00d ff66 	bl	8010020 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8002154:	e094      	b.n	8002280 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8002156:	4b50      	ldr	r3, [pc, #320]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	7d1b      	ldrb	r3, [r3, #20]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 8091 	beq.w	8002284 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8002162:	4b4d      	ldr	r3, [pc, #308]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	22fe      	movs	r2, #254	@ 0xfe
 8002168:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800216a:	4b4b      	ldr	r3, [pc, #300]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8002174:	4b48      	ldr	r3, [pc, #288]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8002184:	4b44      	ldr	r3, [pc, #272]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002186:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8002188:	1a8a      	subs	r2, r1, r2
 800218a:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 800218c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8002190:	4b41      	ldr	r3, [pc, #260]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2204      	movs	r2, #4
 8002196:	75da      	strb	r2, [r3, #23]
		}
		break;
 8002198:	e074      	b.n	8002284 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800219a:	4b3f      	ldr	r3, [pc, #252]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80021a2:	f113 0f02 	cmn.w	r3, #2
 80021a6:	d150      	bne.n	800224a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80021a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2200      	movs	r2, #0
 80021ae:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80021b0:	4b39      	ldr	r3, [pc, #228]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80021b8:	4b37      	ldr	r3, [pc, #220]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021c0:	3b02      	subs	r3, #2
 80021c2:	4619      	mov	r1, r3
 80021c4:	4610      	mov	r0, r2
 80021c6:	f7ff ff2f 	bl	8002028 <CRC16>
 80021ca:	4603      	mov	r3, r0
 80021cc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80021ce:	793a      	ldrb	r2, [r7, #4]
 80021d0:	4b31      	ldr	r3, [pc, #196]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	4b30      	ldr	r3, [pc, #192]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021dc:	3b02      	subs	r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d10c      	bne.n	8002202 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80021e8:	797a      	ldrb	r2, [r7, #5]
 80021ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021f6:	3b01      	subs	r3, #1
 80021f8:	440b      	add	r3, r1
 80021fa:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d004      	beq.n	800220c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002202:	4b25      	ldr	r3, [pc, #148]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	22ff      	movs	r2, #255	@ 0xff
 8002208:	759a      	strb	r2, [r3, #22]
				break;
 800220a:	e040      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800220c:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8002214:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d113      	bne.n	8002246 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800221e:	4b1e      	ldr	r3, [pc, #120]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8002226:	4b1c      	ldr	r3, [pc, #112]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800222e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8002230:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002238:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800223a:	461a      	mov	r2, r3
 800223c:	f010 fa56 	bl	80126ec <memcpy>

			//execute command
			Modbus_frame_response();
 8002240:	f000 f904 	bl	800244c <Modbus_frame_response>
 8002244:	e001      	b.n	800224a <Modbus_Protocal_Worker+0x1b2>
				break;
 8002246:	bf00      	nop
					}
		break;


	}
}
 8002248:	e021      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800224a:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	7d5b      	ldrb	r3, [r3, #21]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d019      	beq.n	8002288 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8002254:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2201      	movs	r2, #1
 800225a:	75da      	strb	r2, [r3, #23]
		break;
 800225c:	e014      	b.n	8002288 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800225e:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002268:	2b20      	cmp	r3, #32
 800226a:	d10f      	bne.n	800228c <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 800226c:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8002276:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2201      	movs	r2, #1
 800227c:	75da      	strb	r2, [r3, #23]
		break;
 800227e:	e005      	b.n	800228c <Modbus_Protocal_Worker+0x1f4>
		break;
 8002280:	bf00      	nop
 8002282:	e004      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
		break;
 8002284:	bf00      	nop
 8002286:	e002      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
		break;
 8002288:	bf00      	nop
 800228a:	e000      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
		break;
 800228c:	bf00      	nop
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200003b0 	.word	0x200003b0

0800229c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80022a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	7e5b      	ldrb	r3, [r3, #25]
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	4a1a      	ldr	r2, [pc, #104]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	7e92      	ldrb	r2, [r2, #26]
 80022b2:	4413      	add	r3, r2
 80022b4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80022b6:	88fa      	ldrh	r2, [r7, #6]
 80022b8:	4b17      	ldr	r3, [pc, #92]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d903      	bls.n	80022ca <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80022c2:	2002      	movs	r0, #2
 80022c4:	f000 f8a0 	bl	8002408 <ModbusErrorReply>
			 return;
 80022c8:	e023      	b.n	8002312 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80022ca:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	440b      	add	r3, r1
 80022da:	7ed2      	ldrb	r2, [r2, #27]
 80022dc:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80022de:	4b0e      	ldr	r3, [pc, #56]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	440b      	add	r3, r1
 80022ee:	7f12      	ldrb	r2, [r2, #28]
 80022f0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80022f2:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80022fa:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8002300:	2208      	movs	r2, #8
 8002302:	4619      	mov	r1, r3
 8002304:	f010 f9f2 	bl	80126ec <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8002308:	4b03      	ldr	r3, [pc, #12]	@ (8002318 <modbusWrite1Register+0x7c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2205      	movs	r2, #5
 800230e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	200003b0 	.word	0x200003b0

0800231c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8002322:	4b38      	ldr	r3, [pc, #224]	@ (8002404 <modbusRead1Register+0xe8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	7edb      	ldrb	r3, [r3, #27]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	b29b      	uxth	r3, r3
 800232c:	4a35      	ldr	r2, [pc, #212]	@ (8002404 <modbusRead1Register+0xe8>)
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	7f12      	ldrb	r2, [r2, #28]
 8002332:	4413      	add	r3, r2
 8002334:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8002336:	4b33      	ldr	r3, [pc, #204]	@ (8002404 <modbusRead1Register+0xe8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	7e5b      	ldrb	r3, [r3, #25]
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	b29b      	uxth	r3, r3
 8002340:	4a30      	ldr	r2, [pc, #192]	@ (8002404 <modbusRead1Register+0xe8>)
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	7e92      	ldrb	r2, [r2, #26]
 8002346:	4413      	add	r3, r2
 8002348:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <modbusRead1Register+0x3a>
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	2b7d      	cmp	r3, #125	@ 0x7d
 8002354:	d903      	bls.n	800235e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8002356:	2003      	movs	r0, #3
 8002358:	f000 f856 	bl	8002408 <ModbusErrorReply>
		 return;
 800235c:	e04e      	b.n	80023fc <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800235e:	88ba      	ldrh	r2, [r7, #4]
 8002360:	4b28      	ldr	r3, [pc, #160]	@ (8002404 <modbusRead1Register+0xe8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	429a      	cmp	r2, r3
 8002368:	d808      	bhi.n	800237c <modbusRead1Register+0x60>
 800236a:	88ba      	ldrh	r2, [r7, #4]
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	4413      	add	r3, r2
 8002370:	461a      	mov	r2, r3
 8002372:	4b24      	ldr	r3, [pc, #144]	@ (8002404 <modbusRead1Register+0xe8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	429a      	cmp	r2, r3
 800237a:	d903      	bls.n	8002384 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800237c:	2002      	movs	r0, #2
 800237e:	f000 f843 	bl	8002408 <ModbusErrorReply>
		 return;
 8002382:	e03b      	b.n	80023fc <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8002384:	4b1f      	ldr	r3, [pc, #124]	@ (8002404 <modbusRead1Register+0xe8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2203      	movs	r2, #3
 800238a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4b1c      	ldr	r3, [pc, #112]	@ (8002404 <modbusRead1Register+0xe8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	0052      	lsls	r2, r2, #1
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800239e:	2400      	movs	r4, #0
 80023a0:	e020      	b.n	80023e4 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80023a2:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <modbusRead1Register+0xe8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	88bb      	ldrh	r3, [r7, #4]
 80023aa:	4423      	add	r3, r4
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	18d1      	adds	r1, r2, r3
 80023b0:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <modbusRead1Register+0xe8>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	1c63      	adds	r3, r4, #1
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	7849      	ldrb	r1, [r1, #1]
 80023ba:	4413      	add	r3, r2
 80023bc:	460a      	mov	r2, r1
 80023be:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80023c2:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <modbusRead1Register+0xe8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	88bb      	ldrh	r3, [r7, #4]
 80023ca:	4423      	add	r3, r4
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	18d1      	adds	r1, r2, r3
 80023d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002404 <modbusRead1Register+0xe8>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	0063      	lsls	r3, r4, #1
 80023d6:	3303      	adds	r3, #3
 80023d8:	7809      	ldrb	r1, [r1, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	460a      	mov	r2, r1
 80023de:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80023e2:	3401      	adds	r4, #1
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	429c      	cmp	r4, r3
 80023e8:	dbdb      	blt.n	80023a2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80023ea:	88fb      	ldrh	r3, [r7, #6]
 80023ec:	3301      	adds	r3, #1
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b04      	ldr	r3, [pc, #16]	@ (8002404 <modbusRead1Register+0xe8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0052      	lsls	r2, r2, #1
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd90      	pop	{r4, r7, pc}
 8002402:	bf00      	nop
 8002404:	200003b0 	.word	0x200003b0

08002408 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8002412:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <ModbusErrorReply+0x40>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	7e1a      	ldrb	r2, [r3, #24]
 8002418:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <ModbusErrorReply+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8002426:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <ModbusErrorReply+0x40>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	79fa      	ldrb	r2, [r7, #7]
 800242c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8002430:	4b05      	ldr	r3, [pc, #20]	@ (8002448 <ModbusErrorReply+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2202      	movs	r2, #2
 8002436:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	200003b0 	.word	0x200003b0

0800244c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002450:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <Modbus_frame_response+0x2c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	7e1b      	ldrb	r3, [r3, #24]
 8002456:	2b03      	cmp	r3, #3
 8002458:	d004      	beq.n	8002464 <Modbus_frame_response+0x18>
 800245a:	2b06      	cmp	r3, #6
 800245c:	d105      	bne.n	800246a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800245e:	f7ff ff1d 	bl	800229c <modbusWrite1Register>
		break;
 8002462:	e006      	b.n	8002472 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002464:	f7ff ff5a 	bl	800231c <modbusRead1Register>
		break;
 8002468:	e003      	b.n	8002472 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800246a:	2001      	movs	r0, #1
 800246c:	f7ff ffcc 	bl	8002408 <ModbusErrorReply>
		break;
 8002470:	bf00      	nop

	}
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200003b0 	.word	0x200003b0

0800247c <Modbus_Emission>:

void Modbus_Emission()
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002482:	4b38      	ldr	r3, [pc, #224]	@ (8002564 <Modbus_Emission+0xe8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248c:	2b20      	cmp	r3, #32
 800248e:	d15d      	bne.n	800254c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002490:	4b34      	ldr	r3, [pc, #208]	@ (8002564 <Modbus_Emission+0xe8>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b33      	ldr	r3, [pc, #204]	@ (8002564 <Modbus_Emission+0xe8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800249e:	4b31      	ldr	r3, [pc, #196]	@ (8002564 <Modbus_Emission+0xe8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80024a6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80024a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002564 <Modbus_Emission+0xe8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80024b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002564 <Modbus_Emission+0xe8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80024b8:	461a      	mov	r2, r3
 80024ba:	f010 f917 	bl	80126ec <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80024be:	4b29      	ldr	r3, [pc, #164]	@ (8002564 <Modbus_Emission+0xe8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b26      	ldr	r3, [pc, #152]	@ (8002564 <Modbus_Emission+0xe8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3203      	adds	r2, #3
 80024ce:	b292      	uxth	r2, r2
 80024d0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80024d4:	4b23      	ldr	r3, [pc, #140]	@ (8002564 <Modbus_Emission+0xe8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80024dc:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <Modbus_Emission+0xe8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80024e4:	3b02      	subs	r3, #2
 80024e6:	4619      	mov	r1, r3
 80024e8:	4610      	mov	r0, r2
 80024ea:	f7ff fd9d 	bl	8002028 <CRC16>
 80024ee:	4603      	mov	r3, r0
 80024f0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80024f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002564 <Modbus_Emission+0xe8>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002564 <Modbus_Emission+0xe8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80024fe:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8002500:	7939      	ldrb	r1, [r7, #4]
 8002502:	4413      	add	r3, r2
 8002504:	460a      	mov	r2, r1
 8002506:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800250a:	4b16      	ldr	r3, [pc, #88]	@ (8002564 <Modbus_Emission+0xe8>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4b15      	ldr	r3, [pc, #84]	@ (8002564 <Modbus_Emission+0xe8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002516:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8002518:	7979      	ldrb	r1, [r7, #5]
 800251a:	4413      	add	r3, r2
 800251c:	460a      	mov	r2, r1
 800251e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002522:	4b10      	ldr	r3, [pc, #64]	@ (8002564 <Modbus_Emission+0xe8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252c:	2b20      	cmp	r3, #32
 800252e:	d10d      	bne.n	800254c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002530:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <Modbus_Emission+0xe8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8002536:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <Modbus_Emission+0xe8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800253e:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <Modbus_Emission+0xe8>)
 8002540:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8002542:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002546:	461a      	mov	r2, r3
 8002548:	f00d fcea 	bl	800ff20 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800254c:	4b05      	ldr	r3, [pc, #20]	@ (8002564 <Modbus_Emission+0xe8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2200      	movs	r2, #0
 8002552:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002554:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <Modbus_Emission+0xe8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2200      	movs	r2, #0
 800255a:	755a      	strb	r2, [r3, #21]

}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	200003b0 	.word	0x200003b0

08002568 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	@ 0x30
 800256c:	af00      	add	r7, sp, #0
 800256e:	6278      	str	r0, [r7, #36]	@ 0x24
 8002570:	ed87 0a08 	vstr	s0, [r7, #32]
 8002574:	edc7 0a07 	vstr	s1, [r7, #28]
 8002578:	ed87 1a06 	vstr	s2, [r7, #24]
 800257c:	edc7 1a05 	vstr	s3, [r7, #20]
 8002580:	ed87 2a04 	vstr	s4, [r7, #16]
 8002584:	edc7 2a03 	vstr	s5, [r7, #12]
 8002588:	ed87 3a02 	vstr	s6, [r7, #8]
 800258c:	edc7 3a01 	vstr	s7, [r7, #4]
 8002590:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	6a3a      	ldr	r2, [r7, #32]
 8002598:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	2210      	movs	r2, #16
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f010 f846 	bl	8012664 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	3310      	adds	r3, #16
 80025dc:	2240      	movs	r2, #64	@ 0x40
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f010 f83f 	bl	8012664 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025e6:	2300      	movs	r3, #0
 80025e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025ea:	e00c      	b.n	8002606 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 80025ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025f6:	3304      	adds	r3, #4
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	4a79      	ldr	r2, [pc, #484]	@ (80027e4 <MotorKalman_Init+0x27c>)
 80025fe:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002602:	3301      	adds	r3, #1
 8002604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002608:	2b03      	cmp	r3, #3
 800260a:	ddef      	ble.n	80025ec <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002612:	2240      	movs	r2, #64	@ 0x40
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f010 f824 	bl	8012664 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800261c:	2300      	movs	r3, #0
 800261e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002620:	e00d      	b.n	800263e <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8002622:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800262c:	33be      	adds	r3, #190	@ 0xbe
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002636:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263a:	3301      	adds	r3, #1
 800263c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800263e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002640:	2b03      	cmp	r3, #3
 8002642:	ddee      	ble.n	8002622 <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	33f0      	adds	r3, #240	@ 0xf0
 8002648:	2210      	movs	r2, #16
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f010 f809 	bl	8012664 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002658:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002662:	2210      	movs	r2, #16
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f00f fffc 	bl	8012664 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002672:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8002676:	ed97 0a01 	vldr	s0, [r7, #4]
 800267a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800267c:	f000 f922 	bl	80028c4 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8002680:	ed97 0a00 	vldr	s0, [r7]
 8002684:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002686:	f000 f94d 	bl	8002924 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	2201      	movs	r2, #1
 8002694:	2104      	movs	r1, #4
 8002696:	f00f fa74 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	3310      	adds	r3, #16
 80026a4:	2204      	movs	r2, #4
 80026a6:	2104      	movs	r1, #4
 80026a8:	f00f fa6b 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 80026b8:	2204      	movs	r2, #4
 80026ba:	2104      	movs	r1, #4
 80026bc:	f00f fa61 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80026cc:	2201      	movs	r2, #1
 80026ce:	2101      	movs	r1, #1
 80026d0:	f00f fa57 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80026e0:	2201      	movs	r2, #1
 80026e2:	2101      	movs	r1, #1
 80026e4:	f00f fa4d 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 80026e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ea:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80026f4:	2201      	movs	r2, #1
 80026f6:	2101      	movs	r1, #1
 80026f8:	f00f fa43 	bl	8011b82 <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 80026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fe:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8002708:	2204      	movs	r2, #4
 800270a:	2104      	movs	r1, #4
 800270c:	f00f fa39 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 800271c:	2201      	movs	r2, #1
 800271e:	2104      	movs	r1, #4
 8002720:	f00f fa2f 	bl	8011b82 <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 8002724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002726:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002730:	2201      	movs	r2, #1
 8002732:	2104      	movs	r1, #4
 8002734:	f00f fa25 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8002744:	2204      	movs	r2, #4
 8002746:	2104      	movs	r1, #4
 8002748:	f00f fa1b 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8002758:	2204      	movs	r2, #4
 800275a:	2101      	movs	r1, #1
 800275c:	f00f fa11 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800276c:	2201      	movs	r2, #1
 800276e:	2101      	movs	r1, #1
 8002770:	f00f fa07 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 8002774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002776:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8002780:	2201      	movs	r2, #1
 8002782:	2104      	movs	r1, #4
 8002784:	f00f f9fd 	bl	8011b82 <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002788:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800278a:	f000 f82d 	bl	80027e8 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8002794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002796:	3390      	adds	r3, #144	@ 0x90
 8002798:	2204      	movs	r2, #4
 800279a:	2104      	movs	r1, #4
 800279c:	f00f f9f1 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	33e0      	adds	r3, #224	@ 0xe0
 80027aa:	2201      	movs	r2, #1
 80027ac:	2104      	movs	r1, #4
 80027ae:	f00f f9e8 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 80027b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027be:	2204      	movs	r2, #4
 80027c0:	2104      	movs	r1, #4
 80027c2:	f00f f9de 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 80027d2:	2201      	movs	r2, #1
 80027d4:	2104      	movs	r1, #4
 80027d6:	f00f f9d4 	bl	8011b82 <arm_mat_init_f32>
}
 80027da:	bf00      	nop
 80027dc:	3730      	adds	r7, #48	@ 0x30
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	42c80000 	.word	0x42c80000

080027e8 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	eeb0 3a64 	vmov.f32	s6, s9
 800282c:	eef0 2a45 	vmov.f32	s5, s10
 8002830:	eeb0 2a65 	vmov.f32	s4, s11
 8002834:	eef0 1a46 	vmov.f32	s3, s12
 8002838:	eeb0 1a66 	vmov.f32	s2, s13
 800283c:	eef0 0a47 	vmov.f32	s1, s14
 8002840:	eeb0 0a67 	vmov.f32	s0, s15
 8002844:	f001 f83c 	bl	80038c0 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800284e:	2240      	movs	r2, #64	@ 0x40
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f00f ff06 	bl	8012664 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800285e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80028bc <MotorKalman_DiscretizeModel+0xd4>
 8002862:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800286c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002892:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80028c0 <MotorKalman_DiscretizeModel+0xd8>
 8002896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80028a6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80028bc <MotorKalman_DiscretizeModel+0xd4>
 80028aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	3c23d70a 	.word	0x3c23d70a
 80028c0:	3dcccccd 	.word	0x3dcccccd

080028c4 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80028d6:	2240      	movs	r2, #64	@ 0x40
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f00f fec2 	bl	8012664 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 80028e0:	edd7 7a00 	vldr	s15, [r7]
 80028e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80028fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002904:	d107      	bne.n	8002916 <MotorKalman_SetProcessNoise+0x52>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 800290c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002914:	d002      	beq.n	800291c <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ff66 	bl	80027e8 <MotorKalman_DiscretizeModel>
    }
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 8002930:	ed97 0a00 	vldr	s0, [r7]
 8002934:	f00f ffb0 	bl	8012898 <sqrtf>
 8002938:	eef0 7a40 	vmov.f32	s15, s0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 8002952:	b580      	push	{r7, lr}
 8002954:	b0b2      	sub	sp, #200	@ 0xc8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 8002966:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002974:	2300      	movs	r3, #0
 8002976:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800297a:	e041      	b.n	8002a00 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 800297c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	33c8      	adds	r3, #200	@ 0xc8
 8002984:	443b      	add	r3, r7
 8002986:	3b3c      	subs	r3, #60	@ 0x3c
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002994:	e02b      	b.n	80029ee <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 8002996:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	33c8      	adds	r3, #200	@ 0xc8
 800299e:	443b      	add	r3, r7
 80029a0:	3b3c      	subs	r3, #60	@ 0x3c
 80029a2:	ed93 7a00 	vldr	s14, [r3]
 80029a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029aa:	009a      	lsls	r2, r3, #2
 80029ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029b0:	4413      	add	r3, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	3324      	adds	r3, #36	@ 0x24
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	edd3 6a00 	vldr	s13, [r3]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	edd3 7a00 	vldr	s15, [r3]
 80029cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	33c8      	adds	r3, #200	@ 0xc8
 80029dc:	443b      	add	r3, r7
 80029de:	3b3c      	subs	r3, #60	@ 0x3c
 80029e0:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80029e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029e8:	3301      	adds	r3, #1
 80029ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	ddcf      	ble.n	8002996 <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029fa:	3301      	adds	r3, #1
 80029fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002a00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	ddb9      	ble.n	800297c <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002a0e:	e021      	b.n	8002a54 <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 8002a10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	33c8      	adds	r3, #200	@ 0xc8
 8002a18:	443b      	add	r3, r7
 8002a1a:	3b3c      	subs	r3, #60	@ 0x3c
 8002a1c:	ed93 7a00 	vldr	s14, [r3]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a26:	3338      	adds	r3, #56	@ 0x38
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	edd3 6a00 	vldr	s13, [r3]
 8002a30:	edd7 7a00 	vldr	s15, [r7]
 8002a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002a54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	ddd9      	ble.n	8002a10 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a5c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a60:	2240      	movs	r2, #64	@ 0x40
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f00f fdfd 	bl	8012664 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a6a:	f107 030c 	add.w	r3, r7, #12
 8002a6e:	2240      	movs	r2, #64	@ 0x40
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f00f fdf6 	bl	8012664 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a7e:	e05f      	b.n	8002b40 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a86:	e052      	b.n	8002b2e <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002a88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a8c:	009a      	lsls	r2, r3, #2
 8002a8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	33c8      	adds	r3, #200	@ 0xc8
 8002a98:	443b      	add	r3, r7
 8002a9a:	3b7c      	subs	r3, #124	@ 0x7c
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002aa8:	e038      	b.n	8002b1c <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002aae:	009a      	lsls	r2, r3, #2
 8002ab0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	33c8      	adds	r3, #200	@ 0xc8
 8002aba:	443b      	add	r3, r7
 8002abc:	3b7c      	subs	r3, #124	@ 0x7c
 8002abe:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 8002ac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ac6:	009a      	lsls	r2, r3, #2
 8002ac8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002acc:	4413      	add	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	3324      	adds	r3, #36	@ 0x24
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	edd3 6a00 	vldr	s13, [r3]
 8002ada:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ade:	009a      	lsls	r2, r3, #2
 8002ae0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ae4:	4413      	add	r3, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	edd3 7a00 	vldr	s15, [r3]
 8002af2:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002af6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002afa:	009a      	lsls	r2, r3, #2
 8002afc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b00:	4413      	add	r3, r2
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	33c8      	adds	r3, #200	@ 0xc8
 8002b0a:	443b      	add	r3, r7
 8002b0c:	3b7c      	subs	r3, #124	@ 0x7c
 8002b0e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b16:	3301      	adds	r3, #1
 8002b18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	ddc2      	ble.n	8002aaa <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b28:	3301      	adds	r3, #1
 8002b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	dda8      	ble.n	8002a88 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	dd9b      	ble.n	8002a80 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b4e:	e05f      	b.n	8002c10 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b56:	e052      	b.n	8002bfe <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b5c:	009a      	lsls	r2, r3, #2
 8002b5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	33c8      	adds	r3, #200	@ 0xc8
 8002b68:	443b      	add	r3, r7
 8002b6a:	3bbc      	subs	r3, #188	@ 0xbc
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b72:	2300      	movs	r3, #0
 8002b74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002b78:	e038      	b.n	8002bec <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b7e:	009a      	lsls	r2, r3, #2
 8002b80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	33c8      	adds	r3, #200	@ 0xc8
 8002b8a:	443b      	add	r3, r7
 8002b8c:	3bbc      	subs	r3, #188	@ 0xbc
 8002b8e:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 8002b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b96:	009a      	lsls	r2, r3, #2
 8002b98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	33c8      	adds	r3, #200	@ 0xc8
 8002ba2:	443b      	add	r3, r7
 8002ba4:	3b7c      	subs	r3, #124	@ 0x7c
 8002ba6:	edd3 6a00 	vldr	s13, [r3]
 8002baa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bae:	009a      	lsls	r2, r3, #2
 8002bb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bb4:	4413      	add	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	3324      	adds	r3, #36	@ 0x24
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	edd3 7a00 	vldr	s15, [r3]
 8002bc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bca:	009a      	lsls	r2, r3, #2
 8002bcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bd0:	4413      	add	r3, r2
 8002bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	33c8      	adds	r3, #200	@ 0xc8
 8002bda:	443b      	add	r3, r7
 8002bdc:	3bbc      	subs	r3, #188	@ 0xbc
 8002bde:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002be2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002be6:	3301      	adds	r3, #1
 8002be8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002bec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	ddc2      	ble.n	8002b7a <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	dda8      	ble.n	8002b58 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	dd9b      	ble.n	8002b50 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c1e:	e037      	b.n	8002c90 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c20:	2300      	movs	r3, #0
 8002c22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c26:	e02a      	b.n	8002c7e <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002c28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c2c:	009a      	lsls	r2, r3, #2
 8002c2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	33c8      	adds	r3, #200	@ 0xc8
 8002c38:	443b      	add	r3, r7
 8002c3a:	3bbc      	subs	r3, #188	@ 0xbc
 8002c3c:	ed93 7a00 	vldr	s14, [r3]
 8002c40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c44:	009a      	lsls	r2, r3, #2
 8002c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c4a:	4413      	add	r3, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	3354      	adds	r3, #84	@ 0x54
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002c58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c5c:	009a      	lsls	r2, r3, #2
 8002c5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c62:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002c64:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	ddd0      	ble.n	8002c28 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	ddc3      	ble.n	8002c20 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	2104      	movs	r1, #4
 8002ccc:	f00e ff59 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3310      	adds	r3, #16
 8002cda:	2204      	movs	r2, #4
 8002cdc:	2104      	movs	r1, #4
 8002cde:	f00e ff50 	bl	8011b82 <arm_mat_init_f32>
}
 8002ce2:	bf00      	nop
 8002ce4:	37c8      	adds	r7, #200	@ 0xc8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b0d0      	sub	sp, #320	@ 0x140
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cf6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cfa:	6018      	str	r0, [r3, #0]
 8002cfc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d00:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d04:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002d08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d0c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002d16:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002d20:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 8002d2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d32:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	edd3 7a00 	vldr	s15, [r3]
 8002d3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d44:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 8002d4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d52:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d60:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002d64:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d68:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 8002d72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d76:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002d84:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002d88:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d8c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002d96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d9a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002da4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dac:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8002db0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002db4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002db8:	ed93 7a00 	vldr	s14, [r3]
 8002dbc:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc4:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002dc8:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002ddc:	e04d      	b.n	8002e7a <MotorKalman_Update+0x18e>
        CP[i] = 0;
 8002dde:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002de8:	443b      	add	r3, r7
 8002dea:	3b58      	subs	r3, #88	@ 0x58
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002df2:	2300      	movs	r3, #0
 8002df4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002df8:	e036      	b.n	8002e68 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002dfa:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e04:	443b      	add	r3, r7
 8002e06:	3b58      	subs	r3, #88	@ 0x58
 8002e08:	ed93 7a00 	vldr	s14, [r3]
 8002e0c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e10:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e1a:	333c      	adds	r3, #60	@ 0x3c
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	edd3 6a00 	vldr	s13, [r3]
 8002e24:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e28:	009a      	lsls	r2, r3, #2
 8002e2a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e2e:	4413      	add	r3, r2
 8002e30:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002e34:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	edd3 7a00 	vldr	s15, [r3]
 8002e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e56:	443b      	add	r3, r7
 8002e58:	3b58      	subs	r3, #88	@ 0x58
 8002e5a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002e5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e62:	3301      	adds	r3, #1
 8002e64:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002e68:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	ddc4      	ble.n	8002dfa <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e70:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e74:	3301      	adds	r3, #1
 8002e76:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002e7a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	ddad      	ble.n	8002dde <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002e90:	e021      	b.n	8002ed6 <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 8002e92:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e9c:	443b      	add	r3, r7
 8002e9e:	3b58      	subs	r3, #88	@ 0x58
 8002ea0:	ed93 7a00 	vldr	s14, [r3]
 8002ea4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ea8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002eb2:	333c      	adds	r3, #60	@ 0x3c
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	edd3 7a00 	vldr	s15, [r3]
 8002ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec0:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec8:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ecc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002ed6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	ddd9      	ble.n	8002e92 <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 8002ede:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ee2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002eec:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef4:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002ef8:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f06:	2300      	movs	r3, #0
 8002f08:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002f0c:	e04d      	b.n	8002faa <MotorKalman_Update+0x2be>
        PC[i] = 0;
 8002f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f18:	443b      	add	r3, r7
 8002f1a:	3b68      	subs	r3, #104	@ 0x68
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002f22:	2300      	movs	r3, #0
 8002f24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002f28:	e036      	b.n	8002f98 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 8002f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f34:	443b      	add	r3, r7
 8002f36:	3b68      	subs	r3, #104	@ 0x68
 8002f38:	ed93 7a00 	vldr	s14, [r3]
 8002f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f40:	009a      	lsls	r2, r3, #2
 8002f42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f46:	4413      	add	r3, r2
 8002f48:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002f4c:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	3304      	adds	r3, #4
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	edd3 6a00 	vldr	s13, [r3]
 8002f5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f6a:	333c      	adds	r3, #60	@ 0x3c
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	edd3 7a00 	vldr	s15, [r3]
 8002f74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f86:	443b      	add	r3, r7
 8002f88:	3b68      	subs	r3, #104	@ 0x68
 8002f8a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002f8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f92:	3301      	adds	r3, #1
 8002f94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002f98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	ddc4      	ble.n	8002f2a <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	ddad      	ble.n	8002f0e <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 8002fb2:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	609a      	str	r2, [r3, #8]
 8002fbe:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002fc6:	e01a      	b.n	8002ffe <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002fc8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002fd2:	443b      	add	r3, r7
 8002fd4:	3b68      	subs	r3, #104	@ 0x68
 8002fd6:	edd3 6a00 	vldr	s13, [r3]
 8002fda:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002fec:	443b      	add	r3, r7
 8002fee:	3b78      	subs	r3, #120	@ 0x78
 8002ff0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ff4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002ffe:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003002:	2b03      	cmp	r3, #3
 8003004:	dde0      	ble.n	8002fc8 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003006:	2300      	movs	r3, #0
 8003008:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800300c:	e029      	b.n	8003062 <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 800300e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003012:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	ed93 7a00 	vldr	s14, [r3]
 8003024:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800302e:	443b      	add	r3, r7
 8003030:	3b78      	subs	r3, #120	@ 0x78
 8003032:	edd3 6a00 	vldr	s13, [r3]
 8003036:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 800303a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800303e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003042:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003046:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003058:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800305c:	3301      	adds	r3, #1
 800305e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003062:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003066:	2b03      	cmp	r3, #3
 8003068:	ddd1      	ble.n	800300e <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 800306a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800306e:	2240      	movs	r2, #64	@ 0x40
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f00f faf6 	bl	8012664 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003078:	2300      	movs	r3, #0
 800307a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800307e:	e035      	b.n	80030ec <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003080:	2300      	movs	r3, #0
 8003082:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003086:	e028      	b.n	80030da <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8003088:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003092:	443b      	add	r3, r7
 8003094:	3b78      	subs	r3, #120	@ 0x78
 8003096:	ed93 7a00 	vldr	s14, [r3]
 800309a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800309e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80030a8:	333c      	adds	r3, #60	@ 0x3c
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	edd3 7a00 	vldr	s15, [r3]
 80030b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030b6:	009a      	lsls	r2, r3, #2
 80030b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80030bc:	4413      	add	r3, r2
 80030be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80030c8:	443b      	add	r3, r7
 80030ca:	3bb8      	subs	r3, #184	@ 0xb8
 80030cc:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80030d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80030d4:	3301      	adds	r3, #1
 80030d6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80030da:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80030de:	2b03      	cmp	r3, #3
 80030e0:	ddd2      	ble.n	8003088 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80030e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030e6:	3301      	adds	r3, #1
 80030e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80030ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	ddc5      	ble.n	8003080 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80030f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80030f8:	2240      	movs	r2, #64	@ 0x40
 80030fa:	2100      	movs	r1, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f00f fab1 	bl	8012664 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003102:	2300      	movs	r3, #0
 8003104:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003108:	e038      	b.n	800317c <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800310a:	2300      	movs	r3, #0
 800310c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003110:	e02b      	b.n	800316a <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8003112:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003116:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800311a:	429a      	cmp	r2, r3
 800311c:	d102      	bne.n	8003124 <MotorKalman_Update+0x438>
 800311e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003122:	e001      	b.n	8003128 <MotorKalman_Update+0x43c>
 8003124:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8003340 <MotorKalman_Update+0x654>
 8003128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312c:	009a      	lsls	r2, r3, #2
 800312e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800313a:	443b      	add	r3, r7
 800313c:	3bb8      	subs	r3, #184	@ 0xb8
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003146:	009a      	lsls	r2, r3, #2
 8003148:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800314c:	4413      	add	r3, r2
 800314e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003158:	443b      	add	r3, r7
 800315a:	3bf8      	subs	r3, #248	@ 0xf8
 800315c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003160:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003164:	3301      	adds	r3, #1
 8003166:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800316a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800316e:	2b03      	cmp	r3, #3
 8003170:	ddcf      	ble.n	8003112 <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003176:	3301      	adds	r3, #1
 8003178:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800317c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003180:	2b03      	cmp	r3, #3
 8003182:	ddc2      	ble.n	800310a <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8003184:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003188:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f103 0110 	add.w	r1, r3, #16
 8003192:	f107 0308 	add.w	r3, r7, #8
 8003196:	2240      	movs	r2, #64	@ 0x40
 8003198:	4618      	mov	r0, r3
 800319a:	f00f faa7 	bl	80126ec <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800319e:	2300      	movs	r3, #0
 80031a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80031a4:	e06e      	b.n	8003284 <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80031a6:	2300      	movs	r3, #0
 80031a8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80031ac:	e061      	b.n	8003272 <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80031ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031b2:	009a      	lsls	r2, r3, #2
 80031b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031b8:	4413      	add	r3, r2
 80031ba:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031be:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	3304      	adds	r3, #4
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80031d0:	2300      	movs	r3, #0
 80031d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80031d6:	e043      	b.n	8003260 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80031d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031dc:	009a      	lsls	r2, r3, #2
 80031de:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031e2:	4413      	add	r3, r2
 80031e4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031e8:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	3304      	adds	r3, #4
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 80031f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031fc:	009a      	lsls	r2, r3, #2
 80031fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800320a:	443b      	add	r3, r7
 800320c:	3bf8      	subs	r3, #248	@ 0xf8
 800320e:	edd3 6a00 	vldr	s13, [r3]
 8003212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003216:	009a      	lsls	r2, r3, #2
 8003218:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800321c:	4413      	add	r3, r2
 800321e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8003222:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8003232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003236:	009a      	lsls	r2, r3, #2
 8003238:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800323c:	4413      	add	r3, r2
 800323e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003242:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8003246:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	3304      	adds	r3, #4
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8003256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800325a:	3301      	adds	r3, #1
 800325c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003264:	2b03      	cmp	r3, #3
 8003266:	ddb7      	ble.n	80031d8 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003268:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800326c:	3301      	adds	r3, #1
 800326e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003272:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003276:	2b03      	cmp	r3, #3
 8003278:	dd99      	ble.n	80031ae <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800327a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800327e:	3301      	adds	r3, #1
 8003280:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003288:	2b03      	cmp	r3, #3
 800328a:	dd8c      	ble.n	80031a6 <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 800328c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003290:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800329c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 80032a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032aa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032b6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 80032c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 80032da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032de:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032ea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80032f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032f8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8003302:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003306:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2201      	movs	r2, #1
 800330e:	2104      	movs	r1, #4
 8003310:	f00e fc37 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8003314:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003318:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8003322:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003326:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3310      	adds	r3, #16
 800332e:	2204      	movs	r2, #4
 8003330:	2104      	movs	r1, #4
 8003332:	f00e fc26 	bl	8011b82 <arm_mat_init_f32>
}
 8003336:	bf00      	nop
 8003338:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	00000000 	.word	0x00000000

08003344 <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003350:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8003354:	ed97 0a02 	vldr	s0, [r7, #8]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f7ff fafa 	bl	8002952 <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 800335e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f7ff fcc2 	bl	8002cec <MotorKalman_Update>

    return filter->velocity;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 800336e:	ee07 3a90 	vmov	s15, r3
}
 8003372:	eeb0 0a67 	vmov.f32	s0, s15
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	e00c      	b.n	80033a8 <matrix_copy+0x2c>
        dst[i] = src[i];
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	441a      	add	r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	440b      	add	r3, r1
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	3301      	adds	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	dbee      	blt.n	800338e <matrix_copy+0x12>
    }
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 80033cc:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 80033d0:	6020      	str	r0, [r4, #0]
 80033d2:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 80033d6:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 80033da:	6001      	str	r1, [r0, #0]
 80033dc:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80033e0:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 80033e4:	ed81 0a00 	vstr	s0, [r1]
 80033e8:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80033ec:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 80033f0:	600a      	str	r2, [r1, #0]
 80033f2:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 80033f6:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 80033fa:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 80033fc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003400:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8003404:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2204      	movs	r2, #4
 800340c:	2104      	movs	r1, #4
 800340e:	f00e fbb8 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8003412:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003416:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 800341a:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2204      	movs	r2, #4
 8003422:	2104      	movs	r1, #4
 8003424:	f00e fbad 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8003428:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800342c:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8003430:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2201      	movs	r2, #1
 8003438:	2104      	movs	r1, #4
 800343a:	f00e fba2 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 800343e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003442:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003446:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2201      	movs	r2, #1
 800344e:	2104      	movs	r1, #4
 8003450:	f00e fb97 	bl	8011b82 <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8003454:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8003458:	2240      	movs	r2, #64	@ 0x40
 800345a:	2100      	movs	r1, #0
 800345c:	4618      	mov	r0, r3
 800345e:	f00f f901 	bl	8012664 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8003462:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8003466:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 800346a:	2204      	movs	r2, #4
 800346c:	2104      	movs	r1, #4
 800346e:	f00e fb88 	bl	8011b82 <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8003472:	2300      	movs	r3, #0
 8003474:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8003478:	e011      	b.n	800349e <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 800347a:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 800348a:	443b      	add	r3, r7
 800348c:	3b6c      	subs	r3, #108	@ 0x6c
 800348e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003492:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8003494:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8003498:	3301      	adds	r3, #1
 800349a:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800349e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	dde9      	ble.n	800347a <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 80034a6:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80034aa:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 80034ae:	2204      	movs	r2, #4
 80034b0:	2104      	movs	r1, #4
 80034b2:	f00e fb66 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 80034b6:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80034ba:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80034be:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80034c2:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 80034c6:	ed93 0a00 	vldr	s0, [r3]
 80034ca:	4610      	mov	r0, r2
 80034cc:	f00e ff62 	bl	8012394 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 80034d0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80034d4:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80034d8:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 80034dc:	2210      	movs	r2, #16
 80034de:	6819      	ldr	r1, [r3, #0]
 80034e0:	f7ff ff4c 	bl	800337c <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 80034e4:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 80034e8:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 80034ec:	2204      	movs	r2, #4
 80034ee:	2104      	movs	r1, #4
 80034f0:	f00e fb47 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 80034f4:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80034f8:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 80034fc:	2204      	movs	r2, #4
 80034fe:	2104      	movs	r1, #4
 8003500:	f00e fb3f 	bl	8011b82 <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8003504:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8003508:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 800350c:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8003510:	4618      	mov	r0, r3
 8003512:	f00e fafb 	bl	8011b0c <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8003516:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 800351a:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 800351e:	2210      	movs	r2, #16
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff2b 	bl	800337c <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8003526:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800352a:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 800352e:	2302      	movs	r3, #2
 8003530:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8003534:	e03a      	b.n	80035ac <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8003536:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003542:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8003546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354a:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 800354e:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8003552:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8003556:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800355a:	4618      	mov	r0, r3
 800355c:	f00e fea0 	bl	80122a0 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8003560:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8003564:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8003568:	2210      	movs	r2, #16
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ff06 	bl	800337c <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8003570:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003574:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8003578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800357c:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8003580:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8003584:	4611      	mov	r1, r2
 8003586:	eeb0 0a47 	vmov.f32	s0, s14
 800358a:	4618      	mov	r0, r3
 800358c:	f00e ff02 	bl	8012394 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8003590:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8003594:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8003598:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 800359c:	4618      	mov	r0, r3
 800359e:	f00e fab5 	bl	8011b0c <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 80035a2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80035a6:	3301      	adds	r3, #1
 80035a8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80035ac:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80035b0:	2b0a      	cmp	r3, #10
 80035b2:	ddc0      	ble.n	8003536 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 80035b4:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 80035b8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80035bc:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80035c0:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 80035c4:	ed93 0a00 	vldr	s0, [r3]
 80035c8:	4610      	mov	r0, r2
 80035ca:	f00e fee3 	bl	8012394 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 80035ce:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80035d2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80035d6:	461a      	mov	r2, r3
 80035d8:	2300      	movs	r3, #0
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	6053      	str	r3, [r2, #4]
 80035de:	6093      	str	r3, [r2, #8]
 80035e0:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 80035e2:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80035e6:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 80035ea:	2201      	movs	r2, #1
 80035ec:	2104      	movs	r1, #4
 80035ee:	f00e fac8 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 80035f2:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 80035f6:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80035fa:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80035fe:	4618      	mov	r0, r3
 8003600:	f00e fe4e 	bl	80122a0 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8003604:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8003608:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 800360c:	2201      	movs	r2, #1
 800360e:	2104      	movs	r1, #4
 8003610:	f00e fab7 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8003614:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003618:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800361c:	edd3 7a00 	vldr	s15, [r3]
 8003620:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003624:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003628:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800362c:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003630:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8003634:	4611      	mov	r1, r2
 8003636:	eeb0 0a47 	vmov.f32	s0, s14
 800363a:	4618      	mov	r0, r3
 800363c:	f00e feaa 	bl	8012394 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003640:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003644:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003648:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800364c:	4618      	mov	r0, r3
 800364e:	f00e fa5d 	bl	8011b0c <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8003652:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003656:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800365a:	4618      	mov	r0, r3
 800365c:	2340      	movs	r3, #64	@ 0x40
 800365e:	461a      	mov	r2, r3
 8003660:	2100      	movs	r1, #0
 8003662:	f00e ffff 	bl	8012664 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8003666:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800366a:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 800366e:	2204      	movs	r2, #4
 8003670:	2104      	movs	r1, #4
 8003672:	f00e fa86 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8003676:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 800367a:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800367e:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8003682:	4618      	mov	r0, r3
 8003684:	f00e fe0c 	bl	80122a0 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003688:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800368c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003690:	461a      	mov	r2, r3
 8003692:	2300      	movs	r3, #0
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	6053      	str	r3, [r2, #4]
 8003698:	6093      	str	r3, [r2, #8]
 800369a:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 800369c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80036a0:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 80036a4:	2201      	movs	r2, #1
 80036a6:	2104      	movs	r1, #4
 80036a8:	f00e fa6b 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 80036ac:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 80036b0:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80036b4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80036b8:	4618      	mov	r0, r3
 80036ba:	f00e fdf1 	bl	80122a0 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 80036be:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036c2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80036c6:	edd3 7a00 	vldr	s15, [r3]
 80036ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80036ce:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036d2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80036d6:	edd3 7a00 	vldr	s15, [r3]
 80036da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036de:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80036e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036e6:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80036ea:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80036ee:	4611      	mov	r1, r2
 80036f0:	eeb0 0a47 	vmov.f32	s0, s14
 80036f4:	4618      	mov	r0, r3
 80036f6:	f00e fe4d 	bl	8012394 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80036fa:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80036fe:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003702:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003706:	4618      	mov	r0, r3
 8003708:	f00e fa00 	bl	8011b0c <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 800370c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003710:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003714:	4618      	mov	r0, r3
 8003716:	2340      	movs	r3, #64	@ 0x40
 8003718:	461a      	mov	r2, r3
 800371a:	2100      	movs	r1, #0
 800371c:	f00e ffa2 	bl	8012664 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 8003720:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003724:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8003728:	2204      	movs	r2, #4
 800372a:	2104      	movs	r1, #4
 800372c:	f00e fa29 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 8003730:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8003734:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8003738:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800373c:	4618      	mov	r0, r3
 800373e:	f00e fdaf 	bl	80122a0 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 8003742:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003746:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800374a:	461a      	mov	r2, r3
 800374c:	2300      	movs	r3, #0
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	6053      	str	r3, [r2, #4]
 8003752:	6093      	str	r3, [r2, #8]
 8003754:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 8003756:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800375a:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800375e:	2201      	movs	r2, #1
 8003760:	2104      	movs	r1, #4
 8003762:	f00e fa0e 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 8003766:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800376a:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800376e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003772:	4618      	mov	r0, r3
 8003774:	f00e fd94 	bl	80122a0 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8003778:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800377c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003780:	edd3 7a00 	vldr	s15, [r3]
 8003784:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003788:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800378c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003790:	edd3 7a00 	vldr	s15, [r3]
 8003794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003798:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800379c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80037a0:	edd3 7a00 	vldr	s15, [r3]
 80037a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a8:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80037ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037b0:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80037b4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80037b8:	4611      	mov	r1, r2
 80037ba:	eeb0 0a47 	vmov.f32	s0, s14
 80037be:	4618      	mov	r0, r3
 80037c0:	f00e fde8 	bl	8012394 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80037c4:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80037c8:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80037cc:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80037d0:	4618      	mov	r0, r3
 80037d2:	f00e f99b 	bl	8011b0c <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 80037d6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037da:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80037de:	4618      	mov	r0, r3
 80037e0:	2340      	movs	r3, #64	@ 0x40
 80037e2:	461a      	mov	r2, r3
 80037e4:	2100      	movs	r1, #0
 80037e6:	f00e ff3d 	bl	8012664 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 80037ea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80037ee:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80037f2:	2204      	movs	r2, #4
 80037f4:	2104      	movs	r1, #4
 80037f6:	f00e f9c4 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 80037fa:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80037fe:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8003802:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003806:	4618      	mov	r0, r3
 8003808:	f00e fd4a 	bl	80122a0 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 800380c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003810:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003814:	461a      	mov	r2, r3
 8003816:	2300      	movs	r3, #0
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	6053      	str	r3, [r2, #4]
 800381c:	6093      	str	r3, [r2, #8]
 800381e:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 8003820:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003824:	f107 001c 	add.w	r0, r7, #28
 8003828:	2201      	movs	r2, #1
 800382a:	2104      	movs	r1, #4
 800382c:	f00e f9a9 	bl	8011b82 <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 8003830:	f107 021c 	add.w	r2, r7, #28
 8003834:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003838:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800383c:	4618      	mov	r0, r3
 800383e:	f00e fd2f 	bl	80122a0 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 8003842:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003846:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800384a:	edd3 7a00 	vldr	s15, [r3]
 800384e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003852:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003856:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800385a:	edd3 7a00 	vldr	s15, [r3]
 800385e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003862:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003866:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800386a:	edd3 7a00 	vldr	s15, [r3]
 800386e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003872:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003876:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800387a:	edd3 7a00 	vldr	s15, [r3]
 800387e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003882:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80038bc <discretize_system_with_arm+0x4fc>
 8003886:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800388a:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800388e:	f107 031c 	add.w	r3, r7, #28
 8003892:	4611      	mov	r1, r2
 8003894:	eeb0 0a47 	vmov.f32	s0, s14
 8003898:	4618      	mov	r0, r3
 800389a:	f00e fd7b 	bl	8012394 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800389e:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80038a2:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80038a6:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80038aa:	4618      	mov	r0, r3
 80038ac:	f00e f92e 	bl	8011b0c <arm_mat_add_f32>
}
 80038b0:	bf00      	nop
 80038b2:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd90      	pop	{r4, r7, pc}
 80038ba:	bf00      	nop
 80038bc:	42f00000 	.word	0x42f00000

080038c0 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b09e      	sub	sp, #120	@ 0x78
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 80038ca:	edc7 0a08 	vstr	s1, [r7, #32]
 80038ce:	ed87 1a07 	vstr	s2, [r7, #28]
 80038d2:	edc7 1a06 	vstr	s3, [r7, #24]
 80038d6:	ed87 2a05 	vstr	s4, [r7, #20]
 80038da:	edc7 2a04 	vstr	s5, [r7, #16]
 80038de:	ed87 3a03 	vstr	s6, [r7, #12]
 80038e2:	60b8      	str	r0, [r7, #8]
 80038e4:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 80038e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038ea:	2240      	movs	r2, #64	@ 0x40
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f00e feb8 	bl	8012664 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 80038f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 8003902:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003906:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8003908:	edd7 7a06 	vldr	s15, [r7, #24]
 800390c:	eef1 6a67 	vneg.f32	s13, s15
 8003910:	ed97 7a07 	vldr	s14, [r7, #28]
 8003914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003918:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 800391c:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8003920:	ed97 7a07 	vldr	s14, [r7, #28]
 8003924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003928:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 800392c:	edd7 6a04 	vldr	s13, [r7, #16]
 8003930:	ed97 7a07 	vldr	s14, [r7, #28]
 8003934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003938:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 800393c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003940:	eef1 6a67 	vneg.f32	s13, s15
 8003944:	ed97 7a08 	vldr	s14, [r7, #32]
 8003948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800394c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8003950:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003954:	eef1 6a67 	vneg.f32	s13, s15
 8003958:	ed97 7a08 	vldr	s14, [r7, #32]
 800395c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003960:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8003964:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003968:	ed97 7a08 	vldr	s14, [r7, #32]
 800396c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003970:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8003974:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003978:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	ed97 0a03 	vldr	s0, [r7, #12]
 8003984:	f7ff fd1c 	bl	80033c0 <discretize_system_with_arm>
}
 8003988:	bf00      	nop
 800398a:	3778      	adds	r7, #120	@ 0x78
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	4613      	mov	r3, r2
 800399c:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4a0b      	ldr	r2, [pc, #44]	@ (80039d0 <PWM_init+0x40>)
 80039a2:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	88fa      	ldrh	r2, [r7, #6]
 80039ae:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 80039b6:	68b8      	ldr	r0, [r7, #8]
 80039b8:	f00a f914 	bl	800dbe4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	4619      	mov	r1, r3
 80039c0:	68b8      	ldr	r0, [r7, #8]
 80039c2:	f00a fa5b 	bl	800de7c <HAL_TIM_PWM_Start>
}
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	0a21fe80 	.word	0x0a21fe80

080039d4 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 80039d4:	b5b0      	push	{r4, r5, r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80039e0:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80039e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80039e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f0:	d137      	bne.n	8003a62 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	889b      	ldrh	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d105      	bne.n	8003a06 <PWM_write_duty+0x32>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2200      	movs	r2, #0
 8003a02:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003a04:	e0e1      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	889b      	ldrh	r3, [r3, #4]
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d105      	bne.n	8003a1a <PWM_write_duty+0x46>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2300      	movs	r3, #0
 8003a16:	6393      	str	r3, [r2, #56]	@ 0x38
 8003a18:	e0d7      	b.n	8003bca <PWM_write_duty+0x1f6>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	889b      	ldrh	r3, [r3, #4]
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d105      	bne.n	8003a2e <PWM_write_duty+0x5a>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003a2c:	e0cd      	b.n	8003bca <PWM_write_duty+0x1f6>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	889b      	ldrh	r3, [r3, #4]
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d105      	bne.n	8003a42 <PWM_write_duty+0x6e>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a40:	e0c3      	b.n	8003bca <PWM_write_duty+0x1f6>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	889b      	ldrh	r3, [r3, #4]
 8003a46:	2b10      	cmp	r3, #16
 8003a48:	d105      	bne.n	8003a56 <PWM_write_duty+0x82>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	2300      	movs	r3, #0
 8003a52:	6493      	str	r3, [r2, #72]	@ 0x48
 8003a54:	e0b9      	b.n	8003bca <PWM_write_duty+0x1f6>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003a60:	e0b3      	b.n	8003bca <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a7a:	ee17 2a90 	vmov	r2, s15
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003a8a:	33fe      	adds	r3, #254	@ 0xfe
 8003a8c:	4a51      	ldr	r2, [pc, #324]	@ (8003bd4 <PWM_write_duty+0x200>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	0bdb      	lsrs	r3, r3, #15
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	899b      	ldrh	r3, [r3, #12]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	ee07 3a90 	vmov	s15, r3
 8003ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003abc:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ac4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ac8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad0:	ee17 3a90 	vmov	r3, s15
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	89db      	ldrh	r3, [r3, #14]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fc fcec 	bl	80004bc <__aeabi_i2d>
 8003ae4:	4604      	mov	r4, r0
 8003ae6:	460d      	mov	r5, r1
 8003ae8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aec:	eef0 7ae7 	vabs.f32	s15, s15
 8003af0:	ee17 0a90 	vmov	r0, s15
 8003af4:	f7fc fcf4 	bl	80004e0 <__aeabi_f2d>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4620      	mov	r0, r4
 8003afe:	4629      	mov	r1, r5
 8003b00:	f7fc fd46 	bl	8000590 <__aeabi_dmul>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	4b31      	ldr	r3, [pc, #196]	@ (8003bd8 <PWM_write_duty+0x204>)
 8003b12:	f7fc fe67 	bl	80007e4 <__aeabi_ddiv>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f7fc fff9 	bl	8000b14 <__aeabi_d2uiz>
 8003b22:	4603      	mov	r3, r0
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	899a      	ldrh	r2, [r3, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	89da      	ldrh	r2, [r3, #14]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	89da      	ldrh	r2, [r3, #14]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	889b      	ldrh	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <PWM_write_duty+0x190>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	6952      	ldr	r2, [r2, #20]
 8003b60:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003b62:	e032      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	889b      	ldrh	r3, [r3, #4]
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d106      	bne.n	8003b7a <PWM_write_duty+0x1a6>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003b78:	e027      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	889b      	ldrh	r3, [r3, #4]
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d106      	bne.n	8003b90 <PWM_write_duty+0x1bc>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003b8e:	e01c      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	889b      	ldrh	r3, [r3, #4]
 8003b94:	2b0c      	cmp	r3, #12
 8003b96:	d106      	bne.n	8003ba6 <PWM_write_duty+0x1d2>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003ba4:	e011      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	889b      	ldrh	r3, [r3, #4]
 8003baa:	2b10      	cmp	r3, #16
 8003bac:	d106      	bne.n	8003bbc <PWM_write_duty+0x1e8>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003bba:	e006      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003bc8:	e7ff      	b.n	8003bca <PWM_write_duty+0x1f6>
 8003bca:	bf00      	nop
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	80008001 	.word	0x80008001
 8003bd8:	40590000 	.word	0x40590000
 8003bdc:	00000000 	.word	0x00000000

08003be0 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003be0:	b5b0      	push	{r4, r5, r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bec:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003bf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bf4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfc:	d137      	bne.n	8003c6e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	889b      	ldrh	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d105      	bne.n	8003c12 <PWM_write_range+0x32>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003c10:	e0e1      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	889b      	ldrh	r3, [r3, #4]
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d105      	bne.n	8003c26 <PWM_write_range+0x46>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2300      	movs	r3, #0
 8003c22:	6393      	str	r3, [r2, #56]	@ 0x38
 8003c24:	e0d7      	b.n	8003dd6 <PWM_write_range+0x1f6>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	889b      	ldrh	r3, [r3, #4]
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d105      	bne.n	8003c3a <PWM_write_range+0x5a>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	2300      	movs	r3, #0
 8003c36:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003c38:	e0cd      	b.n	8003dd6 <PWM_write_range+0x1f6>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	889b      	ldrh	r3, [r3, #4]
 8003c3e:	2b0c      	cmp	r3, #12
 8003c40:	d105      	bne.n	8003c4e <PWM_write_range+0x6e>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c4c:	e0c3      	b.n	8003dd6 <PWM_write_range+0x1f6>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	889b      	ldrh	r3, [r3, #4]
 8003c52:	2b10      	cmp	r3, #16
 8003c54:	d105      	bne.n	8003c62 <PWM_write_range+0x82>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c60:	e0b9      	b.n	8003dd6 <PWM_write_range+0x1f6>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003c6c:	e0b3      	b.n	8003dd6 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c86:	ee17 2a90 	vmov	r2, s15
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003c96:	33fe      	adds	r3, #254	@ 0xfe
 8003c98:	4a53      	ldr	r2, [pc, #332]	@ (8003de8 <PWM_write_range+0x208>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	0bdb      	lsrs	r3, r3, #15
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	899b      	ldrh	r3, [r3, #12]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	ee07 3a90 	vmov	s15, r3
 8003cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cc4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003cc8:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cdc:	ee17 3a90 	vmov	r3, s15
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	89db      	ldrh	r3, [r3, #14]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc fbe6 	bl	80004bc <__aeabi_i2d>
 8003cf0:	4604      	mov	r4, r0
 8003cf2:	460d      	mov	r5, r1
 8003cf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cf8:	eef0 7ae7 	vabs.f32	s15, s15
 8003cfc:	ee17 0a90 	vmov	r0, s15
 8003d00:	f7fc fbee 	bl	80004e0 <__aeabi_f2d>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4620      	mov	r0, r4
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	f7fc fc40 	bl	8000590 <__aeabi_dmul>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4610      	mov	r0, r2
 8003d16:	4619      	mov	r1, r3
 8003d18:	a331      	add	r3, pc, #196	@ (adr r3, 8003de0 <PWM_write_range+0x200>)
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	f7fc fd61 	bl	80007e4 <__aeabi_ddiv>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4610      	mov	r0, r2
 8003d28:	4619      	mov	r1, r3
 8003d2a:	f7fc fef3 	bl	8000b14 <__aeabi_d2uiz>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	899a      	ldrh	r2, [r3, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	89da      	ldrh	r2, [r3, #14]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	89da      	ldrh	r2, [r3, #14]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	889b      	ldrh	r3, [r3, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <PWM_write_range+0x190>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	6952      	ldr	r2, [r2, #20]
 8003d6c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003d6e:	e032      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	889b      	ldrh	r3, [r3, #4]
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d106      	bne.n	8003d86 <PWM_write_range+0x1a6>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003d84:	e027      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	889b      	ldrh	r3, [r3, #4]
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d106      	bne.n	8003d9c <PWM_write_range+0x1bc>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003d9a:	e01c      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	889b      	ldrh	r3, [r3, #4]
 8003da0:	2b0c      	cmp	r3, #12
 8003da2:	d106      	bne.n	8003db2 <PWM_write_range+0x1d2>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003db0:	e011      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	889b      	ldrh	r3, [r3, #4]
 8003db6:	2b10      	cmp	r3, #16
 8003db8:	d106      	bne.n	8003dc8 <PWM_write_range+0x1e8>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003dc6:	e006      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003dd4:	e7ff      	b.n	8003dd6 <PWM_write_range+0x1f6>
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dde:	bf00      	nop
 8003de0:	00000000 	.word	0x00000000
 8003de4:	40efffe0 	.word	0x40efffe0
 8003de8:	80008001 	.word	0x80008001

08003dec <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6178      	str	r0, [r7, #20]
 8003df4:	6139      	str	r1, [r7, #16]
 8003df6:	60fa      	str	r2, [r7, #12]
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	ed87 0a01 	vstr	s0, [r7, #4]
 8003dfe:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8003e4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	fb93 f2f2 	sdiv	r2, r3, r2
 8003e56:	68f9      	ldr	r1, [r7, #12]
 8003e58:	fb01 f202 	mul.w	r2, r1, r2
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003eba:	213c      	movs	r1, #60	@ 0x3c
 8003ebc:	6938      	ldr	r0, [r7, #16]
 8003ebe:	f00a fa99 	bl	800e3f4 <HAL_TIM_Encoder_Start>
}
 8003ec2:	bf00      	nop
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	0000      	movs	r0, r0
 8003ecc:	0000      	movs	r0, r0
	...

08003ed0 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003ed0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	0fda      	lsrs	r2, r3, #31
 8003ef8:	4413      	add	r3, r2
 8003efa:	105b      	asrs	r3, r3, #1
 8003efc:	461a      	mov	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4293      	cmp	r3, r2
 8003f02:	dd05      	ble.n	8003f10 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	e00e      	b.n	8003f2e <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	0fda      	lsrs	r2, r3, #31
 8003f16:	4413      	add	r3, r2
 8003f18:	105b      	asrs	r3, r3, #1
 8003f1a:	425b      	negs	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4293      	cmp	r3, r2
 8003f22:	da04      	bge.n	8003f2e <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	441a      	add	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	ee07 3a90 	vmov	s15, r3
 8003f50:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	ee07 3a90 	vmov	s15, r3
 8003f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f60:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc faaf 	bl	80004e0 <__aeabi_f2d>
 8003f82:	4604      	mov	r4, r0
 8003f84:	460d      	mov	r5, r1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003fa6:	ee17 0a90 	vmov	r0, s15
 8003faa:	f7fc fa99 	bl	80004e0 <__aeabi_f2d>
 8003fae:	a33c      	add	r3, pc, #240	@ (adr r3, 80040a0 <QEI_get_diff_count+0x1d0>)
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f7fc faec 	bl	8000590 <__aeabi_dmul>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4690      	mov	r8, r2
 8003fbe:	4699      	mov	r9, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fc fa8b 	bl	80004e0 <__aeabi_f2d>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4640      	mov	r0, r8
 8003fd0:	4649      	mov	r1, r9
 8003fd2:	f7fc fadd 	bl	8000590 <__aeabi_dmul>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4620      	mov	r0, r4
 8003fdc:	4629      	mov	r1, r5
 8003fde:	f7fc f921 	bl	8000224 <__adddf3>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4619      	mov	r1, r3
 8003fea:	f7fc fdb3 	bl	8000b54 <__aeabi_d2f>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fc fa71 	bl	80004e0 <__aeabi_f2d>
 8003ffe:	4604      	mov	r4, r0
 8004000:	460d      	mov	r5, r1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800401a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800401e:	ee16 0a90 	vmov	r0, s13
 8004022:	f7fc fa5d 	bl	80004e0 <__aeabi_f2d>
 8004026:	a31e      	add	r3, pc, #120	@ (adr r3, 80040a0 <QEI_get_diff_count+0x1d0>)
 8004028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402c:	f7fc fab0 	bl	8000590 <__aeabi_dmul>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4690      	mov	r8, r2
 8004036:	4699      	mov	r9, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403c:	4618      	mov	r0, r3
 800403e:	f7fc fa4f 	bl	80004e0 <__aeabi_f2d>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4640      	mov	r0, r8
 8004048:	4649      	mov	r1, r9
 800404a:	f7fc faa1 	bl	8000590 <__aeabi_dmul>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4690      	mov	r8, r2
 8004054:	4699      	mov	r9, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405a:	4618      	mov	r0, r3
 800405c:	f7fc fa40 	bl	80004e0 <__aeabi_f2d>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4640      	mov	r0, r8
 8004066:	4649      	mov	r1, r9
 8004068:	f7fc fa92 	bl	8000590 <__aeabi_dmul>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4620      	mov	r0, r4
 8004072:	4629      	mov	r1, r5
 8004074:	f7fc f8d6 	bl	8000224 <__adddf3>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4610      	mov	r0, r2
 800407e:	4619      	mov	r1, r3
 8004080:	f7fc fd68 	bl	8000b54 <__aeabi_d2f>
 8004084:	4602      	mov	r2, r0
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	605a      	str	r2, [r3, #4]
}
 8004092:	bf00      	nop
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800409c:	f3af 8000 	nop.w
 80040a0:	54442d18 	.word	0x54442d18
 80040a4:	400921fb 	.word	0x400921fb

080040a8 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 80040a8:	b5b0      	push	{r4, r5, r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80040b8:	fb02 f303 	mul.w	r3, r2, r3
 80040bc:	ee07 3a90 	vmov	s15, r3
 80040c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc fa06 	bl	80004e0 <__aeabi_f2d>
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	4b83      	ldr	r3, [pc, #524]	@ (80042e8 <QEI_compute_data+0x240>)
 80040da:	f7fc fa59 	bl	8000590 <__aeabi_dmul>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4614      	mov	r4, r2
 80040e4:	461d      	mov	r5, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040f2:	ee17 0a90 	vmov	r0, s15
 80040f6:	f7fc f9f3 	bl	80004e0 <__aeabi_f2d>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4620      	mov	r0, r4
 8004100:	4629      	mov	r1, r5
 8004102:	f7fc fb6f 	bl	80007e4 <__aeabi_ddiv>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4614      	mov	r4, r2
 800410c:	461d      	mov	r5, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004112:	4618      	mov	r0, r3
 8004114:	f7fc f9e4 	bl	80004e0 <__aeabi_f2d>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4620      	mov	r0, r4
 800411e:	4629      	mov	r1, r5
 8004120:	f7fc fa36 	bl	8000590 <__aeabi_dmul>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4610      	mov	r0, r2
 800412a:	4619      	mov	r1, r3
 800412c:	f7fc fd12 	bl	8000b54 <__aeabi_d2f>
 8004130:	4602      	mov	r2, r0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800413c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004140:	ee17 0a90 	vmov	r0, s15
 8004144:	f7fc f9cc 	bl	80004e0 <__aeabi_f2d>
 8004148:	a365      	add	r3, pc, #404	@ (adr r3, 80042e0 <QEI_compute_data+0x238>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f7fc fa1f 	bl	8000590 <__aeabi_dmul>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4614      	mov	r4, r2
 8004158:	461d      	mov	r5, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004166:	ee17 0a90 	vmov	r0, s15
 800416a:	f7fc f9b9 	bl	80004e0 <__aeabi_f2d>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4620      	mov	r0, r4
 8004174:	4629      	mov	r1, r5
 8004176:	f7fc fb35 	bl	80007e4 <__aeabi_ddiv>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4614      	mov	r4, r2
 8004180:	461d      	mov	r5, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004186:	4618      	mov	r0, r3
 8004188:	f7fc f9aa 	bl	80004e0 <__aeabi_f2d>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4620      	mov	r0, r4
 8004192:	4629      	mov	r1, r5
 8004194:	f7fc f9fc 	bl	8000590 <__aeabi_dmul>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	f7fc fcd8 	bl	8000b54 <__aeabi_d2f>
 80041a4:	4602      	mov	r2, r0
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fc f996 	bl	80004e0 <__aeabi_f2d>
 80041b4:	a34a      	add	r3, pc, #296	@ (adr r3, 80042e0 <QEI_compute_data+0x238>)
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f7fc f9e9 	bl	8000590 <__aeabi_dmul>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4614      	mov	r4, r2
 80041c4:	461d      	mov	r5, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fc f988 	bl	80004e0 <__aeabi_f2d>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4620      	mov	r0, r4
 80041d6:	4629      	mov	r1, r5
 80041d8:	f7fc f9da 	bl	8000590 <__aeabi_dmul>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4614      	mov	r4, r2
 80041e2:	461d      	mov	r5, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	ee07 3a90 	vmov	s15, r3
 80041ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041f0:	ee17 0a90 	vmov	r0, s15
 80041f4:	f7fc f974 	bl	80004e0 <__aeabi_f2d>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4620      	mov	r0, r4
 80041fe:	4629      	mov	r1, r5
 8004200:	f7fc faf0 	bl	80007e4 <__aeabi_ddiv>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4614      	mov	r4, r2
 800420a:	461d      	mov	r5, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004210:	4618      	mov	r0, r3
 8004212:	f7fc f965 	bl	80004e0 <__aeabi_f2d>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4620      	mov	r0, r4
 800421c:	4629      	mov	r1, r5
 800421e:	f7fc f9b7 	bl	8000590 <__aeabi_dmul>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4610      	mov	r0, r2
 8004228:	4619      	mov	r1, r3
 800422a:	f7fc fc93 	bl	8000b54 <__aeabi_d2f>
 800422e:	4602      	mov	r2, r0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	ed93 7a02 	vldr	s14, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004254:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8004258:	edd7 7a03 	vldr	s15, [r7, #12]
 800425c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004264:	d00a      	beq.n	800427c <QEI_compute_data+0x1d4>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004272:	edd7 7a03 	vldr	s15, [r7, #12]
 8004276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427a:	e001      	b.n	8004280 <QEI_compute_data+0x1d8>
 800427c:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80042ec <QEI_compute_data+0x244>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	ed93 7a04 	vldr	s14, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004292:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004296:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 800429a:	edd7 7a02 	vldr	s15, [r7, #8]
 800429e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80042a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a6:	d00a      	beq.n	80042be <QEI_compute_data+0x216>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ac:	ee07 3a90 	vmov	s15, r3
 80042b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80042b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042bc:	e001      	b.n	80042c2 <QEI_compute_data+0x21a>
 80042be:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80042ec <QEI_compute_data+0x244>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	615a      	str	r2, [r3, #20]
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bdb0      	pop	{r4, r5, r7, pc}
 80042e0:	54442d18 	.word	0x54442d18
 80042e4:	400921fb 	.word	0x400921fb
 80042e8:	404e0000 	.word	0x404e0000
 80042ec:	00000000 	.word	0x00000000

080042f0 <QEI_reset>:

void QEI_reset(QEI *qei) {
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
    // Reset counter history
    qei->c[NOW] = 0;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->pulses = 0;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	649a      	str	r2, [r3, #72]	@ 0x48

    // Reset velocity history
    qei->r[NOW] = 0;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	615a      	str	r2, [r3, #20]
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 800435c:	b580      	push	{r7, lr}
 800435e:	b08e      	sub	sp, #56	@ 0x38
 8004360:	af00      	add	r7, sp, #0
 8004362:	6178      	str	r0, [r7, #20]
 8004364:	ed87 0a04 	vstr	s0, [r7, #16]
 8004368:	edc7 0a03 	vstr	s1, [r7, #12]
 800436c:	ed87 1a02 	vstr	s2, [r7, #8]
 8004370:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2200      	movs	r2, #0
 8004378:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 800439a:	ed97 7a03 	vldr	s14, [r7, #12]
 800439e:	edd7 7a04 	vldr	s15, [r7, #16]
 80043a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043a6:	eef0 7ae7 	vabs.f32	s15, s15
 80043aa:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 80043ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80043b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80043b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c2:	d503      	bpl.n	80043cc <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	22ff      	movs	r2, #255	@ 0xff
 80043c8:	741a      	strb	r2, [r3, #16]
 80043ca:	e002      	b.n	80043d2 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2201      	movs	r2, #1
 80043d0:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 80043d2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80043d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043de:	d006      	beq.n	80043ee <Trapezoidal_Generator+0x92>
 80043e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80043e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ec:	d104      	bne.n	80043f8 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	60da      	str	r2, [r3, #12]
        return;
 80043f6:	e06f      	b.n	80044d8 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 80043f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80043fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8004400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004404:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8004408:	edd7 7a01 	vldr	s15, [r7, #4]
 800440c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004410:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004414:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004424:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8004428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442a:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 800442c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004430:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004438:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 800443c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004440:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004444:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444c:	db27      	blt.n	800449e <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 800444e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004452:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800445a:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 800445e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004462:	ed97 7a02 	vldr	s14, [r7, #8]
 8004466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800446a:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004472:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8004474:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004478:	edd7 7a06 	vldr	s15, [r7, #24]
 800447c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8004486:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800448a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800448e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	edc3 7a02 	vstr	s15, [r3, #8]
 800449c:	e018      	b.n	80044d0 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 800449e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80044a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80044a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80044aa:	eeb0 0a66 	vmov.f32	s0, s13
 80044ae:	f00e f9f3 	bl	8012898 <sqrtf>
 80044b2:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	6a3a      	ldr	r2, [r7, #32]
 80044ba:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	6a3a      	ldr	r2, [r7, #32]
 80044c0:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 80044c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80044c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	60da      	str	r2, [r3, #12]
}
 80044d8:	3738      	adds	r7, #56	@ 0x38
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 80044e0:	b480      	push	{r7}
 80044e2:	b08d      	sub	sp, #52	@ 0x34
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6178      	str	r0, [r7, #20]
 80044e8:	6139      	str	r1, [r7, #16]
 80044ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80044ee:	edc7 0a02 	vstr	s1, [r7, #8]
 80044f2:	ed87 1a01 	vstr	s2, [r7, #4]
 80044f6:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8004500:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8004784 <Trapezoidal_Evaluated+0x2a4>
 8004504:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	ed93 7a03 	vldr	s14, [r3, #12]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	edd3 7a03 	vldr	s15, [r3, #12]
 800451a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800451e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004522:	f200 811b 	bhi.w	800475c <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2200      	movs	r2, #0
 800452a:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	7c1b      	ldrb	r3, [r3, #16]
 8004530:	b25b      	sxtb	r3, r3
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800453a:	ed97 7a00 	vldr	s14, [r7]
 800453e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004542:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	ed93 7a00 	vldr	s14, [r3]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004552:	eeb4 7a67 	vcmp.f32	s14, s15
 8004556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455a:	d109      	bne.n	8004570 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	edd3 7a00 	vldr	s15, [r3]
 8004562:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800456e:	e00c      	b.n	800458a <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	7c1b      	ldrb	r3, [r3, #16]
 8004574:	b25b      	sxtb	r3, r3
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800457e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004586:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	edd3 7a00 	vldr	s15, [r3]
 8004596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800459a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459e:	d824      	bhi.n	80045ea <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 80045a0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80045a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80045a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80045b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80045bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80045c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80045d4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80045d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e6:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 80045e8:	e0c6      	b.n	8004778 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	ed93 7a03 	vldr	s14, [r3, #12]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80045f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045fe:	d830      	bhi.n	8004662 <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8004600:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004604:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004608:	ee27 7a87 	vmul.f32	s14, s15, s14
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	edd3 7a00 	vldr	s15, [r3]
 8004612:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	edd3 7a00 	vldr	s15, [r3]
 800461c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004620:	ed97 7a03 	vldr	s14, [r7, #12]
 8004624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004628:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	edd3 7a00 	vldr	s15, [r3]
 8004638:	ee37 7a67 	vsub.f32	s14, s14, s15
 800463c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004644:	edd7 7a06 	vldr	s15, [r7, #24]
 8004648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004656:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
}
 8004660:	e08a      	b.n	8004778 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	ed93 7a03 	vldr	s14, [r3, #12]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	edd3 7a02 	vldr	s15, [r3, #8]
 800466e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004676:	d900      	bls.n	800467a <Trapezoidal_Evaluated+0x19a>
}
 8004678:	e07e      	b.n	8004778 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 800467a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800467e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004682:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	edd3 7a00 	vldr	s15, [r3]
 800468c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	edd3 7a00 	vldr	s15, [r3]
 8004696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469a:	ed97 7a03 	vldr	s14, [r7, #12]
 800469e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a2:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	edd3 7a00 	vldr	s15, [r3]
 80046b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046be:	dd11      	ble.n	80046e4 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	edd3 7a00 	vldr	s15, [r3]
 80046cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046d0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80046d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80046dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046e0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80046f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046f4:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 80046f8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80046fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004704:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004708:	ee37 7a27 	vadd.f32	s14, s14, s15
 800470c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004710:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004714:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004718:	edd7 7a07 	vldr	s15, [r7, #28]
 800471c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004720:	edd7 7a07 	vldr	s15, [r7, #28]
 8004724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 8004732:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004736:	edd7 7a07 	vldr	s15, [r7, #28]
 800473a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 800474c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004750:	eef1 7a67 	vneg.f32	s15, s15
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800475a:	e00d      	b.n	8004778 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2201      	movs	r2, #1
 8004760:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	609a      	str	r2, [r3, #8]
}
 8004778:	bf00      	nop
 800477a:	3734      	adds	r7, #52	@ 0x34
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	3a83126f 	.word	0x3a83126f

08004788 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004792:	4603      	mov	r3, r0
 8004794:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 8004796:	78fb      	ldrb	r3, [r7, #3]
 8004798:	2b1a      	cmp	r3, #26
 800479a:	d018      	beq.n	80047ce <temperature_to_base+0x46>
 800479c:	2b1a      	cmp	r3, #26
 800479e:	dc1d      	bgt.n	80047dc <temperature_to_base+0x54>
 80047a0:	2b18      	cmp	r3, #24
 80047a2:	d002      	beq.n	80047aa <temperature_to_base+0x22>
 80047a4:	2b19      	cmp	r3, #25
 80047a6:	d003      	beq.n	80047b0 <temperature_to_base+0x28>
 80047a8:	e018      	b.n	80047dc <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80047aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80047ae:	e017      	b.n	80047e0 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 80047b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80047b4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80047f0 <temperature_to_base+0x68>
 80047b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047bc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80047c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80047c4:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 80047c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047cc:	e008      	b.n	80047e0 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 80047ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80047d2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80047f4 <temperature_to_base+0x6c>
 80047d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047da:	e001      	b.n	80047e0 <temperature_to_base+0x58>
        default:
            return value;
 80047dc:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80047e0:	eeb0 0a67 	vmov.f32	s0, s15
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	42000000 	.word	0x42000000
 80047f4:	43889333 	.word	0x43889333

080047f8 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8004802:	4603      	mov	r3, r0
 8004804:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 8004806:	78fb      	ldrb	r3, [r7, #3]
 8004808:	2b1a      	cmp	r3, #26
 800480a:	d018      	beq.n	800483e <temperature_from_base+0x46>
 800480c:	2b1a      	cmp	r3, #26
 800480e:	dc1d      	bgt.n	800484c <temperature_from_base+0x54>
 8004810:	2b18      	cmp	r3, #24
 8004812:	d002      	beq.n	800481a <temperature_from_base+0x22>
 8004814:	2b19      	cmp	r3, #25
 8004816:	d003      	beq.n	8004820 <temperature_from_base+0x28>
 8004818:	e018      	b.n	800484c <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 800481a:	edd7 7a01 	vldr	s15, [r7, #4]
 800481e:	e017      	b.n	8004850 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 8004820:	edd7 7a01 	vldr	s15, [r7, #4]
 8004824:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8004828:	ee27 7a87 	vmul.f32	s14, s15, s14
 800482c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8004830:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004834:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004860 <temperature_from_base+0x68>
 8004838:	ee77 7a87 	vadd.f32	s15, s15, s14
 800483c:	e008      	b.n	8004850 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 800483e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004842:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004864 <temperature_from_base+0x6c>
 8004846:	ee77 7a87 	vadd.f32	s15, s15, s14
 800484a:	e001      	b.n	8004850 <temperature_from_base+0x58>
        default:
            return value;
 800484c:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004850:	eeb0 0a67 	vmov.f32	s0, s15
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	42000000 	.word	0x42000000
 8004864:	43889333 	.word	0x43889333

08004868 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	e00a      	b.n	8004898 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	3304      	adds	r3, #4
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3301      	adds	r3, #1
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b1a      	cmp	r3, #26
 800489c:	ddf1      	ble.n	8004882 <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a11      	ldr	r2, [pc, #68]	@ (80048e8 <init_length_converter+0x80>)
 80048a2:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a11      	ldr	r2, [pc, #68]	@ (80048ec <init_length_converter+0x84>)
 80048a8:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80048b0:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a0e      	ldr	r2, [pc, #56]	@ (80048f0 <init_length_converter+0x88>)
 80048b6:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a0e      	ldr	r2, [pc, #56]	@ (80048f4 <init_length_converter+0x8c>)
 80048bc:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a0d      	ldr	r2, [pc, #52]	@ (80048f8 <init_length_converter+0x90>)
 80048c2:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a0d      	ldr	r2, [pc, #52]	@ (80048fc <init_length_converter+0x94>)
 80048c8:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004900 <init_length_converter+0x98>)
 80048ce:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	3a83126f 	.word	0x3a83126f
 80048ec:	3c23d70a 	.word	0x3c23d70a
 80048f0:	447a0000 	.word	0x447a0000
 80048f4:	3cd013a9 	.word	0x3cd013a9
 80048f8:	3e9c0ebf 	.word	0x3e9c0ebf
 80048fc:	3f6a161e 	.word	0x3f6a161e
 8004900:	44c92b02 	.word	0x44c92b02

08004904 <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	220a      	movs	r2, #10
 8004916:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e00a      	b.n	8004934 <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	3304      	adds	r3, #4
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3301      	adds	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b1a      	cmp	r3, #26
 8004938:	ddf1      	ble.n	800491e <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a0e      	ldr	r2, [pc, #56]	@ (8004978 <init_mass_converter+0x74>)
 800493e:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a0e      	ldr	r2, [pc, #56]	@ (800497c <init_mass_converter+0x78>)
 8004944:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800494c:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a0b      	ldr	r2, [pc, #44]	@ (8004980 <init_mass_converter+0x7c>)
 8004952:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a0b      	ldr	r2, [pc, #44]	@ (8004984 <init_mass_converter+0x80>)
 8004958:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a0a      	ldr	r2, [pc, #40]	@ (8004988 <init_mass_converter+0x84>)
 800495e:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800496c:	bf00      	nop
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	358637bd 	.word	0x358637bd
 800497c:	3a83126f 	.word	0x3a83126f
 8004980:	447a0000 	.word	0x447a0000
 8004984:	3ce83d36 	.word	0x3ce83d36
 8004988:	3ee83d36 	.word	0x3ee83d36

0800498c <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	220f      	movs	r2, #15
 800499e:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e00a      	b.n	80049bc <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	3304      	adds	r3, #4
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3301      	adds	r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b1a      	cmp	r3, #26
 80049c0:	ddf1      	ble.n	80049a6 <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a0a      	ldr	r2, [pc, #40]	@ (80049f0 <init_angle_converter+0x64>)
 80049c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80049ce:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a08      	ldr	r2, [pc, #32]	@ (80049f4 <init_angle_converter+0x68>)
 80049d4:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	3c8efa35 	.word	0x3c8efa35
 80049f4:	3c80adfd 	.word	0x3c80adfd

080049f8 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2203      	movs	r2, #3
 8004a04:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2214      	movs	r2, #20
 8004a0a:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	e00a      	b.n	8004a28 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3301      	adds	r3, #1
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b1a      	cmp	r3, #26
 8004a2c:	ddf1      	ble.n	8004a12 <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a10      	ldr	r2, [pc, #64]	@ (8004a74 <init_time_converter+0x7c>)
 8004a32:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a10      	ldr	r2, [pc, #64]	@ (8004a78 <init_time_converter+0x80>)
 8004a38:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a0f      	ldr	r2, [pc, #60]	@ (8004a7c <init_time_converter+0x84>)
 8004a3e:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004a46:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8004a80 <init_time_converter+0x88>)
 8004a4c:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a0c      	ldr	r2, [pc, #48]	@ (8004a84 <init_time_converter+0x8c>)
 8004a52:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a0c      	ldr	r2, [pc, #48]	@ (8004a88 <init_time_converter+0x90>)
 8004a58:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a66:	bf00      	nop
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	3089705f 	.word	0x3089705f
 8004a78:	358637bd 	.word	0x358637bd
 8004a7c:	3a83126f 	.word	0x3a83126f
 8004a80:	42700000 	.word	0x42700000
 8004a84:	45610000 	.word	0x45610000
 8004a88:	47a8c000 	.word	0x47a8c000

08004a8c <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2204      	movs	r2, #4
 8004a98:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2218      	movs	r2, #24
 8004a9e:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	e00a      	b.n	8004abc <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	3304      	adds	r3, #4
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b1a      	cmp	r3, #26
 8004ac0:	ddf1      	ble.n	8004aa6 <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a05      	ldr	r2, [pc, #20]	@ (8004adc <init_temperature_converter+0x50>)
 8004ac6:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a05      	ldr	r2, [pc, #20]	@ (8004ae0 <init_temperature_converter+0x54>)
 8004acc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	08004789 	.word	0x08004789
 8004ae0:	080047f9 	.word	0x080047f9

08004ae4 <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff feba 	bl	8004868 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3378      	adds	r3, #120	@ 0x78
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff ff03 	bl	8004904 <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	33f0      	adds	r3, #240	@ 0xf0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff ff42 	bl	800498c <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff ff72 	bl	80049f8 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff ffb6 	bl	8004a8c <init_temperature_converter>
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	2b1a      	cmp	r3, #26
 8004b36:	d803      	bhi.n	8004b40 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	4a05      	ldr	r2, [pc, #20]	@ (8004b50 <UnitConverter_get_unit_type+0x28>)
 8004b3c:	5cd3      	ldrb	r3, [r2, r3]
 8004b3e:	e000      	b.n	8004b42 <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	20000318 	.word	0x20000318

08004b54 <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b60:	460b      	mov	r3, r1
 8004b62:	71fb      	strb	r3, [r7, #7]
 8004b64:	4613      	mov	r3, r2
 8004b66:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff ffdc 	bl	8004b28 <UnitConverter_get_unit_type>
 8004b70:	4603      	mov	r3, r0
 8004b72:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 8004b74:	79bb      	ldrb	r3, [r7, #6]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff ffd6 	bl	8004b28 <UnitConverter_get_unit_type>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 8004b80:	7efa      	ldrb	r2, [r7, #27]
 8004b82:	7ebb      	ldrb	r3, [r7, #26]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d002      	beq.n	8004b8e <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004b88:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b8c:	e03b      	b.n	8004c06 <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 8004b8e:	7efa      	ldrb	r2, [r7, #27]
 8004b90:	4613      	mov	r3, r2
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004baa:	79fa      	ldrb	r2, [r7, #7]
 8004bac:	4610      	mov	r0, r2
 8004bae:	ed97 0a02 	vldr	s0, [r7, #8]
 8004bb2:	4798      	blx	r3
 8004bb4:	ed87 0a07 	vstr	s0, [r7, #28]
 8004bb8:	e00c      	b.n	8004bd4 <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	edd3 7a00 	vldr	s15, [r3]
 8004bc8:	ed97 7a02 	vldr	s14, [r7, #8]
 8004bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd0:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d009      	beq.n	8004bf0 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be0:	79ba      	ldrb	r2, [r7, #6]
 8004be2:	4610      	mov	r0, r2
 8004be4:	ed97 0a07 	vldr	s0, [r7, #28]
 8004be8:	4798      	blx	r3
 8004bea:	eef0 7a40 	vmov.f32	s15, s0
 8004bee:	e00a      	b.n	8004c06 <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 8004bf0:	79bb      	ldrb	r3, [r7, #6]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	ed93 7a00 	vldr	s14, [r3]
 8004bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 8004c06:	eeb0 0a67 	vmov.f32	s0, s15
 8004c0a:	3720      	adds	r7, #32
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	71fb      	strb	r3, [r7, #7]
 8004c20:	4613      	mov	r3, r2
 8004c22:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff ff7e 	bl	8004b28 <UnitConverter_get_unit_type>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d111      	bne.n	8004c56 <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 8004c32:	79bb      	ldrb	r3, [r7, #6]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff ff77 	bl	8004b28 <UnitConverter_get_unit_type>
 8004c3a:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d10a      	bne.n	8004c56 <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 8004c40:	79ba      	ldrb	r2, [r7, #6]
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	4619      	mov	r1, r3
 8004c46:	ed97 0a02 	vldr	s0, [r7, #8]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7ff ff82 	bl	8004b54 <UnitConverter_convert>
 8004c50:	eef0 7a40 	vmov.f32	s15, s0
 8004c54:	e001      	b.n	8004c5a <UnitConverter_angle+0x4a>
    }
    return value;
 8004c56:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8004c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08c      	sub	sp, #48	@ 0x30
 8004c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004c76:	1d3b      	adds	r3, r7, #4
 8004c78:	2220      	movs	r2, #32
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f00d fcf1 	bl	8012664 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004c82:	4b39      	ldr	r3, [pc, #228]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004c84:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004c88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004c8a:	4b37      	ldr	r3, [pc, #220]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004c8c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004c90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004c92:	4b35      	ldr	r3, [pc, #212]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c98:	4b33      	ldr	r3, [pc, #204]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004c9e:	4b32      	ldr	r3, [pc, #200]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004ca4:	4b30      	ldr	r3, [pc, #192]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004caa:	4b2f      	ldr	r3, [pc, #188]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cac:	2204      	movs	r2, #4
 8004cae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004cb6:	4b2c      	ldr	r3, [pc, #176]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004cc2:	4b29      	ldr	r3, [pc, #164]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004cca:	4b27      	ldr	r3, [pc, #156]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004cd0:	4b25      	ldr	r3, [pc, #148]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004cd6:	4b24      	ldr	r3, [pc, #144]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004cde:	4b22      	ldr	r3, [pc, #136]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004ce4:	4b20      	ldr	r3, [pc, #128]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004cec:	481e      	ldr	r0, [pc, #120]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cee:	f005 fe8b 	bl	800aa08 <HAL_ADC_Init>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004cf8:	f003 feae 	bl	8008a58 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004d00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d04:	4619      	mov	r1, r3
 8004d06:	4818      	ldr	r0, [pc, #96]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004d08:	f006 ffaa 	bl	800bc60 <HAL_ADCEx_MultiModeConfigChannel>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004d12:	f003 fea1 	bl	8008a58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004d16:	4b15      	ldr	r3, [pc, #84]	@ (8004d6c <MX_ADC1_Init+0x108>)
 8004d18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004d1a:	2306      	movs	r3, #6
 8004d1c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004d1e:	2307      	movs	r3, #7
 8004d20:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004d22:	237f      	movs	r3, #127	@ 0x7f
 8004d24:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004d26:	2304      	movs	r3, #4
 8004d28:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d2e:	1d3b      	adds	r3, r7, #4
 8004d30:	4619      	mov	r1, r3
 8004d32:	480d      	ldr	r0, [pc, #52]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004d34:	f006 f916 	bl	800af64 <HAL_ADC_ConfigChannel>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8004d3e:	f003 fe8b 	bl	8008a58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004d42:	4b0b      	ldr	r3, [pc, #44]	@ (8004d70 <MX_ADC1_Init+0x10c>)
 8004d44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004d46:	230c      	movs	r3, #12
 8004d48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d4a:	1d3b      	adds	r3, r7, #4
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4806      	ldr	r0, [pc, #24]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004d50:	f006 f908 	bl	800af64 <HAL_ADC_ConfigChannel>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004d5a:	f003 fe7d 	bl	8008a58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004d5e:	bf00      	nop
 8004d60:	3730      	adds	r7, #48	@ 0x30
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	200003b4 	.word	0x200003b4
 8004d6c:	19200040 	.word	0x19200040
 8004d70:	1d500080 	.word	0x1d500080

08004d74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b09e      	sub	sp, #120	@ 0x78
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	605a      	str	r2, [r3, #4]
 8004d86:	609a      	str	r2, [r3, #8]
 8004d88:	60da      	str	r2, [r3, #12]
 8004d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	2254      	movs	r2, #84	@ 0x54
 8004d92:	2100      	movs	r1, #0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f00d fc65 	bl	8012664 <memset>
  if(adcHandle->Instance==ADC1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004da2:	d15e      	bne.n	8004e62 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004da4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004da8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004daa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004dae:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004db0:	f107 0310 	add.w	r3, r7, #16
 8004db4:	4618      	mov	r0, r3
 8004db6:	f008 fc63 	bl	800d680 <HAL_RCCEx_PeriphCLKConfig>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004dc0:	f003 fe4a 	bl	8008a58 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004dc4:	4b29      	ldr	r3, [pc, #164]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dc8:	4a28      	ldr	r2, [pc, #160]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004dca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dd0:	4b26      	ldr	r3, [pc, #152]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ddc:	4b23      	ldr	r3, [pc, #140]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004de0:	4a22      	ldr	r2, [pc, #136]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004de2:	f043 0304 	orr.w	r3, r3, #4
 8004de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004de8:	4b20      	ldr	r3, [pc, #128]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004df4:	2303      	movs	r3, #3
 8004df6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004e04:	4619      	mov	r1, r3
 8004e06:	481a      	ldr	r0, [pc, #104]	@ (8004e70 <HAL_ADC_MspInit+0xfc>)
 8004e08:	f007 fc74 	bl	800c6f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004e0c:	4b19      	ldr	r3, [pc, #100]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004e78 <HAL_ADC_MspInit+0x104>)
 8004e10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004e12:	4b18      	ldr	r3, [pc, #96]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e14:	2205      	movs	r2, #5
 8004e16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e18:	4b16      	ldr	r3, [pc, #88]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e1e:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004e24:	4b13      	ldr	r3, [pc, #76]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e26:	2280      	movs	r2, #128	@ 0x80
 8004e28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e2a:	4b12      	ldr	r3, [pc, #72]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e32:	4b10      	ldr	r3, [pc, #64]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004e40:	4b0c      	ldr	r3, [pc, #48]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004e46:	480b      	ldr	r0, [pc, #44]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e48:	f007 f922 	bl	800c090 <HAL_DMA_Init>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8004e52:	f003 fe01 	bl	8008a58 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a06      	ldr	r2, [pc, #24]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e5a:	655a      	str	r2, [r3, #84]	@ 0x54
 8004e5c:	4a05      	ldr	r2, [pc, #20]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004e62:	bf00      	nop
 8004e64:	3778      	adds	r7, #120	@ 0x78
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	48000800 	.word	0x48000800
 8004e74:	20000420 	.word	0x20000420
 8004e78:	40020008 	.word	0x40020008

08004e7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004e82:	4b22      	ldr	r3, [pc, #136]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e86:	4a21      	ldr	r2, [pc, #132]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004e88:	f043 0304 	orr.w	r3, r3, #4
 8004e8c:	6493      	str	r3, [r2, #72]	@ 0x48
 8004e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	607b      	str	r3, [r7, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	6493      	str	r3, [r2, #72]	@ 0x48
 8004ea6:	4b19      	ldr	r3, [pc, #100]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	200b      	movs	r0, #11
 8004eb8:	f007 f8b5 	bl	800c026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004ebc:	200b      	movs	r0, #11
 8004ebe:	f007 f8cc 	bl	800c05a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	200c      	movs	r0, #12
 8004ec8:	f007 f8ad 	bl	800c026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004ecc:	200c      	movs	r0, #12
 8004ece:	f007 f8c4 	bl	800c05a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	200d      	movs	r0, #13
 8004ed8:	f007 f8a5 	bl	800c026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004edc:	200d      	movs	r0, #13
 8004ede:	f007 f8bc 	bl	800c05a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	200e      	movs	r0, #14
 8004ee8:	f007 f89d 	bl	800c026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004eec:	200e      	movs	r0, #14
 8004eee:	f007 f8b4 	bl	800c05a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	200f      	movs	r0, #15
 8004ef8:	f007 f895 	bl	800c026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004efc:	200f      	movs	r0, #15
 8004efe:	f007 f8ac 	bl	800c05a <HAL_NVIC_EnableIRQ>

}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40021000 	.word	0x40021000

08004f10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08a      	sub	sp, #40	@ 0x28
 8004f14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f16:	f107 0314 	add.w	r3, r7, #20
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	605a      	str	r2, [r3, #4]
 8004f20:	609a      	str	r2, [r3, #8]
 8004f22:	60da      	str	r2, [r3, #12]
 8004f24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f26:	4b75      	ldr	r3, [pc, #468]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f2a:	4a74      	ldr	r2, [pc, #464]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f2c:	f043 0304 	orr.w	r3, r3, #4
 8004f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f32:	4b72      	ldr	r3, [pc, #456]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f3e:	4b6f      	ldr	r3, [pc, #444]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f42:	4a6e      	ldr	r2, [pc, #440]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f44:	f043 0320 	orr.w	r3, r3, #32
 8004f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f4a:	4b6c      	ldr	r3, [pc, #432]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f56:	4b69      	ldr	r3, [pc, #420]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f5a:	4a68      	ldr	r2, [pc, #416]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f62:	4b66      	ldr	r3, [pc, #408]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	60bb      	str	r3, [r7, #8]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f6e:	4b63      	ldr	r3, [pc, #396]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f72:	4a62      	ldr	r2, [pc, #392]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f74:	f043 0302 	orr.w	r3, r3, #2
 8004f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f7a:	4b60      	ldr	r3, [pc, #384]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	607b      	str	r3, [r7, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8004f86:	2200      	movs	r2, #0
 8004f88:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004f8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f90:	f007 fd4a 	bl	800ca28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8004f94:	2200      	movs	r2, #0
 8004f96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f9a:	4859      	ldr	r0, [pc, #356]	@ (8005100 <MX_GPIO_Init+0x1f0>)
 8004f9c:	f007 fd44 	bl	800ca28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004fa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fa6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004fb0:	f107 0314 	add.w	r3, r7, #20
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4852      	ldr	r0, [pc, #328]	@ (8005100 <MX_GPIO_Init+0x1f0>)
 8004fb8:	f007 fb9c 	bl	800c6f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004fbc:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fce:	f107 0314 	add.w	r3, r7, #20
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004fd8:	f007 fb8c 	bl	800c6f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 8004fdc:	f241 0301 	movw	r3, #4097	@ 0x1001
 8004fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fe2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fec:	f107 0314 	add.w	r3, r7, #20
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4844      	ldr	r0, [pc, #272]	@ (8005104 <MX_GPIO_Init+0x1f4>)
 8004ff4:	f007 fb7e 	bl	800c6f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004ff8:	2306      	movs	r3, #6
 8004ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005000:	2302      	movs	r3, #2
 8005002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005004:	f107 0314 	add.w	r3, r7, #20
 8005008:	4619      	mov	r1, r3
 800500a:	483e      	ldr	r0, [pc, #248]	@ (8005104 <MX_GPIO_Init+0x1f4>)
 800500c:	f007 fb72 	bl	800c6f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005010:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005016:	2301      	movs	r3, #1
 8005018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800501e:	2300      	movs	r3, #0
 8005020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005022:	f107 0314 	add.w	r3, r7, #20
 8005026:	4619      	mov	r1, r3
 8005028:	4835      	ldr	r0, [pc, #212]	@ (8005100 <MX_GPIO_Init+0x1f0>)
 800502a:	f007 fb63 	bl	800c6f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 800502e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005034:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800503a:	2302      	movs	r3, #2
 800503c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800503e:	f107 0314 	add.w	r3, r7, #20
 8005042:	4619      	mov	r1, r3
 8005044:	482e      	ldr	r0, [pc, #184]	@ (8005100 <MX_GPIO_Init+0x1f0>)
 8005046:	f007 fb55 	bl	800c6f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 800504a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800504e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005050:	2300      	movs	r3, #0
 8005052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005054:	2302      	movs	r3, #2
 8005056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8005058:	f107 0314 	add.w	r3, r7, #20
 800505c:	4619      	mov	r1, r3
 800505e:	4828      	ldr	r0, [pc, #160]	@ (8005100 <MX_GPIO_Init+0x1f0>)
 8005060:	f007 fb48 	bl	800c6f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 8005064:	2310      	movs	r3, #16
 8005066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005068:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800506c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506e:	2300      	movs	r3, #0
 8005070:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8005072:	f107 0314 	add.w	r3, r7, #20
 8005076:	4619      	mov	r1, r3
 8005078:	4822      	ldr	r0, [pc, #136]	@ (8005104 <MX_GPIO_Init+0x1f4>)
 800507a:	f007 fb3b 	bl	800c6f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 800507e:	2340      	movs	r3, #64	@ 0x40
 8005080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005082:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005088:	2301      	movs	r3, #1
 800508a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 800508c:	f107 0314 	add.w	r3, r7, #20
 8005090:	4619      	mov	r1, r3
 8005092:	481c      	ldr	r0, [pc, #112]	@ (8005104 <MX_GPIO_Init+0x1f4>)
 8005094:	f007 fb2e 	bl	800c6f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 8005098:	2380      	movs	r3, #128	@ 0x80
 800509a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800509c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80050a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80050a2:	2302      	movs	r3, #2
 80050a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 80050a6:	f107 0314 	add.w	r3, r7, #20
 80050aa:	4619      	mov	r1, r3
 80050ac:	4815      	ldr	r0, [pc, #84]	@ (8005104 <MX_GPIO_Init+0x1f4>)
 80050ae:	f007 fb21 	bl	800c6f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80050b2:	2200      	movs	r2, #0
 80050b4:	2100      	movs	r1, #0
 80050b6:	2006      	movs	r0, #6
 80050b8:	f006 ffb5 	bl	800c026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80050bc:	2006      	movs	r0, #6
 80050be:	f006 ffcc 	bl	800c05a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80050c2:	2200      	movs	r2, #0
 80050c4:	2100      	movs	r1, #0
 80050c6:	200a      	movs	r0, #10
 80050c8:	f006 ffad 	bl	800c026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80050cc:	200a      	movs	r0, #10
 80050ce:	f006 ffc4 	bl	800c05a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80050d2:	2200      	movs	r2, #0
 80050d4:	2100      	movs	r1, #0
 80050d6:	2017      	movs	r0, #23
 80050d8:	f006 ffa5 	bl	800c026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80050dc:	2017      	movs	r0, #23
 80050de:	f006 ffbc 	bl	800c05a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80050e2:	2200      	movs	r2, #0
 80050e4:	2100      	movs	r1, #0
 80050e6:	2028      	movs	r0, #40	@ 0x28
 80050e8:	f006 ff9d 	bl	800c026 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80050ec:	2028      	movs	r0, #40	@ 0x28
 80050ee:	f006 ffb4 	bl	800c05a <HAL_NVIC_EnableIRQ>

}
 80050f2:	bf00      	nop
 80050f4:	3728      	adds	r7, #40	@ 0x28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	40021000 	.word	0x40021000
 8005100:	48000800 	.word	0x48000800
 8005104:	48000400 	.word	0x48000400

08005108 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8005108:	b580      	push	{r7, lr}
 800510a:	b096      	sub	sp, #88	@ 0x58
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	ed87 0a02 	vstr	s0, [r7, #8]
 8005114:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 800511e:	1d3b      	adds	r3, r7, #4
 8005120:	2201      	movs	r2, #1
 8005122:	2101      	movs	r1, #1
 8005124:	f00c fd2d 	bl	8011b82 <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8005134:	4619      	mov	r1, r3
 8005136:	4610      	mov	r0, r2
 8005138:	f00d f99d 	bl	8012476 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f00d f993 	bl	8012476 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f00d f989 	bl	8012476 <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8005170:	4619      	mov	r1, r3
 8005172:	ed97 0a02 	vldr	s0, [r7, #8]
 8005176:	4610      	mov	r0, r2
 8005178:	f00d f90c 	bl	8012394 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 800518e:	461a      	mov	r2, r3
 8005190:	f00d f886 	bl	80122a0 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80051a6:	461a      	mov	r2, r3
 80051a8:	f00c fcb0 	bl	8011b0c <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80051be:	461a      	mov	r2, r3
 80051c0:	f00d f86e 	bl	80122a0 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80051d6:	461a      	mov	r2, r3
 80051d8:	f00d f862 	bl	80122a0 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80051ee:	461a      	mov	r2, r3
 80051f0:	f00d f856 	bl	80122a0 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8005206:	4619      	mov	r1, r3
 8005208:	eeb0 0a67 	vmov.f32	s0, s15
 800520c:	4610      	mov	r0, r2
 800520e:	f00d f8c1 	bl	8012394 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8005224:	461a      	mov	r2, r3
 8005226:	f00c fc71 	bl	8011b0c <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 800523c:	461a      	mov	r2, r3
 800523e:	f00d f82f 	bl	80122a0 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8005254:	461a      	mov	r2, r3
 8005256:	f00d f823 	bl	80122a0 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 800526c:	461a      	mov	r2, r3
 800526e:	f00c fc4d 	bl	8011b0c <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 800527e:	4619      	mov	r1, r3
 8005280:	4610      	mov	r0, r2
 8005282:	f00c fc96 	bl	8011bb2 <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8005298:	461a      	mov	r2, r3
 800529a:	f00d f801 	bl	80122a0 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80052b0:	461a      	mov	r2, r3
 80052b2:	f00c fff5 	bl	80122a0 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80052c8:	461a      	mov	r2, r3
 80052ca:	f00c ffe9 	bl	80122a0 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 80052e0:	461a      	mov	r2, r3
 80052e2:	f00d f88d 	bl	8012400 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 80052f8:	461a      	mov	r2, r3
 80052fa:	f00c ffd1 	bl	80122a0 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8005310:	461a      	mov	r2, r3
 8005312:	f00c fbfb 	bl	8011b0c <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8005328:	461a      	mov	r2, r3
 800532a:	f00c ffb9 	bl	80122a0 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 800532e:	f107 0310 	add.w	r3, r7, #16
 8005332:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8005336:	2204      	movs	r2, #4
 8005338:	2104      	movs	r1, #4
 800533a:	f00c fc22 	bl	8011b82 <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 800534a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800534e:	4619      	mov	r1, r3
 8005350:	f00c ffa6 	bl	80122a0 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800535a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800535e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8005362:	4618      	mov	r0, r3
 8005364:	f00d f84c 	bl	8012400 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8005374:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005378:	4618      	mov	r0, r3
 800537a:	f00c ff91 	bl	80122a0 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800538e:	ee07 3a90 	vmov	s15, r3
}
 8005392:	eeb0 0a67 	vmov.f32	s0, s15
 8005396:	3758      	adds	r7, #88	@ 0x58
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 800539c:	b5b0      	push	{r4, r5, r7, lr}
 800539e:	b0a4      	sub	sp, #144	@ 0x90
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6178      	str	r0, [r7, #20]
 80053a4:	6139      	str	r1, [r7, #16]
 80053a6:	60fa      	str	r2, [r7, #12]
 80053a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80053ac:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 80053c0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80053c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053ce:	f04f 0300 	mov.w	r3, #0
 80053d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053e4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80053e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 80053f6:	4bc6      	ldr	r3, [pc, #792]	@ (8005710 <Kalman_Start+0x374>)
 80053f8:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80053fc:	461d      	mov	r5, r3
 80053fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800540a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800540e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8005412:	f107 031c 	add.w	r3, r7, #28
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	605a      	str	r2, [r3, #4]
 800541c:	609a      	str	r2, [r3, #8]
 800541e:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 800542a:	2300      	movs	r3, #0
 800542c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005430:	e028      	b.n	8005484 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8005432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4413      	add	r3, r2
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	6979      	ldr	r1, [r7, #20]
 8005440:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005444:	3314      	adds	r3, #20
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 800544c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	3390      	adds	r3, #144	@ 0x90
 8005454:	443b      	add	r3, r7
 8005456:	3b64      	subs	r3, #100	@ 0x64
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	6979      	ldr	r1, [r7, #20]
 800545c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005460:	3398      	adds	r3, #152	@ 0x98
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800546e:	3304      	adds	r3, #4
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 800547a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800547e:	3301      	adds	r3, #1
 8005480:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005484:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005488:	2b0f      	cmp	r3, #15
 800548a:	ddd2      	ble.n	8005432 <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 800548c:	2300      	movs	r3, #0
 800548e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005492:	e03a      	b.n	800550a <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8005494:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	3390      	adds	r3, #144	@ 0x90
 800549c:	443b      	add	r3, r7
 800549e:	3b74      	subs	r3, #116	@ 0x74
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	6979      	ldr	r1, [r7, #20]
 80054a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 80054ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	6979      	ldr	r1, [r7, #20]
 80054bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054c0:	3324      	adds	r3, #36	@ 0x24
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 80054c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	3390      	adds	r3, #144	@ 0x90
 80054d0:	443b      	add	r3, r7
 80054d2:	3b14      	subs	r3, #20
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	6979      	ldr	r1, [r7, #20]
 80054d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054dc:	3328      	adds	r3, #40	@ 0x28
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 80054e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	3390      	adds	r3, #144	@ 0x90
 80054ec:	443b      	add	r3, r7
 80054ee:	3b24      	subs	r3, #36	@ 0x24
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	6979      	ldr	r1, [r7, #20]
 80054f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054f8:	332c      	adds	r3, #44	@ 0x2c
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	440b      	add	r3, r1
 80054fe:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8005500:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005504:	3301      	adds	r3, #1
 8005506:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800550a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800550e:	2b03      	cmp	r3, #3
 8005510:	ddc0      	ble.n	8005494 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	2201      	movs	r2, #1
 800551c:	2104      	movs	r1, #4
 800551e:	f00c fb30 	bl	8011b82 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	3310      	adds	r3, #16
 800552c:	2204      	movs	r2, #4
 800552e:	2104      	movs	r1, #4
 8005530:	f00c fb27 	bl	8011b82 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	3350      	adds	r3, #80	@ 0x50
 800553e:	2204      	movs	r2, #4
 8005540:	2104      	movs	r1, #4
 8005542:	f00c fb1e 	bl	8011b82 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	3390      	adds	r3, #144	@ 0x90
 8005550:	2201      	movs	r2, #1
 8005552:	2104      	movs	r1, #4
 8005554:	f00c fb15 	bl	8011b82 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	33a0      	adds	r3, #160	@ 0xa0
 8005562:	2204      	movs	r2, #4
 8005564:	2101      	movs	r1, #1
 8005566:	f00c fb0c 	bl	8011b82 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	33b0      	adds	r3, #176	@ 0xb0
 8005574:	2201      	movs	r2, #1
 8005576:	2104      	movs	r1, #4
 8005578:	f00c fb03 	bl	8011b82 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	33c8      	adds	r3, #200	@ 0xc8
 8005586:	2204      	movs	r2, #4
 8005588:	2104      	movs	r1, #4
 800558a:	f00c fafa 	bl	8011b82 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800559a:	2201      	movs	r2, #1
 800559c:	2104      	movs	r1, #4
 800559e:	f00c faf0 	bl	8011b82 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80055ae:	2204      	movs	r2, #4
 80055b0:	2101      	movs	r1, #1
 80055b2:	f00c fae6 	bl	8011b82 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80055c2:	2204      	movs	r2, #4
 80055c4:	2104      	movs	r1, #4
 80055c6:	f00c fadc 	bl	8011b82 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80055d6:	2204      	movs	r2, #4
 80055d8:	2104      	movs	r1, #4
 80055da:	f00c fad2 	bl	8011b82 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80055ea:	2201      	movs	r2, #1
 80055ec:	2104      	movs	r1, #4
 80055ee:	f00c fac8 	bl	8011b82 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80055fe:	2201      	movs	r2, #1
 8005600:	2104      	movs	r1, #4
 8005602:	f00c fabe 	bl	8011b82 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8005612:	2204      	movs	r2, #4
 8005614:	2101      	movs	r1, #1
 8005616:	f00c fab4 	bl	8011b82 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8005626:	2201      	movs	r2, #1
 8005628:	2101      	movs	r1, #1
 800562a:	f00c faaa 	bl	8011b82 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800563a:	2201      	movs	r2, #1
 800563c:	2101      	movs	r1, #1
 800563e:	f00c faa0 	bl	8011b82 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800564e:	2201      	movs	r2, #1
 8005650:	2104      	movs	r1, #4
 8005652:	f00c fa96 	bl	8011b82 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005662:	2201      	movs	r2, #1
 8005664:	2104      	movs	r1, #4
 8005666:	f00c fa8c 	bl	8011b82 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8005676:	2201      	movs	r2, #1
 8005678:	2101      	movs	r1, #1
 800567a:	f00c fa82 	bl	8011b82 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800568a:	2201      	movs	r2, #1
 800568c:	2101      	movs	r1, #1
 800568e:	f00c fa78 	bl	8011b82 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800569e:	2201      	movs	r2, #1
 80056a0:	2101      	movs	r1, #1
 80056a2:	f00c fa6e 	bl	8011b82 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80056b2:	2201      	movs	r2, #1
 80056b4:	2104      	movs	r1, #4
 80056b6:	f00c fa64 	bl	8011b82 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80056c6:	2201      	movs	r2, #1
 80056c8:	2101      	movs	r1, #1
 80056ca:	f00c fa5a 	bl	8011b82 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80056da:	2204      	movs	r2, #4
 80056dc:	2104      	movs	r1, #4
 80056de:	f00c fa50 	bl	8011b82 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	33c4      	adds	r3, #196	@ 0xc4
 80056ec:	2201      	movs	r2, #1
 80056ee:	2101      	movs	r1, #1
 80056f0:	f00c fa47 	bl	8011b82 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8005700:	2201      	movs	r2, #1
 8005702:	2101      	movs	r1, #1
 8005704:	f00c fa3d 	bl	8011b82 <arm_mat_init_f32>
}
 8005708:	bf00      	nop
 800570a:	3790      	adds	r7, #144	@ 0x90
 800570c:	46bd      	mov	sp, r7
 800570e:	bdb0      	pop	{r4, r5, r7, pc}
 8005710:	08014530 	.word	0x08014530

08005714 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005718:	f3bf 8f4f 	dsb	sy
}
 800571c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800571e:	4b06      	ldr	r3, [pc, #24]	@ (8005738 <__NVIC_SystemReset+0x24>)
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005726:	4904      	ldr	r1, [pc, #16]	@ (8005738 <__NVIC_SystemReset+0x24>)
 8005728:	4b04      	ldr	r3, [pc, #16]	@ (800573c <__NVIC_SystemReset+0x28>)
 800572a:	4313      	orrs	r3, r2
 800572c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800572e:	f3bf 8f4f 	dsb	sy
}
 8005732:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005734:	bf00      	nop
 8005736:	e7fd      	b.n	8005734 <__NVIC_SystemReset+0x20>
 8005738:	e000ed00 	.word	0xe000ed00
 800573c:	05fa0004 	.word	0x05fa0004

08005740 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005746:	f004 feaa 	bl	800a49e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800574a:	f000 f88d 	bl	8005868 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800574e:	f7ff fbdf 	bl	8004f10 <MX_GPIO_Init>
	MX_DMA_Init();
 8005752:	f7ff fb93 	bl	8004e7c <MX_DMA_Init>
	MX_ADC1_Init();
 8005756:	f7ff fa85 	bl	8004c64 <MX_ADC1_Init>
	MX_TIM2_Init();
 800575a:	f004 f8b5 	bl	80098c8 <MX_TIM2_Init>
	MX_TIM3_Init();
 800575e:	f004 f901 	bl	8009964 <MX_TIM3_Init>
	MX_TIM4_Init();
 8005762:	f004 f955 	bl	8009a10 <MX_TIM4_Init>
	MX_TIM5_Init();
 8005766:	f004 f9a9 	bl	8009abc <MX_TIM5_Init>
	MX_TIM8_Init();
 800576a:	f004 f9fd 	bl	8009b68 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 800576e:	f004 fcbf 	bl	800a0f0 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8005772:	f004 fab7 	bl	8009ce4 <MX_TIM16_Init>
	MX_TIM1_Init();
 8005776:	f004 f813 	bl	80097a0 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 800577a:	f004 fc6f 	bl	800a05c <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 800577e:	f003 f973 	bl	8008a68 <plotter_begin>

	prismatic_axis.position = prismatic_encoder.mm;
 8005782:	4b28      	ldr	r3, [pc, #160]	@ (8005824 <main+0xe4>)
 8005784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005786:	4a28      	ldr	r2, [pc, #160]	@ (8005828 <main+0xe8>)
 8005788:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 800578a:	4b28      	ldr	r3, [pc, #160]	@ (800582c <main+0xec>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578e:	4a28      	ldr	r2, [pc, #160]	@ (8005830 <main+0xf0>)
 8005790:	6013      	str	r3, [r2, #0]

	safety_state = SAFETY_NORMAL;
 8005792:	4b28      	ldr	r3, [pc, #160]	@ (8005834 <main+0xf4>)
 8005794:	2200      	movs	r2, #0
 8005796:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8005798:	4b27      	ldr	r3, [pc, #156]	@ (8005838 <main+0xf8>)
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
	pilot_light_state = false;
 800579e:	4b27      	ldr	r3, [pc, #156]	@ (800583c <main+0xfc>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 80057a4:	4b26      	ldr	r3, [pc, #152]	@ (8005840 <main+0x100>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]
	position_control_tick = 0;
 80057aa:	4b26      	ldr	r3, [pc, #152]	@ (8005844 <main+0x104>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]

	if (first_startup) {
 80057b0:	4b25      	ldr	r3, [pc, #148]	@ (8005848 <main+0x108>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d032      	beq.n	800581e <main+0xde>
		// Check if already at home position
		bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 80057b8:	2101      	movs	r1, #1
 80057ba:	4824      	ldr	r0, [pc, #144]	@ (800584c <main+0x10c>)
 80057bc:	f007 f91c 	bl	800c9f8 <HAL_GPIO_ReadPin>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	bf14      	ite	ne
 80057c6:	2301      	movne	r3, #1
 80057c8:	2300      	moveq	r3, #0
 80057ca:	71fb      	strb	r3, [r7, #7]
		UPPER_PHOTO_Pin);
		bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 80057cc:	2140      	movs	r1, #64	@ 0x40
 80057ce:	481f      	ldr	r0, [pc, #124]	@ (800584c <main+0x10c>)
 80057d0:	f007 f912 	bl	800c9f8 <HAL_GPIO_ReadPin>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	bf14      	ite	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	2300      	moveq	r3, #0
 80057de:	71bb      	strb	r3, [r7, #6]

		if (up_photo_detected && prox_detected) {
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d018      	beq.n	8005818 <main+0xd8>
 80057e6:	79bb      	ldrb	r3, [r7, #6]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d015      	beq.n	8005818 <main+0xd8>
			// Already at home position - no need to home
			first_startup = false;
 80057ec:	4b16      	ldr	r3, [pc, #88]	@ (8005848 <main+0x108>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
			homing_active = false;
 80057f2:	4b17      	ldr	r3, [pc, #92]	@ (8005850 <main+0x110>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80057f8:	4b16      	ldr	r3, [pc, #88]	@ (8005854 <main+0x114>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	701a      	strb	r2, [r3, #0]

			// Clear any sensor flags
			up_photo = false;
 80057fe:	4b16      	ldr	r3, [pc, #88]	@ (8005858 <main+0x118>)
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005804:	4b15      	ldr	r3, [pc, #84]	@ (800585c <main+0x11c>)
 8005806:	2200      	movs	r2, #0
 8005808:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 800580a:	4b15      	ldr	r3, [pc, #84]	@ (8005860 <main+0x120>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 8005810:	4b14      	ldr	r3, [pc, #80]	@ (8005864 <main+0x124>)
 8005812:	2200      	movs	r2, #0
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	e002      	b.n	800581e <main+0xde>

		} else {
			start_homing_sequence(true);
 8005818:	2001      	movs	r0, #1
 800581a:	f000 f871 	bl	8005900 <start_homing_sequence>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		handle_b2_button_polling();
 800581e:	f002 fd61 	bl	80082e4 <handle_b2_button_polling>
 8005822:	e7fc      	b.n	800581e <main+0xde>
 8005824:	200006cc 	.word	0x200006cc
 8005828:	20000480 	.word	0x20000480
 800582c:	20000728 	.word	0x20000728
 8005830:	200004c4 	.word	0x200004c4
 8005834:	20000568 	.word	0x20000568
 8005838:	20000571 	.word	0x20000571
 800583c:	20000570 	.word	0x20000570
 8005840:	2000056c 	.word	0x2000056c
 8005844:	20000574 	.word	0x20000574
 8005848:	20000333 	.word	0x20000333
 800584c:	48000400 	.word	0x48000400
 8005850:	20000567 	.word	0x20000567
 8005854:	20000566 	.word	0x20000566
 8005858:	20000564 	.word	0x20000564
 800585c:	20000565 	.word	0x20000565
 8005860:	20000560 	.word	0x20000560
 8005864:	20000508 	.word	0x20000508

08005868 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b094      	sub	sp, #80	@ 0x50
 800586c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800586e:	f107 0318 	add.w	r3, r7, #24
 8005872:	2238      	movs	r2, #56	@ 0x38
 8005874:	2100      	movs	r1, #0
 8005876:	4618      	mov	r0, r3
 8005878:	f00c fef4 	bl	8012664 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800587c:	1d3b      	adds	r3, r7, #4
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	605a      	str	r2, [r3, #4]
 8005884:	609a      	str	r2, [r3, #8]
 8005886:	60da      	str	r2, [r3, #12]
 8005888:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800588a:	2000      	movs	r0, #0
 800588c:	f007 f916 	bl	800cabc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005890:	2302      	movs	r3, #2
 8005892:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005894:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800589a:	2340      	movs	r3, #64	@ 0x40
 800589c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800589e:	2302      	movs	r3, #2
 80058a0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80058a2:	2302      	movs	r3, #2
 80058a4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80058a6:	2304      	movs	r3, #4
 80058a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80058aa:	2355      	movs	r3, #85	@ 0x55
 80058ac:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80058ae:	2302      	movs	r3, #2
 80058b0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80058b2:	2302      	movs	r3, #2
 80058b4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80058b6:	2302      	movs	r3, #2
 80058b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80058ba:	f107 0318 	add.w	r3, r7, #24
 80058be:	4618      	mov	r0, r3
 80058c0:	f007 f9b0 	bl	800cc24 <HAL_RCC_OscConfig>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <SystemClock_Config+0x66>
		Error_Handler();
 80058ca:	f003 f8c5 	bl	8008a58 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80058ce:	230f      	movs	r3, #15
 80058d0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058d2:	2303      	movs	r3, #3
 80058d4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80058da:	2300      	movs	r3, #0
 80058dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80058e2:	1d3b      	adds	r3, r7, #4
 80058e4:	2104      	movs	r1, #4
 80058e6:	4618      	mov	r0, r3
 80058e8:	f007 fcae 	bl	800d248 <HAL_RCC_ClockConfig>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <SystemClock_Config+0x8e>
		Error_Handler();
 80058f2:	f003 f8b1 	bl	8008a58 <Error_Handler>
	}
}
 80058f6:	bf00      	nop
 80058f8:	3750      	adds	r7, #80	@ 0x50
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	4603      	mov	r3, r0
 8005908:	71fb      	strb	r3, [r7, #7]
	//modbus set home state
	registerFrame[R_Theta_Status].U16 = 1;
 800590a:	4b52      	ldr	r3, [pc, #328]	@ (8005a54 <start_homing_sequence+0x154>)
 800590c:	2201      	movs	r2, #1
 800590e:	841a      	strh	r2, [r3, #32]
	if (homing_active)
 8005910:	4b51      	ldr	r3, [pc, #324]	@ (8005a58 <start_homing_sequence+0x158>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	f040 8098 	bne.w	8005a4a <start_homing_sequence+0x14a>
		return;

	// Check current sensor states
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 800591a:	2101      	movs	r1, #1
 800591c:	484f      	ldr	r0, [pc, #316]	@ (8005a5c <start_homing_sequence+0x15c>)
 800591e:	f007 f86b 	bl	800c9f8 <HAL_GPIO_ReadPin>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	bf14      	ite	ne
 8005928:	2301      	movne	r3, #1
 800592a:	2300      	moveq	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
	UPPER_PHOTO_Pin);
	bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 800592e:	2140      	movs	r1, #64	@ 0x40
 8005930:	484a      	ldr	r0, [pc, #296]	@ (8005a5c <start_homing_sequence+0x15c>)
 8005932:	f007 f861 	bl	800c9f8 <HAL_GPIO_ReadPin>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	bf14      	ite	ne
 800593c:	2301      	movne	r3, #1
 800593e:	2300      	moveq	r3, #0
 8005940:	73bb      	strb	r3, [r7, #14]

	// Different logic for startup vs manual homing
	if (is_startup || first_startup) {
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <start_homing_sequence+0x50>
 8005948:	4b45      	ldr	r3, [pc, #276]	@ (8005a60 <start_homing_sequence+0x160>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d02e      	beq.n	80059ae <start_homing_sequence+0xae>
		// STARTUP LOGIC: Skip homing if already at home position
		if (up_photo_detected && prox_detected) {
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d018      	beq.n	8005988 <start_homing_sequence+0x88>
 8005956:	7bbb      	ldrb	r3, [r7, #14]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d015      	beq.n	8005988 <start_homing_sequence+0x88>
			// Already at home position - no need to home
			homing_active = false;
 800595c:	4b3e      	ldr	r3, [pc, #248]	@ (8005a58 <start_homing_sequence+0x158>)
 800595e:	2200      	movs	r2, #0
 8005960:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 8005962:	4b40      	ldr	r3, [pc, #256]	@ (8005a64 <start_homing_sequence+0x164>)
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
			first_startup = false;
 8005968:	4b3d      	ldr	r3, [pc, #244]	@ (8005a60 <start_homing_sequence+0x160>)
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]

			// Clear sensor flags
			up_photo = false;
 800596e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a68 <start_homing_sequence+0x168>)
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005974:	4b3d      	ldr	r3, [pc, #244]	@ (8005a6c <start_homing_sequence+0x16c>)
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 800597a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a70 <start_homing_sequence+0x170>)
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 8005980:	4b3c      	ldr	r3, [pc, #240]	@ (8005a74 <start_homing_sequence+0x174>)
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]
			return;
 8005986:	e061      	b.n	8005a4c <start_homing_sequence+0x14c>
		}

		// Not at home - start startup homing sequence (skip zero degrees)
		homing_active = true;
 8005988:	4b33      	ldr	r3, [pc, #204]	@ (8005a58 <start_homing_sequence+0x158>)
 800598a:	2201      	movs	r2, #1
 800598c:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 800598e:	4b39      	ldr	r3, [pc, #228]	@ (8005a74 <start_homing_sequence+0x174>)
 8005990:	2200      	movs	r2, #0
 8005992:	701a      	strb	r2, [r3, #0]
		prox_count = 0;
 8005994:	4b36      	ldr	r3, [pc, #216]	@ (8005a70 <start_homing_sequence+0x170>)
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
		up_photo = false;
 800599a:	4b33      	ldr	r3, [pc, #204]	@ (8005a68 <start_homing_sequence+0x168>)
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]
		low_photo = false;
 80059a0:	4b32      	ldr	r3, [pc, #200]	@ (8005a6c <start_homing_sequence+0x16c>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	701a      	strb	r2, [r3, #0]
		homing_state = HOMING_PEN_UP;
 80059a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005a64 <start_homing_sequence+0x164>)
 80059a8:	2201      	movs	r2, #1
 80059aa:	701a      	strb	r2, [r3, #0]
 80059ac:	e04e      	b.n	8005a4c <start_homing_sequence+0x14c>

	} else {
		// MANUAL HOMING LOGIC: More sophisticated behavior
		if (up_photo_detected && prox_detected) {
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d018      	beq.n	80059e6 <start_homing_sequence+0xe6>
 80059b4:	7bbb      	ldrb	r3, [r7, #14]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d015      	beq.n	80059e6 <start_homing_sequence+0xe6>
			// Already perfectly homed - skip homing completely
			homing_active = false;
 80059ba:	4b27      	ldr	r3, [pc, #156]	@ (8005a58 <start_homing_sequence+0x158>)
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80059c0:	4b28      	ldr	r3, [pc, #160]	@ (8005a64 <start_homing_sequence+0x164>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	701a      	strb	r2, [r3, #0]
			first_startup = false;  // ← ADDED THIS LINE
 80059c6:	4b26      	ldr	r3, [pc, #152]	@ (8005a60 <start_homing_sequence+0x160>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	701a      	strb	r2, [r3, #0]
			up_photo = false;
 80059cc:	4b26      	ldr	r3, [pc, #152]	@ (8005a68 <start_homing_sequence+0x168>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80059d2:	4b26      	ldr	r3, [pc, #152]	@ (8005a6c <start_homing_sequence+0x16c>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80059d8:	4b25      	ldr	r3, [pc, #148]	@ (8005a70 <start_homing_sequence+0x170>)
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80059de:	4b25      	ldr	r3, [pc, #148]	@ (8005a74 <start_homing_sequence+0x174>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
			return;
 80059e4:	e032      	b.n	8005a4c <start_homing_sequence+0x14c>
			 up_photo = false;
			 low_photo = false;
			 homing_state = HOMING_REV_TO_ZERO_DEG;
			 rev_to_zero_trajectory_started = false;
			 */
		} else if (up_photo_detected && !prox_detected) {
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01b      	beq.n	8005a24 <start_homing_sequence+0x124>
 80059ec:	7bbb      	ldrb	r3, [r7, #14]
 80059ee:	f083 0301 	eor.w	r3, r3, #1
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d015      	beq.n	8005a24 <start_homing_sequence+0x124>
			// At up photo but not at prox - go to zero degrees first
			homing_active = true;
 80059f8:	4b17      	ldr	r3, [pc, #92]	@ (8005a58 <start_homing_sequence+0x158>)
 80059fa:	2201      	movs	r2, #1
 80059fc:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80059fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005a74 <start_homing_sequence+0x174>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005a04:	4b1a      	ldr	r3, [pc, #104]	@ (8005a70 <start_homing_sequence+0x170>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
			up_photo = false;
 8005a0a:	4b17      	ldr	r3, [pc, #92]	@ (8005a68 <start_homing_sequence+0x168>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005a10:	4b16      	ldr	r3, [pc, #88]	@ (8005a6c <start_homing_sequence+0x16c>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_REV_TO_ZERO_DEG;
 8005a16:	4b13      	ldr	r3, [pc, #76]	@ (8005a64 <start_homing_sequence+0x164>)
 8005a18:	2207      	movs	r2, #7
 8005a1a:	701a      	strb	r2, [r3, #0]
			rev_to_zero_trajectory_started = false;
 8005a1c:	4b16      	ldr	r3, [pc, #88]	@ (8005a78 <start_homing_sequence+0x178>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	e013      	b.n	8005a4c <start_homing_sequence+0x14c>
		} else {
			// Not at up photo - start full homing sequence
			homing_active = true;
 8005a24:	4b0c      	ldr	r3, [pc, #48]	@ (8005a58 <start_homing_sequence+0x158>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 8005a2a:	4b12      	ldr	r3, [pc, #72]	@ (8005a74 <start_homing_sequence+0x174>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005a30:	4b0f      	ldr	r3, [pc, #60]	@ (8005a70 <start_homing_sequence+0x170>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]
			up_photo = false;
 8005a36:	4b0c      	ldr	r3, [pc, #48]	@ (8005a68 <start_homing_sequence+0x168>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a6c <start_homing_sequence+0x16c>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_PEN_UP;
 8005a42:	4b08      	ldr	r3, [pc, #32]	@ (8005a64 <start_homing_sequence+0x164>)
 8005a44:	2201      	movs	r2, #1
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	e000      	b.n	8005a4c <start_homing_sequence+0x14c>
		return;
 8005a4a:	bf00      	nop
		}
	}
}
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	200012d0 	.word	0x200012d0
 8005a58:	20000567 	.word	0x20000567
 8005a5c:	48000400 	.word	0x48000400
 8005a60:	20000333 	.word	0x20000333
 8005a64:	20000566 	.word	0x20000566
 8005a68:	20000564 	.word	0x20000564
 8005a6c:	20000565 	.word	0x20000565
 8005a70:	20000560 	.word	0x20000560
 8005a74:	20000508 	.word	0x20000508
 8005a78:	20000572 	.word	0x20000572

08005a7c <update_homing_sequence>:

void update_homing_sequence(void) {
 8005a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a80:	ed2d 8b02 	vpush	{d8}
 8005a84:	b08b      	sub	sp, #44	@ 0x2c
 8005a86:	af00      	add	r7, sp, #0
	if (!homing_active)
 8005a88:	4b95      	ldr	r3, [pc, #596]	@ (8005ce0 <update_homing_sequence+0x264>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	f083 0301 	eor.w	r3, r3, #1
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f040 8335 	bne.w	8006102 <update_homing_sequence+0x686>
		return;

	switch (homing_state) {
 8005a98:	4b92      	ldr	r3, [pc, #584]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	2b0a      	cmp	r3, #10
 8005aa0:	f200 8331 	bhi.w	8006106 <update_homing_sequence+0x68a>
 8005aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8005aac <update_homing_sequence+0x30>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005ad9 	.word	0x08005ad9
 8005ab0:	08005afb 	.word	0x08005afb
 8005ab4:	08005b67 	.word	0x08005b67
 8005ab8:	08005cb3 	.word	0x08005cb3
 8005abc:	08005d25 	.word	0x08005d25
 8005ac0:	08005e69 	.word	0x08005e69
 8005ac4:	08005ee1 	.word	0x08005ee1
 8005ac8:	08005f2b 	.word	0x08005f2b
 8005acc:	08005fcd 	.word	0x08005fcd
 8005ad0:	080060d3 	.word	0x080060d3
 8005ad4:	080060ff 	.word	0x080060ff
	case HOMING_PEN_UP:
		// Ensure pen is up
		plotter_pen_up();
 8005ad8:	f003 fc4e 	bl	8009378 <plotter_pen_up>
		prismatic_axis.command_pos = 0.0f;
 8005adc:	4b82      	ldr	r3, [pc, #520]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005ae4:	4b81      	ldr	r3, [pc, #516]	@ (8005cec <update_homing_sequence+0x270>)
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer = 0;
 8005aec:	4b80      	ldr	r3, [pc, #512]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
		homing_state = HOMING_DELAY_AFTER_PEN_UP;
 8005af2:	4b7c      	ldr	r3, [pc, #496]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005af4:	2202      	movs	r2, #2
 8005af6:	701a      	strb	r2, [r3, #0]
		break;
 8005af8:	e318      	b.n	800612c <update_homing_sequence+0x6b0>

	case HOMING_DELAY_AFTER_PEN_UP:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005afa:	4b7b      	ldr	r3, [pc, #492]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005b02:	4b7a      	ldr	r3, [pc, #488]	@ (8005cec <update_homing_sequence+0x270>)
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005b0a:	4b79      	ldr	r3, [pc, #484]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	4a77      	ldr	r2, [pc, #476]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005b12:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005b14:	4b76      	ldr	r3, [pc, #472]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005b1c:	f0c0 82f5 	bcc.w	800610a <update_homing_sequence+0x68e>
			// Check if already at low photo sensor
			low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8005b20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005b24:	4873      	ldr	r0, [pc, #460]	@ (8005cf4 <update_homing_sequence+0x278>)
 8005b26:	f006 ff67 	bl	800c9f8 <HAL_GPIO_ReadPin>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	bf14      	ite	ne
 8005b30:	2301      	movne	r3, #1
 8005b32:	2300      	moveq	r3, #0
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	4b70      	ldr	r3, [pc, #448]	@ (8005cf8 <update_homing_sequence+0x27c>)
 8005b38:	701a      	strb	r2, [r3, #0]
			LOWER_PHOTO_Pin);

			if (low_photo) {
 8005b3a:	4b6f      	ldr	r3, [pc, #444]	@ (8005cf8 <update_homing_sequence+0x27c>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00c      	beq.n	8005b5e <update_homing_sequence+0xe2>
				// Already at low photo, skip moving down and go directly to delay
				motion_delay_timer = 0;
 8005b44:	4b6a      	ldr	r3, [pc, #424]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005b4a:	4b66      	ldr	r3, [pc, #408]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	701a      	strb	r2, [r3, #0]
				low_photo = false; // Reset flag
 8005b50:	4b69      	ldr	r3, [pc, #420]	@ (8005cf8 <update_homing_sequence+0x27c>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
				up_photo = false;  // Reset for next detection
 8005b56:	4b69      	ldr	r3, [pc, #420]	@ (8005cfc <update_homing_sequence+0x280>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	701a      	strb	r2, [r3, #0]
			} else {
				// Not at low photo, need to move down
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
			}
		}
		break;
 8005b5c:	e2d5      	b.n	800610a <update_homing_sequence+0x68e>
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 8005b5e:	4b61      	ldr	r3, [pc, #388]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005b60:	2203      	movs	r2, #3
 8005b62:	701a      	strb	r2, [r3, #0]
		break;
 8005b64:	e2d1      	b.n	800610a <update_homing_sequence+0x68e>

	case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
		// Move prismatic down at constant velocity
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005b66:	4b60      	ldr	r3, [pc, #384]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005b68:	edd3 7a07 	vldr	s15, [r3, #28]
 8005b6c:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8005d00 <update_homing_sequence+0x284>
 8005b70:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
 8005b74:	4b5c      	ldr	r3, [pc, #368]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005b76:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005b7a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005b7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b80:	eeb0 0a67 	vmov.f32	s0, s15
 8005b84:	485f      	ldr	r0, [pc, #380]	@ (8005d04 <update_homing_sequence+0x288>)
 8005b86:	f7fb fb47 	bl	8001218 <PID_CONTROLLER_Compute>
 8005b8a:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005b8e:	4b5e      	ldr	r3, [pc, #376]	@ (8005d08 <update_homing_sequence+0x28c>)
 8005b90:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005b94:	4610      	mov	r0, r2
 8005b96:	4619      	mov	r1, r3
 8005b98:	f7fa ff94 	bl	8000ac4 <__aeabi_d2iz>
 8005b9c:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005b9e:	4b5a      	ldr	r3, [pc, #360]	@ (8005d08 <update_homing_sequence+0x28c>)
 8005ba0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005ba4:	613a      	str	r2, [r7, #16]
 8005ba6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005baa:	617b      	str	r3, [r7, #20]
		prismatic_axis.command_pos = PWM_Satuation(
 8005bac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005bb0:	f7fa ff88 	bl	8000ac4 <__aeabi_d2iz>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4620      	mov	r0, r4
 8005bba:	eeb0 0a48 	vmov.f32	s0, s16
 8005bbe:	f7fb fac9 	bl	8001154 <PWM_Satuation>
 8005bc2:	ee07 0a90 	vmov	s15, r0
 8005bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bca:	4b47      	ldr	r3, [pc, #284]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005bcc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005bd0:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005bd4:	484d      	ldr	r0, [pc, #308]	@ (8005d0c <update_homing_sequence+0x290>)
 8005bd6:	f7fb fe5f 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 8005bda:	eef0 7a40 	vmov.f32	s15, s0
 8005bde:	4b42      	ldr	r3, [pc, #264]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005be0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005be4:	4b4a      	ldr	r3, [pc, #296]	@ (8005d10 <update_homing_sequence+0x294>)
 8005be6:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005bea:	4b4a      	ldr	r3, [pc, #296]	@ (8005d14 <update_homing_sequence+0x298>)
 8005bec:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005bf0:	ed9f 6a49 	vldr	s12, [pc, #292]	@ 8005d18 <update_homing_sequence+0x29c>
 8005bf4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005bf8:	eeb0 1a66 	vmov.f32	s2, s13
 8005bfc:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8005d1c <update_homing_sequence+0x2a0>
 8005c00:	eeb0 0a47 	vmov.f32	s0, s14
 8005c04:	4846      	ldr	r0, [pc, #280]	@ (8005d20 <update_homing_sequence+0x2a4>)
 8005c06:	f7fb feef 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 8005c0a:	eef0 7a40 	vmov.f32	s15, s0
 8005c0e:	4b36      	ldr	r3, [pc, #216]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c10:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005c14:	4b34      	ldr	r3, [pc, #208]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c16:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005c1a:	4b33      	ldr	r3, [pc, #204]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c1c:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005c20:	4b31      	ldr	r3, [pc, #196]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c22:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c30:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c34:	4b2c      	ldr	r3, [pc, #176]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c36:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005c3a:	4b33      	ldr	r3, [pc, #204]	@ (8005d08 <update_homing_sequence+0x28c>)
 8005c3c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c40:	4610      	mov	r0, r2
 8005c42:	4619      	mov	r1, r3
 8005c44:	f7fa ff3e 	bl	8000ac4 <__aeabi_d2iz>
 8005c48:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005d08 <update_homing_sequence+0x28c>)
 8005c4c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005c50:	60ba      	str	r2, [r7, #8]
 8005c52:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005c56:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c5c:	f7fa ff32 	bl	8000ac4 <__aeabi_d2iz>
 8005c60:	4603      	mov	r3, r0
 8005c62:	4619      	mov	r1, r3
 8005c64:	4620      	mov	r0, r4
 8005c66:	eeb0 0a48 	vmov.f32	s0, s16
 8005c6a:	f7fb fa73 	bl	8001154 <PWM_Satuation>
 8005c6e:	ee07 0a90 	vmov	s15, r0
 8005c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c76:	4b1c      	ldr	r3, [pc, #112]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c78:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (low_photo) {
 8005c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8005cf8 <update_homing_sequence+0x27c>)
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 8243 	beq.w	800610e <update_homing_sequence+0x692>
			// Found low photo, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005c88:	4b17      	ldr	r3, [pc, #92]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c8a:	f04f 0200 	mov.w	r2, #0
 8005c8e:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005c90:	4b16      	ldr	r3, [pc, #88]	@ (8005cec <update_homing_sequence+0x270>)
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005c98:	4b15      	ldr	r3, [pc, #84]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005c9e:	4b11      	ldr	r3, [pc, #68]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005ca0:	2204      	movs	r2, #4
 8005ca2:	701a      	strb	r2, [r3, #0]
			low_photo = false; // Reset flag after use
 8005ca4:	4b14      	ldr	r3, [pc, #80]	@ (8005cf8 <update_homing_sequence+0x27c>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
			up_photo = false;  // Reset for next detection
 8005caa:	4b14      	ldr	r3, [pc, #80]	@ (8005cfc <update_homing_sequence+0x280>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005cb0:	e22d      	b.n	800610e <update_homing_sequence+0x692>

	case HOMING_DELAY_AFTER_LOW_PHOTO:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005cba:	4b0c      	ldr	r3, [pc, #48]	@ (8005cec <update_homing_sequence+0x270>)
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	4a09      	ldr	r2, [pc, #36]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005cca:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005ccc:	4b08      	ldr	r3, [pc, #32]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005cd4:	f0c0 821d 	bcc.w	8006112 <update_homing_sequence+0x696>
			homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 8005cd8:	4b02      	ldr	r3, [pc, #8]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005cda:	2205      	movs	r2, #5
 8005cdc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005cde:	e218      	b.n	8006112 <update_homing_sequence+0x696>
 8005ce0:	20000567 	.word	0x20000567
 8005ce4:	20000566 	.word	0x20000566
 8005ce8:	20000480 	.word	0x20000480
 8005cec:	200004c4 	.word	0x200004c4
 8005cf0:	2000055c 	.word	0x2000055c
 8005cf4:	48000400 	.word	0x48000400
 8005cf8:	20000565 	.word	0x20000565
 8005cfc:	20000564 	.word	0x20000564
 8005d00:	437a0000 	.word	0x437a0000
 8005d04:	200007ac 	.word	0x200007ac
 8005d08:	20000080 	.word	0x20000080
 8005d0c:	2000084c 	.word	0x2000084c
 8005d10:	20000728 	.word	0x20000728
 8005d14:	200006cc 	.word	0x200006cc
 8005d18:	447a0000 	.word	0x447a0000
 8005d1c:	00000000 	.word	0x00000000
 8005d20:	20000850 	.word	0x20000850

	case HOMING_PRIS_UP_TO_UP_PHOTO:
		// Move prismatic up at constant velocity
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005d24:	4b96      	ldr	r3, [pc, #600]	@ (8005f80 <update_homing_sequence+0x504>)
 8005d26:	edd3 7a07 	vldr	s15, [r3, #28]
 8005d2a:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8005f84 <update_homing_sequence+0x508>
 8005d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
 8005d32:	4b93      	ldr	r3, [pc, #588]	@ (8005f80 <update_homing_sequence+0x504>)
 8005d34:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005d38:	4b91      	ldr	r3, [pc, #580]	@ (8005f80 <update_homing_sequence+0x504>)
 8005d3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8005d42:	4891      	ldr	r0, [pc, #580]	@ (8005f88 <update_homing_sequence+0x50c>)
 8005d44:	f7fb fa68 	bl	8001218 <PID_CONTROLLER_Compute>
 8005d48:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005d4c:	4b8f      	ldr	r3, [pc, #572]	@ (8005f8c <update_homing_sequence+0x510>)
 8005d4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005d52:	4610      	mov	r0, r2
 8005d54:	4619      	mov	r1, r3
 8005d56:	f7fa feb5 	bl	8000ac4 <__aeabi_d2iz>
 8005d5a:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005d5c:	4b8b      	ldr	r3, [pc, #556]	@ (8005f8c <update_homing_sequence+0x510>)
 8005d5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005d62:	603a      	str	r2, [r7, #0]
 8005d64:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005d68:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_pos = PWM_Satuation(
 8005d6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d6e:	f7fa fea9 	bl	8000ac4 <__aeabi_d2iz>
 8005d72:	4603      	mov	r3, r0
 8005d74:	4619      	mov	r1, r3
 8005d76:	4620      	mov	r0, r4
 8005d78:	eeb0 0a48 	vmov.f32	s0, s16
 8005d7c:	f7fb f9ea 	bl	8001154 <PWM_Satuation>
 8005d80:	ee07 0a90 	vmov	s15, r0
 8005d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d88:	4b7d      	ldr	r3, [pc, #500]	@ (8005f80 <update_homing_sequence+0x504>)
 8005d8a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005d8e:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 8005d92:	487f      	ldr	r0, [pc, #508]	@ (8005f90 <update_homing_sequence+0x514>)
 8005d94:	f7fb fd80 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 8005d98:	eef0 7a40 	vmov.f32	s15, s0
 8005d9c:	4b78      	ldr	r3, [pc, #480]	@ (8005f80 <update_homing_sequence+0x504>)
 8005d9e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005da2:	4b7c      	ldr	r3, [pc, #496]	@ (8005f94 <update_homing_sequence+0x518>)
 8005da4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005da8:	4b7b      	ldr	r3, [pc, #492]	@ (8005f98 <update_homing_sequence+0x51c>)
 8005daa:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005dae:	ed9f 6a7b 	vldr	s12, [pc, #492]	@ 8005f9c <update_homing_sequence+0x520>
 8005db2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005db6:	eeb0 1a66 	vmov.f32	s2, s13
 8005dba:	eddf 0a79 	vldr	s1, [pc, #484]	@ 8005fa0 <update_homing_sequence+0x524>
 8005dbe:	eeb0 0a47 	vmov.f32	s0, s14
 8005dc2:	4878      	ldr	r0, [pc, #480]	@ (8005fa4 <update_homing_sequence+0x528>)
 8005dc4:	f7fb fe10 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 8005dc8:	eef0 7a40 	vmov.f32	s15, s0
 8005dcc:	4b6c      	ldr	r3, [pc, #432]	@ (8005f80 <update_homing_sequence+0x504>)
 8005dce:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005dd2:	4b6b      	ldr	r3, [pc, #428]	@ (8005f80 <update_homing_sequence+0x504>)
 8005dd4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005dd8:	4b69      	ldr	r3, [pc, #420]	@ (8005f80 <update_homing_sequence+0x504>)
 8005dda:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005dde:	4b68      	ldr	r3, [pc, #416]	@ (8005f80 <update_homing_sequence+0x504>)
 8005de0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dec:	4b64      	ldr	r3, [pc, #400]	@ (8005f80 <update_homing_sequence+0x504>)
 8005dee:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005df2:	4b63      	ldr	r3, [pc, #396]	@ (8005f80 <update_homing_sequence+0x504>)
 8005df4:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005df8:	4b64      	ldr	r3, [pc, #400]	@ (8005f8c <update_homing_sequence+0x510>)
 8005dfa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005dfe:	4610      	mov	r0, r2
 8005e00:	4619      	mov	r1, r3
 8005e02:	f7fa fe5f 	bl	8000ac4 <__aeabi_d2iz>
 8005e06:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005e08:	4b60      	ldr	r3, [pc, #384]	@ (8005f8c <update_homing_sequence+0x510>)
 8005e0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005e0e:	4692      	mov	sl, r2
 8005e10:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005e14:	4650      	mov	r0, sl
 8005e16:	4659      	mov	r1, fp
 8005e18:	f7fa fe54 	bl	8000ac4 <__aeabi_d2iz>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4620      	mov	r0, r4
 8005e22:	eeb0 0a48 	vmov.f32	s0, s16
 8005e26:	f7fb f995 	bl	8001154 <PWM_Satuation>
 8005e2a:	ee07 0a90 	vmov	s15, r0
 8005e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e32:	4b53      	ldr	r3, [pc, #332]	@ (8005f80 <update_homing_sequence+0x504>)
 8005e34:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (up_photo) {
 8005e38:	4b5b      	ldr	r3, [pc, #364]	@ (8005fa8 <update_homing_sequence+0x52c>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 8169 	beq.w	8006116 <update_homing_sequence+0x69a>
			// Found up photo, stop and start delay before backup
			prismatic_axis.command_pos = 0.0f;
 8005e44:	4b4e      	ldr	r3, [pc, #312]	@ (8005f80 <update_homing_sequence+0x504>)
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005e4c:	4b57      	ldr	r3, [pc, #348]	@ (8005fac <update_homing_sequence+0x530>)
 8005e4e:	f04f 0200 	mov.w	r2, #0
 8005e52:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005e54:	4b56      	ldr	r3, [pc, #344]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 8005e5a:	4b56      	ldr	r3, [pc, #344]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005e5c:	2206      	movs	r2, #6
 8005e5e:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag after use
 8005e60:	4b51      	ldr	r3, [pc, #324]	@ (8005fa8 <update_homing_sequence+0x52c>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005e66:	e156      	b.n	8006116 <update_homing_sequence+0x69a>

	case HOMING_DELAY_AFTER_UP_PHOTO:
		// Stop motors and wait before starting backup procedure
		prismatic_axis.command_pos = 0.0f;
 8005e68:	4b45      	ldr	r3, [pc, #276]	@ (8005f80 <update_homing_sequence+0x504>)
 8005e6a:	f04f 0200 	mov.w	r2, #0
 8005e6e:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005e70:	4b4e      	ldr	r3, [pc, #312]	@ (8005fac <update_homing_sequence+0x530>)
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005e78:	4b4d      	ldr	r3, [pc, #308]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	4a4c      	ldr	r2, [pc, #304]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005e80:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005e82:	4b4b      	ldr	r3, [pc, #300]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005e8a:	f0c0 8146 	bcc.w	800611a <update_homing_sequence+0x69e>
			if (first_startup) {
 8005e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8005fb8 <update_homing_sequence+0x53c>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01d      	beq.n	8005ed2 <update_homing_sequence+0x456>
				// STARTUP: Check if prox is already detected before searching
				bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005e96:	2140      	movs	r1, #64	@ 0x40
 8005e98:	4848      	ldr	r0, [pc, #288]	@ (8005fbc <update_homing_sequence+0x540>)
 8005e9a:	f006 fdad 	bl	800c9f8 <HAL_GPIO_ReadPin>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	bf14      	ite	ne
 8005ea4:	2301      	movne	r3, #1
 8005ea6:	2300      	moveq	r3, #0
 8005ea8:	77fb      	strb	r3, [r7, #31]

				if (prox_detected) {
 8005eaa:	7ffb      	ldrb	r3, [r7, #31]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d009      	beq.n	8005ec4 <update_homing_sequence+0x448>
					// Already at prox - skip search and go to completion
					motion_delay_timer = 0;
 8005eb0:	4b3f      	ldr	r3, [pc, #252]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
					homing_state = HOMING_DELAY_AFTER_PROX;
 8005eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005eb8:	220a      	movs	r2, #10
 8005eba:	701a      	strb	r2, [r3, #0]
					prox_count = 1; // Set count to indicate prox found
 8005ebc:	4b40      	ldr	r3, [pc, #256]	@ (8005fc0 <update_homing_sequence+0x544>)
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_REV_TO_ZERO_DEG;
				// Initialize trajectory variables for zero degree movement
				rev_to_zero_trajectory_started = false;
			}
		}
		break;
 8005ec2:	e12a      	b.n	800611a <update_homing_sequence+0x69e>
					homing_state = HOMING_REV_CW_TO_PROX1;
 8005ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005ec6:	2209      	movs	r2, #9
 8005ec8:	701a      	strb	r2, [r3, #0]
					prox_count = 0; // Reset prox counter
 8005eca:	4b3d      	ldr	r3, [pc, #244]	@ (8005fc0 <update_homing_sequence+0x544>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]
		break;
 8005ed0:	e123      	b.n	800611a <update_homing_sequence+0x69e>
				homing_state = HOMING_REV_TO_ZERO_DEG;
 8005ed2:	4b38      	ldr	r3, [pc, #224]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005ed4:	2207      	movs	r2, #7
 8005ed6:	701a      	strb	r2, [r3, #0]
				rev_to_zero_trajectory_started = false;
 8005ed8:	4b3a      	ldr	r3, [pc, #232]	@ (8005fc4 <update_homing_sequence+0x548>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	701a      	strb	r2, [r3, #0]
		break;
 8005ede:	e11c      	b.n	800611a <update_homing_sequence+0x69e>

	case HOMING_REV_TO_ZERO_DEG:
		if (!rev_to_zero_trajectory_started) {
 8005ee0:	4b38      	ldr	r3, [pc, #224]	@ (8005fc4 <update_homing_sequence+0x548>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	f083 0301 	eor.w	r3, r3, #1
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00b      	beq.n	8005f06 <update_homing_sequence+0x48a>
			// Get current prismatic position (keep it where it is)
			float current_pris_pos = prismatic_encoder.mm;
 8005eee:	4b2a      	ldr	r3, [pc, #168]	@ (8005f98 <update_homing_sequence+0x51c>)
 8005ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ef2:	623b      	str	r3, [r7, #32]

			// Start combined trajectory to move revolute to 0° while keeping prismatic position
			start_combined_trajectory(current_pris_pos, 0.0f);
 8005ef4:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8005fa0 <update_homing_sequence+0x524>
 8005ef8:	ed97 0a08 	vldr	s0, [r7, #32]
 8005efc:	f000 fa16 	bl	800632c <start_combined_trajectory>

			rev_to_zero_trajectory_started = true;
 8005f00:	4b30      	ldr	r3, [pc, #192]	@ (8005fc4 <update_homing_sequence+0x548>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	701a      	strb	r2, [r3, #0]
		}

		// Wait for trajectory to complete
		if (motion_sequence_state == MOTION_IDLE) {
 8005f06:	4b30      	ldr	r3, [pc, #192]	@ (8005fc8 <update_homing_sequence+0x54c>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f040 8107 	bne.w	800611e <update_homing_sequence+0x6a2>
			// Trajectory completed, move to next homing state
			motion_delay_timer = 0;
 8005f10:	4b27      	ldr	r3, [pc, #156]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 8005f16:	4b27      	ldr	r3, [pc, #156]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005f18:	2208      	movs	r2, #8
 8005f1a:	701a      	strb	r2, [r3, #0]
			prox_count = 0; // Reset prox counter for next stage
 8005f1c:	4b28      	ldr	r3, [pc, #160]	@ (8005fc0 <update_homing_sequence+0x544>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
			rev_to_zero_trajectory_started = false; // Reset for next time
 8005f22:	4b28      	ldr	r3, [pc, #160]	@ (8005fc4 <update_homing_sequence+0x548>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005f28:	e0f9      	b.n	800611e <update_homing_sequence+0x6a2>

	case HOMING_DELAY_AFTER_ZERO_DEG:
		// Stop motors and wait - let normal control handle this
		motion_delay_timer++;
 8005f2a:	4b21      	ldr	r3, [pc, #132]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	4a1f      	ldr	r2, [pc, #124]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005f32:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005f34:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005f3c:	f0c0 80f1 	bcc.w	8006122 <update_homing_sequence+0x6a6>
			// CHECK IF PROX IS ALREADY DETECTED BEFORE STARTING SEARCH
			bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005f40:	2140      	movs	r1, #64	@ 0x40
 8005f42:	481e      	ldr	r0, [pc, #120]	@ (8005fbc <update_homing_sequence+0x540>)
 8005f44:	f006 fd58 	bl	800c9f8 <HAL_GPIO_ReadPin>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bf14      	ite	ne
 8005f4e:	2301      	movne	r3, #1
 8005f50:	2300      	moveq	r3, #0
 8005f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			if (prox_detected) {
 8005f56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d009      	beq.n	8005f72 <update_homing_sequence+0x4f6>
				// Already at proximity sensor - skip search and go directly to completion
				motion_delay_timer = 0;
 8005f5e:	4b14      	ldr	r3, [pc, #80]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_PROX;
 8005f64:	4b13      	ldr	r3, [pc, #76]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005f66:	220a      	movs	r2, #10
 8005f68:	701a      	strb	r2, [r3, #0]
				prox_count = 1; // Set count to indicate prox found
 8005f6a:	4b15      	ldr	r3, [pc, #84]	@ (8005fc0 <update_homing_sequence+0x544>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
				// Not at prox - need to search for it
				homing_state = HOMING_REV_CW_TO_PROX1;
				prox_count = 0; // Reset counter for search
			}
		}
		break;
 8005f70:	e0d7      	b.n	8006122 <update_homing_sequence+0x6a6>
				homing_state = HOMING_REV_CW_TO_PROX1;
 8005f72:	4b10      	ldr	r3, [pc, #64]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005f74:	2209      	movs	r2, #9
 8005f76:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset counter for search
 8005f78:	4b11      	ldr	r3, [pc, #68]	@ (8005fc0 <update_homing_sequence+0x544>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
		break;
 8005f7e:	e0d0      	b.n	8006122 <update_homing_sequence+0x6a6>
 8005f80:	20000480 	.word	0x20000480
 8005f84:	c37a0000 	.word	0xc37a0000
 8005f88:	200007ac 	.word	0x200007ac
 8005f8c:	20000080 	.word	0x20000080
 8005f90:	2000084c 	.word	0x2000084c
 8005f94:	20000728 	.word	0x20000728
 8005f98:	200006cc 	.word	0x200006cc
 8005f9c:	447a0000 	.word	0x447a0000
 8005fa0:	00000000 	.word	0x00000000
 8005fa4:	20000850 	.word	0x20000850
 8005fa8:	20000564 	.word	0x20000564
 8005fac:	200004c4 	.word	0x200004c4
 8005fb0:	2000055c 	.word	0x2000055c
 8005fb4:	20000566 	.word	0x20000566
 8005fb8:	20000333 	.word	0x20000333
 8005fbc:	48000400 	.word	0x48000400
 8005fc0:	20000560 	.word	0x20000560
 8005fc4:	20000572 	.word	0x20000572
 8005fc8:	20000508 	.word	0x20000508

	case HOMING_REV_CW_TO_PROX1:
		// Move revolute clockwise with velocity control until prox count = 1
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
				- revolute_axis.kalman_velocity;
 8005fcc:	4b5a      	ldr	r3, [pc, #360]	@ (8006138 <update_homing_sequence+0x6bc>)
 8005fce:	edd3 7a07 	vldr	s15, [r3, #28]
 8005fd2:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8005fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
 8005fda:	4b57      	ldr	r3, [pc, #348]	@ (8006138 <update_homing_sequence+0x6bc>)
 8005fdc:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8005fe0:	4b55      	ldr	r3, [pc, #340]	@ (8006138 <update_homing_sequence+0x6bc>)
 8005fe2:	edd3 7a06 	vldr	s15, [r3, #24]
 8005fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8005fea:	4854      	ldr	r0, [pc, #336]	@ (800613c <update_homing_sequence+0x6c0>)
 8005fec:	f7fb f914 	bl	8001218 <PID_CONTROLLER_Compute>
 8005ff0:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8005ff4:	4b52      	ldr	r3, [pc, #328]	@ (8006140 <update_homing_sequence+0x6c4>)
 8005ff6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	f7fa fd61 	bl	8000ac4 <__aeabi_d2iz>
 8006002:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8006004:	4b4e      	ldr	r3, [pc, #312]	@ (8006140 <update_homing_sequence+0x6c4>)
 8006006:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800600a:	4690      	mov	r8, r2
 800600c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(
 8006010:	4640      	mov	r0, r8
 8006012:	4649      	mov	r1, r9
 8006014:	f7fa fd56 	bl	8000ac4 <__aeabi_d2iz>
 8006018:	4603      	mov	r3, r0
 800601a:	4619      	mov	r1, r3
 800601c:	4630      	mov	r0, r6
 800601e:	eeb0 0a48 	vmov.f32	s0, s16
 8006022:	f7fb f897 	bl	8001154 <PWM_Satuation>
 8006026:	ee07 0a90 	vmov	s15, r0
 800602a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800602e:	4b42      	ldr	r3, [pc, #264]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006030:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8006034:	eeb8 0a00 	vmov.f32	s0, #128	@ 0xc0000000 -2.0
 8006038:	4842      	ldr	r0, [pc, #264]	@ (8006144 <update_homing_sequence+0x6c8>)
 800603a:	f7fb faad 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 800603e:	eef0 7a40 	vmov.f32	s15, s0
 8006042:	4b3d      	ldr	r3, [pc, #244]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006044:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_REV_VELOCITY);
		revolute_axis.dfd = 0.0;
 8006048:	4b3b      	ldr	r3, [pc, #236]	@ (8006138 <update_homing_sequence+0x6bc>)
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	62da      	str	r2, [r3, #44]	@ 0x2c

		revolute_axis.command_pos += revolute_axis.ffd;
 8006050:	4b39      	ldr	r3, [pc, #228]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006052:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006056:	4b38      	ldr	r3, [pc, #224]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006058:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800605c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006060:	4b35      	ldr	r3, [pc, #212]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006062:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006066:	4b34      	ldr	r3, [pc, #208]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006068:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_150RPM_Constant.U_max,
 800606c:	4b34      	ldr	r3, [pc, #208]	@ (8006140 <update_homing_sequence+0x6c4>)
 800606e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006072:	4610      	mov	r0, r2
 8006074:	4619      	mov	r1, r3
 8006076:	f7fa fd25 	bl	8000ac4 <__aeabi_d2iz>
 800607a:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 800607c:	4b30      	ldr	r3, [pc, #192]	@ (8006140 <update_homing_sequence+0x6c4>)
 800607e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006082:	4614      	mov	r4, r2
 8006084:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006088:	4620      	mov	r0, r4
 800608a:	4629      	mov	r1, r5
 800608c:	f7fa fd1a 	bl	8000ac4 <__aeabi_d2iz>
 8006090:	4603      	mov	r3, r0
 8006092:	4619      	mov	r1, r3
 8006094:	4630      	mov	r0, r6
 8006096:	eeb0 0a48 	vmov.f32	s0, s16
 800609a:	f7fb f85b 	bl	8001154 <PWM_Satuation>
 800609e:	ee07 0a90 	vmov	s15, r0
 80060a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060a6:	4b24      	ldr	r3, [pc, #144]	@ (8006138 <update_homing_sequence+0x6bc>)
 80060a8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (prox_count >= 1) {
 80060ac:	4b26      	ldr	r3, [pc, #152]	@ (8006148 <update_homing_sequence+0x6cc>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d038      	beq.n	8006126 <update_homing_sequence+0x6aa>
			// Found prox sensor, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 80060b4:	4b25      	ldr	r3, [pc, #148]	@ (800614c <update_homing_sequence+0x6d0>)
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 80060bc:	4b1e      	ldr	r3, [pc, #120]	@ (8006138 <update_homing_sequence+0x6bc>)
 80060be:	f04f 0200 	mov.w	r2, #0
 80060c2:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 80060c4:	4b22      	ldr	r3, [pc, #136]	@ (8006150 <update_homing_sequence+0x6d4>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_PROX;
 80060ca:	4b22      	ldr	r3, [pc, #136]	@ (8006154 <update_homing_sequence+0x6d8>)
 80060cc:	220a      	movs	r2, #10
 80060ce:	701a      	strb	r2, [r3, #0]
		}
		break;
 80060d0:	e029      	b.n	8006126 <update_homing_sequence+0x6aa>

	case HOMING_DELAY_AFTER_PROX:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 80060d2:	4b1e      	ldr	r3, [pc, #120]	@ (800614c <update_homing_sequence+0x6d0>)
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 80060da:	4b17      	ldr	r3, [pc, #92]	@ (8006138 <update_homing_sequence+0x6bc>)
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 80060e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006150 <update_homing_sequence+0x6d4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3301      	adds	r3, #1
 80060e8:	4a19      	ldr	r2, [pc, #100]	@ (8006150 <update_homing_sequence+0x6d4>)
 80060ea:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 80060ec:	4b18      	ldr	r3, [pc, #96]	@ (8006150 <update_homing_sequence+0x6d4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80060f4:	d319      	bcc.n	800612a <update_homing_sequence+0x6ae>
			homing_state = HOMING_COMPLETE;
 80060f6:	4b17      	ldr	r3, [pc, #92]	@ (8006154 <update_homing_sequence+0x6d8>)
 80060f8:	220b      	movs	r2, #11
 80060fa:	701a      	strb	r2, [r3, #0]
		}
		break;
 80060fc:	e015      	b.n	800612a <update_homing_sequence+0x6ae>

	case HOMING_COMPLETE:
		NVIC_SystemReset();
 80060fe:	f7ff fb09 	bl	8005714 <__NVIC_SystemReset>
		return;
 8006102:	bf00      	nop
 8006104:	e012      	b.n	800612c <update_homing_sequence+0x6b0>
		break;

	case HOMING_IDLE:
	default:
		break;
 8006106:	bf00      	nop
 8006108:	e010      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 800610a:	bf00      	nop
 800610c:	e00e      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 800610e:	bf00      	nop
 8006110:	e00c      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 8006112:	bf00      	nop
 8006114:	e00a      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 8006116:	bf00      	nop
 8006118:	e008      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 800611a:	bf00      	nop
 800611c:	e006      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 800611e:	bf00      	nop
 8006120:	e004      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 8006122:	bf00      	nop
 8006124:	e002      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 8006126:	bf00      	nop
 8006128:	e000      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 800612a:	bf00      	nop
	}
}
 800612c:	372c      	adds	r7, #44	@ 0x2c
 800612e:	46bd      	mov	sp, r7
 8006130:	ecbd 8b02 	vpop	{d8}
 8006134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006138:	200004c4 	.word	0x200004c4
 800613c:	200007fc 	.word	0x200007fc
 8006140:	20000000 	.word	0x20000000
 8006144:	20000858 	.word	0x20000858
 8006148:	20000560 	.word	0x20000560
 800614c:	20000480 	.word	0x20000480
 8006150:	2000055c 	.word	0x2000055c
 8006154:	20000566 	.word	0x20000566

08006158 <normalize_angle>:

float normalize_angle(float angle_rad) {
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8006162:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80061a0 <normalize_angle+0x48>
 8006166:	ed97 0a01 	vldr	s0, [r7, #4]
 800616a:	f00c fb75 	bl	8012858 <fmodf>
 800616e:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 8006172:	edd7 7a03 	vldr	s15, [r7, #12]
 8006176:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800617a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617e:	d507      	bpl.n	8006190 <normalize_angle+0x38>
		result += 2.0f * PI;
 8006180:	edd7 7a03 	vldr	s15, [r7, #12]
 8006184:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80061a0 <normalize_angle+0x48>
 8006188:	ee77 7a87 	vadd.f32	s15, s15, s14
 800618c:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	ee07 3a90 	vmov	s15, r3
}
 8006196:	eeb0 0a67 	vmov.f32	s0, s15
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40c90fdb 	.word	0x40c90fdb

080061a4 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80061ae:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 80061b2:	f04f 0300 	mov.w	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 80061b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80061bc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8006320 <calculate_movement_deg+0x17c>
 80061c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c8:	d508      	bpl.n	80061dc <calculate_movement_deg+0x38>
 80061ca:	edd7 7a00 	vldr	s15, [r7]
 80061ce:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8006320 <calculate_movement_deg+0x17c>
 80061d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061da:	d411      	bmi.n	8006200 <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 80061dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80061e0:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8006320 <calculate_movement_deg+0x17c>
 80061e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ec:	db33      	blt.n	8006256 <calculate_movement_deg+0xb2>
 80061ee:	edd7 7a00 	vldr	s15, [r7]
 80061f2:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8006320 <calculate_movement_deg+0x17c>
 80061f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061fe:	db2a      	blt.n	8006256 <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 8006200:	ed97 7a00 	vldr	s14, [r7]
 8006204:	edd7 7a01 	vldr	s15, [r7, #4]
 8006208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800620c:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 8006210:	edd7 7a03 	vldr	s15, [r7, #12]
 8006214:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006320 <calculate_movement_deg+0x17c>
 8006218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800621c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006220:	dd07      	ble.n	8006232 <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 8006222:	edd7 7a03 	vldr	s15, [r7, #12]
 8006226:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006324 <calculate_movement_deg+0x180>
 800622a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800622e:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006232:	edd7 7a03 	vldr	s15, [r7, #12]
 8006236:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8006328 <calculate_movement_deg+0x184>
 800623a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800623e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006242:	d562      	bpl.n	800630a <calculate_movement_deg+0x166>
			movement += 360.0f;
 8006244:	edd7 7a03 	vldr	s15, [r7, #12]
 8006248:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8006324 <calculate_movement_deg+0x180>
 800624c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006250:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006254:	e059      	b.n	800630a <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 8006256:	edd7 7a01 	vldr	s15, [r7, #4]
 800625a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006320 <calculate_movement_deg+0x17c>
 800625e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006266:	d52a      	bpl.n	80062be <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8006268:	edd7 7a00 	vldr	s15, [r7]
 800626c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8006320 <calculate_movement_deg+0x17c>
 8006270:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006274:	ed97 7a01 	vldr	s14, [r7, #4]
 8006278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800627c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006280:	d50e      	bpl.n	80062a0 <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 8006282:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006324 <calculate_movement_deg+0x180>
 8006286:	edd7 7a00 	vldr	s15, [r7]
 800628a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800628e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006296:	eef1 7a67 	vneg.f32	s15, s15
 800629a:	edc7 7a03 	vstr	s15, [r7, #12]
 800629e:	e034      	b.n	800630a <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 80062a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80062a4:	edd7 7a00 	vldr	s15, [r7]
 80062a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062ac:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006324 <calculate_movement_deg+0x180>
 80062b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062b4:	eef1 7a67 	vneg.f32	s15, s15
 80062b8:	edc7 7a03 	vstr	s15, [r7, #12]
 80062bc:	e025      	b.n	800630a <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 80062be:	edd7 7a01 	vldr	s15, [r7, #4]
 80062c2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8006320 <calculate_movement_deg+0x17c>
 80062c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80062ca:	ed97 7a00 	vldr	s14, [r7]
 80062ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d6:	d50c      	bpl.n	80062f2 <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 80062d8:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8006324 <calculate_movement_deg+0x180>
 80062dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80062e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062e4:	ed97 7a00 	vldr	s14, [r7]
 80062e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062ec:	edc7 7a03 	vstr	s15, [r7, #12]
 80062f0:	e00b      	b.n	800630a <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 80062f2:	ed97 7a00 	vldr	s14, [r7]
 80062f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80062fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062fe:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8006324 <calculate_movement_deg+0x180>
 8006302:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006306:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	ee07 3a90 	vmov	s15, r3
}
 8006310:	eeb0 0a67 	vmov.f32	s0, s15
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	43340000 	.word	0x43340000
 8006324:	43b40000 	.word	0x43b40000
 8006328:	c3340000 	.word	0xc3340000

0800632c <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 800632c:	b590      	push	{r4, r7, lr}
 800632e:	ed2d 8b02 	vpush	{d8}
 8006332:	b08b      	sub	sp, #44	@ 0x2c
 8006334:	af00      	add	r7, sp, #0
 8006336:	ed87 0a01 	vstr	s0, [r7, #4]
 800633a:	edc7 0a00 	vstr	s1, [r7]


	bool allow_during_homing = (homing_active
 800633e:	4b9d      	ldr	r3, [pc, #628]	@ (80065b4 <start_combined_trajectory+0x288>)
 8006340:	781b      	ldrb	r3, [r3, #0]
			&& homing_state == HOMING_REV_TO_ZERO_DEG);
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <start_combined_trajectory+0x26>
 8006346:	4b9c      	ldr	r3, [pc, #624]	@ (80065b8 <start_combined_trajectory+0x28c>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b07      	cmp	r3, #7
 800634c:	d101      	bne.n	8006352 <start_combined_trajectory+0x26>
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <start_combined_trajectory+0x28>
 8006352:	2300      	movs	r3, #0
	bool allow_during_homing = (homing_active
 8006354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (is_emergency_active() || (homing_active && !allow_during_homing)) {
 8006364:	f001 f804 	bl	8007370 <is_emergency_active>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	f040 811c 	bne.w	80065a8 <start_combined_trajectory+0x27c>
 8006370:	4b90      	ldr	r3, [pc, #576]	@ (80065b4 <start_combined_trajectory+0x288>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d007      	beq.n	8006388 <start_combined_trajectory+0x5c>
 8006378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800637c:	f083 0301 	eor.w	r3, r3, #1
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	f040 8110 	bne.w	80065a8 <start_combined_trajectory+0x27c>
		return;
	}

	float pris_current = prismatic_encoder.mm;
 8006388:	4b8c      	ldr	r3, [pc, #560]	@ (80065bc <start_combined_trajectory+0x290>)
 800638a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800638c:	623b      	str	r3, [r7, #32]
	float rev_current = revolute_encoder.rads;
 800638e:	4b8c      	ldr	r3, [pc, #560]	@ (80065c0 <start_combined_trajectory+0x294>)
 8006390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006392:	61fb      	str	r3, [r7, #28]

	prisEva.t = 0.0f;
 8006394:	4b8b      	ldr	r3, [pc, #556]	@ (80065c4 <start_combined_trajectory+0x298>)
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 800639c:	4b89      	ldr	r3, [pc, #548]	@ (80065c4 <start_combined_trajectory+0x298>)
 800639e:	2200      	movs	r2, #0
 80063a0:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 80063a2:	4b89      	ldr	r3, [pc, #548]	@ (80065c8 <start_combined_trajectory+0x29c>)
 80063a4:	f04f 0200 	mov.w	r2, #0
 80063a8:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 80063aa:	4b87      	ldr	r3, [pc, #540]	@ (80065c8 <start_combined_trajectory+0x29c>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	741a      	strb	r2, [r3, #16]

	prismatic_axis.initial_pos = pris_current;
 80063b0:	4a86      	ldr	r2, [pc, #536]	@ (80065cc <start_combined_trajectory+0x2a0>)
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 80063b6:	4a86      	ldr	r2, [pc, #536]	@ (80065d0 <start_combined_trajectory+0x2a4>)
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	60d3      	str	r3, [r2, #12]

	prismatic_axis.target_pos = fminf(
 80063bc:	eddf 0a85 	vldr	s1, [pc, #532]	@ 80065d4 <start_combined_trajectory+0x2a8>
 80063c0:	ed97 0a01 	vldr	s0, [r7, #4]
 80063c4:	f00c fb10 	bl	80129e8 <fmaxf>
 80063c8:	eef0 7a40 	vmov.f32	s15, s0
 80063cc:	eddf 0a82 	vldr	s1, [pc, #520]	@ 80065d8 <start_combined_trajectory+0x2ac>
 80063d0:	eeb0 0a67 	vmov.f32	s0, s15
 80063d4:	f00c fb25 	bl	8012a22 <fminf>
 80063d8:	eef0 7a40 	vmov.f32	s15, s0
 80063dc:	4b7b      	ldr	r3, [pc, #492]	@ (80065cc <start_combined_trajectory+0x2a0>)
 80063de:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS), PRISMATIC_MAX_POS);

	float normalized_current = normalize_angle(rev_current);
 80063e2:	ed97 0a07 	vldr	s0, [r7, #28]
 80063e6:	f7ff feb7 	bl	8006158 <normalize_angle>
 80063ea:	ed87 0a06 	vstr	s0, [r7, #24]
	float current_deg = normalized_current * 180.0f / PI;
 80063ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80063f2:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80065dc <start_combined_trajectory+0x2b0>
 80063f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80063fa:	eddf 6a79 	vldr	s13, [pc, #484]	@ 80065e0 <start_combined_trajectory+0x2b4>
 80063fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006402:	edc7 7a05 	vstr	s15, [r7, #20]
	movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 8006406:	edd7 0a00 	vldr	s1, [r7]
 800640a:	ed97 0a05 	vldr	s0, [r7, #20]
 800640e:	f7ff fec9 	bl	80061a4 <calculate_movement_deg>
 8006412:	eef0 7a40 	vmov.f32	s15, s0
 8006416:	4b73      	ldr	r3, [pc, #460]	@ (80065e4 <start_combined_trajectory+0x2b8>)
 8006418:	edc3 7a00 	vstr	s15, [r3]
	float movement_rad = movement_deg * PI / 180.0f;
 800641c:	4b71      	ldr	r3, [pc, #452]	@ (80065e4 <start_combined_trajectory+0x2b8>)
 800641e:	edd3 7a00 	vldr	s15, [r3]
 8006422:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80065e0 <start_combined_trajectory+0x2b4>
 8006426:	ee27 7a87 	vmul.f32	s14, s15, s14
 800642a:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 80065dc <start_combined_trajectory+0x2b0>
 800642e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006432:	edc7 7a04 	vstr	s15, [r7, #16]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 8006436:	4b66      	ldr	r3, [pc, #408]	@ (80065d0 <start_combined_trajectory+0x2a4>)
 8006438:	ed93 7a03 	vldr	s14, [r3, #12]
 800643c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006444:	4b62      	ldr	r3, [pc, #392]	@ (80065d0 <start_combined_trajectory+0x2a4>)
 8006446:	edc3 7a04 	vstr	s15, [r3, #16]

	// Check if we're in HOMING_REV_TO_ZERO_DEG mode
	bool is_homing_zero_deg = (homing_active
 800644a:	4b5a      	ldr	r3, [pc, #360]	@ (80065b4 <start_combined_trajectory+0x288>)
 800644c:	781b      	ldrb	r3, [r3, #0]
			&& homing_state == HOMING_REV_TO_ZERO_DEG);
 800644e:	2b00      	cmp	r3, #0
 8006450:	d005      	beq.n	800645e <start_combined_trajectory+0x132>
 8006452:	4b59      	ldr	r3, [pc, #356]	@ (80065b8 <start_combined_trajectory+0x28c>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b07      	cmp	r3, #7
 8006458:	d101      	bne.n	800645e <start_combined_trajectory+0x132>
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <start_combined_trajectory+0x134>
 800645e:	2300      	movs	r3, #0
	bool is_homing_zero_deg = (homing_active
 8006460:	73fb      	strb	r3, [r7, #15]
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	73fb      	strb	r3, [r7, #15]

	if (is_homing_zero_deg) {
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d03d      	beq.n	80064ec <start_combined_trajectory+0x1c0>

		// HOMING_REV_TO_ZERO_DEG: Only generate revolute trajectory, skip prismatic

		// Don't generate prismatic trajectory at all
		prismatic_axis.trajectory_active = false;
 8006470:	4b56      	ldr	r3, [pc, #344]	@ (80065cc <start_combined_trajectory+0x2a0>)
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		prismatic_axis.position = pris_current;  // Hold current position
 8006478:	4a54      	ldr	r2, [pc, #336]	@ (80065cc <start_combined_trajectory+0x2a0>)
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	6013      	str	r3, [r2, #0]
		prismatic_axis.velocity = 0.0f;
 800647e:	4b53      	ldr	r3, [pc, #332]	@ (80065cc <start_combined_trajectory+0x2a0>)
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	605a      	str	r2, [r3, #4]
		// Only generate revolute trajectory
		check[4]++;
 8006486:	4b58      	ldr	r3, [pc, #352]	@ (80065e8 <start_combined_trajectory+0x2bc>)
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	3301      	adds	r3, #1
 800648c:	4a56      	ldr	r2, [pc, #344]	@ (80065e8 <start_combined_trajectory+0x2bc>)
 800648e:	6113      	str	r3, [r2, #16]
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006490:	4b4f      	ldr	r3, [pc, #316]	@ (80065d0 <start_combined_trajectory+0x2a4>)
 8006492:	ed93 8a03 	vldr	s16, [r3, #12]
 8006496:	4b4e      	ldr	r3, [pc, #312]	@ (80065d0 <start_combined_trajectory+0x2a4>)
 8006498:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos,
				ZGX45RGG_150RPM_Constant.traject_qd_max,
 800649c:	4b53      	ldr	r3, [pc, #332]	@ (80065ec <start_combined_trajectory+0x2c0>)
 800649e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80064a2:	4610      	mov	r0, r2
 80064a4:	4619      	mov	r1, r3
 80064a6:	f7fa fb55 	bl	8000b54 <__aeabi_d2f>
 80064aa:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80064ac:	4b4f      	ldr	r3, [pc, #316]	@ (80065ec <start_combined_trajectory+0x2c0>)
 80064ae:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80064b2:	4610      	mov	r0, r2
 80064b4:	4619      	mov	r1, r3
 80064b6:	f7fa fb4d 	bl	8000b54 <__aeabi_d2f>
 80064ba:	4603      	mov	r3, r0
 80064bc:	ee01 3a90 	vmov	s3, r3
 80064c0:	ee01 4a10 	vmov	s2, r4
 80064c4:	eef0 0a68 	vmov.f32	s1, s17
 80064c8:	eeb0 0a48 	vmov.f32	s0, s16
 80064cc:	4848      	ldr	r0, [pc, #288]	@ (80065f0 <start_combined_trajectory+0x2c4>)
 80064ce:	f7fd ff45 	bl	800435c <Trapezoidal_Generator>

		revolute_axis.trajectory_active = false;  // Will be activated later
 80064d2:	4b3f      	ldr	r3, [pc, #252]	@ (80065d0 <start_combined_trajectory+0x2a4>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		// Set motion sequence to skip prismatic phase
		plotter_pen_up();
 80064da:	f002 ff4d 	bl	8009378 <plotter_pen_up>
		motion_delay_timer = 0;
 80064de:	4b45      	ldr	r3, [pc, #276]	@ (80065f4 <start_combined_trajectory+0x2c8>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	601a      	str	r2, [r3, #0]
		motion_sequence_state = MOTION_PEN_UP_DELAY; // Will skip to revolute directly
 80064e4:	4b44      	ldr	r3, [pc, #272]	@ (80065f8 <start_combined_trajectory+0x2cc>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	701a      	strb	r2, [r3, #0]
 80064ea:	e05e      	b.n	80065aa <start_combined_trajectory+0x27e>

	} else {

		// NORMAL TRAJECTORY: Generate both prismatic and revolute trajectories
		// Generate prismatic trajectory
		check[5]++;
 80064ec:	4b3e      	ldr	r3, [pc, #248]	@ (80065e8 <start_combined_trajectory+0x2bc>)
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	3301      	adds	r3, #1
 80064f2:	4a3d      	ldr	r2, [pc, #244]	@ (80065e8 <start_combined_trajectory+0x2bc>)
 80064f4:	6153      	str	r3, [r2, #20]

		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80064f6:	4b35      	ldr	r3, [pc, #212]	@ (80065cc <start_combined_trajectory+0x2a0>)
 80064f8:	ed93 8a03 	vldr	s16, [r3, #12]
 80064fc:	4b33      	ldr	r3, [pc, #204]	@ (80065cc <start_combined_trajectory+0x2a0>)
 80064fe:	edd3 8a04 	vldr	s17, [r3, #16]
				prismatic_axis.target_pos,
				ZGX45RGG_400RPM_Constant.traject_sd_max,
 8006502:	4b3e      	ldr	r3, [pc, #248]	@ (80065fc <start_combined_trajectory+0x2d0>)
 8006504:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006508:	4610      	mov	r0, r2
 800650a:	4619      	mov	r1, r3
 800650c:	f7fa fb22 	bl	8000b54 <__aeabi_d2f>
 8006510:	4604      	mov	r4, r0
				ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8006512:	4b3a      	ldr	r3, [pc, #232]	@ (80065fc <start_combined_trajectory+0x2d0>)
 8006514:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006518:	4610      	mov	r0, r2
 800651a:	4619      	mov	r1, r3
 800651c:	f7fa fb1a 	bl	8000b54 <__aeabi_d2f>
 8006520:	4603      	mov	r3, r0
 8006522:	ee01 3a90 	vmov	s3, r3
 8006526:	ee01 4a10 	vmov	s2, r4
 800652a:	eef0 0a68 	vmov.f32	s1, s17
 800652e:	eeb0 0a48 	vmov.f32	s0, s16
 8006532:	4833      	ldr	r0, [pc, #204]	@ (8006600 <start_combined_trajectory+0x2d4>)
 8006534:	f7fd ff12 	bl	800435c <Trapezoidal_Generator>

		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006538:	4b25      	ldr	r3, [pc, #148]	@ (80065d0 <start_combined_trajectory+0x2a4>)
 800653a:	ed93 8a03 	vldr	s16, [r3, #12]
 800653e:	4b24      	ldr	r3, [pc, #144]	@ (80065d0 <start_combined_trajectory+0x2a4>)
 8006540:	edd3 8a04 	vldr	s17, [r3, #16]
		            revolute_axis.target_pos,
		            ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006544:	4b29      	ldr	r3, [pc, #164]	@ (80065ec <start_combined_trajectory+0x2c0>)
 8006546:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800654a:	4610      	mov	r0, r2
 800654c:	4619      	mov	r1, r3
 800654e:	f7fa fb01 	bl	8000b54 <__aeabi_d2f>
 8006552:	4604      	mov	r4, r0
		            ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006554:	4b25      	ldr	r3, [pc, #148]	@ (80065ec <start_combined_trajectory+0x2c0>)
 8006556:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800655a:	4610      	mov	r0, r2
 800655c:	4619      	mov	r1, r3
 800655e:	f7fa faf9 	bl	8000b54 <__aeabi_d2f>
 8006562:	4603      	mov	r3, r0
 8006564:	ee01 3a90 	vmov	s3, r3
 8006568:	ee01 4a10 	vmov	s2, r4
 800656c:	eef0 0a68 	vmov.f32	s1, s17
 8006570:	eeb0 0a48 	vmov.f32	s0, s16
 8006574:	481e      	ldr	r0, [pc, #120]	@ (80065f0 <start_combined_trajectory+0x2c4>)
 8006576:	f7fd fef1 	bl	800435c <Trapezoidal_Generator>

		prismatic_axis.trajectory_active = false;
 800657a:	4b14      	ldr	r3, [pc, #80]	@ (80065cc <start_combined_trajectory+0x2a0>)
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 8006582:	4b13      	ldr	r3, [pc, #76]	@ (80065d0 <start_combined_trajectory+0x2a4>)
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		plotter_pen_up();
 800658a:	f002 fef5 	bl	8009378 <plotter_pen_up>
		motion_delay_timer = 0;
 800658e:	4b19      	ldr	r3, [pc, #100]	@ (80065f4 <start_combined_trajectory+0x2c8>)
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
		motion_sequence_state = MOTION_PEN_UP_DELAY;
 8006594:	4b18      	ldr	r3, [pc, #96]	@ (80065f8 <start_combined_trajectory+0x2cc>)
 8006596:	2201      	movs	r2, #1
 8006598:	701a      	strb	r2, [r3, #0]

		//modbus reset state
		registerFrame[BaseSystem_Status].U16 = 0;
 800659a:	4b1a      	ldr	r3, [pc, #104]	@ (8006604 <start_combined_trajectory+0x2d8>)
 800659c:	2200      	movs	r2, #0
 800659e:	805a      	strh	r2, [r3, #2]
		registerFrame[R_Theta_Status].U16 = 0;
 80065a0:	4b18      	ldr	r3, [pc, #96]	@ (8006604 <start_combined_trajectory+0x2d8>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	841a      	strh	r2, [r3, #32]
 80065a6:	e000      	b.n	80065aa <start_combined_trajectory+0x27e>
		return;
 80065a8:	bf00      	nop
	}
}
 80065aa:	372c      	adds	r7, #44	@ 0x2c
 80065ac:	46bd      	mov	sp, r7
 80065ae:	ecbd 8b02 	vpop	{d8}
 80065b2:	bd90      	pop	{r4, r7, pc}
 80065b4:	20000567 	.word	0x20000567
 80065b8:	20000566 	.word	0x20000566
 80065bc:	200006cc 	.word	0x200006cc
 80065c0:	20000728 	.word	0x20000728
 80065c4:	20000534 	.word	0x20000534
 80065c8:	20000548 	.word	0x20000548
 80065cc:	20000480 	.word	0x20000480
 80065d0:	200004c4 	.word	0x200004c4
 80065d4:	00000000 	.word	0x00000000
 80065d8:	43960000 	.word	0x43960000
 80065dc:	43340000 	.word	0x43340000
 80065e0:	40490fdb 	.word	0x40490fdb
 80065e4:	2000057c 	.word	0x2000057c
 80065e8:	200005e8 	.word	0x200005e8
 80065ec:	20000000 	.word	0x20000000
 80065f0:	20000520 	.word	0x20000520
 80065f4:	2000055c 	.word	0x2000055c
 80065f8:	20000508 	.word	0x20000508
 80065fc:	20000080 	.word	0x20000080
 8006600:	2000050c 	.word	0x2000050c
 8006604:	200012d0 	.word	0x200012d0

08006608 <update_position_control>:

void update_position_control(void) {
 8006608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800660c:	ed2d 8b02 	vpush	{d8}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 8006614:	4b50      	ldr	r3, [pc, #320]	@ (8006758 <update_position_control+0x150>)
 8006616:	ed93 7a00 	vldr	s14, [r3]
 800661a:	4b50      	ldr	r3, [pc, #320]	@ (800675c <update_position_control+0x154>)
 800661c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8006620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006624:	4b4c      	ldr	r3, [pc, #304]	@ (8006758 <update_position_control+0x150>)
 8006626:	edc3 7a05 	vstr	s15, [r3, #20]
	prismatic_axis.command_vel = PWM_Satuation(
 800662a:	4b4b      	ldr	r3, [pc, #300]	@ (8006758 <update_position_control+0x150>)
 800662c:	edd3 7a05 	vldr	s15, [r3, #20]
 8006630:	eeb0 0a67 	vmov.f32	s0, s15
 8006634:	484a      	ldr	r0, [pc, #296]	@ (8006760 <update_position_control+0x158>)
 8006636:	f7fa fdef 	bl	8001218 <PID_CONTROLLER_Compute>
 800663a:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 800663e:	4b49      	ldr	r3, [pc, #292]	@ (8006764 <update_position_control+0x15c>)
 8006640:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 8006644:	4610      	mov	r0, r2
 8006646:	4619      	mov	r1, r3
 8006648:	f7fa fa3c 	bl	8000ac4 <__aeabi_d2iz>
 800664c:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 800664e:	4b45      	ldr	r3, [pc, #276]	@ (8006764 <update_position_control+0x15c>)
 8006650:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8006654:	4690      	mov	r8, r2
 8006656:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 800665a:	4640      	mov	r0, r8
 800665c:	4649      	mov	r1, r9
 800665e:	f7fa fa31 	bl	8000ac4 <__aeabi_d2iz>
 8006662:	4603      	mov	r3, r0
 8006664:	4619      	mov	r1, r3
 8006666:	4630      	mov	r0, r6
 8006668:	eeb0 0a48 	vmov.f32	s0, s16
 800666c:	f7fa fd72 	bl	8001154 <PWM_Satuation>
 8006670:	ee07 0a90 	vmov	s15, r0
 8006674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006678:	4b37      	ldr	r3, [pc, #220]	@ (8006758 <update_position_control+0x150>)
 800667a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	float normalized_position = normalize_angle(revolute_encoder.rads);
 800667e:	4b3a      	ldr	r3, [pc, #232]	@ (8006768 <update_position_control+0x160>)
 8006680:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006684:	eeb0 0a67 	vmov.f32	s0, s15
 8006688:	f7ff fd66 	bl	8006158 <normalize_angle>
 800668c:	ed87 0a01 	vstr	s0, [r7, #4]
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 8006690:	4b36      	ldr	r3, [pc, #216]	@ (800676c <update_position_control+0x164>)
 8006692:	ed93 7a00 	vldr	s14, [r3]
 8006696:	edd7 7a01 	vldr	s15, [r7, #4]
 800669a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800669e:	4b33      	ldr	r3, [pc, #204]	@ (800676c <update_position_control+0x164>)
 80066a0:	edc3 7a05 	vstr	s15, [r3, #20]

	if (revolute_axis.pos_error > PI)
 80066a4:	4b31      	ldr	r3, [pc, #196]	@ (800676c <update_position_control+0x164>)
 80066a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80066aa:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006770 <update_position_control+0x168>
 80066ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b6:	dd09      	ble.n	80066cc <update_position_control+0xc4>
		revolute_axis.pos_error -= 2.0f * PI;
 80066b8:	4b2c      	ldr	r3, [pc, #176]	@ (800676c <update_position_control+0x164>)
 80066ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80066be:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8006774 <update_position_control+0x16c>
 80066c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80066c6:	4b29      	ldr	r3, [pc, #164]	@ (800676c <update_position_control+0x164>)
 80066c8:	edc3 7a05 	vstr	s15, [r3, #20]
	if (revolute_axis.pos_error < -PI)
 80066cc:	4b27      	ldr	r3, [pc, #156]	@ (800676c <update_position_control+0x164>)
 80066ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80066d2:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8006778 <update_position_control+0x170>
 80066d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066de:	d509      	bpl.n	80066f4 <update_position_control+0xec>
		revolute_axis.pos_error += 2.0f * PI;
 80066e0:	4b22      	ldr	r3, [pc, #136]	@ (800676c <update_position_control+0x164>)
 80066e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80066e6:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8006774 <update_position_control+0x16c>
 80066ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066ee:	4b1f      	ldr	r3, [pc, #124]	@ (800676c <update_position_control+0x164>)
 80066f0:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 80066f4:	4b1d      	ldr	r3, [pc, #116]	@ (800676c <update_position_control+0x164>)
 80066f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80066fa:	eeb0 0a67 	vmov.f32	s0, s15
 80066fe:	481f      	ldr	r0, [pc, #124]	@ (800677c <update_position_control+0x174>)
 8006700:	f7fa fd8a 	bl	8001218 <PID_CONTROLLER_Compute>
 8006704:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 8006708:	4b1d      	ldr	r3, [pc, #116]	@ (8006780 <update_position_control+0x178>)
 800670a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 800670e:	4610      	mov	r0, r2
 8006710:	4619      	mov	r1, r3
 8006712:	f7fa f9d7 	bl	8000ac4 <__aeabi_d2iz>
 8006716:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 8006718:	4b19      	ldr	r3, [pc, #100]	@ (8006780 <update_position_control+0x178>)
 800671a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800671e:	4614      	mov	r4, r2
 8006720:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 8006724:	4620      	mov	r0, r4
 8006726:	4629      	mov	r1, r5
 8006728:	f7fa f9cc 	bl	8000ac4 <__aeabi_d2iz>
 800672c:	4603      	mov	r3, r0
 800672e:	4619      	mov	r1, r3
 8006730:	4630      	mov	r0, r6
 8006732:	eeb0 0a48 	vmov.f32	s0, s16
 8006736:	f7fa fd0d 	bl	8001154 <PWM_Satuation>
 800673a:	ee07 0a90 	vmov	s15, r0
 800673e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006742:	4b0a      	ldr	r3, [pc, #40]	@ (800676c <update_position_control+0x164>)
 8006744:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	ecbd 8b02 	vpop	{d8}
 8006752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006756:	bf00      	nop
 8006758:	20000480 	.word	0x20000480
 800675c:	200006cc 	.word	0x200006cc
 8006760:	20000784 	.word	0x20000784
 8006764:	20000080 	.word	0x20000080
 8006768:	20000728 	.word	0x20000728
 800676c:	200004c4 	.word	0x200004c4
 8006770:	40490fdb 	.word	0x40490fdb
 8006774:	40c90fdb 	.word	0x40c90fdb
 8006778:	c0490fdb 	.word	0xc0490fdb
 800677c:	200007d4 	.word	0x200007d4
 8006780:	20000000 	.word	0x20000000
 8006784:	00000000 	.word	0x00000000

08006788 <update_velocity_control>:

void update_velocity_control(void) {
 8006788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678c:	ed2d 8b02 	vpush	{d8}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0

	if (prismatic_axis.trajectory_active) {
 8006794:	4b96      	ldr	r3, [pc, #600]	@ (80069f0 <update_velocity_control+0x268>)
 8006796:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800679a:	2b00      	cmp	r3, #0
 800679c:	d010      	beq.n	80067c0 <update_velocity_control+0x38>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 800679e:	4b94      	ldr	r3, [pc, #592]	@ (80069f0 <update_velocity_control+0x268>)
 80067a0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 80067a4:	4b92      	ldr	r3, [pc, #584]	@ (80069f0 <update_velocity_control+0x268>)
 80067a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80067aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80067ae:	4b90      	ldr	r3, [pc, #576]	@ (80069f0 <update_velocity_control+0x268>)
 80067b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80067b4:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80067b8:	4b8d      	ldr	r3, [pc, #564]	@ (80069f0 <update_velocity_control+0x268>)
 80067ba:	edc3 7a06 	vstr	s15, [r3, #24]
 80067be:	e00a      	b.n	80067d6 <update_velocity_control+0x4e>
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80067c0:	4b8b      	ldr	r3, [pc, #556]	@ (80069f0 <update_velocity_control+0x268>)
 80067c2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 80067c6:	4b8a      	ldr	r3, [pc, #552]	@ (80069f0 <update_velocity_control+0x268>)
 80067c8:	edd3 7a07 	vldr	s15, [r3, #28]
 80067cc:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80067d0:	4b87      	ldr	r3, [pc, #540]	@ (80069f0 <update_velocity_control+0x268>)
 80067d2:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 80067d6:	4b86      	ldr	r3, [pc, #536]	@ (80069f0 <update_velocity_control+0x268>)
 80067d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80067dc:	eeb0 0a67 	vmov.f32	s0, s15
 80067e0:	4884      	ldr	r0, [pc, #528]	@ (80069f4 <update_velocity_control+0x26c>)
 80067e2:	f7fa fd19 	bl	8001218 <PID_CONTROLLER_Compute>
 80067e6:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 80067ea:	4b83      	ldr	r3, [pc, #524]	@ (80069f8 <update_velocity_control+0x270>)
 80067ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 80067f0:	4610      	mov	r0, r2
 80067f2:	4619      	mov	r1, r3
 80067f4:	f7fa f966 	bl	8000ac4 <__aeabi_d2iz>
 80067f8:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 80067fa:	4b7f      	ldr	r3, [pc, #508]	@ (80069f8 <update_velocity_control+0x270>)
 80067fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006800:	603a      	str	r2, [r7, #0]
 8006802:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006806:	607b      	str	r3, [r7, #4]
	prismatic_axis.command_pos = PWM_Satuation(
 8006808:	e9d7 0100 	ldrd	r0, r1, [r7]
 800680c:	f7fa f95a 	bl	8000ac4 <__aeabi_d2iz>
 8006810:	4603      	mov	r3, r0
 8006812:	4619      	mov	r1, r3
 8006814:	4630      	mov	r0, r6
 8006816:	eeb0 0a48 	vmov.f32	s0, s16
 800681a:	f7fa fc9b 	bl	8001154 <PWM_Satuation>
 800681e:	ee07 0a90 	vmov	s15, r0
 8006822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006826:	4b72      	ldr	r3, [pc, #456]	@ (80069f0 <update_velocity_control+0x268>)
 8006828:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (prismatic_axis.trajectory_active) {
 800682c:	4b70      	ldr	r3, [pc, #448]	@ (80069f0 <update_velocity_control+0x268>)
 800682e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006832:	2b00      	cmp	r3, #0
 8006834:	d02c      	beq.n	8006890 <update_velocity_control+0x108>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 8006836:	4b6e      	ldr	r3, [pc, #440]	@ (80069f0 <update_velocity_control+0x268>)
 8006838:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 800683c:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80069fc <update_velocity_control+0x274>
 8006840:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006844:	eeb0 0a47 	vmov.f32	s0, s14
 8006848:	486d      	ldr	r0, [pc, #436]	@ (8006a00 <update_velocity_control+0x278>)
 800684a:	f7fb f825 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 800684e:	eef0 7a40 	vmov.f32	s15, s0
 8006852:	4b67      	ldr	r3, [pc, #412]	@ (80069f0 <update_velocity_control+0x268>)
 8006854:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006858:	4b6a      	ldr	r3, [pc, #424]	@ (8006a04 <update_velocity_control+0x27c>)
 800685a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800685e:	4b6a      	ldr	r3, [pc, #424]	@ (8006a08 <update_velocity_control+0x280>)
 8006860:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 8006864:	4b69      	ldr	r3, [pc, #420]	@ (8006a0c <update_velocity_control+0x284>)
 8006866:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 800686a:	eddf 5a64 	vldr	s11, [pc, #400]	@ 80069fc <update_velocity_control+0x274>
 800686e:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8006872:	eeb0 1a46 	vmov.f32	s2, s12
 8006876:	eef0 0a66 	vmov.f32	s1, s13
 800687a:	eeb0 0a47 	vmov.f32	s0, s14
 800687e:	4864      	ldr	r0, [pc, #400]	@ (8006a10 <update_velocity_control+0x288>)
 8006880:	f7fb f8b2 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 8006884:	eef0 7a40 	vmov.f32	s15, s0
 8006888:	4b59      	ldr	r3, [pc, #356]	@ (80069f0 <update_velocity_control+0x268>)
 800688a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 800688e:	e007      	b.n	80068a0 <update_velocity_control+0x118>
	} else {
		prismatic_axis.ffd = 0.0f;
 8006890:	4b57      	ldr	r3, [pc, #348]	@ (80069f0 <update_velocity_control+0x268>)
 8006892:	f04f 0200 	mov.w	r2, #0
 8006896:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8006898:	4b55      	ldr	r3, [pc, #340]	@ (80069f0 <update_velocity_control+0x268>)
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80068a0:	4b53      	ldr	r3, [pc, #332]	@ (80069f0 <update_velocity_control+0x268>)
 80068a2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80068a6:	4b52      	ldr	r3, [pc, #328]	@ (80069f0 <update_velocity_control+0x268>)
 80068a8:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80068ac:	4b50      	ldr	r3, [pc, #320]	@ (80069f0 <update_velocity_control+0x268>)
 80068ae:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80068b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ba:	4b4d      	ldr	r3, [pc, #308]	@ (80069f0 <update_velocity_control+0x268>)
 80068bc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80068c0:	4b4b      	ldr	r3, [pc, #300]	@ (80069f0 <update_velocity_control+0x268>)
 80068c2:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80068c6:	4b4c      	ldr	r3, [pc, #304]	@ (80069f8 <update_velocity_control+0x270>)
 80068c8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80068cc:	4610      	mov	r0, r2
 80068ce:	4619      	mov	r1, r3
 80068d0:	f7fa f8f8 	bl	8000ac4 <__aeabi_d2iz>
 80068d4:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80068d6:	4b48      	ldr	r3, [pc, #288]	@ (80069f8 <update_velocity_control+0x270>)
 80068d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80068dc:	4692      	mov	sl, r2
 80068de:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80068e2:	4650      	mov	r0, sl
 80068e4:	4659      	mov	r1, fp
 80068e6:	f7fa f8ed 	bl	8000ac4 <__aeabi_d2iz>
 80068ea:	4603      	mov	r3, r0
 80068ec:	4619      	mov	r1, r3
 80068ee:	4630      	mov	r0, r6
 80068f0:	eeb0 0a48 	vmov.f32	s0, s16
 80068f4:	f7fa fc2e 	bl	8001154 <PWM_Satuation>
 80068f8:	ee07 0a90 	vmov	s15, r0
 80068fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006900:	4b3b      	ldr	r3, [pc, #236]	@ (80069f0 <update_velocity_control+0x268>)
 8006902:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006906:	4b40      	ldr	r3, [pc, #256]	@ (8006a08 <update_velocity_control+0x280>)
 8006908:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800690c:	2b00      	cmp	r3, #0
 800690e:	d010      	beq.n	8006932 <update_velocity_control+0x1aa>
		revolute_axis.vel_error = revolute_axis.command_vel
 8006910:	4b3d      	ldr	r3, [pc, #244]	@ (8006a08 <update_velocity_control+0x280>)
 8006912:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 8006916:	4b3c      	ldr	r3, [pc, #240]	@ (8006a08 <update_velocity_control+0x280>)
 8006918:	edd3 7a01 	vldr	s15, [r3, #4]
 800691c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006920:	4b39      	ldr	r3, [pc, #228]	@ (8006a08 <update_velocity_control+0x280>)
 8006922:	edd3 7a07 	vldr	s15, [r3, #28]
 8006926:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 800692a:	4b37      	ldr	r3, [pc, #220]	@ (8006a08 <update_velocity_control+0x280>)
 800692c:	edc3 7a06 	vstr	s15, [r3, #24]
 8006930:	e00a      	b.n	8006948 <update_velocity_control+0x1c0>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 8006932:	4b35      	ldr	r3, [pc, #212]	@ (8006a08 <update_velocity_control+0x280>)
 8006934:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8006938:	4b33      	ldr	r3, [pc, #204]	@ (8006a08 <update_velocity_control+0x280>)
 800693a:	edd3 7a07 	vldr	s15, [r3, #28]
 800693e:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006942:	4b31      	ldr	r3, [pc, #196]	@ (8006a08 <update_velocity_control+0x280>)
 8006944:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8006948:	4b2f      	ldr	r3, [pc, #188]	@ (8006a08 <update_velocity_control+0x280>)
 800694a:	edd3 7a06 	vldr	s15, [r3, #24]
 800694e:	eeb0 0a67 	vmov.f32	s0, s15
 8006952:	4830      	ldr	r0, [pc, #192]	@ (8006a14 <update_velocity_control+0x28c>)
 8006954:	f7fa fc60 	bl	8001218 <PID_CONTROLLER_Compute>
 8006958:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 800695c:	4b2e      	ldr	r3, [pc, #184]	@ (8006a18 <update_velocity_control+0x290>)
 800695e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 8006962:	4610      	mov	r0, r2
 8006964:	4619      	mov	r1, r3
 8006966:	f7fa f8ad 	bl	8000ac4 <__aeabi_d2iz>
 800696a:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 800696c:	4b2a      	ldr	r3, [pc, #168]	@ (8006a18 <update_velocity_control+0x290>)
 800696e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006972:	4690      	mov	r8, r2
 8006974:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 8006978:	4640      	mov	r0, r8
 800697a:	4649      	mov	r1, r9
 800697c:	f7fa f8a2 	bl	8000ac4 <__aeabi_d2iz>
 8006980:	4603      	mov	r3, r0
 8006982:	4619      	mov	r1, r3
 8006984:	4630      	mov	r0, r6
 8006986:	eeb0 0a48 	vmov.f32	s0, s16
 800698a:	f7fa fbe3 	bl	8001154 <PWM_Satuation>
 800698e:	ee07 0a90 	vmov	s15, r0
 8006992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006996:	4b1c      	ldr	r3, [pc, #112]	@ (8006a08 <update_velocity_control+0x280>)
 8006998:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 800699c:	4b1a      	ldr	r3, [pc, #104]	@ (8006a08 <update_velocity_control+0x280>)
 800699e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d03e      	beq.n	8006a24 <update_velocity_control+0x29c>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 80069a6:	4b18      	ldr	r3, [pc, #96]	@ (8006a08 <update_velocity_control+0x280>)
 80069a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80069ac:	eeb0 0a67 	vmov.f32	s0, s15
 80069b0:	481a      	ldr	r0, [pc, #104]	@ (8006a1c <update_velocity_control+0x294>)
 80069b2:	f7fa fdf1 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 80069b6:	eef0 7a40 	vmov.f32	s15, s0
 80069ba:	4b13      	ldr	r3, [pc, #76]	@ (8006a08 <update_velocity_control+0x280>)
 80069bc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80069c0:	4b10      	ldr	r3, [pc, #64]	@ (8006a04 <update_velocity_control+0x27c>)
 80069c2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80069c6:	4b11      	ldr	r3, [pc, #68]	@ (8006a0c <update_velocity_control+0x284>)
 80069c8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80069cc:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 80069fc <update_velocity_control+0x274>
 80069d0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80069d4:	eef0 0a66 	vmov.f32	s1, s13
 80069d8:	eeb0 0a47 	vmov.f32	s0, s14
 80069dc:	4810      	ldr	r0, [pc, #64]	@ (8006a20 <update_velocity_control+0x298>)
 80069de:	f7fa fe6e 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 80069e2:	eef0 7a40 	vmov.f32	s15, s0
 80069e6:	4b08      	ldr	r3, [pc, #32]	@ (8006a08 <update_velocity_control+0x280>)
 80069e8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 80069ec:	e034      	b.n	8006a58 <update_velocity_control+0x2d0>
 80069ee:	bf00      	nop
 80069f0:	20000480 	.word	0x20000480
 80069f4:	200007ac 	.word	0x200007ac
 80069f8:	20000080 	.word	0x20000080
 80069fc:	447a0000 	.word	0x447a0000
 8006a00:	2000084c 	.word	0x2000084c
 8006a04:	20000728 	.word	0x20000728
 8006a08:	200004c4 	.word	0x200004c4
 8006a0c:	200006cc 	.word	0x200006cc
 8006a10:	20000850 	.word	0x20000850
 8006a14:	200007fc 	.word	0x200007fc
 8006a18:	20000000 	.word	0x20000000
 8006a1c:	20000858 	.word	0x20000858
 8006a20:	2000085c 	.word	0x2000085c
	} else {
		revolute_axis.ffd = 0.0f;
 8006a24:	4b54      	ldr	r3, [pc, #336]	@ (8006b78 <update_velocity_control+0x3f0>)
 8006a26:	f04f 0200 	mov.w	r2, #0
 8006a2a:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006a2c:	4b53      	ldr	r3, [pc, #332]	@ (8006b7c <update_velocity_control+0x3f4>)
 8006a2e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006a32:	4b53      	ldr	r3, [pc, #332]	@ (8006b80 <update_velocity_control+0x3f8>)
 8006a34:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006a38:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8006b84 <update_velocity_control+0x3fc>
 8006a3c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006a40:	eef0 0a66 	vmov.f32	s1, s13
 8006a44:	eeb0 0a47 	vmov.f32	s0, s14
 8006a48:	484f      	ldr	r0, [pc, #316]	@ (8006b88 <update_velocity_control+0x400>)
 8006a4a:	f7fa fe38 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8006a4e:	eef0 7a40 	vmov.f32	s15, s0
 8006a52:	4b49      	ldr	r3, [pc, #292]	@ (8006b78 <update_velocity_control+0x3f0>)
 8006a54:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8006a58:	4b4c      	ldr	r3, [pc, #304]	@ (8006b8c <update_velocity_control+0x404>)
 8006a5a:	edd3 7a00 	vldr	s15, [r3]
 8006a5e:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006b90 <update_velocity_control+0x408>
 8006a62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006a66:	4b44      	ldr	r3, [pc, #272]	@ (8006b78 <update_velocity_control+0x3f0>)
 8006a68:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006a6c:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8006b94 <update_velocity_control+0x40c>
 8006a70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a78:	4b44      	ldr	r3, [pc, #272]	@ (8006b8c <update_velocity_control+0x404>)
 8006a7a:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 8006a7e:	4b46      	ldr	r3, [pc, #280]	@ (8006b98 <update_velocity_control+0x410>)
 8006a80:	edd3 7a00 	vldr	s15, [r3]
 8006a84:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006b90 <update_velocity_control+0x408>
 8006a88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8006b78 <update_velocity_control+0x3f0>)
 8006a8e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006a92:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8006b94 <update_velocity_control+0x40c>
 8006a96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b98 <update_velocity_control+0x410>)
 8006aa0:	edc3 7a00 	vstr	s15, [r3]

	revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
 8006aa4:	4b34      	ldr	r3, [pc, #208]	@ (8006b78 <update_velocity_control+0x3f0>)
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7f9 fd19 	bl	80004e0 <__aeabi_f2d>
 8006aae:	4680      	mov	r8, r0
 8006ab0:	4689      	mov	r9, r1
 8006ab2:	4b39      	ldr	r3, [pc, #228]	@ (8006b98 <update_velocity_control+0x410>)
 8006ab4:	ed93 7a00 	vldr	s14, [r3]
 8006ab8:	4b34      	ldr	r3, [pc, #208]	@ (8006b8c <update_velocity_control+0x404>)
 8006aba:	edd3 7a00 	vldr	s15, [r3]
 8006abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ac2:	ee17 0a90 	vmov	r0, s15
 8006ac6:	f7f9 fd0b 	bl	80004e0 <__aeabi_f2d>
 8006aca:	a329      	add	r3, pc, #164	@ (adr r3, 8006b70 <update_velocity_control+0x3e8>)
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	f7f9 fd5e 	bl	8000590 <__aeabi_dmul>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4640      	mov	r0, r8
 8006ada:	4649      	mov	r1, r9
 8006adc:	f7f9 fba2 	bl	8000224 <__adddf3>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	f7fa f834 	bl	8000b54 <__aeabi_d2f>
 8006aec:	4603      	mov	r3, r0
 8006aee:	4a22      	ldr	r2, [pc, #136]	@ (8006b78 <update_velocity_control+0x3f0>)
 8006af0:	6253      	str	r3, [r2, #36]	@ 0x24

	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006af2:	4b21      	ldr	r3, [pc, #132]	@ (8006b78 <update_velocity_control+0x3f0>)
 8006af4:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006af8:	4b28      	ldr	r3, [pc, #160]	@ (8006b9c <update_velocity_control+0x414>)
 8006afa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006afe:	4610      	mov	r0, r2
 8006b00:	4619      	mov	r1, r3
 8006b02:	f7f9 ffdf 	bl	8000ac4 <__aeabi_d2iz>
 8006b06:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006b08:	4b24      	ldr	r3, [pc, #144]	@ (8006b9c <update_velocity_control+0x414>)
 8006b0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006b0e:	4614      	mov	r4, r2
 8006b10:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006b14:	4620      	mov	r0, r4
 8006b16:	4629      	mov	r1, r5
 8006b18:	f7f9 ffd4 	bl	8000ac4 <__aeabi_d2iz>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4630      	mov	r0, r6
 8006b22:	eeb0 0a48 	vmov.f32	s0, s16
 8006b26:	f7fa fb15 	bl	8001154 <PWM_Satuation>
 8006b2a:	ee07 0a90 	vmov	s15, r0
 8006b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b32:	4b11      	ldr	r3, [pc, #68]	@ (8006b78 <update_velocity_control+0x3f0>)
 8006b34:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006b38:	4b19      	ldr	r3, [pc, #100]	@ (8006ba0 <update_velocity_control+0x418>)
 8006b3a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006b3e:	eef0 0a67 	vmov.f32	s1, s15
 8006b42:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8006ba4 <update_velocity_control+0x41c>
 8006b46:	4818      	ldr	r0, [pc, #96]	@ (8006ba8 <update_velocity_control+0x420>)
 8006b48:	f7fa fc3e 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b78 <update_velocity_control+0x3f0>)
 8006b4e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006b52:	eef0 0a67 	vmov.f32	s1, s15
 8006b56:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8006ba4 <update_velocity_control+0x41c>
 8006b5a:	4814      	ldr	r0, [pc, #80]	@ (8006bac <update_velocity_control+0x424>)
 8006b5c:	f7fa fc34 	bl	80013c8 <MDXX_set_range>
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	ecbd 8b02 	vpop	{d8}
 8006b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b6e:	bf00      	nop
 8006b70:	47ae147b 	.word	0x47ae147b
 8006b74:	3f847ae1 	.word	0x3f847ae1
 8006b78:	200004c4 	.word	0x200004c4
 8006b7c:	20000728 	.word	0x20000728
 8006b80:	200006cc 	.word	0x200006cc
 8006b84:	447a0000 	.word	0x447a0000
 8006b88:	2000085c 	.word	0x2000085c
 8006b8c:	20000618 	.word	0x20000618
 8006b90:	3f4ccccd 	.word	0x3f4ccccd
 8006b94:	3e4ccccd 	.word	0x3e4ccccd
 8006b98:	2000061c 	.word	0x2000061c
 8006b9c:	20000000 	.word	0x20000000
 8006ba0:	20000480 	.word	0x20000480
 8006ba4:	44fa0000 	.word	0x44fa0000
 8006ba8:	20000634 	.word	0x20000634
 8006bac:	20000680 	.word	0x20000680

08006bb0 <update_control_loops>:

void update_control_loops(void) {
 8006bb0:	b590      	push	{r4, r7, lr}
 8006bb2:	ed2d 8b02 	vpush	{d8}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
	normalized_position = normalize_angle(revolute_encoder.rads);
 8006bba:	4b7b      	ldr	r3, [pc, #492]	@ (8006da8 <update_control_loops+0x1f8>)
 8006bbc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8006bc4:	f7ff fac8 	bl	8006158 <normalize_angle>
 8006bc8:	eef0 7a40 	vmov.f32	s15, s0
 8006bcc:	4b77      	ldr	r3, [pc, #476]	@ (8006dac <update_control_loops+0x1fc>)
 8006bce:	edc3 7a00 	vstr	s15, [r3]

	if (is_emergency_active()) {
 8006bd2:	f000 fbcd 	bl	8007370 <is_emergency_active>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d015      	beq.n	8006c08 <update_control_loops+0x58>
		emergency_stop_all_motors();
 8006bdc:	f000 fb00 	bl	80071e0 <emergency_stop_all_motors>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006be0:	4b73      	ldr	r3, [pc, #460]	@ (8006db0 <update_control_loops+0x200>)
 8006be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006be4:	4a73      	ldr	r2, [pc, #460]	@ (8006db4 <update_control_loops+0x204>)
 8006be6:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006be8:	4b70      	ldr	r3, [pc, #448]	@ (8006dac <update_control_loops+0x1fc>)
 8006bea:	edd3 7a00 	vldr	s15, [r3]
 8006bee:	220e      	movs	r2, #14
 8006bf0:	210f      	movs	r1, #15
 8006bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8006bf6:	4870      	ldr	r0, [pc, #448]	@ (8006db8 <update_control_loops+0x208>)
 8006bf8:	f7fe f80a 	bl	8004c10 <UnitConverter_angle>
 8006bfc:	eef0 7a40 	vmov.f32	s15, s0
 8006c00:	4b6e      	ldr	r3, [pc, #440]	@ (8006dbc <update_control_loops+0x20c>)
 8006c02:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006c06:	e1d0      	b.n	8006faa <update_control_loops+0x3fa>
	}

	// Handle all homing states except HOMING_REV_TO_ZERO_DEG with direct motor control
	if (homing_active && homing_state != HOMING_REV_TO_ZERO_DEG) {
 8006c08:	4b6d      	ldr	r3, [pc, #436]	@ (8006dc0 <update_control_loops+0x210>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d02d      	beq.n	8006c6c <update_control_loops+0xbc>
 8006c10:	4b6c      	ldr	r3, [pc, #432]	@ (8006dc4 <update_control_loops+0x214>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b07      	cmp	r3, #7
 8006c16:	d029      	beq.n	8006c6c <update_control_loops+0xbc>
		update_homing_sequence();
 8006c18:	f7fe ff30 	bl	8005a7c <update_homing_sequence>
		MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006c1c:	4b65      	ldr	r3, [pc, #404]	@ (8006db4 <update_control_loops+0x204>)
 8006c1e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006c22:	eef0 0a67 	vmov.f32	s1, s15
 8006c26:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 8006dc8 <update_control_loops+0x218>
 8006c2a:	4868      	ldr	r0, [pc, #416]	@ (8006dcc <update_control_loops+0x21c>)
 8006c2c:	f7fa fbcc 	bl	80013c8 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006c30:	4b62      	ldr	r3, [pc, #392]	@ (8006dbc <update_control_loops+0x20c>)
 8006c32:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006c36:	eef0 0a67 	vmov.f32	s1, s15
 8006c3a:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 8006dc8 <update_control_loops+0x218>
 8006c3e:	4864      	ldr	r0, [pc, #400]	@ (8006dd0 <update_control_loops+0x220>)
 8006c40:	f7fa fbc2 	bl	80013c8 <MDXX_set_range>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006c44:	4b5a      	ldr	r3, [pc, #360]	@ (8006db0 <update_control_loops+0x200>)
 8006c46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c48:	4a5a      	ldr	r2, [pc, #360]	@ (8006db4 <update_control_loops+0x204>)
 8006c4a:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006c4c:	4b57      	ldr	r3, [pc, #348]	@ (8006dac <update_control_loops+0x1fc>)
 8006c4e:	edd3 7a00 	vldr	s15, [r3]
 8006c52:	220e      	movs	r2, #14
 8006c54:	210f      	movs	r1, #15
 8006c56:	eeb0 0a67 	vmov.f32	s0, s15
 8006c5a:	4857      	ldr	r0, [pc, #348]	@ (8006db8 <update_control_loops+0x208>)
 8006c5c:	f7fd ffd8 	bl	8004c10 <UnitConverter_angle>
 8006c60:	eef0 7a40 	vmov.f32	s15, s0
 8006c64:	4b55      	ldr	r3, [pc, #340]	@ (8006dbc <update_control_loops+0x20c>)
 8006c66:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006c6a:	e19e      	b.n	8006faa <update_control_loops+0x3fa>
	}

	// Handle HOMING_REV_TO_ZERO_DEG: use trajectory system + check completion
	if (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006c6c:	4b54      	ldr	r3, [pc, #336]	@ (8006dc0 <update_control_loops+0x210>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d01d      	beq.n	8006cb0 <update_control_loops+0x100>
 8006c74:	4b53      	ldr	r3, [pc, #332]	@ (8006dc4 <update_control_loops+0x214>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b07      	cmp	r3, #7
 8006c7a:	d119      	bne.n	8006cb0 <update_control_loops+0x100>
		// First, update the homing sequence to handle trajectory start/completion
		update_homing_sequence();
 8006c7c:	f7fe fefe 	bl	8005a7c <update_homing_sequence>

		// If still in HOMING_REV_TO_ZERO_DEG after update, continue with trajectory control
		if (homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006c80:	4b50      	ldr	r3, [pc, #320]	@ (8006dc4 <update_control_loops+0x214>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b07      	cmp	r3, #7
 8006c86:	d013      	beq.n	8006cb0 <update_control_loops+0x100>
			// Let the trajectory system handle the motion
			// Fall through to the switch statement below
		} else {
			// Homing sequence advanced to next state, return
			prismatic_axis.mm = prismatic_encoder.mm;
 8006c88:	4b49      	ldr	r3, [pc, #292]	@ (8006db0 <update_control_loops+0x200>)
 8006c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c8c:	4a49      	ldr	r2, [pc, #292]	@ (8006db4 <update_control_loops+0x204>)
 8006c8e:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006c90:	4b46      	ldr	r3, [pc, #280]	@ (8006dac <update_control_loops+0x1fc>)
 8006c92:	edd3 7a00 	vldr	s15, [r3]
 8006c96:	220e      	movs	r2, #14
 8006c98:	210f      	movs	r1, #15
 8006c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8006c9e:	4846      	ldr	r0, [pc, #280]	@ (8006db8 <update_control_loops+0x208>)
 8006ca0:	f7fd ffb6 	bl	8004c10 <UnitConverter_angle>
 8006ca4:	eef0 7a40 	vmov.f32	s15, s0
 8006ca8:	4b44      	ldr	r3, [pc, #272]	@ (8006dbc <update_control_loops+0x20c>)
 8006caa:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
			return;
 8006cae:	e17c      	b.n	8006faa <update_control_loops+0x3fa>
		}
	}
	//100 point
	if (j1_active && motion_sequence_state == MOTION_IDLE) {
 8006cb0:	4b48      	ldr	r3, [pc, #288]	@ (8006dd4 <update_control_loops+0x224>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d02f      	beq.n	8006d18 <update_control_loops+0x168>
 8006cb8:	4b47      	ldr	r3, [pc, #284]	@ (8006dd8 <update_control_loops+0x228>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d12b      	bne.n	8006d18 <update_control_loops+0x168>
		if (j1_going_to_target) {
 8006cc0:	4b46      	ldr	r3, [pc, #280]	@ (8006ddc <update_control_loops+0x22c>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d009      	beq.n	8006cdc <update_control_loops+0x12c>

			// check if finish goto target then goto 0
			j1_going_to_target = false;
 8006cc8:	4b44      	ldr	r3, [pc, #272]	@ (8006ddc <update_control_loops+0x22c>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	701a      	strb	r2, [r3, #0]
			start_combined_trajectory(0.0f, 0.0f);
 8006cce:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8006de0 <update_control_loops+0x230>
 8006cd2:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8006de0 <update_control_loops+0x230>
 8006cd6:	f7ff fb29 	bl	800632c <start_combined_trajectory>
 8006cda:	e01d      	b.n	8006d18 <update_control_loops+0x168>
		} else {

			j1_cycle_count++;
 8006cdc:	4b41      	ldr	r3, [pc, #260]	@ (8006de4 <update_control_loops+0x234>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	4b3f      	ldr	r3, [pc, #252]	@ (8006de4 <update_control_loops+0x234>)
 8006ce6:	701a      	strb	r2, [r3, #0]

			if (j1_cycle_count >= 100) {
 8006ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8006de4 <update_control_loops+0x234>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b63      	cmp	r3, #99	@ 0x63
 8006cee:	d906      	bls.n	8006cfe <update_control_loops+0x14e>
				//finish 100
				j1_active = false;
 8006cf0:	4b38      	ldr	r3, [pc, #224]	@ (8006dd4 <update_control_loops+0x224>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 8006cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8006de4 <update_control_loops+0x234>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	e00c      	b.n	8006d18 <update_control_loops+0x168>
			} else {
				// start again
				j1_going_to_target = true;
 8006cfe:	4b37      	ldr	r3, [pc, #220]	@ (8006ddc <update_control_loops+0x22c>)
 8006d00:	2201      	movs	r2, #1
 8006d02:	701a      	strb	r2, [r3, #0]
				start_combined_trajectory(J1_TARGET_PRIS, J1_TARGET_REV);
 8006d04:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8006de8 <update_control_loops+0x238>
 8006d08:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8006dec <update_control_loops+0x23c>
 8006d0c:	eef0 0a47 	vmov.f32	s1, s14
 8006d10:	eeb0 0a67 	vmov.f32	s0, s15
 8006d14:	f7ff fb0a 	bl	800632c <start_combined_trajectory>
			}
		}
	}

	// Motion sequence handling
	switch (motion_sequence_state) {
 8006d18:	4b2f      	ldr	r3, [pc, #188]	@ (8006dd8 <update_control_loops+0x228>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	2b05      	cmp	r3, #5
 8006d20:	f200 8129 	bhi.w	8006f76 <update_control_loops+0x3c6>
 8006d24:	a201      	add	r2, pc, #4	@ (adr r2, 8006d2c <update_control_loops+0x17c>)
 8006d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2a:	bf00      	nop
 8006d2c:	08006d45 	.word	0x08006d45
 8006d30:	08006f77 	.word	0x08006f77
 8006d34:	08006f77 	.word	0x08006f77
 8006d38:	08006df5 	.word	0x08006df5
 8006d3c:	08006f51 	.word	0x08006f51
 8006d40:	08006f6f 	.word	0x08006f6f
	case MOTION_PEN_UP_DELAY:
		if (++motion_delay_timer >= 1500) {
 8006d44:	4b2a      	ldr	r3, [pc, #168]	@ (8006df0 <update_control_loops+0x240>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	4a29      	ldr	r2, [pc, #164]	@ (8006df0 <update_control_loops+0x240>)
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006d52:	4293      	cmp	r3, r2
 8006d54:	f240 8111 	bls.w	8006f7a <update_control_loops+0x3ca>
			// Check if we're in HOMING_REV_TO_ZERO_DEG mode
			if (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006d58:	4b19      	ldr	r3, [pc, #100]	@ (8006dc0 <update_control_loops+0x210>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d017      	beq.n	8006d90 <update_control_loops+0x1e0>
 8006d60:	4b18      	ldr	r3, [pc, #96]	@ (8006dc4 <update_control_loops+0x214>)
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b07      	cmp	r3, #7
 8006d66:	d113      	bne.n	8006d90 <update_control_loops+0x1e0>
				// Skip prismatic phase entirely - go directly to revolute motion
				revolute_axis.trajectory_active = true;
 8006d68:	4b14      	ldr	r3, [pc, #80]	@ (8006dbc <update_control_loops+0x20c>)
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8006d70:	4b19      	ldr	r3, [pc, #100]	@ (8006dd8 <update_control_loops+0x228>)
 8006d72:	2203      	movs	r2, #3
 8006d74:	701a      	strb	r2, [r3, #0]

				// Ensure prismatic stays stationary
				prismatic_axis.trajectory_active = false;
 8006d76:	4b0f      	ldr	r3, [pc, #60]	@ (8006db4 <update_control_loops+0x204>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				prismatic_axis.position = prismatic_encoder.mm;
 8006d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006db0 <update_control_loops+0x200>)
 8006d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d82:	4a0c      	ldr	r2, [pc, #48]	@ (8006db4 <update_control_loops+0x204>)
 8006d84:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = 0.0f;
 8006d86:	4b0b      	ldr	r3, [pc, #44]	@ (8006db4 <update_control_loops+0x204>)
 8006d88:	f04f 0200 	mov.w	r2, #0
 8006d8c:	605a      	str	r2, [r3, #4]
				prismatic_axis.trajectory_active = true;
				revolute_axis.trajectory_active = true;
				motion_sequence_state = MOTION_BOTH_AXES_ACTIVE;
			}
		}
		break;
 8006d8e:	e0f4      	b.n	8006f7a <update_control_loops+0x3ca>
				prismatic_axis.trajectory_active = true;
 8006d90:	4b08      	ldr	r3, [pc, #32]	@ (8006db4 <update_control_loops+0x204>)
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				revolute_axis.trajectory_active = true;
 8006d98:	4b08      	ldr	r3, [pc, #32]	@ (8006dbc <update_control_loops+0x20c>)
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_BOTH_AXES_ACTIVE;
 8006da0:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd8 <update_control_loops+0x228>)
 8006da2:	2204      	movs	r2, #4
 8006da4:	701a      	strb	r2, [r3, #0]
		break;
 8006da6:	e0e8      	b.n	8006f7a <update_control_loops+0x3ca>
 8006da8:	20000728 	.word	0x20000728
 8006dac:	20000578 	.word	0x20000578
 8006db0:	200006cc 	.word	0x200006cc
 8006db4:	20000480 	.word	0x20000480
 8006db8:	20000ac0 	.word	0x20000ac0
 8006dbc:	200004c4 	.word	0x200004c4
 8006dc0:	20000567 	.word	0x20000567
 8006dc4:	20000566 	.word	0x20000566
 8006dc8:	44fa0000 	.word	0x44fa0000
 8006dcc:	20000634 	.word	0x20000634
 8006dd0:	20000680 	.word	0x20000680
 8006dd4:	20000611 	.word	0x20000611
 8006dd8:	20000508 	.word	0x20000508
 8006ddc:	20000335 	.word	0x20000335
 8006de0:	00000000 	.word	0x00000000
 8006de4:	20000610 	.word	0x20000610
 8006de8:	43480000 	.word	0x43480000
 8006dec:	42b40000 	.word	0x42b40000
 8006df0:	2000055c 	.word	0x2000055c

	case MOTION_BOTH_AXES_ACTIVE:
	        {
	            bool pris_finished = true;  // Default to true for homing case
 8006df4:	2301      	movs	r3, #1
 8006df6:	71fb      	strb	r3, [r7, #7]
	            bool rev_finished = false;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	71bb      	strb	r3, [r7, #6]

	            // Handle prismatic axis (skip if in homing mode)
	            if (!(homing_active && homing_state == HOMING_REV_TO_ZERO_DEG)) {
 8006dfc:	4b6d      	ldr	r3, [pc, #436]	@ (8006fb4 <update_control_loops+0x404>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	f083 0301 	eor.w	r3, r3, #1
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d103      	bne.n	8006e12 <update_control_loops+0x262>
 8006e0a:	4b6b      	ldr	r3, [pc, #428]	@ (8006fb8 <update_control_loops+0x408>)
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	2b07      	cmp	r3, #7
 8006e10:	d048      	beq.n	8006ea4 <update_control_loops+0x2f4>
	                if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8006e12:	4b6a      	ldr	r3, [pc, #424]	@ (8006fbc <update_control_loops+0x40c>)
 8006e14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d043      	beq.n	8006ea4 <update_control_loops+0x2f4>
 8006e1c:	4b68      	ldr	r3, [pc, #416]	@ (8006fc0 <update_control_loops+0x410>)
 8006e1e:	7c1b      	ldrb	r3, [r3, #16]
 8006e20:	f083 0301 	eor.w	r3, r3, #1
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d03c      	beq.n	8006ea4 <update_control_loops+0x2f4>
	                    Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006e2a:	4b64      	ldr	r3, [pc, #400]	@ (8006fbc <update_control_loops+0x40c>)
 8006e2c:	ed93 8a03 	vldr	s16, [r3, #12]
 8006e30:	4b62      	ldr	r3, [pc, #392]	@ (8006fbc <update_control_loops+0x40c>)
 8006e32:	edd3 8a04 	vldr	s17, [r3, #16]
	                            prismatic_axis.initial_pos, prismatic_axis.target_pos,
	                            ZGX45RGG_400RPM_Constant.traject_sd_max,
 8006e36:	4b63      	ldr	r3, [pc, #396]	@ (8006fc4 <update_control_loops+0x414>)
 8006e38:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
	                    Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	4619      	mov	r1, r3
 8006e40:	f7f9 fe88 	bl	8000b54 <__aeabi_d2f>
 8006e44:	4604      	mov	r4, r0
	                            ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8006e46:	4b5f      	ldr	r3, [pc, #380]	@ (8006fc4 <update_control_loops+0x414>)
 8006e48:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
	                    Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	4619      	mov	r1, r3
 8006e50:	f7f9 fe80 	bl	8000b54 <__aeabi_d2f>
 8006e54:	4603      	mov	r3, r0
 8006e56:	ee01 3a90 	vmov	s3, r3
 8006e5a:	ee01 4a10 	vmov	s2, r4
 8006e5e:	eef0 0a68 	vmov.f32	s1, s17
 8006e62:	eeb0 0a48 	vmov.f32	s0, s16
 8006e66:	4956      	ldr	r1, [pc, #344]	@ (8006fc0 <update_control_loops+0x410>)
 8006e68:	4857      	ldr	r0, [pc, #348]	@ (8006fc8 <update_control_loops+0x418>)
 8006e6a:	f7fd fb39 	bl	80044e0 <Trapezoidal_Evaluated>

	                    prismatic_axis.position = prisEva.setposition;
 8006e6e:	4b54      	ldr	r3, [pc, #336]	@ (8006fc0 <update_control_loops+0x410>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a52      	ldr	r2, [pc, #328]	@ (8006fbc <update_control_loops+0x40c>)
 8006e74:	6013      	str	r3, [r2, #0]
	                    prismatic_axis.velocity = prisEva.setvelocity;
 8006e76:	4b52      	ldr	r3, [pc, #328]	@ (8006fc0 <update_control_loops+0x410>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	4a50      	ldr	r2, [pc, #320]	@ (8006fbc <update_control_loops+0x40c>)
 8006e7c:	6053      	str	r3, [r2, #4]
	                    pris_finished = prisEva.isFinised;
 8006e7e:	4b50      	ldr	r3, [pc, #320]	@ (8006fc0 <update_control_loops+0x410>)
 8006e80:	7c1b      	ldrb	r3, [r3, #16]
 8006e82:	71fb      	strb	r3, [r7, #7]

	                    if (prisEva.isFinised) {
 8006e84:	4b4e      	ldr	r3, [pc, #312]	@ (8006fc0 <update_control_loops+0x410>)
 8006e86:	7c1b      	ldrb	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00b      	beq.n	8006ea4 <update_control_loops+0x2f4>
	                        prismatic_axis.trajectory_active = false;
 8006e8c:	4b4b      	ldr	r3, [pc, #300]	@ (8006fbc <update_control_loops+0x40c>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	                        prismatic_axis.position = prisEva.setposition;
 8006e94:	4b4a      	ldr	r3, [pc, #296]	@ (8006fc0 <update_control_loops+0x410>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a48      	ldr	r2, [pc, #288]	@ (8006fbc <update_control_loops+0x40c>)
 8006e9a:	6013      	str	r3, [r2, #0]
	                        prismatic_axis.velocity = 0.0f;
 8006e9c:	4b47      	ldr	r3, [pc, #284]	@ (8006fbc <update_control_loops+0x40c>)
 8006e9e:	f04f 0200 	mov.w	r2, #0
 8006ea2:	605a      	str	r2, [r3, #4]
	                    }
	                }
	            }

	            // Handle revolute axis
	            if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8006ea4:	4b49      	ldr	r3, [pc, #292]	@ (8006fcc <update_control_loops+0x41c>)
 8006ea6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d043      	beq.n	8006f36 <update_control_loops+0x386>
 8006eae:	4b48      	ldr	r3, [pc, #288]	@ (8006fd0 <update_control_loops+0x420>)
 8006eb0:	7c1b      	ldrb	r3, [r3, #16]
 8006eb2:	f083 0301 	eor.w	r3, r3, #1
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d03c      	beq.n	8006f36 <update_control_loops+0x386>
	                Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006ebc:	4b43      	ldr	r3, [pc, #268]	@ (8006fcc <update_control_loops+0x41c>)
 8006ebe:	ed93 8a03 	vldr	s16, [r3, #12]
 8006ec2:	4b42      	ldr	r3, [pc, #264]	@ (8006fcc <update_control_loops+0x41c>)
 8006ec4:	edd3 8a04 	vldr	s17, [r3, #16]
	                        revolute_axis.target_pos,
	                        ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006ec8:	4b42      	ldr	r3, [pc, #264]	@ (8006fd4 <update_control_loops+0x424>)
 8006eca:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
	                Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006ece:	4610      	mov	r0, r2
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	f7f9 fe3f 	bl	8000b54 <__aeabi_d2f>
 8006ed6:	4604      	mov	r4, r0
	                        ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8006fd4 <update_control_loops+0x424>)
 8006eda:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
	                Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006ede:	4610      	mov	r0, r2
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	f7f9 fe37 	bl	8000b54 <__aeabi_d2f>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	ee01 3a90 	vmov	s3, r3
 8006eec:	ee01 4a10 	vmov	s2, r4
 8006ef0:	eef0 0a68 	vmov.f32	s1, s17
 8006ef4:	eeb0 0a48 	vmov.f32	s0, s16
 8006ef8:	4935      	ldr	r1, [pc, #212]	@ (8006fd0 <update_control_loops+0x420>)
 8006efa:	4837      	ldr	r0, [pc, #220]	@ (8006fd8 <update_control_loops+0x428>)
 8006efc:	f7fd faf0 	bl	80044e0 <Trapezoidal_Evaluated>

	                revolute_axis.position = revEva.setposition;
 8006f00:	4b33      	ldr	r3, [pc, #204]	@ (8006fd0 <update_control_loops+0x420>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a31      	ldr	r2, [pc, #196]	@ (8006fcc <update_control_loops+0x41c>)
 8006f06:	6013      	str	r3, [r2, #0]
	                revolute_axis.velocity = revEva.setvelocity;
 8006f08:	4b31      	ldr	r3, [pc, #196]	@ (8006fd0 <update_control_loops+0x420>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	4a2f      	ldr	r2, [pc, #188]	@ (8006fcc <update_control_loops+0x41c>)
 8006f0e:	6053      	str	r3, [r2, #4]
	                rev_finished = revEva.isFinised;
 8006f10:	4b2f      	ldr	r3, [pc, #188]	@ (8006fd0 <update_control_loops+0x420>)
 8006f12:	7c1b      	ldrb	r3, [r3, #16]
 8006f14:	71bb      	strb	r3, [r7, #6]

	                if (revEva.isFinised) {
 8006f16:	4b2e      	ldr	r3, [pc, #184]	@ (8006fd0 <update_control_loops+0x420>)
 8006f18:	7c1b      	ldrb	r3, [r3, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00b      	beq.n	8006f36 <update_control_loops+0x386>
	                    revolute_axis.trajectory_active = false;
 8006f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8006fcc <update_control_loops+0x41c>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	                    revolute_axis.position = revEva.setposition;
 8006f26:	4b2a      	ldr	r3, [pc, #168]	@ (8006fd0 <update_control_loops+0x420>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a28      	ldr	r2, [pc, #160]	@ (8006fcc <update_control_loops+0x41c>)
 8006f2c:	6013      	str	r3, [r2, #0]
	                    revolute_axis.velocity = 0.0f;
 8006f2e:	4b27      	ldr	r3, [pc, #156]	@ (8006fcc <update_control_loops+0x41c>)
 8006f30:	f04f 0200 	mov.w	r2, #0
 8006f34:	605a      	str	r2, [r3, #4]
	                }
	            }

	            // Check if BOTH axes are finished (or only revolute for homing)
	            if (pris_finished && rev_finished) {
 8006f36:	79fb      	ldrb	r3, [r7, #7]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d020      	beq.n	8006f7e <update_control_loops+0x3ce>
 8006f3c:	79bb      	ldrb	r3, [r7, #6]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d01d      	beq.n	8006f7e <update_control_loops+0x3ce>
	                motion_delay_timer = 0;
 8006f42:	4b26      	ldr	r3, [pc, #152]	@ (8006fdc <update_control_loops+0x42c>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]
	                motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8006f48:	4b25      	ldr	r3, [pc, #148]	@ (8006fe0 <update_control_loops+0x430>)
 8006f4a:	2205      	movs	r2, #5
 8006f4c:	701a      	strb	r2, [r3, #0]
	            }
	        }
	        break;
 8006f4e:	e016      	b.n	8006f7e <update_control_loops+0x3ce>

	case MOTION_PEN_DOWN_DELAY:
		if (++motion_delay_timer >= 1500) {
 8006f50:	4b22      	ldr	r3, [pc, #136]	@ (8006fdc <update_control_loops+0x42c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3301      	adds	r3, #1
 8006f56:	4a21      	ldr	r2, [pc, #132]	@ (8006fdc <update_control_loops+0x42c>)
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d90f      	bls.n	8006f82 <update_control_loops+0x3d2>
			plotter_pen_down();
 8006f62:	f002 fa19 	bl	8009398 <plotter_pen_down>
			motion_sequence_state = MOTION_COMPLETE;
 8006f66:	4b1e      	ldr	r3, [pc, #120]	@ (8006fe0 <update_control_loops+0x430>)
 8006f68:	2206      	movs	r2, #6
 8006f6a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006f6c:	e009      	b.n	8006f82 <update_control_loops+0x3d2>

	case MOTION_COMPLETE:
		motion_sequence_state = MOTION_IDLE;
 8006f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006fe0 <update_control_loops+0x430>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	701a      	strb	r2, [r3, #0]
		break;
 8006f74:	e006      	b.n	8006f84 <update_control_loops+0x3d4>

	default:
		break;
 8006f76:	bf00      	nop
 8006f78:	e004      	b.n	8006f84 <update_control_loops+0x3d4>
		break;
 8006f7a:	bf00      	nop
 8006f7c:	e002      	b.n	8006f84 <update_control_loops+0x3d4>
	        break;
 8006f7e:	bf00      	nop
 8006f80:	e000      	b.n	8006f84 <update_control_loops+0x3d4>
		break;
 8006f82:	bf00      	nop
	}

	prismatic_axis.mm = prismatic_encoder.mm;
 8006f84:	4b17      	ldr	r3, [pc, #92]	@ (8006fe4 <update_control_loops+0x434>)
 8006f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f88:	4a0c      	ldr	r2, [pc, #48]	@ (8006fbc <update_control_loops+0x40c>)
 8006f8a:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006f8c:	4b16      	ldr	r3, [pc, #88]	@ (8006fe8 <update_control_loops+0x438>)
 8006f8e:	edd3 7a00 	vldr	s15, [r3]
 8006f92:	220e      	movs	r2, #14
 8006f94:	210f      	movs	r1, #15
 8006f96:	eeb0 0a67 	vmov.f32	s0, s15
 8006f9a:	4814      	ldr	r0, [pc, #80]	@ (8006fec <update_control_loops+0x43c>)
 8006f9c:	f7fd fe38 	bl	8004c10 <UnitConverter_angle>
 8006fa0:	eef0 7a40 	vmov.f32	s15, s0
 8006fa4:	4b09      	ldr	r3, [pc, #36]	@ (8006fcc <update_control_loops+0x41c>)
 8006fa6:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	ecbd 8b02 	vpop	{d8}
 8006fb2:	bd90      	pop	{r4, r7, pc}
 8006fb4:	20000567 	.word	0x20000567
 8006fb8:	20000566 	.word	0x20000566
 8006fbc:	20000480 	.word	0x20000480
 8006fc0:	20000534 	.word	0x20000534
 8006fc4:	20000080 	.word	0x20000080
 8006fc8:	2000050c 	.word	0x2000050c
 8006fcc:	200004c4 	.word	0x200004c4
 8006fd0:	20000548 	.word	0x20000548
 8006fd4:	20000000 	.word	0x20000000
 8006fd8:	20000520 	.word	0x20000520
 8006fdc:	2000055c 	.word	0x2000055c
 8006fe0:	20000508 	.word	0x20000508
 8006fe4:	200006cc 	.word	0x200006cc
 8006fe8:	20000578 	.word	0x20000578
 8006fec:	20000ac0 	.word	0x20000ac0

08006ff0 <check_emergency_button>:

void check_emergency_button(void) {
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
	// Read current state of emergency button
	bool emer_pressed = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8006ff6:	2110      	movs	r1, #16
 8006ff8:	480c      	ldr	r0, [pc, #48]	@ (800702c <check_emergency_button+0x3c>)
 8006ffa:	f005 fcfd 	bl	800c9f8 <HAL_GPIO_ReadPin>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	bf14      	ite	ne
 8007004:	2301      	movne	r3, #1
 8007006:	2300      	moveq	r3, #0
 8007008:	71fb      	strb	r3, [r7, #7]
	// If emergency button is pressed (assuming active high)
	// Adjust the logic based on your hardware:
	// - If button is active HIGH when pressed: use == GPIO_PIN_SET
	// - If button is active LOW when pressed: use == GPIO_PIN_RESET

	if (emer_pressed == GPIO_PIN_RESET) {  // Assuming active high
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	f083 0301 	eor.w	r3, r3, #1
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d005      	beq.n	8007022 <check_emergency_button+0x32>
		// Emergency button is pressed - trigger hardware emergency
		if (safety_state != SAFETY_HARDWARE_EMERGENCY) {
 8007016:	4b06      	ldr	r3, [pc, #24]	@ (8007030 <check_emergency_button+0x40>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	2b02      	cmp	r3, #2
 800701c:	d001      	beq.n	8007022 <check_emergency_button+0x32>
			trigger_hardware_emergency();
 800701e:	f000 f877 	bl	8007110 <trigger_hardware_emergency>
	 // Auto-clear emergency when button released (NOT RECOMMENDED)
	 // clear_emergency_state();
	 }
	 }
	 */
}
 8007022:	bf00      	nop
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	48000400 	.word	0x48000400
 8007030:	20000568 	.word	0x20000568

08007034 <check_safety_conditions>:

void check_safety_conditions(void) {
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
	if (tuning_mode || safety_state != SAFETY_NORMAL || homing_active)
 8007038:	4b16      	ldr	r3, [pc, #88]	@ (8007094 <check_safety_conditions+0x60>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d127      	bne.n	8007090 <check_safety_conditions+0x5c>
 8007040:	4b15      	ldr	r3, [pc, #84]	@ (8007098 <check_safety_conditions+0x64>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d123      	bne.n	8007090 <check_safety_conditions+0x5c>
 8007048:	4b14      	ldr	r3, [pc, #80]	@ (800709c <check_safety_conditions+0x68>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d11f      	bne.n	8007090 <check_safety_conditions+0x5c>
		return;

	if (up_photo && prismatic_axis.command_pos < 0.0f) {
 8007050:	4b13      	ldr	r3, [pc, #76]	@ (80070a0 <check_safety_conditions+0x6c>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <check_safety_conditions+0x3c>
 800705a:	4b12      	ldr	r3, [pc, #72]	@ (80070a4 <check_safety_conditions+0x70>)
 800705c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007060:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007068:	d502      	bpl.n	8007070 <check_safety_conditions+0x3c>
		trigger_software_emergency();
 800706a:	f000 f81f 	bl	80070ac <trigger_software_emergency>
		return;
 800706e:	e010      	b.n	8007092 <check_safety_conditions+0x5e>
	}

	if (low_photo && prismatic_axis.command_pos > 0.0f) {
 8007070:	4b0d      	ldr	r3, [pc, #52]	@ (80070a8 <check_safety_conditions+0x74>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00b      	beq.n	8007092 <check_safety_conditions+0x5e>
 800707a:	4b0a      	ldr	r3, [pc, #40]	@ (80070a4 <check_safety_conditions+0x70>)
 800707c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007080:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007088:	dd03      	ble.n	8007092 <check_safety_conditions+0x5e>
		trigger_software_emergency();
 800708a:	f000 f80f 	bl	80070ac <trigger_software_emergency>
		return;
 800708e:	e000      	b.n	8007092 <check_safety_conditions+0x5e>
		return;
 8007090:	bf00      	nop
	}
}
 8007092:	bd80      	pop	{r7, pc}
 8007094:	20000334 	.word	0x20000334
 8007098:	20000568 	.word	0x20000568
 800709c:	20000567 	.word	0x20000567
 80070a0:	20000564 	.word	0x20000564
 80070a4:	20000480 	.word	0x20000480
 80070a8:	20000565 	.word	0x20000565

080070ac <trigger_software_emergency>:

void trigger_software_emergency(void) {
 80070ac:	b580      	push	{r7, lr}
 80070ae:	af00      	add	r7, sp, #0
	if (safety_state == SAFETY_NORMAL) {
 80070b0:	4b10      	ldr	r3, [pc, #64]	@ (80070f4 <trigger_software_emergency+0x48>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d11b      	bne.n	80070f0 <trigger_software_emergency+0x44>
		safety_state = SAFETY_SOFTWARE_EMERGENCY;
 80070b8:	4b0e      	ldr	r3, [pc, #56]	@ (80070f4 <trigger_software_emergency+0x48>)
 80070ba:	2201      	movs	r2, #1
 80070bc:	701a      	strb	r2, [r3, #0]
		emergency_stop_all_motors();
 80070be:	f000 f88f 	bl	80071e0 <emergency_stop_all_motors>
		safety_toggle_timer = 0;
 80070c2:	4b0d      	ldr	r3, [pc, #52]	@ (80070f8 <trigger_software_emergency+0x4c>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]
		pilot_light_state = false;
 80070c8:	4b0c      	ldr	r3, [pc, #48]	@ (80070fc <trigger_software_emergency+0x50>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 80070ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007100 <trigger_software_emergency+0x54>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 80070d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007104 <trigger_software_emergency+0x58>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 80070dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007108 <trigger_software_emergency+0x5c>)
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		// Exit joy mode if active
		if (joy_mode_active) {
 80070e4:	4b09      	ldr	r3, [pc, #36]	@ (800710c <trigger_software_emergency+0x60>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <trigger_software_emergency+0x44>
			exit_joy_mode();
 80070ec:	f000 f9c2 	bl	8007474 <exit_joy_mode>
		}
	}
}
 80070f0:	bf00      	nop
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	20000568 	.word	0x20000568
 80070f8:	2000056c 	.word	0x2000056c
 80070fc:	20000570 	.word	0x20000570
 8007100:	20000508 	.word	0x20000508
 8007104:	20000480 	.word	0x20000480
 8007108:	200004c4 	.word	0x200004c4
 800710c:	20000581 	.word	0x20000581

08007110 <trigger_hardware_emergency>:

void trigger_hardware_emergency(void) {
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
	safety_state = SAFETY_HARDWARE_EMERGENCY;
 8007114:	4b13      	ldr	r3, [pc, #76]	@ (8007164 <trigger_hardware_emergency+0x54>)
 8007116:	2202      	movs	r2, #2
 8007118:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = true;
 800711a:	4b13      	ldr	r3, [pc, #76]	@ (8007168 <trigger_hardware_emergency+0x58>)
 800711c:	2201      	movs	r2, #1
 800711e:	701a      	strb	r2, [r3, #0]
	emergency_stop_all_motors();
 8007120:	f000 f85e 	bl	80071e0 <emergency_stop_all_motors>
	safety_toggle_timer = 0;
 8007124:	4b11      	ldr	r3, [pc, #68]	@ (800716c <trigger_hardware_emergency+0x5c>)
 8007126:	2200      	movs	r2, #0
 8007128:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 800712a:	4b11      	ldr	r3, [pc, #68]	@ (8007170 <trigger_hardware_emergency+0x60>)
 800712c:	2200      	movs	r2, #0
 800712e:	701a      	strb	r2, [r3, #0]
	homing_active = false;
 8007130:	4b10      	ldr	r3, [pc, #64]	@ (8007174 <trigger_hardware_emergency+0x64>)
 8007132:	2200      	movs	r2, #0
 8007134:	701a      	strb	r2, [r3, #0]
	homing_state = HOMING_IDLE;
 8007136:	4b10      	ldr	r3, [pc, #64]	@ (8007178 <trigger_hardware_emergency+0x68>)
 8007138:	2200      	movs	r2, #0
 800713a:	701a      	strb	r2, [r3, #0]
	motion_sequence_state = MOTION_IDLE;
 800713c:	4b0f      	ldr	r3, [pc, #60]	@ (800717c <trigger_hardware_emergency+0x6c>)
 800713e:	2200      	movs	r2, #0
 8007140:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8007142:	4b0f      	ldr	r3, [pc, #60]	@ (8007180 <trigger_hardware_emergency+0x70>)
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 800714a:	4b0e      	ldr	r3, [pc, #56]	@ (8007184 <trigger_hardware_emergency+0x74>)
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Exit joy mode if active
	if (joy_mode_active) {
 8007152:	4b0d      	ldr	r3, [pc, #52]	@ (8007188 <trigger_hardware_emergency+0x78>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <trigger_hardware_emergency+0x4e>
		exit_joy_mode();
 800715a:	f000 f98b 	bl	8007474 <exit_joy_mode>
	}
}
 800715e:	bf00      	nop
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20000568 	.word	0x20000568
 8007168:	20000571 	.word	0x20000571
 800716c:	2000056c 	.word	0x2000056c
 8007170:	20000570 	.word	0x20000570
 8007174:	20000567 	.word	0x20000567
 8007178:	20000566 	.word	0x20000566
 800717c:	20000508 	.word	0x20000508
 8007180:	20000480 	.word	0x20000480
 8007184:	200004c4 	.word	0x200004c4
 8007188:	20000581 	.word	0x20000581

0800718c <clear_emergency_state>:

void clear_emergency_state(void) {
 800718c:	b580      	push	{r7, lr}
 800718e:	af00      	add	r7, sp, #0
	safety_state = SAFETY_NORMAL;
 8007190:	4b0d      	ldr	r3, [pc, #52]	@ (80071c8 <clear_emergency_state+0x3c>)
 8007192:	2200      	movs	r2, #0
 8007194:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8007196:	4b0d      	ldr	r3, [pc, #52]	@ (80071cc <clear_emergency_state+0x40>)
 8007198:	2200      	movs	r2, #0
 800719a:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 800719c:	4b0c      	ldr	r3, [pc, #48]	@ (80071d0 <clear_emergency_state+0x44>)
 800719e:	2200      	movs	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 80071a2:	4b0c      	ldr	r3, [pc, #48]	@ (80071d4 <clear_emergency_state+0x48>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 80071a8:	2200      	movs	r2, #0
 80071aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80071ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80071b2:	f005 fc39 	bl	800ca28 <HAL_GPIO_WritePin>
	up_photo = false;
 80071b6:	4b08      	ldr	r3, [pc, #32]	@ (80071d8 <clear_emergency_state+0x4c>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	701a      	strb	r2, [r3, #0]
	low_photo = false;
 80071bc:	4b07      	ldr	r3, [pc, #28]	@ (80071dc <clear_emergency_state+0x50>)
 80071be:	2200      	movs	r2, #0
 80071c0:	701a      	strb	r2, [r3, #0]
}
 80071c2:	bf00      	nop
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20000568 	.word	0x20000568
 80071cc:	20000571 	.word	0x20000571
 80071d0:	2000056c 	.word	0x2000056c
 80071d4:	20000570 	.word	0x20000570
 80071d8:	20000564 	.word	0x20000564
 80071dc:	20000565 	.word	0x20000565

080071e0 <emergency_stop_all_motors>:

void emergency_stop_all_motors(void) {
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
	MDXX_set_range(&prismatic_motor, 2000, 0);
 80071e4:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8007244 <emergency_stop_all_motors+0x64>
 80071e8:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8007248 <emergency_stop_all_motors+0x68>
 80071ec:	4817      	ldr	r0, [pc, #92]	@ (800724c <emergency_stop_all_motors+0x6c>)
 80071ee:	f7fa f8eb 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 80071f2:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8007244 <emergency_stop_all_motors+0x64>
 80071f6:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8007248 <emergency_stop_all_motors+0x68>
 80071fa:	4815      	ldr	r0, [pc, #84]	@ (8007250 <emergency_stop_all_motors+0x70>)
 80071fc:	f7fa f8e4 	bl	80013c8 <MDXX_set_range>

	prismatic_axis.command_pos = 0.0f;
 8007200:	4b14      	ldr	r3, [pc, #80]	@ (8007254 <emergency_stop_all_motors+0x74>)
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8007208:	4b13      	ldr	r3, [pc, #76]	@ (8007258 <emergency_stop_all_motors+0x78>)
 800720a:	f04f 0200 	mov.w	r2, #0
 800720e:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8007210:	4b10      	ldr	r3, [pc, #64]	@ (8007254 <emergency_stop_all_motors+0x74>)
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007218:	4b0f      	ldr	r3, [pc, #60]	@ (8007258 <emergency_stop_all_motors+0x78>)
 800721a:	f04f 0200 	mov.w	r2, #0
 800721e:	629a      	str	r2, [r3, #40]	@ 0x28

	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8007220:	480e      	ldr	r0, [pc, #56]	@ (800725c <emergency_stop_all_motors+0x7c>)
 8007222:	f7fa f88b 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8007226:	480e      	ldr	r0, [pc, #56]	@ (8007260 <emergency_stop_all_motors+0x80>)
 8007228:	f7fa f888 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 800722c:	480d      	ldr	r0, [pc, #52]	@ (8007264 <emergency_stop_all_motors+0x84>)
 800722e:	f7fa f885 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007232:	480d      	ldr	r0, [pc, #52]	@ (8007268 <emergency_stop_all_motors+0x88>)
 8007234:	f7fa f882 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007238:	480b      	ldr	r0, [pc, #44]	@ (8007268 <emergency_stop_all_motors+0x88>)
 800723a:	f7fa f87f 	bl	800133c <PID_CONTROLLER_Reset>
}
 800723e:	bf00      	nop
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	00000000 	.word	0x00000000
 8007248:	44fa0000 	.word	0x44fa0000
 800724c:	20000634 	.word	0x20000634
 8007250:	20000680 	.word	0x20000680
 8007254:	20000480 	.word	0x20000480
 8007258:	200004c4 	.word	0x200004c4
 800725c:	20000784 	.word	0x20000784
 8007260:	200007ac 	.word	0x200007ac
 8007264:	200007d4 	.word	0x200007d4
 8007268:	200007fc 	.word	0x200007fc

0800726c <update_safety_system>:

void update_safety_system(void) {
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
	// Don't control pilot light if joy mode is active
	if (joy_mode_active) {
 8007270:	4b3a      	ldr	r3, [pc, #232]	@ (800735c <update_safety_system+0xf0>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d16e      	bne.n	8007356 <update_safety_system+0xea>
		return; // Let joy mode handle pilot light
	}

	if (safety_state == SAFETY_SOFTWARE_EMERGENCY) {
 8007278:	4b39      	ldr	r3, [pc, #228]	@ (8007360 <update_safety_system+0xf4>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d11f      	bne.n	80072c0 <update_safety_system+0x54>
		if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8007280:	4b38      	ldr	r3, [pc, #224]	@ (8007364 <update_safety_system+0xf8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3301      	adds	r3, #1
 8007286:	4a37      	ldr	r2, [pc, #220]	@ (8007364 <update_safety_system+0xf8>)
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	2bf9      	cmp	r3, #249	@ 0xf9
 800728c:	d918      	bls.n	80072c0 <update_safety_system+0x54>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 800728e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007292:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007296:	f005 fbdf 	bl	800ca58 <HAL_GPIO_TogglePin>
			pilot_light_state = !pilot_light_state;
 800729a:	4b33      	ldr	r3, [pc, #204]	@ (8007368 <update_safety_system+0xfc>)
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	bf14      	ite	ne
 80072a4:	2301      	movne	r3, #1
 80072a6:	2300      	moveq	r3, #0
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	f083 0301 	eor.w	r3, r3, #1
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	4b2c      	ldr	r3, [pc, #176]	@ (8007368 <update_safety_system+0xfc>)
 80072b8:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 80072ba:	4b2a      	ldr	r3, [pc, #168]	@ (8007364 <update_safety_system+0xf8>)
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_HARDWARE_EMERGENCY) {
 80072c0:	4b27      	ldr	r3, [pc, #156]	@ (8007360 <update_safety_system+0xf4>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d134      	bne.n	8007332 <update_safety_system+0xc6>
		if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_SET) {
 80072c8:	2110      	movs	r1, #16
 80072ca:	4828      	ldr	r0, [pc, #160]	@ (800736c <update_safety_system+0x100>)
 80072cc:	f005 fb94 	bl	800c9f8 <HAL_GPIO_ReadPin>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d120      	bne.n	8007318 <update_safety_system+0xac>
			if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 80072d6:	4b23      	ldr	r3, [pc, #140]	@ (8007364 <update_safety_system+0xf8>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3301      	adds	r3, #1
 80072dc:	4a21      	ldr	r2, [pc, #132]	@ (8007364 <update_safety_system+0xf8>)
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	2bf9      	cmp	r3, #249	@ 0xf9
 80072e2:	d926      	bls.n	8007332 <update_safety_system+0xc6>
				HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 80072e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80072e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80072ec:	f005 fbb4 	bl	800ca58 <HAL_GPIO_TogglePin>
				pilot_light_state = !pilot_light_state;
 80072f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007368 <update_safety_system+0xfc>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	bf14      	ite	ne
 80072fa:	2301      	movne	r3, #1
 80072fc:	2300      	moveq	r3, #0
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	f083 0301 	eor.w	r3, r3, #1
 8007304:	b2db      	uxtb	r3, r3
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	b2da      	uxtb	r2, r3
 800730c:	4b16      	ldr	r3, [pc, #88]	@ (8007368 <update_safety_system+0xfc>)
 800730e:	701a      	strb	r2, [r3, #0]
				safety_toggle_timer = 0;
 8007310:	4b14      	ldr	r3, [pc, #80]	@ (8007364 <update_safety_system+0xf8>)
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]
 8007316:	e00c      	b.n	8007332 <update_safety_system+0xc6>
			}
		} else {
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007318:	2200      	movs	r2, #0
 800731a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800731e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007322:	f005 fb81 	bl	800ca28 <HAL_GPIO_WritePin>
			pilot_light_state = false;
 8007326:	4b10      	ldr	r3, [pc, #64]	@ (8007368 <update_safety_system+0xfc>)
 8007328:	2200      	movs	r2, #0
 800732a:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 800732c:	4b0d      	ldr	r3, [pc, #52]	@ (8007364 <update_safety_system+0xf8>)
 800732e:	2200      	movs	r2, #0
 8007330:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_NORMAL) {
 8007332:	4b0b      	ldr	r3, [pc, #44]	@ (8007360 <update_safety_system+0xf4>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10e      	bne.n	8007358 <update_safety_system+0xec>
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 800733a:	2200      	movs	r2, #0
 800733c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007344:	f005 fb70 	bl	800ca28 <HAL_GPIO_WritePin>
		pilot_light_state = false;
 8007348:	4b07      	ldr	r3, [pc, #28]	@ (8007368 <update_safety_system+0xfc>)
 800734a:	2200      	movs	r2, #0
 800734c:	701a      	strb	r2, [r3, #0]
		safety_toggle_timer = 0;
 800734e:	4b05      	ldr	r3, [pc, #20]	@ (8007364 <update_safety_system+0xf8>)
 8007350:	2200      	movs	r2, #0
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	e000      	b.n	8007358 <update_safety_system+0xec>
		return; // Let joy mode handle pilot light
 8007356:	bf00      	nop
	}
}
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	20000581 	.word	0x20000581
 8007360:	20000568 	.word	0x20000568
 8007364:	2000056c 	.word	0x2000056c
 8007368:	20000570 	.word	0x20000570
 800736c:	48000400 	.word	0x48000400

08007370 <is_emergency_active>:

bool is_emergency_active(void) {
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
	return (safety_state != SAFETY_NORMAL);
 8007374:	4b05      	ldr	r3, [pc, #20]	@ (800738c <is_emergency_active+0x1c>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	bf14      	ite	ne
 800737c:	2301      	movne	r3, #1
 800737e:	2300      	moveq	r3, #0
 8007380:	b2db      	uxtb	r3, r3
}
 8007382:	4618      	mov	r0, r3
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	20000568 	.word	0x20000568

08007390 <enter_joy_mode>:

void enter_joy_mode(void) {
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 8007394:	f7ff ffec 	bl	8007370 <is_emergency_active>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d14c      	bne.n	8007438 <enter_joy_mode+0xa8>
 800739e:	4b27      	ldr	r3, [pc, #156]	@ (800743c <enter_joy_mode+0xac>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d148      	bne.n	8007438 <enter_joy_mode+0xa8>
 80073a6:	4b26      	ldr	r3, [pc, #152]	@ (8007440 <enter_joy_mode+0xb0>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d144      	bne.n	8007438 <enter_joy_mode+0xa8>
		return;
	}

	joy_mode_active = true;
 80073ae:	4b24      	ldr	r3, [pc, #144]	@ (8007440 <enter_joy_mode+0xb0>)
 80073b0:	2201      	movs	r2, #1
 80073b2:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_INITIAL_CONTROL; // Start in initial control state
 80073b4:	4b23      	ldr	r3, [pc, #140]	@ (8007444 <enter_joy_mode+0xb4>)
 80073b6:	2201      	movs	r2, #1
 80073b8:	701a      	strb	r2, [r3, #0]

	// Reset all joy mode data
	reset_joy_mode_data();
 80073ba:	f000 f9f1 	bl	80077a0 <reset_joy_mode_data>

	// Turn on pilot light to indicate joy mode
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 80073be:	2201      	movs	r2, #1
 80073c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80073c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80073c8:	f005 fb2e 	bl	800ca28 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = true;
 80073cc:	4b1e      	ldr	r3, [pc, #120]	@ (8007448 <enter_joy_mode+0xb8>)
 80073ce:	2201      	movs	r2, #1
 80073d0:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 80073d2:	4b1e      	ldr	r3, [pc, #120]	@ (800744c <enter_joy_mode+0xbc>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]

	// Stop any current motion
	motion_sequence_state = MOTION_IDLE;
 80073d8:	4b1d      	ldr	r3, [pc, #116]	@ (8007450 <enter_joy_mode+0xc0>)
 80073da:	2200      	movs	r2, #0
 80073dc:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 80073de:	4b1d      	ldr	r3, [pc, #116]	@ (8007454 <enter_joy_mode+0xc4>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 80073e6:	4b1c      	ldr	r3, [pc, #112]	@ (8007458 <enter_joy_mode+0xc8>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Initialize position holding at current positions
	prismatic_axis.position = prismatic_encoder.mm;
 80073ee:	4b1b      	ldr	r3, [pc, #108]	@ (800745c <enter_joy_mode+0xcc>)
 80073f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073f2:	4a18      	ldr	r2, [pc, #96]	@ (8007454 <enter_joy_mode+0xc4>)
 80073f4:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 80073f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007460 <enter_joy_mode+0xd0>)
 80073f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fa:	4a17      	ldr	r2, [pc, #92]	@ (8007458 <enter_joy_mode+0xc8>)
 80073fc:	6013      	str	r3, [r2, #0]

	// Reset motor commands
	prismatic_axis.command_pos = 0.0f;
 80073fe:	4b15      	ldr	r3, [pc, #84]	@ (8007454 <enter_joy_mode+0xc4>)
 8007400:	f04f 0200 	mov.w	r2, #0
 8007404:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8007406:	4b14      	ldr	r3, [pc, #80]	@ (8007458 <enter_joy_mode+0xc8>)
 8007408:	f04f 0200 	mov.w	r2, #0
 800740c:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 800740e:	4b11      	ldr	r3, [pc, #68]	@ (8007454 <enter_joy_mode+0xc4>)
 8007410:	f04f 0200 	mov.w	r2, #0
 8007414:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007416:	4b10      	ldr	r3, [pc, #64]	@ (8007458 <enter_joy_mode+0xc8>)
 8007418:	f04f 0200 	mov.w	r2, #0
 800741c:	629a      	str	r2, [r3, #40]	@ 0x28

	// Reset PID controllers
	PID_CONTROLLER_Reset(&prismatic_position_pid);
 800741e:	4811      	ldr	r0, [pc, #68]	@ (8007464 <enter_joy_mode+0xd4>)
 8007420:	f7f9 ff8c 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8007424:	4810      	ldr	r0, [pc, #64]	@ (8007468 <enter_joy_mode+0xd8>)
 8007426:	f7f9 ff89 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 800742a:	4810      	ldr	r0, [pc, #64]	@ (800746c <enter_joy_mode+0xdc>)
 800742c:	f7f9 ff86 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007430:	480f      	ldr	r0, [pc, #60]	@ (8007470 <enter_joy_mode+0xe0>)
 8007432:	f7f9 ff83 	bl	800133c <PID_CONTROLLER_Reset>
 8007436:	e000      	b.n	800743a <enter_joy_mode+0xaa>
		return;
 8007438:	bf00      	nop
}
 800743a:	bd80      	pop	{r7, pc}
 800743c:	20000567 	.word	0x20000567
 8007440:	20000581 	.word	0x20000581
 8007444:	20000580 	.word	0x20000580
 8007448:	200005dc 	.word	0x200005dc
 800744c:	200005d8 	.word	0x200005d8
 8007450:	20000508 	.word	0x20000508
 8007454:	20000480 	.word	0x20000480
 8007458:	200004c4 	.word	0x200004c4
 800745c:	200006cc 	.word	0x200006cc
 8007460:	20000728 	.word	0x20000728
 8007464:	20000784 	.word	0x20000784
 8007468:	200007ac 	.word	0x200007ac
 800746c:	200007d4 	.word	0x200007d4
 8007470:	200007fc 	.word	0x200007fc

08007474 <exit_joy_mode>:

/* Updated exit joy mode to handle cleanup properly */
void exit_joy_mode(void) {
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
	joy_mode_active = false;
 8007478:	4b34      	ldr	r3, [pc, #208]	@ (800754c <exit_joy_mode+0xd8>)
 800747a:	2200      	movs	r2, #0
 800747c:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_IDLE;
 800747e:	4b34      	ldr	r3, [pc, #208]	@ (8007550 <exit_joy_mode+0xdc>)
 8007480:	2200      	movs	r2, #0
 8007482:	701a      	strb	r2, [r3, #0]

	// Reset all data
	reset_joy_mode_data();
 8007484:	f000 f98c 	bl	80077a0 <reset_joy_mode_data>

	// Turn off pilot light
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007488:	2200      	movs	r2, #0
 800748a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800748e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007492:	f005 fac9 	bl	800ca28 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = false;
 8007496:	4b2f      	ldr	r3, [pc, #188]	@ (8007554 <exit_joy_mode+0xe0>)
 8007498:	2200      	movs	r2, #0
 800749a:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 800749c:	4b2e      	ldr	r3, [pc, #184]	@ (8007558 <exit_joy_mode+0xe4>)
 800749e:	2200      	movs	r2, #0
 80074a0:	601a      	str	r2, [r3, #0]

	// DON'T stop motors - hold current position
	// Set current positions as target positions for holding
	prismatic_axis.position = prismatic_encoder.mm;
 80074a2:	4b2e      	ldr	r3, [pc, #184]	@ (800755c <exit_joy_mode+0xe8>)
 80074a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074a6:	4a2e      	ldr	r2, [pc, #184]	@ (8007560 <exit_joy_mode+0xec>)
 80074a8:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 80074aa:	4b2e      	ldr	r3, [pc, #184]	@ (8007564 <exit_joy_mode+0xf0>)
 80074ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ae:	4a2e      	ldr	r2, [pc, #184]	@ (8007568 <exit_joy_mode+0xf4>)
 80074b0:	6013      	str	r3, [r2, #0]

	// Reset velocities and feedforward terms
	prismatic_axis.command_vel = 0.0f;
 80074b2:	4b2b      	ldr	r3, [pc, #172]	@ (8007560 <exit_joy_mode+0xec>)
 80074b4:	f04f 0200 	mov.w	r2, #0
 80074b8:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 80074ba:	4b2b      	ldr	r3, [pc, #172]	@ (8007568 <exit_joy_mode+0xf4>)
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	629a      	str	r2, [r3, #40]	@ 0x28
	prismatic_axis.ffd = 0.0f;
 80074c2:	4b27      	ldr	r3, [pc, #156]	@ (8007560 <exit_joy_mode+0xec>)
 80074c4:	f04f 0200 	mov.w	r2, #0
 80074c8:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_axis.dfd = 0.0f;
 80074ca:	4b25      	ldr	r3, [pc, #148]	@ (8007560 <exit_joy_mode+0xec>)
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	revolute_axis.ffd = 0.0f;
 80074d2:	4b25      	ldr	r3, [pc, #148]	@ (8007568 <exit_joy_mode+0xf4>)
 80074d4:	f04f 0200 	mov.w	r2, #0
 80074d8:	631a      	str	r2, [r3, #48]	@ 0x30

	// Keep DFD for revolute axis (gravity compensation)
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80074da:	4b22      	ldr	r3, [pc, #136]	@ (8007564 <exit_joy_mode+0xf0>)
 80074dc:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80074e0:	4b1e      	ldr	r3, [pc, #120]	@ (800755c <exit_joy_mode+0xe8>)
 80074e2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80074e6:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 800756c <exit_joy_mode+0xf8>
 80074ea:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80074ee:	eef0 0a66 	vmov.f32	s1, s13
 80074f2:	eeb0 0a47 	vmov.f32	s0, s14
 80074f6:	481e      	ldr	r0, [pc, #120]	@ (8007570 <exit_joy_mode+0xfc>)
 80074f8:	f7fa f8e1 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 80074fc:	eef0 7a40 	vmov.f32	s15, s0
 8007500:	4b19      	ldr	r3, [pc, #100]	@ (8007568 <exit_joy_mode+0xf4>)
 8007502:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Reset PID controllers
	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8007506:	481b      	ldr	r0, [pc, #108]	@ (8007574 <exit_joy_mode+0x100>)
 8007508:	f7f9 ff18 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 800750c:	481a      	ldr	r0, [pc, #104]	@ (8007578 <exit_joy_mode+0x104>)
 800750e:	f7f9 ff15 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8007512:	481a      	ldr	r0, [pc, #104]	@ (800757c <exit_joy_mode+0x108>)
 8007514:	f7f9 ff12 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007518:	4819      	ldr	r0, [pc, #100]	@ (8007580 <exit_joy_mode+0x10c>)
 800751a:	f7f9 ff0f 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 800751e:	4818      	ldr	r0, [pc, #96]	@ (8007580 <exit_joy_mode+0x10c>)
 8007520:	f7f9 ff0c 	bl	800133c <PID_CONTROLLER_Reset>

	// Reset motion state
	motion_sequence_state = MOTION_IDLE;
 8007524:	4b17      	ldr	r3, [pc, #92]	@ (8007584 <exit_joy_mode+0x110>)
 8007526:	2200      	movs	r2, #0
 8007528:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 800752a:	4b0d      	ldr	r3, [pc, #52]	@ (8007560 <exit_joy_mode+0xec>)
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8007532:	4b0d      	ldr	r3, [pc, #52]	@ (8007568 <exit_joy_mode+0xf4>)
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	//modbus reset state
	registerFrame[BaseSystem_Status].U16 = 0;
 800753a:	4b13      	ldr	r3, [pc, #76]	@ (8007588 <exit_joy_mode+0x114>)
 800753c:	2200      	movs	r2, #0
 800753e:	805a      	strh	r2, [r3, #2]
	registerFrame[R_Theta_Status].U16 = 0;
 8007540:	4b11      	ldr	r3, [pc, #68]	@ (8007588 <exit_joy_mode+0x114>)
 8007542:	2200      	movs	r2, #0
 8007544:	841a      	strh	r2, [r3, #32]
}
 8007546:	bf00      	nop
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20000581 	.word	0x20000581
 8007550:	20000580 	.word	0x20000580
 8007554:	200005dc 	.word	0x200005dc
 8007558:	200005d8 	.word	0x200005d8
 800755c:	200006cc 	.word	0x200006cc
 8007560:	20000480 	.word	0x20000480
 8007564:	20000728 	.word	0x20000728
 8007568:	200004c4 	.word	0x200004c4
 800756c:	447a0000 	.word	0x447a0000
 8007570:	2000085c 	.word	0x2000085c
 8007574:	20000784 	.word	0x20000784
 8007578:	200007ac 	.word	0x200007ac
 800757c:	200007d4 	.word	0x200007d4
 8007580:	200007fc 	.word	0x200007fc
 8007584:	20000508 	.word	0x20000508
 8007588:	200012d0 	.word	0x200012d0

0800758c <save_current_position>:

void save_current_position(void) {
 800758c:	b580      	push	{r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af00      	add	r7, sp, #0
	if (saved_position_count < JOY_MODE_MAX_POSITIONS) {
 8007592:	4b50      	ldr	r3, [pc, #320]	@ (80076d4 <save_current_position+0x148>)
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	2b09      	cmp	r3, #9
 8007598:	f200 8098 	bhi.w	80076cc <save_current_position+0x140>
		float current_pris = prismatic_encoder.mm;
 800759c:	4b4e      	ldr	r3, [pc, #312]	@ (80076d8 <save_current_position+0x14c>)
 800759e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075a0:	61fb      	str	r3, [r7, #28]
		float current_rev = revolute_encoder.rads;
 80075a2:	4b4e      	ldr	r3, [pc, #312]	@ (80076dc <save_current_position+0x150>)
 80075a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a6:	61bb      	str	r3, [r7, #24]

		bool too_similar = false;
 80075a8:	2300      	movs	r3, #0
 80075aa:	75fb      	strb	r3, [r7, #23]
		if (saved_position_count > 0) {
 80075ac:	4b49      	ldr	r3, [pc, #292]	@ (80076d4 <save_current_position+0x148>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d031      	beq.n	8007618 <save_current_position+0x8c>
			float last_pris =
					saved_positions[saved_position_count - 1].prismatic_pos;
 80075b4:	4b47      	ldr	r3, [pc, #284]	@ (80076d4 <save_current_position+0x148>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	3b01      	subs	r3, #1
			float last_pris =
 80075ba:	4a49      	ldr	r2, [pc, #292]	@ (80076e0 <save_current_position+0x154>)
 80075bc:	00db      	lsls	r3, r3, #3
 80075be:	4413      	add	r3, r2
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	613b      	str	r3, [r7, #16]
			float last_rev =
					saved_positions[saved_position_count - 1].revolute_pos;
 80075c4:	4b43      	ldr	r3, [pc, #268]	@ (80076d4 <save_current_position+0x148>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	3b01      	subs	r3, #1
			float last_rev =
 80075ca:	4a45      	ldr	r2, [pc, #276]	@ (80076e0 <save_current_position+0x154>)
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	4413      	add	r3, r2
 80075d0:	3304      	adds	r3, #4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	60fb      	str	r3, [r7, #12]

			if (fabsf(current_pris - last_pris) < 5.0f
 80075d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80075da:	edd7 7a04 	vldr	s15, [r7, #16]
 80075de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075e2:	eef0 7ae7 	vabs.f32	s15, s15
 80075e6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80075ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f2:	d511      	bpl.n	8007618 <save_current_position+0x8c>
					&& fabsf(current_rev - last_rev) < 0.1f) {
 80075f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80075f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80075fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007600:	eef0 7ae7 	vabs.f32	s15, s15
 8007604:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80076e4 <save_current_position+0x158>
 8007608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800760c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007610:	d502      	bpl.n	8007618 <save_current_position+0x8c>
				too_similar = true;
 8007612:	2301      	movs	r3, #1
 8007614:	75fb      	strb	r3, [r7, #23]
				// DEBUG: Position too similar, not saving
				return;// Exit early if too similar
 8007616:	e059      	b.n	80076cc <save_current_position+0x140>
			}
		}

		// Only reach here if position should be saved
		saved_positions[saved_position_count].prismatic_pos = current_pris;
 8007618:	4b2e      	ldr	r3, [pc, #184]	@ (80076d4 <save_current_position+0x148>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	4a30      	ldr	r2, [pc, #192]	@ (80076e0 <save_current_position+0x154>)
 800761e:	00db      	lsls	r3, r3, #3
 8007620:	4413      	add	r3, r2
 8007622:	69fa      	ldr	r2, [r7, #28]
 8007624:	601a      	str	r2, [r3, #0]
		saved_positions[saved_position_count].revolute_pos = current_rev;
 8007626:	4b2b      	ldr	r3, [pc, #172]	@ (80076d4 <save_current_position+0x148>)
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	4a2d      	ldr	r2, [pc, #180]	@ (80076e0 <save_current_position+0x154>)
 800762c:	00db      	lsls	r3, r3, #3
 800762e:	4413      	add	r3, r2
 8007630:	3304      	adds	r3, #4
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	601a      	str	r2, [r3, #0]

		uint8_t r_addr = 0x20 + saved_position_count * 2;
 8007636:	4b27      	ldr	r3, [pc, #156]	@ (80076d4 <save_current_position+0x148>)
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	3310      	adds	r3, #16
 800763c:	b2db      	uxtb	r3, r3
 800763e:	005b      	lsls	r3, r3, #1
 8007640:	72fb      	strb	r3, [r7, #11]
		uint8_t t_addr = r_addr + 1;
 8007642:	7afb      	ldrb	r3, [r7, #11]
 8007644:	3301      	adds	r3, #1
 8007646:	72bb      	strb	r3, [r7, #10]

		if (r_addr <= 0x38 && t_addr <= 0x39) {
 8007648:	7afb      	ldrb	r3, [r7, #11]
 800764a:	2b38      	cmp	r3, #56	@ 0x38
 800764c:	d82e      	bhi.n	80076ac <save_current_position+0x120>
 800764e:	7abb      	ldrb	r3, [r7, #10]
 8007650:	2b39      	cmp	r3, #57	@ 0x39
 8007652:	d82b      	bhi.n	80076ac <save_current_position+0x120>
			int16_t r_mm_fixed = (int16_t) (current_pris * 10.0);
 8007654:	69f8      	ldr	r0, [r7, #28]
 8007656:	f7f8 ff43 	bl	80004e0 <__aeabi_f2d>
 800765a:	f04f 0200 	mov.w	r2, #0
 800765e:	4b22      	ldr	r3, [pc, #136]	@ (80076e8 <save_current_position+0x15c>)
 8007660:	f7f8 ff96 	bl	8000590 <__aeabi_dmul>
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	4610      	mov	r0, r2
 800766a:	4619      	mov	r1, r3
 800766c:	f7f9 fa2a 	bl	8000ac4 <__aeabi_d2iz>
 8007670:	4603      	mov	r3, r0
 8007672:	813b      	strh	r3, [r7, #8]
			int16_t t_deg_fixed = (int16_t) (revolute_axis.deg * 10.0);
 8007674:	4b1d      	ldr	r3, [pc, #116]	@ (80076ec <save_current_position+0x160>)
 8007676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007678:	4618      	mov	r0, r3
 800767a:	f7f8 ff31 	bl	80004e0 <__aeabi_f2d>
 800767e:	f04f 0200 	mov.w	r2, #0
 8007682:	4b19      	ldr	r3, [pc, #100]	@ (80076e8 <save_current_position+0x15c>)
 8007684:	f7f8 ff84 	bl	8000590 <__aeabi_dmul>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	4610      	mov	r0, r2
 800768e:	4619      	mov	r1, r3
 8007690:	f7f9 fa18 	bl	8000ac4 <__aeabi_d2iz>
 8007694:	4603      	mov	r3, r0
 8007696:	80fb      	strh	r3, [r7, #6]

			registerFrame[r_addr].U16 = r_mm_fixed;
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	8939      	ldrh	r1, [r7, #8]
 800769c:	4a14      	ldr	r2, [pc, #80]	@ (80076f0 <save_current_position+0x164>)
 800769e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			registerFrame[t_addr].U16 = t_deg_fixed;
 80076a2:	7abb      	ldrb	r3, [r7, #10]
 80076a4:	88f9      	ldrh	r1, [r7, #6]
 80076a6:	4a12      	ldr	r2, [pc, #72]	@ (80076f0 <save_current_position+0x164>)
 80076a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		saved_position_count++;
 80076ac:	4b09      	ldr	r3, [pc, #36]	@ (80076d4 <save_current_position+0x148>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	3301      	adds	r3, #1
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	4b07      	ldr	r3, [pc, #28]	@ (80076d4 <save_current_position+0x148>)
 80076b6:	701a      	strb	r2, [r3, #0]

		if (saved_position_count >= JOY_MODE_MAX_POSITIONS) {
 80076b8:	4b06      	ldr	r3, [pc, #24]	@ (80076d4 <save_current_position+0x148>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2b09      	cmp	r3, #9
 80076be:	d905      	bls.n	80076cc <save_current_position+0x140>
			joy_mode_state = JOY_MODE_POSITION_SAVED;
 80076c0:	4b0c      	ldr	r3, [pc, #48]	@ (80076f4 <save_current_position+0x168>)
 80076c2:	2203      	movs	r2, #3
 80076c4:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 80076c6:	4b0c      	ldr	r3, [pc, #48]	@ (80076f8 <save_current_position+0x16c>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]
		}
	}
}
 80076cc:	3720      	adds	r7, #32
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	200005d4 	.word	0x200005d4
 80076d8:	200006cc 	.word	0x200006cc
 80076dc:	20000728 	.word	0x20000728
 80076e0:	20000584 	.word	0x20000584
 80076e4:	3dcccccd 	.word	0x3dcccccd
 80076e8:	40240000 	.word	0x40240000
 80076ec:	200004c4 	.word	0x200004c4
 80076f0:	200012d0 	.word	0x200012d0
 80076f4:	20000580 	.word	0x20000580
 80076f8:	200005d8 	.word	0x200005d8

080076fc <start_position_playback>:

void start_position_playback(void) {
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
	check[3]++;
 8007702:	4b1e      	ldr	r3, [pc, #120]	@ (800777c <start_position_playback+0x80>)
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	3301      	adds	r3, #1
 8007708:	4a1c      	ldr	r2, [pc, #112]	@ (800777c <start_position_playback+0x80>)
 800770a:	60d3      	str	r3, [r2, #12]
	if (saved_position_count > 0) {
 800770c:	4b1c      	ldr	r3, [pc, #112]	@ (8007780 <start_position_playback+0x84>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d02f      	beq.n	8007774 <start_position_playback+0x78>
		check[2]++;
 8007714:	4b19      	ldr	r3, [pc, #100]	@ (800777c <start_position_playback+0x80>)
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	3301      	adds	r3, #1
 800771a:	4a18      	ldr	r2, [pc, #96]	@ (800777c <start_position_playback+0x80>)
 800771c:	6093      	str	r3, [r2, #8]
		playback_position_index = 0;
 800771e:	4b19      	ldr	r3, [pc, #100]	@ (8007784 <start_position_playback+0x88>)
 8007720:	2200      	movs	r2, #0
 8007722:	701a      	strb	r2, [r3, #0]
		joy_mode_playback_timer = 0;
 8007724:	4b18      	ldr	r3, [pc, #96]	@ (8007788 <start_position_playback+0x8c>)
 8007726:	2200      	movs	r2, #0
 8007728:	601a      	str	r2, [r3, #0]
		joy_mode_state = JOY_MODE_PLAYBACK;
 800772a:	4b18      	ldr	r3, [pc, #96]	@ (800778c <start_position_playback+0x90>)
 800772c:	2204      	movs	r2, #4
 800772e:	701a      	strb	r2, [r3, #0]
		// Keep pilot light ON during playback (don't turn it off)
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8007730:	2201      	movs	r2, #1
 8007732:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800773a:	f005 f975 	bl	800ca28 <HAL_GPIO_WritePin>
		joy_mode_pilot_state = true;
 800773e:	4b14      	ldr	r3, [pc, #80]	@ (8007790 <start_position_playback+0x94>)
 8007740:	2201      	movs	r2, #1
 8007742:	701a      	strb	r2, [r3, #0]

		// Start first trajectory
		float target_pris = saved_positions[0].prismatic_pos;
 8007744:	4b13      	ldr	r3, [pc, #76]	@ (8007794 <start_position_playback+0x98>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	60fb      	str	r3, [r7, #12]
		float target_rev_rad = saved_positions[0].revolute_pos;
 800774a:	4b12      	ldr	r3, [pc, #72]	@ (8007794 <start_position_playback+0x98>)
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	60bb      	str	r3, [r7, #8]
		float target_rev_deg = target_rev_rad * 180.0f / PI;
 8007750:	edd7 7a02 	vldr	s15, [r7, #8]
 8007754:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8007798 <start_position_playback+0x9c>
 8007758:	ee27 7a87 	vmul.f32	s14, s15, s14
 800775c:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800779c <start_position_playback+0xa0>
 8007760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007764:	edc7 7a01 	vstr	s15, [r7, #4]

		start_combined_trajectory(target_pris, target_rev_deg);
 8007768:	edd7 0a01 	vldr	s1, [r7, #4]
 800776c:	ed97 0a03 	vldr	s0, [r7, #12]
 8007770:	f7fe fddc 	bl	800632c <start_combined_trajectory>

	}
}
 8007774:	bf00      	nop
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	200005e8 	.word	0x200005e8
 8007780:	200005d4 	.word	0x200005d4
 8007784:	200005d5 	.word	0x200005d5
 8007788:	200005e0 	.word	0x200005e0
 800778c:	20000580 	.word	0x20000580
 8007790:	200005dc 	.word	0x200005dc
 8007794:	20000584 	.word	0x20000584
 8007798:	43340000 	.word	0x43340000
 800779c:	40490fdb 	.word	0x40490fdb

080077a0 <reset_joy_mode_data>:

void reset_joy_mode_data(void) {
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
	// Reset saved position count
	saved_position_count = 0;
 80077a6:	4b19      	ldr	r3, [pc, #100]	@ (800780c <reset_joy_mode_data+0x6c>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	701a      	strb	r2, [r3, #0]

	// Reset playback index
	playback_position_index = 0;
 80077ac:	4b18      	ldr	r3, [pc, #96]	@ (8007810 <reset_joy_mode_data+0x70>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	701a      	strb	r2, [r3, #0]

	// Clear all saved positions
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 80077b2:	2300      	movs	r3, #0
 80077b4:	607b      	str	r3, [r7, #4]
 80077b6:	e011      	b.n	80077dc <reset_joy_mode_data+0x3c>
		saved_positions[i].prismatic_pos = 0.0f;
 80077b8:	4a16      	ldr	r2, [pc, #88]	@ (8007814 <reset_joy_mode_data+0x74>)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	00db      	lsls	r3, r3, #3
 80077be:	4413      	add	r3, r2
 80077c0:	f04f 0200 	mov.w	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
		saved_positions[i].revolute_pos = 0.0f;
 80077c6:	4a13      	ldr	r2, [pc, #76]	@ (8007814 <reset_joy_mode_data+0x74>)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	4413      	add	r3, r2
 80077ce:	3304      	adds	r3, #4
 80077d0:	f04f 0200 	mov.w	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3301      	adds	r3, #1
 80077da:	607b      	str	r3, [r7, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b09      	cmp	r3, #9
 80077e0:	ddea      	ble.n	80077b8 <reset_joy_mode_data+0x18>
	}

	// Reset pilot light timers
	joy_mode_pilot_timer = 0;
 80077e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007818 <reset_joy_mode_data+0x78>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	601a      	str	r2, [r3, #0]
	joy_mode_pilot_state = false;
 80077e8:	4b0c      	ldr	r3, [pc, #48]	@ (800781c <reset_joy_mode_data+0x7c>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	701a      	strb	r2, [r3, #0]

	// Reset playback timer
	joy_mode_playback_timer = 0;
 80077ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007820 <reset_joy_mode_data+0x80>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	601a      	str	r2, [r3, #0]

	// Reset button states
	joy_mode_b2_pressed = false;
 80077f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007824 <reset_joy_mode_data+0x84>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	701a      	strb	r2, [r3, #0]
	joy_mode_b2_last_state = false;
 80077fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007828 <reset_joy_mode_data+0x88>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	701a      	strb	r2, [r3, #0]
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	200005d4 	.word	0x200005d4
 8007810:	200005d5 	.word	0x200005d5
 8007814:	20000584 	.word	0x20000584
 8007818:	200005d8 	.word	0x200005d8
 800781c:	200005dc 	.word	0x200005dc
 8007820:	200005e0 	.word	0x200005e0
 8007824:	200005e4 	.word	0x200005e4
 8007828:	200005e5 	.word	0x200005e5
 800782c:	00000000 	.word	0x00000000

08007830 <update_joy_mode_velocity_control>:

void update_joy_mode_velocity_control(void) {
 8007830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007834:	ed2d 8b02 	vpush	{d8}
 8007838:	b08d      	sub	sp, #52	@ 0x34
 800783a:	af00      	add	r7, sp, #0
	// Read current photo sensor states directly
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 800783c:	2101      	movs	r1, #1
 800783e:	48a7      	ldr	r0, [pc, #668]	@ (8007adc <update_joy_mode_velocity_control+0x2ac>)
 8007840:	f005 f8da 	bl	800c9f8 <HAL_GPIO_ReadPin>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	bf14      	ite	ne
 800784a:	2301      	movne	r3, #1
 800784c:	2300      	moveq	r3, #0
 800784e:	76fb      	strb	r3, [r7, #27]
	UPPER_PHOTO_Pin);
	bool low_photo_detected = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8007850:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007854:	48a1      	ldr	r0, [pc, #644]	@ (8007adc <update_joy_mode_velocity_control+0x2ac>)
 8007856:	f005 f8cf 	bl	800c9f8 <HAL_GPIO_ReadPin>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	bf14      	ite	ne
 8007860:	2301      	movne	r3, #1
 8007862:	2300      	moveq	r3, #0
 8007864:	76bb      	strb	r3, [r7, #26]
	LOWER_PHOTO_Pin);

	// Prismatic axis control based on joystick_x
	float pris_command_vel = 0.0f;
 8007866:	f04f 0300 	mov.w	r3, #0
 800786a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	bool pris_moving = false;
 800786c:	2300      	movs	r3, #0
 800786e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	static bool pris_was_moving = false; // Track previous moving state

	// Process prismatic axis joystick control (FIXED LOGIC)
	if (up_photo_detected && joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 8007872:	7efb      	ldrb	r3, [r7, #27]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00d      	beq.n	8007894 <update_joy_mode_velocity_control+0x64>
 8007878:	4b99      	ldr	r3, [pc, #612]	@ (8007ae0 <update_joy_mode_velocity_control+0x2b0>)
 800787a:	edd3 7a00 	vldr	s15, [r3]
 800787e:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8007ae4 <update_joy_mode_velocity_control+0x2b4>
 8007882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800788a:	dd03      	ble.n	8007894 <update_joy_mode_velocity_control+0x64>
		// At up photo and trying to go up (negative direction) - block movement
		pris_command_vel = 0.0f;
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007892:	e048      	b.n	8007926 <update_joy_mode_velocity_control+0xf6>
	} else if (low_photo_detected && joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007894:	7ebb      	ldrb	r3, [r7, #26]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00d      	beq.n	80078b6 <update_joy_mode_velocity_control+0x86>
 800789a:	4b91      	ldr	r3, [pc, #580]	@ (8007ae0 <update_joy_mode_velocity_control+0x2b0>)
 800789c:	edd3 7a00 	vldr	s15, [r3]
 80078a0:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8007ae8 <update_joy_mode_velocity_control+0x2b8>
 80078a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ac:	d503      	bpl.n	80078b6 <update_joy_mode_velocity_control+0x86>
		// At low photo and trying to go down (positive direction) - block movement
		pris_command_vel = 0.0f;
 80078ae:	f04f 0300 	mov.w	r3, #0
 80078b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078b4:	e037      	b.n	8007926 <update_joy_mode_velocity_control+0xf6>
	} else if (joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 80078b6:	4b8a      	ldr	r3, [pc, #552]	@ (8007ae0 <update_joy_mode_velocity_control+0x2b0>)
 80078b8:	edd3 7a00 	vldr	s15, [r3]
 80078bc:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8007ae8 <update_joy_mode_velocity_control+0x2b8>
 80078c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078c8:	d50e      	bpl.n	80078e8 <update_joy_mode_velocity_control+0xb8>
		// Moving down (positive direction)
		pris_command_vel = JOY_MODE_CONSTANT_VELOCITY_PRIS;
 80078ca:	4b88      	ldr	r3, [pc, #544]	@ (8007aec <update_joy_mode_velocity_control+0x2bc>)
 80078cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 80078ce:	2301      	movs	r3, #1
 80078d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!low_photo_detected) {
 80078d4:	7ebb      	ldrb	r3, [r7, #26]
 80078d6:	f083 0301 	eor.w	r3, r3, #1
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d022      	beq.n	8007926 <update_joy_mode_velocity_control+0xf6>
			up_photo = false;
 80078e0:	4b83      	ldr	r3, [pc, #524]	@ (8007af0 <update_joy_mode_velocity_control+0x2c0>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
 80078e6:	e01e      	b.n	8007926 <update_joy_mode_velocity_control+0xf6>
		}
	} else if (joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 80078e8:	4b7d      	ldr	r3, [pc, #500]	@ (8007ae0 <update_joy_mode_velocity_control+0x2b0>)
 80078ea:	edd3 7a00 	vldr	s15, [r3]
 80078ee:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8007ae4 <update_joy_mode_velocity_control+0x2b4>
 80078f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fa:	dd0e      	ble.n	800791a <update_joy_mode_velocity_control+0xea>
		// Moving up (negative direction)
		pris_command_vel = -JOY_MODE_CONSTANT_VELOCITY_PRIS;
 80078fc:	4b7d      	ldr	r3, [pc, #500]	@ (8007af4 <update_joy_mode_velocity_control+0x2c4>)
 80078fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 8007900:	2301      	movs	r3, #1
 8007902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!up_photo_detected) {
 8007906:	7efb      	ldrb	r3, [r7, #27]
 8007908:	f083 0301 	eor.w	r3, r3, #1
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d009      	beq.n	8007926 <update_joy_mode_velocity_control+0xf6>
			low_photo = false;
 8007912:	4b79      	ldr	r3, [pc, #484]	@ (8007af8 <update_joy_mode_velocity_control+0x2c8>)
 8007914:	2200      	movs	r2, #0
 8007916:	701a      	strb	r2, [r3, #0]
 8007918:	e005      	b.n	8007926 <update_joy_mode_velocity_control+0xf6>
		}
	} else {
		// Joystick in deadband - hold position
		pris_command_vel = 0.0f;
 800791a:	f04f 0300 	mov.w	r3, #0
 800791e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = false;
 8007920:	2300      	movs	r3, #0
 8007922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	}

	// Revolute axis control based on joystick_y
	float rev_command_vel = 0.0f;
 8007926:	f04f 0300 	mov.w	r3, #0
 800792a:	627b      	str	r3, [r7, #36]	@ 0x24
	bool rev_moving = false;
 800792c:	2300      	movs	r3, #0
 800792e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	// Get current revolute position in degrees for limit checking
	float revolute_deg = UnitConverter_angle(&converter_system,
 8007932:	4b72      	ldr	r3, [pc, #456]	@ (8007afc <update_joy_mode_velocity_control+0x2cc>)
 8007934:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007938:	220e      	movs	r2, #14
 800793a:	210f      	movs	r1, #15
 800793c:	eeb0 0a67 	vmov.f32	s0, s15
 8007940:	486f      	ldr	r0, [pc, #444]	@ (8007b00 <update_joy_mode_velocity_control+0x2d0>)
 8007942:	f7fd f965 	bl	8004c10 <UnitConverter_angle>
 8007946:	ed87 0a05 	vstr	s0, [r7, #20]
			revolute_encoder.rads, UNIT_RADIAN, UNIT_DEGREE);

	// Process revolute axis joystick control with limits
	if ((revolute_deg > 175.0f && joystick_y > JOY_MODE_VELOCITY_THRESHOLD)
 800794a:	edd7 7a05 	vldr	s15, [r7, #20]
 800794e:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8007b04 <update_joy_mode_velocity_control+0x2d4>
 8007952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800795a:	dd09      	ble.n	8007970 <update_joy_mode_velocity_control+0x140>
 800795c:	4b6a      	ldr	r3, [pc, #424]	@ (8007b08 <update_joy_mode_velocity_control+0x2d8>)
 800795e:	edd3 7a00 	vldr	s15, [r3]
 8007962:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8007ae4 <update_joy_mode_velocity_control+0x2b4>
 8007966:	eef4 7ac7 	vcmpe.f32	s15, s14
 800796a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796e:	dc12      	bgt.n	8007996 <update_joy_mode_velocity_control+0x166>
			|| (revolute_deg < -175.0f
 8007970:	edd7 7a05 	vldr	s15, [r7, #20]
 8007974:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8007b0c <update_joy_mode_velocity_control+0x2dc>
 8007978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800797c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007980:	d510      	bpl.n	80079a4 <update_joy_mode_velocity_control+0x174>
					&& joystick_y < -JOY_MODE_VELOCITY_THRESHOLD)) {
 8007982:	4b61      	ldr	r3, [pc, #388]	@ (8007b08 <update_joy_mode_velocity_control+0x2d8>)
 8007984:	edd3 7a00 	vldr	s15, [r3]
 8007988:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8007ae8 <update_joy_mode_velocity_control+0x2b8>
 800798c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007994:	d506      	bpl.n	80079a4 <update_joy_mode_velocity_control+0x174>
		// At revolute limits - block movement
		rev_command_vel = 0.0f;
 8007996:	f04f 0300 	mov.w	r3, #0
 800799a:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 800799c:	2300      	movs	r3, #0
 800799e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079a2:	e025      	b.n	80079f0 <update_joy_mode_velocity_control+0x1c0>
	} else if (joystick_y > JOY_MODE_VELOCITY_THRESHOLD) {
 80079a4:	4b58      	ldr	r3, [pc, #352]	@ (8007b08 <update_joy_mode_velocity_control+0x2d8>)
 80079a6:	edd3 7a00 	vldr	s15, [r3]
 80079aa:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8007ae4 <update_joy_mode_velocity_control+0x2b4>
 80079ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b6:	dd05      	ble.n	80079c4 <update_joy_mode_velocity_control+0x194>
		rev_command_vel = JOY_MODE_CONSTANT_VELOCITY_REV;
 80079b8:	4b55      	ldr	r3, [pc, #340]	@ (8007b10 <update_joy_mode_velocity_control+0x2e0>)
 80079ba:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 80079bc:	2301      	movs	r3, #1
 80079be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079c2:	e015      	b.n	80079f0 <update_joy_mode_velocity_control+0x1c0>
	} else if (joystick_y < -JOY_MODE_VELOCITY_THRESHOLD) {
 80079c4:	4b50      	ldr	r3, [pc, #320]	@ (8007b08 <update_joy_mode_velocity_control+0x2d8>)
 80079c6:	edd3 7a00 	vldr	s15, [r3]
 80079ca:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8007ae8 <update_joy_mode_velocity_control+0x2b8>
 80079ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d6:	d505      	bpl.n	80079e4 <update_joy_mode_velocity_control+0x1b4>
		rev_command_vel = -JOY_MODE_CONSTANT_VELOCITY_REV;
 80079d8:	4b4e      	ldr	r3, [pc, #312]	@ (8007b14 <update_joy_mode_velocity_control+0x2e4>)
 80079da:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 80079dc:	2301      	movs	r3, #1
 80079de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079e2:	e005      	b.n	80079f0 <update_joy_mode_velocity_control+0x1c0>
	} else {
		// Joystick in deadband - hold position
		rev_command_vel = 0.0f;
 80079e4:	f04f 0300 	mov.w	r3, #0
 80079e8:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 80079ea:	2300      	movs	r3, #0
 80079ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	}

	/* PRISMATIC AXIS CONTROL - Keep existing PID-based control */
	// Detect transition from moving to stopped
	if (pris_was_moving && !pris_moving) {
 80079f0:	4b49      	ldr	r3, [pc, #292]	@ (8007b18 <update_joy_mode_velocity_control+0x2e8>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00a      	beq.n	8007a0e <update_joy_mode_velocity_control+0x1de>
 80079f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80079fc:	f083 0301 	eor.w	r3, r3, #1
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <update_joy_mode_velocity_control+0x1de>
		// Just stopped moving - capture current position as target
		prismatic_axis.position = prismatic_encoder.mm;
 8007a06:	4b45      	ldr	r3, [pc, #276]	@ (8007b1c <update_joy_mode_velocity_control+0x2ec>)
 8007a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a0a:	4a45      	ldr	r2, [pc, #276]	@ (8007b20 <update_joy_mode_velocity_control+0x2f0>)
 8007a0c:	6013      	str	r3, [r2, #0]
	}

	if (pris_moving) {
 8007a0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 8092 	beq.w	8007b3c <update_joy_mode_velocity_control+0x30c>
		// Moving - use velocity control
		prismatic_axis.vel_error = pris_command_vel
				- prismatic_axis.kalman_velocity;
 8007a18:	4b41      	ldr	r3, [pc, #260]	@ (8007b20 <update_joy_mode_velocity_control+0x2f0>)
 8007a1a:	edd3 7a07 	vldr	s15, [r3, #28]
 8007a1e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8007a22:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = pris_command_vel
 8007a26:	4b3e      	ldr	r3, [pc, #248]	@ (8007b20 <update_joy_mode_velocity_control+0x2f0>)
 8007a28:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8007a2c:	4b3c      	ldr	r3, [pc, #240]	@ (8007b20 <update_joy_mode_velocity_control+0x2f0>)
 8007a2e:	edd3 7a06 	vldr	s15, [r3, #24]
 8007a32:	eeb0 0a67 	vmov.f32	s0, s15
 8007a36:	483b      	ldr	r0, [pc, #236]	@ (8007b24 <update_joy_mode_velocity_control+0x2f4>)
 8007a38:	f7f9 fbee 	bl	8001218 <PID_CONTROLLER_Compute>
 8007a3c:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8007a40:	4b39      	ldr	r3, [pc, #228]	@ (8007b28 <update_joy_mode_velocity_control+0x2f8>)
 8007a42:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8007a46:	4610      	mov	r0, r2
 8007a48:	4619      	mov	r1, r3
 8007a4a:	f7f9 f83b 	bl	8000ac4 <__aeabi_d2iz>
 8007a4e:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8007a50:	4b35      	ldr	r3, [pc, #212]	@ (8007b28 <update_joy_mode_velocity_control+0x2f8>)
 8007a52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007a56:	60ba      	str	r2, [r7, #8]
 8007a58:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007a5c:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(
 8007a5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a62:	f7f9 f82f 	bl	8000ac4 <__aeabi_d2iz>
 8007a66:	4603      	mov	r3, r0
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	eeb0 0a48 	vmov.f32	s0, s16
 8007a70:	f7f9 fb70 	bl	8001154 <PWM_Satuation>
 8007a74:	ee07 0a90 	vmov	s15, r0
 8007a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a7c:	4b28      	ldr	r3, [pc, #160]	@ (8007b20 <update_joy_mode_velocity_control+0x2f0>)
 8007a7e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward for moving
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8007a82:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007a86:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8007b2c <update_joy_mode_velocity_control+0x2fc>
 8007a8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007a8e:	eeb0 0a47 	vmov.f32	s0, s14
 8007a92:	4827      	ldr	r0, [pc, #156]	@ (8007b30 <update_joy_mode_velocity_control+0x300>)
 8007a94:	f7f9 ff00 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 8007a98:	eef0 7a40 	vmov.f32	s15, s0
 8007a9c:	4b20      	ldr	r3, [pc, #128]	@ (8007b20 <update_joy_mode_velocity_control+0x2f0>)
 8007a9e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				pris_command_vel / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8007aa2:	4b16      	ldr	r3, [pc, #88]	@ (8007afc <update_joy_mode_velocity_control+0x2cc>)
 8007aa4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8007aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8007b1c <update_joy_mode_velocity_control+0x2ec>)
 8007aaa:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8007aae:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8007b2c <update_joy_mode_velocity_control+0x2fc>
 8007ab2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007ab6:	eeb0 1a66 	vmov.f32	s2, s13
 8007aba:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8007b34 <update_joy_mode_velocity_control+0x304>
 8007abe:	eeb0 0a47 	vmov.f32	s0, s14
 8007ac2:	481d      	ldr	r0, [pc, #116]	@ (8007b38 <update_joy_mode_velocity_control+0x308>)
 8007ac4:	f7f9 ff90 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 8007ac8:	eef0 7a40 	vmov.f32	s15, s0
 8007acc:	4b14      	ldr	r3, [pc, #80]	@ (8007b20 <update_joy_mode_velocity_control+0x2f0>)
 8007ace:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		// Continuously update target position while moving
		prismatic_axis.position = prismatic_encoder.mm;
 8007ad2:	4b12      	ldr	r3, [pc, #72]	@ (8007b1c <update_joy_mode_velocity_control+0x2ec>)
 8007ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ad6:	4a12      	ldr	r2, [pc, #72]	@ (8007b20 <update_joy_mode_velocity_control+0x2f0>)
 8007ad8:	6013      	str	r3, [r2, #0]
 8007ada:	e0a2      	b.n	8007c22 <update_joy_mode_velocity_control+0x3f2>
 8007adc:	48000400 	.word	0x48000400
 8007ae0:	20001b9c 	.word	0x20001b9c
 8007ae4:	42200000 	.word	0x42200000
 8007ae8:	c2200000 	.word	0xc2200000
 8007aec:	43160000 	.word	0x43160000
 8007af0:	20000564 	.word	0x20000564
 8007af4:	c3160000 	.word	0xc3160000
 8007af8:	20000565 	.word	0x20000565
 8007afc:	20000728 	.word	0x20000728
 8007b00:	20000ac0 	.word	0x20000ac0
 8007b04:	432f0000 	.word	0x432f0000
 8007b08:	20001ba0 	.word	0x20001ba0
 8007b0c:	c32f0000 	.word	0xc32f0000
 8007b10:	40400000 	.word	0x40400000
 8007b14:	c0400000 	.word	0xc0400000
 8007b18:	20000620 	.word	0x20000620
 8007b1c:	200006cc 	.word	0x200006cc
 8007b20:	20000480 	.word	0x20000480
 8007b24:	200007ac 	.word	0x200007ac
 8007b28:	20000080 	.word	0x20000080
 8007b2c:	447a0000 	.word	0x447a0000
 8007b30:	2000084c 	.word	0x2000084c
 8007b34:	00000000 	.word	0x00000000
 8007b38:	20000850 	.word	0x20000850
	} else {
		// Not moving - hold target position with position control
		prismatic_axis.pos_error = prismatic_axis.position
 8007b3c:	4bbc      	ldr	r3, [pc, #752]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007b3e:	ed93 7a00 	vldr	s14, [r3]
				- prismatic_encoder.mm;
 8007b42:	4bbc      	ldr	r3, [pc, #752]	@ (8007e34 <update_joy_mode_velocity_control+0x604>)
 8007b44:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8007b48:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.pos_error = prismatic_axis.position
 8007b4c:	4bb8      	ldr	r3, [pc, #736]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007b4e:	edc3 7a05 	vstr	s15, [r3, #20]
		prismatic_axis.command_vel = PWM_Satuation(
 8007b52:	4bb7      	ldr	r3, [pc, #732]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007b54:	edd3 7a05 	vldr	s15, [r3, #20]
 8007b58:	eeb0 0a67 	vmov.f32	s0, s15
 8007b5c:	48b6      	ldr	r0, [pc, #728]	@ (8007e38 <update_joy_mode_velocity_control+0x608>)
 8007b5e:	f7f9 fb5b 	bl	8001218 <PID_CONTROLLER_Compute>
 8007b62:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_position_pid,
						prismatic_axis.pos_error),
				ZGX45RGG_400RPM_Constant.sd_max,
 8007b66:	4bb5      	ldr	r3, [pc, #724]	@ (8007e3c <update_joy_mode_velocity_control+0x60c>)
 8007b68:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		prismatic_axis.command_vel = PWM_Satuation(
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	4619      	mov	r1, r3
 8007b70:	f7f8 ffa8 	bl	8000ac4 <__aeabi_d2iz>
 8007b74:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.sd_max);
 8007b76:	4bb1      	ldr	r3, [pc, #708]	@ (8007e3c <update_joy_mode_velocity_control+0x60c>)
 8007b78:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007b7c:	603a      	str	r2, [r7, #0]
 8007b7e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007b82:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_vel = PWM_Satuation(
 8007b84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b88:	f7f8 ff9c 	bl	8000ac4 <__aeabi_d2iz>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	4619      	mov	r1, r3
 8007b90:	4620      	mov	r0, r4
 8007b92:	eeb0 0a48 	vmov.f32	s0, s16
 8007b96:	f7f9 fadd 	bl	8001154 <PWM_Satuation>
 8007b9a:	ee07 0a90 	vmov	s15, r0
 8007b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ba2:	4ba3      	ldr	r3, [pc, #652]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007ba4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

		prismatic_axis.vel_error = prismatic_axis.command_vel
 8007ba8:	4ba1      	ldr	r3, [pc, #644]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007baa:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8007bae:	4ba0      	ldr	r3, [pc, #640]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007bb0:	edd3 7a07 	vldr	s15, [r3, #28]
 8007bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8007bb8:	4b9d      	ldr	r3, [pc, #628]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007bba:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8007bbe:	4b9c      	ldr	r3, [pc, #624]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007bc0:	edd3 7a06 	vldr	s15, [r3, #24]
 8007bc4:	eeb0 0a67 	vmov.f32	s0, s15
 8007bc8:	489d      	ldr	r0, [pc, #628]	@ (8007e40 <update_joy_mode_velocity_control+0x610>)
 8007bca:	f7f9 fb25 	bl	8001218 <PID_CONTROLLER_Compute>
 8007bce:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8007bd2:	4b9a      	ldr	r3, [pc, #616]	@ (8007e3c <update_joy_mode_velocity_control+0x60c>)
 8007bd4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8007bd8:	4610      	mov	r0, r2
 8007bda:	4619      	mov	r1, r3
 8007bdc:	f7f8 ff72 	bl	8000ac4 <__aeabi_d2iz>
 8007be0:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8007be2:	4b96      	ldr	r3, [pc, #600]	@ (8007e3c <update_joy_mode_velocity_control+0x60c>)
 8007be4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007be8:	4615      	mov	r5, r2
 8007bea:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(
 8007bee:	4628      	mov	r0, r5
 8007bf0:	4631      	mov	r1, r6
 8007bf2:	f7f8 ff67 	bl	8000ac4 <__aeabi_d2iz>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	eeb0 0a48 	vmov.f32	s0, s16
 8007c00:	f7f9 faa8 	bl	8001154 <PWM_Satuation>
 8007c04:	ee07 0a90 	vmov	s15, r0
 8007c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c0c:	4b88      	ldr	r3, [pc, #544]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007c0e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// No feedforward when holding position
		prismatic_axis.ffd = 0.0f;
 8007c12:	4b87      	ldr	r3, [pc, #540]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007c14:	f04f 0200 	mov.w	r2, #0
 8007c18:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8007c1a:	4b85      	ldr	r3, [pc, #532]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007c1c:	f04f 0200 	mov.w	r2, #0
 8007c20:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	// Update previous state for next iteration
	pris_was_moving = pris_moving;
 8007c22:	4a88      	ldr	r2, [pc, #544]	@ (8007e44 <update_joy_mode_velocity_control+0x614>)
 8007c24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c28:	7013      	strb	r3, [r2, #0]

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8007c2a:	4b81      	ldr	r3, [pc, #516]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007c2c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8007c30:	4b7f      	ldr	r3, [pc, #508]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007c32:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8007c36:	4b7e      	ldr	r3, [pc, #504]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007c38:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007c3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c44:	4b7a      	ldr	r3, [pc, #488]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007c46:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007c4a:	4b79      	ldr	r3, [pc, #484]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007c4c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007c50:	4b7a      	ldr	r3, [pc, #488]	@ (8007e3c <update_joy_mode_velocity_control+0x60c>)
 8007c52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007c56:	4610      	mov	r0, r2
 8007c58:	4619      	mov	r1, r3
 8007c5a:	f7f8 ff33 	bl	8000ac4 <__aeabi_d2iz>
 8007c5e:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007c60:	4b76      	ldr	r3, [pc, #472]	@ (8007e3c <update_joy_mode_velocity_control+0x60c>)
 8007c62:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007c66:	4692      	mov	sl, r2
 8007c68:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007c6c:	4650      	mov	r0, sl
 8007c6e:	4659      	mov	r1, fp
 8007c70:	f7f8 ff28 	bl	8000ac4 <__aeabi_d2iz>
 8007c74:	4603      	mov	r3, r0
 8007c76:	4619      	mov	r1, r3
 8007c78:	4620      	mov	r0, r4
 8007c7a:	eeb0 0a48 	vmov.f32	s0, s16
 8007c7e:	f7f9 fa69 	bl	8001154 <PWM_Satuation>
 8007c82:	ee07 0a90 	vmov	s15, r0
 8007c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c8a:	4b69      	ldr	r3, [pc, #420]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007c8c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	/* REVOLUTE AXIS CONTROL - SIMPLIFIED PURE PWM WITH FFD + DFD */
	float base_pwm = 0.0f;
 8007c90:	f04f 0300 	mov.w	r3, #0
 8007c94:	61fb      	str	r3, [r7, #28]

	if (rev_moving) {
 8007c96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d02e      	beq.n	8007cfc <update_joy_mode_velocity_control+0x4cc>
		// Calculate base PWM proportional to joystick input
		// Scale joystick input (-50 to +50) to PWM range
		float joystick_normalized = joystick_y / 50.0f; // -1.0 to +1.0
 8007c9e:	4b6a      	ldr	r3, [pc, #424]	@ (8007e48 <update_joy_mode_velocity_control+0x618>)
 8007ca0:	ed93 7a00 	vldr	s14, [r3]
 8007ca4:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8007e4c <update_joy_mode_velocity_control+0x61c>
 8007ca8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007cac:	edc7 7a04 	vstr	s15, [r7, #16]
		base_pwm = joystick_normalized
				* (ZGX45RGG_150RPM_Constant.U_max * 0.3f); // Limit to 30% max PWM for safety
 8007cb0:	6938      	ldr	r0, [r7, #16]
 8007cb2:	f7f8 fc15 	bl	80004e0 <__aeabi_f2d>
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	460d      	mov	r5, r1
 8007cba:	4b65      	ldr	r3, [pc, #404]	@ (8007e50 <update_joy_mode_velocity_control+0x620>)
 8007cbc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007cc0:	a359      	add	r3, pc, #356	@ (adr r3, 8007e28 <update_joy_mode_velocity_control+0x5f8>)
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	f7f8 fc63 	bl	8000590 <__aeabi_dmul>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4620      	mov	r0, r4
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	f7f8 fc5d 	bl	8000590 <__aeabi_dmul>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
		base_pwm = joystick_normalized
 8007cda:	4610      	mov	r0, r2
 8007cdc:	4619      	mov	r1, r3
 8007cde:	f7f8 ff39 	bl	8000b54 <__aeabi_d2f>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	61fb      	str	r3, [r7, #28]

		// Add velocity feedforward
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8007ce6:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8007cea:	485a      	ldr	r0, [pc, #360]	@ (8007e54 <update_joy_mode_velocity_control+0x624>)
 8007cec:	f7f9 fc54 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8007cf0:	eef0 7a40 	vmov.f32	s15, s0
 8007cf4:	4b58      	ldr	r3, [pc, #352]	@ (8007e58 <update_joy_mode_velocity_control+0x628>)
 8007cf6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 8007cfa:	e006      	b.n	8007d0a <update_joy_mode_velocity_control+0x4da>
				rev_command_vel);
	} else {
		// Joystick released - no base PWM, only compensation
		base_pwm = 0.0f;
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	61fb      	str	r3, [r7, #28]
		revolute_axis.ffd = 0.0f;
 8007d02:	4b55      	ldr	r3, [pc, #340]	@ (8007e58 <update_joy_mode_velocity_control+0x628>)
 8007d04:	f04f 0200 	mov.w	r2, #0
 8007d08:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	// Always add gravity/disturbance compensation
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007d0a:	4b54      	ldr	r3, [pc, #336]	@ (8007e5c <update_joy_mode_velocity_control+0x62c>)
 8007d0c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8007d10:	4b48      	ldr	r3, [pc, #288]	@ (8007e34 <update_joy_mode_velocity_control+0x604>)
 8007d12:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007d16:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8007e60 <update_joy_mode_velocity_control+0x630>
 8007d1a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007d1e:	eef0 0a66 	vmov.f32	s1, s13
 8007d22:	eeb0 0a47 	vmov.f32	s0, s14
 8007d26:	484f      	ldr	r0, [pc, #316]	@ (8007e64 <update_joy_mode_velocity_control+0x634>)
 8007d28:	f7f9 fcc9 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8007d2c:	eef0 7a40 	vmov.f32	s15, s0
 8007d30:	4b49      	ldr	r3, [pc, #292]	@ (8007e58 <update_joy_mode_velocity_control+0x628>)
 8007d32:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Apply filtering to feedforward terms for stability
	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8007d36:	4b4c      	ldr	r3, [pc, #304]	@ (8007e68 <update_joy_mode_velocity_control+0x638>)
 8007d38:	edd3 7a00 	vldr	s15, [r3]
 8007d3c:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8007e6c <update_joy_mode_velocity_control+0x63c>
 8007d40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007d44:	4b44      	ldr	r3, [pc, #272]	@ (8007e58 <update_joy_mode_velocity_control+0x628>)
 8007d46:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8007d4a:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8007e70 <update_joy_mode_velocity_control+0x640>
 8007d4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d56:	4b44      	ldr	r3, [pc, #272]	@ (8007e68 <update_joy_mode_velocity_control+0x638>)
 8007d58:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 8007d5c:	4b45      	ldr	r3, [pc, #276]	@ (8007e74 <update_joy_mode_velocity_control+0x644>)
 8007d5e:	edd3 7a00 	vldr	s15, [r3]
 8007d62:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8007e6c <update_joy_mode_velocity_control+0x63c>
 8007d66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8007e58 <update_joy_mode_velocity_control+0x628>)
 8007d6c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007d70:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8007e70 <update_joy_mode_velocity_control+0x640>
 8007d74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8007e74 <update_joy_mode_velocity_control+0x644>)
 8007d7e:	edc3 7a00 	vstr	s15, [r3]

	// Combine base PWM with feedforward compensation
	revolute_axis.command_pos = base_pwm
			+ 0.01f * (ffd_filtered + dfd_filtered);
 8007d82:	4b39      	ldr	r3, [pc, #228]	@ (8007e68 <update_joy_mode_velocity_control+0x638>)
 8007d84:	ed93 7a00 	vldr	s14, [r3]
 8007d88:	4b3a      	ldr	r3, [pc, #232]	@ (8007e74 <update_joy_mode_velocity_control+0x644>)
 8007d8a:	edd3 7a00 	vldr	s15, [r3]
 8007d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d92:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8007e78 <update_joy_mode_velocity_control+0x648>
 8007d96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007d9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8007d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
	revolute_axis.command_pos = base_pwm
 8007da2:	4b2d      	ldr	r3, [pc, #180]	@ (8007e58 <update_joy_mode_velocity_control+0x628>)
 8007da4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Saturate final command
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007da8:	4b2b      	ldr	r3, [pc, #172]	@ (8007e58 <update_joy_mode_velocity_control+0x628>)
 8007daa:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007dae:	4b28      	ldr	r3, [pc, #160]	@ (8007e50 <update_joy_mode_velocity_control+0x620>)
 8007db0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007db4:	4610      	mov	r0, r2
 8007db6:	4619      	mov	r1, r3
 8007db8:	f7f8 fe84 	bl	8000ac4 <__aeabi_d2iz>
 8007dbc:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007dbe:	4b24      	ldr	r3, [pc, #144]	@ (8007e50 <update_joy_mode_velocity_control+0x620>)
 8007dc0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007dc4:	4690      	mov	r8, r2
 8007dc6:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007dca:	4640      	mov	r0, r8
 8007dcc:	4649      	mov	r1, r9
 8007dce:	f7f8 fe79 	bl	8000ac4 <__aeabi_d2iz>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	eeb0 0a48 	vmov.f32	s0, s16
 8007ddc:	f7f9 f9ba 	bl	8001154 <PWM_Satuation>
 8007de0:	ee07 0a90 	vmov	s15, r0
 8007de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007de8:	4b1b      	ldr	r3, [pc, #108]	@ (8007e58 <update_joy_mode_velocity_control+0x628>)
 8007dea:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply motor commands
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8007dee:	4b10      	ldr	r3, [pc, #64]	@ (8007e30 <update_joy_mode_velocity_control+0x600>)
 8007df0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007df4:	eef0 0a67 	vmov.f32	s1, s15
 8007df8:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8007e7c <update_joy_mode_velocity_control+0x64c>
 8007dfc:	4820      	ldr	r0, [pc, #128]	@ (8007e80 <update_joy_mode_velocity_control+0x650>)
 8007dfe:	f7f9 fae3 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8007e02:	4b15      	ldr	r3, [pc, #84]	@ (8007e58 <update_joy_mode_velocity_control+0x628>)
 8007e04:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007e08:	eef0 0a67 	vmov.f32	s1, s15
 8007e0c:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8007e7c <update_joy_mode_velocity_control+0x64c>
 8007e10:	481c      	ldr	r0, [pc, #112]	@ (8007e84 <update_joy_mode_velocity_control+0x654>)
 8007e12:	f7f9 fad9 	bl	80013c8 <MDXX_set_range>
}
 8007e16:	bf00      	nop
 8007e18:	3734      	adds	r7, #52	@ 0x34
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	ecbd 8b02 	vpop	{d8}
 8007e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e24:	f3af 8000 	nop.w
 8007e28:	40000000 	.word	0x40000000
 8007e2c:	3fd33333 	.word	0x3fd33333
 8007e30:	20000480 	.word	0x20000480
 8007e34:	200006cc 	.word	0x200006cc
 8007e38:	20000784 	.word	0x20000784
 8007e3c:	20000080 	.word	0x20000080
 8007e40:	200007ac 	.word	0x200007ac
 8007e44:	20000620 	.word	0x20000620
 8007e48:	20001ba0 	.word	0x20001ba0
 8007e4c:	42480000 	.word	0x42480000
 8007e50:	20000000 	.word	0x20000000
 8007e54:	20000858 	.word	0x20000858
 8007e58:	200004c4 	.word	0x200004c4
 8007e5c:	20000728 	.word	0x20000728
 8007e60:	447a0000 	.word	0x447a0000
 8007e64:	2000085c 	.word	0x2000085c
 8007e68:	20000624 	.word	0x20000624
 8007e6c:	3f4ccccd 	.word	0x3f4ccccd
 8007e70:	3e4ccccd 	.word	0x3e4ccccd
 8007e74:	20000628 	.word	0x20000628
 8007e78:	3c23d70a 	.word	0x3c23d70a
 8007e7c:	44fa0000 	.word	0x44fa0000
 8007e80:	20000634 	.word	0x20000634
 8007e84:	20000680 	.word	0x20000680

08007e88 <update_joy_mode_pilot_light>:

void update_joy_mode_pilot_light(void) {
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0
	if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8007e8c:	4b14      	ldr	r3, [pc, #80]	@ (8007ee0 <update_joy_mode_pilot_light+0x58>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	2b03      	cmp	r3, #3
 8007e92:	d122      	bne.n	8007eda <update_joy_mode_pilot_light+0x52>
		// Toggle pilot light every 1 second when 10 positions are saved
		joy_mode_pilot_timer++;
 8007e94:	4b13      	ldr	r3, [pc, #76]	@ (8007ee4 <update_joy_mode_pilot_light+0x5c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	4a12      	ldr	r2, [pc, #72]	@ (8007ee4 <update_joy_mode_pilot_light+0x5c>)
 8007e9c:	6013      	str	r3, [r2, #0]
		if (joy_mode_pilot_timer >= JOY_MODE_PILOT_TOGGLE_PERIOD) {
 8007e9e:	4b11      	ldr	r3, [pc, #68]	@ (8007ee4 <update_joy_mode_pilot_light+0x5c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ea6:	d318      	bcc.n	8007eda <update_joy_mode_pilot_light+0x52>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8007ea8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007eac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007eb0:	f004 fdd2 	bl	800ca58 <HAL_GPIO_TogglePin>
			joy_mode_pilot_state = !joy_mode_pilot_state;
 8007eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ee8 <update_joy_mode_pilot_light+0x60>)
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	bf14      	ite	ne
 8007ebe:	2301      	movne	r3, #1
 8007ec0:	2300      	moveq	r3, #0
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	f083 0301 	eor.w	r3, r3, #1
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	4b05      	ldr	r3, [pc, #20]	@ (8007ee8 <update_joy_mode_pilot_light+0x60>)
 8007ed2:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 8007ed4:	4b03      	ldr	r3, [pc, #12]	@ (8007ee4 <update_joy_mode_pilot_light+0x5c>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	601a      	str	r2, [r3, #0]
		}
	}
}
 8007eda:	bf00      	nop
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20000580 	.word	0x20000580
 8007ee4:	200005d8 	.word	0x200005d8
 8007ee8:	200005dc 	.word	0x200005dc

08007eec <update_joy_mode>:

void update_joy_mode(void) {
 8007eec:	b590      	push	{r4, r7, lr}
 8007eee:	ed2d 8b02 	vpush	{d8}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
	if (!joy_mode_active) {
 8007ef6:	4b98      	ldr	r3, [pc, #608]	@ (8008158 <update_joy_mode+0x26c>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	f083 0301 	eor.w	r3, r3, #1
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f040 81d5 	bne.w	80082b0 <update_joy_mode+0x3c4>
		return;
	}

	// ALWAYS update position display values when in joy mode
	normalized_position = normalize_angle(revolute_encoder.rads);
 8007f06:	4b95      	ldr	r3, [pc, #596]	@ (800815c <update_joy_mode+0x270>)
 8007f08:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8007f10:	f7fe f922 	bl	8006158 <normalize_angle>
 8007f14:	eef0 7a40 	vmov.f32	s15, s0
 8007f18:	4b91      	ldr	r3, [pc, #580]	@ (8008160 <update_joy_mode+0x274>)
 8007f1a:	edc3 7a00 	vstr	s15, [r3]
	prismatic_axis.mm = prismatic_encoder.mm;
 8007f1e:	4b91      	ldr	r3, [pc, #580]	@ (8008164 <update_joy_mode+0x278>)
 8007f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f22:	4a91      	ldr	r2, [pc, #580]	@ (8008168 <update_joy_mode+0x27c>)
 8007f24:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 8007f26:	4b8e      	ldr	r3, [pc, #568]	@ (8008160 <update_joy_mode+0x274>)
 8007f28:	edd3 7a00 	vldr	s15, [r3]
 8007f2c:	220e      	movs	r2, #14
 8007f2e:	210f      	movs	r1, #15
 8007f30:	eeb0 0a67 	vmov.f32	s0, s15
 8007f34:	488d      	ldr	r0, [pc, #564]	@ (800816c <update_joy_mode+0x280>)
 8007f36:	f7fc fe6b 	bl	8004c10 <UnitConverter_angle>
 8007f3a:	eef0 7a40 	vmov.f32	s15, s0
 8007f3e:	4b8c      	ldr	r3, [pc, #560]	@ (8008170 <update_joy_mode+0x284>)
 8007f40:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);

	switch (joy_mode_state) {
 8007f44:	4b8b      	ldr	r3, [pc, #556]	@ (8008174 <update_joy_mode+0x288>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	f200 81b2 	bhi.w	80082b4 <update_joy_mode+0x3c8>
 8007f50:	a201      	add	r2, pc, #4	@ (adr r2, 8007f58 <update_joy_mode+0x6c>)
 8007f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f56:	bf00      	nop
 8007f58:	08007f6d 	.word	0x08007f6d
 8007f5c:	08007f73 	.word	0x08007f73
 8007f60:	08007f79 	.word	0x08007f79
 8007f64:	08007f87 	.word	0x08007f87
 8007f68:	080082ab 	.word	0x080082ab
	case JOY_MODE_INITIAL_CONTROL:
		// Initial manual joystick control - no position saving yet
		update_joy_mode_velocity_control();
 8007f6c:	f7ff fc60 	bl	8007830 <update_joy_mode_velocity_control>
		break;
 8007f70:	e1a3      	b.n	80082ba <update_joy_mode+0x3ce>

	case JOY_MODE_MANUAL_CONTROL:
		// Manual joystick control with position saving enabled
		update_joy_mode_velocity_control();
 8007f72:	f7ff fc5d 	bl	8007830 <update_joy_mode_velocity_control>
		break;
 8007f76:	e1a0      	b.n	80082ba <update_joy_mode+0x3ce>

	case JOY_MODE_POSITION_SAVED:
		revolute_axis.position = revolute_encoder.rads;
 8007f78:	4b78      	ldr	r3, [pc, #480]	@ (800815c <update_joy_mode+0x270>)
 8007f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f7c:	4a7c      	ldr	r2, [pc, #496]	@ (8008170 <update_joy_mode+0x284>)
 8007f7e:	6013      	str	r3, [r2, #0]
		// 10 positions saved, pilot light toggling, waiting for B2 to start playback
		update_joy_mode_pilot_light();
 8007f80:	f7ff ff82 	bl	8007e88 <update_joy_mode_pilot_light>
		break;
 8007f84:	e199      	b.n	80082ba <update_joy_mode+0x3ce>

	case JOY_MODE_PLAYBACK:
//		revolute_axis.position = revolute_encoder.rads;
		// Playing back saved positions - PILOT LIGHT STAYS ON
		// Handle trajectory sequence states for joy mode playback
		switch (motion_sequence_state) {
 8007f86:	4b7c      	ldr	r3, [pc, #496]	@ (8008178 <update_joy_mode+0x28c>)
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	2b06      	cmp	r3, #6
 8007f8c:	f200 8175 	bhi.w	800827a <update_joy_mode+0x38e>
 8007f90:	a201      	add	r2, pc, #4	@ (adr r2, 8007f98 <update_joy_mode+0xac>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08007fb5 	.word	0x08007fb5
 8007f9c:	08008047 	.word	0x08008047
 8007fa0:	0800806b 	.word	0x0800806b
 8007fa4:	080081b1 	.word	0x080081b1
 8007fa8:	0800827b 	.word	0x0800827b
 8007fac:	08008255 	.word	0x08008255
 8007fb0:	08008273 	.word	0x08008273
		case MOTION_IDLE:
			// Current trajectory finished, wait before starting next

			joy_mode_playback_timer++;
 8007fb4:	4b71      	ldr	r3, [pc, #452]	@ (800817c <update_joy_mode+0x290>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	4a70      	ldr	r2, [pc, #448]	@ (800817c <update_joy_mode+0x290>)
 8007fbc:	6013      	str	r3, [r2, #0]
			if (joy_mode_playback_timer >= JOY_MODE_PLAYBACK_DELAY) {
 8007fbe:	4b6f      	ldr	r3, [pc, #444]	@ (800817c <update_joy_mode+0x290>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007fc6:	f0c0 815a 	bcc.w	800827e <update_joy_mode+0x392>
				playback_position_index++;
 8007fca:	4b6d      	ldr	r3, [pc, #436]	@ (8008180 <update_joy_mode+0x294>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	4b6b      	ldr	r3, [pc, #428]	@ (8008180 <update_joy_mode+0x294>)
 8007fd4:	701a      	strb	r2, [r3, #0]
				if (playback_position_index < saved_position_count) {
 8007fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8008180 <update_joy_mode+0x294>)
 8007fd8:	781a      	ldrb	r2, [r3, #0]
 8007fda:	4b6a      	ldr	r3, [pc, #424]	@ (8008184 <update_joy_mode+0x298>)
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d229      	bcs.n	8008036 <update_joy_mode+0x14a>
					// Start next trajectory
					float target_pris =
							saved_positions[playback_position_index].prismatic_pos;
 8007fe2:	4b67      	ldr	r3, [pc, #412]	@ (8008180 <update_joy_mode+0x294>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
					float target_pris =
 8007fe6:	4a68      	ldr	r2, [pc, #416]	@ (8008188 <update_joy_mode+0x29c>)
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	4413      	add	r3, r2
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	60fb      	str	r3, [r7, #12]
					float target_rev_rad =
							saved_positions[playback_position_index].revolute_pos;
 8007ff0:	4b63      	ldr	r3, [pc, #396]	@ (8008180 <update_joy_mode+0x294>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
					float target_rev_rad =
 8007ff4:	4a64      	ldr	r2, [pc, #400]	@ (8008188 <update_joy_mode+0x29c>)
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	4413      	add	r3, r2
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	60bb      	str	r3, [r7, #8]
					float target_rev_deg = target_rev_rad * 180.0f / PI;
 8008000:	edd7 7a02 	vldr	s15, [r7, #8]
 8008004:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 800818c <update_joy_mode+0x2a0>
 8008008:	ee27 7a87 	vmul.f32	s14, s15, s14
 800800c:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8008190 <update_joy_mode+0x2a4>
 8008010:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008014:	edc7 7a01 	vstr	s15, [r7, #4]
					check[1]++;
 8008018:	4b5e      	ldr	r3, [pc, #376]	@ (8008194 <update_joy_mode+0x2a8>)
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	3301      	adds	r3, #1
 800801e:	4a5d      	ldr	r2, [pc, #372]	@ (8008194 <update_joy_mode+0x2a8>)
 8008020:	6053      	str	r3, [r2, #4]
					start_combined_trajectory(target_pris, target_rev_deg);
 8008022:	edd7 0a01 	vldr	s1, [r7, #4]
 8008026:	ed97 0a03 	vldr	s0, [r7, #12]
 800802a:	f7fe f97f 	bl	800632c <start_combined_trajectory>
					joy_mode_playback_timer = 0;
 800802e:	4b53      	ldr	r3, [pc, #332]	@ (800817c <update_joy_mode+0x290>)
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]

					// Optional: Add some indication that playback is complete
					// You could flash the pilot light or set a status flag here
				}
			}
			break;
 8008034:	e123      	b.n	800827e <update_joy_mode+0x392>
					check[9]++;
 8008036:	4b57      	ldr	r3, [pc, #348]	@ (8008194 <update_joy_mode+0x2a8>)
 8008038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803a:	3301      	adds	r3, #1
 800803c:	4a55      	ldr	r2, [pc, #340]	@ (8008194 <update_joy_mode+0x2a8>)
 800803e:	6253      	str	r3, [r2, #36]	@ 0x24
					exit_joy_mode();
 8008040:	f7ff fa18 	bl	8007474 <exit_joy_mode>
			break;
 8008044:	e11b      	b.n	800827e <update_joy_mode+0x392>

		case MOTION_PEN_UP_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 8008046:	4b54      	ldr	r3, [pc, #336]	@ (8008198 <update_joy_mode+0x2ac>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3301      	adds	r3, #1
 800804c:	4a52      	ldr	r2, [pc, #328]	@ (8008198 <update_joy_mode+0x2ac>)
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	f240 52db 	movw	r2, #1499	@ 0x5db
 8008054:	4293      	cmp	r3, r2
 8008056:	f240 8114 	bls.w	8008282 <update_joy_mode+0x396>
				prismatic_axis.trajectory_active = true;
 800805a:	4b43      	ldr	r3, [pc, #268]	@ (8008168 <update_joy_mode+0x27c>)
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 8008062:	4b45      	ldr	r3, [pc, #276]	@ (8008178 <update_joy_mode+0x28c>)
 8008064:	2202      	movs	r2, #2
 8008066:	701a      	strb	r2, [r3, #0]
			}
			break;
 8008068:	e10b      	b.n	8008282 <update_joy_mode+0x396>

		case MOTION_PRISMATIC_ACTIVE:
			check[6]++;
 800806a:	4b4a      	ldr	r3, [pc, #296]	@ (8008194 <update_joy_mode+0x2a8>)
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	3301      	adds	r3, #1
 8008070:	4a48      	ldr	r2, [pc, #288]	@ (8008194 <update_joy_mode+0x2a8>)
 8008072:	6193      	str	r3, [r2, #24]
			if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8008074:	4b3c      	ldr	r3, [pc, #240]	@ (8008168 <update_joy_mode+0x27c>)
 8008076:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 8103 	beq.w	8008286 <update_joy_mode+0x39a>
 8008080:	4b46      	ldr	r3, [pc, #280]	@ (800819c <update_joy_mode+0x2b0>)
 8008082:	7c1b      	ldrb	r3, [r3, #16]
 8008084:	f083 0301 	eor.w	r3, r3, #1
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 80fb 	beq.w	8008286 <update_joy_mode+0x39a>
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8008090:	4b35      	ldr	r3, [pc, #212]	@ (8008168 <update_joy_mode+0x27c>)
 8008092:	ed93 8a03 	vldr	s16, [r3, #12]
 8008096:	4b34      	ldr	r3, [pc, #208]	@ (8008168 <update_joy_mode+0x27c>)
 8008098:	edd3 8a04 	vldr	s17, [r3, #16]
						prismatic_axis.initial_pos, prismatic_axis.target_pos,
						ZGX45RGG_400RPM_Constant.traject_sd_max,
 800809c:	4b40      	ldr	r3, [pc, #256]	@ (80081a0 <update_joy_mode+0x2b4>)
 800809e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 80080a2:	4610      	mov	r0, r2
 80080a4:	4619      	mov	r1, r3
 80080a6:	f7f8 fd55 	bl	8000b54 <__aeabi_d2f>
 80080aa:	4604      	mov	r4, r0
						ZGX45RGG_400RPM_Constant.traject_sdd_max);
 80080ac:	4b3c      	ldr	r3, [pc, #240]	@ (80081a0 <update_joy_mode+0x2b4>)
 80080ae:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 80080b2:	4610      	mov	r0, r2
 80080b4:	4619      	mov	r1, r3
 80080b6:	f7f8 fd4d 	bl	8000b54 <__aeabi_d2f>
 80080ba:	4603      	mov	r3, r0
 80080bc:	ee01 3a90 	vmov	s3, r3
 80080c0:	ee01 4a10 	vmov	s2, r4
 80080c4:	eef0 0a68 	vmov.f32	s1, s17
 80080c8:	eeb0 0a48 	vmov.f32	s0, s16
 80080cc:	4933      	ldr	r1, [pc, #204]	@ (800819c <update_joy_mode+0x2b0>)
 80080ce:	4835      	ldr	r0, [pc, #212]	@ (80081a4 <update_joy_mode+0x2b8>)
 80080d0:	f7fc fa06 	bl	80044e0 <Trapezoidal_Evaluated>

				prismatic_axis.position = prisEva.setposition;
 80080d4:	4b31      	ldr	r3, [pc, #196]	@ (800819c <update_joy_mode+0x2b0>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a23      	ldr	r2, [pc, #140]	@ (8008168 <update_joy_mode+0x27c>)
 80080da:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = prisEva.setvelocity;
 80080dc:	4b2f      	ldr	r3, [pc, #188]	@ (800819c <update_joy_mode+0x2b0>)
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	4a21      	ldr	r2, [pc, #132]	@ (8008168 <update_joy_mode+0x27c>)
 80080e2:	6053      	str	r3, [r2, #4]

				if (prisEva.isFinised) {
 80080e4:	4b2d      	ldr	r3, [pc, #180]	@ (800819c <update_joy_mode+0x2b0>)
 80080e6:	7c1b      	ldrb	r3, [r3, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 80cc 	beq.w	8008286 <update_joy_mode+0x39a>
					prismatic_axis.trajectory_active = false;
 80080ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008168 <update_joy_mode+0x27c>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					prismatic_axis.position = prisEva.setposition;
 80080f6:	4b29      	ldr	r3, [pc, #164]	@ (800819c <update_joy_mode+0x2b0>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a1b      	ldr	r2, [pc, #108]	@ (8008168 <update_joy_mode+0x27c>)
 80080fc:	6013      	str	r3, [r2, #0]
					prismatic_axis.velocity = 0.0f;
 80080fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008168 <update_joy_mode+0x27c>)
 8008100:	f04f 0200 	mov.w	r2, #0
 8008104:	605a      	str	r2, [r3, #4]

					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8008106:	4b1a      	ldr	r3, [pc, #104]	@ (8008170 <update_joy_mode+0x284>)
 8008108:	ed93 8a03 	vldr	s16, [r3, #12]
 800810c:	4b18      	ldr	r3, [pc, #96]	@ (8008170 <update_joy_mode+0x284>)
 800810e:	edd3 8a04 	vldr	s17, [r3, #16]
							revolute_axis.target_pos,
							ZGX45RGG_150RPM_Constant.traject_qd_max,
 8008112:	4b25      	ldr	r3, [pc, #148]	@ (80081a8 <update_joy_mode+0x2bc>)
 8008114:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8008118:	4610      	mov	r0, r2
 800811a:	4619      	mov	r1, r3
 800811c:	f7f8 fd1a 	bl	8000b54 <__aeabi_d2f>
 8008120:	4604      	mov	r4, r0
							ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8008122:	4b21      	ldr	r3, [pc, #132]	@ (80081a8 <update_joy_mode+0x2bc>)
 8008124:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8008128:	4610      	mov	r0, r2
 800812a:	4619      	mov	r1, r3
 800812c:	f7f8 fd12 	bl	8000b54 <__aeabi_d2f>
 8008130:	4603      	mov	r3, r0
 8008132:	ee01 3a90 	vmov	s3, r3
 8008136:	ee01 4a10 	vmov	s2, r4
 800813a:	eef0 0a68 	vmov.f32	s1, s17
 800813e:	eeb0 0a48 	vmov.f32	s0, s16
 8008142:	481a      	ldr	r0, [pc, #104]	@ (80081ac <update_joy_mode+0x2c0>)
 8008144:	f7fc f90a 	bl	800435c <Trapezoidal_Generator>

					revolute_axis.trajectory_active = true;
 8008148:	4b09      	ldr	r3, [pc, #36]	@ (8008170 <update_joy_mode+0x284>)
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8008150:	4b09      	ldr	r3, [pc, #36]	@ (8008178 <update_joy_mode+0x28c>)
 8008152:	2203      	movs	r2, #3
 8008154:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8008156:	e096      	b.n	8008286 <update_joy_mode+0x39a>
 8008158:	20000581 	.word	0x20000581
 800815c:	20000728 	.word	0x20000728
 8008160:	20000578 	.word	0x20000578
 8008164:	200006cc 	.word	0x200006cc
 8008168:	20000480 	.word	0x20000480
 800816c:	20000ac0 	.word	0x20000ac0
 8008170:	200004c4 	.word	0x200004c4
 8008174:	20000580 	.word	0x20000580
 8008178:	20000508 	.word	0x20000508
 800817c:	200005e0 	.word	0x200005e0
 8008180:	200005d5 	.word	0x200005d5
 8008184:	200005d4 	.word	0x200005d4
 8008188:	20000584 	.word	0x20000584
 800818c:	43340000 	.word	0x43340000
 8008190:	40490fdb 	.word	0x40490fdb
 8008194:	200005e8 	.word	0x200005e8
 8008198:	2000055c 	.word	0x2000055c
 800819c:	20000534 	.word	0x20000534
 80081a0:	20000080 	.word	0x20000080
 80081a4:	2000050c 	.word	0x2000050c
 80081a8:	20000000 	.word	0x20000000
 80081ac:	20000520 	.word	0x20000520

		case MOTION_REVOLUTE_ACTIVE:
			check[7]++;
 80081b0:	4b44      	ldr	r3, [pc, #272]	@ (80082c4 <update_joy_mode+0x3d8>)
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	3301      	adds	r3, #1
 80081b6:	4a43      	ldr	r2, [pc, #268]	@ (80082c4 <update_joy_mode+0x3d8>)
 80081b8:	61d3      	str	r3, [r2, #28]
			if (revolute_axis.trajectory_active && !revEva.isFinised) {
 80081ba:	4b43      	ldr	r3, [pc, #268]	@ (80082c8 <update_joy_mode+0x3dc>)
 80081bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d062      	beq.n	800828a <update_joy_mode+0x39e>
 80081c4:	4b41      	ldr	r3, [pc, #260]	@ (80082cc <update_joy_mode+0x3e0>)
 80081c6:	7c1b      	ldrb	r3, [r3, #16]
 80081c8:	f083 0301 	eor.w	r3, r3, #1
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d05b      	beq.n	800828a <update_joy_mode+0x39e>
				Trapezoidal_Evaluated(&revGen, &revEva,
 80081d2:	4b3d      	ldr	r3, [pc, #244]	@ (80082c8 <update_joy_mode+0x3dc>)
 80081d4:	ed93 8a03 	vldr	s16, [r3, #12]
 80081d8:	4b3b      	ldr	r3, [pc, #236]	@ (80082c8 <update_joy_mode+0x3dc>)
 80081da:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.initial_pos, revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 80081de:	4b3c      	ldr	r3, [pc, #240]	@ (80082d0 <update_joy_mode+0x3e4>)
 80081e0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Evaluated(&revGen, &revEva,
 80081e4:	4610      	mov	r0, r2
 80081e6:	4619      	mov	r1, r3
 80081e8:	f7f8 fcb4 	bl	8000b54 <__aeabi_d2f>
 80081ec:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80081ee:	4b38      	ldr	r3, [pc, #224]	@ (80082d0 <update_joy_mode+0x3e4>)
 80081f0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Evaluated(&revGen, &revEva,
 80081f4:	4610      	mov	r0, r2
 80081f6:	4619      	mov	r1, r3
 80081f8:	f7f8 fcac 	bl	8000b54 <__aeabi_d2f>
 80081fc:	4603      	mov	r3, r0
 80081fe:	ee01 3a90 	vmov	s3, r3
 8008202:	ee01 4a10 	vmov	s2, r4
 8008206:	eef0 0a68 	vmov.f32	s1, s17
 800820a:	eeb0 0a48 	vmov.f32	s0, s16
 800820e:	492f      	ldr	r1, [pc, #188]	@ (80082cc <update_joy_mode+0x3e0>)
 8008210:	4830      	ldr	r0, [pc, #192]	@ (80082d4 <update_joy_mode+0x3e8>)
 8008212:	f7fc f965 	bl	80044e0 <Trapezoidal_Evaluated>

				revolute_axis.position = revEva.setposition;
 8008216:	4b2d      	ldr	r3, [pc, #180]	@ (80082cc <update_joy_mode+0x3e0>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a2b      	ldr	r2, [pc, #172]	@ (80082c8 <update_joy_mode+0x3dc>)
 800821c:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = revEva.setvelocity;
 800821e:	4b2b      	ldr	r3, [pc, #172]	@ (80082cc <update_joy_mode+0x3e0>)
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	4a29      	ldr	r2, [pc, #164]	@ (80082c8 <update_joy_mode+0x3dc>)
 8008224:	6053      	str	r3, [r2, #4]

				if (revEva.isFinised) {
 8008226:	4b29      	ldr	r3, [pc, #164]	@ (80082cc <update_joy_mode+0x3e0>)
 8008228:	7c1b      	ldrb	r3, [r3, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d02d      	beq.n	800828a <update_joy_mode+0x39e>
					revolute_axis.trajectory_active = false;
 800822e:	4b26      	ldr	r3, [pc, #152]	@ (80082c8 <update_joy_mode+0x3dc>)
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					revolute_axis.position = revEva.setposition;
 8008236:	4b25      	ldr	r3, [pc, #148]	@ (80082cc <update_joy_mode+0x3e0>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a23      	ldr	r2, [pc, #140]	@ (80082c8 <update_joy_mode+0x3dc>)
 800823c:	6013      	str	r3, [r2, #0]
					revolute_axis.velocity = 0.0f;
 800823e:	4b22      	ldr	r3, [pc, #136]	@ (80082c8 <update_joy_mode+0x3dc>)
 8008240:	f04f 0200 	mov.w	r2, #0
 8008244:	605a      	str	r2, [r3, #4]

//					PID_CONTROLLER_Reset(&revolute_position_pid);
//					PID_CONTROLLER_Reset(&revolute_velocity_pid);

					motion_delay_timer = 0;
 8008246:	4b24      	ldr	r3, [pc, #144]	@ (80082d8 <update_joy_mode+0x3ec>)
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]
					motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 800824c:	4b23      	ldr	r3, [pc, #140]	@ (80082dc <update_joy_mode+0x3f0>)
 800824e:	2205      	movs	r2, #5
 8008250:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8008252:	e01a      	b.n	800828a <update_joy_mode+0x39e>

		case MOTION_PEN_DOWN_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 8008254:	4b20      	ldr	r3, [pc, #128]	@ (80082d8 <update_joy_mode+0x3ec>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3301      	adds	r3, #1
 800825a:	4a1f      	ldr	r2, [pc, #124]	@ (80082d8 <update_joy_mode+0x3ec>)
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8008262:	4293      	cmp	r3, r2
 8008264:	d913      	bls.n	800828e <update_joy_mode+0x3a2>
				plotter_pen_down();
 8008266:	f001 f897 	bl	8009398 <plotter_pen_down>
				motion_sequence_state = MOTION_COMPLETE;
 800826a:	4b1c      	ldr	r3, [pc, #112]	@ (80082dc <update_joy_mode+0x3f0>)
 800826c:	2206      	movs	r2, #6
 800826e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8008270:	e00d      	b.n	800828e <update_joy_mode+0x3a2>

		case MOTION_COMPLETE:
			motion_sequence_state = MOTION_IDLE;
 8008272:	4b1a      	ldr	r3, [pc, #104]	@ (80082dc <update_joy_mode+0x3f0>)
 8008274:	2200      	movs	r2, #0
 8008276:	701a      	strb	r2, [r3, #0]
			break;
 8008278:	e00a      	b.n	8008290 <update_joy_mode+0x3a4>

		default:
			break;
 800827a:	bf00      	nop
 800827c:	e008      	b.n	8008290 <update_joy_mode+0x3a4>
			break;
 800827e:	bf00      	nop
 8008280:	e006      	b.n	8008290 <update_joy_mode+0x3a4>
			break;
 8008282:	bf00      	nop
 8008284:	e004      	b.n	8008290 <update_joy_mode+0x3a4>
			break;
 8008286:	bf00      	nop
 8008288:	e002      	b.n	8008290 <update_joy_mode+0x3a4>
			break;
 800828a:	bf00      	nop
 800828c:	e000      	b.n	8008290 <update_joy_mode+0x3a4>
			break;
 800828e:	bf00      	nop
		}

		// Update position/velocity control for trajectory playback
		if (motion_sequence_state != MOTION_IDLE) {
 8008290:	4b12      	ldr	r3, [pc, #72]	@ (80082dc <update_joy_mode+0x3f0>)
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00f      	beq.n	80082b8 <update_joy_mode+0x3cc>
			// Run position control if not in manual control
			if (position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8008298:	4b11      	ldr	r3, [pc, #68]	@ (80082e0 <update_joy_mode+0x3f4>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b09      	cmp	r3, #9
 800829e:	d901      	bls.n	80082a4 <update_joy_mode+0x3b8>
				update_position_control();
 80082a0:	f7fe f9b2 	bl	8006608 <update_position_control>
			}
			// Always run velocity control during trajectory
			update_velocity_control();
 80082a4:	f7fe fa70 	bl	8006788 <update_velocity_control>
		}
		break;
 80082a8:	e006      	b.n	80082b8 <update_joy_mode+0x3cc>

	case JOY_MODE_COMPLETE:
		exit_joy_mode();
 80082aa:	f7ff f8e3 	bl	8007474 <exit_joy_mode>
		break;
 80082ae:	e004      	b.n	80082ba <update_joy_mode+0x3ce>
		return;
 80082b0:	bf00      	nop
 80082b2:	e002      	b.n	80082ba <update_joy_mode+0x3ce>

	default:
		break;
 80082b4:	bf00      	nop
 80082b6:	e000      	b.n	80082ba <update_joy_mode+0x3ce>
		break;
 80082b8:	bf00      	nop
	}
}
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	ecbd 8b02 	vpop	{d8}
 80082c2:	bd90      	pop	{r4, r7, pc}
 80082c4:	200005e8 	.word	0x200005e8
 80082c8:	200004c4 	.word	0x200004c4
 80082cc:	20000548 	.word	0x20000548
 80082d0:	20000000 	.word	0x20000000
 80082d4:	20000520 	.word	0x20000520
 80082d8:	2000055c 	.word	0x2000055c
 80082dc:	20000508 	.word	0x20000508
 80082e0:	20000574 	.word	0x20000574

080082e4 <handle_b2_button_polling>:

void handle_b2_button_polling(void) {
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
	// Read current B2 button state (assuming active low like other buttons)
	bool b2_current_state = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 80082ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80082ee:	4835      	ldr	r0, [pc, #212]	@ (80083c4 <handle_b2_button_polling+0xe0>)
 80082f0:	f004 fb82 	bl	800c9f8 <HAL_GPIO_ReadPin>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	bf0c      	ite	eq
 80082fa:	2301      	moveq	r3, #1
 80082fc:	2300      	movne	r3, #0
 80082fe:	71fb      	strb	r3, [r7, #7]

//	b2S[0] = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
	static uint32_t last_press_time = 0;
	static uint32_t press_counter = 0;
	const uint32_t DEBOUNCE_TIME = 200; // 200ms debounce time
 8008300:	23c8      	movs	r3, #200	@ 0xc8
 8008302:	603b      	str	r3, [r7, #0]

	press_counter++; // Increment every timer tick (assuming 1ms timer)
 8008304:	4b30      	ldr	r3, [pc, #192]	@ (80083c8 <handle_b2_button_polling+0xe4>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3301      	adds	r3, #1
 800830a:	4a2f      	ldr	r2, [pc, #188]	@ (80083c8 <handle_b2_button_polling+0xe4>)
 800830c:	6013      	str	r3, [r2, #0]

//	 Edge detection with debouncing
	if (b2_current_state && !joy_mode_b2_last_state) {
 800830e:	79fb      	ldrb	r3, [r7, #7]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d047      	beq.n	80083a4 <handle_b2_button_polling+0xc0>
 8008314:	4b2d      	ldr	r3, [pc, #180]	@ (80083cc <handle_b2_button_polling+0xe8>)
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	f083 0301 	eor.w	r3, r3, #1
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d040      	beq.n	80083a4 <handle_b2_button_polling+0xc0>
//	 Button just pressed - check if enough time has passed since last press
		if ((press_counter - last_press_time) >= DEBOUNCE_TIME) {
 8008322:	4b29      	ldr	r3, [pc, #164]	@ (80083c8 <handle_b2_button_polling+0xe4>)
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	4b2a      	ldr	r3, [pc, #168]	@ (80083d0 <handle_b2_button_polling+0xec>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	683a      	ldr	r2, [r7, #0]
 800832e:	429a      	cmp	r2, r3
 8008330:	d838      	bhi.n	80083a4 <handle_b2_button_polling+0xc0>
			// Button press is valid - trigger action
			joy_mode_b2_pressed = true;
 8008332:	4b28      	ldr	r3, [pc, #160]	@ (80083d4 <handle_b2_button_polling+0xf0>)
 8008334:	2201      	movs	r2, #1
 8008336:	701a      	strb	r2, [r3, #0]
			last_press_time = press_counter;
 8008338:	4b23      	ldr	r3, [pc, #140]	@ (80083c8 <handle_b2_button_polling+0xe4>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a24      	ldr	r2, [pc, #144]	@ (80083d0 <handle_b2_button_polling+0xec>)
 800833e:	6013      	str	r3, [r2, #0]

//	if (b2S[0] != b2S[1] && b2S[0] == 1) {
			// Handle B2 button press logic
			if (!is_emergency_active() && !homing_active
 8008340:	f7ff f816 	bl	8007370 <is_emergency_active>
 8008344:	4603      	mov	r3, r0
 8008346:	f083 0301 	eor.w	r3, r3, #1
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b00      	cmp	r3, #0
 800834e:	d029      	beq.n	80083a4 <handle_b2_button_polling+0xc0>
 8008350:	4b21      	ldr	r3, [pc, #132]	@ (80083d8 <handle_b2_button_polling+0xf4>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	f083 0301 	eor.w	r3, r3, #1
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d022      	beq.n	80083a4 <handle_b2_button_polling+0xc0>
					&& motion_sequence_state == MOTION_IDLE) {
 800835e:	4b1f      	ldr	r3, [pc, #124]	@ (80083dc <handle_b2_button_polling+0xf8>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d11e      	bne.n	80083a4 <handle_b2_button_polling+0xc0>
				if (!joy_mode_active) {
 8008366:	4b1e      	ldr	r3, [pc, #120]	@ (80083e0 <handle_b2_button_polling+0xfc>)
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	f083 0301 	eor.w	r3, r3, #1
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <handle_b2_button_polling+0x96>
					// Enter joy mode (starts in JOY_MODE_INITIAL_CONTROL)
					enter_joy_mode();
 8008374:	f7ff f80c 	bl	8007390 <enter_joy_mode>
 8008378:	e014      	b.n	80083a4 <handle_b2_button_polling+0xc0>
				} else {
					// Joy mode is active, handle button press based on current state
					if (joy_mode_state == JOY_MODE_INITIAL_CONTROL) {
 800837a:	4b1a      	ldr	r3, [pc, #104]	@ (80083e4 <handle_b2_button_polling+0x100>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d103      	bne.n	800838a <handle_b2_button_polling+0xa6>
						// First B2 press in joy mode - start position saving mode
						joy_mode_state = JOY_MODE_MANUAL_CONTROL;
 8008382:	4b18      	ldr	r3, [pc, #96]	@ (80083e4 <handle_b2_button_polling+0x100>)
 8008384:	2202      	movs	r2, #2
 8008386:	701a      	strb	r2, [r3, #0]
 8008388:	e00c      	b.n	80083a4 <handle_b2_button_polling+0xc0>
					} else if (joy_mode_state == JOY_MODE_MANUAL_CONTROL) {
 800838a:	4b16      	ldr	r3, [pc, #88]	@ (80083e4 <handle_b2_button_polling+0x100>)
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	2b02      	cmp	r3, #2
 8008390:	d102      	bne.n	8008398 <handle_b2_button_polling+0xb4>

						save_current_position();
 8008392:	f7ff f8fb 	bl	800758c <save_current_position>
 8008396:	e005      	b.n	80083a4 <handle_b2_button_polling+0xc0>

						// Save current position
					} else if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8008398:	4b12      	ldr	r3, [pc, #72]	@ (80083e4 <handle_b2_button_polling+0x100>)
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	2b03      	cmp	r3, #3
 800839e:	d101      	bne.n	80083a4 <handle_b2_button_polling+0xc0>
						start_position_playback();
 80083a0:	f7ff f9ac 	bl	80076fc <start_position_playback>
//	b2S[1] = b2S[0];
		// If not enough time has passed, ignore this button press
	}

// Update last state
	joy_mode_b2_last_state = b2_current_state;
 80083a4:	4a09      	ldr	r2, [pc, #36]	@ (80083cc <handle_b2_button_polling+0xe8>)
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	7013      	strb	r3, [r2, #0]
//
//// Reset pressed flag when button is released
	if (!b2_current_state) {
 80083aa:	79fb      	ldrb	r3, [r7, #7]
 80083ac:	f083 0301 	eor.w	r3, r3, #1
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d002      	beq.n	80083bc <handle_b2_button_polling+0xd8>
		joy_mode_b2_pressed = false;
 80083b6:	4b07      	ldr	r3, [pc, #28]	@ (80083d4 <handle_b2_button_polling+0xf0>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	701a      	strb	r2, [r3, #0]
	}
}
 80083bc:	bf00      	nop
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	48000800 	.word	0x48000800
 80083c8:	2000062c 	.word	0x2000062c
 80083cc:	200005e5 	.word	0x200005e5
 80083d0:	20000630 	.word	0x20000630
 80083d4:	200005e4 	.word	0x200005e4
 80083d8:	20000567 	.word	0x20000567
 80083dc:	20000508 	.word	0x20000508
 80083e0:	20000581 	.word	0x20000581
 80083e4:	20000580 	.word	0x20000580

080083e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	4603      	mov	r3, r0
 80083f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PROX_Pin) {
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	2b40      	cmp	r3, #64	@ 0x40
 80083f6:	d105      	bne.n	8008404 <HAL_GPIO_EXTI_Callback+0x1c>
		prox_count++;
 80083f8:	4b52      	ldr	r3, [pc, #328]	@ (8008544 <HAL_GPIO_EXTI_Callback+0x15c>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3301      	adds	r3, #1
 80083fe:	4a51      	ldr	r2, [pc, #324]	@ (8008544 <HAL_GPIO_EXTI_Callback+0x15c>)
 8008400:	6013      	str	r3, [r2, #0]
		return;
 8008402:	e09c      	b.n	800853e <HAL_GPIO_EXTI_Callback+0x156>
	}

	if (GPIO_Pin == UPPER_PHOTO_Pin) {
 8008404:	88fb      	ldrh	r3, [r7, #6]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d103      	bne.n	8008412 <HAL_GPIO_EXTI_Callback+0x2a>
		up_photo = true;
 800840a:	4b4f      	ldr	r3, [pc, #316]	@ (8008548 <HAL_GPIO_EXTI_Callback+0x160>)
 800840c:	2201      	movs	r2, #1
 800840e:	701a      	strb	r2, [r3, #0]
		return;
 8008410:	e095      	b.n	800853e <HAL_GPIO_EXTI_Callback+0x156>
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 8008412:	88fb      	ldrh	r3, [r7, #6]
 8008414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008418:	d103      	bne.n	8008422 <HAL_GPIO_EXTI_Callback+0x3a>
		low_photo = true;
 800841a:	4b4c      	ldr	r3, [pc, #304]	@ (800854c <HAL_GPIO_EXTI_Callback+0x164>)
 800841c:	2201      	movs	r2, #1
 800841e:	701a      	strb	r2, [r3, #0]
		return;
 8008420:	e08d      	b.n	800853e <HAL_GPIO_EXTI_Callback+0x156>
	}

	if (GPIO_Pin == EMER_Pin) {
 8008422:	88fb      	ldrh	r3, [r7, #6]
 8008424:	2b10      	cmp	r3, #16
 8008426:	d102      	bne.n	800842e <HAL_GPIO_EXTI_Callback+0x46>
		trigger_hardware_emergency();
 8008428:	f7fe fe72 	bl	8007110 <trigger_hardware_emergency>
		return;
 800842c:	e087      	b.n	800853e <HAL_GPIO_EXTI_Callback+0x156>
	}

	if (GPIO_Pin == J1_Pin) {
 800842e:	88fb      	ldrh	r3, [r7, #6]
 8008430:	2b80      	cmp	r3, #128	@ 0x80
 8008432:	d14e      	bne.n	80084d2 <HAL_GPIO_EXTI_Callback+0xea>

		uint32_t current_time = HAL_GetTick();
 8008434:	f002 f898 	bl	800a568 <HAL_GetTick>
 8008438:	60f8      	str	r0, [r7, #12]
		if ((current_time - j1_interrupt_last_time) < 200) {
 800843a:	4b45      	ldr	r3, [pc, #276]	@ (8008550 <HAL_GPIO_EXTI_Callback+0x168>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	2bc7      	cmp	r3, #199	@ 0xc7
 8008444:	d976      	bls.n	8008534 <HAL_GPIO_EXTI_Callback+0x14c>
		    return; // ignore ถ้ายังไม่ครบ 200ms
		}
		j1_interrupt_last_time = current_time;
 8008446:	4a42      	ldr	r2, [pc, #264]	@ (8008550 <HAL_GPIO_EXTI_Callback+0x168>)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6013      	str	r3, [r2, #0]

		if (!is_emergency_active() && !homing_active && !joy_mode_active
 800844c:	f7fe ff90 	bl	8007370 <is_emergency_active>
 8008450:	4603      	mov	r3, r0
 8008452:	f083 0301 	eor.w	r3, r3, #1
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	d03a      	beq.n	80084d2 <HAL_GPIO_EXTI_Callback+0xea>
 800845c:	4b3d      	ldr	r3, [pc, #244]	@ (8008554 <HAL_GPIO_EXTI_Callback+0x16c>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	f083 0301 	eor.w	r3, r3, #1
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d033      	beq.n	80084d2 <HAL_GPIO_EXTI_Callback+0xea>
 800846a:	4b3b      	ldr	r3, [pc, #236]	@ (8008558 <HAL_GPIO_EXTI_Callback+0x170>)
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	f083 0301 	eor.w	r3, r3, #1
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b00      	cmp	r3, #0
 8008476:	d02c      	beq.n	80084d2 <HAL_GPIO_EXTI_Callback+0xea>
				&& !first_startup ) {
 8008478:	4b38      	ldr	r3, [pc, #224]	@ (800855c <HAL_GPIO_EXTI_Callback+0x174>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	f083 0301 	eor.w	r3, r3, #1
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d025      	beq.n	80084d2 <HAL_GPIO_EXTI_Callback+0xea>
			check[0]++;
 8008486:	4b36      	ldr	r3, [pc, #216]	@ (8008560 <HAL_GPIO_EXTI_Callback+0x178>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3301      	adds	r3, #1
 800848c:	4a34      	ldr	r2, [pc, #208]	@ (8008560 <HAL_GPIO_EXTI_Callback+0x178>)
 800848e:	6013      	str	r3, [r2, #0]
			if (!j1_active) {
 8008490:	4b34      	ldr	r3, [pc, #208]	@ (8008564 <HAL_GPIO_EXTI_Callback+0x17c>)
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	f083 0301 	eor.w	r3, r3, #1
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d013      	beq.n	80084c6 <HAL_GPIO_EXTI_Callback+0xde>
				// start Again
				j1_active = true;
 800849e:	4b31      	ldr	r3, [pc, #196]	@ (8008564 <HAL_GPIO_EXTI_Callback+0x17c>)
 80084a0:	2201      	movs	r2, #1
 80084a2:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 80084a4:	4b30      	ldr	r3, [pc, #192]	@ (8008568 <HAL_GPIO_EXTI_Callback+0x180>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	701a      	strb	r2, [r3, #0]
				j1_going_to_target = true;
 80084aa:	4b30      	ldr	r3, [pc, #192]	@ (800856c <HAL_GPIO_EXTI_Callback+0x184>)
 80084ac:	2201      	movs	r2, #1
 80084ae:	701a      	strb	r2, [r3, #0]

				// go to target
				start_combined_trajectory(J1_TARGET_PRIS, J1_TARGET_REV);
 80084b0:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8008570 <HAL_GPIO_EXTI_Callback+0x188>
 80084b4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008574 <HAL_GPIO_EXTI_Callback+0x18c>
 80084b8:	eef0 0a47 	vmov.f32	s1, s14
 80084bc:	eeb0 0a67 	vmov.f32	s0, s15
 80084c0:	f7fd ff34 	bl	800632c <start_combined_trajectory>
 80084c4:	e005      	b.n	80084d2 <HAL_GPIO_EXTI_Callback+0xea>
			} else {
				// stop

				j1_active = false;
 80084c6:	4b27      	ldr	r3, [pc, #156]	@ (8008564 <HAL_GPIO_EXTI_Callback+0x17c>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 80084cc:	4b26      	ldr	r3, [pc, #152]	@ (8008568 <HAL_GPIO_EXTI_Callback+0x180>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	701a      	strb	r2, [r3, #0]
			}
		}
	}
// J2 is NOT handled here anymore - it's polled in the main loop

		if (GPIO_Pin == J3_Pin) {
 80084d2:	88fb      	ldrh	r3, [r7, #6]
 80084d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084d8:	d116      	bne.n	8008508 <HAL_GPIO_EXTI_Callback+0x120>
			if (!is_emergency_active() && !joy_mode_active
 80084da:	f7fe ff49 	bl	8007370 <is_emergency_active>
 80084de:	4603      	mov	r3, r0
 80084e0:	f083 0301 	eor.w	r3, r3, #1
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d026      	beq.n	8008538 <HAL_GPIO_EXTI_Callback+0x150>
 80084ea:	4b1b      	ldr	r3, [pc, #108]	@ (8008558 <HAL_GPIO_EXTI_Callback+0x170>)
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	f083 0301 	eor.w	r3, r3, #1
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d01f      	beq.n	8008538 <HAL_GPIO_EXTI_Callback+0x150>
					&& motion_sequence_state == MOTION_IDLE) {
 80084f8:	4b1f      	ldr	r3, [pc, #124]	@ (8008578 <HAL_GPIO_EXTI_Callback+0x190>)
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d11b      	bne.n	8008538 <HAL_GPIO_EXTI_Callback+0x150>
				start_homing_sequence(false);
 8008500:	2000      	movs	r0, #0
 8008502:	f7fd f9fd 	bl	8005900 <start_homing_sequence>
			}
			return;
 8008506:	e017      	b.n	8008538 <HAL_GPIO_EXTI_Callback+0x150>
		}

// Modified J4 button handler for joy mode exit
		if (GPIO_Pin == J4_Pin) {
 8008508:	88fb      	ldrh	r3, [r7, #6]
 800850a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800850e:	d116      	bne.n	800853e <HAL_GPIO_EXTI_Callback+0x156>
			if (joy_mode_active) {
 8008510:	4b11      	ldr	r3, [pc, #68]	@ (8008558 <HAL_GPIO_EXTI_Callback+0x170>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <HAL_GPIO_EXTI_Callback+0x136>
				// Exit joy mode and hold current position (don't move)
				exit_joy_mode();
 8008518:	f7fe ffac 	bl	8007474 <exit_joy_mode>
			} else if (is_emergency_active()) {
				clear_emergency_state();
				start_homing_sequence(true);
			}
			return;
 800851c:	e00e      	b.n	800853c <HAL_GPIO_EXTI_Callback+0x154>
			} else if (is_emergency_active()) {
 800851e:	f7fe ff27 	bl	8007370 <is_emergency_active>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d009      	beq.n	800853c <HAL_GPIO_EXTI_Callback+0x154>
				clear_emergency_state();
 8008528:	f7fe fe30 	bl	800718c <clear_emergency_state>
				start_homing_sequence(true);
 800852c:	2001      	movs	r0, #1
 800852e:	f7fd f9e7 	bl	8005900 <start_homing_sequence>
			return;
 8008532:	e003      	b.n	800853c <HAL_GPIO_EXTI_Callback+0x154>
		    return; // ignore ถ้ายังไม่ครบ 200ms
 8008534:	bf00      	nop
 8008536:	e002      	b.n	800853e <HAL_GPIO_EXTI_Callback+0x156>
			return;
 8008538:	bf00      	nop
 800853a:	e000      	b.n	800853e <HAL_GPIO_EXTI_Callback+0x156>
			return;
 800853c:	bf00      	nop
		}
	}
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	20000560 	.word	0x20000560
 8008548:	20000564 	.word	0x20000564
 800854c:	20000565 	.word	0x20000565
 8008550:	20000614 	.word	0x20000614
 8008554:	20000567 	.word	0x20000567
 8008558:	20000581 	.word	0x20000581
 800855c:	20000333 	.word	0x20000333
 8008560:	200005e8 	.word	0x200005e8
 8008564:	20000611 	.word	0x20000611
 8008568:	20000610 	.word	0x20000610
 800856c:	20000335 	.word	0x20000335
 8008570:	43480000 	.word	0x43480000
 8008574:	42b40000 	.word	0x42b40000
 8008578:	20000508 	.word	0x20000508

0800857c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4aa3      	ldr	r2, [pc, #652]	@ (8008814 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8008588:	4293      	cmp	r3, r2
 800858a:	f040 813f 	bne.w	800880c <HAL_TIM_PeriodElapsedCallback+0x290>
		Modbus_Protocal_Worker();
 800858e:	f7f9 fd83 	bl	8002098 <Modbus_Protocal_Worker>
		modbus_working();
 8008592:	f000 f969 	bl	8008868 <modbus_working>

		plotter_update_sensors();
 8008596:	f000 fe49 	bl	800922c <plotter_update_sensors>
		check_emergency_button();
 800859a:	f7fe fd29 	bl	8006ff0 <check_emergency_button>

		QEI_get_diff_count(&prismatic_encoder);
 800859e:	489e      	ldr	r0, [pc, #632]	@ (8008818 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80085a0:	f7fb fc96 	bl	8003ed0 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 80085a4:	489c      	ldr	r0, [pc, #624]	@ (8008818 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80085a6:	f7fb fd7f 	bl	80040a8 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 80085aa:	489c      	ldr	r0, [pc, #624]	@ (800881c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80085ac:	f7fb fc90 	bl	8003ed0 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 80085b0:	489a      	ldr	r0, [pc, #616]	@ (800881c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80085b2:	f7fb fd79 	bl	80040a8 <QEI_compute_data>

		revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 80085b6:	4b9a      	ldr	r3, [pc, #616]	@ (8008820 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80085b8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80085bc:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 80085c0:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 80085c4:	ed9f 1a97 	vldr	s2, [pc, #604]	@ 8008824 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 80085c8:	eddf 0a97 	vldr	s1, [pc, #604]	@ 8008828 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 80085cc:	eeb0 0a67 	vmov.f32	s0, s15
 80085d0:	f7f9 fc4b 	bl	8001e6a <mapf>
 80085d4:	eef0 7a40 	vmov.f32	s15, s0
 80085d8:	4b91      	ldr	r3, [pc, #580]	@ (8008820 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80085da:	edc3 7a08 	vstr	s15, [r3, #32]
				65535.0f, -12.0f, 12.0f);
		revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 80085de:	4b90      	ldr	r3, [pc, #576]	@ (8008820 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80085e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80085e4:	4b8d      	ldr	r3, [pc, #564]	@ (800881c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80085e6:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80085ea:	eef0 0a47 	vmov.f32	s1, s14
 80085ee:	eeb0 0a67 	vmov.f32	s0, s15
 80085f2:	488e      	ldr	r0, [pc, #568]	@ (800882c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80085f4:	f7fc fd88 	bl	8005108 <SteadyStateKalmanFilter>
 80085f8:	eef0 7a40 	vmov.f32	s15, s0
 80085fc:	4b88      	ldr	r3, [pc, #544]	@ (8008820 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80085fe:	edc3 7a07 	vstr	s15, [r3, #28]
				&revolute_kalman, revolute_axis.input_voltage,
				revolute_encoder.rads);

		if (isnan(revolute_axis.kalman_velocity)) {
 8008602:	4b87      	ldr	r3, [pc, #540]	@ (8008820 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008604:	edd3 7a07 	vldr	s15, [r3, #28]
 8008608:	eef4 7a67 	vcmp.f32	s15, s15
 800860c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008610:	d703      	bvc.n	800861a <HAL_TIM_PeriodElapsedCallback+0x9e>
			revolute_axis.kalman_velocity = 0.0f;
 8008612:	4b83      	ldr	r3, [pc, #524]	@ (8008820 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008614:	f04f 0200 	mov.w	r2, #0
 8008618:	61da      	str	r2, [r3, #28]
		}

		prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 800861a:	4b85      	ldr	r3, [pc, #532]	@ (8008830 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800861c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008620:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8008624:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8008628:	ed9f 1a7e 	vldr	s2, [pc, #504]	@ 8008824 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 800862c:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 8008828 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8008630:	eeb0 0a67 	vmov.f32	s0, s15
 8008634:	f7f9 fc19 	bl	8001e6a <mapf>
 8008638:	eef0 7a40 	vmov.f32	s15, s0
 800863c:	4b7c      	ldr	r3, [pc, #496]	@ (8008830 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800863e:	edc3 7a08 	vstr	s15, [r3, #32]
				-65535.0f, 65535.0f, -12.0f, 12.0f);
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008642:	4b7b      	ldr	r3, [pc, #492]	@ (8008830 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008644:	edd3 7a08 	vldr	s15, [r3, #32]
 8008648:	4b73      	ldr	r3, [pc, #460]	@ (8008818 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800864a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800864e:	eef0 0a47 	vmov.f32	s1, s14
 8008652:	eeb0 0a67 	vmov.f32	s0, s15
 8008656:	4877      	ldr	r0, [pc, #476]	@ (8008834 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8008658:	f7fa fe74 	bl	8003344 <MotorKalman_Estimate>
 800865c:	eeb0 7a40 	vmov.f32	s14, s0
				prismatic_axis.input_voltage, prismatic_encoder.rads)
				* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8008660:	4b75      	ldr	r3, [pc, #468]	@ (8008838 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008662:	edd3 7a04 	vldr	s15, [r3, #16]
 8008666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800866a:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 800883c <HAL_TIM_PeriodElapsedCallback+0x2c0>
 800866e:	ee67 7a87 	vmul.f32	s15, s15, s14
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008672:	4b6f      	ldr	r3, [pc, #444]	@ (8008830 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008674:	edc3 7a07 	vstr	s15, [r3, #28]

		if (isnan(prismatic_axis.kalman_velocity)) {
 8008678:	4b6d      	ldr	r3, [pc, #436]	@ (8008830 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800867a:	edd3 7a07 	vldr	s15, [r3, #28]
 800867e:	eef4 7a67 	vcmp.f32	s15, s15
 8008682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008686:	d703      	bvc.n	8008690 <HAL_TIM_PeriodElapsedCallback+0x114>
			prismatic_axis.kalman_velocity = 0.0f;
 8008688:	4b69      	ldr	r3, [pc, #420]	@ (8008830 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800868a:	f04f 0200 	mov.w	r2, #0
 800868e:	61da      	str	r2, [r3, #28]
		}

		// Position control update - Allow during HOMING_REV_TO_ZERO_DEG
		if (++position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8008690:	4b6b      	ldr	r3, [pc, #428]	@ (8008840 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3301      	adds	r3, #1
 8008696:	4a6a      	ldr	r2, [pc, #424]	@ (8008840 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008698:	6013      	str	r3, [r2, #0]
 800869a:	2b09      	cmp	r3, #9
 800869c:	d92e      	bls.n	80086fc <HAL_TIM_PeriodElapsedCallback+0x180>
			position_control_tick = 0;
 800869e:	4b68      	ldr	r3, [pc, #416]	@ (8008840 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]

			if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG) // ← FIXED
 80086a4:	4b67      	ldr	r3, [pc, #412]	@ (8008844 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	f083 0301 	eor.w	r3, r3, #1
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d103      	bne.n	80086ba <HAL_TIM_PeriodElapsedCallback+0x13e>
 80086b2:	4b65      	ldr	r3, [pc, #404]	@ (8008848 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	2b07      	cmp	r3, #7
 80086b8:	d120      	bne.n	80086fc <HAL_TIM_PeriodElapsedCallback+0x180>
					&& (!joy_mode_active
 80086ba:	4b64      	ldr	r3, [pc, #400]	@ (800884c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	f083 0301 	eor.w	r3, r3, #1
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10b      	bne.n	80086e0 <HAL_TIM_PeriodElapsedCallback+0x164>
							|| (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 80086c8:	4b61      	ldr	r3, [pc, #388]	@ (8008850 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d015      	beq.n	80086fc <HAL_TIM_PeriodElapsedCallback+0x180>
									&& joy_mode_state
											!= JOY_MODE_INITIAL_CONTROL
 80086d0:	4b5f      	ldr	r3, [pc, #380]	@ (8008850 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80086d2:	781b      	ldrb	r3, [r3, #0]
									&& joy_mode_state
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d011      	beq.n	80086fc <HAL_TIM_PeriodElapsedCallback+0x180>
									&& joy_mode_state != JOY_MODE_POSITION_SAVED))
 80086d8:	4b5d      	ldr	r3, [pc, #372]	@ (8008850 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	2b03      	cmp	r3, #3
 80086de:	d00d      	beq.n	80086fc <HAL_TIM_PeriodElapsedCallback+0x180>
					&& (!is_emergency_active() || tuning_mode)) {
 80086e0:	f7fe fe46 	bl	8007370 <is_emergency_active>
 80086e4:	4603      	mov	r3, r0
 80086e6:	f083 0301 	eor.w	r3, r3, #1
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d103      	bne.n	80086f8 <HAL_TIM_PeriodElapsedCallback+0x17c>
 80086f0:	4b58      	ldr	r3, [pc, #352]	@ (8008854 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <HAL_TIM_PeriodElapsedCallback+0x180>
				update_position_control();
 80086f8:	f7fd ff86 	bl	8006608 <update_position_control>
			}
		}

		// Velocity control update - Allow during HOMING_REV_TO_ZERO_DEG
		if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG) // ← FIXED
 80086fc:	4b51      	ldr	r3, [pc, #324]	@ (8008844 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	f083 0301 	eor.w	r3, r3, #1
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d103      	bne.n	8008712 <HAL_TIM_PeriodElapsedCallback+0x196>
 800870a:	4b4f      	ldr	r3, [pc, #316]	@ (8008848 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	2b07      	cmp	r3, #7
 8008710:	d120      	bne.n	8008754 <HAL_TIM_PeriodElapsedCallback+0x1d8>
				&& (!joy_mode_active
 8008712:	4b4e      	ldr	r3, [pc, #312]	@ (800884c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	f083 0301 	eor.w	r3, r3, #1
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10b      	bne.n	8008738 <HAL_TIM_PeriodElapsedCallback+0x1bc>
						|| (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 8008720:	4b4b      	ldr	r3, [pc, #300]	@ (8008850 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	2b02      	cmp	r3, #2
 8008726:	d015      	beq.n	8008754 <HAL_TIM_PeriodElapsedCallback+0x1d8>
								&& joy_mode_state != JOY_MODE_INITIAL_CONTROL
 8008728:	4b49      	ldr	r3, [pc, #292]	@ (8008850 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d011      	beq.n	8008754 <HAL_TIM_PeriodElapsedCallback+0x1d8>
								&& joy_mode_state != JOY_MODE_POSITION_SAVED))
 8008730:	4b47      	ldr	r3, [pc, #284]	@ (8008850 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	2b03      	cmp	r3, #3
 8008736:	d00d      	beq.n	8008754 <HAL_TIM_PeriodElapsedCallback+0x1d8>
				&& (!is_emergency_active() || tuning_mode)) {
 8008738:	f7fe fe1a 	bl	8007370 <is_emergency_active>
 800873c:	4603      	mov	r3, r0
 800873e:	f083 0301 	eor.w	r3, r3, #1
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b00      	cmp	r3, #0
 8008746:	d103      	bne.n	8008750 <HAL_TIM_PeriodElapsedCallback+0x1d4>
 8008748:	4b42      	ldr	r3, [pc, #264]	@ (8008854 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d001      	beq.n	8008754 <HAL_TIM_PeriodElapsedCallback+0x1d8>
			update_velocity_control();
 8008750:	f7fe f81a 	bl	8006788 <update_velocity_control>
		}

		update_safety_system();
 8008754:	f7fe fd8a 	bl	800726c <update_safety_system>

		if (!is_emergency_active() || tuning_mode) {
 8008758:	f7fe fe0a 	bl	8007370 <is_emergency_active>
 800875c:	4603      	mov	r3, r0
 800875e:	f083 0301 	eor.w	r3, r3, #1
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b00      	cmp	r3, #0
 8008766:	d103      	bne.n	8008770 <HAL_TIM_PeriodElapsedCallback+0x1f4>
 8008768:	4b3a      	ldr	r3, [pc, #232]	@ (8008854 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d001      	beq.n	8008774 <HAL_TIM_PeriodElapsedCallback+0x1f8>
			check_safety_conditions();
 8008770:	f7fe fc60 	bl	8007034 <check_safety_conditions>
		}

		// Control loops - joy mode handles its own control
		if (!joy_mode_active) {
 8008774:	4b35      	ldr	r3, [pc, #212]	@ (800884c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	f083 0301 	eor.w	r3, r3, #1
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d002      	beq.n	8008788 <HAL_TIM_PeriodElapsedCallback+0x20c>
			update_control_loops();
 8008782:	f7fe fa15 	bl	8006bb0 <update_control_loops>
 8008786:	e001      	b.n	800878c <HAL_TIM_PeriodElapsedCallback+0x210>
		} else {
			update_joy_mode();
 8008788:	f7ff fbb0 	bl	8007eec <update_joy_mode>
		}

		// ALWAYS update display values
		if (!joy_mode_active) {
 800878c:	4b2f      	ldr	r3, [pc, #188]	@ (800884c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	f083 0301 	eor.w	r3, r3, #1
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d01e      	beq.n	80087d8 <HAL_TIM_PeriodElapsedCallback+0x25c>
			// Update display values for normal operation
			normalized_position = normalize_angle(revolute_encoder.rads);
 800879a:	4b20      	ldr	r3, [pc, #128]	@ (800881c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800879c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80087a0:	eeb0 0a67 	vmov.f32	s0, s15
 80087a4:	f7fd fcd8 	bl	8006158 <normalize_angle>
 80087a8:	eef0 7a40 	vmov.f32	s15, s0
 80087ac:	4b2a      	ldr	r3, [pc, #168]	@ (8008858 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80087ae:	edc3 7a00 	vstr	s15, [r3]
			prismatic_axis.mm = prismatic_encoder.mm;
 80087b2:	4b19      	ldr	r3, [pc, #100]	@ (8008818 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80087b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087b6:	4a1e      	ldr	r2, [pc, #120]	@ (8008830 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80087b8:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 80087ba:	4b27      	ldr	r3, [pc, #156]	@ (8008858 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80087bc:	edd3 7a00 	vldr	s15, [r3]
 80087c0:	220e      	movs	r2, #14
 80087c2:	210f      	movs	r1, #15
 80087c4:	eeb0 0a67 	vmov.f32	s0, s15
 80087c8:	4824      	ldr	r0, [pc, #144]	@ (800885c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80087ca:	f7fc fa21 	bl	8004c10 <UnitConverter_angle>
 80087ce:	eef0 7a40 	vmov.f32	s15, s0
 80087d2:	4b13      	ldr	r3, [pc, #76]	@ (8008820 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80087d4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		}
		// Note: joy mode updates its own display values in update_joy_mode()

		prismatic_axis.accel_show = FIR_process(&prismatic_lp_accel,
 80087d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008818 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80087da:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80087de:	eeb0 0a67 	vmov.f32	s0, s15
 80087e2:	481f      	ldr	r0, [pc, #124]	@ (8008860 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80087e4:	f7f9 fae8 	bl	8001db8 <FIR_process>
 80087e8:	eef0 7a40 	vmov.f32	s15, s0
 80087ec:	4b10      	ldr	r3, [pc, #64]	@ (8008830 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80087ee:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				prismatic_encoder.mmpss);
		revolute_axis.accel_show = FIR_process(&revolute_lp_accel,
 80087f2:	4b0a      	ldr	r3, [pc, #40]	@ (800881c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80087f4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80087f8:	eeb0 0a67 	vmov.f32	s0, s15
 80087fc:	4819      	ldr	r0, [pc, #100]	@ (8008864 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80087fe:	f7f9 fadb 	bl	8001db8 <FIR_process>
 8008802:	eef0 7a40 	vmov.f32	s15, s0
 8008806:	4b06      	ldr	r3, [pc, #24]	@ (8008820 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008808:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				revolute_encoder.radpss);
	}
}
 800880c:	bf00      	nop
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	20001c8c 	.word	0x20001c8c
 8008818:	200006cc 	.word	0x200006cc
 800881c:	20000728 	.word	0x20000728
 8008820:	200004c4 	.word	0x200004c4
 8008824:	477fff00 	.word	0x477fff00
 8008828:	c77fff00 	.word	0xc77fff00
 800882c:	200017cc 	.word	0x200017cc
 8008830:	20000480 	.word	0x20000480
 8008834:	20001460 	.word	0x20001460
 8008838:	20000100 	.word	0x20000100
 800883c:	447a0000 	.word	0x447a0000
 8008840:	20000574 	.word	0x20000574
 8008844:	20000567 	.word	0x20000567
 8008848:	20000566 	.word	0x20000566
 800884c:	20000581 	.word	0x20000581
 8008850:	20000580 	.word	0x20000580
 8008854:	20000334 	.word	0x20000334
 8008858:	20000578 	.word	0x20000578
 800885c:	20000ac0 	.word	0x20000ac0
 8008860:	20000d18 	.word	0x20000d18
 8008864:	20000d24 	.word	0x20000d24

08008868 <modbus_working>:

//modbus
void modbus_working(void) {
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0

	uint16_t limit_switch_status = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	82fb      	strh	r3, [r7, #22]
//heartbeat
	registerFrame[Heartbeat_Protocol].U16 = 22881;
 8008872:	4b70      	ldr	r3, [pc, #448]	@ (8008a34 <modbus_working+0x1cc>)
 8008874:	f645 1261 	movw	r2, #22881	@ 0x5961
 8008878:	801a      	strh	r2, [r3, #0]
//servo write
	if (registerFrame[Servo_UP].U16 == 1) {
 800887a:	4b6e      	ldr	r3, [pc, #440]	@ (8008a34 <modbus_working+0x1cc>)
 800887c:	891b      	ldrh	r3, [r3, #8]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d102      	bne.n	8008888 <modbus_working+0x20>
		plotter_pen_up();
 8008882:	f000 fd79 	bl	8009378 <plotter_pen_up>
 8008886:	e005      	b.n	8008894 <modbus_working+0x2c>
	} else if (registerFrame[Servo_Down].U16 == 1) {
 8008888:	4b6a      	ldr	r3, [pc, #424]	@ (8008a34 <modbus_working+0x1cc>)
 800888a:	895b      	ldrh	r3, [r3, #10]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d101      	bne.n	8008894 <modbus_working+0x2c>
		plotter_pen_down();
 8008890:	f000 fd82 	bl	8009398 <plotter_pen_down>
	}

//limitSW
	if (up_lim == 1) {
 8008894:	4b68      	ldr	r3, [pc, #416]	@ (8008a38 <modbus_working+0x1d0>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d103      	bne.n	80088a4 <modbus_working+0x3c>
		limit_switch_status |= 0x02;  // Bit 1 = Limit UP
 800889c:	8afb      	ldrh	r3, [r7, #22]
 800889e:	f043 0302 	orr.w	r3, r3, #2
 80088a2:	82fb      	strh	r3, [r7, #22]
	}
	if (low_lim == 1) {
 80088a4:	4b65      	ldr	r3, [pc, #404]	@ (8008a3c <modbus_working+0x1d4>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d103      	bne.n	80088b4 <modbus_working+0x4c>
		limit_switch_status |= 0x01;  // Bit 0 = Limit DOWN
 80088ac:	8afb      	ldrh	r3, [r7, #22]
 80088ae:	f043 0301 	orr.w	r3, r3, #1
 80088b2:	82fb      	strh	r3, [r7, #22]
	}
	registerFrame[LimitSwitch_Status].U16 = limit_switch_status;
 80088b4:	4a5f      	ldr	r2, [pc, #380]	@ (8008a34 <modbus_working+0x1cc>)
 80088b6:	8afb      	ldrh	r3, [r7, #22]
 80088b8:	80d3      	strh	r3, [r2, #6]

	if (registerFrame[BaseSystem_Status].U16 == 1) {
 80088ba:	4b5e      	ldr	r3, [pc, #376]	@ (8008a34 <modbus_working+0x1cc>)
 80088bc:	885b      	ldrh	r3, [r3, #2]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d105      	bne.n	80088ce <modbus_working+0x66>
		exit_joy_mode();
 80088c2:	f7fe fdd7 	bl	8007474 <exit_joy_mode>
		start_homing_sequence(true);
 80088c6:	2001      	movs	r0, #1
 80088c8:	f7fd f81a 	bl	8005900 <start_homing_sequence>
 80088cc:	e03b      	b.n	8008946 <modbus_working+0xde>
	} else if (registerFrame[BaseSystem_Status].U16 == 2) {
 80088ce:	4b59      	ldr	r3, [pc, #356]	@ (8008a34 <modbus_working+0x1cc>)
 80088d0:	885b      	ldrh	r3, [r3, #2]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d105      	bne.n	80088e2 <modbus_working+0x7a>
		registerFrame[R_Theta_Status].U16 = 2;
 80088d6:	4b57      	ldr	r3, [pc, #348]	@ (8008a34 <modbus_working+0x1cc>)
 80088d8:	2202      	movs	r2, #2
 80088da:	841a      	strh	r2, [r3, #32]
		enter_joy_mode();
 80088dc:	f7fe fd58 	bl	8007390 <enter_joy_mode>
 80088e0:	e031      	b.n	8008946 <modbus_working+0xde>
	} else if (registerFrame[BaseSystem_Status].U16 == 4) {
 80088e2:	4b54      	ldr	r3, [pc, #336]	@ (8008a34 <modbus_working+0x1cc>)
 80088e4:	885b      	ldrh	r3, [r3, #2]
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	d102      	bne.n	80088f0 <modbus_working+0x88>
		exit_joy_mode();
 80088ea:	f7fe fdc3 	bl	8007474 <exit_joy_mode>
 80088ee:	e02a      	b.n	8008946 <modbus_working+0xde>
	} else if (registerFrame[BaseSystem_Status].U16 == 8) {
 80088f0:	4b50      	ldr	r3, [pc, #320]	@ (8008a34 <modbus_working+0x1cc>)
 80088f2:	885b      	ldrh	r3, [r3, #2]
 80088f4:	2b08      	cmp	r3, #8
 80088f6:	d126      	bne.n	8008946 <modbus_working+0xde>
		registerFrame[R_Theta_Status].U16 = 8;
 80088f8:	4b4e      	ldr	r3, [pc, #312]	@ (8008a34 <modbus_working+0x1cc>)
 80088fa:	2208      	movs	r2, #8
 80088fc:	841a      	strh	r2, [r3, #32]
		exit_joy_mode();
 80088fe:	f7fe fdb9 	bl	8007474 <exit_joy_mode>
		float goal_r_mm = (float) (int16_t) registerFrame[Goal_R].U16 / 10.0;
 8008902:	4b4c      	ldr	r3, [pc, #304]	@ (8008a34 <modbus_working+0x1cc>)
 8008904:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8008908:	b21b      	sxth	r3, r3
 800890a:	ee07 3a90 	vmov	s15, r3
 800890e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008912:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8008916:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800891a:	edc7 7a04 	vstr	s15, [r7, #16]
		float goal_theta_deg = (float) (int16_t) registerFrame[Goal_Theta].U16
 800891e:	4b45      	ldr	r3, [pc, #276]	@ (8008a34 <modbus_working+0x1cc>)
 8008920:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8008924:	b21b      	sxth	r3, r3
 8008926:	ee07 3a90 	vmov	s15, r3
 800892a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800892e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8008932:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008936:	edc7 7a03 	vstr	s15, [r7, #12]
				/ 10.0;

		start_combined_trajectory(goal_r_mm, goal_theta_deg);
 800893a:	edd7 0a03 	vldr	s1, [r7, #12]
 800893e:	ed97 0a04 	vldr	s0, [r7, #16]
 8008942:	f7fd fcf3 	bl	800632c <start_combined_trajectory>
	}

	registerFrame[R_Axis_Actual_Position].U16 = prismatic_encoder.mm * 10.0f;
 8008946:	4b3e      	ldr	r3, [pc, #248]	@ (8008a40 <modbus_working+0x1d8>)
 8008948:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800894c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008950:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008958:	ee17 3a90 	vmov	r3, s15
 800895c:	b29a      	uxth	r2, r3
 800895e:	4b35      	ldr	r3, [pc, #212]	@ (8008a34 <modbus_working+0x1cc>)
 8008960:	845a      	strh	r2, [r3, #34]	@ 0x22
	registerFrame[R_Axis_Actual_Speed].U16 = prismatic_axis.kalman_velocity
 8008962:	4b38      	ldr	r3, [pc, #224]	@ (8008a44 <modbus_working+0x1dc>)
 8008964:	edd3 7a07 	vldr	s15, [r3, #28]
			* 10.0f;
 8008968:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800896c:	ee67 7a87 	vmul.f32	s15, s15, s14
	registerFrame[R_Axis_Actual_Speed].U16 = prismatic_axis.kalman_velocity
 8008970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008974:	ee17 3a90 	vmov	r3, s15
 8008978:	b29a      	uxth	r2, r3
 800897a:	4b2e      	ldr	r3, [pc, #184]	@ (8008a34 <modbus_working+0x1cc>)
 800897c:	84da      	strh	r2, [r3, #38]	@ 0x26

	float pris_accel = FIR_process(&prismatic_lp_accel,
 800897e:	4b30      	ldr	r3, [pc, #192]	@ (8008a40 <modbus_working+0x1d8>)
 8008980:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008984:	eeb0 0a67 	vmov.f32	s0, s15
 8008988:	482f      	ldr	r0, [pc, #188]	@ (8008a48 <modbus_working+0x1e0>)
 800898a:	f7f9 fa15 	bl	8001db8 <FIR_process>
 800898e:	ed87 0a02 	vstr	s0, [r7, #8]
			prismatic_encoder.mmpss);
	registerFrame[R_Axis_Acceleration].U16 = pris_accel * 10.0f;
 8008992:	edd7 7a02 	vldr	s15, [r7, #8]
 8008996:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800899a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800899e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089a2:	ee17 3a90 	vmov	r3, s15
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	4b22      	ldr	r3, [pc, #136]	@ (8008a34 <modbus_working+0x1cc>)
 80089aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

	registerFrame[Theta_Axis_Actual_Position].U16 = revolute_axis.deg * 10.0f;
 80089ac:	4b27      	ldr	r3, [pc, #156]	@ (8008a4c <modbus_working+0x1e4>)
 80089ae:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80089b2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80089b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089be:	ee17 3a90 	vmov	r3, s15
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	4b1b      	ldr	r3, [pc, #108]	@ (8008a34 <modbus_working+0x1cc>)
 80089c6:	849a      	strh	r2, [r3, #36]	@ 0x24

	float rev_theta_vel = UnitConverter_angle(&converter_system,
 80089c8:	4b20      	ldr	r3, [pc, #128]	@ (8008a4c <modbus_working+0x1e4>)
 80089ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80089ce:	220e      	movs	r2, #14
 80089d0:	210f      	movs	r1, #15
 80089d2:	eeb0 0a67 	vmov.f32	s0, s15
 80089d6:	481e      	ldr	r0, [pc, #120]	@ (8008a50 <modbus_working+0x1e8>)
 80089d8:	f7fc f91a 	bl	8004c10 <UnitConverter_angle>
 80089dc:	ed87 0a01 	vstr	s0, [r7, #4]
			revolute_axis.kalman_velocity, UNIT_RADIAN, UNIT_DEGREE);
	registerFrame[Theta_Axis_Actual_Speed].U16 = rev_theta_vel * 10.0f;
 80089e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80089e4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80089e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089f0:	ee17 3a90 	vmov	r3, s15
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008a34 <modbus_working+0x1cc>)
 80089f8:	851a      	strh	r2, [r3, #40]	@ 0x28

	float rev_theta_accel = UnitConverter_angle(&converter_system,
 80089fa:	4b16      	ldr	r3, [pc, #88]	@ (8008a54 <modbus_working+0x1ec>)
 80089fc:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008a00:	220e      	movs	r2, #14
 8008a02:	210f      	movs	r1, #15
 8008a04:	eeb0 0a67 	vmov.f32	s0, s15
 8008a08:	4811      	ldr	r0, [pc, #68]	@ (8008a50 <modbus_working+0x1e8>)
 8008a0a:	f7fc f901 	bl	8004c10 <UnitConverter_angle>
 8008a0e:	ed87 0a00 	vstr	s0, [r7]
			revolute_encoder.radpss, UNIT_RADIAN, UNIT_DEGREE);
	registerFrame[Theta_Axis_Acceleration].U16 = rev_theta_accel * 10.0f;
 8008a12:	edd7 7a00 	vldr	s15, [r7]
 8008a16:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a22:	ee17 3a90 	vmov	r3, s15
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	4b02      	ldr	r3, [pc, #8]	@ (8008a34 <modbus_working+0x1cc>)
 8008a2a:	859a      	strh	r2, [r3, #44]	@ 0x2c

}
 8008a2c:	bf00      	nop
 8008a2e:	3718      	adds	r7, #24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	200012d0 	.word	0x200012d0
 8008a38:	20001ba4 	.word	0x20001ba4
 8008a3c:	20001ba8 	.word	0x20001ba8
 8008a40:	200006cc 	.word	0x200006cc
 8008a44:	20000480 	.word	0x20000480
 8008a48:	20000d18 	.word	0x20000d18
 8008a4c:	200004c4 	.word	0x200004c4
 8008a50:	20000ac0 	.word	0x20000ac0
 8008a54:	20000728 	.word	0x20000728

08008a58 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8008a58:	b480      	push	{r7}
 8008a5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008a5c:	b672      	cpsid	i
}
 8008a5e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8008a60:	bf00      	nop
 8008a62:	e7fd      	b.n	8008a60 <Error_Handler+0x8>
 8008a64:	0000      	movs	r0, r0
	...

08008a68 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8008a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a6c:	ed2d 8b02 	vpush	{d8}
 8008a70:	b083      	sub	sp, #12
 8008a72:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8008a74:	4bc6      	ldr	r3, [pc, #792]	@ (8008d90 <plotter_begin+0x328>)
 8008a76:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 8008a7a:	4bc6      	ldr	r3, [pc, #792]	@ (8008d94 <plotter_begin+0x32c>)
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7f7 fd2e 	bl	80004e0 <__aeabi_f2d>
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4620      	mov	r0, r4
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	f7f7 fd80 	bl	8000590 <__aeabi_dmul>
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	4610      	mov	r0, r2
 8008a96:	4619      	mov	r1, r3
 8008a98:	f04f 0200 	mov.w	r2, #0
 8008a9c:	4bbe      	ldr	r3, [pc, #760]	@ (8008d98 <plotter_begin+0x330>)
 8008a9e:	f7f7 fd77 	bl	8000590 <__aeabi_dmul>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8008aa6:	49ba      	ldr	r1, [pc, #744]	@ (8008d90 <plotter_begin+0x328>)
 8008aa8:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 8008aac:	4bb8      	ldr	r3, [pc, #736]	@ (8008d90 <plotter_begin+0x328>)
 8008aae:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	f7f7 fbb5 	bl	8000224 <__adddf3>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	49b4      	ldr	r1, [pc, #720]	@ (8008d90 <plotter_begin+0x328>)
 8008ac0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500.0;
 8008ac4:	49b2      	ldr	r1, [pc, #712]	@ (8008d90 <plotter_begin+0x328>)
 8008ac6:	f04f 0200 	mov.w	r2, #0
 8008aca:	4bb4      	ldr	r3, [pc, #720]	@ (8008d9c <plotter_begin+0x334>)
 8008acc:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = 1000.0;
 8008ad0:	49af      	ldr	r1, [pc, #700]	@ (8008d90 <plotter_begin+0x328>)
 8008ad2:	f04f 0200 	mov.w	r2, #0
 8008ad6:	4bb0      	ldr	r3, [pc, #704]	@ (8008d98 <plotter_begin+0x330>)
 8008ad8:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8008adc:	4bb0      	ldr	r3, [pc, #704]	@ (8008da0 <plotter_begin+0x338>)
 8008ade:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 8008ae2:	a3a9      	add	r3, pc, #676	@ (adr r3, 8008d88 <plotter_begin+0x320>)
 8008ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae8:	f7f7 fd52 	bl	8000590 <__aeabi_dmul>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8008af0:	49ab      	ldr	r1, [pc, #684]	@ (8008da0 <plotter_begin+0x338>)
 8008af2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	ZGX45RGG_150RPM_Constant.traject_qd_max = 5.0;
 8008af6:	49aa      	ldr	r1, [pc, #680]	@ (8008da0 <plotter_begin+0x338>)
 8008af8:	f04f 0200 	mov.w	r2, #0
 8008afc:	4ba9      	ldr	r3, [pc, #676]	@ (8008da4 <plotter_begin+0x33c>)
 8008afe:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = 2.0;
 8008b02:	49a7      	ldr	r1, [pc, #668]	@ (8008da0 <plotter_begin+0x338>)
 8008b04:	f04f 0200 	mov.w	r2, #0
 8008b08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b0c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8008b10:	2100      	movs	r1, #0
 8008b12:	48a5      	ldr	r0, [pc, #660]	@ (8008da8 <plotter_begin+0x340>)
 8008b14:	f000 fc50 	bl	80093b8 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8008b18:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 8008dac <plotter_begin+0x344>
 8008b1c:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 8008db0 <plotter_begin+0x348>
 8008b20:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 8008de8 <plotter_begin+0x380>
 8008b24:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 8008de8 <plotter_begin+0x380>
 8008b28:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 8008db4 <plotter_begin+0x34c>
 8008b2c:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8008dac <plotter_begin+0x344>
 8008b30:	489d      	ldr	r0, [pc, #628]	@ (8008da8 <plotter_begin+0x340>)
 8008b32:	f000 fc9f 	bl	8009474 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8008b36:	2102      	movs	r1, #2
 8008b38:	489f      	ldr	r0, [pc, #636]	@ (8008db8 <plotter_begin+0x350>)
 8008b3a:	f000 fc3d 	bl	80093b8 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8008b3e:	ed9f 3a9b 	vldr	s6, [pc, #620]	@ 8008dac <plotter_begin+0x344>
 8008b42:	eddf 2a9b 	vldr	s5, [pc, #620]	@ 8008db0 <plotter_begin+0x348>
 8008b46:	ed9f 2aa8 	vldr	s4, [pc, #672]	@ 8008de8 <plotter_begin+0x380>
 8008b4a:	eddf 1aa7 	vldr	s3, [pc, #668]	@ 8008de8 <plotter_begin+0x380>
 8008b4e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008b52:	eddf 0a98 	vldr	s1, [pc, #608]	@ 8008db4 <plotter_begin+0x34c>
 8008b56:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8008dac <plotter_begin+0x344>
 8008b5a:	4897      	ldr	r0, [pc, #604]	@ (8008db8 <plotter_begin+0x350>)
 8008b5c:	f000 fcb5 	bl	80094ca <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8008b60:	2100      	movs	r1, #0
 8008b62:	4896      	ldr	r0, [pc, #600]	@ (8008dbc <plotter_begin+0x354>)
 8008b64:	f000 fc28 	bl	80093b8 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8008b68:	eddf 2a95 	vldr	s5, [pc, #596]	@ 8008dc0 <plotter_begin+0x358>
 8008b6c:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 8008dc4 <plotter_begin+0x35c>
 8008b70:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 8008de8 <plotter_begin+0x380>
 8008b74:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 8008de8 <plotter_begin+0x380>
 8008b78:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 8008db4 <plotter_begin+0x34c>
 8008b7c:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8008dc0 <plotter_begin+0x358>
 8008b80:	488e      	ldr	r0, [pc, #568]	@ (8008dbc <plotter_begin+0x354>)
 8008b82:	f000 fc77 	bl	8009474 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8008b86:	2102      	movs	r1, #2
 8008b88:	488f      	ldr	r0, [pc, #572]	@ (8008dc8 <plotter_begin+0x360>)
 8008b8a:	f000 fc15 	bl	80093b8 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8008b8e:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8008b92:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8008b96:	ed9f 2a94 	vldr	s4, [pc, #592]	@ 8008de8 <plotter_begin+0x380>
 8008b9a:	eddf 1a93 	vldr	s3, [pc, #588]	@ 8008de8 <plotter_begin+0x380>
 8008b9e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008ba2:	eddf 0a84 	vldr	s1, [pc, #528]	@ 8008db4 <plotter_begin+0x34c>
 8008ba6:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8008baa:	4887      	ldr	r0, [pc, #540]	@ (8008dc8 <plotter_begin+0x360>)
 8008bac:	f000 fc8d 	bl	80094ca <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	4886      	ldr	r0, [pc, #536]	@ (8008dcc <plotter_begin+0x364>)
 8008bb4:	f000 fc00 	bl	80093b8 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008bb8:	4b75      	ldr	r3, [pc, #468]	@ (8008d90 <plotter_begin+0x328>)
 8008bba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	f7f7 ffc7 	bl	8000b54 <__aeabi_d2f>
 8008bc6:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8008bc8:	4b71      	ldr	r3, [pc, #452]	@ (8008d90 <plotter_begin+0x328>)
 8008bca:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008bce:	4610      	mov	r0, r2
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	f7f7 ffbf 	bl	8000b54 <__aeabi_d2f>
 8008bd6:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008bd8:	ee07 3a90 	vmov	s15, r3
 8008bdc:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8008be0:	4b6b      	ldr	r3, [pc, #428]	@ (8008d90 <plotter_begin+0x328>)
 8008be2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008be6:	4610      	mov	r0, r2
 8008be8:	4619      	mov	r1, r3
 8008bea:	f7f7 ffb3 	bl	8000b54 <__aeabi_d2f>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	ee02 3a90 	vmov	s5, r3
 8008bf4:	eeb0 2a48 	vmov.f32	s4, s16
 8008bf8:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 8008de8 <plotter_begin+0x380>
 8008bfc:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 8008de8 <plotter_begin+0x380>
 8008c00:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 8008db4 <plotter_begin+0x34c>
 8008c04:	ee00 4a10 	vmov	s0, r4
 8008c08:	4870      	ldr	r0, [pc, #448]	@ (8008dcc <plotter_begin+0x364>)
 8008c0a:	f000 fc33 	bl	8009474 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8008c0e:	2102      	movs	r1, #2
 8008c10:	486f      	ldr	r0, [pc, #444]	@ (8008dd0 <plotter_begin+0x368>)
 8008c12:	f000 fbd1 	bl	80093b8 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008c16:	4b5e      	ldr	r3, [pc, #376]	@ (8008d90 <plotter_begin+0x328>)
 8008c18:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	4619      	mov	r1, r3
 8008c20:	f7f7 ff98 	bl	8000b54 <__aeabi_d2f>
 8008c24:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8008c26:	4b5a      	ldr	r3, [pc, #360]	@ (8008d90 <plotter_begin+0x328>)
 8008c28:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	4619      	mov	r1, r3
 8008c30:	f7f7 ff90 	bl	8000b54 <__aeabi_d2f>
 8008c34:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8008c3e:	4b54      	ldr	r3, [pc, #336]	@ (8008d90 <plotter_begin+0x328>)
 8008c40:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008c44:	4610      	mov	r0, r2
 8008c46:	4619      	mov	r1, r3
 8008c48:	f7f7 ff84 	bl	8000b54 <__aeabi_d2f>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	ee03 3a10 	vmov	s6, r3
 8008c52:	eef0 2a48 	vmov.f32	s5, s16
 8008c56:	ed9f 2a64 	vldr	s4, [pc, #400]	@ 8008de8 <plotter_begin+0x380>
 8008c5a:	eddf 1a63 	vldr	s3, [pc, #396]	@ 8008de8 <plotter_begin+0x380>
 8008c5e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008c62:	eddf 0a54 	vldr	s1, [pc, #336]	@ 8008db4 <plotter_begin+0x34c>
 8008c66:	ee00 4a10 	vmov	s0, r4
 8008c6a:	4859      	ldr	r0, [pc, #356]	@ (8008dd0 <plotter_begin+0x368>)
 8008c6c:	f000 fc2d 	bl	80094ca <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8008c70:	2100      	movs	r1, #0
 8008c72:	4858      	ldr	r0, [pc, #352]	@ (8008dd4 <plotter_begin+0x36c>)
 8008c74:	f000 fba0 	bl	80093b8 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008c78:	4b49      	ldr	r3, [pc, #292]	@ (8008da0 <plotter_begin+0x338>)
 8008c7a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008c7e:	4610      	mov	r0, r2
 8008c80:	4619      	mov	r1, r3
 8008c82:	f7f7 ff67 	bl	8000b54 <__aeabi_d2f>
 8008c86:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8008c88:	4b45      	ldr	r3, [pc, #276]	@ (8008da0 <plotter_begin+0x338>)
 8008c8a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008c8e:	4610      	mov	r0, r2
 8008c90:	4619      	mov	r1, r3
 8008c92:	f7f7 ff5f 	bl	8000b54 <__aeabi_d2f>
 8008c96:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008c98:	ee07 3a90 	vmov	s15, r3
 8008c9c:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 8008ca0:	4b3f      	ldr	r3, [pc, #252]	@ (8008da0 <plotter_begin+0x338>)
 8008ca2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008ca6:	4610      	mov	r0, r2
 8008ca8:	4619      	mov	r1, r3
 8008caa:	f7f7 ff53 	bl	8000b54 <__aeabi_d2f>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	ee02 3a90 	vmov	s5, r3
 8008cb4:	eeb0 2a48 	vmov.f32	s4, s16
 8008cb8:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 8008de8 <plotter_begin+0x380>
 8008cbc:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 8008de8 <plotter_begin+0x380>
 8008cc0:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8008db4 <plotter_begin+0x34c>
 8008cc4:	ee00 4a10 	vmov	s0, r4
 8008cc8:	4842      	ldr	r0, [pc, #264]	@ (8008dd4 <plotter_begin+0x36c>)
 8008cca:	f000 fbd3 	bl	8009474 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 8008cce:	2102      	movs	r1, #2
 8008cd0:	4841      	ldr	r0, [pc, #260]	@ (8008dd8 <plotter_begin+0x370>)
 8008cd2:	f000 fb71 	bl	80093b8 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008cd6:	4b32      	ldr	r3, [pc, #200]	@ (8008da0 <plotter_begin+0x338>)
 8008cd8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008cdc:	4610      	mov	r0, r2
 8008cde:	4619      	mov	r1, r3
 8008ce0:	f7f7 ff38 	bl	8000b54 <__aeabi_d2f>
 8008ce4:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8008ce6:	4b2e      	ldr	r3, [pc, #184]	@ (8008da0 <plotter_begin+0x338>)
 8008ce8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008cec:	4610      	mov	r0, r2
 8008cee:	4619      	mov	r1, r3
 8008cf0:	f7f7 ff30 	bl	8000b54 <__aeabi_d2f>
 8008cf4:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008cf6:	ee07 3a90 	vmov	s15, r3
 8008cfa:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8008cfe:	4b28      	ldr	r3, [pc, #160]	@ (8008da0 <plotter_begin+0x338>)
 8008d00:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008d04:	4610      	mov	r0, r2
 8008d06:	4619      	mov	r1, r3
 8008d08:	f7f7 ff24 	bl	8000b54 <__aeabi_d2f>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	ee03 3a10 	vmov	s6, r3
 8008d12:	eef0 2a48 	vmov.f32	s5, s16
 8008d16:	ed9f 2a34 	vldr	s4, [pc, #208]	@ 8008de8 <plotter_begin+0x380>
 8008d1a:	eddf 1a33 	vldr	s3, [pc, #204]	@ 8008de8 <plotter_begin+0x380>
 8008d1e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008d22:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8008db4 <plotter_begin+0x34c>
 8008d26:	ee00 4a10 	vmov	s0, r4
 8008d2a:	482b      	ldr	r0, [pc, #172]	@ (8008dd8 <plotter_begin+0x370>)
 8008d2c:	f000 fbcd 	bl	80094ca <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 8008d30:	482a      	ldr	r0, [pc, #168]	@ (8008ddc <plotter_begin+0x374>)
 8008d32:	f7fb fed7 	bl	8004ae4 <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 8008d36:	4b17      	ldr	r3, [pc, #92]	@ (8008d94 <plotter_begin+0x32c>)
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7f7 fbd0 	bl	80004e0 <__aeabi_f2d>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	f7f7 fa6e 	bl	8000224 <__adddf3>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	4619      	mov	r1, r3
 8008d50:	f04f 0200 	mov.w	r2, #0
 8008d54:	4b10      	ldr	r3, [pc, #64]	@ (8008d98 <plotter_begin+0x330>)
 8008d56:	f7f7 fc1b 	bl	8000590 <__aeabi_dmul>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8008d5e:	4610      	mov	r0, r2
 8008d60:	4619      	mov	r1, r3
 8008d62:	f7f7 fef7 	bl	8000b54 <__aeabi_d2f>
 8008d66:	4603      	mov	r3, r0
 8008d68:	ee00 3a90 	vmov	s1, r3
 8008d6c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008d70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008d74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008d78:	4919      	ldr	r1, [pc, #100]	@ (8008de0 <plotter_begin+0x378>)
 8008d7a:	481a      	ldr	r0, [pc, #104]	@ (8008de4 <plotter_begin+0x37c>)
 8008d7c:	f7fb f836 	bl	8003dec <QEI_init>
 8008d80:	e034      	b.n	8008dec <plotter_begin+0x384>
 8008d82:	bf00      	nop
 8008d84:	f3af 8000 	nop.w
 8008d88:	55555555 	.word	0x55555555
 8008d8c:	3fe55555 	.word	0x3fe55555
 8008d90:	20000080 	.word	0x20000080
 8008d94:	20000100 	.word	0x20000100
 8008d98:	408f4000 	.word	0x408f4000
 8008d9c:	407f4000 	.word	0x407f4000
 8008da0:	20000000 	.word	0x20000000
 8008da4:	40140000 	.word	0x40140000
 8008da8:	200008a0 	.word	0x200008a0
 8008dac:	477fff00 	.word	0x477fff00
 8008db0:	c77fff00 	.word	0xc77fff00
 8008db4:	3dcccccd 	.word	0x3dcccccd
 8008db8:	200008e4 	.word	0x200008e4
 8008dbc:	20000928 	.word	0x20000928
 8008dc0:	43480000 	.word	0x43480000
 8008dc4:	c3480000 	.word	0xc3480000
 8008dc8:	2000096c 	.word	0x2000096c
 8008dcc:	200009b0 	.word	0x200009b0
 8008dd0:	200009f4 	.word	0x200009f4
 8008dd4:	20000a38 	.word	0x20000a38
 8008dd8:	20000a7c 	.word	0x20000a7c
 8008ddc:	20000ac0 	.word	0x20000ac0
 8008de0:	20001ef0 	.word	0x20001ef0
 8008de4:	200006cc 	.word	0x200006cc
 8008de8:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8008dec:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 8008de8 <plotter_begin+0x380>
 8008df0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008df4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008df8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008dfc:	49b8      	ldr	r1, [pc, #736]	@ (80090e0 <plotter_begin+0x678>)
 8008dfe:	48b9      	ldr	r0, [pc, #740]	@ (80090e4 <plotter_begin+0x67c>)
 8008e00:	f7fa fff4 	bl	8003dec <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8008e04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008e0e:	2204      	movs	r2, #4
 8008e10:	49b5      	ldr	r1, [pc, #724]	@ (80090e8 <plotter_begin+0x680>)
 8008e12:	48b6      	ldr	r0, [pc, #728]	@ (80090ec <plotter_begin+0x684>)
 8008e14:	f7f8 fab4 	bl	8001380 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8008e18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	4bb4      	ldr	r3, [pc, #720]	@ (80090f0 <plotter_begin+0x688>)
 8008e20:	2200      	movs	r2, #0
 8008e22:	49b1      	ldr	r1, [pc, #708]	@ (80090e8 <plotter_begin+0x680>)
 8008e24:	48b3      	ldr	r0, [pc, #716]	@ (80090f4 <plotter_begin+0x68c>)
 8008e26:	f7f8 faab 	bl	8001380 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8008e2a:	220c      	movs	r2, #12
 8008e2c:	49b2      	ldr	r1, [pc, #712]	@ (80090f8 <plotter_begin+0x690>)
 8008e2e:	48b3      	ldr	r0, [pc, #716]	@ (80090fc <plotter_begin+0x694>)
 8008e30:	f7fa fdae 	bl	8003990 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8008e34:	eddf 0ab2 	vldr	s1, [pc, #712]	@ 8009100 <plotter_begin+0x698>
 8008e38:	ed9f 0ab2 	vldr	s0, [pc, #712]	@ 8009104 <plotter_begin+0x69c>
 8008e3c:	48ab      	ldr	r0, [pc, #684]	@ (80090ec <plotter_begin+0x684>)
 8008e3e:	f7f8 fac3 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8008e42:	eddf 0aaf 	vldr	s1, [pc, #700]	@ 8009100 <plotter_begin+0x698>
 8008e46:	ed9f 0aaf 	vldr	s0, [pc, #700]	@ 8009104 <plotter_begin+0x69c>
 8008e4a:	48aa      	ldr	r0, [pc, #680]	@ (80090f4 <plotter_begin+0x68c>)
 8008e4c:	f7f8 fabc 	bl	80013c8 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 80,
			ZGX45RGG_400RPM_Constant.sd_max);
 8008e50:	4bad      	ldr	r3, [pc, #692]	@ (8009108 <plotter_begin+0x6a0>)
 8008e52:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 80,
 8008e56:	4610      	mov	r0, r2
 8008e58:	4619      	mov	r1, r3
 8008e5a:	f7f7 fe7b 	bl	8000b54 <__aeabi_d2f>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	ee01 3a90 	vmov	s3, r3
 8008e64:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 800910c <plotter_begin+0x6a4>
 8008e68:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 8009110 <plotter_begin+0x6a8>
 8008e6c:	ed9f 0aa9 	vldr	s0, [pc, #676]	@ 8009114 <plotter_begin+0x6ac>
 8008e70:	48a9      	ldr	r0, [pc, #676]	@ (8009118 <plotter_begin+0x6b0>)
 8008e72:	f7f8 f99e 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8008e76:	4ba4      	ldr	r3, [pc, #656]	@ (8009108 <plotter_begin+0x6a0>)
 8008e78:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	4619      	mov	r1, r3
 8008e80:	f7f7 fe68 	bl	8000b54 <__aeabi_d2f>
 8008e84:	4603      	mov	r3, r0
 8008e86:	ee01 3a90 	vmov	s3, r3
 8008e8a:	ed9f 1a9d 	vldr	s2, [pc, #628]	@ 8009100 <plotter_begin+0x698>
 8008e8e:	eddf 0aa3 	vldr	s1, [pc, #652]	@ 800911c <plotter_begin+0x6b4>
 8008e92:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 8009120 <plotter_begin+0x6b8>
 8008e96:	48a3      	ldr	r0, [pc, #652]	@ (8009124 <plotter_begin+0x6bc>)
 8008e98:	f7f8 f98b 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 250, 0.002, 700,
			ZGX45RGG_150RPM_Constant.qd_max);
 8008e9c:	4ba2      	ldr	r3, [pc, #648]	@ (8009128 <plotter_begin+0x6c0>)
 8008e9e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 250, 0.002, 700,
 8008ea2:	4610      	mov	r0, r2
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	f7f7 fe55 	bl	8000b54 <__aeabi_d2f>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	ee01 3a90 	vmov	s3, r3
 8008eb0:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 800912c <plotter_begin+0x6c4>
 8008eb4:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 8009130 <plotter_begin+0x6c8>
 8008eb8:	ed9f 0a9e 	vldr	s0, [pc, #632]	@ 8009134 <plotter_begin+0x6cc>
 8008ebc:	489e      	ldr	r0, [pc, #632]	@ (8009138 <plotter_begin+0x6d0>)
 8008ebe:	f7f8 f978 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2500, 25, 3000,
			ZGX45RGG_150RPM_Constant.U_max);
 8008ec2:	4b99      	ldr	r3, [pc, #612]	@ (8009128 <plotter_begin+0x6c0>)
 8008ec4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2500, 25, 3000,
 8008ec8:	4610      	mov	r0, r2
 8008eca:	4619      	mov	r1, r3
 8008ecc:	f7f7 fe42 	bl	8000b54 <__aeabi_d2f>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	ee01 3a90 	vmov	s3, r3
 8008ed6:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 800913c <plotter_begin+0x6d4>
 8008eda:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8008ede:	ed9f 0a98 	vldr	s0, [pc, #608]	@ 8009140 <plotter_begin+0x6d8>
 8008ee2:	4898      	ldr	r0, [pc, #608]	@ (8009144 <plotter_begin+0x6dc>)
 8008ee4:	f7f8 f965 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
			ZGX45RGG_150RPM_Constant.U_max);
 8008ee8:	4b8f      	ldr	r3, [pc, #572]	@ (8009128 <plotter_begin+0x6c0>)
 8008eea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
 8008eee:	4610      	mov	r0, r2
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	f7f7 fe2f 	bl	8000b54 <__aeabi_d2f>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	ee01 3a90 	vmov	s3, r3
 8008efc:	ed9f 1a81 	vldr	s2, [pc, #516]	@ 8009104 <plotter_begin+0x69c>
 8008f00:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8009148 <plotter_begin+0x6e0>
 8008f04:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 800914c <plotter_begin+0x6e4>
 8008f08:	4891      	ldr	r0, [pc, #580]	@ (8009150 <plotter_begin+0x6e8>)
 8008f0a:	f7f8 f952 	bl	80011b2 <PID_CONTROLLER_Init>



	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8008f0e:	4986      	ldr	r1, [pc, #536]	@ (8009128 <plotter_begin+0x6c0>)
 8008f10:	4890      	ldr	r0, [pc, #576]	@ (8009154 <plotter_begin+0x6ec>)
 8008f12:	f7f8 fb33 	bl	800157c <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8008f16:	497c      	ldr	r1, [pc, #496]	@ (8009108 <plotter_begin+0x6a0>)
 8008f18:	488f      	ldr	r0, [pc, #572]	@ (8009158 <plotter_begin+0x6f0>)
 8008f1a:	f7f8 fcad 	bl	8001878 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8008f1e:	4a8f      	ldr	r2, [pc, #572]	@ (800915c <plotter_begin+0x6f4>)
 8008f20:	4981      	ldr	r1, [pc, #516]	@ (8009128 <plotter_begin+0x6c0>)
 8008f22:	488f      	ldr	r0, [pc, #572]	@ (8009160 <plotter_begin+0x6f8>)
 8008f24:	f7f8 fbb9 	bl	800169a <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8008f28:	4a8c      	ldr	r2, [pc, #560]	@ (800915c <plotter_begin+0x6f4>)
 8008f2a:	4977      	ldr	r1, [pc, #476]	@ (8009108 <plotter_begin+0x6a0>)
 8008f2c:	488d      	ldr	r0, [pc, #564]	@ (8009164 <plotter_begin+0x6fc>)
 8008f2e:	f7f8 fd47 	bl	80019c0 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 8008f32:	2302      	movs	r3, #2
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	eddf 0a8c 	vldr	s1, [pc, #560]	@ 8009168 <plotter_begin+0x700>
 8008f3a:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 800916c <plotter_begin+0x704>
 8008f3e:	2364      	movs	r3, #100	@ 0x64
 8008f40:	4a8b      	ldr	r2, [pc, #556]	@ (8009170 <plotter_begin+0x708>)
 8008f42:	498c      	ldr	r1, [pc, #560]	@ (8009174 <plotter_begin+0x70c>)
 8008f44:	488c      	ldr	r0, [pc, #560]	@ (8009178 <plotter_begin+0x710>)
 8008f46:	f7f7 ffeb 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 8008f4a:	2105      	movs	r1, #5
 8008f4c:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 800917c <plotter_begin+0x714>
 8008f50:	4889      	ldr	r0, [pc, #548]	@ (8009178 <plotter_begin+0x710>)
 8008f52:	f7f8 f897 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 8008f56:	4888      	ldr	r0, [pc, #544]	@ (8009178 <plotter_begin+0x710>)
 8008f58:	f7f8 f83a 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8008f5c:	eddf 0a88 	vldr	s1, [pc, #544]	@ 8009180 <plotter_begin+0x718>
 8008f60:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8008f64:	211f      	movs	r1, #31
 8008f66:	4887      	ldr	r0, [pc, #540]	@ (8009184 <plotter_begin+0x71c>)
 8008f68:	f7f8 fe06 	bl	8001b78 <FIR_init>
	FIR_init(&revolute_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8008f6c:	eddf 0a84 	vldr	s1, [pc, #528]	@ 8009180 <plotter_begin+0x718>
 8008f70:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8008f74:	211f      	movs	r1, #31
 8008f76:	4884      	ldr	r0, [pc, #528]	@ (8009188 <plotter_begin+0x720>)
 8008f78:	f7f8 fdfe 	bl	8001b78 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008f7c:	4b62      	ldr	r3, [pc, #392]	@ (8009108 <plotter_begin+0x6a0>)
 8008f7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f82:	4610      	mov	r0, r2
 8008f84:	4619      	mov	r1, r3
 8008f86:	f7f7 fde5 	bl	8000b54 <__aeabi_d2f>
 8008f8a:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8008f8c:	4b5e      	ldr	r3, [pc, #376]	@ (8009108 <plotter_begin+0x6a0>)
 8008f8e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008f92:	4610      	mov	r0, r2
 8008f94:	4619      	mov	r1, r3
 8008f96:	f7f7 fddd 	bl	8000b54 <__aeabi_d2f>
 8008f9a:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8008f9c:	4b5a      	ldr	r3, [pc, #360]	@ (8009108 <plotter_begin+0x6a0>)
 8008f9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008fa2:	4610      	mov	r0, r2
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	f7f7 fdd5 	bl	8000b54 <__aeabi_d2f>
 8008faa:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8008fac:	4b56      	ldr	r3, [pc, #344]	@ (8009108 <plotter_begin+0x6a0>)
 8008fae:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008fb2:	4610      	mov	r0, r2
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	f7f7 fdcd 	bl	8000b54 <__aeabi_d2f>
 8008fba:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8008fbc:	4b52      	ldr	r3, [pc, #328]	@ (8009108 <plotter_begin+0x6a0>)
 8008fbe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	f7f7 fdc5 	bl	8000b54 <__aeabi_d2f>
 8008fca:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 8008fcc:	4b4e      	ldr	r3, [pc, #312]	@ (8009108 <plotter_begin+0x6a0>)
 8008fce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	f7f7 fdbd 	bl	8000b54 <__aeabi_d2f>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8008fe0:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8008fe4:	ee03 3a10 	vmov	s6, r3
 8008fe8:	ee02 9a90 	vmov	s5, r9
 8008fec:	ee02 8a10 	vmov	s4, r8
 8008ff0:	ee01 6a90 	vmov	s3, r6
 8008ff4:	ee01 5a10 	vmov	s2, r5
 8008ff8:	ee00 4a90 	vmov	s1, r4
 8008ffc:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 800918c <plotter_begin+0x724>
 8009000:	4863      	ldr	r0, [pc, #396]	@ (8009190 <plotter_begin+0x728>)
 8009002:	f7f9 fab1 	bl	8002568 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009006:	4b48      	ldr	r3, [pc, #288]	@ (8009128 <plotter_begin+0x6c0>)
 8009008:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800900c:	4610      	mov	r0, r2
 800900e:	4619      	mov	r1, r3
 8009010:	f7f7 fda0 	bl	8000b54 <__aeabi_d2f>
 8009014:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8009016:	4b44      	ldr	r3, [pc, #272]	@ (8009128 <plotter_begin+0x6c0>)
 8009018:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800901c:	4610      	mov	r0, r2
 800901e:	4619      	mov	r1, r3
 8009020:	f7f7 fd98 	bl	8000b54 <__aeabi_d2f>
 8009024:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8009026:	4b40      	ldr	r3, [pc, #256]	@ (8009128 <plotter_begin+0x6c0>)
 8009028:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800902c:	4610      	mov	r0, r2
 800902e:	4619      	mov	r1, r3
 8009030:	f7f7 fd90 	bl	8000b54 <__aeabi_d2f>
 8009034:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8009036:	4b3c      	ldr	r3, [pc, #240]	@ (8009128 <plotter_begin+0x6c0>)
 8009038:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800903c:	a326      	add	r3, pc, #152	@ (adr r3, 80090d8 <plotter_begin+0x670>)
 800903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009042:	f7f7 faa5 	bl	8000590 <__aeabi_dmul>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800904a:	4610      	mov	r0, r2
 800904c:	4619      	mov	r1, r3
 800904e:	f7f7 fd81 	bl	8000b54 <__aeabi_d2f>
 8009052:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8009054:	4b34      	ldr	r3, [pc, #208]	@ (8009128 <plotter_begin+0x6c0>)
 8009056:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800905a:	4610      	mov	r0, r2
 800905c:	4619      	mov	r1, r3
 800905e:	f7f7 fd79 	bl	8000b54 <__aeabi_d2f>
 8009062:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt, 0.001, &revolute_A, &revolute_B);
 8009064:	4b30      	ldr	r3, [pc, #192]	@ (8009128 <plotter_begin+0x6c0>)
 8009066:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800906a:	4610      	mov	r0, r2
 800906c:	4619      	mov	r1, r3
 800906e:	f7f7 fd71 	bl	8000b54 <__aeabi_d2f>
 8009072:	4603      	mov	r3, r0
 8009074:	4947      	ldr	r1, [pc, #284]	@ (8009194 <plotter_begin+0x72c>)
 8009076:	4848      	ldr	r0, [pc, #288]	@ (8009198 <plotter_begin+0x730>)
 8009078:	ed9f 3a44 	vldr	s6, [pc, #272]	@ 800918c <plotter_begin+0x724>
 800907c:	ee02 3a90 	vmov	s5, r3
 8009080:	ee02 9a10 	vmov	s4, r9
 8009084:	ee01 8a90 	vmov	s3, r8
 8009088:	ee01 6a10 	vmov	s2, r6
 800908c:	ee00 5a90 	vmov	s1, r5
 8009090:	ee00 4a10 	vmov	s0, r4
 8009094:	f7fa fc14 	bl	80038c0 <GenerateMotorMatrices>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8009098:	eddf 0a40 	vldr	s1, [pc, #256]	@ 800919c <plotter_begin+0x734>
 800909c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80090a0:	4a3c      	ldr	r2, [pc, #240]	@ (8009194 <plotter_begin+0x72c>)
 80090a2:	493d      	ldr	r1, [pc, #244]	@ (8009198 <plotter_begin+0x730>)
 80090a4:	483e      	ldr	r0, [pc, #248]	@ (80091a0 <plotter_begin+0x738>)
 80090a6:	f7fc f979 	bl	800539c <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 80090aa:	23c8      	movs	r3, #200	@ 0xc8
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	2315      	movs	r3, #21
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	4b3c      	ldr	r3, [pc, #240]	@ (80091a4 <plotter_begin+0x73c>)
 80090b4:	4a3c      	ldr	r2, [pc, #240]	@ (80091a8 <plotter_begin+0x740>)
 80090b6:	493d      	ldr	r1, [pc, #244]	@ (80091ac <plotter_begin+0x744>)
 80090b8:	483d      	ldr	r0, [pc, #244]	@ (80091b0 <plotter_begin+0x748>)
 80090ba:	f7f8 ff4d 	bl	8001f58 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80090be:	483d      	ldr	r0, [pc, #244]	@ (80091b4 <plotter_begin+0x74c>)
 80090c0:	f004 fe00 	bl	800dcc4 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 80090c4:	f000 f878 	bl	80091b8 <plotter_reset>
}
 80090c8:	bf00      	nop
 80090ca:	3704      	adds	r7, #4
 80090cc:	46bd      	mov	sp, r7
 80090ce:	ecbd 8b02 	vpop	{d8}
 80090d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090d6:	bf00      	nop
 80090d8:	9999999a 	.word	0x9999999a
 80090dc:	40019999 	.word	0x40019999
 80090e0:	20001e24 	.word	0x20001e24
 80090e4:	20000728 	.word	0x20000728
 80090e8:	20001fbc 	.word	0x20001fbc
 80090ec:	20000634 	.word	0x20000634
 80090f0:	48000800 	.word	0x48000800
 80090f4:	20000680 	.word	0x20000680
 80090f8:	20001bc0 	.word	0x20001bc0
 80090fc:	20000864 	.word	0x20000864
 8009100:	00000000 	.word	0x00000000
 8009104:	44fa0000 	.word	0x44fa0000
 8009108:	20000080 	.word	0x20000080
 800910c:	42a00000 	.word	0x42a00000
 8009110:	2edbe6ff 	.word	0x2edbe6ff
 8009114:	42960000 	.word	0x42960000
 8009118:	20000784 	.word	0x20000784
 800911c:	3727c5ac 	.word	0x3727c5ac
 8009120:	43160000 	.word	0x43160000
 8009124:	200007ac 	.word	0x200007ac
 8009128:	20000000 	.word	0x20000000
 800912c:	442f0000 	.word	0x442f0000
 8009130:	3b03126f 	.word	0x3b03126f
 8009134:	437a0000 	.word	0x437a0000
 8009138:	200007d4 	.word	0x200007d4
 800913c:	453b8000 	.word	0x453b8000
 8009140:	451c4000 	.word	0x451c4000
 8009144:	200007fc 	.word	0x200007fc
 8009148:	42c80000 	.word	0x42c80000
 800914c:	45ea6000 	.word	0x45ea6000
 8009150:	20000824 	.word	0x20000824
 8009154:	20000858 	.word	0x20000858
 8009158:	2000084c 	.word	0x2000084c
 800915c:	20000100 	.word	0x20000100
 8009160:	2000085c 	.word	0x2000085c
 8009164:	20000850 	.word	0x20000850
 8009168:	457ff000 	.word	0x457ff000
 800916c:	40533333 	.word	0x40533333
 8009170:	20000d30 	.word	0x20000d30
 8009174:	200003b4 	.word	0x200003b4
 8009178:	2000087c 	.word	0x2000087c
 800917c:	45000000 	.word	0x45000000
 8009180:	447a0000 	.word	0x447a0000
 8009184:	20000d18 	.word	0x20000d18
 8009188:	20000d24 	.word	0x20000d24
 800918c:	3a83126f 	.word	0x3a83126f
 8009190:	20001460 	.word	0x20001460
 8009194:	20001b8c 	.word	0x20001b8c
 8009198:	20001b4c 	.word	0x20001b4c
 800919c:	3d4ccccd 	.word	0x3d4ccccd
 80091a0:	200017cc 	.word	0x200017cc
 80091a4:	200012d0 	.word	0x200012d0
 80091a8:	20002088 	.word	0x20002088
 80091ac:	20002220 	.word	0x20002220
 80091b0:	20000df8 	.word	0x20000df8
 80091b4:	20001c8c 	.word	0x20001c8c

080091b8 <plotter_reset>:

void plotter_reset() {
 80091b8:	b580      	push	{r7, lr}
 80091ba:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 80091bc:	4819      	ldr	r0, [pc, #100]	@ (8009224 <plotter_reset+0x6c>)
 80091be:	f7fb f897 	bl	80042f0 <QEI_reset>
	QEI_reset(&prismatic_encoder);
 80091c2:	4818      	ldr	r0, [pc, #96]	@ (8009224 <plotter_reset+0x6c>)
 80091c4:	f7fb f894 	bl	80042f0 <QEI_reset>

	prismatic_encoder.diff_counts = 0;
 80091c8:	4b16      	ldr	r3, [pc, #88]	@ (8009224 <plotter_reset+0x6c>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 80091ce:	4b15      	ldr	r3, [pc, #84]	@ (8009224 <plotter_reset+0x6c>)
 80091d0:	f04f 0200 	mov.w	r2, #0
 80091d4:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 80091d6:	4b13      	ldr	r3, [pc, #76]	@ (8009224 <plotter_reset+0x6c>)
 80091d8:	2200      	movs	r2, #0
 80091da:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 80091dc:	4b11      	ldr	r3, [pc, #68]	@ (8009224 <plotter_reset+0x6c>)
 80091de:	f04f 0200 	mov.w	r2, #0
 80091e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 80091e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009224 <plotter_reset+0x6c>)
 80091e6:	f04f 0200 	mov.w	r2, #0
 80091ea:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 80091ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009224 <plotter_reset+0x6c>)
 80091ee:	f04f 0200 	mov.w	r2, #0
 80091f2:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 80091f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009228 <plotter_reset+0x70>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 80091fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009228 <plotter_reset+0x70>)
 80091fc:	f04f 0200 	mov.w	r2, #0
 8009200:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 8009202:	4b09      	ldr	r3, [pc, #36]	@ (8009228 <plotter_reset+0x70>)
 8009204:	2200      	movs	r2, #0
 8009206:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 8009208:	4b07      	ldr	r3, [pc, #28]	@ (8009228 <plotter_reset+0x70>)
 800920a:	f04f 0200 	mov.w	r2, #0
 800920e:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 8009210:	4b05      	ldr	r3, [pc, #20]	@ (8009228 <plotter_reset+0x70>)
 8009212:	f04f 0200 	mov.w	r2, #0
 8009216:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 8009218:	4b03      	ldr	r3, [pc, #12]	@ (8009228 <plotter_reset+0x70>)
 800921a:	f04f 0200 	mov.w	r2, #0
 800921e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8009220:	bf00      	nop
 8009222:	bd80      	pop	{r7, pc}
 8009224:	200006cc 	.word	0x200006cc
 8009228:	20000728 	.word	0x20000728

0800922c <plotter_update_sensors>:

void plotter_update_sensors() {
 800922c:	b580      	push	{r7, lr}
 800922e:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 8009230:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8009338 <plotter_update_sensors+0x10c>
 8009234:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 800933c <plotter_update_sensors+0x110>
 8009238:	2106      	movs	r1, #6
 800923a:	4841      	ldr	r0, [pc, #260]	@ (8009340 <plotter_update_sensors+0x114>)
 800923c:	f7f7 ff4c 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8009240:	eef0 7a40 	vmov.f32	s15, s0
 8009244:	4b3f      	ldr	r3, [pc, #252]	@ (8009344 <plotter_update_sensors+0x118>)
 8009246:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 800924a:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8009338 <plotter_update_sensors+0x10c>
 800924e:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 800933c <plotter_update_sensors+0x110>
 8009252:	2107      	movs	r1, #7
 8009254:	483a      	ldr	r0, [pc, #232]	@ (8009340 <plotter_update_sensors+0x114>)
 8009256:	f7f7 ff3f 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 800925a:	eef0 7a40 	vmov.f32	s15, s0
 800925e:	4b3a      	ldr	r3, [pc, #232]	@ (8009348 <plotter_update_sensors+0x11c>)
 8009260:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8009264:	2180      	movs	r1, #128	@ 0x80
 8009266:	4839      	ldr	r0, [pc, #228]	@ (800934c <plotter_update_sensors+0x120>)
 8009268:	f003 fbc6 	bl	800c9f8 <HAL_GPIO_ReadPin>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	bf0c      	ite	eq
 8009272:	2301      	moveq	r3, #1
 8009274:	2300      	movne	r3, #0
 8009276:	b2db      	uxtb	r3, r3
 8009278:	461a      	mov	r2, r3
 800927a:	4b35      	ldr	r3, [pc, #212]	@ (8009350 <plotter_update_sensors+0x124>)
 800927c:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 800927e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009282:	4834      	ldr	r0, [pc, #208]	@ (8009354 <plotter_update_sensors+0x128>)
 8009284:	f003 fbb8 	bl	800c9f8 <HAL_GPIO_ReadPin>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	bf0c      	ite	eq
 800928e:	2301      	moveq	r3, #1
 8009290:	2300      	movne	r3, #0
 8009292:	b2db      	uxtb	r3, r3
 8009294:	461a      	mov	r2, r3
 8009296:	4b30      	ldr	r3, [pc, #192]	@ (8009358 <plotter_update_sensors+0x12c>)
 8009298:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 800929a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800929e:	482d      	ldr	r0, [pc, #180]	@ (8009354 <plotter_update_sensors+0x128>)
 80092a0:	f003 fbaa 	bl	800c9f8 <HAL_GPIO_ReadPin>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	bf0c      	ite	eq
 80092aa:	2301      	moveq	r3, #1
 80092ac:	2300      	movne	r3, #0
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	461a      	mov	r2, r3
 80092b2:	4b2a      	ldr	r3, [pc, #168]	@ (800935c <plotter_update_sensors+0x130>)
 80092b4:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 80092b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80092ba:	4826      	ldr	r0, [pc, #152]	@ (8009354 <plotter_update_sensors+0x128>)
 80092bc:	f003 fb9c 	bl	800c9f8 <HAL_GPIO_ReadPin>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	bf0c      	ite	eq
 80092c6:	2301      	moveq	r3, #1
 80092c8:	2300      	movne	r3, #0
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	461a      	mov	r2, r3
 80092ce:	4b24      	ldr	r3, [pc, #144]	@ (8009360 <plotter_update_sensors+0x134>)
 80092d0:	601a      	str	r2, [r3, #0]

	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 80092d2:	2104      	movs	r1, #4
 80092d4:	481d      	ldr	r0, [pc, #116]	@ (800934c <plotter_update_sensors+0x120>)
 80092d6:	f003 fb8f 	bl	800c9f8 <HAL_GPIO_ReadPin>
 80092da:	4603      	mov	r3, r0
 80092dc:	461a      	mov	r2, r3
 80092de:	4b21      	ldr	r3, [pc, #132]	@ (8009364 <plotter_update_sensors+0x138>)
 80092e0:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 80092e2:	2102      	movs	r1, #2
 80092e4:	4819      	ldr	r0, [pc, #100]	@ (800934c <plotter_update_sensors+0x120>)
 80092e6:	f003 fb87 	bl	800c9f8 <HAL_GPIO_ReadPin>
 80092ea:	4603      	mov	r3, r0
 80092ec:	461a      	mov	r2, r3
 80092ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009368 <plotter_update_sensors+0x13c>)
 80092f0:	601a      	str	r2, [r3, #0]

	extern bool homing_active;
	if (!homing_active) {
 80092f2:	4b1e      	ldr	r3, [pc, #120]	@ (800936c <plotter_update_sensors+0x140>)
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	f083 0301 	eor.w	r3, r3, #1
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d018      	beq.n	8009332 <plotter_update_sensors+0x106>
		extern volatile bool up_photo, low_photo;
		up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 8009300:	2101      	movs	r1, #1
 8009302:	4812      	ldr	r0, [pc, #72]	@ (800934c <plotter_update_sensors+0x120>)
 8009304:	f003 fb78 	bl	800c9f8 <HAL_GPIO_ReadPin>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	bf14      	ite	ne
 800930e:	2301      	movne	r3, #1
 8009310:	2300      	moveq	r3, #0
 8009312:	b2da      	uxtb	r2, r3
 8009314:	4b16      	ldr	r3, [pc, #88]	@ (8009370 <plotter_update_sensors+0x144>)
 8009316:	701a      	strb	r2, [r3, #0]
		low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8009318:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800931c:	480b      	ldr	r0, [pc, #44]	@ (800934c <plotter_update_sensors+0x120>)
 800931e:	f003 fb6b 	bl	800c9f8 <HAL_GPIO_ReadPin>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	bf14      	ite	ne
 8009328:	2301      	movne	r3, #1
 800932a:	2300      	moveq	r3, #0
 800932c:	b2da      	uxtb	r2, r3
 800932e:	4b11      	ldr	r3, [pc, #68]	@ (8009374 <plotter_update_sensors+0x148>)
 8009330:	701a      	strb	r2, [r3, #0]
	}
}
 8009332:	bf00      	nop
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	42480000 	.word	0x42480000
 800933c:	c2480000 	.word	0xc2480000
 8009340:	2000087c 	.word	0x2000087c
 8009344:	20001b9c 	.word	0x20001b9c
 8009348:	20001ba0 	.word	0x20001ba0
 800934c:	48000400 	.word	0x48000400
 8009350:	20001bac 	.word	0x20001bac
 8009354:	48000800 	.word	0x48000800
 8009358:	20001bb0 	.word	0x20001bb0
 800935c:	20001bb4 	.word	0x20001bb4
 8009360:	20001bb8 	.word	0x20001bb8
 8009364:	20001ba4 	.word	0x20001ba4
 8009368:	20001ba8 	.word	0x20001ba8
 800936c:	20000567 	.word	0x20000567
 8009370:	20000564 	.word	0x20000564
 8009374:	20000565 	.word	0x20000565

08009378 <plotter_pen_up>:

void plotter_pen_up() {
 8009378:	b580      	push	{r7, lr}
 800937a:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 800937c:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8009380:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009390 <plotter_pen_up+0x18>
 8009384:	4803      	ldr	r0, [pc, #12]	@ (8009394 <plotter_pen_up+0x1c>)
 8009386:	f7fa fb25 	bl	80039d4 <PWM_write_duty>
}
 800938a:	bf00      	nop
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	42480000 	.word	0x42480000
 8009394:	20000864 	.word	0x20000864

08009398 <plotter_pen_down>:

void plotter_pen_down() {
 8009398:	b580      	push	{r7, lr}
 800939a:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 10);
 800939c:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80093a0:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80093b0 <plotter_pen_down+0x18>
 80093a4:	4803      	ldr	r0, [pc, #12]	@ (80093b4 <plotter_pen_down+0x1c>)
 80093a6:	f7fa fb15 	bl	80039d4 <PWM_write_duty>
}
 80093aa:	bf00      	nop
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	42480000 	.word	0x42480000
 80093b4:	20000864 	.word	0x20000864

080093b8 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	78fa      	ldrb	r2, [r7, #3]
 80093c8:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80093d0:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80093d8:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f04f 0200 	mov.w	r2, #0
 80093e0:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f04f 0200 	mov.w	r2, #0
 80093e8:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f04f 0200 	mov.w	r2, #0
 80093f0:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f04f 0200 	mov.w	r2, #0
 80093f8:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a1b      	ldr	r2, [pc, #108]	@ (800946c <SIGNAL_init+0xb4>)
 80093fe:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009406:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8009408:	78fb      	ldrb	r3, [r7, #3]
 800940a:	2b03      	cmp	r3, #3
 800940c:	d828      	bhi.n	8009460 <SIGNAL_init+0xa8>
 800940e:	a201      	add	r2, pc, #4	@ (adr r2, 8009414 <SIGNAL_init+0x5c>)
 8009410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009414:	0800945f 	.word	0x0800945f
 8009418:	08009425 	.word	0x08009425
 800941c:	08009443 	.word	0x08009443
 8009420:	0800944d 	.word	0x0800944d
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009430:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a0e      	ldr	r2, [pc, #56]	@ (8009470 <SIGNAL_init+0xb8>)
 8009436:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800943e:	621a      	str	r2, [r3, #32]
            break;
 8009440:	e00e      	b.n	8009460 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8009448:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 800944a:	e009      	b.n	8009460 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f04f 0200 	mov.w	r2, #0
 8009452:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800945a:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 800945c:	e000      	b.n	8009460 <SIGNAL_init+0xa8>
            break;
 800945e:	bf00      	nop
    }
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	bf800000 	.word	0xbf800000
 8009470:	41200000 	.word	0x41200000

08009474 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8009474:	b480      	push	{r7}
 8009476:	b089      	sub	sp, #36	@ 0x24
 8009478:	af00      	add	r7, sp, #0
 800947a:	61f8      	str	r0, [r7, #28]
 800947c:	ed87 0a06 	vstr	s0, [r7, #24]
 8009480:	edc7 0a05 	vstr	s1, [r7, #20]
 8009484:	ed87 1a04 	vstr	s2, [r7, #16]
 8009488:	edc7 1a03 	vstr	s3, [r7, #12]
 800948c:	ed87 2a02 	vstr	s4, [r7, #8]
 8009490:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	2200      	movs	r2, #0
 8009498:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	69ba      	ldr	r2, [r7, #24]
 800949e:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80094be:	bf00      	nop
 80094c0:	3724      	adds	r7, #36	@ 0x24
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 80094ca:	b480      	push	{r7}
 80094cc:	b089      	sub	sp, #36	@ 0x24
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	61f8      	str	r0, [r7, #28]
 80094d2:	ed87 0a06 	vstr	s0, [r7, #24]
 80094d6:	edc7 0a05 	vstr	s1, [r7, #20]
 80094da:	ed87 1a04 	vstr	s2, [r7, #16]
 80094de:	edc7 1a03 	vstr	s3, [r7, #12]
 80094e2:	ed87 2a02 	vstr	s4, [r7, #8]
 80094e6:	edc7 2a01 	vstr	s5, [r7, #4]
 80094ea:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	2202      	movs	r2, #2
 80094f2:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	693a      	ldr	r2, [r7, #16]
 8009504:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800951e:	bf00      	nop
 8009520:	3724      	adds	r7, #36	@ 0x24
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
	...

0800952c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009532:	4b0f      	ldr	r3, [pc, #60]	@ (8009570 <HAL_MspInit+0x44>)
 8009534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009536:	4a0e      	ldr	r2, [pc, #56]	@ (8009570 <HAL_MspInit+0x44>)
 8009538:	f043 0301 	orr.w	r3, r3, #1
 800953c:	6613      	str	r3, [r2, #96]	@ 0x60
 800953e:	4b0c      	ldr	r3, [pc, #48]	@ (8009570 <HAL_MspInit+0x44>)
 8009540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	607b      	str	r3, [r7, #4]
 8009548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800954a:	4b09      	ldr	r3, [pc, #36]	@ (8009570 <HAL_MspInit+0x44>)
 800954c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800954e:	4a08      	ldr	r2, [pc, #32]	@ (8009570 <HAL_MspInit+0x44>)
 8009550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009554:	6593      	str	r3, [r2, #88]	@ 0x58
 8009556:	4b06      	ldr	r3, [pc, #24]	@ (8009570 <HAL_MspInit+0x44>)
 8009558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800955a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800955e:	603b      	str	r3, [r7, #0]
 8009560:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8009562:	f003 fb4f 	bl	800cc04 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009566:	bf00      	nop
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	40021000 	.word	0x40021000

08009574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009574:	b480      	push	{r7}
 8009576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009578:	bf00      	nop
 800957a:	e7fd      	b.n	8009578 <NMI_Handler+0x4>

0800957c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800957c:	b480      	push	{r7}
 800957e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009580:	bf00      	nop
 8009582:	e7fd      	b.n	8009580 <HardFault_Handler+0x4>

08009584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009584:	b480      	push	{r7}
 8009586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009588:	bf00      	nop
 800958a:	e7fd      	b.n	8009588 <MemManage_Handler+0x4>

0800958c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800958c:	b480      	push	{r7}
 800958e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009590:	bf00      	nop
 8009592:	e7fd      	b.n	8009590 <BusFault_Handler+0x4>

08009594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009594:	b480      	push	{r7}
 8009596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009598:	bf00      	nop
 800959a:	e7fd      	b.n	8009598 <UsageFault_Handler+0x4>

0800959c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800959c:	b480      	push	{r7}
 800959e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80095a0:	bf00      	nop
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80095aa:	b480      	push	{r7}
 80095ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80095ae:	bf00      	nop
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80095b8:	b480      	push	{r7}
 80095ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80095bc:	bf00      	nop
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80095ca:	f000 ffbb 	bl	800a544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80095ce:	bf00      	nop
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 80095d6:	2001      	movs	r0, #1
 80095d8:	f003 fa58 	bl	800ca8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80095dc:	bf00      	nop
 80095de:	bd80      	pop	{r7, pc}

080095e0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 80095e4:	2010      	movs	r0, #16
 80095e6:	f003 fa51 	bl	800ca8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80095ea:	bf00      	nop
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80095f4:	4802      	ldr	r0, [pc, #8]	@ (8009600 <DMA1_Channel1_IRQHandler+0x10>)
 80095f6:	f002 ff2e 	bl	800c456 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80095fa:	bf00      	nop
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	20000420 	.word	0x20000420

08009604 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009608:	4802      	ldr	r0, [pc, #8]	@ (8009614 <DMA1_Channel2_IRQHandler+0x10>)
 800960a:	f002 ff24 	bl	800c456 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800960e:	bf00      	nop
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	200023ac 	.word	0x200023ac

08009618 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800961c:	4802      	ldr	r0, [pc, #8]	@ (8009628 <DMA1_Channel3_IRQHandler+0x10>)
 800961e:	f002 ff1a 	bl	800c456 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8009622:	bf00      	nop
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	2000240c 	.word	0x2000240c

0800962c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8009630:	4802      	ldr	r0, [pc, #8]	@ (800963c <DMA1_Channel4_IRQHandler+0x10>)
 8009632:	f002 ff10 	bl	800c456 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8009636:	bf00      	nop
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	200022ec 	.word	0x200022ec

08009640 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8009644:	4802      	ldr	r0, [pc, #8]	@ (8009650 <DMA1_Channel5_IRQHandler+0x10>)
 8009646:	f002 ff06 	bl	800c456 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800964a:	bf00      	nop
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	2000234c 	.word	0x2000234c

08009654 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8009658:	2040      	movs	r0, #64	@ 0x40
 800965a:	f003 fa17 	bl	800ca8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 800965e:	2080      	movs	r0, #128	@ 0x80
 8009660:	f003 fa14 	bl	800ca8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009664:	bf00      	nop
 8009666:	bd80      	pop	{r7, pc}

08009668 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800966c:	4803      	ldr	r0, [pc, #12]	@ (800967c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800966e:	f004 ff4f 	bl	800e510 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8009672:	4803      	ldr	r0, [pc, #12]	@ (8009680 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8009674:	f004 ff4c 	bl	800e510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8009678:	bf00      	nop
 800967a:	bd80      	pop	{r7, pc}
 800967c:	20001bc0 	.word	0x20001bc0
 8009680:	20002088 	.word	0x20002088

08009684 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009688:	4802      	ldr	r0, [pc, #8]	@ (8009694 <TIM2_IRQHandler+0x10>)
 800968a:	f004 ff41 	bl	800e510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800968e:	bf00      	nop
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	20001c8c 	.word	0x20001c8c

08009698 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800969c:	4802      	ldr	r0, [pc, #8]	@ (80096a8 <TIM3_IRQHandler+0x10>)
 800969e:	f004 ff37 	bl	800e510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80096a2:	bf00      	nop
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20001d58 	.word	0x20001d58

080096ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80096b0:	4802      	ldr	r0, [pc, #8]	@ (80096bc <TIM4_IRQHandler+0x10>)
 80096b2:	f004 ff2d 	bl	800e510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80096b6:	bf00      	nop
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20001e24 	.word	0x20001e24

080096c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80096c4:	4802      	ldr	r0, [pc, #8]	@ (80096d0 <USART2_IRQHandler+0x10>)
 80096c6:	f006 fcf7 	bl	80100b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80096ca:	bf00      	nop
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20002220 	.word	0x20002220

080096d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 80096d8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80096dc:	f003 f9d6 	bl	800ca8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 80096e0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80096e4:	f003 f9d2 	bl	800ca8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 80096e8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80096ec:	f003 f9ce 	bl	800ca8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80096f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80096f4:	f003 f9ca 	bl	800ca8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80096f8:	bf00      	nop
 80096fa:	bd80      	pop	{r7, pc}

080096fc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8009700:	4802      	ldr	r0, [pc, #8]	@ (800970c <LPUART1_IRQHandler+0x10>)
 8009702:	f006 fcd9 	bl	80100b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8009706:	bf00      	nop
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	20002154 	.word	0x20002154

08009710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009718:	4a14      	ldr	r2, [pc, #80]	@ (800976c <_sbrk+0x5c>)
 800971a:	4b15      	ldr	r3, [pc, #84]	@ (8009770 <_sbrk+0x60>)
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009724:	4b13      	ldr	r3, [pc, #76]	@ (8009774 <_sbrk+0x64>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d102      	bne.n	8009732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800972c:	4b11      	ldr	r3, [pc, #68]	@ (8009774 <_sbrk+0x64>)
 800972e:	4a12      	ldr	r2, [pc, #72]	@ (8009778 <_sbrk+0x68>)
 8009730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009732:	4b10      	ldr	r3, [pc, #64]	@ (8009774 <_sbrk+0x64>)
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4413      	add	r3, r2
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	429a      	cmp	r2, r3
 800973e:	d207      	bcs.n	8009750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009740:	f008 ffa8 	bl	8012694 <__errno>
 8009744:	4603      	mov	r3, r0
 8009746:	220c      	movs	r2, #12
 8009748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800974a:	f04f 33ff 	mov.w	r3, #4294967295
 800974e:	e009      	b.n	8009764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009750:	4b08      	ldr	r3, [pc, #32]	@ (8009774 <_sbrk+0x64>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009756:	4b07      	ldr	r3, [pc, #28]	@ (8009774 <_sbrk+0x64>)
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4413      	add	r3, r2
 800975e:	4a05      	ldr	r2, [pc, #20]	@ (8009774 <_sbrk+0x64>)
 8009760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009762:	68fb      	ldr	r3, [r7, #12]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3718      	adds	r7, #24
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	20020000 	.word	0x20020000
 8009770:	00000400 	.word	0x00000400
 8009774:	20001bbc 	.word	0x20001bbc
 8009778:	200025b8 	.word	0x200025b8

0800977c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800977c:	b480      	push	{r7}
 800977e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009780:	4b06      	ldr	r3, [pc, #24]	@ (800979c <SystemInit+0x20>)
 8009782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009786:	4a05      	ldr	r2, [pc, #20]	@ (800979c <SystemInit+0x20>)
 8009788:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800978c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009790:	bf00      	nop
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	e000ed00 	.word	0xe000ed00

080097a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b098      	sub	sp, #96	@ 0x60
 80097a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80097a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80097aa:	2200      	movs	r2, #0
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	605a      	str	r2, [r3, #4]
 80097b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80097b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80097b6:	2200      	movs	r2, #0
 80097b8:	601a      	str	r2, [r3, #0]
 80097ba:	605a      	str	r2, [r3, #4]
 80097bc:	609a      	str	r2, [r3, #8]
 80097be:	60da      	str	r2, [r3, #12]
 80097c0:	611a      	str	r2, [r3, #16]
 80097c2:	615a      	str	r2, [r3, #20]
 80097c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80097c6:	1d3b      	adds	r3, r7, #4
 80097c8:	2234      	movs	r2, #52	@ 0x34
 80097ca:	2100      	movs	r1, #0
 80097cc:	4618      	mov	r0, r3
 80097ce:	f008 ff49 	bl	8012664 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80097d2:	4b3b      	ldr	r3, [pc, #236]	@ (80098c0 <MX_TIM1_Init+0x120>)
 80097d4:	4a3b      	ldr	r2, [pc, #236]	@ (80098c4 <MX_TIM1_Init+0x124>)
 80097d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80097d8:	4b39      	ldr	r3, [pc, #228]	@ (80098c0 <MX_TIM1_Init+0x120>)
 80097da:	2200      	movs	r2, #0
 80097dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80097de:	4b38      	ldr	r3, [pc, #224]	@ (80098c0 <MX_TIM1_Init+0x120>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80097e4:	4b36      	ldr	r3, [pc, #216]	@ (80098c0 <MX_TIM1_Init+0x120>)
 80097e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80097ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80097ec:	4b34      	ldr	r3, [pc, #208]	@ (80098c0 <MX_TIM1_Init+0x120>)
 80097ee:	2200      	movs	r2, #0
 80097f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80097f2:	4b33      	ldr	r3, [pc, #204]	@ (80098c0 <MX_TIM1_Init+0x120>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80097f8:	4b31      	ldr	r3, [pc, #196]	@ (80098c0 <MX_TIM1_Init+0x120>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80097fe:	4830      	ldr	r0, [pc, #192]	@ (80098c0 <MX_TIM1_Init+0x120>)
 8009800:	f004 fad8 	bl	800ddb4 <HAL_TIM_PWM_Init>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800980a:	f7ff f925 	bl	8008a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800980e:	2300      	movs	r3, #0
 8009810:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009812:	2300      	movs	r3, #0
 8009814:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009816:	2300      	movs	r3, #0
 8009818:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800981a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800981e:	4619      	mov	r1, r3
 8009820:	4827      	ldr	r0, [pc, #156]	@ (80098c0 <MX_TIM1_Init+0x120>)
 8009822:	f006 f8e9 	bl	800f9f8 <HAL_TIMEx_MasterConfigSynchronization>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800982c:	f7ff f914 	bl	8008a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009830:	2360      	movs	r3, #96	@ 0x60
 8009832:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009838:	2300      	movs	r3, #0
 800983a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800983c:	2300      	movs	r3, #0
 800983e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009840:	2300      	movs	r3, #0
 8009842:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009844:	2300      	movs	r3, #0
 8009846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009848:	2300      	movs	r3, #0
 800984a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800984c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009850:	220c      	movs	r2, #12
 8009852:	4619      	mov	r1, r3
 8009854:	481a      	ldr	r0, [pc, #104]	@ (80098c0 <MX_TIM1_Init+0x120>)
 8009856:	f004 ffd5 	bl	800e804 <HAL_TIM_PWM_ConfigChannel>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8009860:	f7ff f8fa 	bl	8008a58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009864:	2300      	movs	r3, #0
 8009866:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009868:	2300      	movs	r3, #0
 800986a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800986c:	2300      	movs	r3, #0
 800986e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009870:	2300      	movs	r3, #0
 8009872:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009874:	2300      	movs	r3, #0
 8009876:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009878:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800987c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800987e:	2300      	movs	r3, #0
 8009880:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8009882:	2300      	movs	r3, #0
 8009884:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009886:	2300      	movs	r3, #0
 8009888:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800988a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800988e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009894:	2300      	movs	r3, #0
 8009896:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009898:	2300      	movs	r3, #0
 800989a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800989c:	1d3b      	adds	r3, r7, #4
 800989e:	4619      	mov	r1, r3
 80098a0:	4807      	ldr	r0, [pc, #28]	@ (80098c0 <MX_TIM1_Init+0x120>)
 80098a2:	f006 f93f 	bl	800fb24 <HAL_TIMEx_ConfigBreakDeadTime>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d001      	beq.n	80098b0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80098ac:	f7ff f8d4 	bl	8008a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80098b0:	4803      	ldr	r0, [pc, #12]	@ (80098c0 <MX_TIM1_Init+0x120>)
 80098b2:	f000 fb77 	bl	8009fa4 <HAL_TIM_MspPostInit>

}
 80098b6:	bf00      	nop
 80098b8:	3760      	adds	r7, #96	@ 0x60
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	20001bc0 	.word	0x20001bc0
 80098c4:	40012c00 	.word	0x40012c00

080098c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b088      	sub	sp, #32
 80098cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80098ce:	f107 0310 	add.w	r3, r7, #16
 80098d2:	2200      	movs	r2, #0
 80098d4:	601a      	str	r2, [r3, #0]
 80098d6:	605a      	str	r2, [r3, #4]
 80098d8:	609a      	str	r2, [r3, #8]
 80098da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80098dc:	1d3b      	adds	r3, r7, #4
 80098de:	2200      	movs	r2, #0
 80098e0:	601a      	str	r2, [r3, #0]
 80098e2:	605a      	str	r2, [r3, #4]
 80098e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80098e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009960 <MX_TIM2_Init+0x98>)
 80098e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80098ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80098ee:	4b1c      	ldr	r3, [pc, #112]	@ (8009960 <MX_TIM2_Init+0x98>)
 80098f0:	22a9      	movs	r2, #169	@ 0xa9
 80098f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80098f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009960 <MX_TIM2_Init+0x98>)
 80098f6:	2200      	movs	r2, #0
 80098f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80098fa:	4b19      	ldr	r3, [pc, #100]	@ (8009960 <MX_TIM2_Init+0x98>)
 80098fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009900:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009902:	4b17      	ldr	r3, [pc, #92]	@ (8009960 <MX_TIM2_Init+0x98>)
 8009904:	2200      	movs	r2, #0
 8009906:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009908:	4b15      	ldr	r3, [pc, #84]	@ (8009960 <MX_TIM2_Init+0x98>)
 800990a:	2200      	movs	r2, #0
 800990c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800990e:	4814      	ldr	r0, [pc, #80]	@ (8009960 <MX_TIM2_Init+0x98>)
 8009910:	f004 f904 	bl	800db1c <HAL_TIM_Base_Init>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d001      	beq.n	800991e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800991a:	f7ff f89d 	bl	8008a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800991e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009922:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009924:	f107 0310 	add.w	r3, r7, #16
 8009928:	4619      	mov	r1, r3
 800992a:	480d      	ldr	r0, [pc, #52]	@ (8009960 <MX_TIM2_Init+0x98>)
 800992c:	f005 f87e 	bl	800ea2c <HAL_TIM_ConfigClockSource>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d001      	beq.n	800993a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8009936:	f7ff f88f 	bl	8008a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800993a:	2300      	movs	r3, #0
 800993c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800993e:	2300      	movs	r3, #0
 8009940:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009942:	1d3b      	adds	r3, r7, #4
 8009944:	4619      	mov	r1, r3
 8009946:	4806      	ldr	r0, [pc, #24]	@ (8009960 <MX_TIM2_Init+0x98>)
 8009948:	f006 f856 	bl	800f9f8 <HAL_TIMEx_MasterConfigSynchronization>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d001      	beq.n	8009956 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8009952:	f7ff f881 	bl	8008a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009956:	bf00      	nop
 8009958:	3720      	adds	r7, #32
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	20001c8c 	.word	0x20001c8c

08009964 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b08c      	sub	sp, #48	@ 0x30
 8009968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800996a:	f107 030c 	add.w	r3, r7, #12
 800996e:	2224      	movs	r2, #36	@ 0x24
 8009970:	2100      	movs	r1, #0
 8009972:	4618      	mov	r0, r3
 8009974:	f008 fe76 	bl	8012664 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009978:	463b      	mov	r3, r7
 800997a:	2200      	movs	r2, #0
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	605a      	str	r2, [r3, #4]
 8009980:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009982:	4b21      	ldr	r3, [pc, #132]	@ (8009a08 <MX_TIM3_Init+0xa4>)
 8009984:	4a21      	ldr	r2, [pc, #132]	@ (8009a0c <MX_TIM3_Init+0xa8>)
 8009986:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009988:	4b1f      	ldr	r3, [pc, #124]	@ (8009a08 <MX_TIM3_Init+0xa4>)
 800998a:	2200      	movs	r2, #0
 800998c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800998e:	4b1e      	ldr	r3, [pc, #120]	@ (8009a08 <MX_TIM3_Init+0xa4>)
 8009990:	2200      	movs	r2, #0
 8009992:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8009994:	4b1c      	ldr	r3, [pc, #112]	@ (8009a08 <MX_TIM3_Init+0xa4>)
 8009996:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800999a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800999c:	4b1a      	ldr	r3, [pc, #104]	@ (8009a08 <MX_TIM3_Init+0xa4>)
 800999e:	2200      	movs	r2, #0
 80099a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099a2:	4b19      	ldr	r3, [pc, #100]	@ (8009a08 <MX_TIM3_Init+0xa4>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80099a8:	2303      	movs	r3, #3
 80099aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80099ac:	2300      	movs	r3, #0
 80099ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80099b0:	2301      	movs	r3, #1
 80099b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80099b4:	2300      	movs	r3, #0
 80099b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80099b8:	2300      	movs	r3, #0
 80099ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80099bc:	2300      	movs	r3, #0
 80099be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80099c0:	2301      	movs	r3, #1
 80099c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80099c4:	2300      	movs	r3, #0
 80099c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80099cc:	f107 030c 	add.w	r3, r7, #12
 80099d0:	4619      	mov	r1, r3
 80099d2:	480d      	ldr	r0, [pc, #52]	@ (8009a08 <MX_TIM3_Init+0xa4>)
 80099d4:	f004 fc5a 	bl	800e28c <HAL_TIM_Encoder_Init>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80099de:	f7ff f83b 	bl	8008a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80099e2:	2300      	movs	r3, #0
 80099e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099e6:	2300      	movs	r3, #0
 80099e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80099ea:	463b      	mov	r3, r7
 80099ec:	4619      	mov	r1, r3
 80099ee:	4806      	ldr	r0, [pc, #24]	@ (8009a08 <MX_TIM3_Init+0xa4>)
 80099f0:	f006 f802 	bl	800f9f8 <HAL_TIMEx_MasterConfigSynchronization>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80099fa:	f7ff f82d 	bl	8008a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80099fe:	bf00      	nop
 8009a00:	3730      	adds	r7, #48	@ 0x30
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	20001d58 	.word	0x20001d58
 8009a0c:	40000400 	.word	0x40000400

08009a10 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b08c      	sub	sp, #48	@ 0x30
 8009a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009a16:	f107 030c 	add.w	r3, r7, #12
 8009a1a:	2224      	movs	r2, #36	@ 0x24
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f008 fe20 	bl	8012664 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a24:	463b      	mov	r3, r7
 8009a26:	2200      	movs	r2, #0
 8009a28:	601a      	str	r2, [r3, #0]
 8009a2a:	605a      	str	r2, [r3, #4]
 8009a2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009a2e:	4b21      	ldr	r3, [pc, #132]	@ (8009ab4 <MX_TIM4_Init+0xa4>)
 8009a30:	4a21      	ldr	r2, [pc, #132]	@ (8009ab8 <MX_TIM4_Init+0xa8>)
 8009a32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8009a34:	4b1f      	ldr	r3, [pc, #124]	@ (8009ab4 <MX_TIM4_Init+0xa4>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8009ab4 <MX_TIM4_Init+0xa4>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8009a40:	4b1c      	ldr	r3, [pc, #112]	@ (8009ab4 <MX_TIM4_Init+0xa4>)
 8009a42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a48:	4b1a      	ldr	r3, [pc, #104]	@ (8009ab4 <MX_TIM4_Init+0xa4>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a4e:	4b19      	ldr	r3, [pc, #100]	@ (8009ab4 <MX_TIM4_Init+0xa4>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009a54:	2303      	movs	r3, #3
 8009a56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009a60:	2300      	movs	r3, #0
 8009a62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009a64:	2300      	movs	r3, #0
 8009a66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009a70:	2300      	movs	r3, #0
 8009a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8009a74:	2300      	movs	r3, #0
 8009a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8009a78:	f107 030c 	add.w	r3, r7, #12
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	480d      	ldr	r0, [pc, #52]	@ (8009ab4 <MX_TIM4_Init+0xa4>)
 8009a80:	f004 fc04 	bl	800e28c <HAL_TIM_Encoder_Init>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8009a8a:	f7fe ffe5 	bl	8008a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a92:	2300      	movs	r3, #0
 8009a94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009a96:	463b      	mov	r3, r7
 8009a98:	4619      	mov	r1, r3
 8009a9a:	4806      	ldr	r0, [pc, #24]	@ (8009ab4 <MX_TIM4_Init+0xa4>)
 8009a9c:	f005 ffac 	bl	800f9f8 <HAL_TIMEx_MasterConfigSynchronization>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8009aa6:	f7fe ffd7 	bl	8008a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8009aaa:	bf00      	nop
 8009aac:	3730      	adds	r7, #48	@ 0x30
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	20001e24 	.word	0x20001e24
 8009ab8:	40000800 	.word	0x40000800

08009abc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b08c      	sub	sp, #48	@ 0x30
 8009ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009ac2:	f107 030c 	add.w	r3, r7, #12
 8009ac6:	2224      	movs	r2, #36	@ 0x24
 8009ac8:	2100      	movs	r1, #0
 8009aca:	4618      	mov	r0, r3
 8009acc:	f008 fdca 	bl	8012664 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ad0:	463b      	mov	r3, r7
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	601a      	str	r2, [r3, #0]
 8009ad6:	605a      	str	r2, [r3, #4]
 8009ad8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8009ada:	4b21      	ldr	r3, [pc, #132]	@ (8009b60 <MX_TIM5_Init+0xa4>)
 8009adc:	4a21      	ldr	r2, [pc, #132]	@ (8009b64 <MX_TIM5_Init+0xa8>)
 8009ade:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8009ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8009b60 <MX_TIM5_Init+0xa4>)
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8009b60 <MX_TIM5_Init+0xa4>)
 8009ae8:	2200      	movs	r2, #0
 8009aea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8009aec:	4b1c      	ldr	r3, [pc, #112]	@ (8009b60 <MX_TIM5_Init+0xa4>)
 8009aee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009af2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009af4:	4b1a      	ldr	r3, [pc, #104]	@ (8009b60 <MX_TIM5_Init+0xa4>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009afa:	4b19      	ldr	r3, [pc, #100]	@ (8009b60 <MX_TIM5_Init+0xa4>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009b00:	2303      	movs	r3, #3
 8009b02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009b04:	2300      	movs	r3, #0
 8009b06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009b10:	2300      	movs	r3, #0
 8009b12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009b14:	2300      	movs	r3, #0
 8009b16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8009b24:	f107 030c 	add.w	r3, r7, #12
 8009b28:	4619      	mov	r1, r3
 8009b2a:	480d      	ldr	r0, [pc, #52]	@ (8009b60 <MX_TIM5_Init+0xa4>)
 8009b2c:	f004 fbae 	bl	800e28c <HAL_TIM_Encoder_Init>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d001      	beq.n	8009b3a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8009b36:	f7fe ff8f 	bl	8008a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009b42:	463b      	mov	r3, r7
 8009b44:	4619      	mov	r1, r3
 8009b46:	4806      	ldr	r0, [pc, #24]	@ (8009b60 <MX_TIM5_Init+0xa4>)
 8009b48:	f005 ff56 	bl	800f9f8 <HAL_TIMEx_MasterConfigSynchronization>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d001      	beq.n	8009b56 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8009b52:	f7fe ff81 	bl	8008a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8009b56:	bf00      	nop
 8009b58:	3730      	adds	r7, #48	@ 0x30
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	20001ef0 	.word	0x20001ef0
 8009b64:	40000c00 	.word	0x40000c00

08009b68 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b09c      	sub	sp, #112	@ 0x70
 8009b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009b6e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]
 8009b76:	605a      	str	r2, [r3, #4]
 8009b78:	609a      	str	r2, [r3, #8]
 8009b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b7c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009b80:	2200      	movs	r2, #0
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	605a      	str	r2, [r3, #4]
 8009b86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009b88:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	601a      	str	r2, [r3, #0]
 8009b90:	605a      	str	r2, [r3, #4]
 8009b92:	609a      	str	r2, [r3, #8]
 8009b94:	60da      	str	r2, [r3, #12]
 8009b96:	611a      	str	r2, [r3, #16]
 8009b98:	615a      	str	r2, [r3, #20]
 8009b9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009b9c:	1d3b      	adds	r3, r7, #4
 8009b9e:	2234      	movs	r2, #52	@ 0x34
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f008 fd5e 	bl	8012664 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009ba8:	4b4c      	ldr	r3, [pc, #304]	@ (8009cdc <MX_TIM8_Init+0x174>)
 8009baa:	4a4d      	ldr	r2, [pc, #308]	@ (8009ce0 <MX_TIM8_Init+0x178>)
 8009bac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009bae:	4b4b      	ldr	r3, [pc, #300]	@ (8009cdc <MX_TIM8_Init+0x174>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009bb4:	4b49      	ldr	r3, [pc, #292]	@ (8009cdc <MX_TIM8_Init+0x174>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8009bba:	4b48      	ldr	r3, [pc, #288]	@ (8009cdc <MX_TIM8_Init+0x174>)
 8009bbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009bc0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8009bc2:	4b46      	ldr	r3, [pc, #280]	@ (8009cdc <MX_TIM8_Init+0x174>)
 8009bc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009bc8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009bca:	4b44      	ldr	r3, [pc, #272]	@ (8009cdc <MX_TIM8_Init+0x174>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009bd0:	4b42      	ldr	r3, [pc, #264]	@ (8009cdc <MX_TIM8_Init+0x174>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009bd6:	4841      	ldr	r0, [pc, #260]	@ (8009cdc <MX_TIM8_Init+0x174>)
 8009bd8:	f003 ffa0 	bl	800db1c <HAL_TIM_Base_Init>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8009be2:	f7fe ff39 	bl	8008a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009be6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009bea:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009bec:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	483a      	ldr	r0, [pc, #232]	@ (8009cdc <MX_TIM8_Init+0x174>)
 8009bf4:	f004 ff1a 	bl	800ea2c <HAL_TIM_ConfigClockSource>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d001      	beq.n	8009c02 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009bfe:	f7fe ff2b 	bl	8008a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009c02:	4836      	ldr	r0, [pc, #216]	@ (8009cdc <MX_TIM8_Init+0x174>)
 8009c04:	f004 f8d6 	bl	800ddb4 <HAL_TIM_PWM_Init>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d001      	beq.n	8009c12 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8009c0e:	f7fe ff23 	bl	8008a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c12:	2300      	movs	r3, #0
 8009c14:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009c16:	2300      	movs	r3, #0
 8009c18:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009c1e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009c22:	4619      	mov	r1, r3
 8009c24:	482d      	ldr	r0, [pc, #180]	@ (8009cdc <MX_TIM8_Init+0x174>)
 8009c26:	f005 fee7 	bl	800f9f8 <HAL_TIMEx_MasterConfigSynchronization>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d001      	beq.n	8009c34 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8009c30:	f7fe ff12 	bl	8008a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009c34:	2360      	movs	r3, #96	@ 0x60
 8009c36:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009c40:	2300      	movs	r3, #0
 8009c42:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009c44:	2300      	movs	r3, #0
 8009c46:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009c50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009c54:	2200      	movs	r2, #0
 8009c56:	4619      	mov	r1, r3
 8009c58:	4820      	ldr	r0, [pc, #128]	@ (8009cdc <MX_TIM8_Init+0x174>)
 8009c5a:	f004 fdd3 	bl	800e804 <HAL_TIM_PWM_ConfigChannel>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8009c64:	f7fe fef8 	bl	8008a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009c68:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009c6c:	2204      	movs	r2, #4
 8009c6e:	4619      	mov	r1, r3
 8009c70:	481a      	ldr	r0, [pc, #104]	@ (8009cdc <MX_TIM8_Init+0x174>)
 8009c72:	f004 fdc7 	bl	800e804 <HAL_TIM_PWM_ConfigChannel>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d001      	beq.n	8009c80 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8009c7c:	f7fe feec 	bl	8008a58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009c80:	2300      	movs	r3, #0
 8009c82:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009c84:	2300      	movs	r3, #0
 8009c86:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009c90:	2300      	movs	r3, #0
 8009c92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009c94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009c98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009ca6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009cac:	2300      	movs	r3, #0
 8009cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009cb8:	1d3b      	adds	r3, r7, #4
 8009cba:	4619      	mov	r1, r3
 8009cbc:	4807      	ldr	r0, [pc, #28]	@ (8009cdc <MX_TIM8_Init+0x174>)
 8009cbe:	f005 ff31 	bl	800fb24 <HAL_TIMEx_ConfigBreakDeadTime>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d001      	beq.n	8009ccc <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8009cc8:	f7fe fec6 	bl	8008a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8009ccc:	4803      	ldr	r0, [pc, #12]	@ (8009cdc <MX_TIM8_Init+0x174>)
 8009cce:	f000 f969 	bl	8009fa4 <HAL_TIM_MspPostInit>

}
 8009cd2:	bf00      	nop
 8009cd4:	3770      	adds	r7, #112	@ 0x70
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	20001fbc 	.word	0x20001fbc
 8009ce0:	40013400 	.word	0x40013400

08009ce4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8009ce8:	4b14      	ldr	r3, [pc, #80]	@ (8009d3c <MX_TIM16_Init+0x58>)
 8009cea:	4a15      	ldr	r2, [pc, #84]	@ (8009d40 <MX_TIM16_Init+0x5c>)
 8009cec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8009cee:	4b13      	ldr	r3, [pc, #76]	@ (8009d3c <MX_TIM16_Init+0x58>)
 8009cf0:	22a9      	movs	r2, #169	@ 0xa9
 8009cf2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009cf4:	4b11      	ldr	r3, [pc, #68]	@ (8009d3c <MX_TIM16_Init+0x58>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8009cfa:	4b10      	ldr	r3, [pc, #64]	@ (8009d3c <MX_TIM16_Init+0x58>)
 8009cfc:	f240 4279 	movw	r2, #1145	@ 0x479
 8009d00:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009d02:	4b0e      	ldr	r3, [pc, #56]	@ (8009d3c <MX_TIM16_Init+0x58>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8009d08:	4b0c      	ldr	r3, [pc, #48]	@ (8009d3c <MX_TIM16_Init+0x58>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8009d3c <MX_TIM16_Init+0x58>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8009d14:	4809      	ldr	r0, [pc, #36]	@ (8009d3c <MX_TIM16_Init+0x58>)
 8009d16:	f003 ff01 	bl	800db1c <HAL_TIM_Base_Init>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d001      	beq.n	8009d24 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8009d20:	f7fe fe9a 	bl	8008a58 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8009d24:	2108      	movs	r1, #8
 8009d26:	4805      	ldr	r0, [pc, #20]	@ (8009d3c <MX_TIM16_Init+0x58>)
 8009d28:	f004 f9ba 	bl	800e0a0 <HAL_TIM_OnePulse_Init>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8009d32:	f7fe fe91 	bl	8008a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8009d36:	bf00      	nop
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	20002088 	.word	0x20002088
 8009d40:	40014400 	.word	0x40014400

08009d44 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a0d      	ldr	r2, [pc, #52]	@ (8009d88 <HAL_TIM_PWM_MspInit+0x44>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d113      	bne.n	8009d7e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009d56:	4b0d      	ldr	r3, [pc, #52]	@ (8009d8c <HAL_TIM_PWM_MspInit+0x48>)
 8009d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8009d8c <HAL_TIM_PWM_MspInit+0x48>)
 8009d5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009d60:	6613      	str	r3, [r2, #96]	@ 0x60
 8009d62:	4b0a      	ldr	r3, [pc, #40]	@ (8009d8c <HAL_TIM_PWM_MspInit+0x48>)
 8009d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d6a:	60fb      	str	r3, [r7, #12]
 8009d6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8009d6e:	2200      	movs	r2, #0
 8009d70:	2100      	movs	r1, #0
 8009d72:	2019      	movs	r0, #25
 8009d74:	f002 f957 	bl	800c026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009d78:	2019      	movs	r0, #25
 8009d7a:	f002 f96e 	bl	800c05a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8009d7e:	bf00      	nop
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	40012c00 	.word	0x40012c00
 8009d8c:	40021000 	.word	0x40021000

08009d90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009da0:	d114      	bne.n	8009dcc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009da2:	4b22      	ldr	r3, [pc, #136]	@ (8009e2c <HAL_TIM_Base_MspInit+0x9c>)
 8009da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009da6:	4a21      	ldr	r2, [pc, #132]	@ (8009e2c <HAL_TIM_Base_MspInit+0x9c>)
 8009da8:	f043 0301 	orr.w	r3, r3, #1
 8009dac:	6593      	str	r3, [r2, #88]	@ 0x58
 8009dae:	4b1f      	ldr	r3, [pc, #124]	@ (8009e2c <HAL_TIM_Base_MspInit+0x9c>)
 8009db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009db2:	f003 0301 	and.w	r3, r3, #1
 8009db6:	617b      	str	r3, [r7, #20]
 8009db8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8009dba:	2200      	movs	r2, #0
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	201c      	movs	r0, #28
 8009dc0:	f002 f931 	bl	800c026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009dc4:	201c      	movs	r0, #28
 8009dc6:	f002 f948 	bl	800c05a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8009dca:	e02a      	b.n	8009e22 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a17      	ldr	r2, [pc, #92]	@ (8009e30 <HAL_TIM_Base_MspInit+0xa0>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d10c      	bne.n	8009df0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009dd6:	4b15      	ldr	r3, [pc, #84]	@ (8009e2c <HAL_TIM_Base_MspInit+0x9c>)
 8009dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dda:	4a14      	ldr	r2, [pc, #80]	@ (8009e2c <HAL_TIM_Base_MspInit+0x9c>)
 8009ddc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009de0:	6613      	str	r3, [r2, #96]	@ 0x60
 8009de2:	4b12      	ldr	r3, [pc, #72]	@ (8009e2c <HAL_TIM_Base_MspInit+0x9c>)
 8009de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009de6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009dea:	613b      	str	r3, [r7, #16]
 8009dec:	693b      	ldr	r3, [r7, #16]
}
 8009dee:	e018      	b.n	8009e22 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a0f      	ldr	r2, [pc, #60]	@ (8009e34 <HAL_TIM_Base_MspInit+0xa4>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d113      	bne.n	8009e22 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8009e2c <HAL_TIM_Base_MspInit+0x9c>)
 8009dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dfe:	4a0b      	ldr	r2, [pc, #44]	@ (8009e2c <HAL_TIM_Base_MspInit+0x9c>)
 8009e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e04:	6613      	str	r3, [r2, #96]	@ 0x60
 8009e06:	4b09      	ldr	r3, [pc, #36]	@ (8009e2c <HAL_TIM_Base_MspInit+0x9c>)
 8009e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e0e:	60fb      	str	r3, [r7, #12]
 8009e10:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8009e12:	2200      	movs	r2, #0
 8009e14:	2100      	movs	r1, #0
 8009e16:	2019      	movs	r0, #25
 8009e18:	f002 f905 	bl	800c026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009e1c:	2019      	movs	r0, #25
 8009e1e:	f002 f91c 	bl	800c05a <HAL_NVIC_EnableIRQ>
}
 8009e22:	bf00      	nop
 8009e24:	3718      	adds	r7, #24
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	40021000 	.word	0x40021000
 8009e30:	40013400 	.word	0x40013400
 8009e34:	40014400 	.word	0x40014400

08009e38 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b08e      	sub	sp, #56	@ 0x38
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e44:	2200      	movs	r2, #0
 8009e46:	601a      	str	r2, [r3, #0]
 8009e48:	605a      	str	r2, [r3, #4]
 8009e4a:	609a      	str	r2, [r3, #8]
 8009e4c:	60da      	str	r2, [r3, #12]
 8009e4e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a4f      	ldr	r2, [pc, #316]	@ (8009f94 <HAL_TIM_Encoder_MspInit+0x15c>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d131      	bne.n	8009ebe <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e5e:	4a4e      	ldr	r2, [pc, #312]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009e60:	f043 0302 	orr.w	r3, r3, #2
 8009e64:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e66:	4b4c      	ldr	r3, [pc, #304]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e6a:	f003 0302 	and.w	r3, r3, #2
 8009e6e:	623b      	str	r3, [r7, #32]
 8009e70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e72:	4b49      	ldr	r3, [pc, #292]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e76:	4a48      	ldr	r2, [pc, #288]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009e78:	f043 0301 	orr.w	r3, r3, #1
 8009e7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009e7e:	4b46      	ldr	r3, [pc, #280]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e82:	f003 0301 	and.w	r3, r3, #1
 8009e86:	61fb      	str	r3, [r7, #28]
 8009e88:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009e8a:	23c0      	movs	r3, #192	@ 0xc0
 8009e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e8e:	2302      	movs	r3, #2
 8009e90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e92:	2300      	movs	r3, #0
 8009e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e96:	2300      	movs	r3, #0
 8009e98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009ea8:	f002 fc24 	bl	800c6f4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8009eac:	2200      	movs	r2, #0
 8009eae:	2100      	movs	r1, #0
 8009eb0:	201d      	movs	r0, #29
 8009eb2:	f002 f8b8 	bl	800c026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8009eb6:	201d      	movs	r0, #29
 8009eb8:	f002 f8cf 	bl	800c05a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8009ebc:	e065      	b.n	8009f8a <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a36      	ldr	r2, [pc, #216]	@ (8009f9c <HAL_TIM_Encoder_MspInit+0x164>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d132      	bne.n	8009f2e <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009ec8:	4b33      	ldr	r3, [pc, #204]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ecc:	4a32      	ldr	r2, [pc, #200]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009ece:	f043 0304 	orr.w	r3, r3, #4
 8009ed2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ed4:	4b30      	ldr	r3, [pc, #192]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ed8:	f003 0304 	and.w	r3, r3, #4
 8009edc:	61bb      	str	r3, [r7, #24]
 8009ede:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ee4:	4a2c      	ldr	r2, [pc, #176]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009ee6:	f043 0301 	orr.w	r3, r3, #1
 8009eea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009eec:	4b2a      	ldr	r3, [pc, #168]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ef0:	f003 0301 	and.w	r3, r3, #1
 8009ef4:	617b      	str	r3, [r7, #20]
 8009ef6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009ef8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009efc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009efe:	2302      	movs	r3, #2
 8009f00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f02:	2300      	movs	r3, #0
 8009f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f06:	2300      	movs	r3, #0
 8009f08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8009f0a:	230a      	movs	r3, #10
 8009f0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f12:	4619      	mov	r1, r3
 8009f14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009f18:	f002 fbec 	bl	800c6f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	2100      	movs	r1, #0
 8009f20:	201e      	movs	r0, #30
 8009f22:	f002 f880 	bl	800c026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8009f26:	201e      	movs	r0, #30
 8009f28:	f002 f897 	bl	800c05a <HAL_NVIC_EnableIRQ>
}
 8009f2c:	e02d      	b.n	8009f8a <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a1b      	ldr	r2, [pc, #108]	@ (8009fa0 <HAL_TIM_Encoder_MspInit+0x168>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d128      	bne.n	8009f8a <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009f38:	4b17      	ldr	r3, [pc, #92]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f3c:	4a16      	ldr	r2, [pc, #88]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009f3e:	f043 0308 	orr.w	r3, r3, #8
 8009f42:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f44:	4b14      	ldr	r3, [pc, #80]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f48:	f003 0308 	and.w	r3, r3, #8
 8009f4c:	613b      	str	r3, [r7, #16]
 8009f4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f50:	4b11      	ldr	r3, [pc, #68]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f54:	4a10      	ldr	r2, [pc, #64]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009f56:	f043 0301 	orr.w	r3, r3, #1
 8009f5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8009f98 <HAL_TIM_Encoder_MspInit+0x160>)
 8009f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f60:	f003 0301 	and.w	r3, r3, #1
 8009f64:	60fb      	str	r3, [r7, #12]
 8009f66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f70:	2300      	movs	r3, #0
 8009f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f74:	2300      	movs	r3, #0
 8009f76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8009f78:	2302      	movs	r3, #2
 8009f7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f80:	4619      	mov	r1, r3
 8009f82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009f86:	f002 fbb5 	bl	800c6f4 <HAL_GPIO_Init>
}
 8009f8a:	bf00      	nop
 8009f8c:	3738      	adds	r7, #56	@ 0x38
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	40000400 	.word	0x40000400
 8009f98:	40021000 	.word	0x40021000
 8009f9c:	40000800 	.word	0x40000800
 8009fa0:	40000c00 	.word	0x40000c00

08009fa4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08a      	sub	sp, #40	@ 0x28
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fac:	f107 0314 	add.w	r3, r7, #20
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	605a      	str	r2, [r3, #4]
 8009fb6:	609a      	str	r2, [r3, #8]
 8009fb8:	60da      	str	r2, [r3, #12]
 8009fba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a22      	ldr	r2, [pc, #136]	@ (800a04c <HAL_TIM_MspPostInit+0xa8>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d11c      	bne.n	800a000 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009fc6:	4b22      	ldr	r3, [pc, #136]	@ (800a050 <HAL_TIM_MspPostInit+0xac>)
 8009fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fca:	4a21      	ldr	r2, [pc, #132]	@ (800a050 <HAL_TIM_MspPostInit+0xac>)
 8009fcc:	f043 0304 	orr.w	r3, r3, #4
 8009fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009fd2:	4b1f      	ldr	r3, [pc, #124]	@ (800a050 <HAL_TIM_MspPostInit+0xac>)
 8009fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fd6:	f003 0304 	and.w	r3, r3, #4
 8009fda:	613b      	str	r3, [r7, #16]
 8009fdc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009fde:	2308      	movs	r3, #8
 8009fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fea:	2300      	movs	r3, #0
 8009fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8009fee:	2302      	movs	r3, #2
 8009ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ff2:	f107 0314 	add.w	r3, r7, #20
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	4816      	ldr	r0, [pc, #88]	@ (800a054 <HAL_TIM_MspPostInit+0xb0>)
 8009ffa:	f002 fb7b 	bl	800c6f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8009ffe:	e020      	b.n	800a042 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a14      	ldr	r2, [pc, #80]	@ (800a058 <HAL_TIM_MspPostInit+0xb4>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d11b      	bne.n	800a042 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a00a:	4b11      	ldr	r3, [pc, #68]	@ (800a050 <HAL_TIM_MspPostInit+0xac>)
 800a00c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a00e:	4a10      	ldr	r2, [pc, #64]	@ (800a050 <HAL_TIM_MspPostInit+0xac>)
 800a010:	f043 0304 	orr.w	r3, r3, #4
 800a014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a016:	4b0e      	ldr	r3, [pc, #56]	@ (800a050 <HAL_TIM_MspPostInit+0xac>)
 800a018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a01a:	f003 0304 	and.w	r3, r3, #4
 800a01e:	60fb      	str	r3, [r7, #12]
 800a020:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a022:	23c0      	movs	r3, #192	@ 0xc0
 800a024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a026:	2302      	movs	r3, #2
 800a028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a02a:	2300      	movs	r3, #0
 800a02c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a02e:	2300      	movs	r3, #0
 800a030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800a032:	2304      	movs	r3, #4
 800a034:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a036:	f107 0314 	add.w	r3, r7, #20
 800a03a:	4619      	mov	r1, r3
 800a03c:	4805      	ldr	r0, [pc, #20]	@ (800a054 <HAL_TIM_MspPostInit+0xb0>)
 800a03e:	f002 fb59 	bl	800c6f4 <HAL_GPIO_Init>
}
 800a042:	bf00      	nop
 800a044:	3728      	adds	r7, #40	@ 0x28
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	40012c00 	.word	0x40012c00
 800a050:	40021000 	.word	0x40021000
 800a054:	48000800 	.word	0x48000800
 800a058:	40013400 	.word	0x40013400

0800a05c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800a060:	4b20      	ldr	r3, [pc, #128]	@ (800a0e4 <MX_LPUART1_UART_Init+0x88>)
 800a062:	4a21      	ldr	r2, [pc, #132]	@ (800a0e8 <MX_LPUART1_UART_Init+0x8c>)
 800a064:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800a066:	4b1f      	ldr	r3, [pc, #124]	@ (800a0e4 <MX_LPUART1_UART_Init+0x88>)
 800a068:	4a20      	ldr	r2, [pc, #128]	@ (800a0ec <MX_LPUART1_UART_Init+0x90>)
 800a06a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a06c:	4b1d      	ldr	r3, [pc, #116]	@ (800a0e4 <MX_LPUART1_UART_Init+0x88>)
 800a06e:	2200      	movs	r2, #0
 800a070:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800a072:	4b1c      	ldr	r3, [pc, #112]	@ (800a0e4 <MX_LPUART1_UART_Init+0x88>)
 800a074:	2200      	movs	r2, #0
 800a076:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800a078:	4b1a      	ldr	r3, [pc, #104]	@ (800a0e4 <MX_LPUART1_UART_Init+0x88>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800a07e:	4b19      	ldr	r3, [pc, #100]	@ (800a0e4 <MX_LPUART1_UART_Init+0x88>)
 800a080:	220c      	movs	r2, #12
 800a082:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a084:	4b17      	ldr	r3, [pc, #92]	@ (800a0e4 <MX_LPUART1_UART_Init+0x88>)
 800a086:	2200      	movs	r2, #0
 800a088:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a08a:	4b16      	ldr	r3, [pc, #88]	@ (800a0e4 <MX_LPUART1_UART_Init+0x88>)
 800a08c:	2200      	movs	r2, #0
 800a08e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a090:	4b14      	ldr	r3, [pc, #80]	@ (800a0e4 <MX_LPUART1_UART_Init+0x88>)
 800a092:	2200      	movs	r2, #0
 800a094:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a096:	4b13      	ldr	r3, [pc, #76]	@ (800a0e4 <MX_LPUART1_UART_Init+0x88>)
 800a098:	2200      	movs	r2, #0
 800a09a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800a09c:	4811      	ldr	r0, [pc, #68]	@ (800a0e4 <MX_LPUART1_UART_Init+0x88>)
 800a09e:	f005 fe25 	bl	800fcec <HAL_UART_Init>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800a0a8:	f7fe fcd6 	bl	8008a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	480d      	ldr	r0, [pc, #52]	@ (800a0e4 <MX_LPUART1_UART_Init+0x88>)
 800a0b0:	f007 fc61 	bl	8011976 <HAL_UARTEx_SetTxFifoThreshold>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d001      	beq.n	800a0be <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800a0ba:	f7fe fccd 	bl	8008a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a0be:	2100      	movs	r1, #0
 800a0c0:	4808      	ldr	r0, [pc, #32]	@ (800a0e4 <MX_LPUART1_UART_Init+0x88>)
 800a0c2:	f007 fc96 	bl	80119f2 <HAL_UARTEx_SetRxFifoThreshold>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800a0cc:	f7fe fcc4 	bl	8008a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800a0d0:	4804      	ldr	r0, [pc, #16]	@ (800a0e4 <MX_LPUART1_UART_Init+0x88>)
 800a0d2:	f007 fc17 	bl	8011904 <HAL_UARTEx_DisableFifoMode>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800a0dc:	f7fe fcbc 	bl	8008a58 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800a0e0:	bf00      	nop
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	20002154 	.word	0x20002154
 800a0e8:	40008000 	.word	0x40008000
 800a0ec:	001e8480 	.word	0x001e8480

0800a0f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a0f4:	4b23      	ldr	r3, [pc, #140]	@ (800a184 <MX_USART2_UART_Init+0x94>)
 800a0f6:	4a24      	ldr	r2, [pc, #144]	@ (800a188 <MX_USART2_UART_Init+0x98>)
 800a0f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a0fa:	4b22      	ldr	r3, [pc, #136]	@ (800a184 <MX_USART2_UART_Init+0x94>)
 800a0fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a100:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800a102:	4b20      	ldr	r3, [pc, #128]	@ (800a184 <MX_USART2_UART_Init+0x94>)
 800a104:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a108:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a10a:	4b1e      	ldr	r3, [pc, #120]	@ (800a184 <MX_USART2_UART_Init+0x94>)
 800a10c:	2200      	movs	r2, #0
 800a10e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800a110:	4b1c      	ldr	r3, [pc, #112]	@ (800a184 <MX_USART2_UART_Init+0x94>)
 800a112:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a116:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a118:	4b1a      	ldr	r3, [pc, #104]	@ (800a184 <MX_USART2_UART_Init+0x94>)
 800a11a:	220c      	movs	r2, #12
 800a11c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a11e:	4b19      	ldr	r3, [pc, #100]	@ (800a184 <MX_USART2_UART_Init+0x94>)
 800a120:	2200      	movs	r2, #0
 800a122:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a124:	4b17      	ldr	r3, [pc, #92]	@ (800a184 <MX_USART2_UART_Init+0x94>)
 800a126:	2200      	movs	r2, #0
 800a128:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a12a:	4b16      	ldr	r3, [pc, #88]	@ (800a184 <MX_USART2_UART_Init+0x94>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a130:	4b14      	ldr	r3, [pc, #80]	@ (800a184 <MX_USART2_UART_Init+0x94>)
 800a132:	2200      	movs	r2, #0
 800a134:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a136:	4b13      	ldr	r3, [pc, #76]	@ (800a184 <MX_USART2_UART_Init+0x94>)
 800a138:	2200      	movs	r2, #0
 800a13a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a13c:	4811      	ldr	r0, [pc, #68]	@ (800a184 <MX_USART2_UART_Init+0x94>)
 800a13e:	f005 fdd5 	bl	800fcec <HAL_UART_Init>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d001      	beq.n	800a14c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800a148:	f7fe fc86 	bl	8008a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a14c:	2100      	movs	r1, #0
 800a14e:	480d      	ldr	r0, [pc, #52]	@ (800a184 <MX_USART2_UART_Init+0x94>)
 800a150:	f007 fc11 	bl	8011976 <HAL_UARTEx_SetTxFifoThreshold>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d001      	beq.n	800a15e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800a15a:	f7fe fc7d 	bl	8008a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a15e:	2100      	movs	r1, #0
 800a160:	4808      	ldr	r0, [pc, #32]	@ (800a184 <MX_USART2_UART_Init+0x94>)
 800a162:	f007 fc46 	bl	80119f2 <HAL_UARTEx_SetRxFifoThreshold>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d001      	beq.n	800a170 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800a16c:	f7fe fc74 	bl	8008a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800a170:	4804      	ldr	r0, [pc, #16]	@ (800a184 <MX_USART2_UART_Init+0x94>)
 800a172:	f007 fbc7 	bl	8011904 <HAL_UARTEx_DisableFifoMode>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800a17c:	f7fe fc6c 	bl	8008a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a180:	bf00      	nop
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20002220 	.word	0x20002220
 800a188:	40004400 	.word	0x40004400

0800a18c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b0a0      	sub	sp, #128	@ 0x80
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a194:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]
 800a19c:	605a      	str	r2, [r3, #4]
 800a19e:	609a      	str	r2, [r3, #8]
 800a1a0:	60da      	str	r2, [r3, #12]
 800a1a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a1a4:	f107 0318 	add.w	r3, r7, #24
 800a1a8:	2254      	movs	r2, #84	@ 0x54
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f008 fa59 	bl	8012664 <memset>
  if(uartHandle->Instance==LPUART1)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a99      	ldr	r2, [pc, #612]	@ (800a41c <HAL_UART_MspInit+0x290>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	f040 8093 	bne.w	800a2e4 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a1be:	2320      	movs	r3, #32
 800a1c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a1c6:	f107 0318 	add.w	r3, r7, #24
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f003 fa58 	bl	800d680 <HAL_RCCEx_PeriphCLKConfig>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d001      	beq.n	800a1da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800a1d6:	f7fe fc3f 	bl	8008a58 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a1da:	4b91      	ldr	r3, [pc, #580]	@ (800a420 <HAL_UART_MspInit+0x294>)
 800a1dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1de:	4a90      	ldr	r2, [pc, #576]	@ (800a420 <HAL_UART_MspInit+0x294>)
 800a1e0:	f043 0301 	orr.w	r3, r3, #1
 800a1e4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800a1e6:	4b8e      	ldr	r3, [pc, #568]	@ (800a420 <HAL_UART_MspInit+0x294>)
 800a1e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1ea:	f003 0301 	and.w	r3, r3, #1
 800a1ee:	617b      	str	r3, [r7, #20]
 800a1f0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a1f2:	4b8b      	ldr	r3, [pc, #556]	@ (800a420 <HAL_UART_MspInit+0x294>)
 800a1f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1f6:	4a8a      	ldr	r2, [pc, #552]	@ (800a420 <HAL_UART_MspInit+0x294>)
 800a1f8:	f043 0302 	orr.w	r3, r3, #2
 800a1fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a1fe:	4b88      	ldr	r3, [pc, #544]	@ (800a420 <HAL_UART_MspInit+0x294>)
 800a200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a202:	f003 0302 	and.w	r3, r3, #2
 800a206:	613b      	str	r3, [r7, #16]
 800a208:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a20a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a20e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a210:	2302      	movs	r3, #2
 800a212:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a214:	2300      	movs	r3, #0
 800a216:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a218:	2300      	movs	r3, #0
 800a21a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800a21c:	2308      	movs	r3, #8
 800a21e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a220:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a224:	4619      	mov	r1, r3
 800a226:	487f      	ldr	r0, [pc, #508]	@ (800a424 <HAL_UART_MspInit+0x298>)
 800a228:	f002 fa64 	bl	800c6f4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 800a22c:	4b7e      	ldr	r3, [pc, #504]	@ (800a428 <HAL_UART_MspInit+0x29c>)
 800a22e:	4a7f      	ldr	r2, [pc, #508]	@ (800a42c <HAL_UART_MspInit+0x2a0>)
 800a230:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800a232:	4b7d      	ldr	r3, [pc, #500]	@ (800a428 <HAL_UART_MspInit+0x29c>)
 800a234:	2222      	movs	r2, #34	@ 0x22
 800a236:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a238:	4b7b      	ldr	r3, [pc, #492]	@ (800a428 <HAL_UART_MspInit+0x29c>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a23e:	4b7a      	ldr	r3, [pc, #488]	@ (800a428 <HAL_UART_MspInit+0x29c>)
 800a240:	2200      	movs	r2, #0
 800a242:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a244:	4b78      	ldr	r3, [pc, #480]	@ (800a428 <HAL_UART_MspInit+0x29c>)
 800a246:	2280      	movs	r2, #128	@ 0x80
 800a248:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a24a:	4b77      	ldr	r3, [pc, #476]	@ (800a428 <HAL_UART_MspInit+0x29c>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a250:	4b75      	ldr	r3, [pc, #468]	@ (800a428 <HAL_UART_MspInit+0x29c>)
 800a252:	2200      	movs	r2, #0
 800a254:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800a256:	4b74      	ldr	r3, [pc, #464]	@ (800a428 <HAL_UART_MspInit+0x29c>)
 800a258:	2200      	movs	r2, #0
 800a25a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a25c:	4b72      	ldr	r3, [pc, #456]	@ (800a428 <HAL_UART_MspInit+0x29c>)
 800a25e:	2200      	movs	r2, #0
 800a260:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800a262:	4871      	ldr	r0, [pc, #452]	@ (800a428 <HAL_UART_MspInit+0x29c>)
 800a264:	f001 ff14 	bl	800c090 <HAL_DMA_Init>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800a26e:	f7fe fbf3 	bl	8008a58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a6c      	ldr	r2, [pc, #432]	@ (800a428 <HAL_UART_MspInit+0x29c>)
 800a276:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800a27a:	4a6b      	ldr	r2, [pc, #428]	@ (800a428 <HAL_UART_MspInit+0x29c>)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 800a280:	4b6b      	ldr	r3, [pc, #428]	@ (800a430 <HAL_UART_MspInit+0x2a4>)
 800a282:	4a6c      	ldr	r2, [pc, #432]	@ (800a434 <HAL_UART_MspInit+0x2a8>)
 800a284:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800a286:	4b6a      	ldr	r3, [pc, #424]	@ (800a430 <HAL_UART_MspInit+0x2a4>)
 800a288:	2223      	movs	r2, #35	@ 0x23
 800a28a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a28c:	4b68      	ldr	r3, [pc, #416]	@ (800a430 <HAL_UART_MspInit+0x2a4>)
 800a28e:	2210      	movs	r2, #16
 800a290:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a292:	4b67      	ldr	r3, [pc, #412]	@ (800a430 <HAL_UART_MspInit+0x2a4>)
 800a294:	2200      	movs	r2, #0
 800a296:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a298:	4b65      	ldr	r3, [pc, #404]	@ (800a430 <HAL_UART_MspInit+0x2a4>)
 800a29a:	2280      	movs	r2, #128	@ 0x80
 800a29c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a29e:	4b64      	ldr	r3, [pc, #400]	@ (800a430 <HAL_UART_MspInit+0x2a4>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a2a4:	4b62      	ldr	r3, [pc, #392]	@ (800a430 <HAL_UART_MspInit+0x2a4>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800a2aa:	4b61      	ldr	r3, [pc, #388]	@ (800a430 <HAL_UART_MspInit+0x2a4>)
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a2b0:	4b5f      	ldr	r3, [pc, #380]	@ (800a430 <HAL_UART_MspInit+0x2a4>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800a2b6:	485e      	ldr	r0, [pc, #376]	@ (800a430 <HAL_UART_MspInit+0x2a4>)
 800a2b8:	f001 feea 	bl	800c090 <HAL_DMA_Init>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d001      	beq.n	800a2c6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800a2c2:	f7fe fbc9 	bl	8008a58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a59      	ldr	r2, [pc, #356]	@ (800a430 <HAL_UART_MspInit+0x2a4>)
 800a2ca:	67da      	str	r2, [r3, #124]	@ 0x7c
 800a2cc:	4a58      	ldr	r2, [pc, #352]	@ (800a430 <HAL_UART_MspInit+0x2a4>)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	205b      	movs	r0, #91	@ 0x5b
 800a2d8:	f001 fea5 	bl	800c026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800a2dc:	205b      	movs	r0, #91	@ 0x5b
 800a2de:	f001 febc 	bl	800c05a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a2e2:	e097      	b.n	800a414 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a53      	ldr	r2, [pc, #332]	@ (800a438 <HAL_UART_MspInit+0x2ac>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	f040 8092 	bne.w	800a414 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a2f8:	f107 0318 	add.w	r3, r7, #24
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f003 f9bf 	bl	800d680 <HAL_RCCEx_PeriphCLKConfig>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <HAL_UART_MspInit+0x180>
      Error_Handler();
 800a308:	f7fe fba6 	bl	8008a58 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a30c:	4b44      	ldr	r3, [pc, #272]	@ (800a420 <HAL_UART_MspInit+0x294>)
 800a30e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a310:	4a43      	ldr	r2, [pc, #268]	@ (800a420 <HAL_UART_MspInit+0x294>)
 800a312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a316:	6593      	str	r3, [r2, #88]	@ 0x58
 800a318:	4b41      	ldr	r3, [pc, #260]	@ (800a420 <HAL_UART_MspInit+0x294>)
 800a31a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a31c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a320:	60fb      	str	r3, [r7, #12]
 800a322:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a324:	4b3e      	ldr	r3, [pc, #248]	@ (800a420 <HAL_UART_MspInit+0x294>)
 800a326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a328:	4a3d      	ldr	r2, [pc, #244]	@ (800a420 <HAL_UART_MspInit+0x294>)
 800a32a:	f043 0301 	orr.w	r3, r3, #1
 800a32e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a330:	4b3b      	ldr	r3, [pc, #236]	@ (800a420 <HAL_UART_MspInit+0x294>)
 800a332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a334:	f003 0301 	and.w	r3, r3, #1
 800a338:	60bb      	str	r3, [r7, #8]
 800a33a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a33c:	230c      	movs	r3, #12
 800a33e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a340:	2302      	movs	r3, #2
 800a342:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a344:	2300      	movs	r3, #0
 800a346:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a348:	2300      	movs	r3, #0
 800a34a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a34c:	2307      	movs	r3, #7
 800a34e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a350:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a354:	4619      	mov	r1, r3
 800a356:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a35a:	f002 f9cb 	bl	800c6f4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800a35e:	4b37      	ldr	r3, [pc, #220]	@ (800a43c <HAL_UART_MspInit+0x2b0>)
 800a360:	4a37      	ldr	r2, [pc, #220]	@ (800a440 <HAL_UART_MspInit+0x2b4>)
 800a362:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800a364:	4b35      	ldr	r3, [pc, #212]	@ (800a43c <HAL_UART_MspInit+0x2b0>)
 800a366:	221a      	movs	r2, #26
 800a368:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a36a:	4b34      	ldr	r3, [pc, #208]	@ (800a43c <HAL_UART_MspInit+0x2b0>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a370:	4b32      	ldr	r3, [pc, #200]	@ (800a43c <HAL_UART_MspInit+0x2b0>)
 800a372:	2200      	movs	r2, #0
 800a374:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a376:	4b31      	ldr	r3, [pc, #196]	@ (800a43c <HAL_UART_MspInit+0x2b0>)
 800a378:	2280      	movs	r2, #128	@ 0x80
 800a37a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a37c:	4b2f      	ldr	r3, [pc, #188]	@ (800a43c <HAL_UART_MspInit+0x2b0>)
 800a37e:	2200      	movs	r2, #0
 800a380:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a382:	4b2e      	ldr	r3, [pc, #184]	@ (800a43c <HAL_UART_MspInit+0x2b0>)
 800a384:	2200      	movs	r2, #0
 800a386:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800a388:	4b2c      	ldr	r3, [pc, #176]	@ (800a43c <HAL_UART_MspInit+0x2b0>)
 800a38a:	2200      	movs	r2, #0
 800a38c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a38e:	4b2b      	ldr	r3, [pc, #172]	@ (800a43c <HAL_UART_MspInit+0x2b0>)
 800a390:	2200      	movs	r2, #0
 800a392:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800a394:	4829      	ldr	r0, [pc, #164]	@ (800a43c <HAL_UART_MspInit+0x2b0>)
 800a396:	f001 fe7b 	bl	800c090 <HAL_DMA_Init>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d001      	beq.n	800a3a4 <HAL_UART_MspInit+0x218>
      Error_Handler();
 800a3a0:	f7fe fb5a 	bl	8008a58 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a25      	ldr	r2, [pc, #148]	@ (800a43c <HAL_UART_MspInit+0x2b0>)
 800a3a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800a3ac:	4a23      	ldr	r2, [pc, #140]	@ (800a43c <HAL_UART_MspInit+0x2b0>)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800a3b2:	4b24      	ldr	r3, [pc, #144]	@ (800a444 <HAL_UART_MspInit+0x2b8>)
 800a3b4:	4a24      	ldr	r2, [pc, #144]	@ (800a448 <HAL_UART_MspInit+0x2bc>)
 800a3b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800a3b8:	4b22      	ldr	r3, [pc, #136]	@ (800a444 <HAL_UART_MspInit+0x2b8>)
 800a3ba:	221b      	movs	r2, #27
 800a3bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a3be:	4b21      	ldr	r3, [pc, #132]	@ (800a444 <HAL_UART_MspInit+0x2b8>)
 800a3c0:	2210      	movs	r2, #16
 800a3c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a3c4:	4b1f      	ldr	r3, [pc, #124]	@ (800a444 <HAL_UART_MspInit+0x2b8>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a3ca:	4b1e      	ldr	r3, [pc, #120]	@ (800a444 <HAL_UART_MspInit+0x2b8>)
 800a3cc:	2280      	movs	r2, #128	@ 0x80
 800a3ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a3d0:	4b1c      	ldr	r3, [pc, #112]	@ (800a444 <HAL_UART_MspInit+0x2b8>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a3d6:	4b1b      	ldr	r3, [pc, #108]	@ (800a444 <HAL_UART_MspInit+0x2b8>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800a3dc:	4b19      	ldr	r3, [pc, #100]	@ (800a444 <HAL_UART_MspInit+0x2b8>)
 800a3de:	2200      	movs	r2, #0
 800a3e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a3e2:	4b18      	ldr	r3, [pc, #96]	@ (800a444 <HAL_UART_MspInit+0x2b8>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800a3e8:	4816      	ldr	r0, [pc, #88]	@ (800a444 <HAL_UART_MspInit+0x2b8>)
 800a3ea:	f001 fe51 	bl	800c090 <HAL_DMA_Init>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d001      	beq.n	800a3f8 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 800a3f4:	f7fe fb30 	bl	8008a58 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a12      	ldr	r2, [pc, #72]	@ (800a444 <HAL_UART_MspInit+0x2b8>)
 800a3fc:	67da      	str	r2, [r3, #124]	@ 0x7c
 800a3fe:	4a11      	ldr	r2, [pc, #68]	@ (800a444 <HAL_UART_MspInit+0x2b8>)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800a404:	2200      	movs	r2, #0
 800a406:	2100      	movs	r1, #0
 800a408:	2026      	movs	r0, #38	@ 0x26
 800a40a:	f001 fe0c 	bl	800c026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a40e:	2026      	movs	r0, #38	@ 0x26
 800a410:	f001 fe23 	bl	800c05a <HAL_NVIC_EnableIRQ>
}
 800a414:	bf00      	nop
 800a416:	3780      	adds	r7, #128	@ 0x80
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	40008000 	.word	0x40008000
 800a420:	40021000 	.word	0x40021000
 800a424:	48000400 	.word	0x48000400
 800a428:	200022ec 	.word	0x200022ec
 800a42c:	40020044 	.word	0x40020044
 800a430:	2000234c 	.word	0x2000234c
 800a434:	40020058 	.word	0x40020058
 800a438:	40004400 	.word	0x40004400
 800a43c:	200023ac 	.word	0x200023ac
 800a440:	4002001c 	.word	0x4002001c
 800a444:	2000240c 	.word	0x2000240c
 800a448:	40020030 	.word	0x40020030

0800a44c <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 800a44c:	480d      	ldr	r0, [pc, #52]	@ (800a484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800a44e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/

    bl  SystemInit
 800a450:	f7ff f994 	bl	800977c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a454:	480c      	ldr	r0, [pc, #48]	@ (800a488 <LoopForever+0x6>)
  ldr r1, =_edata
 800a456:	490d      	ldr	r1, [pc, #52]	@ (800a48c <LoopForever+0xa>)
  ldr r2, =_sidata
 800a458:	4a0d      	ldr	r2, [pc, #52]	@ (800a490 <LoopForever+0xe>)
  movs r3, #0
 800a45a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800a45c:	e002      	b.n	800a464 <LoopCopyDataInit>

0800a45e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a45e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a462:	3304      	adds	r3, #4

0800a464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a468:	d3f9      	bcc.n	800a45e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a46a:	4a0a      	ldr	r2, [pc, #40]	@ (800a494 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a46c:	4c0a      	ldr	r4, [pc, #40]	@ (800a498 <LoopForever+0x16>)
  movs r3, #0
 800a46e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a470:	e001      	b.n	800a476 <LoopFillZerobss>

0800a472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a474:	3204      	adds	r2, #4

0800a476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a478:	d3fb      	bcc.n	800a472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a47a:	f008 f911 	bl	80126a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a47e:	f7fb f95f 	bl	8005740 <main>

0800a482 <LoopForever>:

LoopForever:
    b LoopForever
 800a482:	e7fe      	b.n	800a482 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 800a484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a48c:	20000394 	.word	0x20000394
  ldr r2, =_sidata
 800a490:	08014b70 	.word	0x08014b70
  ldr r2, =_sbss
 800a494:	20000394 	.word	0x20000394
  ldr r4, =_ebss
 800a498:	200025b8 	.word	0x200025b8

0800a49c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a49c:	e7fe      	b.n	800a49c <ADC1_2_IRQHandler>

0800a49e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b082      	sub	sp, #8
 800a4a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a4a8:	2003      	movs	r0, #3
 800a4aa:	f001 fdb1 	bl	800c010 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	f000 f80e 	bl	800a4d0 <HAL_InitTick>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d002      	beq.n	800a4c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	71fb      	strb	r3, [r7, #7]
 800a4be:	e001      	b.n	800a4c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a4c0:	f7ff f834 	bl	800952c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a4c4:	79fb      	ldrb	r3, [r7, #7]

}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
	...

0800a4d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800a4dc:	4b16      	ldr	r3, [pc, #88]	@ (800a538 <HAL_InitTick+0x68>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d022      	beq.n	800a52a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800a4e4:	4b15      	ldr	r3, [pc, #84]	@ (800a53c <HAL_InitTick+0x6c>)
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	4b13      	ldr	r3, [pc, #76]	@ (800a538 <HAL_InitTick+0x68>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a4f0:	fbb1 f3f3 	udiv	r3, r1, r3
 800a4f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f001 fdbc 	bl	800c076 <HAL_SYSTICK_Config>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10f      	bne.n	800a524 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2b0f      	cmp	r3, #15
 800a508:	d809      	bhi.n	800a51e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a50a:	2200      	movs	r2, #0
 800a50c:	6879      	ldr	r1, [r7, #4]
 800a50e:	f04f 30ff 	mov.w	r0, #4294967295
 800a512:	f001 fd88 	bl	800c026 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a516:	4a0a      	ldr	r2, [pc, #40]	@ (800a540 <HAL_InitTick+0x70>)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6013      	str	r3, [r2, #0]
 800a51c:	e007      	b.n	800a52e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	73fb      	strb	r3, [r7, #15]
 800a522:	e004      	b.n	800a52e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	73fb      	strb	r3, [r7, #15]
 800a528:	e001      	b.n	800a52e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	20000340 	.word	0x20000340
 800a53c:	20000338 	.word	0x20000338
 800a540:	2000033c 	.word	0x2000033c

0800a544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a544:	b480      	push	{r7}
 800a546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a548:	4b05      	ldr	r3, [pc, #20]	@ (800a560 <HAL_IncTick+0x1c>)
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	4b05      	ldr	r3, [pc, #20]	@ (800a564 <HAL_IncTick+0x20>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4413      	add	r3, r2
 800a552:	4a03      	ldr	r2, [pc, #12]	@ (800a560 <HAL_IncTick+0x1c>)
 800a554:	6013      	str	r3, [r2, #0]
}
 800a556:	bf00      	nop
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr
 800a560:	2000246c 	.word	0x2000246c
 800a564:	20000340 	.word	0x20000340

0800a568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a568:	b480      	push	{r7}
 800a56a:	af00      	add	r7, sp, #0
  return uwTick;
 800a56c:	4b03      	ldr	r3, [pc, #12]	@ (800a57c <HAL_GetTick+0x14>)
 800a56e:	681b      	ldr	r3, [r3, #0]
}
 800a570:	4618      	mov	r0, r3
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	2000246c 	.word	0x2000246c

0800a580 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	431a      	orrs	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	609a      	str	r2, [r3, #8]
}
 800a59a:	bf00      	nop
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b083      	sub	sp, #12
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	431a      	orrs	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	609a      	str	r2, [r3, #8]
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b087      	sub	sp, #28
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	3360      	adds	r3, #96	@ 0x60
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	4b08      	ldr	r3, [pc, #32]	@ (800a62c <LL_ADC_SetOffset+0x44>)
 800a60a:	4013      	ands	r3, r2
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	430a      	orrs	r2, r1
 800a616:	4313      	orrs	r3, r2
 800a618:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800a620:	bf00      	nop
 800a622:	371c      	adds	r7, #28
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr
 800a62c:	03fff000 	.word	0x03fff000

0800a630 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	3360      	adds	r3, #96	@ 0x60
 800a63e:	461a      	mov	r2, r3
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	4413      	add	r3, r2
 800a646:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800a650:	4618      	mov	r0, r3
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b087      	sub	sp, #28
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	3360      	adds	r3, #96	@ 0x60
 800a66c:	461a      	mov	r2, r3
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	431a      	orrs	r2, r3
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800a686:	bf00      	nop
 800a688:	371c      	adds	r7, #28
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800a692:	b480      	push	{r7}
 800a694:	b087      	sub	sp, #28
 800a696:	af00      	add	r7, sp, #0
 800a698:	60f8      	str	r0, [r7, #12]
 800a69a:	60b9      	str	r1, [r7, #8]
 800a69c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	3360      	adds	r3, #96	@ 0x60
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	4413      	add	r3, r2
 800a6aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	431a      	orrs	r2, r3
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800a6bc:	bf00      	nop
 800a6be:	371c      	adds	r7, #28
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b087      	sub	sp, #28
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	3360      	adds	r3, #96	@ 0x60
 800a6d8:	461a      	mov	r2, r3
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	4413      	add	r3, r2
 800a6e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	431a      	orrs	r2, r3
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800a6f2:	bf00      	nop
 800a6f4:	371c      	adds	r7, #28
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800a6fe:	b480      	push	{r7}
 800a700:	b083      	sub	sp, #12
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	695b      	ldr	r3, [r3, #20]
 800a70c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	431a      	orrs	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	615a      	str	r2, [r3, #20]
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a734:	2b00      	cmp	r3, #0
 800a736:	d101      	bne.n	800a73c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800a738:	2301      	movs	r3, #1
 800a73a:	e000      	b.n	800a73e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a74a:	b480      	push	{r7}
 800a74c:	b087      	sub	sp, #28
 800a74e:	af00      	add	r7, sp, #0
 800a750:	60f8      	str	r0, [r7, #12]
 800a752:	60b9      	str	r1, [r7, #8]
 800a754:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	3330      	adds	r3, #48	@ 0x30
 800a75a:	461a      	mov	r2, r3
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	0a1b      	lsrs	r3, r3, #8
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	f003 030c 	and.w	r3, r3, #12
 800a766:	4413      	add	r3, r2
 800a768:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	f003 031f 	and.w	r3, r3, #31
 800a774:	211f      	movs	r1, #31
 800a776:	fa01 f303 	lsl.w	r3, r1, r3
 800a77a:	43db      	mvns	r3, r3
 800a77c:	401a      	ands	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	0e9b      	lsrs	r3, r3, #26
 800a782:	f003 011f 	and.w	r1, r3, #31
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	f003 031f 	and.w	r3, r3, #31
 800a78c:	fa01 f303 	lsl.w	r3, r1, r3
 800a790:	431a      	orrs	r2, r3
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800a796:	bf00      	nop
 800a798:	371c      	adds	r7, #28
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr

0800a7a2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a7a2:	b480      	push	{r7}
 800a7a4:	b087      	sub	sp, #28
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	60f8      	str	r0, [r7, #12]
 800a7aa:	60b9      	str	r1, [r7, #8]
 800a7ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3314      	adds	r3, #20
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	0e5b      	lsrs	r3, r3, #25
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	f003 0304 	and.w	r3, r3, #4
 800a7be:	4413      	add	r3, r2
 800a7c0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	0d1b      	lsrs	r3, r3, #20
 800a7ca:	f003 031f 	and.w	r3, r3, #31
 800a7ce:	2107      	movs	r1, #7
 800a7d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a7d4:	43db      	mvns	r3, r3
 800a7d6:	401a      	ands	r2, r3
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	0d1b      	lsrs	r3, r3, #20
 800a7dc:	f003 031f 	and.w	r3, r3, #31
 800a7e0:	6879      	ldr	r1, [r7, #4]
 800a7e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a7e6:	431a      	orrs	r2, r3
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800a7ec:	bf00      	nop
 800a7ee:	371c      	adds	r7, #28
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a810:	43db      	mvns	r3, r3
 800a812:	401a      	ands	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f003 0318 	and.w	r3, r3, #24
 800a81a:	4908      	ldr	r1, [pc, #32]	@ (800a83c <LL_ADC_SetChannelSingleDiff+0x44>)
 800a81c:	40d9      	lsrs	r1, r3
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	400b      	ands	r3, r1
 800a822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a826:	431a      	orrs	r2, r3
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800a82e:	bf00      	nop
 800a830:	3714      	adds	r7, #20
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	0007ffff 	.word	0x0007ffff

0800a840 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	f003 031f 	and.w	r3, r3, #31
}
 800a850:	4618      	mov	r0, r3
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800a86c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	6093      	str	r3, [r2, #8]
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800a880:	b480      	push	{r7}
 800a882:	b083      	sub	sp, #12
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a894:	d101      	bne.n	800a89a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a896:	2301      	movs	r3, #1
 800a898:	e000      	b.n	800a89c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800a8b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a8bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8e4:	d101      	bne.n	800a8ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e000      	b.n	800a8ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a908:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a90c:	f043 0201 	orr.w	r2, r3, #1
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a930:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a934:	f043 0202 	orr.w	r2, r3, #2
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d101      	bne.n	800a960 <LL_ADC_IsEnabled+0x18>
 800a95c:	2301      	movs	r3, #1
 800a95e:	e000      	b.n	800a962 <LL_ADC_IsEnabled+0x1a>
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	370c      	adds	r7, #12
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800a96e:	b480      	push	{r7}
 800a970:	b083      	sub	sp, #12
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	f003 0302 	and.w	r3, r3, #2
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d101      	bne.n	800a986 <LL_ADC_IsDisableOngoing+0x18>
 800a982:	2301      	movs	r3, #1
 800a984:	e000      	b.n	800a988 <LL_ADC_IsDisableOngoing+0x1a>
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a9a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a9a8:	f043 0204 	orr.w	r2, r3, #4
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	f003 0304 	and.w	r3, r3, #4
 800a9cc:	2b04      	cmp	r3, #4
 800a9ce:	d101      	bne.n	800a9d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e000      	b.n	800a9d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	370c      	adds	r7, #12
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b083      	sub	sp, #12
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	f003 0308 	and.w	r3, r3, #8
 800a9f2:	2b08      	cmp	r3, #8
 800a9f4:	d101      	bne.n	800a9fa <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e000      	b.n	800a9fc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800aa08:	b590      	push	{r4, r7, lr}
 800aa0a:	b089      	sub	sp, #36	@ 0x24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800aa14:	2300      	movs	r3, #0
 800aa16:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d101      	bne.n	800aa22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e1a9      	b.n	800ad76 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	695b      	ldr	r3, [r3, #20]
 800aa26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d109      	bne.n	800aa44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7fa f99f 	bl	8004d74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7ff ff19 	bl	800a880 <LL_ADC_IsDeepPowerDownEnabled>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d004      	beq.n	800aa5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7ff feff 	bl	800a85c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7ff ff34 	bl	800a8d0 <LL_ADC_IsInternalRegulatorEnabled>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d115      	bne.n	800aa9a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7ff ff18 	bl	800a8a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800aa78:	4b9c      	ldr	r3, [pc, #624]	@ (800acec <HAL_ADC_Init+0x2e4>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	099b      	lsrs	r3, r3, #6
 800aa7e:	4a9c      	ldr	r2, [pc, #624]	@ (800acf0 <HAL_ADC_Init+0x2e8>)
 800aa80:	fba2 2303 	umull	r2, r3, r2, r3
 800aa84:	099b      	lsrs	r3, r3, #6
 800aa86:	3301      	adds	r3, #1
 800aa88:	005b      	lsls	r3, r3, #1
 800aa8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800aa8c:	e002      	b.n	800aa94 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	3b01      	subs	r3, #1
 800aa92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1f9      	bne.n	800aa8e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7ff ff16 	bl	800a8d0 <LL_ADC_IsInternalRegulatorEnabled>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10d      	bne.n	800aac6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aaae:	f043 0210 	orr.w	r2, r3, #16
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aaba:	f043 0201 	orr.w	r2, r3, #1
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800aac2:	2301      	movs	r3, #1
 800aac4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7ff ff76 	bl	800a9bc <LL_ADC_REG_IsConversionOngoing>
 800aad0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aad6:	f003 0310 	and.w	r3, r3, #16
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f040 8142 	bne.w	800ad64 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f040 813e 	bne.w	800ad64 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aaec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800aaf0:	f043 0202 	orr.w	r2, r3, #2
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7ff ff23 	bl	800a948 <LL_ADC_IsEnabled>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d141      	bne.n	800ab8c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab10:	d004      	beq.n	800ab1c <HAL_ADC_Init+0x114>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a77      	ldr	r2, [pc, #476]	@ (800acf4 <HAL_ADC_Init+0x2ec>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d10f      	bne.n	800ab3c <HAL_ADC_Init+0x134>
 800ab1c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800ab20:	f7ff ff12 	bl	800a948 <LL_ADC_IsEnabled>
 800ab24:	4604      	mov	r4, r0
 800ab26:	4873      	ldr	r0, [pc, #460]	@ (800acf4 <HAL_ADC_Init+0x2ec>)
 800ab28:	f7ff ff0e 	bl	800a948 <LL_ADC_IsEnabled>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	4323      	orrs	r3, r4
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	bf0c      	ite	eq
 800ab34:	2301      	moveq	r3, #1
 800ab36:	2300      	movne	r3, #0
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	e012      	b.n	800ab62 <HAL_ADC_Init+0x15a>
 800ab3c:	486e      	ldr	r0, [pc, #440]	@ (800acf8 <HAL_ADC_Init+0x2f0>)
 800ab3e:	f7ff ff03 	bl	800a948 <LL_ADC_IsEnabled>
 800ab42:	4604      	mov	r4, r0
 800ab44:	486d      	ldr	r0, [pc, #436]	@ (800acfc <HAL_ADC_Init+0x2f4>)
 800ab46:	f7ff feff 	bl	800a948 <LL_ADC_IsEnabled>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	431c      	orrs	r4, r3
 800ab4e:	486c      	ldr	r0, [pc, #432]	@ (800ad00 <HAL_ADC_Init+0x2f8>)
 800ab50:	f7ff fefa 	bl	800a948 <LL_ADC_IsEnabled>
 800ab54:	4603      	mov	r3, r0
 800ab56:	4323      	orrs	r3, r4
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	bf0c      	ite	eq
 800ab5c:	2301      	moveq	r3, #1
 800ab5e:	2300      	movne	r3, #0
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d012      	beq.n	800ab8c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab6e:	d004      	beq.n	800ab7a <HAL_ADC_Init+0x172>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a5f      	ldr	r2, [pc, #380]	@ (800acf4 <HAL_ADC_Init+0x2ec>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d101      	bne.n	800ab7e <HAL_ADC_Init+0x176>
 800ab7a:	4a62      	ldr	r2, [pc, #392]	@ (800ad04 <HAL_ADC_Init+0x2fc>)
 800ab7c:	e000      	b.n	800ab80 <HAL_ADC_Init+0x178>
 800ab7e:	4a62      	ldr	r2, [pc, #392]	@ (800ad08 <HAL_ADC_Init+0x300>)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	4619      	mov	r1, r3
 800ab86:	4610      	mov	r0, r2
 800ab88:	f7ff fcfa 	bl	800a580 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	7f5b      	ldrb	r3, [r3, #29]
 800ab90:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ab96:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800ab9c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800aba2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800abaa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800abac:	4313      	orrs	r3, r2
 800abae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d106      	bne.n	800abc8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abbe:	3b01      	subs	r3, #1
 800abc0:	045b      	lsls	r3, r3, #17
 800abc2:	69ba      	ldr	r2, [r7, #24]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d009      	beq.n	800abe4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abdc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800abde:	69ba      	ldr	r2, [r7, #24]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68da      	ldr	r2, [r3, #12]
 800abea:	4b48      	ldr	r3, [pc, #288]	@ (800ad0c <HAL_ADC_Init+0x304>)
 800abec:	4013      	ands	r3, r2
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	6812      	ldr	r2, [r2, #0]
 800abf2:	69b9      	ldr	r1, [r7, #24]
 800abf4:	430b      	orrs	r3, r1
 800abf6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	430a      	orrs	r2, r1
 800ac0c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7ff fee5 	bl	800a9e2 <LL_ADC_INJ_IsConversionOngoing>
 800ac18:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d17f      	bne.n	800ad20 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d17c      	bne.n	800ad20 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800ac2a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ac32:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800ac34:	4313      	orrs	r3, r2
 800ac36:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac42:	f023 0302 	bic.w	r3, r3, #2
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	6812      	ldr	r2, [r2, #0]
 800ac4a:	69b9      	ldr	r1, [r7, #24]
 800ac4c:	430b      	orrs	r3, r1
 800ac4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d017      	beq.n	800ac88 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	691a      	ldr	r2, [r3, #16]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ac66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ac70:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800ac74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	6911      	ldr	r1, [r2, #16]
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	6812      	ldr	r2, [r2, #0]
 800ac80:	430b      	orrs	r3, r1
 800ac82:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800ac86:	e013      	b.n	800acb0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	691a      	ldr	r2, [r3, #16]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ac96:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	6812      	ldr	r2, [r2, #0]
 800aca4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800aca8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800acac:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d12a      	bne.n	800ad10 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	691b      	ldr	r3, [r3, #16]
 800acc0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800acc4:	f023 0304 	bic.w	r3, r3, #4
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800acd0:	4311      	orrs	r1, r2
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800acd6:	4311      	orrs	r1, r2
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800acdc:	430a      	orrs	r2, r1
 800acde:	431a      	orrs	r2, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f042 0201 	orr.w	r2, r2, #1
 800ace8:	611a      	str	r2, [r3, #16]
 800acea:	e019      	b.n	800ad20 <HAL_ADC_Init+0x318>
 800acec:	20000338 	.word	0x20000338
 800acf0:	053e2d63 	.word	0x053e2d63
 800acf4:	50000100 	.word	0x50000100
 800acf8:	50000400 	.word	0x50000400
 800acfc:	50000500 	.word	0x50000500
 800ad00:	50000600 	.word	0x50000600
 800ad04:	50000300 	.word	0x50000300
 800ad08:	50000700 	.word	0x50000700
 800ad0c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	691a      	ldr	r2, [r3, #16]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f022 0201 	bic.w	r2, r2, #1
 800ad1e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	695b      	ldr	r3, [r3, #20]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d10c      	bne.n	800ad42 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad2e:	f023 010f 	bic.w	r1, r3, #15
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	1e5a      	subs	r2, r3, #1
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	430a      	orrs	r2, r1
 800ad3e:	631a      	str	r2, [r3, #48]	@ 0x30
 800ad40:	e007      	b.n	800ad52 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f022 020f 	bic.w	r2, r2, #15
 800ad50:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad56:	f023 0303 	bic.w	r3, r3, #3
 800ad5a:	f043 0201 	orr.w	r2, r3, #1
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ad62:	e007      	b.n	800ad74 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad68:	f043 0210 	orr.w	r2, r3, #16
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800ad74:	7ffb      	ldrb	r3, [r7, #31]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3724      	adds	r7, #36	@ 0x24
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd90      	pop	{r4, r7, pc}
 800ad7e:	bf00      	nop

0800ad80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad94:	d004      	beq.n	800ada0 <HAL_ADC_Start_DMA+0x20>
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a5a      	ldr	r2, [pc, #360]	@ (800af04 <HAL_ADC_Start_DMA+0x184>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d101      	bne.n	800ada4 <HAL_ADC_Start_DMA+0x24>
 800ada0:	4b59      	ldr	r3, [pc, #356]	@ (800af08 <HAL_ADC_Start_DMA+0x188>)
 800ada2:	e000      	b.n	800ada6 <HAL_ADC_Start_DMA+0x26>
 800ada4:	4b59      	ldr	r3, [pc, #356]	@ (800af0c <HAL_ADC_Start_DMA+0x18c>)
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7ff fd4a 	bl	800a840 <LL_ADC_GetMultimode>
 800adac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7ff fe02 	bl	800a9bc <LL_ADC_REG_IsConversionOngoing>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f040 809b 	bne.w	800aef6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d101      	bne.n	800adce <HAL_ADC_Start_DMA+0x4e>
 800adca:	2302      	movs	r3, #2
 800adcc:	e096      	b.n	800aefc <HAL_ADC_Start_DMA+0x17c>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2201      	movs	r2, #1
 800add2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a4d      	ldr	r2, [pc, #308]	@ (800af10 <HAL_ADC_Start_DMA+0x190>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d008      	beq.n	800adf2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d005      	beq.n	800adf2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	2b05      	cmp	r3, #5
 800adea:	d002      	beq.n	800adf2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	2b09      	cmp	r3, #9
 800adf0:	d17a      	bne.n	800aee8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f000 fcf6 	bl	800b7e4 <ADC_Enable>
 800adf8:	4603      	mov	r3, r0
 800adfa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800adfc:	7dfb      	ldrb	r3, [r7, #23]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d16d      	bne.n	800aede <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae06:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ae0a:	f023 0301 	bic.w	r3, r3, #1
 800ae0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a3a      	ldr	r2, [pc, #232]	@ (800af04 <HAL_ADC_Start_DMA+0x184>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d009      	beq.n	800ae34 <HAL_ADC_Start_DMA+0xb4>
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a3b      	ldr	r2, [pc, #236]	@ (800af14 <HAL_ADC_Start_DMA+0x194>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d002      	beq.n	800ae30 <HAL_ADC_Start_DMA+0xb0>
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	e003      	b.n	800ae38 <HAL_ADC_Start_DMA+0xb8>
 800ae30:	4b39      	ldr	r3, [pc, #228]	@ (800af18 <HAL_ADC_Start_DMA+0x198>)
 800ae32:	e001      	b.n	800ae38 <HAL_ADC_Start_DMA+0xb8>
 800ae34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	6812      	ldr	r2, [r2, #0]
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d002      	beq.n	800ae46 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d105      	bne.n	800ae52 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae4a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d006      	beq.n	800ae6c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae62:	f023 0206 	bic.w	r2, r3, #6
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	661a      	str	r2, [r3, #96]	@ 0x60
 800ae6a:	e002      	b.n	800ae72 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae76:	4a29      	ldr	r2, [pc, #164]	@ (800af1c <HAL_ADC_Start_DMA+0x19c>)
 800ae78:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae7e:	4a28      	ldr	r2, [pc, #160]	@ (800af20 <HAL_ADC_Start_DMA+0x1a0>)
 800ae80:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae86:	4a27      	ldr	r2, [pc, #156]	@ (800af24 <HAL_ADC_Start_DMA+0x1a4>)
 800ae88:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	221c      	movs	r2, #28
 800ae90:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	685a      	ldr	r2, [r3, #4]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f042 0210 	orr.w	r2, r2, #16
 800aea8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68da      	ldr	r2, [r3, #12]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f042 0201 	orr.w	r2, r2, #1
 800aeb8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	3340      	adds	r3, #64	@ 0x40
 800aec4:	4619      	mov	r1, r3
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f001 f989 	bl	800c1e0 <HAL_DMA_Start_IT>
 800aece:	4603      	mov	r3, r0
 800aed0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7ff fd5c 	bl	800a994 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800aedc:	e00d      	b.n	800aefa <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800aee6:	e008      	b.n	800aefa <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800aef4:	e001      	b.n	800aefa <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800aef6:	2302      	movs	r3, #2
 800aef8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800aefa:	7dfb      	ldrb	r3, [r7, #23]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3718      	adds	r7, #24
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	50000100 	.word	0x50000100
 800af08:	50000300 	.word	0x50000300
 800af0c:	50000700 	.word	0x50000700
 800af10:	50000600 	.word	0x50000600
 800af14:	50000500 	.word	0x50000500
 800af18:	50000400 	.word	0x50000400
 800af1c:	0800b9cf 	.word	0x0800b9cf
 800af20:	0800baa7 	.word	0x0800baa7
 800af24:	0800bac3 	.word	0x0800bac3

0800af28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800af30:	bf00      	nop
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800af58:	bf00      	nop
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b0b6      	sub	sp, #216	@ 0xd8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800af74:	2300      	movs	r3, #0
 800af76:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d102      	bne.n	800af88 <HAL_ADC_ConfigChannel+0x24>
 800af82:	2302      	movs	r3, #2
 800af84:	f000 bc13 	b.w	800b7ae <HAL_ADC_ConfigChannel+0x84a>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4618      	mov	r0, r3
 800af96:	f7ff fd11 	bl	800a9bc <LL_ADC_REG_IsConversionOngoing>
 800af9a:	4603      	mov	r3, r0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	f040 83f3 	bne.w	800b788 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6818      	ldr	r0, [r3, #0]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	6859      	ldr	r1, [r3, #4]
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	461a      	mov	r2, r3
 800afb0:	f7ff fbcb 	bl	800a74a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4618      	mov	r0, r3
 800afba:	f7ff fcff 	bl	800a9bc <LL_ADC_REG_IsConversionOngoing>
 800afbe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7ff fd0b 	bl	800a9e2 <LL_ADC_INJ_IsConversionOngoing>
 800afcc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800afd0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	f040 81d9 	bne.w	800b38c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800afda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f040 81d4 	bne.w	800b38c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800afec:	d10f      	bne.n	800b00e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6818      	ldr	r0, [r3, #0]
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2200      	movs	r2, #0
 800aff8:	4619      	mov	r1, r3
 800affa:	f7ff fbd2 	bl	800a7a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800b006:	4618      	mov	r0, r3
 800b008:	f7ff fb79 	bl	800a6fe <LL_ADC_SetSamplingTimeCommonConfig>
 800b00c:	e00e      	b.n	800b02c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6818      	ldr	r0, [r3, #0]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	6819      	ldr	r1, [r3, #0]
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	461a      	mov	r2, r3
 800b01c:	f7ff fbc1 	bl	800a7a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2100      	movs	r1, #0
 800b026:	4618      	mov	r0, r3
 800b028:	f7ff fb69 	bl	800a6fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	695a      	ldr	r2, [r3, #20]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	08db      	lsrs	r3, r3, #3
 800b038:	f003 0303 	and.w	r3, r3, #3
 800b03c:	005b      	lsls	r3, r3, #1
 800b03e:	fa02 f303 	lsl.w	r3, r2, r3
 800b042:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	2b04      	cmp	r3, #4
 800b04c:	d022      	beq.n	800b094 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6818      	ldr	r0, [r3, #0]
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	6919      	ldr	r1, [r3, #16]
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b05e:	f7ff fac3 	bl	800a5e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6818      	ldr	r0, [r3, #0]
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	6919      	ldr	r1, [r3, #16]
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	699b      	ldr	r3, [r3, #24]
 800b06e:	461a      	mov	r2, r3
 800b070:	f7ff fb0f 	bl	800a692 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6818      	ldr	r0, [r3, #0]
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800b080:	2b01      	cmp	r3, #1
 800b082:	d102      	bne.n	800b08a <HAL_ADC_ConfigChannel+0x126>
 800b084:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b088:	e000      	b.n	800b08c <HAL_ADC_ConfigChannel+0x128>
 800b08a:	2300      	movs	r3, #0
 800b08c:	461a      	mov	r2, r3
 800b08e:	f7ff fb1b 	bl	800a6c8 <LL_ADC_SetOffsetSaturation>
 800b092:	e17b      	b.n	800b38c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2100      	movs	r1, #0
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7ff fac8 	bl	800a630 <LL_ADC_GetOffsetChannel>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d10a      	bne.n	800b0c0 <HAL_ADC_ConfigChannel+0x15c>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7ff fabd 	bl	800a630 <LL_ADC_GetOffsetChannel>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	0e9b      	lsrs	r3, r3, #26
 800b0ba:	f003 021f 	and.w	r2, r3, #31
 800b0be:	e01e      	b.n	800b0fe <HAL_ADC_ConfigChannel+0x19a>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7ff fab2 	bl	800a630 <LL_ADC_GetOffsetChannel>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b0d6:	fa93 f3a3 	rbit	r3, r3
 800b0da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b0de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b0e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b0e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d101      	bne.n	800b0f2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800b0ee:	2320      	movs	r3, #32
 800b0f0:	e004      	b.n	800b0fc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800b0f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b0f6:	fab3 f383 	clz	r3, r3
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b106:	2b00      	cmp	r3, #0
 800b108:	d105      	bne.n	800b116 <HAL_ADC_ConfigChannel+0x1b2>
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	0e9b      	lsrs	r3, r3, #26
 800b110:	f003 031f 	and.w	r3, r3, #31
 800b114:	e018      	b.n	800b148 <HAL_ADC_ConfigChannel+0x1e4>
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b11e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b122:	fa93 f3a3 	rbit	r3, r3
 800b126:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800b12a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b12e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800b132:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b136:	2b00      	cmp	r3, #0
 800b138:	d101      	bne.n	800b13e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800b13a:	2320      	movs	r3, #32
 800b13c:	e004      	b.n	800b148 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800b13e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b142:	fab3 f383 	clz	r3, r3
 800b146:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b148:	429a      	cmp	r2, r3
 800b14a:	d106      	bne.n	800b15a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2200      	movs	r2, #0
 800b152:	2100      	movs	r1, #0
 800b154:	4618      	mov	r0, r3
 800b156:	f7ff fa81 	bl	800a65c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2101      	movs	r1, #1
 800b160:	4618      	mov	r0, r3
 800b162:	f7ff fa65 	bl	800a630 <LL_ADC_GetOffsetChannel>
 800b166:	4603      	mov	r3, r0
 800b168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10a      	bne.n	800b186 <HAL_ADC_ConfigChannel+0x222>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2101      	movs	r1, #1
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff fa5a 	bl	800a630 <LL_ADC_GetOffsetChannel>
 800b17c:	4603      	mov	r3, r0
 800b17e:	0e9b      	lsrs	r3, r3, #26
 800b180:	f003 021f 	and.w	r2, r3, #31
 800b184:	e01e      	b.n	800b1c4 <HAL_ADC_ConfigChannel+0x260>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2101      	movs	r1, #1
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7ff fa4f 	bl	800a630 <LL_ADC_GetOffsetChannel>
 800b192:	4603      	mov	r3, r0
 800b194:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b198:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b19c:	fa93 f3a3 	rbit	r3, r3
 800b1a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800b1a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b1a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800b1ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d101      	bne.n	800b1b8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800b1b4:	2320      	movs	r3, #32
 800b1b6:	e004      	b.n	800b1c2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800b1b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b1bc:	fab3 f383 	clz	r3, r3
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d105      	bne.n	800b1dc <HAL_ADC_ConfigChannel+0x278>
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	0e9b      	lsrs	r3, r3, #26
 800b1d6:	f003 031f 	and.w	r3, r3, #31
 800b1da:	e018      	b.n	800b20e <HAL_ADC_ConfigChannel+0x2aa>
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b1e8:	fa93 f3a3 	rbit	r3, r3
 800b1ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800b1f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b1f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800b1f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d101      	bne.n	800b204 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800b200:	2320      	movs	r3, #32
 800b202:	e004      	b.n	800b20e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800b204:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b208:	fab3 f383 	clz	r3, r3
 800b20c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b20e:	429a      	cmp	r2, r3
 800b210:	d106      	bne.n	800b220 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2200      	movs	r2, #0
 800b218:	2101      	movs	r1, #1
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7ff fa1e 	bl	800a65c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2102      	movs	r1, #2
 800b226:	4618      	mov	r0, r3
 800b228:	f7ff fa02 	bl	800a630 <LL_ADC_GetOffsetChannel>
 800b22c:	4603      	mov	r3, r0
 800b22e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b232:	2b00      	cmp	r3, #0
 800b234:	d10a      	bne.n	800b24c <HAL_ADC_ConfigChannel+0x2e8>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2102      	movs	r1, #2
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7ff f9f7 	bl	800a630 <LL_ADC_GetOffsetChannel>
 800b242:	4603      	mov	r3, r0
 800b244:	0e9b      	lsrs	r3, r3, #26
 800b246:	f003 021f 	and.w	r2, r3, #31
 800b24a:	e01e      	b.n	800b28a <HAL_ADC_ConfigChannel+0x326>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2102      	movs	r1, #2
 800b252:	4618      	mov	r0, r3
 800b254:	f7ff f9ec 	bl	800a630 <LL_ADC_GetOffsetChannel>
 800b258:	4603      	mov	r3, r0
 800b25a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b25e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b262:	fa93 f3a3 	rbit	r3, r3
 800b266:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800b26a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b26e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800b272:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b276:	2b00      	cmp	r3, #0
 800b278:	d101      	bne.n	800b27e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800b27a:	2320      	movs	r3, #32
 800b27c:	e004      	b.n	800b288 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800b27e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b282:	fab3 f383 	clz	r3, r3
 800b286:	b2db      	uxtb	r3, r3
 800b288:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b292:	2b00      	cmp	r3, #0
 800b294:	d105      	bne.n	800b2a2 <HAL_ADC_ConfigChannel+0x33e>
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	0e9b      	lsrs	r3, r3, #26
 800b29c:	f003 031f 	and.w	r3, r3, #31
 800b2a0:	e016      	b.n	800b2d0 <HAL_ADC_ConfigChannel+0x36c>
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b2ae:	fa93 f3a3 	rbit	r3, r3
 800b2b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800b2b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b2b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800b2ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d101      	bne.n	800b2c6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800b2c2:	2320      	movs	r3, #32
 800b2c4:	e004      	b.n	800b2d0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800b2c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b2ca:	fab3 f383 	clz	r3, r3
 800b2ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d106      	bne.n	800b2e2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	2102      	movs	r1, #2
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7ff f9bd 	bl	800a65c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2103      	movs	r1, #3
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7ff f9a1 	bl	800a630 <LL_ADC_GetOffsetChannel>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10a      	bne.n	800b30e <HAL_ADC_ConfigChannel+0x3aa>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2103      	movs	r1, #3
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7ff f996 	bl	800a630 <LL_ADC_GetOffsetChannel>
 800b304:	4603      	mov	r3, r0
 800b306:	0e9b      	lsrs	r3, r3, #26
 800b308:	f003 021f 	and.w	r2, r3, #31
 800b30c:	e017      	b.n	800b33e <HAL_ADC_ConfigChannel+0x3da>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2103      	movs	r1, #3
 800b314:	4618      	mov	r0, r3
 800b316:	f7ff f98b 	bl	800a630 <LL_ADC_GetOffsetChannel>
 800b31a:	4603      	mov	r3, r0
 800b31c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b31e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b320:	fa93 f3a3 	rbit	r3, r3
 800b324:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800b326:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b328:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800b32a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d101      	bne.n	800b334 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800b330:	2320      	movs	r3, #32
 800b332:	e003      	b.n	800b33c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800b334:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b336:	fab3 f383 	clz	r3, r3
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b346:	2b00      	cmp	r3, #0
 800b348:	d105      	bne.n	800b356 <HAL_ADC_ConfigChannel+0x3f2>
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	0e9b      	lsrs	r3, r3, #26
 800b350:	f003 031f 	and.w	r3, r3, #31
 800b354:	e011      	b.n	800b37a <HAL_ADC_ConfigChannel+0x416>
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b35c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b35e:	fa93 f3a3 	rbit	r3, r3
 800b362:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800b364:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b366:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800b368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d101      	bne.n	800b372 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800b36e:	2320      	movs	r3, #32
 800b370:	e003      	b.n	800b37a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800b372:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b374:	fab3 f383 	clz	r3, r3
 800b378:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d106      	bne.n	800b38c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2200      	movs	r2, #0
 800b384:	2103      	movs	r1, #3
 800b386:	4618      	mov	r0, r3
 800b388:	f7ff f968 	bl	800a65c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4618      	mov	r0, r3
 800b392:	f7ff fad9 	bl	800a948 <LL_ADC_IsEnabled>
 800b396:	4603      	mov	r3, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	f040 813d 	bne.w	800b618 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6818      	ldr	r0, [r3, #0]
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	6819      	ldr	r1, [r3, #0]
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	f7ff fa24 	bl	800a7f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	4aa2      	ldr	r2, [pc, #648]	@ (800b640 <HAL_ADC_ConfigChannel+0x6dc>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	f040 812e 	bne.w	800b618 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10b      	bne.n	800b3e4 <HAL_ADC_ConfigChannel+0x480>
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	0e9b      	lsrs	r3, r3, #26
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	f003 031f 	and.w	r3, r3, #31
 800b3d8:	2b09      	cmp	r3, #9
 800b3da:	bf94      	ite	ls
 800b3dc:	2301      	movls	r3, #1
 800b3de:	2300      	movhi	r3, #0
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	e019      	b.n	800b418 <HAL_ADC_ConfigChannel+0x4b4>
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b3ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3ec:	fa93 f3a3 	rbit	r3, r3
 800b3f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800b3f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b3f4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800b3f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d101      	bne.n	800b400 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800b3fc:	2320      	movs	r3, #32
 800b3fe:	e003      	b.n	800b408 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800b400:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b402:	fab3 f383 	clz	r3, r3
 800b406:	b2db      	uxtb	r3, r3
 800b408:	3301      	adds	r3, #1
 800b40a:	f003 031f 	and.w	r3, r3, #31
 800b40e:	2b09      	cmp	r3, #9
 800b410:	bf94      	ite	ls
 800b412:	2301      	movls	r3, #1
 800b414:	2300      	movhi	r3, #0
 800b416:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d079      	beq.n	800b510 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b424:	2b00      	cmp	r3, #0
 800b426:	d107      	bne.n	800b438 <HAL_ADC_ConfigChannel+0x4d4>
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	0e9b      	lsrs	r3, r3, #26
 800b42e:	3301      	adds	r3, #1
 800b430:	069b      	lsls	r3, r3, #26
 800b432:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b436:	e015      	b.n	800b464 <HAL_ADC_ConfigChannel+0x500>
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b43e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b440:	fa93 f3a3 	rbit	r3, r3
 800b444:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800b446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b448:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800b44a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d101      	bne.n	800b454 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800b450:	2320      	movs	r3, #32
 800b452:	e003      	b.n	800b45c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800b454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b456:	fab3 f383 	clz	r3, r3
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	3301      	adds	r3, #1
 800b45e:	069b      	lsls	r3, r3, #26
 800b460:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d109      	bne.n	800b484 <HAL_ADC_ConfigChannel+0x520>
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	0e9b      	lsrs	r3, r3, #26
 800b476:	3301      	adds	r3, #1
 800b478:	f003 031f 	and.w	r3, r3, #31
 800b47c:	2101      	movs	r1, #1
 800b47e:	fa01 f303 	lsl.w	r3, r1, r3
 800b482:	e017      	b.n	800b4b4 <HAL_ADC_ConfigChannel+0x550>
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b48a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b48c:	fa93 f3a3 	rbit	r3, r3
 800b490:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800b492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b494:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800b496:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d101      	bne.n	800b4a0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800b49c:	2320      	movs	r3, #32
 800b49e:	e003      	b.n	800b4a8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800b4a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4a2:	fab3 f383 	clz	r3, r3
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	f003 031f 	and.w	r3, r3, #31
 800b4ae:	2101      	movs	r1, #1
 800b4b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b4b4:	ea42 0103 	orr.w	r1, r2, r3
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10a      	bne.n	800b4da <HAL_ADC_ConfigChannel+0x576>
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	0e9b      	lsrs	r3, r3, #26
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	f003 021f 	and.w	r2, r3, #31
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	005b      	lsls	r3, r3, #1
 800b4d4:	4413      	add	r3, r2
 800b4d6:	051b      	lsls	r3, r3, #20
 800b4d8:	e018      	b.n	800b50c <HAL_ADC_ConfigChannel+0x5a8>
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e2:	fa93 f3a3 	rbit	r3, r3
 800b4e6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800b4e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800b4ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d101      	bne.n	800b4f6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800b4f2:	2320      	movs	r3, #32
 800b4f4:	e003      	b.n	800b4fe <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800b4f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4f8:	fab3 f383 	clz	r3, r3
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	3301      	adds	r3, #1
 800b500:	f003 021f 	and.w	r2, r3, #31
 800b504:	4613      	mov	r3, r2
 800b506:	005b      	lsls	r3, r3, #1
 800b508:	4413      	add	r3, r2
 800b50a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b50c:	430b      	orrs	r3, r1
 800b50e:	e07e      	b.n	800b60e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d107      	bne.n	800b52c <HAL_ADC_ConfigChannel+0x5c8>
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	0e9b      	lsrs	r3, r3, #26
 800b522:	3301      	adds	r3, #1
 800b524:	069b      	lsls	r3, r3, #26
 800b526:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b52a:	e015      	b.n	800b558 <HAL_ADC_ConfigChannel+0x5f4>
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b534:	fa93 f3a3 	rbit	r3, r3
 800b538:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800b53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b53c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800b53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b540:	2b00      	cmp	r3, #0
 800b542:	d101      	bne.n	800b548 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800b544:	2320      	movs	r3, #32
 800b546:	e003      	b.n	800b550 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800b548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b54a:	fab3 f383 	clz	r3, r3
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	3301      	adds	r3, #1
 800b552:	069b      	lsls	r3, r3, #26
 800b554:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b560:	2b00      	cmp	r3, #0
 800b562:	d109      	bne.n	800b578 <HAL_ADC_ConfigChannel+0x614>
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	0e9b      	lsrs	r3, r3, #26
 800b56a:	3301      	adds	r3, #1
 800b56c:	f003 031f 	and.w	r3, r3, #31
 800b570:	2101      	movs	r1, #1
 800b572:	fa01 f303 	lsl.w	r3, r1, r3
 800b576:	e017      	b.n	800b5a8 <HAL_ADC_ConfigChannel+0x644>
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b57e:	6a3b      	ldr	r3, [r7, #32]
 800b580:	fa93 f3a3 	rbit	r3, r3
 800b584:	61fb      	str	r3, [r7, #28]
  return result;
 800b586:	69fb      	ldr	r3, [r7, #28]
 800b588:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d101      	bne.n	800b594 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800b590:	2320      	movs	r3, #32
 800b592:	e003      	b.n	800b59c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800b594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b596:	fab3 f383 	clz	r3, r3
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	3301      	adds	r3, #1
 800b59e:	f003 031f 	and.w	r3, r3, #31
 800b5a2:	2101      	movs	r1, #1
 800b5a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b5a8:	ea42 0103 	orr.w	r1, r2, r3
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10d      	bne.n	800b5d4 <HAL_ADC_ConfigChannel+0x670>
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	0e9b      	lsrs	r3, r3, #26
 800b5be:	3301      	adds	r3, #1
 800b5c0:	f003 021f 	and.w	r2, r3, #31
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	005b      	lsls	r3, r3, #1
 800b5c8:	4413      	add	r3, r2
 800b5ca:	3b1e      	subs	r3, #30
 800b5cc:	051b      	lsls	r3, r3, #20
 800b5ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b5d2:	e01b      	b.n	800b60c <HAL_ADC_ConfigChannel+0x6a8>
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	fa93 f3a3 	rbit	r3, r3
 800b5e0:	613b      	str	r3, [r7, #16]
  return result;
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d101      	bne.n	800b5f0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800b5ec:	2320      	movs	r3, #32
 800b5ee:	e003      	b.n	800b5f8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	fab3 f383 	clz	r3, r3
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	f003 021f 	and.w	r2, r3, #31
 800b5fe:	4613      	mov	r3, r2
 800b600:	005b      	lsls	r3, r3, #1
 800b602:	4413      	add	r3, r2
 800b604:	3b1e      	subs	r3, #30
 800b606:	051b      	lsls	r3, r3, #20
 800b608:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b60c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b612:	4619      	mov	r1, r3
 800b614:	f7ff f8c5 	bl	800a7a2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	4b09      	ldr	r3, [pc, #36]	@ (800b644 <HAL_ADC_ConfigChannel+0x6e0>)
 800b61e:	4013      	ands	r3, r2
 800b620:	2b00      	cmp	r3, #0
 800b622:	f000 80be 	beq.w	800b7a2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b62e:	d004      	beq.n	800b63a <HAL_ADC_ConfigChannel+0x6d6>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a04      	ldr	r2, [pc, #16]	@ (800b648 <HAL_ADC_ConfigChannel+0x6e4>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d10a      	bne.n	800b650 <HAL_ADC_ConfigChannel+0x6ec>
 800b63a:	4b04      	ldr	r3, [pc, #16]	@ (800b64c <HAL_ADC_ConfigChannel+0x6e8>)
 800b63c:	e009      	b.n	800b652 <HAL_ADC_ConfigChannel+0x6ee>
 800b63e:	bf00      	nop
 800b640:	407f0000 	.word	0x407f0000
 800b644:	80080000 	.word	0x80080000
 800b648:	50000100 	.word	0x50000100
 800b64c:	50000300 	.word	0x50000300
 800b650:	4b59      	ldr	r3, [pc, #356]	@ (800b7b8 <HAL_ADC_ConfigChannel+0x854>)
 800b652:	4618      	mov	r0, r3
 800b654:	f7fe ffba 	bl	800a5cc <LL_ADC_GetCommonPathInternalCh>
 800b658:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a56      	ldr	r2, [pc, #344]	@ (800b7bc <HAL_ADC_ConfigChannel+0x858>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d004      	beq.n	800b670 <HAL_ADC_ConfigChannel+0x70c>
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a55      	ldr	r2, [pc, #340]	@ (800b7c0 <HAL_ADC_ConfigChannel+0x85c>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d13a      	bne.n	800b6e6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b670:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b674:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d134      	bne.n	800b6e6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b684:	d005      	beq.n	800b692 <HAL_ADC_ConfigChannel+0x72e>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a4e      	ldr	r2, [pc, #312]	@ (800b7c4 <HAL_ADC_ConfigChannel+0x860>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	f040 8085 	bne.w	800b79c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b69a:	d004      	beq.n	800b6a6 <HAL_ADC_ConfigChannel+0x742>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a49      	ldr	r2, [pc, #292]	@ (800b7c8 <HAL_ADC_ConfigChannel+0x864>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d101      	bne.n	800b6aa <HAL_ADC_ConfigChannel+0x746>
 800b6a6:	4a49      	ldr	r2, [pc, #292]	@ (800b7cc <HAL_ADC_ConfigChannel+0x868>)
 800b6a8:	e000      	b.n	800b6ac <HAL_ADC_ConfigChannel+0x748>
 800b6aa:	4a43      	ldr	r2, [pc, #268]	@ (800b7b8 <HAL_ADC_ConfigChannel+0x854>)
 800b6ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b6b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	4610      	mov	r0, r2
 800b6b8:	f7fe ff75 	bl	800a5a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b6bc:	4b44      	ldr	r3, [pc, #272]	@ (800b7d0 <HAL_ADC_ConfigChannel+0x86c>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	099b      	lsrs	r3, r3, #6
 800b6c2:	4a44      	ldr	r2, [pc, #272]	@ (800b7d4 <HAL_ADC_ConfigChannel+0x870>)
 800b6c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b6c8:	099b      	lsrs	r3, r3, #6
 800b6ca:	1c5a      	adds	r2, r3, #1
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	005b      	lsls	r3, r3, #1
 800b6d0:	4413      	add	r3, r2
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800b6d6:	e002      	b.n	800b6de <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1f9      	bne.n	800b6d8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b6e4:	e05a      	b.n	800b79c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a3b      	ldr	r2, [pc, #236]	@ (800b7d8 <HAL_ADC_ConfigChannel+0x874>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d125      	bne.n	800b73c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b6f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b6f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d11f      	bne.n	800b73c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a31      	ldr	r2, [pc, #196]	@ (800b7c8 <HAL_ADC_ConfigChannel+0x864>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d104      	bne.n	800b710 <HAL_ADC_ConfigChannel+0x7ac>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a34      	ldr	r2, [pc, #208]	@ (800b7dc <HAL_ADC_ConfigChannel+0x878>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d047      	beq.n	800b7a0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b718:	d004      	beq.n	800b724 <HAL_ADC_ConfigChannel+0x7c0>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a2a      	ldr	r2, [pc, #168]	@ (800b7c8 <HAL_ADC_ConfigChannel+0x864>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d101      	bne.n	800b728 <HAL_ADC_ConfigChannel+0x7c4>
 800b724:	4a29      	ldr	r2, [pc, #164]	@ (800b7cc <HAL_ADC_ConfigChannel+0x868>)
 800b726:	e000      	b.n	800b72a <HAL_ADC_ConfigChannel+0x7c6>
 800b728:	4a23      	ldr	r2, [pc, #140]	@ (800b7b8 <HAL_ADC_ConfigChannel+0x854>)
 800b72a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b72e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b732:	4619      	mov	r1, r3
 800b734:	4610      	mov	r0, r2
 800b736:	f7fe ff36 	bl	800a5a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b73a:	e031      	b.n	800b7a0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a27      	ldr	r2, [pc, #156]	@ (800b7e0 <HAL_ADC_ConfigChannel+0x87c>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d12d      	bne.n	800b7a2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b746:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b74a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d127      	bne.n	800b7a2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a1c      	ldr	r2, [pc, #112]	@ (800b7c8 <HAL_ADC_ConfigChannel+0x864>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d022      	beq.n	800b7a2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b764:	d004      	beq.n	800b770 <HAL_ADC_ConfigChannel+0x80c>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a17      	ldr	r2, [pc, #92]	@ (800b7c8 <HAL_ADC_ConfigChannel+0x864>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d101      	bne.n	800b774 <HAL_ADC_ConfigChannel+0x810>
 800b770:	4a16      	ldr	r2, [pc, #88]	@ (800b7cc <HAL_ADC_ConfigChannel+0x868>)
 800b772:	e000      	b.n	800b776 <HAL_ADC_ConfigChannel+0x812>
 800b774:	4a10      	ldr	r2, [pc, #64]	@ (800b7b8 <HAL_ADC_ConfigChannel+0x854>)
 800b776:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b77a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b77e:	4619      	mov	r1, r3
 800b780:	4610      	mov	r0, r2
 800b782:	f7fe ff10 	bl	800a5a6 <LL_ADC_SetCommonPathInternalCh>
 800b786:	e00c      	b.n	800b7a2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b78c:	f043 0220 	orr.w	r2, r3, #32
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800b79a:	e002      	b.n	800b7a2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b79c:	bf00      	nop
 800b79e:	e000      	b.n	800b7a2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b7a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800b7aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	37d8      	adds	r7, #216	@ 0xd8
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	50000700 	.word	0x50000700
 800b7bc:	c3210000 	.word	0xc3210000
 800b7c0:	90c00010 	.word	0x90c00010
 800b7c4:	50000600 	.word	0x50000600
 800b7c8:	50000100 	.word	0x50000100
 800b7cc:	50000300 	.word	0x50000300
 800b7d0:	20000338 	.word	0x20000338
 800b7d4:	053e2d63 	.word	0x053e2d63
 800b7d8:	c7520000 	.word	0xc7520000
 800b7dc:	50000500 	.word	0x50000500
 800b7e0:	cb840000 	.word	0xcb840000

0800b7e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7ff f8a7 	bl	800a948 <LL_ADC_IsEnabled>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d176      	bne.n	800b8ee <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	689a      	ldr	r2, [r3, #8]
 800b806:	4b3c      	ldr	r3, [pc, #240]	@ (800b8f8 <ADC_Enable+0x114>)
 800b808:	4013      	ands	r3, r2
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00d      	beq.n	800b82a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b812:	f043 0210 	orr.w	r2, r3, #16
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b81e:	f043 0201 	orr.w	r2, r3, #1
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	e062      	b.n	800b8f0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4618      	mov	r0, r3
 800b830:	f7ff f862 	bl	800a8f8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b83c:	d004      	beq.n	800b848 <ADC_Enable+0x64>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a2e      	ldr	r2, [pc, #184]	@ (800b8fc <ADC_Enable+0x118>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d101      	bne.n	800b84c <ADC_Enable+0x68>
 800b848:	4b2d      	ldr	r3, [pc, #180]	@ (800b900 <ADC_Enable+0x11c>)
 800b84a:	e000      	b.n	800b84e <ADC_Enable+0x6a>
 800b84c:	4b2d      	ldr	r3, [pc, #180]	@ (800b904 <ADC_Enable+0x120>)
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fe febc 	bl	800a5cc <LL_ADC_GetCommonPathInternalCh>
 800b854:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800b856:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d013      	beq.n	800b886 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b85e:	4b2a      	ldr	r3, [pc, #168]	@ (800b908 <ADC_Enable+0x124>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	099b      	lsrs	r3, r3, #6
 800b864:	4a29      	ldr	r2, [pc, #164]	@ (800b90c <ADC_Enable+0x128>)
 800b866:	fba2 2303 	umull	r2, r3, r2, r3
 800b86a:	099b      	lsrs	r3, r3, #6
 800b86c:	1c5a      	adds	r2, r3, #1
 800b86e:	4613      	mov	r3, r2
 800b870:	005b      	lsls	r3, r3, #1
 800b872:	4413      	add	r3, r2
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b878:	e002      	b.n	800b880 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	3b01      	subs	r3, #1
 800b87e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1f9      	bne.n	800b87a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b886:	f7fe fe6f 	bl	800a568 <HAL_GetTick>
 800b88a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b88c:	e028      	b.n	800b8e0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4618      	mov	r0, r3
 800b894:	f7ff f858 	bl	800a948 <LL_ADC_IsEnabled>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d104      	bne.n	800b8a8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7ff f828 	bl	800a8f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b8a8:	f7fe fe5e 	bl	800a568 <HAL_GetTick>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d914      	bls.n	800b8e0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f003 0301 	and.w	r3, r3, #1
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d00d      	beq.n	800b8e0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8c8:	f043 0210 	orr.w	r2, r3, #16
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b8d4:	f043 0201 	orr.w	r2, r3, #1
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e007      	b.n	800b8f0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f003 0301 	and.w	r3, r3, #1
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d1cf      	bne.n	800b88e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3710      	adds	r7, #16
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	8000003f 	.word	0x8000003f
 800b8fc:	50000100 	.word	0x50000100
 800b900:	50000300 	.word	0x50000300
 800b904:	50000700 	.word	0x50000700
 800b908:	20000338 	.word	0x20000338
 800b90c:	053e2d63 	.word	0x053e2d63

0800b910 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7ff f826 	bl	800a96e <LL_ADC_IsDisableOngoing>
 800b922:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4618      	mov	r0, r3
 800b92a:	f7ff f80d 	bl	800a948 <LL_ADC_IsEnabled>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d047      	beq.n	800b9c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d144      	bne.n	800b9c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	f003 030d 	and.w	r3, r3, #13
 800b944:	2b01      	cmp	r3, #1
 800b946:	d10c      	bne.n	800b962 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fe ffe7 	bl	800a920 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2203      	movs	r2, #3
 800b958:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b95a:	f7fe fe05 	bl	800a568 <HAL_GetTick>
 800b95e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b960:	e029      	b.n	800b9b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b966:	f043 0210 	orr.w	r2, r3, #16
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b972:	f043 0201 	orr.w	r2, r3, #1
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	e023      	b.n	800b9c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b97e:	f7fe fdf3 	bl	800a568 <HAL_GetTick>
 800b982:	4602      	mov	r2, r0
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d914      	bls.n	800b9b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	f003 0301 	and.w	r3, r3, #1
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00d      	beq.n	800b9b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b99e:	f043 0210 	orr.w	r2, r3, #16
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9aa:	f043 0201 	orr.w	r2, r3, #1
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e007      	b.n	800b9c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d1dc      	bne.n	800b97e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b084      	sub	sp, #16
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9da:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9e0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d14b      	bne.n	800ba80 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f003 0308 	and.w	r3, r3, #8
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d021      	beq.n	800ba46 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fe fe8c 	bl	800a724 <LL_ADC_REG_IsTriggerSourceSWStart>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d032      	beq.n	800ba78 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d12b      	bne.n	800ba78 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d11f      	bne.n	800ba78 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba3c:	f043 0201 	orr.w	r2, r3, #1
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ba44:	e018      	b.n	800ba78 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	f003 0302 	and.w	r3, r3, #2
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d111      	bne.n	800ba78 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d105      	bne.n	800ba78 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba70:	f043 0201 	orr.w	r2, r3, #1
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f7ff fa55 	bl	800af28 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800ba7e:	e00e      	b.n	800ba9e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba84:	f003 0310 	and.w	r3, r3, #16
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d003      	beq.n	800ba94 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	f7ff fa5f 	bl	800af50 <HAL_ADC_ErrorCallback>
}
 800ba92:	e004      	b.n	800ba9e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	4798      	blx	r3
}
 800ba9e:	bf00      	nop
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b084      	sub	sp, #16
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bab2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f7ff fa41 	bl	800af3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800baba:	bf00      	nop
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b084      	sub	sp, #16
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bace:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bad4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bae0:	f043 0204 	orr.w	r2, r3, #4
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f7ff fa31 	bl	800af50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800baee:	bf00      	nop
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <LL_ADC_IsEnabled>:
{
 800baf6:	b480      	push	{r7}
 800baf8:	b083      	sub	sp, #12
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	f003 0301 	and.w	r3, r3, #1
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d101      	bne.n	800bb0e <LL_ADC_IsEnabled+0x18>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e000      	b.n	800bb10 <LL_ADC_IsEnabled+0x1a>
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	370c      	adds	r7, #12
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <LL_ADC_StartCalibration>:
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800bb2e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bb32:	683a      	ldr	r2, [r7, #0]
 800bb34:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	609a      	str	r2, [r3, #8]
}
 800bb42:	bf00      	nop
 800bb44:	370c      	adds	r7, #12
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr

0800bb4e <LL_ADC_IsCalibrationOnGoing>:
{
 800bb4e:	b480      	push	{r7}
 800bb50:	b083      	sub	sp, #12
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb62:	d101      	bne.n	800bb68 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800bb64:	2301      	movs	r3, #1
 800bb66:	e000      	b.n	800bb6a <LL_ADC_IsCalibrationOnGoing+0x1c>
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	370c      	adds	r7, #12
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <LL_ADC_REG_IsConversionOngoing>:
{
 800bb76:	b480      	push	{r7}
 800bb78:	b083      	sub	sp, #12
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	f003 0304 	and.w	r3, r3, #4
 800bb86:	2b04      	cmp	r3, #4
 800bb88:	d101      	bne.n	800bb8e <LL_ADC_REG_IsConversionOngoing+0x18>
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e000      	b.n	800bb90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	370c      	adds	r7, #12
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800bba6:	2300      	movs	r3, #0
 800bba8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d101      	bne.n	800bbb8 <HAL_ADCEx_Calibration_Start+0x1c>
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	e04d      	b.n	800bc54 <HAL_ADCEx_Calibration_Start+0xb8>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f7ff fea5 	bl	800b910 <ADC_Disable>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800bbca:	7bfb      	ldrb	r3, [r7, #15]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d136      	bne.n	800bc3e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbd4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800bbd8:	f023 0302 	bic.w	r3, r3, #2
 800bbdc:	f043 0202 	orr.w	r2, r3, #2
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	6839      	ldr	r1, [r7, #0]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7ff ff96 	bl	800bb1c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800bbf0:	e014      	b.n	800bc1c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	4a18      	ldr	r2, [pc, #96]	@ (800bc5c <HAL_ADCEx_Calibration_Start+0xc0>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d90d      	bls.n	800bc1c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc04:	f023 0312 	bic.w	r3, r3, #18
 800bc08:	f043 0210 	orr.w	r2, r3, #16
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e01b      	b.n	800bc54 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7ff ff94 	bl	800bb4e <LL_ADC_IsCalibrationOnGoing>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d1e2      	bne.n	800bbf2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc30:	f023 0303 	bic.w	r3, r3, #3
 800bc34:	f043 0201 	orr.w	r2, r3, #1
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bc3c:	e005      	b.n	800bc4a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc42:	f043 0210 	orr.w	r2, r3, #16
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800bc52:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3710      	adds	r7, #16
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	0004de01 	.word	0x0004de01

0800bc60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800bc60:	b590      	push	{r4, r7, lr}
 800bc62:	b0a1      	sub	sp, #132	@ 0x84
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d101      	bne.n	800bc7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800bc7a:	2302      	movs	r3, #2
 800bc7c:	e0e7      	b.n	800be4e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2201      	movs	r2, #1
 800bc82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800bc86:	2300      	movs	r3, #0
 800bc88:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc96:	d102      	bne.n	800bc9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800bc98:	4b6f      	ldr	r3, [pc, #444]	@ (800be58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bc9a:	60bb      	str	r3, [r7, #8]
 800bc9c:	e009      	b.n	800bcb2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a6e      	ldr	r2, [pc, #440]	@ (800be5c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d102      	bne.n	800bcae <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800bca8:	4b6d      	ldr	r3, [pc, #436]	@ (800be60 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800bcaa:	60bb      	str	r3, [r7, #8]
 800bcac:	e001      	b.n	800bcb2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10b      	bne.n	800bcd0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcbc:	f043 0220 	orr.w	r2, r3, #32
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800bccc:	2301      	movs	r3, #1
 800bcce:	e0be      	b.n	800be4e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7ff ff4f 	bl	800bb76 <LL_ADC_REG_IsConversionOngoing>
 800bcd8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7ff ff49 	bl	800bb76 <LL_ADC_REG_IsConversionOngoing>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	f040 80a0 	bne.w	800be2c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800bcec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	f040 809c 	bne.w	800be2c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bcfc:	d004      	beq.n	800bd08 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a55      	ldr	r2, [pc, #340]	@ (800be58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d101      	bne.n	800bd0c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800bd08:	4b56      	ldr	r3, [pc, #344]	@ (800be64 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800bd0a:	e000      	b.n	800bd0e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800bd0c:	4b56      	ldr	r3, [pc, #344]	@ (800be68 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800bd0e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d04b      	beq.n	800bdb0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800bd18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	6859      	ldr	r1, [r3, #4]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bd2a:	035b      	lsls	r3, r3, #13
 800bd2c:	430b      	orrs	r3, r1
 800bd2e:	431a      	orrs	r2, r3
 800bd30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd32:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd3c:	d004      	beq.n	800bd48 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a45      	ldr	r2, [pc, #276]	@ (800be58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d10f      	bne.n	800bd68 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800bd48:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800bd4c:	f7ff fed3 	bl	800baf6 <LL_ADC_IsEnabled>
 800bd50:	4604      	mov	r4, r0
 800bd52:	4841      	ldr	r0, [pc, #260]	@ (800be58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bd54:	f7ff fecf 	bl	800baf6 <LL_ADC_IsEnabled>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	4323      	orrs	r3, r4
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	bf0c      	ite	eq
 800bd60:	2301      	moveq	r3, #1
 800bd62:	2300      	movne	r3, #0
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	e012      	b.n	800bd8e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800bd68:	483c      	ldr	r0, [pc, #240]	@ (800be5c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800bd6a:	f7ff fec4 	bl	800baf6 <LL_ADC_IsEnabled>
 800bd6e:	4604      	mov	r4, r0
 800bd70:	483b      	ldr	r0, [pc, #236]	@ (800be60 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800bd72:	f7ff fec0 	bl	800baf6 <LL_ADC_IsEnabled>
 800bd76:	4603      	mov	r3, r0
 800bd78:	431c      	orrs	r4, r3
 800bd7a:	483c      	ldr	r0, [pc, #240]	@ (800be6c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800bd7c:	f7ff febb 	bl	800baf6 <LL_ADC_IsEnabled>
 800bd80:	4603      	mov	r3, r0
 800bd82:	4323      	orrs	r3, r4
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	bf0c      	ite	eq
 800bd88:	2301      	moveq	r3, #1
 800bd8a:	2300      	movne	r3, #0
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d056      	beq.n	800be40 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800bd92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800bd9a:	f023 030f 	bic.w	r3, r3, #15
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	6811      	ldr	r1, [r2, #0]
 800bda2:	683a      	ldr	r2, [r7, #0]
 800bda4:	6892      	ldr	r2, [r2, #8]
 800bda6:	430a      	orrs	r2, r1
 800bda8:	431a      	orrs	r2, r3
 800bdaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bdac:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800bdae:	e047      	b.n	800be40 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800bdb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800bdb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bdba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bdc4:	d004      	beq.n	800bdd0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a23      	ldr	r2, [pc, #140]	@ (800be58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d10f      	bne.n	800bdf0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800bdd0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800bdd4:	f7ff fe8f 	bl	800baf6 <LL_ADC_IsEnabled>
 800bdd8:	4604      	mov	r4, r0
 800bdda:	481f      	ldr	r0, [pc, #124]	@ (800be58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bddc:	f7ff fe8b 	bl	800baf6 <LL_ADC_IsEnabled>
 800bde0:	4603      	mov	r3, r0
 800bde2:	4323      	orrs	r3, r4
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	bf0c      	ite	eq
 800bde8:	2301      	moveq	r3, #1
 800bdea:	2300      	movne	r3, #0
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	e012      	b.n	800be16 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800bdf0:	481a      	ldr	r0, [pc, #104]	@ (800be5c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800bdf2:	f7ff fe80 	bl	800baf6 <LL_ADC_IsEnabled>
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	4819      	ldr	r0, [pc, #100]	@ (800be60 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800bdfa:	f7ff fe7c 	bl	800baf6 <LL_ADC_IsEnabled>
 800bdfe:	4603      	mov	r3, r0
 800be00:	431c      	orrs	r4, r3
 800be02:	481a      	ldr	r0, [pc, #104]	@ (800be6c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800be04:	f7ff fe77 	bl	800baf6 <LL_ADC_IsEnabled>
 800be08:	4603      	mov	r3, r0
 800be0a:	4323      	orrs	r3, r4
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	bf0c      	ite	eq
 800be10:	2301      	moveq	r3, #1
 800be12:	2300      	movne	r3, #0
 800be14:	b2db      	uxtb	r3, r3
 800be16:	2b00      	cmp	r3, #0
 800be18:	d012      	beq.n	800be40 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800be1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800be22:	f023 030f 	bic.w	r3, r3, #15
 800be26:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800be28:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800be2a:	e009      	b.n	800be40 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be30:	f043 0220 	orr.w	r2, r3, #32
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800be38:	2301      	movs	r3, #1
 800be3a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800be3e:	e000      	b.n	800be42 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800be40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800be4a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3784      	adds	r7, #132	@ 0x84
 800be52:	46bd      	mov	sp, r7
 800be54:	bd90      	pop	{r4, r7, pc}
 800be56:	bf00      	nop
 800be58:	50000100 	.word	0x50000100
 800be5c:	50000400 	.word	0x50000400
 800be60:	50000500 	.word	0x50000500
 800be64:	50000300 	.word	0x50000300
 800be68:	50000700 	.word	0x50000700
 800be6c:	50000600 	.word	0x50000600

0800be70 <__NVIC_SetPriorityGrouping>:
{
 800be70:	b480      	push	{r7}
 800be72:	b085      	sub	sp, #20
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f003 0307 	and.w	r3, r3, #7
 800be7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800be80:	4b0c      	ldr	r3, [pc, #48]	@ (800beb4 <__NVIC_SetPriorityGrouping+0x44>)
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800be86:	68ba      	ldr	r2, [r7, #8]
 800be88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800be8c:	4013      	ands	r3, r2
 800be8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800be98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800be9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bea2:	4a04      	ldr	r2, [pc, #16]	@ (800beb4 <__NVIC_SetPriorityGrouping+0x44>)
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	60d3      	str	r3, [r2, #12]
}
 800bea8:	bf00      	nop
 800beaa:	3714      	adds	r7, #20
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr
 800beb4:	e000ed00 	.word	0xe000ed00

0800beb8 <__NVIC_GetPriorityGrouping>:
{
 800beb8:	b480      	push	{r7}
 800beba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bebc:	4b04      	ldr	r3, [pc, #16]	@ (800bed0 <__NVIC_GetPriorityGrouping+0x18>)
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	0a1b      	lsrs	r3, r3, #8
 800bec2:	f003 0307 	and.w	r3, r3, #7
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr
 800bed0:	e000ed00 	.word	0xe000ed00

0800bed4 <__NVIC_EnableIRQ>:
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	4603      	mov	r3, r0
 800bedc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	db0b      	blt.n	800befe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bee6:	79fb      	ldrb	r3, [r7, #7]
 800bee8:	f003 021f 	and.w	r2, r3, #31
 800beec:	4907      	ldr	r1, [pc, #28]	@ (800bf0c <__NVIC_EnableIRQ+0x38>)
 800beee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bef2:	095b      	lsrs	r3, r3, #5
 800bef4:	2001      	movs	r0, #1
 800bef6:	fa00 f202 	lsl.w	r2, r0, r2
 800befa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800befe:	bf00      	nop
 800bf00:	370c      	adds	r7, #12
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	e000e100 	.word	0xe000e100

0800bf10 <__NVIC_SetPriority>:
{
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	4603      	mov	r3, r0
 800bf18:	6039      	str	r1, [r7, #0]
 800bf1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bf1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	db0a      	blt.n	800bf3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	b2da      	uxtb	r2, r3
 800bf28:	490c      	ldr	r1, [pc, #48]	@ (800bf5c <__NVIC_SetPriority+0x4c>)
 800bf2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf2e:	0112      	lsls	r2, r2, #4
 800bf30:	b2d2      	uxtb	r2, r2
 800bf32:	440b      	add	r3, r1
 800bf34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bf38:	e00a      	b.n	800bf50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	b2da      	uxtb	r2, r3
 800bf3e:	4908      	ldr	r1, [pc, #32]	@ (800bf60 <__NVIC_SetPriority+0x50>)
 800bf40:	79fb      	ldrb	r3, [r7, #7]
 800bf42:	f003 030f 	and.w	r3, r3, #15
 800bf46:	3b04      	subs	r3, #4
 800bf48:	0112      	lsls	r2, r2, #4
 800bf4a:	b2d2      	uxtb	r2, r2
 800bf4c:	440b      	add	r3, r1
 800bf4e:	761a      	strb	r2, [r3, #24]
}
 800bf50:	bf00      	nop
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr
 800bf5c:	e000e100 	.word	0xe000e100
 800bf60:	e000ed00 	.word	0xe000ed00

0800bf64 <NVIC_EncodePriority>:
{
 800bf64:	b480      	push	{r7}
 800bf66:	b089      	sub	sp, #36	@ 0x24
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f003 0307 	and.w	r3, r3, #7
 800bf76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	f1c3 0307 	rsb	r3, r3, #7
 800bf7e:	2b04      	cmp	r3, #4
 800bf80:	bf28      	it	cs
 800bf82:	2304      	movcs	r3, #4
 800bf84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	3304      	adds	r3, #4
 800bf8a:	2b06      	cmp	r3, #6
 800bf8c:	d902      	bls.n	800bf94 <NVIC_EncodePriority+0x30>
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	3b03      	subs	r3, #3
 800bf92:	e000      	b.n	800bf96 <NVIC_EncodePriority+0x32>
 800bf94:	2300      	movs	r3, #0
 800bf96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bf98:	f04f 32ff 	mov.w	r2, #4294967295
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	fa02 f303 	lsl.w	r3, r2, r3
 800bfa2:	43da      	mvns	r2, r3
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	401a      	ands	r2, r3
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bfac:	f04f 31ff 	mov.w	r1, #4294967295
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	fa01 f303 	lsl.w	r3, r1, r3
 800bfb6:	43d9      	mvns	r1, r3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bfbc:	4313      	orrs	r3, r2
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3724      	adds	r7, #36	@ 0x24
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr
	...

0800bfcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bfdc:	d301      	bcc.n	800bfe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e00f      	b.n	800c002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bfe2:	4a0a      	ldr	r2, [pc, #40]	@ (800c00c <SysTick_Config+0x40>)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	3b01      	subs	r3, #1
 800bfe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bfea:	210f      	movs	r1, #15
 800bfec:	f04f 30ff 	mov.w	r0, #4294967295
 800bff0:	f7ff ff8e 	bl	800bf10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bff4:	4b05      	ldr	r3, [pc, #20]	@ (800c00c <SysTick_Config+0x40>)
 800bff6:	2200      	movs	r2, #0
 800bff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bffa:	4b04      	ldr	r3, [pc, #16]	@ (800c00c <SysTick_Config+0x40>)
 800bffc:	2207      	movs	r2, #7
 800bffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c000:	2300      	movs	r3, #0
}
 800c002:	4618      	mov	r0, r3
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	e000e010 	.word	0xe000e010

0800c010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7ff ff29 	bl	800be70 <__NVIC_SetPriorityGrouping>
}
 800c01e:	bf00      	nop
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b086      	sub	sp, #24
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	4603      	mov	r3, r0
 800c02e:	60b9      	str	r1, [r7, #8]
 800c030:	607a      	str	r2, [r7, #4]
 800c032:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c034:	f7ff ff40 	bl	800beb8 <__NVIC_GetPriorityGrouping>
 800c038:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	68b9      	ldr	r1, [r7, #8]
 800c03e:	6978      	ldr	r0, [r7, #20]
 800c040:	f7ff ff90 	bl	800bf64 <NVIC_EncodePriority>
 800c044:	4602      	mov	r2, r0
 800c046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c04a:	4611      	mov	r1, r2
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7ff ff5f 	bl	800bf10 <__NVIC_SetPriority>
}
 800c052:	bf00      	nop
 800c054:	3718      	adds	r7, #24
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b082      	sub	sp, #8
 800c05e:	af00      	add	r7, sp, #0
 800c060:	4603      	mov	r3, r0
 800c062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c068:	4618      	mov	r0, r3
 800c06a:	f7ff ff33 	bl	800bed4 <__NVIC_EnableIRQ>
}
 800c06e:	bf00      	nop
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b082      	sub	sp, #8
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7ff ffa4 	bl	800bfcc <SysTick_Config>
 800c084:	4603      	mov	r3, r0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3708      	adds	r7, #8
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
	...

0800c090 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d101      	bne.n	800c0a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e08d      	b.n	800c1be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	4b47      	ldr	r3, [pc, #284]	@ (800c1c8 <HAL_DMA_Init+0x138>)
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d80f      	bhi.n	800c0ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	4b45      	ldr	r3, [pc, #276]	@ (800c1cc <HAL_DMA_Init+0x13c>)
 800c0b6:	4413      	add	r3, r2
 800c0b8:	4a45      	ldr	r2, [pc, #276]	@ (800c1d0 <HAL_DMA_Init+0x140>)
 800c0ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c0be:	091b      	lsrs	r3, r3, #4
 800c0c0:	009a      	lsls	r2, r3, #2
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a42      	ldr	r2, [pc, #264]	@ (800c1d4 <HAL_DMA_Init+0x144>)
 800c0ca:	641a      	str	r2, [r3, #64]	@ 0x40
 800c0cc:	e00e      	b.n	800c0ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	4b40      	ldr	r3, [pc, #256]	@ (800c1d8 <HAL_DMA_Init+0x148>)
 800c0d6:	4413      	add	r3, r2
 800c0d8:	4a3d      	ldr	r2, [pc, #244]	@ (800c1d0 <HAL_DMA_Init+0x140>)
 800c0da:	fba2 2303 	umull	r2, r3, r2, r3
 800c0de:	091b      	lsrs	r3, r3, #4
 800c0e0:	009a      	lsls	r2, r3, #2
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4a3c      	ldr	r2, [pc, #240]	@ (800c1dc <HAL_DMA_Init+0x14c>)
 800c0ea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2202      	movs	r2, #2
 800c0f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800c102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c106:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c110:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	691b      	ldr	r3, [r3, #16]
 800c116:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c11c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	699b      	ldr	r3, [r3, #24]
 800c122:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c128:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6a1b      	ldr	r3, [r3, #32]
 800c12e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	4313      	orrs	r3, r2
 800c134:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	68fa      	ldr	r2, [r7, #12]
 800c13c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 fa76 	bl	800c630 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c14c:	d102      	bne.n	800c154 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	685a      	ldr	r2, [r3, #4]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c15c:	b2d2      	uxtb	r2, r2
 800c15e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c168:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d010      	beq.n	800c194 <HAL_DMA_Init+0x104>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	2b04      	cmp	r3, #4
 800c178:	d80c      	bhi.n	800c194 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fa96 	bl	800c6ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c184:	2200      	movs	r2, #0
 800c186:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c190:	605a      	str	r2, [r3, #4]
 800c192:	e008      	b.n	800c1a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	40020407 	.word	0x40020407
 800c1cc:	bffdfff8 	.word	0xbffdfff8
 800c1d0:	cccccccd 	.word	0xcccccccd
 800c1d4:	40020000 	.word	0x40020000
 800c1d8:	bffdfbf8 	.word	0xbffdfbf8
 800c1dc:	40020400 	.word	0x40020400

0800c1e0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	607a      	str	r2, [r7, #4]
 800c1ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d101      	bne.n	800c200 <HAL_DMA_Start_IT+0x20>
 800c1fc:	2302      	movs	r3, #2
 800c1fe:	e066      	b.n	800c2ce <HAL_DMA_Start_IT+0xee>
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	2b01      	cmp	r3, #1
 800c212:	d155      	bne.n	800c2c0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2202      	movs	r2, #2
 800c218:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2200      	movs	r2, #0
 800c220:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f022 0201 	bic.w	r2, r2, #1
 800c230:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	68b9      	ldr	r1, [r7, #8]
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f000 f9bb 	bl	800c5b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c242:	2b00      	cmp	r3, #0
 800c244:	d008      	beq.n	800c258 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f042 020e 	orr.w	r2, r2, #14
 800c254:	601a      	str	r2, [r3, #0]
 800c256:	e00f      	b.n	800c278 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f022 0204 	bic.w	r2, r2, #4
 800c266:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f042 020a 	orr.w	r2, r2, #10
 800c276:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c282:	2b00      	cmp	r3, #0
 800c284:	d007      	beq.n	800c296 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c290:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c294:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d007      	beq.n	800c2ae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c2ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f042 0201 	orr.w	r2, r2, #1
 800c2bc:	601a      	str	r2, [r3, #0]
 800c2be:	e005      	b.n	800c2cc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800c2c8:	2302      	movs	r3, #2
 800c2ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800c2cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3718      	adds	r7, #24
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c2d6:	b480      	push	{r7}
 800c2d8:	b085      	sub	sp, #20
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	d005      	beq.n	800c2fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2204      	movs	r2, #4
 800c2f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	73fb      	strb	r3, [r7, #15]
 800c2f8:	e037      	b.n	800c36a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f022 020e 	bic.w	r2, r2, #14
 800c308:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c314:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c318:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	681a      	ldr	r2, [r3, #0]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f022 0201 	bic.w	r2, r2, #1
 800c328:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c32e:	f003 021f 	and.w	r2, r3, #31
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c336:	2101      	movs	r1, #1
 800c338:	fa01 f202 	lsl.w	r2, r1, r2
 800c33c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c346:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d00c      	beq.n	800c36a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c35a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c35e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c368:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2201      	movs	r2, #1
 800c36e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800c37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3714      	adds	r7, #20
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c390:	2300      	movs	r3, #0
 800c392:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	2b02      	cmp	r3, #2
 800c39e:	d00d      	beq.n	800c3bc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2204      	movs	r2, #4
 800c3a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	73fb      	strb	r3, [r7, #15]
 800c3ba:	e047      	b.n	800c44c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f022 020e 	bic.w	r2, r2, #14
 800c3ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f022 0201 	bic.w	r2, r2, #1
 800c3da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c3e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c3ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3f0:	f003 021f 	and.w	r2, r3, #31
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3f8:	2101      	movs	r1, #1
 800c3fa:	fa01 f202 	lsl.w	r2, r1, r2
 800c3fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c408:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00c      	beq.n	800c42c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c41c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c420:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c42a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2201      	movs	r2, #1
 800c430:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c440:	2b00      	cmp	r3, #0
 800c442:	d003      	beq.n	800c44c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	4798      	blx	r3
    }
  }
  return status;
 800c44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c456:	b580      	push	{r7, lr}
 800c458:	b084      	sub	sp, #16
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c472:	f003 031f 	and.w	r3, r3, #31
 800c476:	2204      	movs	r2, #4
 800c478:	409a      	lsls	r2, r3
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	4013      	ands	r3, r2
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d026      	beq.n	800c4d0 <HAL_DMA_IRQHandler+0x7a>
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	f003 0304 	and.w	r3, r3, #4
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d021      	beq.n	800c4d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f003 0320 	and.w	r3, r3, #32
 800c496:	2b00      	cmp	r3, #0
 800c498:	d107      	bne.n	800c4aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f022 0204 	bic.w	r2, r2, #4
 800c4a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4ae:	f003 021f 	and.w	r2, r3, #31
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4b6:	2104      	movs	r1, #4
 800c4b8:	fa01 f202 	lsl.w	r2, r1, r2
 800c4bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d071      	beq.n	800c5aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800c4ce:	e06c      	b.n	800c5aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4d4:	f003 031f 	and.w	r3, r3, #31
 800c4d8:	2202      	movs	r2, #2
 800c4da:	409a      	lsls	r2, r3
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	4013      	ands	r3, r2
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d02e      	beq.n	800c542 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	f003 0302 	and.w	r3, r3, #2
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d029      	beq.n	800c542 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f003 0320 	and.w	r3, r3, #32
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d10b      	bne.n	800c514 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f022 020a 	bic.w	r2, r2, #10
 800c50a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2201      	movs	r2, #1
 800c510:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c518:	f003 021f 	and.w	r2, r3, #31
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c520:	2102      	movs	r1, #2
 800c522:	fa01 f202 	lsl.w	r2, r1, r2
 800c526:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2200      	movs	r2, #0
 800c52c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c534:	2b00      	cmp	r3, #0
 800c536:	d038      	beq.n	800c5aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800c540:	e033      	b.n	800c5aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c546:	f003 031f 	and.w	r3, r3, #31
 800c54a:	2208      	movs	r2, #8
 800c54c:	409a      	lsls	r2, r3
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	4013      	ands	r3, r2
 800c552:	2b00      	cmp	r3, #0
 800c554:	d02a      	beq.n	800c5ac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	f003 0308 	and.w	r3, r3, #8
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d025      	beq.n	800c5ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f022 020e 	bic.w	r2, r2, #14
 800c56e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c574:	f003 021f 	and.w	r2, r3, #31
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c57c:	2101      	movs	r1, #1
 800c57e:	fa01 f202 	lsl.w	r2, r1, r2
 800c582:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2201      	movs	r2, #1
 800c588:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2201      	movs	r2, #1
 800c58e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d004      	beq.n	800c5ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c5aa:	bf00      	nop
 800c5ac:	bf00      	nop
}
 800c5ae:	3710      	adds	r7, #16
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
 800c5c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c5ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d004      	beq.n	800c5de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c5dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5e2:	f003 021f 	and.w	r2, r3, #31
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5ea:	2101      	movs	r1, #1
 800c5ec:	fa01 f202 	lsl.w	r2, r1, r2
 800c5f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	689b      	ldr	r3, [r3, #8]
 800c5fe:	2b10      	cmp	r3, #16
 800c600:	d108      	bne.n	800c614 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	68ba      	ldr	r2, [r7, #8]
 800c610:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c612:	e007      	b.n	800c624 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	60da      	str	r2, [r3, #12]
}
 800c624:	bf00      	nop
 800c626:	3714      	adds	r7, #20
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c630:	b480      	push	{r7}
 800c632:	b087      	sub	sp, #28
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	461a      	mov	r2, r3
 800c63e:	4b16      	ldr	r3, [pc, #88]	@ (800c698 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800c640:	429a      	cmp	r2, r3
 800c642:	d802      	bhi.n	800c64a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800c644:	4b15      	ldr	r3, [pc, #84]	@ (800c69c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800c646:	617b      	str	r3, [r7, #20]
 800c648:	e001      	b.n	800c64e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800c64a:	4b15      	ldr	r3, [pc, #84]	@ (800c6a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800c64c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	b2db      	uxtb	r3, r3
 800c658:	3b08      	subs	r3, #8
 800c65a:	4a12      	ldr	r2, [pc, #72]	@ (800c6a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800c65c:	fba2 2303 	umull	r2, r3, r2, r3
 800c660:	091b      	lsrs	r3, r3, #4
 800c662:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c668:	089b      	lsrs	r3, r3, #2
 800c66a:	009a      	lsls	r2, r3, #2
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	4413      	add	r3, r2
 800c670:	461a      	mov	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4a0b      	ldr	r2, [pc, #44]	@ (800c6a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800c67a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f003 031f 	and.w	r3, r3, #31
 800c682:	2201      	movs	r2, #1
 800c684:	409a      	lsls	r2, r3
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800c68a:	bf00      	nop
 800c68c:	371c      	adds	r7, #28
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr
 800c696:	bf00      	nop
 800c698:	40020407 	.word	0x40020407
 800c69c:	40020800 	.word	0x40020800
 800c6a0:	40020820 	.word	0x40020820
 800c6a4:	cccccccd 	.word	0xcccccccd
 800c6a8:	40020880 	.word	0x40020880

0800c6ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b085      	sub	sp, #20
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	4b0b      	ldr	r3, [pc, #44]	@ (800c6ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800c6c0:	4413      	add	r3, r2
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a08      	ldr	r2, [pc, #32]	@ (800c6f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800c6ce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	3b01      	subs	r3, #1
 800c6d4:	f003 031f 	and.w	r3, r3, #31
 800c6d8:	2201      	movs	r2, #1
 800c6da:	409a      	lsls	r2, r3
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800c6e0:	bf00      	nop
 800c6e2:	3714      	adds	r7, #20
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr
 800c6ec:	1000823f 	.word	0x1000823f
 800c6f0:	40020940 	.word	0x40020940

0800c6f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b087      	sub	sp, #28
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c6fe:	2300      	movs	r3, #0
 800c700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c702:	e15a      	b.n	800c9ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	2101      	movs	r1, #1
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	fa01 f303 	lsl.w	r3, r1, r3
 800c710:	4013      	ands	r3, r2
 800c712:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2b00      	cmp	r3, #0
 800c718:	f000 814c 	beq.w	800c9b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	f003 0303 	and.w	r3, r3, #3
 800c724:	2b01      	cmp	r3, #1
 800c726:	d005      	beq.n	800c734 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c730:	2b02      	cmp	r3, #2
 800c732:	d130      	bne.n	800c796 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	005b      	lsls	r3, r3, #1
 800c73e:	2203      	movs	r2, #3
 800c740:	fa02 f303 	lsl.w	r3, r2, r3
 800c744:	43db      	mvns	r3, r3
 800c746:	693a      	ldr	r2, [r7, #16]
 800c748:	4013      	ands	r3, r2
 800c74a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	68da      	ldr	r2, [r3, #12]
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	005b      	lsls	r3, r3, #1
 800c754:	fa02 f303 	lsl.w	r3, r2, r3
 800c758:	693a      	ldr	r2, [r7, #16]
 800c75a:	4313      	orrs	r3, r2
 800c75c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	693a      	ldr	r2, [r7, #16]
 800c762:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c76a:	2201      	movs	r2, #1
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	fa02 f303 	lsl.w	r3, r2, r3
 800c772:	43db      	mvns	r3, r3
 800c774:	693a      	ldr	r2, [r7, #16]
 800c776:	4013      	ands	r3, r2
 800c778:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	091b      	lsrs	r3, r3, #4
 800c780:	f003 0201 	and.w	r2, r3, #1
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	fa02 f303 	lsl.w	r3, r2, r3
 800c78a:	693a      	ldr	r2, [r7, #16]
 800c78c:	4313      	orrs	r3, r2
 800c78e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	693a      	ldr	r2, [r7, #16]
 800c794:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	f003 0303 	and.w	r3, r3, #3
 800c79e:	2b03      	cmp	r3, #3
 800c7a0:	d017      	beq.n	800c7d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	005b      	lsls	r3, r3, #1
 800c7ac:	2203      	movs	r2, #3
 800c7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c7b2:	43db      	mvns	r3, r3
 800c7b4:	693a      	ldr	r2, [r7, #16]
 800c7b6:	4013      	ands	r3, r2
 800c7b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	689a      	ldr	r2, [r3, #8]
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	005b      	lsls	r3, r3, #1
 800c7c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c7c6:	693a      	ldr	r2, [r7, #16]
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	693a      	ldr	r2, [r7, #16]
 800c7d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	f003 0303 	and.w	r3, r3, #3
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d123      	bne.n	800c826 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	08da      	lsrs	r2, r3, #3
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	3208      	adds	r2, #8
 800c7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	f003 0307 	and.w	r3, r3, #7
 800c7f2:	009b      	lsls	r3, r3, #2
 800c7f4:	220f      	movs	r2, #15
 800c7f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c7fa:	43db      	mvns	r3, r3
 800c7fc:	693a      	ldr	r2, [r7, #16]
 800c7fe:	4013      	ands	r3, r2
 800c800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	691a      	ldr	r2, [r3, #16]
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	f003 0307 	and.w	r3, r3, #7
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	fa02 f303 	lsl.w	r3, r2, r3
 800c812:	693a      	ldr	r2, [r7, #16]
 800c814:	4313      	orrs	r3, r2
 800c816:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	08da      	lsrs	r2, r3, #3
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	3208      	adds	r2, #8
 800c820:	6939      	ldr	r1, [r7, #16]
 800c822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	005b      	lsls	r3, r3, #1
 800c830:	2203      	movs	r2, #3
 800c832:	fa02 f303 	lsl.w	r3, r2, r3
 800c836:	43db      	mvns	r3, r3
 800c838:	693a      	ldr	r2, [r7, #16]
 800c83a:	4013      	ands	r3, r2
 800c83c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	f003 0203 	and.w	r2, r3, #3
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	005b      	lsls	r3, r3, #1
 800c84a:	fa02 f303 	lsl.w	r3, r2, r3
 800c84e:	693a      	ldr	r2, [r7, #16]
 800c850:	4313      	orrs	r3, r2
 800c852:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	693a      	ldr	r2, [r7, #16]
 800c858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c862:	2b00      	cmp	r3, #0
 800c864:	f000 80a6 	beq.w	800c9b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c868:	4b5b      	ldr	r3, [pc, #364]	@ (800c9d8 <HAL_GPIO_Init+0x2e4>)
 800c86a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c86c:	4a5a      	ldr	r2, [pc, #360]	@ (800c9d8 <HAL_GPIO_Init+0x2e4>)
 800c86e:	f043 0301 	orr.w	r3, r3, #1
 800c872:	6613      	str	r3, [r2, #96]	@ 0x60
 800c874:	4b58      	ldr	r3, [pc, #352]	@ (800c9d8 <HAL_GPIO_Init+0x2e4>)
 800c876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c878:	f003 0301 	and.w	r3, r3, #1
 800c87c:	60bb      	str	r3, [r7, #8]
 800c87e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c880:	4a56      	ldr	r2, [pc, #344]	@ (800c9dc <HAL_GPIO_Init+0x2e8>)
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	089b      	lsrs	r3, r3, #2
 800c886:	3302      	adds	r3, #2
 800c888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c88c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	f003 0303 	and.w	r3, r3, #3
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	220f      	movs	r2, #15
 800c898:	fa02 f303 	lsl.w	r3, r2, r3
 800c89c:	43db      	mvns	r3, r3
 800c89e:	693a      	ldr	r2, [r7, #16]
 800c8a0:	4013      	ands	r3, r2
 800c8a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800c8aa:	d01f      	beq.n	800c8ec <HAL_GPIO_Init+0x1f8>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	4a4c      	ldr	r2, [pc, #304]	@ (800c9e0 <HAL_GPIO_Init+0x2ec>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d019      	beq.n	800c8e8 <HAL_GPIO_Init+0x1f4>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	4a4b      	ldr	r2, [pc, #300]	@ (800c9e4 <HAL_GPIO_Init+0x2f0>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d013      	beq.n	800c8e4 <HAL_GPIO_Init+0x1f0>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4a4a      	ldr	r2, [pc, #296]	@ (800c9e8 <HAL_GPIO_Init+0x2f4>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d00d      	beq.n	800c8e0 <HAL_GPIO_Init+0x1ec>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	4a49      	ldr	r2, [pc, #292]	@ (800c9ec <HAL_GPIO_Init+0x2f8>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d007      	beq.n	800c8dc <HAL_GPIO_Init+0x1e8>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4a48      	ldr	r2, [pc, #288]	@ (800c9f0 <HAL_GPIO_Init+0x2fc>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d101      	bne.n	800c8d8 <HAL_GPIO_Init+0x1e4>
 800c8d4:	2305      	movs	r3, #5
 800c8d6:	e00a      	b.n	800c8ee <HAL_GPIO_Init+0x1fa>
 800c8d8:	2306      	movs	r3, #6
 800c8da:	e008      	b.n	800c8ee <HAL_GPIO_Init+0x1fa>
 800c8dc:	2304      	movs	r3, #4
 800c8de:	e006      	b.n	800c8ee <HAL_GPIO_Init+0x1fa>
 800c8e0:	2303      	movs	r3, #3
 800c8e2:	e004      	b.n	800c8ee <HAL_GPIO_Init+0x1fa>
 800c8e4:	2302      	movs	r3, #2
 800c8e6:	e002      	b.n	800c8ee <HAL_GPIO_Init+0x1fa>
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e000      	b.n	800c8ee <HAL_GPIO_Init+0x1fa>
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	f002 0203 	and.w	r2, r2, #3
 800c8f4:	0092      	lsls	r2, r2, #2
 800c8f6:	4093      	lsls	r3, r2
 800c8f8:	693a      	ldr	r2, [r7, #16]
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c8fe:	4937      	ldr	r1, [pc, #220]	@ (800c9dc <HAL_GPIO_Init+0x2e8>)
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	089b      	lsrs	r3, r3, #2
 800c904:	3302      	adds	r3, #2
 800c906:	693a      	ldr	r2, [r7, #16]
 800c908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c90c:	4b39      	ldr	r3, [pc, #228]	@ (800c9f4 <HAL_GPIO_Init+0x300>)
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	43db      	mvns	r3, r3
 800c916:	693a      	ldr	r2, [r7, #16]
 800c918:	4013      	ands	r3, r2
 800c91a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c924:	2b00      	cmp	r3, #0
 800c926:	d003      	beq.n	800c930 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800c928:	693a      	ldr	r2, [r7, #16]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	4313      	orrs	r3, r2
 800c92e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c930:	4a30      	ldr	r2, [pc, #192]	@ (800c9f4 <HAL_GPIO_Init+0x300>)
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c936:	4b2f      	ldr	r3, [pc, #188]	@ (800c9f4 <HAL_GPIO_Init+0x300>)
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	43db      	mvns	r3, r3
 800c940:	693a      	ldr	r2, [r7, #16]
 800c942:	4013      	ands	r3, r2
 800c944:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d003      	beq.n	800c95a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800c952:	693a      	ldr	r2, [r7, #16]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	4313      	orrs	r3, r2
 800c958:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c95a:	4a26      	ldr	r2, [pc, #152]	@ (800c9f4 <HAL_GPIO_Init+0x300>)
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800c960:	4b24      	ldr	r3, [pc, #144]	@ (800c9f4 <HAL_GPIO_Init+0x300>)
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	43db      	mvns	r3, r3
 800c96a:	693a      	ldr	r2, [r7, #16]
 800c96c:	4013      	ands	r3, r2
 800c96e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d003      	beq.n	800c984 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800c97c:	693a      	ldr	r2, [r7, #16]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	4313      	orrs	r3, r2
 800c982:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c984:	4a1b      	ldr	r2, [pc, #108]	@ (800c9f4 <HAL_GPIO_Init+0x300>)
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c98a:	4b1a      	ldr	r3, [pc, #104]	@ (800c9f4 <HAL_GPIO_Init+0x300>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	43db      	mvns	r3, r3
 800c994:	693a      	ldr	r2, [r7, #16]
 800c996:	4013      	ands	r3, r2
 800c998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d003      	beq.n	800c9ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800c9a6:	693a      	ldr	r2, [r7, #16]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c9ae:	4a11      	ldr	r2, [pc, #68]	@ (800c9f4 <HAL_GPIO_Init+0x300>)
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f47f ae9d 	bne.w	800c704 <HAL_GPIO_Init+0x10>
  }
}
 800c9ca:	bf00      	nop
 800c9cc:	bf00      	nop
 800c9ce:	371c      	adds	r7, #28
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr
 800c9d8:	40021000 	.word	0x40021000
 800c9dc:	40010000 	.word	0x40010000
 800c9e0:	48000400 	.word	0x48000400
 800c9e4:	48000800 	.word	0x48000800
 800c9e8:	48000c00 	.word	0x48000c00
 800c9ec:	48001000 	.word	0x48001000
 800c9f0:	48001400 	.word	0x48001400
 800c9f4:	40010400 	.word	0x40010400

0800c9f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	460b      	mov	r3, r1
 800ca02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	691a      	ldr	r2, [r3, #16]
 800ca08:	887b      	ldrh	r3, [r7, #2]
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d002      	beq.n	800ca16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ca10:	2301      	movs	r3, #1
 800ca12:	73fb      	strb	r3, [r7, #15]
 800ca14:	e001      	b.n	800ca1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ca16:	2300      	movs	r3, #0
 800ca18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ca1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3714      	adds	r7, #20
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	460b      	mov	r3, r1
 800ca32:	807b      	strh	r3, [r7, #2]
 800ca34:	4613      	mov	r3, r2
 800ca36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ca38:	787b      	ldrb	r3, [r7, #1]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d003      	beq.n	800ca46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ca3e:	887a      	ldrh	r2, [r7, #2]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ca44:	e002      	b.n	800ca4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ca46:	887a      	ldrh	r2, [r7, #2]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ca4c:	bf00      	nop
 800ca4e:	370c      	adds	r7, #12
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	460b      	mov	r3, r1
 800ca62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	695b      	ldr	r3, [r3, #20]
 800ca68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ca6a:	887a      	ldrh	r2, [r7, #2]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	4013      	ands	r3, r2
 800ca70:	041a      	lsls	r2, r3, #16
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	43d9      	mvns	r1, r3
 800ca76:	887b      	ldrh	r3, [r7, #2]
 800ca78:	400b      	ands	r3, r1
 800ca7a:	431a      	orrs	r2, r3
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	619a      	str	r2, [r3, #24]
}
 800ca80:	bf00      	nop
 800ca82:	3714      	adds	r7, #20
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	4603      	mov	r3, r0
 800ca94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800ca96:	4b08      	ldr	r3, [pc, #32]	@ (800cab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ca98:	695a      	ldr	r2, [r3, #20]
 800ca9a:	88fb      	ldrh	r3, [r7, #6]
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d006      	beq.n	800cab0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800caa2:	4a05      	ldr	r2, [pc, #20]	@ (800cab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800caa4:	88fb      	ldrh	r3, [r7, #6]
 800caa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800caa8:	88fb      	ldrh	r3, [r7, #6]
 800caaa:	4618      	mov	r0, r3
 800caac:	f7fb fc9c 	bl	80083e8 <HAL_GPIO_EXTI_Callback>
  }
}
 800cab0:	bf00      	nop
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	40010400 	.word	0x40010400

0800cabc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b085      	sub	sp, #20
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d141      	bne.n	800cb4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800caca:	4b4b      	ldr	r3, [pc, #300]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cad6:	d131      	bne.n	800cb3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cad8:	4b47      	ldr	r3, [pc, #284]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cade:	4a46      	ldr	r2, [pc, #280]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cae4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cae8:	4b43      	ldr	r3, [pc, #268]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800caf0:	4a41      	ldr	r2, [pc, #260]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800caf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800caf6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800caf8:	4b40      	ldr	r3, [pc, #256]	@ (800cbfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2232      	movs	r2, #50	@ 0x32
 800cafe:	fb02 f303 	mul.w	r3, r2, r3
 800cb02:	4a3f      	ldr	r2, [pc, #252]	@ (800cc00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cb04:	fba2 2303 	umull	r2, r3, r2, r3
 800cb08:	0c9b      	lsrs	r3, r3, #18
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cb0e:	e002      	b.n	800cb16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	3b01      	subs	r3, #1
 800cb14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cb16:	4b38      	ldr	r3, [pc, #224]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb18:	695b      	ldr	r3, [r3, #20]
 800cb1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb22:	d102      	bne.n	800cb2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1f2      	bne.n	800cb10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cb2a:	4b33      	ldr	r3, [pc, #204]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb2c:	695b      	ldr	r3, [r3, #20]
 800cb2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb36:	d158      	bne.n	800cbea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cb38:	2303      	movs	r3, #3
 800cb3a:	e057      	b.n	800cbec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cb3c:	4b2e      	ldr	r3, [pc, #184]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb42:	4a2d      	ldr	r2, [pc, #180]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800cb4c:	e04d      	b.n	800cbea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb54:	d141      	bne.n	800cbda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cb56:	4b28      	ldr	r3, [pc, #160]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cb5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb62:	d131      	bne.n	800cbc8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cb64:	4b24      	ldr	r3, [pc, #144]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb6a:	4a23      	ldr	r2, [pc, #140]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cb70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cb74:	4b20      	ldr	r3, [pc, #128]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800cb7c:	4a1e      	ldr	r2, [pc, #120]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cb82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cb84:	4b1d      	ldr	r3, [pc, #116]	@ (800cbfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2232      	movs	r2, #50	@ 0x32
 800cb8a:	fb02 f303 	mul.w	r3, r2, r3
 800cb8e:	4a1c      	ldr	r2, [pc, #112]	@ (800cc00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cb90:	fba2 2303 	umull	r2, r3, r2, r3
 800cb94:	0c9b      	lsrs	r3, r3, #18
 800cb96:	3301      	adds	r3, #1
 800cb98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cb9a:	e002      	b.n	800cba2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	3b01      	subs	r3, #1
 800cba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cba2:	4b15      	ldr	r3, [pc, #84]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cba4:	695b      	ldr	r3, [r3, #20]
 800cba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cbae:	d102      	bne.n	800cbb6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d1f2      	bne.n	800cb9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cbb6:	4b10      	ldr	r3, [pc, #64]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cbb8:	695b      	ldr	r3, [r3, #20]
 800cbba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cbc2:	d112      	bne.n	800cbea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cbc4:	2303      	movs	r3, #3
 800cbc6:	e011      	b.n	800cbec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cbc8:	4b0b      	ldr	r3, [pc, #44]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cbca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbce:	4a0a      	ldr	r2, [pc, #40]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cbd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cbd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800cbd8:	e007      	b.n	800cbea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800cbda:	4b07      	ldr	r3, [pc, #28]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800cbe2:	4a05      	ldr	r2, [pc, #20]	@ (800cbf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cbe4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cbe8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800cbea:	2300      	movs	r3, #0
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3714      	adds	r7, #20
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr
 800cbf8:	40007000 	.word	0x40007000
 800cbfc:	20000338 	.word	0x20000338
 800cc00:	431bde83 	.word	0x431bde83

0800cc04 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800cc04:	b480      	push	{r7}
 800cc06:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800cc08:	4b05      	ldr	r3, [pc, #20]	@ (800cc20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	4a04      	ldr	r2, [pc, #16]	@ (800cc20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800cc0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cc12:	6093      	str	r3, [r2, #8]
}
 800cc14:	bf00      	nop
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	40007000 	.word	0x40007000

0800cc24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b088      	sub	sp, #32
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d101      	bne.n	800cc36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cc32:	2301      	movs	r3, #1
 800cc34:	e2fe      	b.n	800d234 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f003 0301 	and.w	r3, r3, #1
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d075      	beq.n	800cd2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc42:	4b97      	ldr	r3, [pc, #604]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cc44:	689b      	ldr	r3, [r3, #8]
 800cc46:	f003 030c 	and.w	r3, r3, #12
 800cc4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cc4c:	4b94      	ldr	r3, [pc, #592]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	f003 0303 	and.w	r3, r3, #3
 800cc54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800cc56:	69bb      	ldr	r3, [r7, #24]
 800cc58:	2b0c      	cmp	r3, #12
 800cc5a:	d102      	bne.n	800cc62 <HAL_RCC_OscConfig+0x3e>
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	2b03      	cmp	r3, #3
 800cc60:	d002      	beq.n	800cc68 <HAL_RCC_OscConfig+0x44>
 800cc62:	69bb      	ldr	r3, [r7, #24]
 800cc64:	2b08      	cmp	r3, #8
 800cc66:	d10b      	bne.n	800cc80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cc68:	4b8d      	ldr	r3, [pc, #564]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d05b      	beq.n	800cd2c <HAL_RCC_OscConfig+0x108>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d157      	bne.n	800cd2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	e2d9      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc88:	d106      	bne.n	800cc98 <HAL_RCC_OscConfig+0x74>
 800cc8a:	4b85      	ldr	r3, [pc, #532]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4a84      	ldr	r2, [pc, #528]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cc90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cc94:	6013      	str	r3, [r2, #0]
 800cc96:	e01d      	b.n	800ccd4 <HAL_RCC_OscConfig+0xb0>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cca0:	d10c      	bne.n	800ccbc <HAL_RCC_OscConfig+0x98>
 800cca2:	4b7f      	ldr	r3, [pc, #508]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a7e      	ldr	r2, [pc, #504]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ccac:	6013      	str	r3, [r2, #0]
 800ccae:	4b7c      	ldr	r3, [pc, #496]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4a7b      	ldr	r2, [pc, #492]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800ccb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ccb8:	6013      	str	r3, [r2, #0]
 800ccba:	e00b      	b.n	800ccd4 <HAL_RCC_OscConfig+0xb0>
 800ccbc:	4b78      	ldr	r3, [pc, #480]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a77      	ldr	r2, [pc, #476]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800ccc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ccc6:	6013      	str	r3, [r2, #0]
 800ccc8:	4b75      	ldr	r3, [pc, #468]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a74      	ldr	r2, [pc, #464]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800ccce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ccd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d013      	beq.n	800cd04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccdc:	f7fd fc44 	bl	800a568 <HAL_GetTick>
 800cce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cce2:	e008      	b.n	800ccf6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cce4:	f7fd fc40 	bl	800a568 <HAL_GetTick>
 800cce8:	4602      	mov	r2, r0
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	1ad3      	subs	r3, r2, r3
 800ccee:	2b64      	cmp	r3, #100	@ 0x64
 800ccf0:	d901      	bls.n	800ccf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	e29e      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ccf6:	4b6a      	ldr	r3, [pc, #424]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d0f0      	beq.n	800cce4 <HAL_RCC_OscConfig+0xc0>
 800cd02:	e014      	b.n	800cd2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd04:	f7fd fc30 	bl	800a568 <HAL_GetTick>
 800cd08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cd0a:	e008      	b.n	800cd1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cd0c:	f7fd fc2c 	bl	800a568 <HAL_GetTick>
 800cd10:	4602      	mov	r2, r0
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	1ad3      	subs	r3, r2, r3
 800cd16:	2b64      	cmp	r3, #100	@ 0x64
 800cd18:	d901      	bls.n	800cd1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cd1a:	2303      	movs	r3, #3
 800cd1c:	e28a      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cd1e:	4b60      	ldr	r3, [pc, #384]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d1f0      	bne.n	800cd0c <HAL_RCC_OscConfig+0xe8>
 800cd2a:	e000      	b.n	800cd2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f003 0302 	and.w	r3, r3, #2
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d075      	beq.n	800ce26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cd3a:	4b59      	ldr	r3, [pc, #356]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cd3c:	689b      	ldr	r3, [r3, #8]
 800cd3e:	f003 030c 	and.w	r3, r3, #12
 800cd42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cd44:	4b56      	ldr	r3, [pc, #344]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	f003 0303 	and.w	r3, r3, #3
 800cd4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800cd4e:	69bb      	ldr	r3, [r7, #24]
 800cd50:	2b0c      	cmp	r3, #12
 800cd52:	d102      	bne.n	800cd5a <HAL_RCC_OscConfig+0x136>
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	d002      	beq.n	800cd60 <HAL_RCC_OscConfig+0x13c>
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	2b04      	cmp	r3, #4
 800cd5e:	d11f      	bne.n	800cda0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd60:	4b4f      	ldr	r3, [pc, #316]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d005      	beq.n	800cd78 <HAL_RCC_OscConfig+0x154>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d101      	bne.n	800cd78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800cd74:	2301      	movs	r3, #1
 800cd76:	e25d      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd78:	4b49      	ldr	r3, [pc, #292]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	691b      	ldr	r3, [r3, #16]
 800cd84:	061b      	lsls	r3, r3, #24
 800cd86:	4946      	ldr	r1, [pc, #280]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800cd8c:	4b45      	ldr	r3, [pc, #276]	@ (800cea4 <HAL_RCC_OscConfig+0x280>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7fd fb9d 	bl	800a4d0 <HAL_InitTick>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d043      	beq.n	800ce24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	e249      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d023      	beq.n	800cdf0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cda8:	4b3d      	ldr	r3, [pc, #244]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a3c      	ldr	r2, [pc, #240]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cdae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cdb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdb4:	f7fd fbd8 	bl	800a568 <HAL_GetTick>
 800cdb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cdba:	e008      	b.n	800cdce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cdbc:	f7fd fbd4 	bl	800a568 <HAL_GetTick>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	1ad3      	subs	r3, r2, r3
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	d901      	bls.n	800cdce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800cdca:	2303      	movs	r3, #3
 800cdcc:	e232      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cdce:	4b34      	ldr	r3, [pc, #208]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d0f0      	beq.n	800cdbc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cdda:	4b31      	ldr	r3, [pc, #196]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	691b      	ldr	r3, [r3, #16]
 800cde6:	061b      	lsls	r3, r3, #24
 800cde8:	492d      	ldr	r1, [pc, #180]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cdea:	4313      	orrs	r3, r2
 800cdec:	604b      	str	r3, [r1, #4]
 800cdee:	e01a      	b.n	800ce26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cdf0:	4b2b      	ldr	r3, [pc, #172]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a2a      	ldr	r2, [pc, #168]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800cdf6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cdfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdfc:	f7fd fbb4 	bl	800a568 <HAL_GetTick>
 800ce00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ce02:	e008      	b.n	800ce16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ce04:	f7fd fbb0 	bl	800a568 <HAL_GetTick>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	1ad3      	subs	r3, r2, r3
 800ce0e:	2b02      	cmp	r3, #2
 800ce10:	d901      	bls.n	800ce16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800ce12:	2303      	movs	r3, #3
 800ce14:	e20e      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ce16:	4b22      	ldr	r3, [pc, #136]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d1f0      	bne.n	800ce04 <HAL_RCC_OscConfig+0x1e0>
 800ce22:	e000      	b.n	800ce26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ce24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f003 0308 	and.w	r3, r3, #8
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d041      	beq.n	800ceb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	695b      	ldr	r3, [r3, #20]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d01c      	beq.n	800ce74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ce3a:	4b19      	ldr	r3, [pc, #100]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800ce3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ce40:	4a17      	ldr	r2, [pc, #92]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800ce42:	f043 0301 	orr.w	r3, r3, #1
 800ce46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce4a:	f7fd fb8d 	bl	800a568 <HAL_GetTick>
 800ce4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ce50:	e008      	b.n	800ce64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ce52:	f7fd fb89 	bl	800a568 <HAL_GetTick>
 800ce56:	4602      	mov	r2, r0
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	1ad3      	subs	r3, r2, r3
 800ce5c:	2b02      	cmp	r3, #2
 800ce5e:	d901      	bls.n	800ce64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ce60:	2303      	movs	r3, #3
 800ce62:	e1e7      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ce64:	4b0e      	ldr	r3, [pc, #56]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800ce66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ce6a:	f003 0302 	and.w	r3, r3, #2
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d0ef      	beq.n	800ce52 <HAL_RCC_OscConfig+0x22e>
 800ce72:	e020      	b.n	800ceb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ce74:	4b0a      	ldr	r3, [pc, #40]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800ce76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ce7a:	4a09      	ldr	r2, [pc, #36]	@ (800cea0 <HAL_RCC_OscConfig+0x27c>)
 800ce7c:	f023 0301 	bic.w	r3, r3, #1
 800ce80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce84:	f7fd fb70 	bl	800a568 <HAL_GetTick>
 800ce88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ce8a:	e00d      	b.n	800cea8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ce8c:	f7fd fb6c 	bl	800a568 <HAL_GetTick>
 800ce90:	4602      	mov	r2, r0
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	1ad3      	subs	r3, r2, r3
 800ce96:	2b02      	cmp	r3, #2
 800ce98:	d906      	bls.n	800cea8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ce9a:	2303      	movs	r3, #3
 800ce9c:	e1ca      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
 800ce9e:	bf00      	nop
 800cea0:	40021000 	.word	0x40021000
 800cea4:	2000033c 	.word	0x2000033c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cea8:	4b8c      	ldr	r3, [pc, #560]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800ceaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ceae:	f003 0302 	and.w	r3, r3, #2
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1ea      	bne.n	800ce8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 0304 	and.w	r3, r3, #4
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	f000 80a6 	beq.w	800d010 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cec4:	2300      	movs	r3, #0
 800cec6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800cec8:	4b84      	ldr	r3, [pc, #528]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800ceca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d101      	bne.n	800ced8 <HAL_RCC_OscConfig+0x2b4>
 800ced4:	2301      	movs	r3, #1
 800ced6:	e000      	b.n	800ceda <HAL_RCC_OscConfig+0x2b6>
 800ced8:	2300      	movs	r3, #0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d00d      	beq.n	800cefa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cede:	4b7f      	ldr	r3, [pc, #508]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800cee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cee2:	4a7e      	ldr	r2, [pc, #504]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800cee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cee8:	6593      	str	r3, [r2, #88]	@ 0x58
 800ceea:	4b7c      	ldr	r3, [pc, #496]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800ceec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ceee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cef2:	60fb      	str	r3, [r7, #12]
 800cef4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cef6:	2301      	movs	r3, #1
 800cef8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cefa:	4b79      	ldr	r3, [pc, #484]	@ (800d0e0 <HAL_RCC_OscConfig+0x4bc>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d118      	bne.n	800cf38 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cf06:	4b76      	ldr	r3, [pc, #472]	@ (800d0e0 <HAL_RCC_OscConfig+0x4bc>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a75      	ldr	r2, [pc, #468]	@ (800d0e0 <HAL_RCC_OscConfig+0x4bc>)
 800cf0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cf10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cf12:	f7fd fb29 	bl	800a568 <HAL_GetTick>
 800cf16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cf18:	e008      	b.n	800cf2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf1a:	f7fd fb25 	bl	800a568 <HAL_GetTick>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	1ad3      	subs	r3, r2, r3
 800cf24:	2b02      	cmp	r3, #2
 800cf26:	d901      	bls.n	800cf2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800cf28:	2303      	movs	r3, #3
 800cf2a:	e183      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cf2c:	4b6c      	ldr	r3, [pc, #432]	@ (800d0e0 <HAL_RCC_OscConfig+0x4bc>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d0f0      	beq.n	800cf1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d108      	bne.n	800cf52 <HAL_RCC_OscConfig+0x32e>
 800cf40:	4b66      	ldr	r3, [pc, #408]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800cf42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf46:	4a65      	ldr	r2, [pc, #404]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800cf48:	f043 0301 	orr.w	r3, r3, #1
 800cf4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cf50:	e024      	b.n	800cf9c <HAL_RCC_OscConfig+0x378>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	689b      	ldr	r3, [r3, #8]
 800cf56:	2b05      	cmp	r3, #5
 800cf58:	d110      	bne.n	800cf7c <HAL_RCC_OscConfig+0x358>
 800cf5a:	4b60      	ldr	r3, [pc, #384]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800cf5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf60:	4a5e      	ldr	r2, [pc, #376]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800cf62:	f043 0304 	orr.w	r3, r3, #4
 800cf66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cf6a:	4b5c      	ldr	r3, [pc, #368]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800cf6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf70:	4a5a      	ldr	r2, [pc, #360]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800cf72:	f043 0301 	orr.w	r3, r3, #1
 800cf76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cf7a:	e00f      	b.n	800cf9c <HAL_RCC_OscConfig+0x378>
 800cf7c:	4b57      	ldr	r3, [pc, #348]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800cf7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf82:	4a56      	ldr	r2, [pc, #344]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800cf84:	f023 0301 	bic.w	r3, r3, #1
 800cf88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cf8c:	4b53      	ldr	r3, [pc, #332]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800cf8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf92:	4a52      	ldr	r2, [pc, #328]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800cf94:	f023 0304 	bic.w	r3, r3, #4
 800cf98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d016      	beq.n	800cfd2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfa4:	f7fd fae0 	bl	800a568 <HAL_GetTick>
 800cfa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cfaa:	e00a      	b.n	800cfc2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cfac:	f7fd fadc 	bl	800a568 <HAL_GetTick>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	1ad3      	subs	r3, r2, r3
 800cfb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d901      	bls.n	800cfc2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800cfbe:	2303      	movs	r3, #3
 800cfc0:	e138      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cfc2:	4b46      	ldr	r3, [pc, #280]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800cfc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfc8:	f003 0302 	and.w	r3, r3, #2
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d0ed      	beq.n	800cfac <HAL_RCC_OscConfig+0x388>
 800cfd0:	e015      	b.n	800cffe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfd2:	f7fd fac9 	bl	800a568 <HAL_GetTick>
 800cfd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cfd8:	e00a      	b.n	800cff0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cfda:	f7fd fac5 	bl	800a568 <HAL_GetTick>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	1ad3      	subs	r3, r2, r3
 800cfe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d901      	bls.n	800cff0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800cfec:	2303      	movs	r3, #3
 800cfee:	e121      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cff0:	4b3a      	ldr	r3, [pc, #232]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800cff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cff6:	f003 0302 	and.w	r3, r3, #2
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1ed      	bne.n	800cfda <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cffe:	7ffb      	ldrb	r3, [r7, #31]
 800d000:	2b01      	cmp	r3, #1
 800d002:	d105      	bne.n	800d010 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d004:	4b35      	ldr	r3, [pc, #212]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800d006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d008:	4a34      	ldr	r2, [pc, #208]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800d00a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d00e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f003 0320 	and.w	r3, r3, #32
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d03c      	beq.n	800d096 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	699b      	ldr	r3, [r3, #24]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d01c      	beq.n	800d05e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d024:	4b2d      	ldr	r3, [pc, #180]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800d026:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d02a:	4a2c      	ldr	r2, [pc, #176]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800d02c:	f043 0301 	orr.w	r3, r3, #1
 800d030:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d034:	f7fd fa98 	bl	800a568 <HAL_GetTick>
 800d038:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d03a:	e008      	b.n	800d04e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d03c:	f7fd fa94 	bl	800a568 <HAL_GetTick>
 800d040:	4602      	mov	r2, r0
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	2b02      	cmp	r3, #2
 800d048:	d901      	bls.n	800d04e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800d04a:	2303      	movs	r3, #3
 800d04c:	e0f2      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d04e:	4b23      	ldr	r3, [pc, #140]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800d050:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d054:	f003 0302 	and.w	r3, r3, #2
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d0ef      	beq.n	800d03c <HAL_RCC_OscConfig+0x418>
 800d05c:	e01b      	b.n	800d096 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d05e:	4b1f      	ldr	r3, [pc, #124]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800d060:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d064:	4a1d      	ldr	r2, [pc, #116]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800d066:	f023 0301 	bic.w	r3, r3, #1
 800d06a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d06e:	f7fd fa7b 	bl	800a568 <HAL_GetTick>
 800d072:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d074:	e008      	b.n	800d088 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d076:	f7fd fa77 	bl	800a568 <HAL_GetTick>
 800d07a:	4602      	mov	r2, r0
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	1ad3      	subs	r3, r2, r3
 800d080:	2b02      	cmp	r3, #2
 800d082:	d901      	bls.n	800d088 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800d084:	2303      	movs	r3, #3
 800d086:	e0d5      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d088:	4b14      	ldr	r3, [pc, #80]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800d08a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d08e:	f003 0302 	and.w	r3, r3, #2
 800d092:	2b00      	cmp	r3, #0
 800d094:	d1ef      	bne.n	800d076 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	69db      	ldr	r3, [r3, #28]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	f000 80c9 	beq.w	800d232 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d0a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800d0a2:	689b      	ldr	r3, [r3, #8]
 800d0a4:	f003 030c 	and.w	r3, r3, #12
 800d0a8:	2b0c      	cmp	r3, #12
 800d0aa:	f000 8083 	beq.w	800d1b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	69db      	ldr	r3, [r3, #28]
 800d0b2:	2b02      	cmp	r3, #2
 800d0b4:	d15e      	bne.n	800d174 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d0b6:	4b09      	ldr	r3, [pc, #36]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a08      	ldr	r2, [pc, #32]	@ (800d0dc <HAL_RCC_OscConfig+0x4b8>)
 800d0bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d0c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0c2:	f7fd fa51 	bl	800a568 <HAL_GetTick>
 800d0c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d0c8:	e00c      	b.n	800d0e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d0ca:	f7fd fa4d 	bl	800a568 <HAL_GetTick>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	1ad3      	subs	r3, r2, r3
 800d0d4:	2b02      	cmp	r3, #2
 800d0d6:	d905      	bls.n	800d0e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800d0d8:	2303      	movs	r3, #3
 800d0da:	e0ab      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
 800d0dc:	40021000 	.word	0x40021000
 800d0e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d0e4:	4b55      	ldr	r3, [pc, #340]	@ (800d23c <HAL_RCC_OscConfig+0x618>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d1ec      	bne.n	800d0ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d0f0:	4b52      	ldr	r3, [pc, #328]	@ (800d23c <HAL_RCC_OscConfig+0x618>)
 800d0f2:	68da      	ldr	r2, [r3, #12]
 800d0f4:	4b52      	ldr	r3, [pc, #328]	@ (800d240 <HAL_RCC_OscConfig+0x61c>)
 800d0f6:	4013      	ands	r3, r2
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	6a11      	ldr	r1, [r2, #32]
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d100:	3a01      	subs	r2, #1
 800d102:	0112      	lsls	r2, r2, #4
 800d104:	4311      	orrs	r1, r2
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800d10a:	0212      	lsls	r2, r2, #8
 800d10c:	4311      	orrs	r1, r2
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d112:	0852      	lsrs	r2, r2, #1
 800d114:	3a01      	subs	r2, #1
 800d116:	0552      	lsls	r2, r2, #21
 800d118:	4311      	orrs	r1, r2
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d11e:	0852      	lsrs	r2, r2, #1
 800d120:	3a01      	subs	r2, #1
 800d122:	0652      	lsls	r2, r2, #25
 800d124:	4311      	orrs	r1, r2
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d12a:	06d2      	lsls	r2, r2, #27
 800d12c:	430a      	orrs	r2, r1
 800d12e:	4943      	ldr	r1, [pc, #268]	@ (800d23c <HAL_RCC_OscConfig+0x618>)
 800d130:	4313      	orrs	r3, r2
 800d132:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d134:	4b41      	ldr	r3, [pc, #260]	@ (800d23c <HAL_RCC_OscConfig+0x618>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a40      	ldr	r2, [pc, #256]	@ (800d23c <HAL_RCC_OscConfig+0x618>)
 800d13a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d13e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d140:	4b3e      	ldr	r3, [pc, #248]	@ (800d23c <HAL_RCC_OscConfig+0x618>)
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	4a3d      	ldr	r2, [pc, #244]	@ (800d23c <HAL_RCC_OscConfig+0x618>)
 800d146:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d14a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d14c:	f7fd fa0c 	bl	800a568 <HAL_GetTick>
 800d150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d152:	e008      	b.n	800d166 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d154:	f7fd fa08 	bl	800a568 <HAL_GetTick>
 800d158:	4602      	mov	r2, r0
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	1ad3      	subs	r3, r2, r3
 800d15e:	2b02      	cmp	r3, #2
 800d160:	d901      	bls.n	800d166 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800d162:	2303      	movs	r3, #3
 800d164:	e066      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d166:	4b35      	ldr	r3, [pc, #212]	@ (800d23c <HAL_RCC_OscConfig+0x618>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d0f0      	beq.n	800d154 <HAL_RCC_OscConfig+0x530>
 800d172:	e05e      	b.n	800d232 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d174:	4b31      	ldr	r3, [pc, #196]	@ (800d23c <HAL_RCC_OscConfig+0x618>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a30      	ldr	r2, [pc, #192]	@ (800d23c <HAL_RCC_OscConfig+0x618>)
 800d17a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d17e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d180:	f7fd f9f2 	bl	800a568 <HAL_GetTick>
 800d184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d186:	e008      	b.n	800d19a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d188:	f7fd f9ee 	bl	800a568 <HAL_GetTick>
 800d18c:	4602      	mov	r2, r0
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	1ad3      	subs	r3, r2, r3
 800d192:	2b02      	cmp	r3, #2
 800d194:	d901      	bls.n	800d19a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800d196:	2303      	movs	r3, #3
 800d198:	e04c      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d19a:	4b28      	ldr	r3, [pc, #160]	@ (800d23c <HAL_RCC_OscConfig+0x618>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1f0      	bne.n	800d188 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800d1a6:	4b25      	ldr	r3, [pc, #148]	@ (800d23c <HAL_RCC_OscConfig+0x618>)
 800d1a8:	68da      	ldr	r2, [r3, #12]
 800d1aa:	4924      	ldr	r1, [pc, #144]	@ (800d23c <HAL_RCC_OscConfig+0x618>)
 800d1ac:	4b25      	ldr	r3, [pc, #148]	@ (800d244 <HAL_RCC_OscConfig+0x620>)
 800d1ae:	4013      	ands	r3, r2
 800d1b0:	60cb      	str	r3, [r1, #12]
 800d1b2:	e03e      	b.n	800d232 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	69db      	ldr	r3, [r3, #28]
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d101      	bne.n	800d1c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e039      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800d1c0:	4b1e      	ldr	r3, [pc, #120]	@ (800d23c <HAL_RCC_OscConfig+0x618>)
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	f003 0203 	and.w	r2, r3, #3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6a1b      	ldr	r3, [r3, #32]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d12c      	bne.n	800d22e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1de:	3b01      	subs	r3, #1
 800d1e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d123      	bne.n	800d22e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d11b      	bne.n	800d22e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d200:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d202:	429a      	cmp	r2, r3
 800d204:	d113      	bne.n	800d22e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d210:	085b      	lsrs	r3, r3, #1
 800d212:	3b01      	subs	r3, #1
 800d214:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d216:	429a      	cmp	r2, r3
 800d218:	d109      	bne.n	800d22e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d224:	085b      	lsrs	r3, r3, #1
 800d226:	3b01      	subs	r3, #1
 800d228:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d001      	beq.n	800d232 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800d22e:	2301      	movs	r3, #1
 800d230:	e000      	b.n	800d234 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800d232:	2300      	movs	r3, #0
}
 800d234:	4618      	mov	r0, r3
 800d236:	3720      	adds	r7, #32
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	40021000 	.word	0x40021000
 800d240:	019f800c 	.word	0x019f800c
 800d244:	feeefffc 	.word	0xfeeefffc

0800d248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b086      	sub	sp, #24
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d252:	2300      	movs	r3, #0
 800d254:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d101      	bne.n	800d260 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d25c:	2301      	movs	r3, #1
 800d25e:	e11e      	b.n	800d49e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d260:	4b91      	ldr	r3, [pc, #580]	@ (800d4a8 <HAL_RCC_ClockConfig+0x260>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f003 030f 	and.w	r3, r3, #15
 800d268:	683a      	ldr	r2, [r7, #0]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d910      	bls.n	800d290 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d26e:	4b8e      	ldr	r3, [pc, #568]	@ (800d4a8 <HAL_RCC_ClockConfig+0x260>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f023 020f 	bic.w	r2, r3, #15
 800d276:	498c      	ldr	r1, [pc, #560]	@ (800d4a8 <HAL_RCC_ClockConfig+0x260>)
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	4313      	orrs	r3, r2
 800d27c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d27e:	4b8a      	ldr	r3, [pc, #552]	@ (800d4a8 <HAL_RCC_ClockConfig+0x260>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f003 030f 	and.w	r3, r3, #15
 800d286:	683a      	ldr	r2, [r7, #0]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d001      	beq.n	800d290 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d28c:	2301      	movs	r3, #1
 800d28e:	e106      	b.n	800d49e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f003 0301 	and.w	r3, r3, #1
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d073      	beq.n	800d384 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	2b03      	cmp	r3, #3
 800d2a2:	d129      	bne.n	800d2f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d2a4:	4b81      	ldr	r3, [pc, #516]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d101      	bne.n	800d2b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e0f4      	b.n	800d49e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d2b4:	f000 f99e 	bl	800d5f4 <RCC_GetSysClockFreqFromPLLSource>
 800d2b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	4a7c      	ldr	r2, [pc, #496]	@ (800d4b0 <HAL_RCC_ClockConfig+0x268>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d93f      	bls.n	800d342 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d2c2:	4b7a      	ldr	r3, [pc, #488]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d2c4:	689b      	ldr	r3, [r3, #8]
 800d2c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d009      	beq.n	800d2e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d033      	beq.n	800d342 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d12f      	bne.n	800d342 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d2e2:	4b72      	ldr	r3, [pc, #456]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d2ea:	4a70      	ldr	r2, [pc, #448]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d2ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d2f2:	2380      	movs	r3, #128	@ 0x80
 800d2f4:	617b      	str	r3, [r7, #20]
 800d2f6:	e024      	b.n	800d342 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	2b02      	cmp	r3, #2
 800d2fe:	d107      	bne.n	800d310 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d300:	4b6a      	ldr	r3, [pc, #424]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d109      	bne.n	800d320 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d30c:	2301      	movs	r3, #1
 800d30e:	e0c6      	b.n	800d49e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d310:	4b66      	ldr	r3, [pc, #408]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d101      	bne.n	800d320 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d31c:	2301      	movs	r3, #1
 800d31e:	e0be      	b.n	800d49e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d320:	f000 f8ce 	bl	800d4c0 <HAL_RCC_GetSysClockFreq>
 800d324:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	4a61      	ldr	r2, [pc, #388]	@ (800d4b0 <HAL_RCC_ClockConfig+0x268>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d909      	bls.n	800d342 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d32e:	4b5f      	ldr	r3, [pc, #380]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d330:	689b      	ldr	r3, [r3, #8]
 800d332:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d336:	4a5d      	ldr	r2, [pc, #372]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d33c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d33e:	2380      	movs	r3, #128	@ 0x80
 800d340:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d342:	4b5a      	ldr	r3, [pc, #360]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	f023 0203 	bic.w	r2, r3, #3
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	4957      	ldr	r1, [pc, #348]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d350:	4313      	orrs	r3, r2
 800d352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d354:	f7fd f908 	bl	800a568 <HAL_GetTick>
 800d358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d35a:	e00a      	b.n	800d372 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d35c:	f7fd f904 	bl	800a568 <HAL_GetTick>
 800d360:	4602      	mov	r2, r0
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	1ad3      	subs	r3, r2, r3
 800d366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d901      	bls.n	800d372 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d36e:	2303      	movs	r3, #3
 800d370:	e095      	b.n	800d49e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d372:	4b4e      	ldr	r3, [pc, #312]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d374:	689b      	ldr	r3, [r3, #8]
 800d376:	f003 020c 	and.w	r2, r3, #12
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	429a      	cmp	r2, r3
 800d382:	d1eb      	bne.n	800d35c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f003 0302 	and.w	r3, r3, #2
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d023      	beq.n	800d3d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f003 0304 	and.w	r3, r3, #4
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d005      	beq.n	800d3a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d39c:	4b43      	ldr	r3, [pc, #268]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d39e:	689b      	ldr	r3, [r3, #8]
 800d3a0:	4a42      	ldr	r2, [pc, #264]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d3a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d3a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f003 0308 	and.w	r3, r3, #8
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d007      	beq.n	800d3c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d3b4:	4b3d      	ldr	r3, [pc, #244]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d3bc:	4a3b      	ldr	r2, [pc, #236]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d3be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d3c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d3c4:	4b39      	ldr	r3, [pc, #228]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d3c6:	689b      	ldr	r3, [r3, #8]
 800d3c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	689b      	ldr	r3, [r3, #8]
 800d3d0:	4936      	ldr	r1, [pc, #216]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d3d2:	4313      	orrs	r3, r2
 800d3d4:	608b      	str	r3, [r1, #8]
 800d3d6:	e008      	b.n	800d3ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	2b80      	cmp	r3, #128	@ 0x80
 800d3dc:	d105      	bne.n	800d3ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d3de:	4b33      	ldr	r3, [pc, #204]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d3e0:	689b      	ldr	r3, [r3, #8]
 800d3e2:	4a32      	ldr	r2, [pc, #200]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d3e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d3e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d3ea:	4b2f      	ldr	r3, [pc, #188]	@ (800d4a8 <HAL_RCC_ClockConfig+0x260>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f003 030f 	and.w	r3, r3, #15
 800d3f2:	683a      	ldr	r2, [r7, #0]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d21d      	bcs.n	800d434 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d3f8:	4b2b      	ldr	r3, [pc, #172]	@ (800d4a8 <HAL_RCC_ClockConfig+0x260>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f023 020f 	bic.w	r2, r3, #15
 800d400:	4929      	ldr	r1, [pc, #164]	@ (800d4a8 <HAL_RCC_ClockConfig+0x260>)
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	4313      	orrs	r3, r2
 800d406:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d408:	f7fd f8ae 	bl	800a568 <HAL_GetTick>
 800d40c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d40e:	e00a      	b.n	800d426 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d410:	f7fd f8aa 	bl	800a568 <HAL_GetTick>
 800d414:	4602      	mov	r2, r0
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	1ad3      	subs	r3, r2, r3
 800d41a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d41e:	4293      	cmp	r3, r2
 800d420:	d901      	bls.n	800d426 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d422:	2303      	movs	r3, #3
 800d424:	e03b      	b.n	800d49e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d426:	4b20      	ldr	r3, [pc, #128]	@ (800d4a8 <HAL_RCC_ClockConfig+0x260>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f003 030f 	and.w	r3, r3, #15
 800d42e:	683a      	ldr	r2, [r7, #0]
 800d430:	429a      	cmp	r2, r3
 800d432:	d1ed      	bne.n	800d410 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f003 0304 	and.w	r3, r3, #4
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d008      	beq.n	800d452 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d440:	4b1a      	ldr	r3, [pc, #104]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	68db      	ldr	r3, [r3, #12]
 800d44c:	4917      	ldr	r1, [pc, #92]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d44e:	4313      	orrs	r3, r2
 800d450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f003 0308 	and.w	r3, r3, #8
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d009      	beq.n	800d472 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d45e:	4b13      	ldr	r3, [pc, #76]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	691b      	ldr	r3, [r3, #16]
 800d46a:	00db      	lsls	r3, r3, #3
 800d46c:	490f      	ldr	r1, [pc, #60]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d46e:	4313      	orrs	r3, r2
 800d470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d472:	f000 f825 	bl	800d4c0 <HAL_RCC_GetSysClockFreq>
 800d476:	4602      	mov	r2, r0
 800d478:	4b0c      	ldr	r3, [pc, #48]	@ (800d4ac <HAL_RCC_ClockConfig+0x264>)
 800d47a:	689b      	ldr	r3, [r3, #8]
 800d47c:	091b      	lsrs	r3, r3, #4
 800d47e:	f003 030f 	and.w	r3, r3, #15
 800d482:	490c      	ldr	r1, [pc, #48]	@ (800d4b4 <HAL_RCC_ClockConfig+0x26c>)
 800d484:	5ccb      	ldrb	r3, [r1, r3]
 800d486:	f003 031f 	and.w	r3, r3, #31
 800d48a:	fa22 f303 	lsr.w	r3, r2, r3
 800d48e:	4a0a      	ldr	r2, [pc, #40]	@ (800d4b8 <HAL_RCC_ClockConfig+0x270>)
 800d490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d492:	4b0a      	ldr	r3, [pc, #40]	@ (800d4bc <HAL_RCC_ClockConfig+0x274>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	4618      	mov	r0, r3
 800d498:	f7fd f81a 	bl	800a4d0 <HAL_InitTick>
 800d49c:	4603      	mov	r3, r0
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3718      	adds	r7, #24
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	40022000 	.word	0x40022000
 800d4ac:	40021000 	.word	0x40021000
 800d4b0:	04c4b400 	.word	0x04c4b400
 800d4b4:	08014570 	.word	0x08014570
 800d4b8:	20000338 	.word	0x20000338
 800d4bc:	2000033c 	.word	0x2000033c

0800d4c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b087      	sub	sp, #28
 800d4c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d4c6:	4b2c      	ldr	r3, [pc, #176]	@ (800d578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d4c8:	689b      	ldr	r3, [r3, #8]
 800d4ca:	f003 030c 	and.w	r3, r3, #12
 800d4ce:	2b04      	cmp	r3, #4
 800d4d0:	d102      	bne.n	800d4d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d4d2:	4b2a      	ldr	r3, [pc, #168]	@ (800d57c <HAL_RCC_GetSysClockFreq+0xbc>)
 800d4d4:	613b      	str	r3, [r7, #16]
 800d4d6:	e047      	b.n	800d568 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d4d8:	4b27      	ldr	r3, [pc, #156]	@ (800d578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d4da:	689b      	ldr	r3, [r3, #8]
 800d4dc:	f003 030c 	and.w	r3, r3, #12
 800d4e0:	2b08      	cmp	r3, #8
 800d4e2:	d102      	bne.n	800d4ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d4e4:	4b26      	ldr	r3, [pc, #152]	@ (800d580 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d4e6:	613b      	str	r3, [r7, #16]
 800d4e8:	e03e      	b.n	800d568 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d4ea:	4b23      	ldr	r3, [pc, #140]	@ (800d578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d4ec:	689b      	ldr	r3, [r3, #8]
 800d4ee:	f003 030c 	and.w	r3, r3, #12
 800d4f2:	2b0c      	cmp	r3, #12
 800d4f4:	d136      	bne.n	800d564 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d4f6:	4b20      	ldr	r3, [pc, #128]	@ (800d578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d4f8:	68db      	ldr	r3, [r3, #12]
 800d4fa:	f003 0303 	and.w	r3, r3, #3
 800d4fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d500:	4b1d      	ldr	r3, [pc, #116]	@ (800d578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	091b      	lsrs	r3, r3, #4
 800d506:	f003 030f 	and.w	r3, r3, #15
 800d50a:	3301      	adds	r3, #1
 800d50c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2b03      	cmp	r3, #3
 800d512:	d10c      	bne.n	800d52e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d514:	4a1a      	ldr	r2, [pc, #104]	@ (800d580 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	fbb2 f3f3 	udiv	r3, r2, r3
 800d51c:	4a16      	ldr	r2, [pc, #88]	@ (800d578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d51e:	68d2      	ldr	r2, [r2, #12]
 800d520:	0a12      	lsrs	r2, r2, #8
 800d522:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d526:	fb02 f303 	mul.w	r3, r2, r3
 800d52a:	617b      	str	r3, [r7, #20]
      break;
 800d52c:	e00c      	b.n	800d548 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d52e:	4a13      	ldr	r2, [pc, #76]	@ (800d57c <HAL_RCC_GetSysClockFreq+0xbc>)
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	fbb2 f3f3 	udiv	r3, r2, r3
 800d536:	4a10      	ldr	r2, [pc, #64]	@ (800d578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d538:	68d2      	ldr	r2, [r2, #12]
 800d53a:	0a12      	lsrs	r2, r2, #8
 800d53c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d540:	fb02 f303 	mul.w	r3, r2, r3
 800d544:	617b      	str	r3, [r7, #20]
      break;
 800d546:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d548:	4b0b      	ldr	r3, [pc, #44]	@ (800d578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d54a:	68db      	ldr	r3, [r3, #12]
 800d54c:	0e5b      	lsrs	r3, r3, #25
 800d54e:	f003 0303 	and.w	r3, r3, #3
 800d552:	3301      	adds	r3, #1
 800d554:	005b      	lsls	r3, r3, #1
 800d556:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d558:	697a      	ldr	r2, [r7, #20]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d560:	613b      	str	r3, [r7, #16]
 800d562:	e001      	b.n	800d568 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d564:	2300      	movs	r3, #0
 800d566:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d568:	693b      	ldr	r3, [r7, #16]
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	371c      	adds	r7, #28
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	40021000 	.word	0x40021000
 800d57c:	00f42400 	.word	0x00f42400
 800d580:	016e3600 	.word	0x016e3600

0800d584 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d584:	b480      	push	{r7}
 800d586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d588:	4b03      	ldr	r3, [pc, #12]	@ (800d598 <HAL_RCC_GetHCLKFreq+0x14>)
 800d58a:	681b      	ldr	r3, [r3, #0]
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr
 800d596:	bf00      	nop
 800d598:	20000338 	.word	0x20000338

0800d59c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d5a0:	f7ff fff0 	bl	800d584 <HAL_RCC_GetHCLKFreq>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	4b06      	ldr	r3, [pc, #24]	@ (800d5c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	0a1b      	lsrs	r3, r3, #8
 800d5ac:	f003 0307 	and.w	r3, r3, #7
 800d5b0:	4904      	ldr	r1, [pc, #16]	@ (800d5c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d5b2:	5ccb      	ldrb	r3, [r1, r3]
 800d5b4:	f003 031f 	and.w	r3, r3, #31
 800d5b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	40021000 	.word	0x40021000
 800d5c4:	08014580 	.word	0x08014580

0800d5c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d5cc:	f7ff ffda 	bl	800d584 <HAL_RCC_GetHCLKFreq>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	4b06      	ldr	r3, [pc, #24]	@ (800d5ec <HAL_RCC_GetPCLK2Freq+0x24>)
 800d5d4:	689b      	ldr	r3, [r3, #8]
 800d5d6:	0adb      	lsrs	r3, r3, #11
 800d5d8:	f003 0307 	and.w	r3, r3, #7
 800d5dc:	4904      	ldr	r1, [pc, #16]	@ (800d5f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d5de:	5ccb      	ldrb	r3, [r1, r3]
 800d5e0:	f003 031f 	and.w	r3, r3, #31
 800d5e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	40021000 	.word	0x40021000
 800d5f0:	08014580 	.word	0x08014580

0800d5f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b087      	sub	sp, #28
 800d5f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d5fa:	4b1e      	ldr	r3, [pc, #120]	@ (800d674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	f003 0303 	and.w	r3, r3, #3
 800d602:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d604:	4b1b      	ldr	r3, [pc, #108]	@ (800d674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d606:	68db      	ldr	r3, [r3, #12]
 800d608:	091b      	lsrs	r3, r3, #4
 800d60a:	f003 030f 	and.w	r3, r3, #15
 800d60e:	3301      	adds	r3, #1
 800d610:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	2b03      	cmp	r3, #3
 800d616:	d10c      	bne.n	800d632 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d618:	4a17      	ldr	r2, [pc, #92]	@ (800d678 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d620:	4a14      	ldr	r2, [pc, #80]	@ (800d674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d622:	68d2      	ldr	r2, [r2, #12]
 800d624:	0a12      	lsrs	r2, r2, #8
 800d626:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d62a:	fb02 f303 	mul.w	r3, r2, r3
 800d62e:	617b      	str	r3, [r7, #20]
    break;
 800d630:	e00c      	b.n	800d64c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d632:	4a12      	ldr	r2, [pc, #72]	@ (800d67c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	fbb2 f3f3 	udiv	r3, r2, r3
 800d63a:	4a0e      	ldr	r2, [pc, #56]	@ (800d674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d63c:	68d2      	ldr	r2, [r2, #12]
 800d63e:	0a12      	lsrs	r2, r2, #8
 800d640:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d644:	fb02 f303 	mul.w	r3, r2, r3
 800d648:	617b      	str	r3, [r7, #20]
    break;
 800d64a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d64c:	4b09      	ldr	r3, [pc, #36]	@ (800d674 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d64e:	68db      	ldr	r3, [r3, #12]
 800d650:	0e5b      	lsrs	r3, r3, #25
 800d652:	f003 0303 	and.w	r3, r3, #3
 800d656:	3301      	adds	r3, #1
 800d658:	005b      	lsls	r3, r3, #1
 800d65a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d65c:	697a      	ldr	r2, [r7, #20]
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	fbb2 f3f3 	udiv	r3, r2, r3
 800d664:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d666:	687b      	ldr	r3, [r7, #4]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	371c      	adds	r7, #28
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr
 800d674:	40021000 	.word	0x40021000
 800d678:	016e3600 	.word	0x016e3600
 800d67c:	00f42400 	.word	0x00f42400

0800d680 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b086      	sub	sp, #24
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d688:	2300      	movs	r3, #0
 800d68a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d68c:	2300      	movs	r3, #0
 800d68e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d698:	2b00      	cmp	r3, #0
 800d69a:	f000 8098 	beq.w	800d7ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d6a2:	4b43      	ldr	r3, [pc, #268]	@ (800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d6a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d10d      	bne.n	800d6ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d6ae:	4b40      	ldr	r3, [pc, #256]	@ (800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d6b2:	4a3f      	ldr	r2, [pc, #252]	@ (800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d6b8:	6593      	str	r3, [r2, #88]	@ 0x58
 800d6ba:	4b3d      	ldr	r3, [pc, #244]	@ (800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d6be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d6c2:	60bb      	str	r3, [r7, #8]
 800d6c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d6ca:	4b3a      	ldr	r3, [pc, #232]	@ (800d7b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a39      	ldr	r2, [pc, #228]	@ (800d7b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d6d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d6d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d6d6:	f7fc ff47 	bl	800a568 <HAL_GetTick>
 800d6da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d6dc:	e009      	b.n	800d6f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d6de:	f7fc ff43 	bl	800a568 <HAL_GetTick>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	1ad3      	subs	r3, r2, r3
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d902      	bls.n	800d6f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d6ec:	2303      	movs	r3, #3
 800d6ee:	74fb      	strb	r3, [r7, #19]
        break;
 800d6f0:	e005      	b.n	800d6fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d6f2:	4b30      	ldr	r3, [pc, #192]	@ (800d7b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d0ef      	beq.n	800d6de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d6fe:	7cfb      	ldrb	r3, [r7, #19]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d159      	bne.n	800d7b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d704:	4b2a      	ldr	r3, [pc, #168]	@ (800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d70a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d70e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d01e      	beq.n	800d754 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d71a:	697a      	ldr	r2, [r7, #20]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d019      	beq.n	800d754 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d720:	4b23      	ldr	r3, [pc, #140]	@ (800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d726:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d72a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d72c:	4b20      	ldr	r3, [pc, #128]	@ (800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d732:	4a1f      	ldr	r2, [pc, #124]	@ (800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d73c:	4b1c      	ldr	r3, [pc, #112]	@ (800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d73e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d742:	4a1b      	ldr	r2, [pc, #108]	@ (800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d744:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d748:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d74c:	4a18      	ldr	r2, [pc, #96]	@ (800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	f003 0301 	and.w	r3, r3, #1
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d016      	beq.n	800d78c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d75e:	f7fc ff03 	bl	800a568 <HAL_GetTick>
 800d762:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d764:	e00b      	b.n	800d77e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d766:	f7fc feff 	bl	800a568 <HAL_GetTick>
 800d76a:	4602      	mov	r2, r0
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	1ad3      	subs	r3, r2, r3
 800d770:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d774:	4293      	cmp	r3, r2
 800d776:	d902      	bls.n	800d77e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d778:	2303      	movs	r3, #3
 800d77a:	74fb      	strb	r3, [r7, #19]
            break;
 800d77c:	e006      	b.n	800d78c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d77e:	4b0c      	ldr	r3, [pc, #48]	@ (800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d784:	f003 0302 	and.w	r3, r3, #2
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d0ec      	beq.n	800d766 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d78c:	7cfb      	ldrb	r3, [r7, #19]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d10b      	bne.n	800d7aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d792:	4b07      	ldr	r3, [pc, #28]	@ (800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d798:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7a0:	4903      	ldr	r1, [pc, #12]	@ (800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800d7a8:	e008      	b.n	800d7bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d7aa:	7cfb      	ldrb	r3, [r7, #19]
 800d7ac:	74bb      	strb	r3, [r7, #18]
 800d7ae:	e005      	b.n	800d7bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d7b0:	40021000 	.word	0x40021000
 800d7b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7b8:	7cfb      	ldrb	r3, [r7, #19]
 800d7ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d7bc:	7c7b      	ldrb	r3, [r7, #17]
 800d7be:	2b01      	cmp	r3, #1
 800d7c0:	d105      	bne.n	800d7ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d7c2:	4ba7      	ldr	r3, [pc, #668]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7c6:	4aa6      	ldr	r2, [pc, #664]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d7cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f003 0301 	and.w	r3, r3, #1
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d00a      	beq.n	800d7f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d7da:	4ba1      	ldr	r3, [pc, #644]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d7e0:	f023 0203 	bic.w	r2, r3, #3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	499d      	ldr	r1, [pc, #628]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f003 0302 	and.w	r3, r3, #2
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00a      	beq.n	800d812 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d7fc:	4b98      	ldr	r3, [pc, #608]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d802:	f023 020c 	bic.w	r2, r3, #12
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	689b      	ldr	r3, [r3, #8]
 800d80a:	4995      	ldr	r1, [pc, #596]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d80c:	4313      	orrs	r3, r2
 800d80e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f003 0304 	and.w	r3, r3, #4
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d00a      	beq.n	800d834 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d81e:	4b90      	ldr	r3, [pc, #576]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d824:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	498c      	ldr	r1, [pc, #560]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d82e:	4313      	orrs	r3, r2
 800d830:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f003 0308 	and.w	r3, r3, #8
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00a      	beq.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d840:	4b87      	ldr	r3, [pc, #540]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d846:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	691b      	ldr	r3, [r3, #16]
 800d84e:	4984      	ldr	r1, [pc, #528]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d850:	4313      	orrs	r3, r2
 800d852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f003 0310 	and.w	r3, r3, #16
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00a      	beq.n	800d878 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d862:	4b7f      	ldr	r3, [pc, #508]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d868:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	695b      	ldr	r3, [r3, #20]
 800d870:	497b      	ldr	r1, [pc, #492]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d872:	4313      	orrs	r3, r2
 800d874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f003 0320 	and.w	r3, r3, #32
 800d880:	2b00      	cmp	r3, #0
 800d882:	d00a      	beq.n	800d89a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d884:	4b76      	ldr	r3, [pc, #472]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d88a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	699b      	ldr	r3, [r3, #24]
 800d892:	4973      	ldr	r1, [pc, #460]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d894:	4313      	orrs	r3, r2
 800d896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d00a      	beq.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d8a6:	4b6e      	ldr	r3, [pc, #440]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	69db      	ldr	r3, [r3, #28]
 800d8b4:	496a      	ldr	r1, [pc, #424]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8b6:	4313      	orrs	r3, r2
 800d8b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d00a      	beq.n	800d8de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d8c8:	4b65      	ldr	r3, [pc, #404]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6a1b      	ldr	r3, [r3, #32]
 800d8d6:	4962      	ldr	r1, [pc, #392]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d00a      	beq.n	800d900 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d8ea:	4b5d      	ldr	r3, [pc, #372]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8f8:	4959      	ldr	r1, [pc, #356]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d00a      	beq.n	800d922 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d90c:	4b54      	ldr	r3, [pc, #336]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d90e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d912:	f023 0203 	bic.w	r2, r3, #3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d91a:	4951      	ldr	r1, [pc, #324]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d91c:	4313      	orrs	r3, r2
 800d91e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00a      	beq.n	800d944 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d92e:	4b4c      	ldr	r3, [pc, #304]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d934:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d93c:	4948      	ldr	r1, [pc, #288]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d93e:	4313      	orrs	r3, r2
 800d940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d015      	beq.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d950:	4b43      	ldr	r3, [pc, #268]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d956:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d95e:	4940      	ldr	r1, [pc, #256]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d960:	4313      	orrs	r3, r2
 800d962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d96a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d96e:	d105      	bne.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d970:	4b3b      	ldr	r3, [pc, #236]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	4a3a      	ldr	r2, [pc, #232]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d97a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d984:	2b00      	cmp	r3, #0
 800d986:	d015      	beq.n	800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d988:	4b35      	ldr	r3, [pc, #212]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d98a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d98e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d996:	4932      	ldr	r1, [pc, #200]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d998:	4313      	orrs	r3, r2
 800d99a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d9a6:	d105      	bne.n	800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d9a8:	4b2d      	ldr	r3, [pc, #180]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	4a2c      	ldr	r2, [pc, #176]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d9b2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d015      	beq.n	800d9ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d9c0:	4b27      	ldr	r3, [pc, #156]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d9c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9ce:	4924      	ldr	r1, [pc, #144]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d9de:	d105      	bne.n	800d9ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d9e0:	4b1f      	ldr	r3, [pc, #124]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	4a1e      	ldr	r2, [pc, #120]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d9ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d015      	beq.n	800da24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d9f8:	4b19      	ldr	r3, [pc, #100]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d9fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da06:	4916      	ldr	r1, [pc, #88]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da08:	4313      	orrs	r3, r2
 800da0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800da16:	d105      	bne.n	800da24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800da18:	4b11      	ldr	r3, [pc, #68]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	4a10      	ldr	r2, [pc, #64]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d019      	beq.n	800da64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800da30:	4b0b      	ldr	r3, [pc, #44]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da3e:	4908      	ldr	r1, [pc, #32]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da40:	4313      	orrs	r3, r2
 800da42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800da4e:	d109      	bne.n	800da64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800da50:	4b03      	ldr	r3, [pc, #12]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da52:	68db      	ldr	r3, [r3, #12]
 800da54:	4a02      	ldr	r2, [pc, #8]	@ (800da60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da5a:	60d3      	str	r3, [r2, #12]
 800da5c:	e002      	b.n	800da64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800da5e:	bf00      	nop
 800da60:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d015      	beq.n	800da9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800da70:	4b29      	ldr	r3, [pc, #164]	@ (800db18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da76:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da7e:	4926      	ldr	r1, [pc, #152]	@ (800db18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da80:	4313      	orrs	r3, r2
 800da82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da8e:	d105      	bne.n	800da9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800da90:	4b21      	ldr	r3, [pc, #132]	@ (800db18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da92:	68db      	ldr	r3, [r3, #12]
 800da94:	4a20      	ldr	r2, [pc, #128]	@ (800db18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800da96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800da9a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d015      	beq.n	800dad4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800daa8:	4b1b      	ldr	r3, [pc, #108]	@ (800db18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800daaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800daae:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dab6:	4918      	ldr	r1, [pc, #96]	@ (800db18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dab8:	4313      	orrs	r3, r2
 800daba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dac6:	d105      	bne.n	800dad4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800dac8:	4b13      	ldr	r3, [pc, #76]	@ (800db18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	4a12      	ldr	r2, [pc, #72]	@ (800db18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dad2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d015      	beq.n	800db0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800dae0:	4b0d      	ldr	r3, [pc, #52]	@ (800db18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dae2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dae6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800daee:	490a      	ldr	r1, [pc, #40]	@ (800db18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800daf0:	4313      	orrs	r3, r2
 800daf2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dafa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dafe:	d105      	bne.n	800db0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800db00:	4b05      	ldr	r3, [pc, #20]	@ (800db18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800db02:	68db      	ldr	r3, [r3, #12]
 800db04:	4a04      	ldr	r2, [pc, #16]	@ (800db18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800db06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800db0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800db0c:	7cbb      	ldrb	r3, [r7, #18]
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3718      	adds	r7, #24
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	40021000 	.word	0x40021000

0800db1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d101      	bne.n	800db2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800db2a:	2301      	movs	r3, #1
 800db2c:	e054      	b.n	800dbd8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db34:	b2db      	uxtb	r3, r3
 800db36:	2b00      	cmp	r3, #0
 800db38:	d111      	bne.n	800db5e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f001 fee2 	bl	800f90c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d102      	bne.n	800db56 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	4a23      	ldr	r2, [pc, #140]	@ (800dbe0 <HAL_TIM_Base_Init+0xc4>)
 800db54:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2202      	movs	r2, #2
 800db62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	3304      	adds	r3, #4
 800db6e:	4619      	mov	r1, r3
 800db70:	4610      	mov	r0, r2
 800db72:	f001 fa2b 	bl	800efcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2201      	movs	r2, #1
 800db7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2201      	movs	r2, #1
 800db82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2201      	movs	r2, #1
 800db8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2201      	movs	r2, #1
 800db92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2201      	movs	r2, #1
 800db9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2201      	movs	r2, #1
 800dba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2201      	movs	r2, #1
 800dbba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2201      	movs	r2, #1
 800dbd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dbd6:	2300      	movs	r3, #0
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3708      	adds	r7, #8
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	08009d91 	.word	0x08009d91

0800dbe4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b085      	sub	sp, #20
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d001      	beq.n	800dbfc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e04c      	b.n	800dc96 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2202      	movs	r2, #2
 800dc00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a26      	ldr	r2, [pc, #152]	@ (800dca4 <HAL_TIM_Base_Start+0xc0>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d022      	beq.n	800dc54 <HAL_TIM_Base_Start+0x70>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc16:	d01d      	beq.n	800dc54 <HAL_TIM_Base_Start+0x70>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a22      	ldr	r2, [pc, #136]	@ (800dca8 <HAL_TIM_Base_Start+0xc4>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d018      	beq.n	800dc54 <HAL_TIM_Base_Start+0x70>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4a21      	ldr	r2, [pc, #132]	@ (800dcac <HAL_TIM_Base_Start+0xc8>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d013      	beq.n	800dc54 <HAL_TIM_Base_Start+0x70>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4a1f      	ldr	r2, [pc, #124]	@ (800dcb0 <HAL_TIM_Base_Start+0xcc>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d00e      	beq.n	800dc54 <HAL_TIM_Base_Start+0x70>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4a1e      	ldr	r2, [pc, #120]	@ (800dcb4 <HAL_TIM_Base_Start+0xd0>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d009      	beq.n	800dc54 <HAL_TIM_Base_Start+0x70>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4a1c      	ldr	r2, [pc, #112]	@ (800dcb8 <HAL_TIM_Base_Start+0xd4>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d004      	beq.n	800dc54 <HAL_TIM_Base_Start+0x70>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4a1b      	ldr	r2, [pc, #108]	@ (800dcbc <HAL_TIM_Base_Start+0xd8>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d115      	bne.n	800dc80 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	689a      	ldr	r2, [r3, #8]
 800dc5a:	4b19      	ldr	r3, [pc, #100]	@ (800dcc0 <HAL_TIM_Base_Start+0xdc>)
 800dc5c:	4013      	ands	r3, r2
 800dc5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2b06      	cmp	r3, #6
 800dc64:	d015      	beq.n	800dc92 <HAL_TIM_Base_Start+0xae>
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc6c:	d011      	beq.n	800dc92 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	681a      	ldr	r2, [r3, #0]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f042 0201 	orr.w	r2, r2, #1
 800dc7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc7e:	e008      	b.n	800dc92 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f042 0201 	orr.w	r2, r2, #1
 800dc8e:	601a      	str	r2, [r3, #0]
 800dc90:	e000      	b.n	800dc94 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dc94:	2300      	movs	r3, #0
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3714      	adds	r7, #20
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr
 800dca2:	bf00      	nop
 800dca4:	40012c00 	.word	0x40012c00
 800dca8:	40000400 	.word	0x40000400
 800dcac:	40000800 	.word	0x40000800
 800dcb0:	40000c00 	.word	0x40000c00
 800dcb4:	40013400 	.word	0x40013400
 800dcb8:	40014000 	.word	0x40014000
 800dcbc:	40015000 	.word	0x40015000
 800dcc0:	00010007 	.word	0x00010007

0800dcc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b085      	sub	sp, #20
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d001      	beq.n	800dcdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	e054      	b.n	800dd86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2202      	movs	r2, #2
 800dce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	68da      	ldr	r2, [r3, #12]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f042 0201 	orr.w	r2, r2, #1
 800dcf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	4a26      	ldr	r2, [pc, #152]	@ (800dd94 <HAL_TIM_Base_Start_IT+0xd0>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d022      	beq.n	800dd44 <HAL_TIM_Base_Start_IT+0x80>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd06:	d01d      	beq.n	800dd44 <HAL_TIM_Base_Start_IT+0x80>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	4a22      	ldr	r2, [pc, #136]	@ (800dd98 <HAL_TIM_Base_Start_IT+0xd4>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d018      	beq.n	800dd44 <HAL_TIM_Base_Start_IT+0x80>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	4a21      	ldr	r2, [pc, #132]	@ (800dd9c <HAL_TIM_Base_Start_IT+0xd8>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d013      	beq.n	800dd44 <HAL_TIM_Base_Start_IT+0x80>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4a1f      	ldr	r2, [pc, #124]	@ (800dda0 <HAL_TIM_Base_Start_IT+0xdc>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d00e      	beq.n	800dd44 <HAL_TIM_Base_Start_IT+0x80>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	4a1e      	ldr	r2, [pc, #120]	@ (800dda4 <HAL_TIM_Base_Start_IT+0xe0>)
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d009      	beq.n	800dd44 <HAL_TIM_Base_Start_IT+0x80>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4a1c      	ldr	r2, [pc, #112]	@ (800dda8 <HAL_TIM_Base_Start_IT+0xe4>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d004      	beq.n	800dd44 <HAL_TIM_Base_Start_IT+0x80>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	4a1b      	ldr	r2, [pc, #108]	@ (800ddac <HAL_TIM_Base_Start_IT+0xe8>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d115      	bne.n	800dd70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	689a      	ldr	r2, [r3, #8]
 800dd4a:	4b19      	ldr	r3, [pc, #100]	@ (800ddb0 <HAL_TIM_Base_Start_IT+0xec>)
 800dd4c:	4013      	ands	r3, r2
 800dd4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2b06      	cmp	r3, #6
 800dd54:	d015      	beq.n	800dd82 <HAL_TIM_Base_Start_IT+0xbe>
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd5c:	d011      	beq.n	800dd82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	681a      	ldr	r2, [r3, #0]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f042 0201 	orr.w	r2, r2, #1
 800dd6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd6e:	e008      	b.n	800dd82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f042 0201 	orr.w	r2, r2, #1
 800dd7e:	601a      	str	r2, [r3, #0]
 800dd80:	e000      	b.n	800dd84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dd84:	2300      	movs	r3, #0
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3714      	adds	r7, #20
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr
 800dd92:	bf00      	nop
 800dd94:	40012c00 	.word	0x40012c00
 800dd98:	40000400 	.word	0x40000400
 800dd9c:	40000800 	.word	0x40000800
 800dda0:	40000c00 	.word	0x40000c00
 800dda4:	40013400 	.word	0x40013400
 800dda8:	40014000 	.word	0x40014000
 800ddac:	40015000 	.word	0x40015000
 800ddb0:	00010007 	.word	0x00010007

0800ddb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d101      	bne.n	800ddc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	e054      	b.n	800de70 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d111      	bne.n	800ddf6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f001 fd96 	bl	800f90c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d102      	bne.n	800ddee <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	4a23      	ldr	r2, [pc, #140]	@ (800de78 <HAL_TIM_PWM_Init+0xc4>)
 800ddec:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2202      	movs	r2, #2
 800ddfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681a      	ldr	r2, [r3, #0]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	3304      	adds	r3, #4
 800de06:	4619      	mov	r1, r3
 800de08:	4610      	mov	r0, r2
 800de0a:	f001 f8df 	bl	800efcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2201      	movs	r2, #1
 800de12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2201      	movs	r2, #1
 800de1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2201      	movs	r2, #1
 800de22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2201      	movs	r2, #1
 800de2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2201      	movs	r2, #1
 800de32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2201      	movs	r2, #1
 800de3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2201      	movs	r2, #1
 800de42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2201      	movs	r2, #1
 800de4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2201      	movs	r2, #1
 800de52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2201      	movs	r2, #1
 800de5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2201      	movs	r2, #1
 800de62:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2201      	movs	r2, #1
 800de6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800de6e:	2300      	movs	r3, #0
}
 800de70:	4618      	mov	r0, r3
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	08009d45 	.word	0x08009d45

0800de7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b084      	sub	sp, #16
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d109      	bne.n	800dea0 <HAL_TIM_PWM_Start+0x24>
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800de92:	b2db      	uxtb	r3, r3
 800de94:	2b01      	cmp	r3, #1
 800de96:	bf14      	ite	ne
 800de98:	2301      	movne	r3, #1
 800de9a:	2300      	moveq	r3, #0
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	e03c      	b.n	800df1a <HAL_TIM_PWM_Start+0x9e>
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	2b04      	cmp	r3, #4
 800dea4:	d109      	bne.n	800deba <HAL_TIM_PWM_Start+0x3e>
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800deac:	b2db      	uxtb	r3, r3
 800deae:	2b01      	cmp	r3, #1
 800deb0:	bf14      	ite	ne
 800deb2:	2301      	movne	r3, #1
 800deb4:	2300      	moveq	r3, #0
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	e02f      	b.n	800df1a <HAL_TIM_PWM_Start+0x9e>
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	2b08      	cmp	r3, #8
 800debe:	d109      	bne.n	800ded4 <HAL_TIM_PWM_Start+0x58>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dec6:	b2db      	uxtb	r3, r3
 800dec8:	2b01      	cmp	r3, #1
 800deca:	bf14      	ite	ne
 800decc:	2301      	movne	r3, #1
 800dece:	2300      	moveq	r3, #0
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	e022      	b.n	800df1a <HAL_TIM_PWM_Start+0x9e>
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	2b0c      	cmp	r3, #12
 800ded8:	d109      	bne.n	800deee <HAL_TIM_PWM_Start+0x72>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	bf14      	ite	ne
 800dee6:	2301      	movne	r3, #1
 800dee8:	2300      	moveq	r3, #0
 800deea:	b2db      	uxtb	r3, r3
 800deec:	e015      	b.n	800df1a <HAL_TIM_PWM_Start+0x9e>
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	2b10      	cmp	r3, #16
 800def2:	d109      	bne.n	800df08 <HAL_TIM_PWM_Start+0x8c>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800defa:	b2db      	uxtb	r3, r3
 800defc:	2b01      	cmp	r3, #1
 800defe:	bf14      	ite	ne
 800df00:	2301      	movne	r3, #1
 800df02:	2300      	moveq	r3, #0
 800df04:	b2db      	uxtb	r3, r3
 800df06:	e008      	b.n	800df1a <HAL_TIM_PWM_Start+0x9e>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	2b01      	cmp	r3, #1
 800df12:	bf14      	ite	ne
 800df14:	2301      	movne	r3, #1
 800df16:	2300      	moveq	r3, #0
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d001      	beq.n	800df22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800df1e:	2301      	movs	r3, #1
 800df20:	e0a6      	b.n	800e070 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d104      	bne.n	800df32 <HAL_TIM_PWM_Start+0xb6>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2202      	movs	r2, #2
 800df2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800df30:	e023      	b.n	800df7a <HAL_TIM_PWM_Start+0xfe>
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	2b04      	cmp	r3, #4
 800df36:	d104      	bne.n	800df42 <HAL_TIM_PWM_Start+0xc6>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2202      	movs	r2, #2
 800df3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800df40:	e01b      	b.n	800df7a <HAL_TIM_PWM_Start+0xfe>
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	2b08      	cmp	r3, #8
 800df46:	d104      	bne.n	800df52 <HAL_TIM_PWM_Start+0xd6>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2202      	movs	r2, #2
 800df4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800df50:	e013      	b.n	800df7a <HAL_TIM_PWM_Start+0xfe>
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	2b0c      	cmp	r3, #12
 800df56:	d104      	bne.n	800df62 <HAL_TIM_PWM_Start+0xe6>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2202      	movs	r2, #2
 800df5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800df60:	e00b      	b.n	800df7a <HAL_TIM_PWM_Start+0xfe>
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	2b10      	cmp	r3, #16
 800df66:	d104      	bne.n	800df72 <HAL_TIM_PWM_Start+0xf6>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2202      	movs	r2, #2
 800df6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800df70:	e003      	b.n	800df7a <HAL_TIM_PWM_Start+0xfe>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2202      	movs	r2, #2
 800df76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	2201      	movs	r2, #1
 800df80:	6839      	ldr	r1, [r7, #0]
 800df82:	4618      	mov	r0, r3
 800df84:	f001 fc9c 	bl	800f8c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a3a      	ldr	r2, [pc, #232]	@ (800e078 <HAL_TIM_PWM_Start+0x1fc>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d018      	beq.n	800dfc4 <HAL_TIM_PWM_Start+0x148>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4a39      	ldr	r2, [pc, #228]	@ (800e07c <HAL_TIM_PWM_Start+0x200>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d013      	beq.n	800dfc4 <HAL_TIM_PWM_Start+0x148>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4a37      	ldr	r2, [pc, #220]	@ (800e080 <HAL_TIM_PWM_Start+0x204>)
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d00e      	beq.n	800dfc4 <HAL_TIM_PWM_Start+0x148>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a36      	ldr	r2, [pc, #216]	@ (800e084 <HAL_TIM_PWM_Start+0x208>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d009      	beq.n	800dfc4 <HAL_TIM_PWM_Start+0x148>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4a34      	ldr	r2, [pc, #208]	@ (800e088 <HAL_TIM_PWM_Start+0x20c>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d004      	beq.n	800dfc4 <HAL_TIM_PWM_Start+0x148>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4a33      	ldr	r2, [pc, #204]	@ (800e08c <HAL_TIM_PWM_Start+0x210>)
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d101      	bne.n	800dfc8 <HAL_TIM_PWM_Start+0x14c>
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	e000      	b.n	800dfca <HAL_TIM_PWM_Start+0x14e>
 800dfc8:	2300      	movs	r3, #0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d007      	beq.n	800dfde <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800dfdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	4a25      	ldr	r2, [pc, #148]	@ (800e078 <HAL_TIM_PWM_Start+0x1fc>)
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d022      	beq.n	800e02e <HAL_TIM_PWM_Start+0x1b2>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dff0:	d01d      	beq.n	800e02e <HAL_TIM_PWM_Start+0x1b2>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4a26      	ldr	r2, [pc, #152]	@ (800e090 <HAL_TIM_PWM_Start+0x214>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d018      	beq.n	800e02e <HAL_TIM_PWM_Start+0x1b2>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4a24      	ldr	r2, [pc, #144]	@ (800e094 <HAL_TIM_PWM_Start+0x218>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d013      	beq.n	800e02e <HAL_TIM_PWM_Start+0x1b2>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4a23      	ldr	r2, [pc, #140]	@ (800e098 <HAL_TIM_PWM_Start+0x21c>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d00e      	beq.n	800e02e <HAL_TIM_PWM_Start+0x1b2>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4a19      	ldr	r2, [pc, #100]	@ (800e07c <HAL_TIM_PWM_Start+0x200>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d009      	beq.n	800e02e <HAL_TIM_PWM_Start+0x1b2>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4a18      	ldr	r2, [pc, #96]	@ (800e080 <HAL_TIM_PWM_Start+0x204>)
 800e020:	4293      	cmp	r3, r2
 800e022:	d004      	beq.n	800e02e <HAL_TIM_PWM_Start+0x1b2>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4a18      	ldr	r2, [pc, #96]	@ (800e08c <HAL_TIM_PWM_Start+0x210>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d115      	bne.n	800e05a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	689a      	ldr	r2, [r3, #8]
 800e034:	4b19      	ldr	r3, [pc, #100]	@ (800e09c <HAL_TIM_PWM_Start+0x220>)
 800e036:	4013      	ands	r3, r2
 800e038:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2b06      	cmp	r3, #6
 800e03e:	d015      	beq.n	800e06c <HAL_TIM_PWM_Start+0x1f0>
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e046:	d011      	beq.n	800e06c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f042 0201 	orr.w	r2, r2, #1
 800e056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e058:	e008      	b.n	800e06c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	681a      	ldr	r2, [r3, #0]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f042 0201 	orr.w	r2, r2, #1
 800e068:	601a      	str	r2, [r3, #0]
 800e06a:	e000      	b.n	800e06e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e06c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e06e:	2300      	movs	r3, #0
}
 800e070:	4618      	mov	r0, r3
 800e072:	3710      	adds	r7, #16
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}
 800e078:	40012c00 	.word	0x40012c00
 800e07c:	40013400 	.word	0x40013400
 800e080:	40014000 	.word	0x40014000
 800e084:	40014400 	.word	0x40014400
 800e088:	40014800 	.word	0x40014800
 800e08c:	40015000 	.word	0x40015000
 800e090:	40000400 	.word	0x40000400
 800e094:	40000800 	.word	0x40000800
 800e098:	40000c00 	.word	0x40000c00
 800e09c:	00010007 	.word	0x00010007

0800e0a0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d101      	bne.n	800e0b4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	e04c      	b.n	800e14e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d111      	bne.n	800e0e4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f001 fc1f 	bl	800f90c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d102      	bne.n	800e0dc <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	4a1f      	ldr	r2, [pc, #124]	@ (800e158 <HAL_TIM_OnePulse_Init+0xb8>)
 800e0da:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2202      	movs	r2, #2
 800e0e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681a      	ldr	r2, [r3, #0]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	3304      	adds	r3, #4
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	4610      	mov	r0, r2
 800e0f8:	f000 ff68 	bl	800efcc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f022 0208 	bic.w	r2, r2, #8
 800e10a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	6819      	ldr	r1, [r3, #0]
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	683a      	ldr	r2, [r7, #0]
 800e118:	430a      	orrs	r2, r1
 800e11a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2201      	movs	r2, #1
 800e120:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2201      	movs	r2, #1
 800e128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2201      	movs	r2, #1
 800e130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2201      	movs	r2, #1
 800e138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2201      	movs	r2, #1
 800e140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2201      	movs	r2, #1
 800e148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e14c:	2300      	movs	r3, #0
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	0800e15d 	.word	0x0800e15d

0800e15c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800e164:	bf00      	nop
 800e166:	370c      	adds	r7, #12
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e180:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e188:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e190:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e198:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e19a:	7bfb      	ldrb	r3, [r7, #15]
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d108      	bne.n	800e1b2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e1a0:	7bbb      	ldrb	r3, [r7, #14]
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d105      	bne.n	800e1b2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e1a6:	7b7b      	ldrb	r3, [r7, #13]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d102      	bne.n	800e1b2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e1ac:	7b3b      	ldrb	r3, [r7, #12]
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d001      	beq.n	800e1b6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	e059      	b.n	800e26a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2202      	movs	r2, #2
 800e1ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2202      	movs	r2, #2
 800e1c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2202      	movs	r2, #2
 800e1ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2202      	movs	r2, #2
 800e1d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	68da      	ldr	r2, [r3, #12]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f042 0202 	orr.w	r2, r2, #2
 800e1e4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	68da      	ldr	r2, [r3, #12]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f042 0204 	orr.w	r2, r2, #4
 800e1f4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	2100      	movs	r1, #0
 800e1fe:	4618      	mov	r0, r3
 800e200:	f001 fb5e 	bl	800f8c0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2201      	movs	r2, #1
 800e20a:	2104      	movs	r1, #4
 800e20c:	4618      	mov	r0, r3
 800e20e:	f001 fb57 	bl	800f8c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4a17      	ldr	r2, [pc, #92]	@ (800e274 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800e218:	4293      	cmp	r3, r2
 800e21a:	d018      	beq.n	800e24e <HAL_TIM_OnePulse_Start_IT+0xde>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a15      	ldr	r2, [pc, #84]	@ (800e278 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d013      	beq.n	800e24e <HAL_TIM_OnePulse_Start_IT+0xde>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a14      	ldr	r2, [pc, #80]	@ (800e27c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d00e      	beq.n	800e24e <HAL_TIM_OnePulse_Start_IT+0xde>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a12      	ldr	r2, [pc, #72]	@ (800e280 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d009      	beq.n	800e24e <HAL_TIM_OnePulse_Start_IT+0xde>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	4a11      	ldr	r2, [pc, #68]	@ (800e284 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d004      	beq.n	800e24e <HAL_TIM_OnePulse_Start_IT+0xde>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a0f      	ldr	r2, [pc, #60]	@ (800e288 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d101      	bne.n	800e252 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800e24e:	2301      	movs	r3, #1
 800e250:	e000      	b.n	800e254 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800e252:	2300      	movs	r3, #0
 800e254:	2b00      	cmp	r3, #0
 800e256:	d007      	beq.n	800e268 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e266:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	40012c00 	.word	0x40012c00
 800e278:	40013400 	.word	0x40013400
 800e27c:	40014000 	.word	0x40014000
 800e280:	40014400 	.word	0x40014400
 800e284:	40014800 	.word	0x40014800
 800e288:	40015000 	.word	0x40015000

0800e28c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b086      	sub	sp, #24
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d101      	bne.n	800e2a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e29c:	2301      	movs	r3, #1
 800e29e:	e0a2      	b.n	800e3e6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d111      	bne.n	800e2d0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f001 fb29 	bl	800f90c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d102      	bne.n	800e2c8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	4a4a      	ldr	r2, [pc, #296]	@ (800e3f0 <HAL_TIM_Encoder_Init+0x164>)
 800e2c6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2202      	movs	r2, #2
 800e2d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	689b      	ldr	r3, [r3, #8]
 800e2de:	687a      	ldr	r2, [r7, #4]
 800e2e0:	6812      	ldr	r2, [r2, #0]
 800e2e2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800e2e6:	f023 0307 	bic.w	r3, r3, #7
 800e2ea:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681a      	ldr	r2, [r3, #0]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	3304      	adds	r3, #4
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	f000 fe68 	bl	800efcc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	689b      	ldr	r3, [r3, #8]
 800e302:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	699b      	ldr	r3, [r3, #24]
 800e30a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	6a1b      	ldr	r3, [r3, #32]
 800e312:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	697a      	ldr	r2, [r7, #20]
 800e31a:	4313      	orrs	r3, r2
 800e31c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e324:	f023 0303 	bic.w	r3, r3, #3
 800e328:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	689a      	ldr	r2, [r3, #8]
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	699b      	ldr	r3, [r3, #24]
 800e332:	021b      	lsls	r3, r3, #8
 800e334:	4313      	orrs	r3, r2
 800e336:	693a      	ldr	r2, [r7, #16]
 800e338:	4313      	orrs	r3, r2
 800e33a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800e342:	f023 030c 	bic.w	r3, r3, #12
 800e346:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e34e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	68da      	ldr	r2, [r3, #12]
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	69db      	ldr	r3, [r3, #28]
 800e35c:	021b      	lsls	r3, r3, #8
 800e35e:	4313      	orrs	r3, r2
 800e360:	693a      	ldr	r2, [r7, #16]
 800e362:	4313      	orrs	r3, r2
 800e364:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	691b      	ldr	r3, [r3, #16]
 800e36a:	011a      	lsls	r2, r3, #4
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	6a1b      	ldr	r3, [r3, #32]
 800e370:	031b      	lsls	r3, r3, #12
 800e372:	4313      	orrs	r3, r2
 800e374:	693a      	ldr	r2, [r7, #16]
 800e376:	4313      	orrs	r3, r2
 800e378:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800e380:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800e388:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	685a      	ldr	r2, [r3, #4]
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	695b      	ldr	r3, [r3, #20]
 800e392:	011b      	lsls	r3, r3, #4
 800e394:	4313      	orrs	r3, r2
 800e396:	68fa      	ldr	r2, [r7, #12]
 800e398:	4313      	orrs	r3, r2
 800e39a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	697a      	ldr	r2, [r7, #20]
 800e3a2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	693a      	ldr	r2, [r7, #16]
 800e3aa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2201      	movs	r2, #1
 800e3c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2201      	movs	r2, #1
 800e3e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3718      	adds	r7, #24
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	08009e39 	.word	0x08009e39

0800e3f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e404:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e40c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e414:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e41c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d110      	bne.n	800e446 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e424:	7bfb      	ldrb	r3, [r7, #15]
 800e426:	2b01      	cmp	r3, #1
 800e428:	d102      	bne.n	800e430 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800e42a:	7b7b      	ldrb	r3, [r7, #13]
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d001      	beq.n	800e434 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800e430:	2301      	movs	r3, #1
 800e432:	e069      	b.n	800e508 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2202      	movs	r2, #2
 800e438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2202      	movs	r2, #2
 800e440:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e444:	e031      	b.n	800e4aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	2b04      	cmp	r3, #4
 800e44a:	d110      	bne.n	800e46e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e44c:	7bbb      	ldrb	r3, [r7, #14]
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d102      	bne.n	800e458 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e452:	7b3b      	ldrb	r3, [r7, #12]
 800e454:	2b01      	cmp	r3, #1
 800e456:	d001      	beq.n	800e45c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800e458:	2301      	movs	r3, #1
 800e45a:	e055      	b.n	800e508 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2202      	movs	r2, #2
 800e460:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2202      	movs	r2, #2
 800e468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e46c:	e01d      	b.n	800e4aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e46e:	7bfb      	ldrb	r3, [r7, #15]
 800e470:	2b01      	cmp	r3, #1
 800e472:	d108      	bne.n	800e486 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e474:	7bbb      	ldrb	r3, [r7, #14]
 800e476:	2b01      	cmp	r3, #1
 800e478:	d105      	bne.n	800e486 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e47a:	7b7b      	ldrb	r3, [r7, #13]
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d102      	bne.n	800e486 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e480:	7b3b      	ldrb	r3, [r7, #12]
 800e482:	2b01      	cmp	r3, #1
 800e484:	d001      	beq.n	800e48a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800e486:	2301      	movs	r3, #1
 800e488:	e03e      	b.n	800e508 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2202      	movs	r2, #2
 800e48e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2202      	movs	r2, #2
 800e496:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2202      	movs	r2, #2
 800e49e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2202      	movs	r2, #2
 800e4a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d003      	beq.n	800e4b8 <HAL_TIM_Encoder_Start+0xc4>
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	2b04      	cmp	r3, #4
 800e4b4:	d008      	beq.n	800e4c8 <HAL_TIM_Encoder_Start+0xd4>
 800e4b6:	e00f      	b.n	800e4d8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	2201      	movs	r2, #1
 800e4be:	2100      	movs	r1, #0
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f001 f9fd 	bl	800f8c0 <TIM_CCxChannelCmd>
      break;
 800e4c6:	e016      	b.n	800e4f6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	2104      	movs	r1, #4
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f001 f9f5 	bl	800f8c0 <TIM_CCxChannelCmd>
      break;
 800e4d6:	e00e      	b.n	800e4f6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	2201      	movs	r2, #1
 800e4de:	2100      	movs	r1, #0
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f001 f9ed 	bl	800f8c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	2104      	movs	r1, #4
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f001 f9e6 	bl	800f8c0 <TIM_CCxChannelCmd>
      break;
 800e4f4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f042 0201 	orr.w	r2, r2, #1
 800e504:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e506:	2300      	movs	r3, #0
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3710      	adds	r7, #16
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b084      	sub	sp, #16
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	691b      	ldr	r3, [r3, #16]
 800e526:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	f003 0302 	and.w	r3, r3, #2
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d026      	beq.n	800e580 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f003 0302 	and.w	r3, r3, #2
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d021      	beq.n	800e580 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	f06f 0202 	mvn.w	r2, #2
 800e544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2201      	movs	r2, #1
 800e54a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	699b      	ldr	r3, [r3, #24]
 800e552:	f003 0303 	and.w	r3, r3, #3
 800e556:	2b00      	cmp	r3, #0
 800e558:	d005      	beq.n	800e566 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	4798      	blx	r3
 800e564:	e009      	b.n	800e57a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2200      	movs	r2, #0
 800e57e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	f003 0304 	and.w	r3, r3, #4
 800e586:	2b00      	cmp	r3, #0
 800e588:	d026      	beq.n	800e5d8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	f003 0304 	and.w	r3, r3, #4
 800e590:	2b00      	cmp	r3, #0
 800e592:	d021      	beq.n	800e5d8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f06f 0204 	mvn.w	r2, #4
 800e59c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2202      	movs	r2, #2
 800e5a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	699b      	ldr	r3, [r3, #24]
 800e5aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d005      	beq.n	800e5be <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	4798      	blx	r3
 800e5bc:	e009      	b.n	800e5d2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	f003 0308 	and.w	r3, r3, #8
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d026      	beq.n	800e630 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f003 0308 	and.w	r3, r3, #8
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d021      	beq.n	800e630 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f06f 0208 	mvn.w	r2, #8
 800e5f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2204      	movs	r2, #4
 800e5fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	69db      	ldr	r3, [r3, #28]
 800e602:	f003 0303 	and.w	r3, r3, #3
 800e606:	2b00      	cmp	r3, #0
 800e608:	d005      	beq.n	800e616 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	4798      	blx	r3
 800e614:	e009      	b.n	800e62a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2200      	movs	r2, #0
 800e62e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	f003 0310 	and.w	r3, r3, #16
 800e636:	2b00      	cmp	r3, #0
 800e638:	d026      	beq.n	800e688 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f003 0310 	and.w	r3, r3, #16
 800e640:	2b00      	cmp	r3, #0
 800e642:	d021      	beq.n	800e688 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f06f 0210 	mvn.w	r2, #16
 800e64c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2208      	movs	r2, #8
 800e652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	69db      	ldr	r3, [r3, #28]
 800e65a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d005      	beq.n	800e66e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	4798      	blx	r3
 800e66c:	e009      	b.n	800e682 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2200      	movs	r2, #0
 800e686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	f003 0301 	and.w	r3, r3, #1
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d00e      	beq.n	800e6b0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f003 0301 	and.w	r3, r3, #1
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d009      	beq.n	800e6b0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f06f 0201 	mvn.w	r2, #1
 800e6a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d104      	bne.n	800e6c4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d00e      	beq.n	800e6e2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d009      	beq.n	800e6e2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e6d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d00e      	beq.n	800e70a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d009      	beq.n	800e70a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e6fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e710:	2b00      	cmp	r3, #0
 800e712:	d00e      	beq.n	800e732 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d009      	beq.n	800e732 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	f003 0320 	and.w	r3, r3, #32
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d00e      	beq.n	800e75a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f003 0320 	and.w	r3, r3, #32
 800e742:	2b00      	cmp	r3, #0
 800e744:	d009      	beq.n	800e75a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f06f 0220 	mvn.w	r2, #32
 800e74e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e760:	2b00      	cmp	r3, #0
 800e762:	d00e      	beq.n	800e782 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d009      	beq.n	800e782 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800e776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d00e      	beq.n	800e7aa <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e792:	2b00      	cmp	r3, #0
 800e794:	d009      	beq.n	800e7aa <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800e79e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d00e      	beq.n	800e7d2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d009      	beq.n	800e7d2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800e7c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d00e      	beq.n	800e7fa <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d009      	beq.n	800e7fa <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800e7ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e7fa:	bf00      	nop
 800e7fc:	3710      	adds	r7, #16
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
	...

0800e804 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b086      	sub	sp, #24
 800e808:	af00      	add	r7, sp, #0
 800e80a:	60f8      	str	r0, [r7, #12]
 800e80c:	60b9      	str	r1, [r7, #8]
 800e80e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e810:	2300      	movs	r3, #0
 800e812:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e81a:	2b01      	cmp	r3, #1
 800e81c:	d101      	bne.n	800e822 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e81e:	2302      	movs	r3, #2
 800e820:	e0ff      	b.n	800ea22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2201      	movs	r2, #1
 800e826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2b14      	cmp	r3, #20
 800e82e:	f200 80f0 	bhi.w	800ea12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e832:	a201      	add	r2, pc, #4	@ (adr r2, 800e838 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e838:	0800e88d 	.word	0x0800e88d
 800e83c:	0800ea13 	.word	0x0800ea13
 800e840:	0800ea13 	.word	0x0800ea13
 800e844:	0800ea13 	.word	0x0800ea13
 800e848:	0800e8cd 	.word	0x0800e8cd
 800e84c:	0800ea13 	.word	0x0800ea13
 800e850:	0800ea13 	.word	0x0800ea13
 800e854:	0800ea13 	.word	0x0800ea13
 800e858:	0800e90f 	.word	0x0800e90f
 800e85c:	0800ea13 	.word	0x0800ea13
 800e860:	0800ea13 	.word	0x0800ea13
 800e864:	0800ea13 	.word	0x0800ea13
 800e868:	0800e94f 	.word	0x0800e94f
 800e86c:	0800ea13 	.word	0x0800ea13
 800e870:	0800ea13 	.word	0x0800ea13
 800e874:	0800ea13 	.word	0x0800ea13
 800e878:	0800e991 	.word	0x0800e991
 800e87c:	0800ea13 	.word	0x0800ea13
 800e880:	0800ea13 	.word	0x0800ea13
 800e884:	0800ea13 	.word	0x0800ea13
 800e888:	0800e9d1 	.word	0x0800e9d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	68b9      	ldr	r1, [r7, #8]
 800e892:	4618      	mov	r0, r3
 800e894:	f000 fc4e 	bl	800f134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	699a      	ldr	r2, [r3, #24]
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f042 0208 	orr.w	r2, r2, #8
 800e8a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	699a      	ldr	r2, [r3, #24]
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f022 0204 	bic.w	r2, r2, #4
 800e8b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	6999      	ldr	r1, [r3, #24]
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	691a      	ldr	r2, [r3, #16]
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	430a      	orrs	r2, r1
 800e8c8:	619a      	str	r2, [r3, #24]
      break;
 800e8ca:	e0a5      	b.n	800ea18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68b9      	ldr	r1, [r7, #8]
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f000 fcc8 	bl	800f268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	699a      	ldr	r2, [r3, #24]
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e8e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	699a      	ldr	r2, [r3, #24]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e8f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	6999      	ldr	r1, [r3, #24]
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	691b      	ldr	r3, [r3, #16]
 800e902:	021a      	lsls	r2, r3, #8
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	430a      	orrs	r2, r1
 800e90a:	619a      	str	r2, [r3, #24]
      break;
 800e90c:	e084      	b.n	800ea18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	68b9      	ldr	r1, [r7, #8]
 800e914:	4618      	mov	r0, r3
 800e916:	f000 fd3b 	bl	800f390 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	69da      	ldr	r2, [r3, #28]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f042 0208 	orr.w	r2, r2, #8
 800e928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	69da      	ldr	r2, [r3, #28]
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f022 0204 	bic.w	r2, r2, #4
 800e938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	69d9      	ldr	r1, [r3, #28]
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	691a      	ldr	r2, [r3, #16]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	430a      	orrs	r2, r1
 800e94a:	61da      	str	r2, [r3, #28]
      break;
 800e94c:	e064      	b.n	800ea18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	68b9      	ldr	r1, [r7, #8]
 800e954:	4618      	mov	r0, r3
 800e956:	f000 fdad 	bl	800f4b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	69da      	ldr	r2, [r3, #28]
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	69da      	ldr	r2, [r3, #28]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	69d9      	ldr	r1, [r3, #28]
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	691b      	ldr	r3, [r3, #16]
 800e984:	021a      	lsls	r2, r3, #8
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	430a      	orrs	r2, r1
 800e98c:	61da      	str	r2, [r3, #28]
      break;
 800e98e:	e043      	b.n	800ea18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	68b9      	ldr	r1, [r7, #8]
 800e996:	4618      	mov	r0, r3
 800e998:	f000 fe20 	bl	800f5dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f042 0208 	orr.w	r2, r2, #8
 800e9aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f022 0204 	bic.w	r2, r2, #4
 800e9ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	691a      	ldr	r2, [r3, #16]
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	430a      	orrs	r2, r1
 800e9cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e9ce:	e023      	b.n	800ea18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	68b9      	ldr	r1, [r7, #8]
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f000 fe6a 	bl	800f6b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e9ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e9fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	691b      	ldr	r3, [r3, #16]
 800ea06:	021a      	lsls	r2, r3, #8
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	430a      	orrs	r2, r1
 800ea0e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ea10:	e002      	b.n	800ea18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ea12:	2301      	movs	r3, #1
 800ea14:	75fb      	strb	r3, [r7, #23]
      break;
 800ea16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ea20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3718      	adds	r7, #24
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop

0800ea2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ea36:	2300      	movs	r3, #0
 800ea38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d101      	bne.n	800ea48 <HAL_TIM_ConfigClockSource+0x1c>
 800ea44:	2302      	movs	r3, #2
 800ea46:	e0f6      	b.n	800ec36 <HAL_TIM_ConfigClockSource+0x20a>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2202      	movs	r2, #2
 800ea54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	689b      	ldr	r3, [r3, #8]
 800ea5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ea66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ea6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ea72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	68ba      	ldr	r2, [r7, #8]
 800ea7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4a6f      	ldr	r2, [pc, #444]	@ (800ec40 <HAL_TIM_ConfigClockSource+0x214>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	f000 80c1 	beq.w	800ec0a <HAL_TIM_ConfigClockSource+0x1de>
 800ea88:	4a6d      	ldr	r2, [pc, #436]	@ (800ec40 <HAL_TIM_ConfigClockSource+0x214>)
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	f200 80c6 	bhi.w	800ec1c <HAL_TIM_ConfigClockSource+0x1f0>
 800ea90:	4a6c      	ldr	r2, [pc, #432]	@ (800ec44 <HAL_TIM_ConfigClockSource+0x218>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	f000 80b9 	beq.w	800ec0a <HAL_TIM_ConfigClockSource+0x1de>
 800ea98:	4a6a      	ldr	r2, [pc, #424]	@ (800ec44 <HAL_TIM_ConfigClockSource+0x218>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	f200 80be 	bhi.w	800ec1c <HAL_TIM_ConfigClockSource+0x1f0>
 800eaa0:	4a69      	ldr	r2, [pc, #420]	@ (800ec48 <HAL_TIM_ConfigClockSource+0x21c>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	f000 80b1 	beq.w	800ec0a <HAL_TIM_ConfigClockSource+0x1de>
 800eaa8:	4a67      	ldr	r2, [pc, #412]	@ (800ec48 <HAL_TIM_ConfigClockSource+0x21c>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	f200 80b6 	bhi.w	800ec1c <HAL_TIM_ConfigClockSource+0x1f0>
 800eab0:	4a66      	ldr	r2, [pc, #408]	@ (800ec4c <HAL_TIM_ConfigClockSource+0x220>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	f000 80a9 	beq.w	800ec0a <HAL_TIM_ConfigClockSource+0x1de>
 800eab8:	4a64      	ldr	r2, [pc, #400]	@ (800ec4c <HAL_TIM_ConfigClockSource+0x220>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	f200 80ae 	bhi.w	800ec1c <HAL_TIM_ConfigClockSource+0x1f0>
 800eac0:	4a63      	ldr	r2, [pc, #396]	@ (800ec50 <HAL_TIM_ConfigClockSource+0x224>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	f000 80a1 	beq.w	800ec0a <HAL_TIM_ConfigClockSource+0x1de>
 800eac8:	4a61      	ldr	r2, [pc, #388]	@ (800ec50 <HAL_TIM_ConfigClockSource+0x224>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	f200 80a6 	bhi.w	800ec1c <HAL_TIM_ConfigClockSource+0x1f0>
 800ead0:	4a60      	ldr	r2, [pc, #384]	@ (800ec54 <HAL_TIM_ConfigClockSource+0x228>)
 800ead2:	4293      	cmp	r3, r2
 800ead4:	f000 8099 	beq.w	800ec0a <HAL_TIM_ConfigClockSource+0x1de>
 800ead8:	4a5e      	ldr	r2, [pc, #376]	@ (800ec54 <HAL_TIM_ConfigClockSource+0x228>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	f200 809e 	bhi.w	800ec1c <HAL_TIM_ConfigClockSource+0x1f0>
 800eae0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800eae4:	f000 8091 	beq.w	800ec0a <HAL_TIM_ConfigClockSource+0x1de>
 800eae8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800eaec:	f200 8096 	bhi.w	800ec1c <HAL_TIM_ConfigClockSource+0x1f0>
 800eaf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eaf4:	f000 8089 	beq.w	800ec0a <HAL_TIM_ConfigClockSource+0x1de>
 800eaf8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eafc:	f200 808e 	bhi.w	800ec1c <HAL_TIM_ConfigClockSource+0x1f0>
 800eb00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb04:	d03e      	beq.n	800eb84 <HAL_TIM_ConfigClockSource+0x158>
 800eb06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb0a:	f200 8087 	bhi.w	800ec1c <HAL_TIM_ConfigClockSource+0x1f0>
 800eb0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb12:	f000 8086 	beq.w	800ec22 <HAL_TIM_ConfigClockSource+0x1f6>
 800eb16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb1a:	d87f      	bhi.n	800ec1c <HAL_TIM_ConfigClockSource+0x1f0>
 800eb1c:	2b70      	cmp	r3, #112	@ 0x70
 800eb1e:	d01a      	beq.n	800eb56 <HAL_TIM_ConfigClockSource+0x12a>
 800eb20:	2b70      	cmp	r3, #112	@ 0x70
 800eb22:	d87b      	bhi.n	800ec1c <HAL_TIM_ConfigClockSource+0x1f0>
 800eb24:	2b60      	cmp	r3, #96	@ 0x60
 800eb26:	d050      	beq.n	800ebca <HAL_TIM_ConfigClockSource+0x19e>
 800eb28:	2b60      	cmp	r3, #96	@ 0x60
 800eb2a:	d877      	bhi.n	800ec1c <HAL_TIM_ConfigClockSource+0x1f0>
 800eb2c:	2b50      	cmp	r3, #80	@ 0x50
 800eb2e:	d03c      	beq.n	800ebaa <HAL_TIM_ConfigClockSource+0x17e>
 800eb30:	2b50      	cmp	r3, #80	@ 0x50
 800eb32:	d873      	bhi.n	800ec1c <HAL_TIM_ConfigClockSource+0x1f0>
 800eb34:	2b40      	cmp	r3, #64	@ 0x40
 800eb36:	d058      	beq.n	800ebea <HAL_TIM_ConfigClockSource+0x1be>
 800eb38:	2b40      	cmp	r3, #64	@ 0x40
 800eb3a:	d86f      	bhi.n	800ec1c <HAL_TIM_ConfigClockSource+0x1f0>
 800eb3c:	2b30      	cmp	r3, #48	@ 0x30
 800eb3e:	d064      	beq.n	800ec0a <HAL_TIM_ConfigClockSource+0x1de>
 800eb40:	2b30      	cmp	r3, #48	@ 0x30
 800eb42:	d86b      	bhi.n	800ec1c <HAL_TIM_ConfigClockSource+0x1f0>
 800eb44:	2b20      	cmp	r3, #32
 800eb46:	d060      	beq.n	800ec0a <HAL_TIM_ConfigClockSource+0x1de>
 800eb48:	2b20      	cmp	r3, #32
 800eb4a:	d867      	bhi.n	800ec1c <HAL_TIM_ConfigClockSource+0x1f0>
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d05c      	beq.n	800ec0a <HAL_TIM_ConfigClockSource+0x1de>
 800eb50:	2b10      	cmp	r3, #16
 800eb52:	d05a      	beq.n	800ec0a <HAL_TIM_ConfigClockSource+0x1de>
 800eb54:	e062      	b.n	800ec1c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800eb66:	f000 fe8b 	bl	800f880 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	689b      	ldr	r3, [r3, #8]
 800eb70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800eb78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	68ba      	ldr	r2, [r7, #8]
 800eb80:	609a      	str	r2, [r3, #8]
      break;
 800eb82:	e04f      	b.n	800ec24 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800eb94:	f000 fe74 	bl	800f880 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	689a      	ldr	r2, [r3, #8]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800eba6:	609a      	str	r2, [r3, #8]
      break;
 800eba8:	e03c      	b.n	800ec24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	f000 fde6 	bl	800f788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2150      	movs	r1, #80	@ 0x50
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f000 fe3f 	bl	800f846 <TIM_ITRx_SetConfig>
      break;
 800ebc8:	e02c      	b.n	800ec24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	f000 fe05 	bl	800f7e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	2160      	movs	r1, #96	@ 0x60
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f000 fe2f 	bl	800f846 <TIM_ITRx_SetConfig>
      break;
 800ebe8:	e01c      	b.n	800ec24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	f000 fdc6 	bl	800f788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	2140      	movs	r1, #64	@ 0x40
 800ec02:	4618      	mov	r0, r3
 800ec04:	f000 fe1f 	bl	800f846 <TIM_ITRx_SetConfig>
      break;
 800ec08:	e00c      	b.n	800ec24 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681a      	ldr	r2, [r3, #0]
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4619      	mov	r1, r3
 800ec14:	4610      	mov	r0, r2
 800ec16:	f000 fe16 	bl	800f846 <TIM_ITRx_SetConfig>
      break;
 800ec1a:	e003      	b.n	800ec24 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	73fb      	strb	r3, [r7, #15]
      break;
 800ec20:	e000      	b.n	800ec24 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800ec22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2201      	movs	r2, #1
 800ec28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ec34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3710      	adds	r7, #16
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	00100070 	.word	0x00100070
 800ec44:	00100060 	.word	0x00100060
 800ec48:	00100050 	.word	0x00100050
 800ec4c:	00100040 	.word	0x00100040
 800ec50:	00100030 	.word	0x00100030
 800ec54:	00100020 	.word	0x00100020

0800ec58 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800ec60:	bf00      	nop
 800ec62:	370c      	adds	r7, #12
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ec74:	bf00      	nop
 800ec76:	370c      	adds	r7, #12
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr

0800ec80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ec80:	b480      	push	{r7}
 800ec82:	b083      	sub	sp, #12
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ec88:	bf00      	nop
 800ec8a:	370c      	adds	r7, #12
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr

0800ec94 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800ec9c:	bf00      	nop
 800ec9e:	370c      	adds	r7, #12
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr

0800eca8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b083      	sub	sp, #12
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ecb0:	bf00      	nop
 800ecb2:	370c      	adds	r7, #12
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr

0800ecbc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ecc4:	bf00      	nop
 800ecc6:	370c      	adds	r7, #12
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ecd8:	bf00      	nop
 800ecda:	370c      	adds	r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr

0800ece4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800ecec:	bf00      	nop
 800ecee:	370c      	adds	r7, #12
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr

0800ecf8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b083      	sub	sp, #12
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ed00:	bf00      	nop
 800ed02:	370c      	adds	r7, #12
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr

0800ed0c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b087      	sub	sp, #28
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	460b      	mov	r3, r1
 800ed16:	607a      	str	r2, [r7, #4]
 800ed18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d101      	bne.n	800ed28 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800ed24:	2301      	movs	r3, #1
 800ed26:	e14a      	b.n	800efbe <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	f040 80dd 	bne.w	800eef0 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800ed36:	7afb      	ldrb	r3, [r7, #11]
 800ed38:	2b1f      	cmp	r3, #31
 800ed3a:	f200 80d6 	bhi.w	800eeea <HAL_TIM_RegisterCallback+0x1de>
 800ed3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ed44 <HAL_TIM_RegisterCallback+0x38>)
 800ed40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed44:	0800edc5 	.word	0x0800edc5
 800ed48:	0800edcd 	.word	0x0800edcd
 800ed4c:	0800edd5 	.word	0x0800edd5
 800ed50:	0800eddd 	.word	0x0800eddd
 800ed54:	0800ede5 	.word	0x0800ede5
 800ed58:	0800eded 	.word	0x0800eded
 800ed5c:	0800edf5 	.word	0x0800edf5
 800ed60:	0800edfd 	.word	0x0800edfd
 800ed64:	0800ee05 	.word	0x0800ee05
 800ed68:	0800ee0d 	.word	0x0800ee0d
 800ed6c:	0800ee15 	.word	0x0800ee15
 800ed70:	0800ee1d 	.word	0x0800ee1d
 800ed74:	0800ee25 	.word	0x0800ee25
 800ed78:	0800ee2d 	.word	0x0800ee2d
 800ed7c:	0800ee37 	.word	0x0800ee37
 800ed80:	0800ee41 	.word	0x0800ee41
 800ed84:	0800ee4b 	.word	0x0800ee4b
 800ed88:	0800ee55 	.word	0x0800ee55
 800ed8c:	0800ee5f 	.word	0x0800ee5f
 800ed90:	0800ee69 	.word	0x0800ee69
 800ed94:	0800ee73 	.word	0x0800ee73
 800ed98:	0800ee7d 	.word	0x0800ee7d
 800ed9c:	0800ee87 	.word	0x0800ee87
 800eda0:	0800ee91 	.word	0x0800ee91
 800eda4:	0800ee9b 	.word	0x0800ee9b
 800eda8:	0800eea5 	.word	0x0800eea5
 800edac:	0800eeaf 	.word	0x0800eeaf
 800edb0:	0800eeb9 	.word	0x0800eeb9
 800edb4:	0800eec3 	.word	0x0800eec3
 800edb8:	0800eecd 	.word	0x0800eecd
 800edbc:	0800eed7 	.word	0x0800eed7
 800edc0:	0800eee1 	.word	0x0800eee1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800edca:	e0f7      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800edd2:	e0f3      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800edda:	e0ef      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	687a      	ldr	r2, [r7, #4]
 800ede0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800ede2:	e0eb      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	687a      	ldr	r2, [r7, #4]
 800ede8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800edea:	e0e7      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800edf2:	e0e3      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800edfa:	e0df      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800ee02:	e0db      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	687a      	ldr	r2, [r7, #4]
 800ee08:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800ee0a:	e0d7      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	687a      	ldr	r2, [r7, #4]
 800ee10:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800ee12:	e0d3      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	687a      	ldr	r2, [r7, #4]
 800ee18:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800ee1a:	e0cf      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ee22:	e0cb      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ee2a:	e0c7      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800ee34:	e0c2      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800ee3e:	e0bd      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800ee48:	e0b8      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	687a      	ldr	r2, [r7, #4]
 800ee4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800ee52:	e0b3      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	687a      	ldr	r2, [r7, #4]
 800ee58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800ee5c:	e0ae      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800ee66:	e0a9      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800ee70:	e0a4      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800ee7a:	e09f      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800ee84:	e09a      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800ee8e:	e095      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	687a      	ldr	r2, [r7, #4]
 800ee94:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800ee98:	e090      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800eea2:	e08b      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800eeac:	e086      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800eeb6:	e081      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	687a      	ldr	r2, [r7, #4]
 800eebc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800eec0:	e07c      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800eeca:	e077      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800eed4:	e072      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800eede:	e06d      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800eee8:	e068      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800eeea:	2301      	movs	r3, #1
 800eeec:	75fb      	strb	r3, [r7, #23]
        break;
 800eeee:	e065      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eef6:	b2db      	uxtb	r3, r3
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d15d      	bne.n	800efb8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800eefc:	7afb      	ldrb	r3, [r7, #11]
 800eefe:	2b0d      	cmp	r3, #13
 800ef00:	d857      	bhi.n	800efb2 <HAL_TIM_RegisterCallback+0x2a6>
 800ef02:	a201      	add	r2, pc, #4	@ (adr r2, 800ef08 <HAL_TIM_RegisterCallback+0x1fc>)
 800ef04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef08:	0800ef41 	.word	0x0800ef41
 800ef0c:	0800ef49 	.word	0x0800ef49
 800ef10:	0800ef51 	.word	0x0800ef51
 800ef14:	0800ef59 	.word	0x0800ef59
 800ef18:	0800ef61 	.word	0x0800ef61
 800ef1c:	0800ef69 	.word	0x0800ef69
 800ef20:	0800ef71 	.word	0x0800ef71
 800ef24:	0800ef79 	.word	0x0800ef79
 800ef28:	0800ef81 	.word	0x0800ef81
 800ef2c:	0800ef89 	.word	0x0800ef89
 800ef30:	0800ef91 	.word	0x0800ef91
 800ef34:	0800ef99 	.word	0x0800ef99
 800ef38:	0800efa1 	.word	0x0800efa1
 800ef3c:	0800efa9 	.word	0x0800efa9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800ef46:	e039      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800ef4e:	e035      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	687a      	ldr	r2, [r7, #4]
 800ef54:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800ef56:	e031      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	687a      	ldr	r2, [r7, #4]
 800ef5c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800ef5e:	e02d      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	687a      	ldr	r2, [r7, #4]
 800ef64:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800ef66:	e029      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800ef6e:	e025      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800ef76:	e021      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	687a      	ldr	r2, [r7, #4]
 800ef7c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800ef7e:	e01d      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800ef86:	e019      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	687a      	ldr	r2, [r7, #4]
 800ef8c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800ef8e:	e015      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	687a      	ldr	r2, [r7, #4]
 800ef94:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800ef96:	e011      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	687a      	ldr	r2, [r7, #4]
 800ef9c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ef9e:	e00d      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	687a      	ldr	r2, [r7, #4]
 800efa4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800efa6:	e009      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800efb0:	e004      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800efb2:	2301      	movs	r3, #1
 800efb4:	75fb      	strb	r3, [r7, #23]
        break;
 800efb6:	e001      	b.n	800efbc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800efb8:	2301      	movs	r3, #1
 800efba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800efbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	371c      	adds	r7, #28
 800efc2:	46bd      	mov	sp, r7
 800efc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc8:	4770      	bx	lr
 800efca:	bf00      	nop

0800efcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800efcc:	b480      	push	{r7}
 800efce:	b085      	sub	sp, #20
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	4a4c      	ldr	r2, [pc, #304]	@ (800f110 <TIM_Base_SetConfig+0x144>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d017      	beq.n	800f014 <TIM_Base_SetConfig+0x48>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efea:	d013      	beq.n	800f014 <TIM_Base_SetConfig+0x48>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	4a49      	ldr	r2, [pc, #292]	@ (800f114 <TIM_Base_SetConfig+0x148>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d00f      	beq.n	800f014 <TIM_Base_SetConfig+0x48>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	4a48      	ldr	r2, [pc, #288]	@ (800f118 <TIM_Base_SetConfig+0x14c>)
 800eff8:	4293      	cmp	r3, r2
 800effa:	d00b      	beq.n	800f014 <TIM_Base_SetConfig+0x48>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	4a47      	ldr	r2, [pc, #284]	@ (800f11c <TIM_Base_SetConfig+0x150>)
 800f000:	4293      	cmp	r3, r2
 800f002:	d007      	beq.n	800f014 <TIM_Base_SetConfig+0x48>
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	4a46      	ldr	r2, [pc, #280]	@ (800f120 <TIM_Base_SetConfig+0x154>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	d003      	beq.n	800f014 <TIM_Base_SetConfig+0x48>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	4a45      	ldr	r2, [pc, #276]	@ (800f124 <TIM_Base_SetConfig+0x158>)
 800f010:	4293      	cmp	r3, r2
 800f012:	d108      	bne.n	800f026 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f01a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	68fa      	ldr	r2, [r7, #12]
 800f022:	4313      	orrs	r3, r2
 800f024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	4a39      	ldr	r2, [pc, #228]	@ (800f110 <TIM_Base_SetConfig+0x144>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d023      	beq.n	800f076 <TIM_Base_SetConfig+0xaa>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f034:	d01f      	beq.n	800f076 <TIM_Base_SetConfig+0xaa>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	4a36      	ldr	r2, [pc, #216]	@ (800f114 <TIM_Base_SetConfig+0x148>)
 800f03a:	4293      	cmp	r3, r2
 800f03c:	d01b      	beq.n	800f076 <TIM_Base_SetConfig+0xaa>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	4a35      	ldr	r2, [pc, #212]	@ (800f118 <TIM_Base_SetConfig+0x14c>)
 800f042:	4293      	cmp	r3, r2
 800f044:	d017      	beq.n	800f076 <TIM_Base_SetConfig+0xaa>
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	4a34      	ldr	r2, [pc, #208]	@ (800f11c <TIM_Base_SetConfig+0x150>)
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d013      	beq.n	800f076 <TIM_Base_SetConfig+0xaa>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	4a33      	ldr	r2, [pc, #204]	@ (800f120 <TIM_Base_SetConfig+0x154>)
 800f052:	4293      	cmp	r3, r2
 800f054:	d00f      	beq.n	800f076 <TIM_Base_SetConfig+0xaa>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	4a33      	ldr	r2, [pc, #204]	@ (800f128 <TIM_Base_SetConfig+0x15c>)
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d00b      	beq.n	800f076 <TIM_Base_SetConfig+0xaa>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	4a32      	ldr	r2, [pc, #200]	@ (800f12c <TIM_Base_SetConfig+0x160>)
 800f062:	4293      	cmp	r3, r2
 800f064:	d007      	beq.n	800f076 <TIM_Base_SetConfig+0xaa>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	4a31      	ldr	r2, [pc, #196]	@ (800f130 <TIM_Base_SetConfig+0x164>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d003      	beq.n	800f076 <TIM_Base_SetConfig+0xaa>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	4a2c      	ldr	r2, [pc, #176]	@ (800f124 <TIM_Base_SetConfig+0x158>)
 800f072:	4293      	cmp	r3, r2
 800f074:	d108      	bne.n	800f088 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f07c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	68db      	ldr	r3, [r3, #12]
 800f082:	68fa      	ldr	r2, [r7, #12]
 800f084:	4313      	orrs	r3, r2
 800f086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	695b      	ldr	r3, [r3, #20]
 800f092:	4313      	orrs	r3, r2
 800f094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	68fa      	ldr	r2, [r7, #12]
 800f09a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	689a      	ldr	r2, [r3, #8]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	681a      	ldr	r2, [r3, #0]
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	4a18      	ldr	r2, [pc, #96]	@ (800f110 <TIM_Base_SetConfig+0x144>)
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d013      	beq.n	800f0dc <TIM_Base_SetConfig+0x110>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	4a1a      	ldr	r2, [pc, #104]	@ (800f120 <TIM_Base_SetConfig+0x154>)
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d00f      	beq.n	800f0dc <TIM_Base_SetConfig+0x110>
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	4a1a      	ldr	r2, [pc, #104]	@ (800f128 <TIM_Base_SetConfig+0x15c>)
 800f0c0:	4293      	cmp	r3, r2
 800f0c2:	d00b      	beq.n	800f0dc <TIM_Base_SetConfig+0x110>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	4a19      	ldr	r2, [pc, #100]	@ (800f12c <TIM_Base_SetConfig+0x160>)
 800f0c8:	4293      	cmp	r3, r2
 800f0ca:	d007      	beq.n	800f0dc <TIM_Base_SetConfig+0x110>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	4a18      	ldr	r2, [pc, #96]	@ (800f130 <TIM_Base_SetConfig+0x164>)
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	d003      	beq.n	800f0dc <TIM_Base_SetConfig+0x110>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	4a13      	ldr	r2, [pc, #76]	@ (800f124 <TIM_Base_SetConfig+0x158>)
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d103      	bne.n	800f0e4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	691a      	ldr	r2, [r3, #16]
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	691b      	ldr	r3, [r3, #16]
 800f0ee:	f003 0301 	and.w	r3, r3, #1
 800f0f2:	2b01      	cmp	r3, #1
 800f0f4:	d105      	bne.n	800f102 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	691b      	ldr	r3, [r3, #16]
 800f0fa:	f023 0201 	bic.w	r2, r3, #1
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	611a      	str	r2, [r3, #16]
  }
}
 800f102:	bf00      	nop
 800f104:	3714      	adds	r7, #20
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr
 800f10e:	bf00      	nop
 800f110:	40012c00 	.word	0x40012c00
 800f114:	40000400 	.word	0x40000400
 800f118:	40000800 	.word	0x40000800
 800f11c:	40000c00 	.word	0x40000c00
 800f120:	40013400 	.word	0x40013400
 800f124:	40015000 	.word	0x40015000
 800f128:	40014000 	.word	0x40014000
 800f12c:	40014400 	.word	0x40014400
 800f130:	40014800 	.word	0x40014800

0800f134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f134:	b480      	push	{r7}
 800f136:	b087      	sub	sp, #28
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6a1b      	ldr	r3, [r3, #32]
 800f142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6a1b      	ldr	r3, [r3, #32]
 800f148:	f023 0201 	bic.w	r2, r3, #1
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	699b      	ldr	r3, [r3, #24]
 800f15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f023 0303 	bic.w	r3, r3, #3
 800f16e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	68fa      	ldr	r2, [r7, #12]
 800f176:	4313      	orrs	r3, r2
 800f178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	f023 0302 	bic.w	r3, r3, #2
 800f180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	689b      	ldr	r3, [r3, #8]
 800f186:	697a      	ldr	r2, [r7, #20]
 800f188:	4313      	orrs	r3, r2
 800f18a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	4a30      	ldr	r2, [pc, #192]	@ (800f250 <TIM_OC1_SetConfig+0x11c>)
 800f190:	4293      	cmp	r3, r2
 800f192:	d013      	beq.n	800f1bc <TIM_OC1_SetConfig+0x88>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	4a2f      	ldr	r2, [pc, #188]	@ (800f254 <TIM_OC1_SetConfig+0x120>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d00f      	beq.n	800f1bc <TIM_OC1_SetConfig+0x88>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	4a2e      	ldr	r2, [pc, #184]	@ (800f258 <TIM_OC1_SetConfig+0x124>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d00b      	beq.n	800f1bc <TIM_OC1_SetConfig+0x88>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4a2d      	ldr	r2, [pc, #180]	@ (800f25c <TIM_OC1_SetConfig+0x128>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d007      	beq.n	800f1bc <TIM_OC1_SetConfig+0x88>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	4a2c      	ldr	r2, [pc, #176]	@ (800f260 <TIM_OC1_SetConfig+0x12c>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d003      	beq.n	800f1bc <TIM_OC1_SetConfig+0x88>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	4a2b      	ldr	r2, [pc, #172]	@ (800f264 <TIM_OC1_SetConfig+0x130>)
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	d10c      	bne.n	800f1d6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	f023 0308 	bic.w	r3, r3, #8
 800f1c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	68db      	ldr	r3, [r3, #12]
 800f1c8:	697a      	ldr	r2, [r7, #20]
 800f1ca:	4313      	orrs	r3, r2
 800f1cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	f023 0304 	bic.w	r3, r3, #4
 800f1d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4a1d      	ldr	r2, [pc, #116]	@ (800f250 <TIM_OC1_SetConfig+0x11c>)
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	d013      	beq.n	800f206 <TIM_OC1_SetConfig+0xd2>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	4a1c      	ldr	r2, [pc, #112]	@ (800f254 <TIM_OC1_SetConfig+0x120>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d00f      	beq.n	800f206 <TIM_OC1_SetConfig+0xd2>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	4a1b      	ldr	r2, [pc, #108]	@ (800f258 <TIM_OC1_SetConfig+0x124>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d00b      	beq.n	800f206 <TIM_OC1_SetConfig+0xd2>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	4a1a      	ldr	r2, [pc, #104]	@ (800f25c <TIM_OC1_SetConfig+0x128>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d007      	beq.n	800f206 <TIM_OC1_SetConfig+0xd2>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	4a19      	ldr	r2, [pc, #100]	@ (800f260 <TIM_OC1_SetConfig+0x12c>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d003      	beq.n	800f206 <TIM_OC1_SetConfig+0xd2>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	4a18      	ldr	r2, [pc, #96]	@ (800f264 <TIM_OC1_SetConfig+0x130>)
 800f202:	4293      	cmp	r3, r2
 800f204:	d111      	bne.n	800f22a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f20c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	695b      	ldr	r3, [r3, #20]
 800f21a:	693a      	ldr	r2, [r7, #16]
 800f21c:	4313      	orrs	r3, r2
 800f21e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	699b      	ldr	r3, [r3, #24]
 800f224:	693a      	ldr	r2, [r7, #16]
 800f226:	4313      	orrs	r3, r2
 800f228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	693a      	ldr	r2, [r7, #16]
 800f22e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	685a      	ldr	r2, [r3, #4]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	697a      	ldr	r2, [r7, #20]
 800f242:	621a      	str	r2, [r3, #32]
}
 800f244:	bf00      	nop
 800f246:	371c      	adds	r7, #28
 800f248:	46bd      	mov	sp, r7
 800f24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24e:	4770      	bx	lr
 800f250:	40012c00 	.word	0x40012c00
 800f254:	40013400 	.word	0x40013400
 800f258:	40014000 	.word	0x40014000
 800f25c:	40014400 	.word	0x40014400
 800f260:	40014800 	.word	0x40014800
 800f264:	40015000 	.word	0x40015000

0800f268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f268:	b480      	push	{r7}
 800f26a:	b087      	sub	sp, #28
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6a1b      	ldr	r3, [r3, #32]
 800f276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6a1b      	ldr	r3, [r3, #32]
 800f27c:	f023 0210 	bic.w	r2, r3, #16
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	699b      	ldr	r3, [r3, #24]
 800f28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f296:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f29a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f2a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	021b      	lsls	r3, r3, #8
 800f2aa:	68fa      	ldr	r2, [r7, #12]
 800f2ac:	4313      	orrs	r3, r2
 800f2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	f023 0320 	bic.w	r3, r3, #32
 800f2b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	689b      	ldr	r3, [r3, #8]
 800f2bc:	011b      	lsls	r3, r3, #4
 800f2be:	697a      	ldr	r2, [r7, #20]
 800f2c0:	4313      	orrs	r3, r2
 800f2c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4a2c      	ldr	r2, [pc, #176]	@ (800f378 <TIM_OC2_SetConfig+0x110>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d007      	beq.n	800f2dc <TIM_OC2_SetConfig+0x74>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	4a2b      	ldr	r2, [pc, #172]	@ (800f37c <TIM_OC2_SetConfig+0x114>)
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d003      	beq.n	800f2dc <TIM_OC2_SetConfig+0x74>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4a2a      	ldr	r2, [pc, #168]	@ (800f380 <TIM_OC2_SetConfig+0x118>)
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d10d      	bne.n	800f2f8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f2e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	68db      	ldr	r3, [r3, #12]
 800f2e8:	011b      	lsls	r3, r3, #4
 800f2ea:	697a      	ldr	r2, [r7, #20]
 800f2ec:	4313      	orrs	r3, r2
 800f2ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f2f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	4a1f      	ldr	r2, [pc, #124]	@ (800f378 <TIM_OC2_SetConfig+0x110>)
 800f2fc:	4293      	cmp	r3, r2
 800f2fe:	d013      	beq.n	800f328 <TIM_OC2_SetConfig+0xc0>
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	4a1e      	ldr	r2, [pc, #120]	@ (800f37c <TIM_OC2_SetConfig+0x114>)
 800f304:	4293      	cmp	r3, r2
 800f306:	d00f      	beq.n	800f328 <TIM_OC2_SetConfig+0xc0>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	4a1e      	ldr	r2, [pc, #120]	@ (800f384 <TIM_OC2_SetConfig+0x11c>)
 800f30c:	4293      	cmp	r3, r2
 800f30e:	d00b      	beq.n	800f328 <TIM_OC2_SetConfig+0xc0>
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	4a1d      	ldr	r2, [pc, #116]	@ (800f388 <TIM_OC2_SetConfig+0x120>)
 800f314:	4293      	cmp	r3, r2
 800f316:	d007      	beq.n	800f328 <TIM_OC2_SetConfig+0xc0>
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	4a1c      	ldr	r2, [pc, #112]	@ (800f38c <TIM_OC2_SetConfig+0x124>)
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d003      	beq.n	800f328 <TIM_OC2_SetConfig+0xc0>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	4a17      	ldr	r2, [pc, #92]	@ (800f380 <TIM_OC2_SetConfig+0x118>)
 800f324:	4293      	cmp	r3, r2
 800f326:	d113      	bne.n	800f350 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f32e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	695b      	ldr	r3, [r3, #20]
 800f33c:	009b      	lsls	r3, r3, #2
 800f33e:	693a      	ldr	r2, [r7, #16]
 800f340:	4313      	orrs	r3, r2
 800f342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	699b      	ldr	r3, [r3, #24]
 800f348:	009b      	lsls	r3, r3, #2
 800f34a:	693a      	ldr	r2, [r7, #16]
 800f34c:	4313      	orrs	r3, r2
 800f34e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	693a      	ldr	r2, [r7, #16]
 800f354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	68fa      	ldr	r2, [r7, #12]
 800f35a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	685a      	ldr	r2, [r3, #4]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	697a      	ldr	r2, [r7, #20]
 800f368:	621a      	str	r2, [r3, #32]
}
 800f36a:	bf00      	nop
 800f36c:	371c      	adds	r7, #28
 800f36e:	46bd      	mov	sp, r7
 800f370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f374:	4770      	bx	lr
 800f376:	bf00      	nop
 800f378:	40012c00 	.word	0x40012c00
 800f37c:	40013400 	.word	0x40013400
 800f380:	40015000 	.word	0x40015000
 800f384:	40014000 	.word	0x40014000
 800f388:	40014400 	.word	0x40014400
 800f38c:	40014800 	.word	0x40014800

0800f390 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f390:	b480      	push	{r7}
 800f392:	b087      	sub	sp, #28
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6a1b      	ldr	r3, [r3, #32]
 800f39e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6a1b      	ldr	r3, [r3, #32]
 800f3a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	69db      	ldr	r3, [r3, #28]
 800f3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f3be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f3c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f023 0303 	bic.w	r3, r3, #3
 800f3ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	4313      	orrs	r3, r2
 800f3d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f3dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	689b      	ldr	r3, [r3, #8]
 800f3e2:	021b      	lsls	r3, r3, #8
 800f3e4:	697a      	ldr	r2, [r7, #20]
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	4a2b      	ldr	r2, [pc, #172]	@ (800f49c <TIM_OC3_SetConfig+0x10c>)
 800f3ee:	4293      	cmp	r3, r2
 800f3f0:	d007      	beq.n	800f402 <TIM_OC3_SetConfig+0x72>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	4a2a      	ldr	r2, [pc, #168]	@ (800f4a0 <TIM_OC3_SetConfig+0x110>)
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	d003      	beq.n	800f402 <TIM_OC3_SetConfig+0x72>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	4a29      	ldr	r2, [pc, #164]	@ (800f4a4 <TIM_OC3_SetConfig+0x114>)
 800f3fe:	4293      	cmp	r3, r2
 800f400:	d10d      	bne.n	800f41e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	68db      	ldr	r3, [r3, #12]
 800f40e:	021b      	lsls	r3, r3, #8
 800f410:	697a      	ldr	r2, [r7, #20]
 800f412:	4313      	orrs	r3, r2
 800f414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f41c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	4a1e      	ldr	r2, [pc, #120]	@ (800f49c <TIM_OC3_SetConfig+0x10c>)
 800f422:	4293      	cmp	r3, r2
 800f424:	d013      	beq.n	800f44e <TIM_OC3_SetConfig+0xbe>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	4a1d      	ldr	r2, [pc, #116]	@ (800f4a0 <TIM_OC3_SetConfig+0x110>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d00f      	beq.n	800f44e <TIM_OC3_SetConfig+0xbe>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	4a1d      	ldr	r2, [pc, #116]	@ (800f4a8 <TIM_OC3_SetConfig+0x118>)
 800f432:	4293      	cmp	r3, r2
 800f434:	d00b      	beq.n	800f44e <TIM_OC3_SetConfig+0xbe>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	4a1c      	ldr	r2, [pc, #112]	@ (800f4ac <TIM_OC3_SetConfig+0x11c>)
 800f43a:	4293      	cmp	r3, r2
 800f43c:	d007      	beq.n	800f44e <TIM_OC3_SetConfig+0xbe>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4a1b      	ldr	r2, [pc, #108]	@ (800f4b0 <TIM_OC3_SetConfig+0x120>)
 800f442:	4293      	cmp	r3, r2
 800f444:	d003      	beq.n	800f44e <TIM_OC3_SetConfig+0xbe>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4a16      	ldr	r2, [pc, #88]	@ (800f4a4 <TIM_OC3_SetConfig+0x114>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d113      	bne.n	800f476 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f45c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	695b      	ldr	r3, [r3, #20]
 800f462:	011b      	lsls	r3, r3, #4
 800f464:	693a      	ldr	r2, [r7, #16]
 800f466:	4313      	orrs	r3, r2
 800f468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	699b      	ldr	r3, [r3, #24]
 800f46e:	011b      	lsls	r3, r3, #4
 800f470:	693a      	ldr	r2, [r7, #16]
 800f472:	4313      	orrs	r3, r2
 800f474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	693a      	ldr	r2, [r7, #16]
 800f47a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	68fa      	ldr	r2, [r7, #12]
 800f480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	685a      	ldr	r2, [r3, #4]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	697a      	ldr	r2, [r7, #20]
 800f48e:	621a      	str	r2, [r3, #32]
}
 800f490:	bf00      	nop
 800f492:	371c      	adds	r7, #28
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr
 800f49c:	40012c00 	.word	0x40012c00
 800f4a0:	40013400 	.word	0x40013400
 800f4a4:	40015000 	.word	0x40015000
 800f4a8:	40014000 	.word	0x40014000
 800f4ac:	40014400 	.word	0x40014400
 800f4b0:	40014800 	.word	0x40014800

0800f4b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b087      	sub	sp, #28
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6a1b      	ldr	r3, [r3, #32]
 800f4c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6a1b      	ldr	r3, [r3, #32]
 800f4c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	685b      	ldr	r3, [r3, #4]
 800f4d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	69db      	ldr	r3, [r3, #28]
 800f4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f4e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f4e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f4ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	021b      	lsls	r3, r3, #8
 800f4f6:	68fa      	ldr	r2, [r7, #12]
 800f4f8:	4313      	orrs	r3, r2
 800f4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f502:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	689b      	ldr	r3, [r3, #8]
 800f508:	031b      	lsls	r3, r3, #12
 800f50a:	697a      	ldr	r2, [r7, #20]
 800f50c:	4313      	orrs	r3, r2
 800f50e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	4a2c      	ldr	r2, [pc, #176]	@ (800f5c4 <TIM_OC4_SetConfig+0x110>)
 800f514:	4293      	cmp	r3, r2
 800f516:	d007      	beq.n	800f528 <TIM_OC4_SetConfig+0x74>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	4a2b      	ldr	r2, [pc, #172]	@ (800f5c8 <TIM_OC4_SetConfig+0x114>)
 800f51c:	4293      	cmp	r3, r2
 800f51e:	d003      	beq.n	800f528 <TIM_OC4_SetConfig+0x74>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4a2a      	ldr	r2, [pc, #168]	@ (800f5cc <TIM_OC4_SetConfig+0x118>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d10d      	bne.n	800f544 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f52e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	68db      	ldr	r3, [r3, #12]
 800f534:	031b      	lsls	r3, r3, #12
 800f536:	697a      	ldr	r2, [r7, #20]
 800f538:	4313      	orrs	r3, r2
 800f53a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f542:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	4a1f      	ldr	r2, [pc, #124]	@ (800f5c4 <TIM_OC4_SetConfig+0x110>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d013      	beq.n	800f574 <TIM_OC4_SetConfig+0xc0>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	4a1e      	ldr	r2, [pc, #120]	@ (800f5c8 <TIM_OC4_SetConfig+0x114>)
 800f550:	4293      	cmp	r3, r2
 800f552:	d00f      	beq.n	800f574 <TIM_OC4_SetConfig+0xc0>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	4a1e      	ldr	r2, [pc, #120]	@ (800f5d0 <TIM_OC4_SetConfig+0x11c>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d00b      	beq.n	800f574 <TIM_OC4_SetConfig+0xc0>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	4a1d      	ldr	r2, [pc, #116]	@ (800f5d4 <TIM_OC4_SetConfig+0x120>)
 800f560:	4293      	cmp	r3, r2
 800f562:	d007      	beq.n	800f574 <TIM_OC4_SetConfig+0xc0>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	4a1c      	ldr	r2, [pc, #112]	@ (800f5d8 <TIM_OC4_SetConfig+0x124>)
 800f568:	4293      	cmp	r3, r2
 800f56a:	d003      	beq.n	800f574 <TIM_OC4_SetConfig+0xc0>
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	4a17      	ldr	r2, [pc, #92]	@ (800f5cc <TIM_OC4_SetConfig+0x118>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d113      	bne.n	800f59c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f57a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f582:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	695b      	ldr	r3, [r3, #20]
 800f588:	019b      	lsls	r3, r3, #6
 800f58a:	693a      	ldr	r2, [r7, #16]
 800f58c:	4313      	orrs	r3, r2
 800f58e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	699b      	ldr	r3, [r3, #24]
 800f594:	019b      	lsls	r3, r3, #6
 800f596:	693a      	ldr	r2, [r7, #16]
 800f598:	4313      	orrs	r3, r2
 800f59a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	693a      	ldr	r2, [r7, #16]
 800f5a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	68fa      	ldr	r2, [r7, #12]
 800f5a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	685a      	ldr	r2, [r3, #4]
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	697a      	ldr	r2, [r7, #20]
 800f5b4:	621a      	str	r2, [r3, #32]
}
 800f5b6:	bf00      	nop
 800f5b8:	371c      	adds	r7, #28
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr
 800f5c2:	bf00      	nop
 800f5c4:	40012c00 	.word	0x40012c00
 800f5c8:	40013400 	.word	0x40013400
 800f5cc:	40015000 	.word	0x40015000
 800f5d0:	40014000 	.word	0x40014000
 800f5d4:	40014400 	.word	0x40014400
 800f5d8:	40014800 	.word	0x40014800

0800f5dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f5dc:	b480      	push	{r7}
 800f5de:	b087      	sub	sp, #28
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6a1b      	ldr	r3, [r3, #32]
 800f5ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6a1b      	ldr	r3, [r3, #32]
 800f5f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f60a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f60e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	68fa      	ldr	r2, [r7, #12]
 800f616:	4313      	orrs	r3, r2
 800f618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f620:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	689b      	ldr	r3, [r3, #8]
 800f626:	041b      	lsls	r3, r3, #16
 800f628:	693a      	ldr	r2, [r7, #16]
 800f62a:	4313      	orrs	r3, r2
 800f62c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4a19      	ldr	r2, [pc, #100]	@ (800f698 <TIM_OC5_SetConfig+0xbc>)
 800f632:	4293      	cmp	r3, r2
 800f634:	d013      	beq.n	800f65e <TIM_OC5_SetConfig+0x82>
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	4a18      	ldr	r2, [pc, #96]	@ (800f69c <TIM_OC5_SetConfig+0xc0>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d00f      	beq.n	800f65e <TIM_OC5_SetConfig+0x82>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	4a17      	ldr	r2, [pc, #92]	@ (800f6a0 <TIM_OC5_SetConfig+0xc4>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d00b      	beq.n	800f65e <TIM_OC5_SetConfig+0x82>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	4a16      	ldr	r2, [pc, #88]	@ (800f6a4 <TIM_OC5_SetConfig+0xc8>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d007      	beq.n	800f65e <TIM_OC5_SetConfig+0x82>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	4a15      	ldr	r2, [pc, #84]	@ (800f6a8 <TIM_OC5_SetConfig+0xcc>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d003      	beq.n	800f65e <TIM_OC5_SetConfig+0x82>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	4a14      	ldr	r2, [pc, #80]	@ (800f6ac <TIM_OC5_SetConfig+0xd0>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d109      	bne.n	800f672 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f664:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	695b      	ldr	r3, [r3, #20]
 800f66a:	021b      	lsls	r3, r3, #8
 800f66c:	697a      	ldr	r2, [r7, #20]
 800f66e:	4313      	orrs	r3, r2
 800f670:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	697a      	ldr	r2, [r7, #20]
 800f676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	68fa      	ldr	r2, [r7, #12]
 800f67c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	685a      	ldr	r2, [r3, #4]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	693a      	ldr	r2, [r7, #16]
 800f68a:	621a      	str	r2, [r3, #32]
}
 800f68c:	bf00      	nop
 800f68e:	371c      	adds	r7, #28
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr
 800f698:	40012c00 	.word	0x40012c00
 800f69c:	40013400 	.word	0x40013400
 800f6a0:	40014000 	.word	0x40014000
 800f6a4:	40014400 	.word	0x40014400
 800f6a8:	40014800 	.word	0x40014800
 800f6ac:	40015000 	.word	0x40015000

0800f6b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b087      	sub	sp, #28
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
 800f6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6a1b      	ldr	r3, [r3, #32]
 800f6be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6a1b      	ldr	r3, [r3, #32]
 800f6c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f6de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f6e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	021b      	lsls	r3, r3, #8
 800f6ea:	68fa      	ldr	r2, [r7, #12]
 800f6ec:	4313      	orrs	r3, r2
 800f6ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f6f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	689b      	ldr	r3, [r3, #8]
 800f6fc:	051b      	lsls	r3, r3, #20
 800f6fe:	693a      	ldr	r2, [r7, #16]
 800f700:	4313      	orrs	r3, r2
 800f702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4a1a      	ldr	r2, [pc, #104]	@ (800f770 <TIM_OC6_SetConfig+0xc0>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d013      	beq.n	800f734 <TIM_OC6_SetConfig+0x84>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	4a19      	ldr	r2, [pc, #100]	@ (800f774 <TIM_OC6_SetConfig+0xc4>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d00f      	beq.n	800f734 <TIM_OC6_SetConfig+0x84>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	4a18      	ldr	r2, [pc, #96]	@ (800f778 <TIM_OC6_SetConfig+0xc8>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d00b      	beq.n	800f734 <TIM_OC6_SetConfig+0x84>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	4a17      	ldr	r2, [pc, #92]	@ (800f77c <TIM_OC6_SetConfig+0xcc>)
 800f720:	4293      	cmp	r3, r2
 800f722:	d007      	beq.n	800f734 <TIM_OC6_SetConfig+0x84>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	4a16      	ldr	r2, [pc, #88]	@ (800f780 <TIM_OC6_SetConfig+0xd0>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	d003      	beq.n	800f734 <TIM_OC6_SetConfig+0x84>
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	4a15      	ldr	r2, [pc, #84]	@ (800f784 <TIM_OC6_SetConfig+0xd4>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d109      	bne.n	800f748 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f73a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	695b      	ldr	r3, [r3, #20]
 800f740:	029b      	lsls	r3, r3, #10
 800f742:	697a      	ldr	r2, [r7, #20]
 800f744:	4313      	orrs	r3, r2
 800f746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	697a      	ldr	r2, [r7, #20]
 800f74c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	68fa      	ldr	r2, [r7, #12]
 800f752:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	685a      	ldr	r2, [r3, #4]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	693a      	ldr	r2, [r7, #16]
 800f760:	621a      	str	r2, [r3, #32]
}
 800f762:	bf00      	nop
 800f764:	371c      	adds	r7, #28
 800f766:	46bd      	mov	sp, r7
 800f768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76c:	4770      	bx	lr
 800f76e:	bf00      	nop
 800f770:	40012c00 	.word	0x40012c00
 800f774:	40013400 	.word	0x40013400
 800f778:	40014000 	.word	0x40014000
 800f77c:	40014400 	.word	0x40014400
 800f780:	40014800 	.word	0x40014800
 800f784:	40015000 	.word	0x40015000

0800f788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f788:	b480      	push	{r7}
 800f78a:	b087      	sub	sp, #28
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	60f8      	str	r0, [r7, #12]
 800f790:	60b9      	str	r1, [r7, #8]
 800f792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	6a1b      	ldr	r3, [r3, #32]
 800f798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	6a1b      	ldr	r3, [r3, #32]
 800f79e:	f023 0201 	bic.w	r2, r3, #1
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	699b      	ldr	r3, [r3, #24]
 800f7aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f7ac:	693b      	ldr	r3, [r7, #16]
 800f7ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f7b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	011b      	lsls	r3, r3, #4
 800f7b8:	693a      	ldr	r2, [r7, #16]
 800f7ba:	4313      	orrs	r3, r2
 800f7bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f7be:	697b      	ldr	r3, [r7, #20]
 800f7c0:	f023 030a 	bic.w	r3, r3, #10
 800f7c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f7c6:	697a      	ldr	r2, [r7, #20]
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	4313      	orrs	r3, r2
 800f7cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	693a      	ldr	r2, [r7, #16]
 800f7d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	697a      	ldr	r2, [r7, #20]
 800f7d8:	621a      	str	r2, [r3, #32]
}
 800f7da:	bf00      	nop
 800f7dc:	371c      	adds	r7, #28
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e4:	4770      	bx	lr

0800f7e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f7e6:	b480      	push	{r7}
 800f7e8:	b087      	sub	sp, #28
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	60f8      	str	r0, [r7, #12]
 800f7ee:	60b9      	str	r1, [r7, #8]
 800f7f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	6a1b      	ldr	r3, [r3, #32]
 800f7f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	6a1b      	ldr	r3, [r3, #32]
 800f7fc:	f023 0210 	bic.w	r2, r3, #16
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	699b      	ldr	r3, [r3, #24]
 800f808:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f810:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	031b      	lsls	r3, r3, #12
 800f816:	693a      	ldr	r2, [r7, #16]
 800f818:	4313      	orrs	r3, r2
 800f81a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f822:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	011b      	lsls	r3, r3, #4
 800f828:	697a      	ldr	r2, [r7, #20]
 800f82a:	4313      	orrs	r3, r2
 800f82c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	693a      	ldr	r2, [r7, #16]
 800f832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	697a      	ldr	r2, [r7, #20]
 800f838:	621a      	str	r2, [r3, #32]
}
 800f83a:	bf00      	nop
 800f83c:	371c      	adds	r7, #28
 800f83e:	46bd      	mov	sp, r7
 800f840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f844:	4770      	bx	lr

0800f846 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f846:	b480      	push	{r7}
 800f848:	b085      	sub	sp, #20
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	6078      	str	r0, [r7, #4]
 800f84e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	689b      	ldr	r3, [r3, #8]
 800f854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f85c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f860:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f862:	683a      	ldr	r2, [r7, #0]
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	4313      	orrs	r3, r2
 800f868:	f043 0307 	orr.w	r3, r3, #7
 800f86c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	68fa      	ldr	r2, [r7, #12]
 800f872:	609a      	str	r2, [r3, #8]
}
 800f874:	bf00      	nop
 800f876:	3714      	adds	r7, #20
 800f878:	46bd      	mov	sp, r7
 800f87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87e:	4770      	bx	lr

0800f880 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f880:	b480      	push	{r7}
 800f882:	b087      	sub	sp, #28
 800f884:	af00      	add	r7, sp, #0
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	60b9      	str	r1, [r7, #8]
 800f88a:	607a      	str	r2, [r7, #4]
 800f88c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	689b      	ldr	r3, [r3, #8]
 800f892:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f89a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	021a      	lsls	r2, r3, #8
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	431a      	orrs	r2, r3
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	4313      	orrs	r3, r2
 800f8a8:	697a      	ldr	r2, [r7, #20]
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	697a      	ldr	r2, [r7, #20]
 800f8b2:	609a      	str	r2, [r3, #8]
}
 800f8b4:	bf00      	nop
 800f8b6:	371c      	adds	r7, #28
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b087      	sub	sp, #28
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	60f8      	str	r0, [r7, #12]
 800f8c8:	60b9      	str	r1, [r7, #8]
 800f8ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	f003 031f 	and.w	r3, r3, #31
 800f8d2:	2201      	movs	r2, #1
 800f8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800f8d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	6a1a      	ldr	r2, [r3, #32]
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	43db      	mvns	r3, r3
 800f8e2:	401a      	ands	r2, r3
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	6a1a      	ldr	r2, [r3, #32]
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	f003 031f 	and.w	r3, r3, #31
 800f8f2:	6879      	ldr	r1, [r7, #4]
 800f8f4:	fa01 f303 	lsl.w	r3, r1, r3
 800f8f8:	431a      	orrs	r2, r3
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	621a      	str	r2, [r3, #32]
}
 800f8fe:	bf00      	nop
 800f900:	371c      	adds	r7, #28
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr
	...

0800f90c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	4a26      	ldr	r2, [pc, #152]	@ (800f9b0 <TIM_ResetCallback+0xa4>)
 800f918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	4a25      	ldr	r2, [pc, #148]	@ (800f9b4 <TIM_ResetCallback+0xa8>)
 800f920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4a24      	ldr	r2, [pc, #144]	@ (800f9b8 <TIM_ResetCallback+0xac>)
 800f928:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4a23      	ldr	r2, [pc, #140]	@ (800f9bc <TIM_ResetCallback+0xb0>)
 800f930:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	4a22      	ldr	r2, [pc, #136]	@ (800f9c0 <TIM_ResetCallback+0xb4>)
 800f938:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	4a21      	ldr	r2, [pc, #132]	@ (800f9c4 <TIM_ResetCallback+0xb8>)
 800f940:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	4a20      	ldr	r2, [pc, #128]	@ (800f9c8 <TIM_ResetCallback+0xbc>)
 800f948:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4a1f      	ldr	r2, [pc, #124]	@ (800f9cc <TIM_ResetCallback+0xc0>)
 800f950:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4a1e      	ldr	r2, [pc, #120]	@ (800f9d0 <TIM_ResetCallback+0xc4>)
 800f958:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	4a1d      	ldr	r2, [pc, #116]	@ (800f9d4 <TIM_ResetCallback+0xc8>)
 800f960:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4a1c      	ldr	r2, [pc, #112]	@ (800f9d8 <TIM_ResetCallback+0xcc>)
 800f968:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	4a1b      	ldr	r2, [pc, #108]	@ (800f9dc <TIM_ResetCallback+0xd0>)
 800f970:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	4a1a      	ldr	r2, [pc, #104]	@ (800f9e0 <TIM_ResetCallback+0xd4>)
 800f978:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	4a19      	ldr	r2, [pc, #100]	@ (800f9e4 <TIM_ResetCallback+0xd8>)
 800f980:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	4a18      	ldr	r2, [pc, #96]	@ (800f9e8 <TIM_ResetCallback+0xdc>)
 800f988:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	4a17      	ldr	r2, [pc, #92]	@ (800f9ec <TIM_ResetCallback+0xe0>)
 800f990:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	4a16      	ldr	r2, [pc, #88]	@ (800f9f0 <TIM_ResetCallback+0xe4>)
 800f998:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	4a15      	ldr	r2, [pc, #84]	@ (800f9f4 <TIM_ResetCallback+0xe8>)
 800f9a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800f9a4:	bf00      	nop
 800f9a6:	370c      	adds	r7, #12
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr
 800f9b0:	0800857d 	.word	0x0800857d
 800f9b4:	0800ec59 	.word	0x0800ec59
 800f9b8:	0800ecd1 	.word	0x0800ecd1
 800f9bc:	0800ece5 	.word	0x0800ece5
 800f9c0:	0800ec81 	.word	0x0800ec81
 800f9c4:	0800ec95 	.word	0x0800ec95
 800f9c8:	0800ec6d 	.word	0x0800ec6d
 800f9cc:	0800eca9 	.word	0x0800eca9
 800f9d0:	0800ecbd 	.word	0x0800ecbd
 800f9d4:	0800ecf9 	.word	0x0800ecf9
 800f9d8:	0800fc4d 	.word	0x0800fc4d
 800f9dc:	0800fc61 	.word	0x0800fc61
 800f9e0:	0800fc75 	.word	0x0800fc75
 800f9e4:	0800fc89 	.word	0x0800fc89
 800f9e8:	0800fc9d 	.word	0x0800fc9d
 800f9ec:	0800fcb1 	.word	0x0800fcb1
 800f9f0:	0800fcc5 	.word	0x0800fcc5
 800f9f4:	0800fcd9 	.word	0x0800fcd9

0800f9f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b085      	sub	sp, #20
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fa08:	2b01      	cmp	r3, #1
 800fa0a:	d101      	bne.n	800fa10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fa0c:	2302      	movs	r3, #2
 800fa0e:	e074      	b.n	800fafa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2201      	movs	r2, #1
 800fa14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2202      	movs	r2, #2
 800fa1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	689b      	ldr	r3, [r3, #8]
 800fa2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	4a34      	ldr	r2, [pc, #208]	@ (800fb08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d009      	beq.n	800fa4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	4a33      	ldr	r2, [pc, #204]	@ (800fb0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d004      	beq.n	800fa4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	4a31      	ldr	r2, [pc, #196]	@ (800fb10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d108      	bne.n	800fa60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fa54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	685b      	ldr	r3, [r3, #4]
 800fa5a:	68fa      	ldr	r2, [r7, #12]
 800fa5c:	4313      	orrs	r3, r2
 800fa5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800fa66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	68fa      	ldr	r2, [r7, #12]
 800fa72:	4313      	orrs	r3, r2
 800fa74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	68fa      	ldr	r2, [r7, #12]
 800fa7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	4a21      	ldr	r2, [pc, #132]	@ (800fb08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fa84:	4293      	cmp	r3, r2
 800fa86:	d022      	beq.n	800face <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa90:	d01d      	beq.n	800face <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	4a1f      	ldr	r2, [pc, #124]	@ (800fb14 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d018      	beq.n	800face <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	4a1d      	ldr	r2, [pc, #116]	@ (800fb18 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800faa2:	4293      	cmp	r3, r2
 800faa4:	d013      	beq.n	800face <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	4a1c      	ldr	r2, [pc, #112]	@ (800fb1c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800faac:	4293      	cmp	r3, r2
 800faae:	d00e      	beq.n	800face <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	4a15      	ldr	r2, [pc, #84]	@ (800fb0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d009      	beq.n	800face <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	4a18      	ldr	r2, [pc, #96]	@ (800fb20 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800fac0:	4293      	cmp	r3, r2
 800fac2:	d004      	beq.n	800face <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4a11      	ldr	r2, [pc, #68]	@ (800fb10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d10c      	bne.n	800fae8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	689b      	ldr	r3, [r3, #8]
 800fada:	68ba      	ldr	r2, [r7, #8]
 800fadc:	4313      	orrs	r3, r2
 800fade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	68ba      	ldr	r2, [r7, #8]
 800fae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2201      	movs	r2, #1
 800faec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2200      	movs	r2, #0
 800faf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800faf8:	2300      	movs	r3, #0
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3714      	adds	r7, #20
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr
 800fb06:	bf00      	nop
 800fb08:	40012c00 	.word	0x40012c00
 800fb0c:	40013400 	.word	0x40013400
 800fb10:	40015000 	.word	0x40015000
 800fb14:	40000400 	.word	0x40000400
 800fb18:	40000800 	.word	0x40000800
 800fb1c:	40000c00 	.word	0x40000c00
 800fb20:	40014000 	.word	0x40014000

0800fb24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b085      	sub	sp, #20
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	d101      	bne.n	800fb40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fb3c:	2302      	movs	r3, #2
 800fb3e:	e078      	b.n	800fc32 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2201      	movs	r2, #1
 800fb44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	68db      	ldr	r3, [r3, #12]
 800fb52:	4313      	orrs	r3, r2
 800fb54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	689b      	ldr	r3, [r3, #8]
 800fb60:	4313      	orrs	r3, r2
 800fb62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	685b      	ldr	r3, [r3, #4]
 800fb6e:	4313      	orrs	r3, r2
 800fb70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	4313      	orrs	r3, r2
 800fb7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	691b      	ldr	r3, [r3, #16]
 800fb8a:	4313      	orrs	r3, r2
 800fb8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	695b      	ldr	r3, [r3, #20]
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fba6:	4313      	orrs	r3, r2
 800fba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	699b      	ldr	r3, [r3, #24]
 800fbb4:	041b      	lsls	r3, r3, #16
 800fbb6:	4313      	orrs	r3, r2
 800fbb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	69db      	ldr	r3, [r3, #28]
 800fbc4:	4313      	orrs	r3, r2
 800fbc6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4a1c      	ldr	r2, [pc, #112]	@ (800fc40 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d009      	beq.n	800fbe6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	4a1b      	ldr	r2, [pc, #108]	@ (800fc44 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800fbd8:	4293      	cmp	r3, r2
 800fbda:	d004      	beq.n	800fbe6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	4a19      	ldr	r2, [pc, #100]	@ (800fc48 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d11c      	bne.n	800fc20 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbf0:	051b      	lsls	r3, r3, #20
 800fbf2:	4313      	orrs	r3, r2
 800fbf4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	6a1b      	ldr	r3, [r3, #32]
 800fc00:	4313      	orrs	r3, r2
 800fc02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc0e:	4313      	orrs	r3, r2
 800fc10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc1c:	4313      	orrs	r3, r2
 800fc1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	68fa      	ldr	r2, [r7, #12]
 800fc26:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fc30:	2300      	movs	r3, #0
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3714      	adds	r7, #20
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop
 800fc40:	40012c00 	.word	0x40012c00
 800fc44:	40013400 	.word	0x40013400
 800fc48:	40015000 	.word	0x40015000

0800fc4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b083      	sub	sp, #12
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fc54:	bf00      	nop
 800fc56:	370c      	adds	r7, #12
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr

0800fc60 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800fc60:	b480      	push	{r7}
 800fc62:	b083      	sub	sp, #12
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800fc68:	bf00      	nop
 800fc6a:	370c      	adds	r7, #12
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc72:	4770      	bx	lr

0800fc74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b083      	sub	sp, #12
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fc7c:	bf00      	nop
 800fc7e:	370c      	adds	r7, #12
 800fc80:	46bd      	mov	sp, r7
 800fc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc86:	4770      	bx	lr

0800fc88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b083      	sub	sp, #12
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fc90:	bf00      	nop
 800fc92:	370c      	adds	r7, #12
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr

0800fc9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b083      	sub	sp, #12
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800fca4:	bf00      	nop
 800fca6:	370c      	adds	r7, #12
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcae:	4770      	bx	lr

0800fcb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b083      	sub	sp, #12
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800fcb8:	bf00      	nop
 800fcba:	370c      	adds	r7, #12
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc2:	4770      	bx	lr

0800fcc4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800fccc:	bf00      	nop
 800fcce:	370c      	adds	r7, #12
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr

0800fcd8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b083      	sub	sp, #12
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800fce0:	bf00      	nop
 800fce2:	370c      	adds	r7, #12
 800fce4:	46bd      	mov	sp, r7
 800fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcea:	4770      	bx	lr

0800fcec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d101      	bne.n	800fcfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	e050      	b.n	800fda0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d114      	bne.n	800fd32 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f000 fde5 	bl	80108e0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d103      	bne.n	800fd28 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	4a21      	ldr	r2, [pc, #132]	@ (800fda8 <HAL_UART_Init+0xbc>)
 800fd24:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2224      	movs	r2, #36	@ 0x24
 800fd36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	681a      	ldr	r2, [r3, #0]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f022 0201 	bic.w	r2, r2, #1
 800fd48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d002      	beq.n	800fd58 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f001 f912 	bl	8010f7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f000 fe13 	bl	8010984 <UART_SetConfig>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	2b01      	cmp	r3, #1
 800fd62:	d101      	bne.n	800fd68 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800fd64:	2301      	movs	r3, #1
 800fd66:	e01b      	b.n	800fda0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	685a      	ldr	r2, [r3, #4]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fd76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	689a      	ldr	r2, [r3, #8]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fd86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	f042 0201 	orr.w	r2, r2, #1
 800fd96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fd98:	6878      	ldr	r0, [r7, #4]
 800fd9a:	f001 f991 	bl	80110c0 <UART_CheckIdleState>
 800fd9e:	4603      	mov	r3, r0
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3708      	adds	r7, #8
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	0800a18d 	.word	0x0800a18d

0800fdac <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800fdac:	b480      	push	{r7}
 800fdae:	b087      	sub	sp, #28
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	607a      	str	r2, [r7, #4]
 800fdb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d109      	bne.n	800fdd8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fdca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	e09c      	b.n	800ff12 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fdde:	2b20      	cmp	r3, #32
 800fde0:	d16c      	bne.n	800febc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800fde2:	7afb      	ldrb	r3, [r7, #11]
 800fde4:	2b0c      	cmp	r3, #12
 800fde6:	d85e      	bhi.n	800fea6 <HAL_UART_RegisterCallback+0xfa>
 800fde8:	a201      	add	r2, pc, #4	@ (adr r2, 800fdf0 <HAL_UART_RegisterCallback+0x44>)
 800fdea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdee:	bf00      	nop
 800fdf0:	0800fe25 	.word	0x0800fe25
 800fdf4:	0800fe2f 	.word	0x0800fe2f
 800fdf8:	0800fe39 	.word	0x0800fe39
 800fdfc:	0800fe43 	.word	0x0800fe43
 800fe00:	0800fe4d 	.word	0x0800fe4d
 800fe04:	0800fe57 	.word	0x0800fe57
 800fe08:	0800fe61 	.word	0x0800fe61
 800fe0c:	0800fe6b 	.word	0x0800fe6b
 800fe10:	0800fe75 	.word	0x0800fe75
 800fe14:	0800fe7f 	.word	0x0800fe7f
 800fe18:	0800fe89 	.word	0x0800fe89
 800fe1c:	0800fe93 	.word	0x0800fe93
 800fe20:	0800fe9d 	.word	0x0800fe9d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	687a      	ldr	r2, [r7, #4]
 800fe28:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800fe2c:	e070      	b.n	800ff10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800fe36:	e06b      	b.n	800ff10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	687a      	ldr	r2, [r7, #4]
 800fe3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800fe40:	e066      	b.n	800ff10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	687a      	ldr	r2, [r7, #4]
 800fe46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800fe4a:	e061      	b.n	800ff10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800fe54:	e05c      	b.n	800ff10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	687a      	ldr	r2, [r7, #4]
 800fe5a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800fe5e:	e057      	b.n	800ff10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	687a      	ldr	r2, [r7, #4]
 800fe64:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800fe68:	e052      	b.n	800ff10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	687a      	ldr	r2, [r7, #4]
 800fe6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800fe72:	e04d      	b.n	800ff10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800fe7c:	e048      	b.n	800ff10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	687a      	ldr	r2, [r7, #4]
 800fe82:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800fe86:	e043      	b.n	800ff10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	687a      	ldr	r2, [r7, #4]
 800fe8c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800fe90:	e03e      	b.n	800ff10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	687a      	ldr	r2, [r7, #4]
 800fe96:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800fe9a:	e039      	b.n	800ff10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800fea4:	e034      	b.n	800ff10 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800feac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800feb6:	2301      	movs	r3, #1
 800feb8:	75fb      	strb	r3, [r7, #23]
        break;
 800feba:	e029      	b.n	800ff10 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d11a      	bne.n	800fefc <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800fec6:	7afb      	ldrb	r3, [r7, #11]
 800fec8:	2b0b      	cmp	r3, #11
 800feca:	d002      	beq.n	800fed2 <HAL_UART_RegisterCallback+0x126>
 800fecc:	2b0c      	cmp	r3, #12
 800fece:	d005      	beq.n	800fedc <HAL_UART_RegisterCallback+0x130>
 800fed0:	e009      	b.n	800fee6 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	687a      	ldr	r2, [r7, #4]
 800fed6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800feda:	e019      	b.n	800ff10 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	687a      	ldr	r2, [r7, #4]
 800fee0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800fee4:	e014      	b.n	800ff10 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800feec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800fef6:	2301      	movs	r3, #1
 800fef8:	75fb      	strb	r3, [r7, #23]
        break;
 800fefa:	e009      	b.n	800ff10 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ff10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	371c      	adds	r7, #28
 800ff16:	46bd      	mov	sp, r7
 800ff18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1c:	4770      	bx	lr
 800ff1e:	bf00      	nop

0800ff20 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b08a      	sub	sp, #40	@ 0x28
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	60f8      	str	r0, [r7, #12]
 800ff28:	60b9      	str	r1, [r7, #8]
 800ff2a:	4613      	mov	r3, r2
 800ff2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ff34:	2b20      	cmp	r3, #32
 800ff36:	d167      	bne.n	8010008 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d002      	beq.n	800ff44 <HAL_UART_Transmit_DMA+0x24>
 800ff3e:	88fb      	ldrh	r3, [r7, #6]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d101      	bne.n	800ff48 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ff44:	2301      	movs	r3, #1
 800ff46:	e060      	b.n	801000a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	68ba      	ldr	r2, [r7, #8]
 800ff4c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	88fa      	ldrh	r2, [r7, #6]
 800ff52:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	88fa      	ldrh	r2, [r7, #6]
 800ff5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	2200      	movs	r2, #0
 800ff62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	2221      	movs	r2, #33	@ 0x21
 800ff6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d028      	beq.n	800ffc8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff7a:	4a26      	ldr	r2, [pc, #152]	@ (8010014 <HAL_UART_Transmit_DMA+0xf4>)
 800ff7c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff82:	4a25      	ldr	r2, [pc, #148]	@ (8010018 <HAL_UART_Transmit_DMA+0xf8>)
 800ff84:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff8a:	4a24      	ldr	r2, [pc, #144]	@ (801001c <HAL_UART_Transmit_DMA+0xfc>)
 800ff8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff92:	2200      	movs	r2, #0
 800ff94:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff9e:	4619      	mov	r1, r3
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	3328      	adds	r3, #40	@ 0x28
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	88fb      	ldrh	r3, [r7, #6]
 800ffaa:	f7fc f919 	bl	800c1e0 <HAL_DMA_Start_IT>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d009      	beq.n	800ffc8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2210      	movs	r2, #16
 800ffb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2220      	movs	r2, #32
 800ffc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	e020      	b.n	801000a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	2240      	movs	r2, #64	@ 0x40
 800ffce:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	3308      	adds	r3, #8
 800ffd6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	e853 3f00 	ldrex	r3, [r3]
 800ffde:	613b      	str	r3, [r7, #16]
   return(result);
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ffe6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	3308      	adds	r3, #8
 800ffee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fff0:	623a      	str	r2, [r7, #32]
 800fff2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fff4:	69f9      	ldr	r1, [r7, #28]
 800fff6:	6a3a      	ldr	r2, [r7, #32]
 800fff8:	e841 2300 	strex	r3, r2, [r1]
 800fffc:	61bb      	str	r3, [r7, #24]
   return(result);
 800fffe:	69bb      	ldr	r3, [r7, #24]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d1e5      	bne.n	800ffd0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010004:	2300      	movs	r3, #0
 8010006:	e000      	b.n	801000a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010008:	2302      	movs	r3, #2
  }
}
 801000a:	4618      	mov	r0, r3
 801000c:	3728      	adds	r7, #40	@ 0x28
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
 8010012:	bf00      	nop
 8010014:	0801158b 	.word	0x0801158b
 8010018:	08011629 	.word	0x08011629
 801001c:	080117c3 	.word	0x080117c3

08010020 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b08a      	sub	sp, #40	@ 0x28
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	60b9      	str	r1, [r7, #8]
 801002a:	4613      	mov	r3, r2
 801002c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010034:	2b20      	cmp	r3, #32
 8010036:	d137      	bne.n	80100a8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d002      	beq.n	8010044 <HAL_UART_Receive_DMA+0x24>
 801003e:	88fb      	ldrh	r3, [r7, #6]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d101      	bne.n	8010048 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010044:	2301      	movs	r3, #1
 8010046:	e030      	b.n	80100aa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	2200      	movs	r2, #0
 801004c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	4a18      	ldr	r2, [pc, #96]	@ (80100b4 <HAL_UART_Receive_DMA+0x94>)
 8010054:	4293      	cmp	r3, r2
 8010056:	d01f      	beq.n	8010098 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010062:	2b00      	cmp	r3, #0
 8010064:	d018      	beq.n	8010098 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	e853 3f00 	ldrex	r3, [r3]
 8010072:	613b      	str	r3, [r7, #16]
   return(result);
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801007a:	627b      	str	r3, [r7, #36]	@ 0x24
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	461a      	mov	r2, r3
 8010082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010084:	623b      	str	r3, [r7, #32]
 8010086:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010088:	69f9      	ldr	r1, [r7, #28]
 801008a:	6a3a      	ldr	r2, [r7, #32]
 801008c:	e841 2300 	strex	r3, r2, [r1]
 8010090:	61bb      	str	r3, [r7, #24]
   return(result);
 8010092:	69bb      	ldr	r3, [r7, #24]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d1e6      	bne.n	8010066 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010098:	88fb      	ldrh	r3, [r7, #6]
 801009a:	461a      	mov	r2, r3
 801009c:	68b9      	ldr	r1, [r7, #8]
 801009e:	68f8      	ldr	r0, [r7, #12]
 80100a0:	f001 f926 	bl	80112f0 <UART_Start_Receive_DMA>
 80100a4:	4603      	mov	r3, r0
 80100a6:	e000      	b.n	80100aa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80100a8:	2302      	movs	r3, #2
  }
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3728      	adds	r7, #40	@ 0x28
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
 80100b2:	bf00      	nop
 80100b4:	40008000 	.word	0x40008000

080100b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b0ba      	sub	sp, #232	@ 0xe8
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	69db      	ldr	r3, [r3, #28]
 80100c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	689b      	ldr	r3, [r3, #8]
 80100da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80100de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80100e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80100e6:	4013      	ands	r3, r2
 80100e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80100ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d11b      	bne.n	801012c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80100f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100f8:	f003 0320 	and.w	r3, r3, #32
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d015      	beq.n	801012c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010104:	f003 0320 	and.w	r3, r3, #32
 8010108:	2b00      	cmp	r3, #0
 801010a:	d105      	bne.n	8010118 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801010c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010114:	2b00      	cmp	r3, #0
 8010116:	d009      	beq.n	801012c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801011c:	2b00      	cmp	r3, #0
 801011e:	f000 8312 	beq.w	8010746 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	4798      	blx	r3
      }
      return;
 801012a:	e30c      	b.n	8010746 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801012c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010130:	2b00      	cmp	r3, #0
 8010132:	f000 8129 	beq.w	8010388 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010136:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801013a:	4b90      	ldr	r3, [pc, #576]	@ (801037c <HAL_UART_IRQHandler+0x2c4>)
 801013c:	4013      	ands	r3, r2
 801013e:	2b00      	cmp	r3, #0
 8010140:	d106      	bne.n	8010150 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010142:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010146:	4b8e      	ldr	r3, [pc, #568]	@ (8010380 <HAL_UART_IRQHandler+0x2c8>)
 8010148:	4013      	ands	r3, r2
 801014a:	2b00      	cmp	r3, #0
 801014c:	f000 811c 	beq.w	8010388 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010154:	f003 0301 	and.w	r3, r3, #1
 8010158:	2b00      	cmp	r3, #0
 801015a:	d011      	beq.n	8010180 <HAL_UART_IRQHandler+0xc8>
 801015c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010164:	2b00      	cmp	r3, #0
 8010166:	d00b      	beq.n	8010180 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	2201      	movs	r2, #1
 801016e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010176:	f043 0201 	orr.w	r2, r3, #1
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010184:	f003 0302 	and.w	r3, r3, #2
 8010188:	2b00      	cmp	r3, #0
 801018a:	d011      	beq.n	80101b0 <HAL_UART_IRQHandler+0xf8>
 801018c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010190:	f003 0301 	and.w	r3, r3, #1
 8010194:	2b00      	cmp	r3, #0
 8010196:	d00b      	beq.n	80101b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2202      	movs	r2, #2
 801019e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101a6:	f043 0204 	orr.w	r2, r3, #4
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80101b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101b4:	f003 0304 	and.w	r3, r3, #4
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d011      	beq.n	80101e0 <HAL_UART_IRQHandler+0x128>
 80101bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80101c0:	f003 0301 	and.w	r3, r3, #1
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d00b      	beq.n	80101e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	2204      	movs	r2, #4
 80101ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101d6:	f043 0202 	orr.w	r2, r3, #2
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80101e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101e4:	f003 0308 	and.w	r3, r3, #8
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d017      	beq.n	801021c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80101ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101f0:	f003 0320 	and.w	r3, r3, #32
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d105      	bne.n	8010204 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80101f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80101fc:	4b5f      	ldr	r3, [pc, #380]	@ (801037c <HAL_UART_IRQHandler+0x2c4>)
 80101fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010200:	2b00      	cmp	r3, #0
 8010202:	d00b      	beq.n	801021c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	2208      	movs	r2, #8
 801020a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010212:	f043 0208 	orr.w	r2, r3, #8
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801021c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010224:	2b00      	cmp	r3, #0
 8010226:	d012      	beq.n	801024e <HAL_UART_IRQHandler+0x196>
 8010228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801022c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010230:	2b00      	cmp	r3, #0
 8010232:	d00c      	beq.n	801024e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801023c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010244:	f043 0220 	orr.w	r2, r3, #32
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010254:	2b00      	cmp	r3, #0
 8010256:	f000 8278 	beq.w	801074a <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801025a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801025e:	f003 0320 	and.w	r3, r3, #32
 8010262:	2b00      	cmp	r3, #0
 8010264:	d013      	beq.n	801028e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801026a:	f003 0320 	and.w	r3, r3, #32
 801026e:	2b00      	cmp	r3, #0
 8010270:	d105      	bne.n	801027e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801027a:	2b00      	cmp	r3, #0
 801027c:	d007      	beq.n	801028e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010282:	2b00      	cmp	r3, #0
 8010284:	d003      	beq.n	801028e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010294:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	689b      	ldr	r3, [r3, #8]
 801029e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102a2:	2b40      	cmp	r3, #64	@ 0x40
 80102a4:	d005      	beq.n	80102b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80102a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80102aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d058      	beq.n	8010364 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f001 f903 	bl	80114be <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	689b      	ldr	r3, [r3, #8]
 80102be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102c2:	2b40      	cmp	r3, #64	@ 0x40
 80102c4:	d148      	bne.n	8010358 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	3308      	adds	r3, #8
 80102cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80102d4:	e853 3f00 	ldrex	r3, [r3]
 80102d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80102dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80102e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80102e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	3308      	adds	r3, #8
 80102ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80102f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80102f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80102fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010302:	e841 2300 	strex	r3, r2, [r1]
 8010306:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801030a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801030e:	2b00      	cmp	r3, #0
 8010310:	d1d9      	bne.n	80102c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010318:	2b00      	cmp	r3, #0
 801031a:	d017      	beq.n	801034c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010322:	4a18      	ldr	r2, [pc, #96]	@ (8010384 <HAL_UART_IRQHandler+0x2cc>)
 8010324:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801032c:	4618      	mov	r0, r3
 801032e:	f7fc f82b 	bl	800c388 <HAL_DMA_Abort_IT>
 8010332:	4603      	mov	r3, r0
 8010334:	2b00      	cmp	r3, #0
 8010336:	d01f      	beq.n	8010378 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801033e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010340:	687a      	ldr	r2, [r7, #4]
 8010342:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010346:	4610      	mov	r0, r2
 8010348:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801034a:	e015      	b.n	8010378 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010356:	e00f      	b.n	8010378 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010362:	e009      	b.n	8010378 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801036a:	6878      	ldr	r0, [r7, #4]
 801036c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2200      	movs	r2, #0
 8010372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010376:	e1e8      	b.n	801074a <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010378:	bf00      	nop
    return;
 801037a:	e1e6      	b.n	801074a <HAL_UART_IRQHandler+0x692>
 801037c:	10000001 	.word	0x10000001
 8010380:	04000120 	.word	0x04000120
 8010384:	08011847 	.word	0x08011847

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801038c:	2b01      	cmp	r3, #1
 801038e:	f040 8176 	bne.w	801067e <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010396:	f003 0310 	and.w	r3, r3, #16
 801039a:	2b00      	cmp	r3, #0
 801039c:	f000 816f 	beq.w	801067e <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80103a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80103a4:	f003 0310 	and.w	r3, r3, #16
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	f000 8168 	beq.w	801067e <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	2210      	movs	r2, #16
 80103b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	689b      	ldr	r3, [r3, #8]
 80103bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103c0:	2b40      	cmp	r3, #64	@ 0x40
 80103c2:	f040 80dc 	bne.w	801057e <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	685b      	ldr	r3, [r3, #4]
 80103d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80103d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80103d8:	2b00      	cmp	r3, #0
 80103da:	f000 80b1 	beq.w	8010540 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80103e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80103e8:	429a      	cmp	r2, r3
 80103ea:	f080 80a9 	bcs.w	8010540 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80103f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	f003 0320 	and.w	r3, r3, #32
 8010406:	2b00      	cmp	r3, #0
 8010408:	f040 8087 	bne.w	801051a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010414:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010418:	e853 3f00 	ldrex	r3, [r3]
 801041c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010420:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010428:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	461a      	mov	r2, r3
 8010432:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010436:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801043a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801043e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010442:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010446:	e841 2300 	strex	r3, r2, [r1]
 801044a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801044e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010452:	2b00      	cmp	r3, #0
 8010454:	d1da      	bne.n	801040c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	3308      	adds	r3, #8
 801045c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801045e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010460:	e853 3f00 	ldrex	r3, [r3]
 8010464:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010466:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010468:	f023 0301 	bic.w	r3, r3, #1
 801046c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	3308      	adds	r3, #8
 8010476:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801047a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801047e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010480:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010482:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010486:	e841 2300 	strex	r3, r2, [r1]
 801048a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801048c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801048e:	2b00      	cmp	r3, #0
 8010490:	d1e1      	bne.n	8010456 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	3308      	adds	r3, #8
 8010498:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801049a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801049c:	e853 3f00 	ldrex	r3, [r3]
 80104a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80104a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80104a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80104a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	3308      	adds	r3, #8
 80104b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80104b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80104b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80104bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80104be:	e841 2300 	strex	r3, r2, [r1]
 80104c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80104c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d1e3      	bne.n	8010492 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2220      	movs	r2, #32
 80104ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2200      	movs	r2, #0
 80104d6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104e0:	e853 3f00 	ldrex	r3, [r3]
 80104e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80104e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80104e8:	f023 0310 	bic.w	r3, r3, #16
 80104ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	461a      	mov	r2, r3
 80104f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80104fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80104fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010500:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010502:	e841 2300 	strex	r3, r2, [r1]
 8010506:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801050a:	2b00      	cmp	r3, #0
 801050c:	d1e4      	bne.n	80104d8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010514:	4618      	mov	r0, r3
 8010516:	f7fb fede 	bl	800c2d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2202      	movs	r2, #2
 801051e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010526:	687a      	ldr	r2, [r7, #4]
 8010528:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 801052c:	687a      	ldr	r2, [r7, #4]
 801052e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8010532:	b292      	uxth	r2, r2
 8010534:	1a8a      	subs	r2, r1, r2
 8010536:	b292      	uxth	r2, r2
 8010538:	4611      	mov	r1, r2
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801053e:	e106      	b.n	801074e <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801054a:	429a      	cmp	r2, r3
 801054c:	f040 80ff 	bne.w	801074e <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	f003 0320 	and.w	r3, r3, #32
 801055e:	2b20      	cmp	r3, #32
 8010560:	f040 80f5 	bne.w	801074e <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2202      	movs	r2, #2
 8010568:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010570:	687a      	ldr	r2, [r7, #4]
 8010572:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8010576:	4611      	mov	r1, r2
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	4798      	blx	r3
      return;
 801057c:	e0e7      	b.n	801074e <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801058a:	b29b      	uxth	r3, r3
 801058c:	1ad3      	subs	r3, r2, r3
 801058e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010598:	b29b      	uxth	r3, r3
 801059a:	2b00      	cmp	r3, #0
 801059c:	f000 80d9 	beq.w	8010752 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 80105a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	f000 80d4 	beq.w	8010752 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105b2:	e853 3f00 	ldrex	r3, [r3]
 80105b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80105b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80105be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	461a      	mov	r2, r3
 80105c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80105cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80105ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80105d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80105d4:	e841 2300 	strex	r3, r2, [r1]
 80105d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80105da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d1e4      	bne.n	80105aa <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	3308      	adds	r3, #8
 80105e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ea:	e853 3f00 	ldrex	r3, [r3]
 80105ee:	623b      	str	r3, [r7, #32]
   return(result);
 80105f0:	6a3b      	ldr	r3, [r7, #32]
 80105f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80105f6:	f023 0301 	bic.w	r3, r3, #1
 80105fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	3308      	adds	r3, #8
 8010604:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010608:	633a      	str	r2, [r7, #48]	@ 0x30
 801060a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801060c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801060e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010610:	e841 2300 	strex	r3, r2, [r1]
 8010614:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010618:	2b00      	cmp	r3, #0
 801061a:	d1e1      	bne.n	80105e0 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2220      	movs	r2, #32
 8010620:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2200      	movs	r2, #0
 8010628:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2200      	movs	r2, #0
 801062e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	e853 3f00 	ldrex	r3, [r3]
 801063c:	60fb      	str	r3, [r7, #12]
   return(result);
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	f023 0310 	bic.w	r3, r3, #16
 8010644:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	461a      	mov	r2, r3
 801064e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010652:	61fb      	str	r3, [r7, #28]
 8010654:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010656:	69b9      	ldr	r1, [r7, #24]
 8010658:	69fa      	ldr	r2, [r7, #28]
 801065a:	e841 2300 	strex	r3, r2, [r1]
 801065e:	617b      	str	r3, [r7, #20]
   return(result);
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d1e4      	bne.n	8010630 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2202      	movs	r2, #2
 801066a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010672:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8010676:	4611      	mov	r1, r2
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801067c:	e069      	b.n	8010752 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801067e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010682:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010686:	2b00      	cmp	r3, #0
 8010688:	d010      	beq.n	80106ac <HAL_UART_IRQHandler+0x5f4>
 801068a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801068e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010692:	2b00      	cmp	r3, #0
 8010694:	d00a      	beq.n	80106ac <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801069e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80106aa:	e055      	b.n	8010758 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80106ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80106b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d014      	beq.n	80106e2 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80106b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80106bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d105      	bne.n	80106d0 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80106c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80106c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d008      	beq.n	80106e2 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d03e      	beq.n	8010756 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	4798      	blx	r3
    }
    return;
 80106e0:	e039      	b.n	8010756 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80106e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80106e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d009      	beq.n	8010702 <HAL_UART_IRQHandler+0x64a>
 80106ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80106f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d003      	beq.n	8010702 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f001 f8b7 	bl	801186e <UART_EndTransmit_IT>
    return;
 8010700:	e02a      	b.n	8010758 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010706:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801070a:	2b00      	cmp	r3, #0
 801070c:	d00b      	beq.n	8010726 <HAL_UART_IRQHandler+0x66e>
 801070e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010712:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010716:	2b00      	cmp	r3, #0
 8010718:	d005      	beq.n	8010726 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010724:	e018      	b.n	8010758 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801072a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801072e:	2b00      	cmp	r3, #0
 8010730:	d012      	beq.n	8010758 <HAL_UART_IRQHandler+0x6a0>
 8010732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010736:	2b00      	cmp	r3, #0
 8010738:	da0e      	bge.n	8010758 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010744:	e008      	b.n	8010758 <HAL_UART_IRQHandler+0x6a0>
      return;
 8010746:	bf00      	nop
 8010748:	e006      	b.n	8010758 <HAL_UART_IRQHandler+0x6a0>
    return;
 801074a:	bf00      	nop
 801074c:	e004      	b.n	8010758 <HAL_UART_IRQHandler+0x6a0>
      return;
 801074e:	bf00      	nop
 8010750:	e002      	b.n	8010758 <HAL_UART_IRQHandler+0x6a0>
      return;
 8010752:	bf00      	nop
 8010754:	e000      	b.n	8010758 <HAL_UART_IRQHandler+0x6a0>
    return;
 8010756:	bf00      	nop
  }
}
 8010758:	37e8      	adds	r7, #232	@ 0xe8
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop

08010760 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010760:	b480      	push	{r7}
 8010762:	b083      	sub	sp, #12
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010768:	bf00      	nop
 801076a:	370c      	adds	r7, #12
 801076c:	46bd      	mov	sp, r7
 801076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010772:	4770      	bx	lr

08010774 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010774:	b480      	push	{r7}
 8010776:	b083      	sub	sp, #12
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801077c:	bf00      	nop
 801077e:	370c      	adds	r7, #12
 8010780:	46bd      	mov	sp, r7
 8010782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010786:	4770      	bx	lr

08010788 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010788:	b480      	push	{r7}
 801078a:	b083      	sub	sp, #12
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8010790:	bf00      	nop
 8010792:	370c      	adds	r7, #12
 8010794:	46bd      	mov	sp, r7
 8010796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079a:	4770      	bx	lr

0801079c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801079c:	b480      	push	{r7}
 801079e:	b083      	sub	sp, #12
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80107a4:	bf00      	nop
 80107a6:	370c      	adds	r7, #12
 80107a8:	46bd      	mov	sp, r7
 80107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ae:	4770      	bx	lr

080107b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80107b0:	b480      	push	{r7}
 80107b2:	b083      	sub	sp, #12
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80107b8:	bf00      	nop
 80107ba:	370c      	adds	r7, #12
 80107bc:	46bd      	mov	sp, r7
 80107be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c2:	4770      	bx	lr

080107c4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80107c4:	b480      	push	{r7}
 80107c6:	b083      	sub	sp, #12
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80107cc:	bf00      	nop
 80107ce:	370c      	adds	r7, #12
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr

080107d8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80107d8:	b480      	push	{r7}
 80107da:	b083      	sub	sp, #12
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80107e0:	bf00      	nop
 80107e2:	370c      	adds	r7, #12
 80107e4:	46bd      	mov	sp, r7
 80107e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ea:	4770      	bx	lr

080107ec <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80107ec:	b480      	push	{r7}
 80107ee:	b083      	sub	sp, #12
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80107f4:	bf00      	nop
 80107f6:	370c      	adds	r7, #12
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr

08010800 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010800:	b480      	push	{r7}
 8010802:	b083      	sub	sp, #12
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	460b      	mov	r3, r1
 801080a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801080c:	bf00      	nop
 801080e:	370c      	adds	r7, #12
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr

08010818 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	4a09      	ldr	r2, [pc, #36]	@ (801084c <HAL_UART_ReceiverTimeout_Config+0x34>)
 8010828:	4293      	cmp	r3, r2
 801082a:	d009      	beq.n	8010840 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	695b      	ldr	r3, [r3, #20]
 8010832:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	683a      	ldr	r2, [r7, #0]
 801083c:	430a      	orrs	r2, r1
 801083e:	615a      	str	r2, [r3, #20]
  }
}
 8010840:	bf00      	nop
 8010842:	370c      	adds	r7, #12
 8010844:	46bd      	mov	sp, r7
 8010846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084a:	4770      	bx	lr
 801084c:	40008000 	.word	0x40008000

08010850 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8010850:	b480      	push	{r7}
 8010852:	b083      	sub	sp, #12
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	4a18      	ldr	r2, [pc, #96]	@ (80108c0 <HAL_UART_EnableReceiverTimeout+0x70>)
 801085e:	4293      	cmp	r3, r2
 8010860:	d027      	beq.n	80108b2 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010868:	2b20      	cmp	r3, #32
 801086a:	d120      	bne.n	80108ae <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010872:	2b01      	cmp	r3, #1
 8010874:	d101      	bne.n	801087a <HAL_UART_EnableReceiverTimeout+0x2a>
 8010876:	2302      	movs	r3, #2
 8010878:	e01c      	b.n	80108b4 <HAL_UART_EnableReceiverTimeout+0x64>
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2201      	movs	r2, #1
 801087e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2224      	movs	r2, #36	@ 0x24
 8010886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	685a      	ldr	r2, [r3, #4]
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8010898:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2220      	movs	r2, #32
 801089e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2200      	movs	r2, #0
 80108a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 80108aa:	2300      	movs	r3, #0
 80108ac:	e002      	b.n	80108b4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 80108ae:	2302      	movs	r3, #2
 80108b0:	e000      	b.n	80108b4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 80108b2:	2301      	movs	r3, #1
  }
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	370c      	adds	r7, #12
 80108b8:	46bd      	mov	sp, r7
 80108ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108be:	4770      	bx	lr
 80108c0:	40008000 	.word	0x40008000

080108c4 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b083      	sub	sp, #12
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	370c      	adds	r7, #12
 80108d6:	46bd      	mov	sp, r7
 80108d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108dc:	4770      	bx	lr
	...

080108e0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80108e0:	b480      	push	{r7}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	4a1a      	ldr	r2, [pc, #104]	@ (8010954 <UART_InitCallbacksToDefault+0x74>)
 80108ec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	4a19      	ldr	r2, [pc, #100]	@ (8010958 <UART_InitCallbacksToDefault+0x78>)
 80108f4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	4a18      	ldr	r2, [pc, #96]	@ (801095c <UART_InitCallbacksToDefault+0x7c>)
 80108fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	4a17      	ldr	r2, [pc, #92]	@ (8010960 <UART_InitCallbacksToDefault+0x80>)
 8010904:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	4a16      	ldr	r2, [pc, #88]	@ (8010964 <UART_InitCallbacksToDefault+0x84>)
 801090c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	4a15      	ldr	r2, [pc, #84]	@ (8010968 <UART_InitCallbacksToDefault+0x88>)
 8010914:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	4a14      	ldr	r2, [pc, #80]	@ (801096c <UART_InitCallbacksToDefault+0x8c>)
 801091c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	4a13      	ldr	r2, [pc, #76]	@ (8010970 <UART_InitCallbacksToDefault+0x90>)
 8010924:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	4a12      	ldr	r2, [pc, #72]	@ (8010974 <UART_InitCallbacksToDefault+0x94>)
 801092c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	4a11      	ldr	r2, [pc, #68]	@ (8010978 <UART_InitCallbacksToDefault+0x98>)
 8010934:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	4a10      	ldr	r2, [pc, #64]	@ (801097c <UART_InitCallbacksToDefault+0x9c>)
 801093c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	4a0f      	ldr	r2, [pc, #60]	@ (8010980 <UART_InitCallbacksToDefault+0xa0>)
 8010944:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8010948:	bf00      	nop
 801094a:	370c      	adds	r7, #12
 801094c:	46bd      	mov	sp, r7
 801094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010952:	4770      	bx	lr
 8010954:	08010775 	.word	0x08010775
 8010958:	08010761 	.word	0x08010761
 801095c:	0801079d 	.word	0x0801079d
 8010960:	08010789 	.word	0x08010789
 8010964:	080107b1 	.word	0x080107b1
 8010968:	080107c5 	.word	0x080107c5
 801096c:	080107d9 	.word	0x080107d9
 8010970:	080107ed 	.word	0x080107ed
 8010974:	080118c9 	.word	0x080118c9
 8010978:	080118dd 	.word	0x080118dd
 801097c:	080118f1 	.word	0x080118f1
 8010980:	08010801 	.word	0x08010801

08010984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010988:	b08c      	sub	sp, #48	@ 0x30
 801098a:	af00      	add	r7, sp, #0
 801098c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801098e:	2300      	movs	r3, #0
 8010990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	689a      	ldr	r2, [r3, #8]
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	691b      	ldr	r3, [r3, #16]
 801099c:	431a      	orrs	r2, r3
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	695b      	ldr	r3, [r3, #20]
 80109a2:	431a      	orrs	r2, r3
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	69db      	ldr	r3, [r3, #28]
 80109a8:	4313      	orrs	r3, r2
 80109aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	681a      	ldr	r2, [r3, #0]
 80109b2:	4baa      	ldr	r3, [pc, #680]	@ (8010c5c <UART_SetConfig+0x2d8>)
 80109b4:	4013      	ands	r3, r2
 80109b6:	697a      	ldr	r2, [r7, #20]
 80109b8:	6812      	ldr	r2, [r2, #0]
 80109ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80109bc:	430b      	orrs	r3, r1
 80109be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	685b      	ldr	r3, [r3, #4]
 80109c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	68da      	ldr	r2, [r3, #12]
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	430a      	orrs	r2, r1
 80109d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	699b      	ldr	r3, [r3, #24]
 80109da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	4a9f      	ldr	r2, [pc, #636]	@ (8010c60 <UART_SetConfig+0x2dc>)
 80109e2:	4293      	cmp	r3, r2
 80109e4:	d004      	beq.n	80109f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	6a1b      	ldr	r3, [r3, #32]
 80109ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80109ec:	4313      	orrs	r3, r2
 80109ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	689b      	ldr	r3, [r3, #8]
 80109f6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80109fa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80109fe:	697a      	ldr	r2, [r7, #20]
 8010a00:	6812      	ldr	r2, [r2, #0]
 8010a02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010a04:	430b      	orrs	r3, r1
 8010a06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a0e:	f023 010f 	bic.w	r1, r3, #15
 8010a12:	697b      	ldr	r3, [r7, #20]
 8010a14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	430a      	orrs	r2, r1
 8010a1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	4a90      	ldr	r2, [pc, #576]	@ (8010c64 <UART_SetConfig+0x2e0>)
 8010a24:	4293      	cmp	r3, r2
 8010a26:	d125      	bne.n	8010a74 <UART_SetConfig+0xf0>
 8010a28:	4b8f      	ldr	r3, [pc, #572]	@ (8010c68 <UART_SetConfig+0x2e4>)
 8010a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a2e:	f003 0303 	and.w	r3, r3, #3
 8010a32:	2b03      	cmp	r3, #3
 8010a34:	d81a      	bhi.n	8010a6c <UART_SetConfig+0xe8>
 8010a36:	a201      	add	r2, pc, #4	@ (adr r2, 8010a3c <UART_SetConfig+0xb8>)
 8010a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a3c:	08010a4d 	.word	0x08010a4d
 8010a40:	08010a5d 	.word	0x08010a5d
 8010a44:	08010a55 	.word	0x08010a55
 8010a48:	08010a65 	.word	0x08010a65
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a52:	e116      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010a54:	2302      	movs	r3, #2
 8010a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a5a:	e112      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010a5c:	2304      	movs	r3, #4
 8010a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a62:	e10e      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010a64:	2308      	movs	r3, #8
 8010a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a6a:	e10a      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010a6c:	2310      	movs	r3, #16
 8010a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a72:	e106      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	4a7c      	ldr	r2, [pc, #496]	@ (8010c6c <UART_SetConfig+0x2e8>)
 8010a7a:	4293      	cmp	r3, r2
 8010a7c:	d138      	bne.n	8010af0 <UART_SetConfig+0x16c>
 8010a7e:	4b7a      	ldr	r3, [pc, #488]	@ (8010c68 <UART_SetConfig+0x2e4>)
 8010a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a84:	f003 030c 	and.w	r3, r3, #12
 8010a88:	2b0c      	cmp	r3, #12
 8010a8a:	d82d      	bhi.n	8010ae8 <UART_SetConfig+0x164>
 8010a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8010a94 <UART_SetConfig+0x110>)
 8010a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a92:	bf00      	nop
 8010a94:	08010ac9 	.word	0x08010ac9
 8010a98:	08010ae9 	.word	0x08010ae9
 8010a9c:	08010ae9 	.word	0x08010ae9
 8010aa0:	08010ae9 	.word	0x08010ae9
 8010aa4:	08010ad9 	.word	0x08010ad9
 8010aa8:	08010ae9 	.word	0x08010ae9
 8010aac:	08010ae9 	.word	0x08010ae9
 8010ab0:	08010ae9 	.word	0x08010ae9
 8010ab4:	08010ad1 	.word	0x08010ad1
 8010ab8:	08010ae9 	.word	0x08010ae9
 8010abc:	08010ae9 	.word	0x08010ae9
 8010ac0:	08010ae9 	.word	0x08010ae9
 8010ac4:	08010ae1 	.word	0x08010ae1
 8010ac8:	2300      	movs	r3, #0
 8010aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ace:	e0d8      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010ad0:	2302      	movs	r3, #2
 8010ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ad6:	e0d4      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010ad8:	2304      	movs	r3, #4
 8010ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ade:	e0d0      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010ae0:	2308      	movs	r3, #8
 8010ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ae6:	e0cc      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010ae8:	2310      	movs	r3, #16
 8010aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010aee:	e0c8      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	4a5e      	ldr	r2, [pc, #376]	@ (8010c70 <UART_SetConfig+0x2ec>)
 8010af6:	4293      	cmp	r3, r2
 8010af8:	d125      	bne.n	8010b46 <UART_SetConfig+0x1c2>
 8010afa:	4b5b      	ldr	r3, [pc, #364]	@ (8010c68 <UART_SetConfig+0x2e4>)
 8010afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b00:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8010b04:	2b30      	cmp	r3, #48	@ 0x30
 8010b06:	d016      	beq.n	8010b36 <UART_SetConfig+0x1b2>
 8010b08:	2b30      	cmp	r3, #48	@ 0x30
 8010b0a:	d818      	bhi.n	8010b3e <UART_SetConfig+0x1ba>
 8010b0c:	2b20      	cmp	r3, #32
 8010b0e:	d00a      	beq.n	8010b26 <UART_SetConfig+0x1a2>
 8010b10:	2b20      	cmp	r3, #32
 8010b12:	d814      	bhi.n	8010b3e <UART_SetConfig+0x1ba>
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d002      	beq.n	8010b1e <UART_SetConfig+0x19a>
 8010b18:	2b10      	cmp	r3, #16
 8010b1a:	d008      	beq.n	8010b2e <UART_SetConfig+0x1aa>
 8010b1c:	e00f      	b.n	8010b3e <UART_SetConfig+0x1ba>
 8010b1e:	2300      	movs	r3, #0
 8010b20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010b24:	e0ad      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010b26:	2302      	movs	r3, #2
 8010b28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010b2c:	e0a9      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010b2e:	2304      	movs	r3, #4
 8010b30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010b34:	e0a5      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010b36:	2308      	movs	r3, #8
 8010b38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010b3c:	e0a1      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010b3e:	2310      	movs	r3, #16
 8010b40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010b44:	e09d      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	4a4a      	ldr	r2, [pc, #296]	@ (8010c74 <UART_SetConfig+0x2f0>)
 8010b4c:	4293      	cmp	r3, r2
 8010b4e:	d125      	bne.n	8010b9c <UART_SetConfig+0x218>
 8010b50:	4b45      	ldr	r3, [pc, #276]	@ (8010c68 <UART_SetConfig+0x2e4>)
 8010b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8010b5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8010b5c:	d016      	beq.n	8010b8c <UART_SetConfig+0x208>
 8010b5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8010b60:	d818      	bhi.n	8010b94 <UART_SetConfig+0x210>
 8010b62:	2b80      	cmp	r3, #128	@ 0x80
 8010b64:	d00a      	beq.n	8010b7c <UART_SetConfig+0x1f8>
 8010b66:	2b80      	cmp	r3, #128	@ 0x80
 8010b68:	d814      	bhi.n	8010b94 <UART_SetConfig+0x210>
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d002      	beq.n	8010b74 <UART_SetConfig+0x1f0>
 8010b6e:	2b40      	cmp	r3, #64	@ 0x40
 8010b70:	d008      	beq.n	8010b84 <UART_SetConfig+0x200>
 8010b72:	e00f      	b.n	8010b94 <UART_SetConfig+0x210>
 8010b74:	2300      	movs	r3, #0
 8010b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010b7a:	e082      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010b7c:	2302      	movs	r3, #2
 8010b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010b82:	e07e      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010b84:	2304      	movs	r3, #4
 8010b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010b8a:	e07a      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010b8c:	2308      	movs	r3, #8
 8010b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010b92:	e076      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010b94:	2310      	movs	r3, #16
 8010b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010b9a:	e072      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	4a35      	ldr	r2, [pc, #212]	@ (8010c78 <UART_SetConfig+0x2f4>)
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	d12a      	bne.n	8010bfc <UART_SetConfig+0x278>
 8010ba6:	4b30      	ldr	r3, [pc, #192]	@ (8010c68 <UART_SetConfig+0x2e4>)
 8010ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010bac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010bb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010bb4:	d01a      	beq.n	8010bec <UART_SetConfig+0x268>
 8010bb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010bba:	d81b      	bhi.n	8010bf4 <UART_SetConfig+0x270>
 8010bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010bc0:	d00c      	beq.n	8010bdc <UART_SetConfig+0x258>
 8010bc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010bc6:	d815      	bhi.n	8010bf4 <UART_SetConfig+0x270>
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d003      	beq.n	8010bd4 <UART_SetConfig+0x250>
 8010bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010bd0:	d008      	beq.n	8010be4 <UART_SetConfig+0x260>
 8010bd2:	e00f      	b.n	8010bf4 <UART_SetConfig+0x270>
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010bda:	e052      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010bdc:	2302      	movs	r3, #2
 8010bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010be2:	e04e      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010be4:	2304      	movs	r3, #4
 8010be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010bea:	e04a      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010bec:	2308      	movs	r3, #8
 8010bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010bf2:	e046      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010bf4:	2310      	movs	r3, #16
 8010bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010bfa:	e042      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4a17      	ldr	r2, [pc, #92]	@ (8010c60 <UART_SetConfig+0x2dc>)
 8010c02:	4293      	cmp	r3, r2
 8010c04:	d13a      	bne.n	8010c7c <UART_SetConfig+0x2f8>
 8010c06:	4b18      	ldr	r3, [pc, #96]	@ (8010c68 <UART_SetConfig+0x2e4>)
 8010c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010c0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8010c10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010c14:	d01a      	beq.n	8010c4c <UART_SetConfig+0x2c8>
 8010c16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010c1a:	d81b      	bhi.n	8010c54 <UART_SetConfig+0x2d0>
 8010c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010c20:	d00c      	beq.n	8010c3c <UART_SetConfig+0x2b8>
 8010c22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010c26:	d815      	bhi.n	8010c54 <UART_SetConfig+0x2d0>
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d003      	beq.n	8010c34 <UART_SetConfig+0x2b0>
 8010c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010c30:	d008      	beq.n	8010c44 <UART_SetConfig+0x2c0>
 8010c32:	e00f      	b.n	8010c54 <UART_SetConfig+0x2d0>
 8010c34:	2300      	movs	r3, #0
 8010c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010c3a:	e022      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010c3c:	2302      	movs	r3, #2
 8010c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010c42:	e01e      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010c44:	2304      	movs	r3, #4
 8010c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010c4a:	e01a      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010c4c:	2308      	movs	r3, #8
 8010c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010c52:	e016      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010c54:	2310      	movs	r3, #16
 8010c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010c5a:	e012      	b.n	8010c82 <UART_SetConfig+0x2fe>
 8010c5c:	cfff69f3 	.word	0xcfff69f3
 8010c60:	40008000 	.word	0x40008000
 8010c64:	40013800 	.word	0x40013800
 8010c68:	40021000 	.word	0x40021000
 8010c6c:	40004400 	.word	0x40004400
 8010c70:	40004800 	.word	0x40004800
 8010c74:	40004c00 	.word	0x40004c00
 8010c78:	40005000 	.word	0x40005000
 8010c7c:	2310      	movs	r3, #16
 8010c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	4aae      	ldr	r2, [pc, #696]	@ (8010f40 <UART_SetConfig+0x5bc>)
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	f040 8097 	bne.w	8010dbc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010c8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010c92:	2b08      	cmp	r3, #8
 8010c94:	d823      	bhi.n	8010cde <UART_SetConfig+0x35a>
 8010c96:	a201      	add	r2, pc, #4	@ (adr r2, 8010c9c <UART_SetConfig+0x318>)
 8010c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c9c:	08010cc1 	.word	0x08010cc1
 8010ca0:	08010cdf 	.word	0x08010cdf
 8010ca4:	08010cc9 	.word	0x08010cc9
 8010ca8:	08010cdf 	.word	0x08010cdf
 8010cac:	08010ccf 	.word	0x08010ccf
 8010cb0:	08010cdf 	.word	0x08010cdf
 8010cb4:	08010cdf 	.word	0x08010cdf
 8010cb8:	08010cdf 	.word	0x08010cdf
 8010cbc:	08010cd7 	.word	0x08010cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010cc0:	f7fc fc6c 	bl	800d59c <HAL_RCC_GetPCLK1Freq>
 8010cc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010cc6:	e010      	b.n	8010cea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010cc8:	4b9e      	ldr	r3, [pc, #632]	@ (8010f44 <UART_SetConfig+0x5c0>)
 8010cca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010ccc:	e00d      	b.n	8010cea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010cce:	f7fc fbf7 	bl	800d4c0 <HAL_RCC_GetSysClockFreq>
 8010cd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010cd4:	e009      	b.n	8010cea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010cda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010cdc:	e005      	b.n	8010cea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010ce8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	f000 8130 	beq.w	8010f52 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cf6:	4a94      	ldr	r2, [pc, #592]	@ (8010f48 <UART_SetConfig+0x5c4>)
 8010cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010cfc:	461a      	mov	r2, r3
 8010cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	685a      	ldr	r2, [r3, #4]
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	005b      	lsls	r3, r3, #1
 8010d0e:	4413      	add	r3, r2
 8010d10:	69ba      	ldr	r2, [r7, #24]
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d305      	bcc.n	8010d22 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	685b      	ldr	r3, [r3, #4]
 8010d1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010d1c:	69ba      	ldr	r2, [r7, #24]
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d903      	bls.n	8010d2a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8010d22:	2301      	movs	r3, #1
 8010d24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010d28:	e113      	b.n	8010f52 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	60bb      	str	r3, [r7, #8]
 8010d30:	60fa      	str	r2, [r7, #12]
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d36:	4a84      	ldr	r2, [pc, #528]	@ (8010f48 <UART_SetConfig+0x5c4>)
 8010d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d3c:	b29b      	uxth	r3, r3
 8010d3e:	2200      	movs	r2, #0
 8010d40:	603b      	str	r3, [r7, #0]
 8010d42:	607a      	str	r2, [r7, #4]
 8010d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010d4c:	f7ef ff52 	bl	8000bf4 <__aeabi_uldivmod>
 8010d50:	4602      	mov	r2, r0
 8010d52:	460b      	mov	r3, r1
 8010d54:	4610      	mov	r0, r2
 8010d56:	4619      	mov	r1, r3
 8010d58:	f04f 0200 	mov.w	r2, #0
 8010d5c:	f04f 0300 	mov.w	r3, #0
 8010d60:	020b      	lsls	r3, r1, #8
 8010d62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010d66:	0202      	lsls	r2, r0, #8
 8010d68:	6979      	ldr	r1, [r7, #20]
 8010d6a:	6849      	ldr	r1, [r1, #4]
 8010d6c:	0849      	lsrs	r1, r1, #1
 8010d6e:	2000      	movs	r0, #0
 8010d70:	460c      	mov	r4, r1
 8010d72:	4605      	mov	r5, r0
 8010d74:	eb12 0804 	adds.w	r8, r2, r4
 8010d78:	eb43 0905 	adc.w	r9, r3, r5
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	685b      	ldr	r3, [r3, #4]
 8010d80:	2200      	movs	r2, #0
 8010d82:	469a      	mov	sl, r3
 8010d84:	4693      	mov	fp, r2
 8010d86:	4652      	mov	r2, sl
 8010d88:	465b      	mov	r3, fp
 8010d8a:	4640      	mov	r0, r8
 8010d8c:	4649      	mov	r1, r9
 8010d8e:	f7ef ff31 	bl	8000bf4 <__aeabi_uldivmod>
 8010d92:	4602      	mov	r2, r0
 8010d94:	460b      	mov	r3, r1
 8010d96:	4613      	mov	r3, r2
 8010d98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010d9a:	6a3b      	ldr	r3, [r7, #32]
 8010d9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010da0:	d308      	bcc.n	8010db4 <UART_SetConfig+0x430>
 8010da2:	6a3b      	ldr	r3, [r7, #32]
 8010da4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010da8:	d204      	bcs.n	8010db4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	6a3a      	ldr	r2, [r7, #32]
 8010db0:	60da      	str	r2, [r3, #12]
 8010db2:	e0ce      	b.n	8010f52 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8010db4:	2301      	movs	r3, #1
 8010db6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010dba:	e0ca      	b.n	8010f52 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	69db      	ldr	r3, [r3, #28]
 8010dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010dc4:	d166      	bne.n	8010e94 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8010dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010dca:	2b08      	cmp	r3, #8
 8010dcc:	d827      	bhi.n	8010e1e <UART_SetConfig+0x49a>
 8010dce:	a201      	add	r2, pc, #4	@ (adr r2, 8010dd4 <UART_SetConfig+0x450>)
 8010dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dd4:	08010df9 	.word	0x08010df9
 8010dd8:	08010e01 	.word	0x08010e01
 8010ddc:	08010e09 	.word	0x08010e09
 8010de0:	08010e1f 	.word	0x08010e1f
 8010de4:	08010e0f 	.word	0x08010e0f
 8010de8:	08010e1f 	.word	0x08010e1f
 8010dec:	08010e1f 	.word	0x08010e1f
 8010df0:	08010e1f 	.word	0x08010e1f
 8010df4:	08010e17 	.word	0x08010e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010df8:	f7fc fbd0 	bl	800d59c <HAL_RCC_GetPCLK1Freq>
 8010dfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010dfe:	e014      	b.n	8010e2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010e00:	f7fc fbe2 	bl	800d5c8 <HAL_RCC_GetPCLK2Freq>
 8010e04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010e06:	e010      	b.n	8010e2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010e08:	4b4e      	ldr	r3, [pc, #312]	@ (8010f44 <UART_SetConfig+0x5c0>)
 8010e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010e0c:	e00d      	b.n	8010e2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010e0e:	f7fc fb57 	bl	800d4c0 <HAL_RCC_GetSysClockFreq>
 8010e12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010e14:	e009      	b.n	8010e2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010e1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010e1c:	e005      	b.n	8010e2a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010e22:	2301      	movs	r3, #1
 8010e24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010e28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	f000 8090 	beq.w	8010f52 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e36:	4a44      	ldr	r2, [pc, #272]	@ (8010f48 <UART_SetConfig+0x5c4>)
 8010e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e3c:	461a      	mov	r2, r3
 8010e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e40:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e44:	005a      	lsls	r2, r3, #1
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	685b      	ldr	r3, [r3, #4]
 8010e4a:	085b      	lsrs	r3, r3, #1
 8010e4c:	441a      	add	r2, r3
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010e58:	6a3b      	ldr	r3, [r7, #32]
 8010e5a:	2b0f      	cmp	r3, #15
 8010e5c:	d916      	bls.n	8010e8c <UART_SetConfig+0x508>
 8010e5e:	6a3b      	ldr	r3, [r7, #32]
 8010e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010e64:	d212      	bcs.n	8010e8c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010e66:	6a3b      	ldr	r3, [r7, #32]
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	f023 030f 	bic.w	r3, r3, #15
 8010e6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010e70:	6a3b      	ldr	r3, [r7, #32]
 8010e72:	085b      	lsrs	r3, r3, #1
 8010e74:	b29b      	uxth	r3, r3
 8010e76:	f003 0307 	and.w	r3, r3, #7
 8010e7a:	b29a      	uxth	r2, r3
 8010e7c:	8bfb      	ldrh	r3, [r7, #30]
 8010e7e:	4313      	orrs	r3, r2
 8010e80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	8bfa      	ldrh	r2, [r7, #30]
 8010e88:	60da      	str	r2, [r3, #12]
 8010e8a:	e062      	b.n	8010f52 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010e92:	e05e      	b.n	8010f52 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010e94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010e98:	2b08      	cmp	r3, #8
 8010e9a:	d828      	bhi.n	8010eee <UART_SetConfig+0x56a>
 8010e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8010ea4 <UART_SetConfig+0x520>)
 8010e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea2:	bf00      	nop
 8010ea4:	08010ec9 	.word	0x08010ec9
 8010ea8:	08010ed1 	.word	0x08010ed1
 8010eac:	08010ed9 	.word	0x08010ed9
 8010eb0:	08010eef 	.word	0x08010eef
 8010eb4:	08010edf 	.word	0x08010edf
 8010eb8:	08010eef 	.word	0x08010eef
 8010ebc:	08010eef 	.word	0x08010eef
 8010ec0:	08010eef 	.word	0x08010eef
 8010ec4:	08010ee7 	.word	0x08010ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010ec8:	f7fc fb68 	bl	800d59c <HAL_RCC_GetPCLK1Freq>
 8010ecc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010ece:	e014      	b.n	8010efa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010ed0:	f7fc fb7a 	bl	800d5c8 <HAL_RCC_GetPCLK2Freq>
 8010ed4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010ed6:	e010      	b.n	8010efa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8010f44 <UART_SetConfig+0x5c0>)
 8010eda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010edc:	e00d      	b.n	8010efa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010ede:	f7fc faef 	bl	800d4c0 <HAL_RCC_GetSysClockFreq>
 8010ee2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010ee4:	e009      	b.n	8010efa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010ee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010eea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010eec:	e005      	b.n	8010efa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010ef8:	bf00      	nop
    }

    if (pclk != 0U)
 8010efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d028      	beq.n	8010f52 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f04:	4a10      	ldr	r2, [pc, #64]	@ (8010f48 <UART_SetConfig+0x5c4>)
 8010f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	085b      	lsrs	r3, r3, #1
 8010f18:	441a      	add	r2, r3
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010f24:	6a3b      	ldr	r3, [r7, #32]
 8010f26:	2b0f      	cmp	r3, #15
 8010f28:	d910      	bls.n	8010f4c <UART_SetConfig+0x5c8>
 8010f2a:	6a3b      	ldr	r3, [r7, #32]
 8010f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010f30:	d20c      	bcs.n	8010f4c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010f32:	6a3b      	ldr	r3, [r7, #32]
 8010f34:	b29a      	uxth	r2, r3
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	60da      	str	r2, [r3, #12]
 8010f3c:	e009      	b.n	8010f52 <UART_SetConfig+0x5ce>
 8010f3e:	bf00      	nop
 8010f40:	40008000 	.word	0x40008000
 8010f44:	00f42400 	.word	0x00f42400
 8010f48:	08014588 	.word	0x08014588
      }
      else
      {
        ret = HAL_ERROR;
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	2201      	movs	r2, #1
 8010f56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	2201      	movs	r2, #1
 8010f5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	2200      	movs	r2, #0
 8010f66:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010f6e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3730      	adds	r7, #48	@ 0x30
 8010f76:	46bd      	mov	sp, r7
 8010f78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b083      	sub	sp, #12
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f88:	f003 0308 	and.w	r3, r3, #8
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d00a      	beq.n	8010fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	685b      	ldr	r3, [r3, #4]
 8010f96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	430a      	orrs	r2, r1
 8010fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010faa:	f003 0301 	and.w	r3, r3, #1
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d00a      	beq.n	8010fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	685b      	ldr	r3, [r3, #4]
 8010fb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	430a      	orrs	r2, r1
 8010fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fcc:	f003 0302 	and.w	r3, r3, #2
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d00a      	beq.n	8010fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	685b      	ldr	r3, [r3, #4]
 8010fda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	430a      	orrs	r2, r1
 8010fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fee:	f003 0304 	and.w	r3, r3, #4
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d00a      	beq.n	801100c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	685b      	ldr	r3, [r3, #4]
 8010ffc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	430a      	orrs	r2, r1
 801100a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011010:	f003 0310 	and.w	r3, r3, #16
 8011014:	2b00      	cmp	r3, #0
 8011016:	d00a      	beq.n	801102e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	689b      	ldr	r3, [r3, #8]
 801101e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	430a      	orrs	r2, r1
 801102c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011032:	f003 0320 	and.w	r3, r3, #32
 8011036:	2b00      	cmp	r3, #0
 8011038:	d00a      	beq.n	8011050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	689b      	ldr	r3, [r3, #8]
 8011040:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	430a      	orrs	r2, r1
 801104e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011058:	2b00      	cmp	r3, #0
 801105a:	d01a      	beq.n	8011092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	430a      	orrs	r2, r1
 8011070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801107a:	d10a      	bne.n	8011092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	685b      	ldr	r3, [r3, #4]
 8011082:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	430a      	orrs	r2, r1
 8011090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801109a:	2b00      	cmp	r3, #0
 801109c:	d00a      	beq.n	80110b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	685b      	ldr	r3, [r3, #4]
 80110a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	430a      	orrs	r2, r1
 80110b2:	605a      	str	r2, [r3, #4]
  }
}
 80110b4:	bf00      	nop
 80110b6:	370c      	adds	r7, #12
 80110b8:	46bd      	mov	sp, r7
 80110ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110be:	4770      	bx	lr

080110c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b098      	sub	sp, #96	@ 0x60
 80110c4:	af02      	add	r7, sp, #8
 80110c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2200      	movs	r2, #0
 80110cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80110d0:	f7f9 fa4a 	bl	800a568 <HAL_GetTick>
 80110d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	f003 0308 	and.w	r3, r3, #8
 80110e0:	2b08      	cmp	r3, #8
 80110e2:	d12f      	bne.n	8011144 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80110e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80110e8:	9300      	str	r3, [sp, #0]
 80110ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80110ec:	2200      	movs	r2, #0
 80110ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	f000 f88e 	bl	8011214 <UART_WaitOnFlagUntilTimeout>
 80110f8:	4603      	mov	r3, r0
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d022      	beq.n	8011144 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011106:	e853 3f00 	ldrex	r3, [r3]
 801110a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801110c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801110e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011112:	653b      	str	r3, [r7, #80]	@ 0x50
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	461a      	mov	r2, r3
 801111a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801111c:	647b      	str	r3, [r7, #68]	@ 0x44
 801111e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011120:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011122:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011124:	e841 2300 	strex	r3, r2, [r1]
 8011128:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801112a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801112c:	2b00      	cmp	r3, #0
 801112e:	d1e6      	bne.n	80110fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2220      	movs	r2, #32
 8011134:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2200      	movs	r2, #0
 801113c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011140:	2303      	movs	r3, #3
 8011142:	e063      	b.n	801120c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	f003 0304 	and.w	r3, r3, #4
 801114e:	2b04      	cmp	r3, #4
 8011150:	d149      	bne.n	80111e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011152:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011156:	9300      	str	r3, [sp, #0]
 8011158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801115a:	2200      	movs	r2, #0
 801115c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f000 f857 	bl	8011214 <UART_WaitOnFlagUntilTimeout>
 8011166:	4603      	mov	r3, r0
 8011168:	2b00      	cmp	r3, #0
 801116a:	d03c      	beq.n	80111e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011174:	e853 3f00 	ldrex	r3, [r3]
 8011178:	623b      	str	r3, [r7, #32]
   return(result);
 801117a:	6a3b      	ldr	r3, [r7, #32]
 801117c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011180:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	461a      	mov	r2, r3
 8011188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801118a:	633b      	str	r3, [r7, #48]	@ 0x30
 801118c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801118e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011192:	e841 2300 	strex	r3, r2, [r1]
 8011196:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801119a:	2b00      	cmp	r3, #0
 801119c:	d1e6      	bne.n	801116c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	3308      	adds	r3, #8
 80111a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	e853 3f00 	ldrex	r3, [r3]
 80111ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	f023 0301 	bic.w	r3, r3, #1
 80111b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	3308      	adds	r3, #8
 80111bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80111be:	61fa      	str	r2, [r7, #28]
 80111c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111c2:	69b9      	ldr	r1, [r7, #24]
 80111c4:	69fa      	ldr	r2, [r7, #28]
 80111c6:	e841 2300 	strex	r3, r2, [r1]
 80111ca:	617b      	str	r3, [r7, #20]
   return(result);
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d1e5      	bne.n	801119e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2220      	movs	r2, #32
 80111d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2200      	movs	r2, #0
 80111de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80111e2:	2303      	movs	r3, #3
 80111e4:	e012      	b.n	801120c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2220      	movs	r2, #32
 80111ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2220      	movs	r2, #32
 80111f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2200      	movs	r2, #0
 80111fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2200      	movs	r2, #0
 8011200:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	2200      	movs	r2, #0
 8011206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801120a:	2300      	movs	r3, #0
}
 801120c:	4618      	mov	r0, r3
 801120e:	3758      	adds	r7, #88	@ 0x58
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}

08011214 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b084      	sub	sp, #16
 8011218:	af00      	add	r7, sp, #0
 801121a:	60f8      	str	r0, [r7, #12]
 801121c:	60b9      	str	r1, [r7, #8]
 801121e:	603b      	str	r3, [r7, #0]
 8011220:	4613      	mov	r3, r2
 8011222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011224:	e04f      	b.n	80112c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011226:	69bb      	ldr	r3, [r7, #24]
 8011228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801122c:	d04b      	beq.n	80112c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801122e:	f7f9 f99b 	bl	800a568 <HAL_GetTick>
 8011232:	4602      	mov	r2, r0
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	1ad3      	subs	r3, r2, r3
 8011238:	69ba      	ldr	r2, [r7, #24]
 801123a:	429a      	cmp	r2, r3
 801123c:	d302      	bcc.n	8011244 <UART_WaitOnFlagUntilTimeout+0x30>
 801123e:	69bb      	ldr	r3, [r7, #24]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d101      	bne.n	8011248 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011244:	2303      	movs	r3, #3
 8011246:	e04e      	b.n	80112e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	f003 0304 	and.w	r3, r3, #4
 8011252:	2b00      	cmp	r3, #0
 8011254:	d037      	beq.n	80112c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	2b80      	cmp	r3, #128	@ 0x80
 801125a:	d034      	beq.n	80112c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	2b40      	cmp	r3, #64	@ 0x40
 8011260:	d031      	beq.n	80112c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	69db      	ldr	r3, [r3, #28]
 8011268:	f003 0308 	and.w	r3, r3, #8
 801126c:	2b08      	cmp	r3, #8
 801126e:	d110      	bne.n	8011292 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	2208      	movs	r2, #8
 8011276:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011278:	68f8      	ldr	r0, [r7, #12]
 801127a:	f000 f920 	bl	80114be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	2208      	movs	r2, #8
 8011282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	2200      	movs	r2, #0
 801128a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801128e:	2301      	movs	r3, #1
 8011290:	e029      	b.n	80112e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	69db      	ldr	r3, [r3, #28]
 8011298:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801129c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80112a0:	d111      	bne.n	80112c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80112aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80112ac:	68f8      	ldr	r0, [r7, #12]
 80112ae:	f000 f906 	bl	80114be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	2220      	movs	r2, #32
 80112b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	2200      	movs	r2, #0
 80112be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80112c2:	2303      	movs	r3, #3
 80112c4:	e00f      	b.n	80112e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	69da      	ldr	r2, [r3, #28]
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	4013      	ands	r3, r2
 80112d0:	68ba      	ldr	r2, [r7, #8]
 80112d2:	429a      	cmp	r2, r3
 80112d4:	bf0c      	ite	eq
 80112d6:	2301      	moveq	r3, #1
 80112d8:	2300      	movne	r3, #0
 80112da:	b2db      	uxtb	r3, r3
 80112dc:	461a      	mov	r2, r3
 80112de:	79fb      	ldrb	r3, [r7, #7]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d0a0      	beq.n	8011226 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80112e4:	2300      	movs	r3, #0
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	3710      	adds	r7, #16
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}
	...

080112f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b096      	sub	sp, #88	@ 0x58
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	60f8      	str	r0, [r7, #12]
 80112f8:	60b9      	str	r1, [r7, #8]
 80112fa:	4613      	mov	r3, r2
 80112fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	68ba      	ldr	r2, [r7, #8]
 8011302:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	88fa      	ldrh	r2, [r7, #6]
 8011308:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	2200      	movs	r2, #0
 8011310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	2222      	movs	r2, #34	@ 0x22
 8011318:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011322:	2b00      	cmp	r3, #0
 8011324:	d02d      	beq.n	8011382 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801132c:	4a40      	ldr	r2, [pc, #256]	@ (8011430 <UART_Start_Receive_DMA+0x140>)
 801132e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011336:	4a3f      	ldr	r2, [pc, #252]	@ (8011434 <UART_Start_Receive_DMA+0x144>)
 8011338:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011340:	4a3d      	ldr	r2, [pc, #244]	@ (8011438 <UART_Start_Receive_DMA+0x148>)
 8011342:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801134a:	2200      	movs	r2, #0
 801134c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	3324      	adds	r3, #36	@ 0x24
 801135a:	4619      	mov	r1, r3
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011360:	461a      	mov	r2, r3
 8011362:	88fb      	ldrh	r3, [r7, #6]
 8011364:	f7fa ff3c 	bl	800c1e0 <HAL_DMA_Start_IT>
 8011368:	4603      	mov	r3, r0
 801136a:	2b00      	cmp	r3, #0
 801136c:	d009      	beq.n	8011382 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2210      	movs	r2, #16
 8011372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	2220      	movs	r2, #32
 801137a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 801137e:	2301      	movs	r3, #1
 8011380:	e051      	b.n	8011426 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	691b      	ldr	r3, [r3, #16]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d018      	beq.n	80113bc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011392:	e853 3f00 	ldrex	r3, [r3]
 8011396:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801139a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801139e:	657b      	str	r3, [r7, #84]	@ 0x54
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	461a      	mov	r2, r3
 80113a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80113a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80113aa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80113ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80113b0:	e841 2300 	strex	r3, r2, [r1]
 80113b4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80113b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d1e6      	bne.n	801138a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	3308      	adds	r3, #8
 80113c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113c6:	e853 3f00 	ldrex	r3, [r3]
 80113ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80113cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113ce:	f043 0301 	orr.w	r3, r3, #1
 80113d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	3308      	adds	r3, #8
 80113da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80113dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80113de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80113e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80113e4:	e841 2300 	strex	r3, r2, [r1]
 80113e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80113ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d1e5      	bne.n	80113bc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	3308      	adds	r3, #8
 80113f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	e853 3f00 	ldrex	r3, [r3]
 80113fe:	613b      	str	r3, [r7, #16]
   return(result);
 8011400:	693b      	ldr	r3, [r7, #16]
 8011402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	3308      	adds	r3, #8
 801140e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011410:	623a      	str	r2, [r7, #32]
 8011412:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011414:	69f9      	ldr	r1, [r7, #28]
 8011416:	6a3a      	ldr	r2, [r7, #32]
 8011418:	e841 2300 	strex	r3, r2, [r1]
 801141c:	61bb      	str	r3, [r7, #24]
   return(result);
 801141e:	69bb      	ldr	r3, [r7, #24]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d1e5      	bne.n	80113f0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8011424:	2300      	movs	r3, #0
}
 8011426:	4618      	mov	r0, r3
 8011428:	3758      	adds	r7, #88	@ 0x58
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	08011649 	.word	0x08011649
 8011434:	0801177d 	.word	0x0801177d
 8011438:	080117c3 	.word	0x080117c3

0801143c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801143c:	b480      	push	{r7}
 801143e:	b08f      	sub	sp, #60	@ 0x3c
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801144a:	6a3b      	ldr	r3, [r7, #32]
 801144c:	e853 3f00 	ldrex	r3, [r3]
 8011450:	61fb      	str	r3, [r7, #28]
   return(result);
 8011452:	69fb      	ldr	r3, [r7, #28]
 8011454:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011458:	637b      	str	r3, [r7, #52]	@ 0x34
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	461a      	mov	r2, r3
 8011460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011462:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011464:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011466:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801146a:	e841 2300 	strex	r3, r2, [r1]
 801146e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011472:	2b00      	cmp	r3, #0
 8011474:	d1e6      	bne.n	8011444 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	3308      	adds	r3, #8
 801147c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	e853 3f00 	ldrex	r3, [r3]
 8011484:	60bb      	str	r3, [r7, #8]
   return(result);
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801148c:	633b      	str	r3, [r7, #48]	@ 0x30
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	3308      	adds	r3, #8
 8011494:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011496:	61ba      	str	r2, [r7, #24]
 8011498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801149a:	6979      	ldr	r1, [r7, #20]
 801149c:	69ba      	ldr	r2, [r7, #24]
 801149e:	e841 2300 	strex	r3, r2, [r1]
 80114a2:	613b      	str	r3, [r7, #16]
   return(result);
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d1e5      	bne.n	8011476 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2220      	movs	r2, #32
 80114ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80114b2:	bf00      	nop
 80114b4:	373c      	adds	r7, #60	@ 0x3c
 80114b6:	46bd      	mov	sp, r7
 80114b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114bc:	4770      	bx	lr

080114be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80114be:	b480      	push	{r7}
 80114c0:	b095      	sub	sp, #84	@ 0x54
 80114c2:	af00      	add	r7, sp, #0
 80114c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114ce:	e853 3f00 	ldrex	r3, [r3]
 80114d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80114d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80114da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	461a      	mov	r2, r3
 80114e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80114e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80114ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80114ec:	e841 2300 	strex	r3, r2, [r1]
 80114f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80114f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d1e6      	bne.n	80114c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	3308      	adds	r3, #8
 80114fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011500:	6a3b      	ldr	r3, [r7, #32]
 8011502:	e853 3f00 	ldrex	r3, [r3]
 8011506:	61fb      	str	r3, [r7, #28]
   return(result);
 8011508:	69fb      	ldr	r3, [r7, #28]
 801150a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801150e:	f023 0301 	bic.w	r3, r3, #1
 8011512:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	3308      	adds	r3, #8
 801151a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801151c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801151e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011520:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011524:	e841 2300 	strex	r3, r2, [r1]
 8011528:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801152c:	2b00      	cmp	r3, #0
 801152e:	d1e3      	bne.n	80114f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011534:	2b01      	cmp	r3, #1
 8011536:	d118      	bne.n	801156a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	e853 3f00 	ldrex	r3, [r3]
 8011544:	60bb      	str	r3, [r7, #8]
   return(result);
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	f023 0310 	bic.w	r3, r3, #16
 801154c:	647b      	str	r3, [r7, #68]	@ 0x44
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	461a      	mov	r2, r3
 8011554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011556:	61bb      	str	r3, [r7, #24]
 8011558:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801155a:	6979      	ldr	r1, [r7, #20]
 801155c:	69ba      	ldr	r2, [r7, #24]
 801155e:	e841 2300 	strex	r3, r2, [r1]
 8011562:	613b      	str	r3, [r7, #16]
   return(result);
 8011564:	693b      	ldr	r3, [r7, #16]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d1e6      	bne.n	8011538 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2220      	movs	r2, #32
 801156e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2200      	movs	r2, #0
 8011576:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2200      	movs	r2, #0
 801157c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801157e:	bf00      	nop
 8011580:	3754      	adds	r7, #84	@ 0x54
 8011582:	46bd      	mov	sp, r7
 8011584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011588:	4770      	bx	lr

0801158a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801158a:	b580      	push	{r7, lr}
 801158c:	b090      	sub	sp, #64	@ 0x40
 801158e:	af00      	add	r7, sp, #0
 8011590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011596:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	f003 0320 	and.w	r3, r3, #32
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d137      	bne.n	8011616 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80115a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115a8:	2200      	movs	r2, #0
 80115aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80115ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	3308      	adds	r3, #8
 80115b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b8:	e853 3f00 	ldrex	r3, [r3]
 80115bc:	623b      	str	r3, [r7, #32]
   return(result);
 80115be:	6a3b      	ldr	r3, [r7, #32]
 80115c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80115c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80115c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	3308      	adds	r3, #8
 80115cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80115ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80115d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80115d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80115d6:	e841 2300 	strex	r3, r2, [r1]
 80115da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80115dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d1e5      	bne.n	80115ae <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80115e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	e853 3f00 	ldrex	r3, [r3]
 80115ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80115f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	461a      	mov	r2, r3
 80115fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011600:	61fb      	str	r3, [r7, #28]
 8011602:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011604:	69b9      	ldr	r1, [r7, #24]
 8011606:	69fa      	ldr	r2, [r7, #28]
 8011608:	e841 2300 	strex	r3, r2, [r1]
 801160c:	617b      	str	r3, [r7, #20]
   return(result);
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d1e6      	bne.n	80115e2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011614:	e004      	b.n	8011620 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8011616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011618:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801161c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801161e:	4798      	blx	r3
}
 8011620:	bf00      	nop
 8011622:	3740      	adds	r7, #64	@ 0x40
 8011624:	46bd      	mov	sp, r7
 8011626:	bd80      	pop	{r7, pc}

08011628 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b084      	sub	sp, #16
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011634:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801163c:	68f8      	ldr	r0, [r7, #12]
 801163e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011640:	bf00      	nop
 8011642:	3710      	adds	r7, #16
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}

08011648 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b09c      	sub	sp, #112	@ 0x70
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011654:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	f003 0320 	and.w	r3, r3, #32
 8011660:	2b00      	cmp	r3, #0
 8011662:	d171      	bne.n	8011748 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8011664:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011666:	2200      	movs	r2, #0
 8011668:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801166c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011674:	e853 3f00 	ldrex	r3, [r3]
 8011678:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801167a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801167c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011680:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	461a      	mov	r2, r3
 8011688:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801168a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801168c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801168e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011690:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011692:	e841 2300 	strex	r3, r2, [r1]
 8011696:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011698:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801169a:	2b00      	cmp	r3, #0
 801169c:	d1e6      	bne.n	801166c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801169e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	3308      	adds	r3, #8
 80116a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116a8:	e853 3f00 	ldrex	r3, [r3]
 80116ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80116ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116b0:	f023 0301 	bic.w	r3, r3, #1
 80116b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80116b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	3308      	adds	r3, #8
 80116bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80116be:	647a      	str	r2, [r7, #68]	@ 0x44
 80116c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80116c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80116c6:	e841 2300 	strex	r3, r2, [r1]
 80116ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80116cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d1e5      	bne.n	801169e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80116d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	3308      	adds	r3, #8
 80116d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116dc:	e853 3f00 	ldrex	r3, [r3]
 80116e0:	623b      	str	r3, [r7, #32]
   return(result);
 80116e2:	6a3b      	ldr	r3, [r7, #32]
 80116e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80116e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80116ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	3308      	adds	r3, #8
 80116f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80116f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80116f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80116f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116fa:	e841 2300 	strex	r3, r2, [r1]
 80116fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011702:	2b00      	cmp	r3, #0
 8011704:	d1e5      	bne.n	80116d2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011708:	2220      	movs	r2, #32
 801170a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801170e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011712:	2b01      	cmp	r3, #1
 8011714:	d118      	bne.n	8011748 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011716:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801171c:	693b      	ldr	r3, [r7, #16]
 801171e:	e853 3f00 	ldrex	r3, [r3]
 8011722:	60fb      	str	r3, [r7, #12]
   return(result);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	f023 0310 	bic.w	r3, r3, #16
 801172a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801172c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	461a      	mov	r2, r3
 8011732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011734:	61fb      	str	r3, [r7, #28]
 8011736:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011738:	69b9      	ldr	r1, [r7, #24]
 801173a:	69fa      	ldr	r2, [r7, #28]
 801173c:	e841 2300 	strex	r3, r2, [r1]
 8011740:	617b      	str	r3, [r7, #20]
   return(result);
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d1e6      	bne.n	8011716 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011748:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801174a:	2200      	movs	r2, #0
 801174c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801174e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011752:	2b01      	cmp	r3, #1
 8011754:	d109      	bne.n	801176a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8011756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011758:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801175c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801175e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8011762:	4611      	mov	r1, r2
 8011764:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011766:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011768:	e004      	b.n	8011774 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 801176a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801176c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011770:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011772:	4798      	blx	r3
}
 8011774:	bf00      	nop
 8011776:	3770      	adds	r7, #112	@ 0x70
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}

0801177c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b084      	sub	sp, #16
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011788:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	2201      	movs	r2, #1
 801178e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011794:	2b01      	cmp	r3, #1
 8011796:	d10b      	bne.n	80117b0 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801179e:	68fa      	ldr	r2, [r7, #12]
 80117a0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80117a4:	0852      	lsrs	r2, r2, #1
 80117a6:	b292      	uxth	r2, r2
 80117a8:	4611      	mov	r1, r2
 80117aa:	68f8      	ldr	r0, [r7, #12]
 80117ac:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80117ae:	e004      	b.n	80117ba <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80117b6:	68f8      	ldr	r0, [r7, #12]
 80117b8:	4798      	blx	r3
}
 80117ba:	bf00      	nop
 80117bc:	3710      	adds	r7, #16
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}

080117c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80117c2:	b580      	push	{r7, lr}
 80117c4:	b086      	sub	sp, #24
 80117c6:	af00      	add	r7, sp, #0
 80117c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117ce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80117d0:	697b      	ldr	r3, [r7, #20]
 80117d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80117d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80117de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	689b      	ldr	r3, [r3, #8]
 80117e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80117ea:	2b80      	cmp	r3, #128	@ 0x80
 80117ec:	d109      	bne.n	8011802 <UART_DMAError+0x40>
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	2b21      	cmp	r3, #33	@ 0x21
 80117f2:	d106      	bne.n	8011802 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	2200      	movs	r2, #0
 80117f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80117fc:	6978      	ldr	r0, [r7, #20]
 80117fe:	f7ff fe1d 	bl	801143c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	689b      	ldr	r3, [r3, #8]
 8011808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801180c:	2b40      	cmp	r3, #64	@ 0x40
 801180e:	d109      	bne.n	8011824 <UART_DMAError+0x62>
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	2b22      	cmp	r3, #34	@ 0x22
 8011814:	d106      	bne.n	8011824 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	2200      	movs	r2, #0
 801181a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 801181e:	6978      	ldr	r0, [r7, #20]
 8011820:	f7ff fe4d 	bl	80114be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801182a:	f043 0210 	orr.w	r2, r3, #16
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801183a:	6978      	ldr	r0, [r7, #20]
 801183c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801183e:	bf00      	nop
 8011840:	3718      	adds	r7, #24
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}

08011846 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011846:	b580      	push	{r7, lr}
 8011848:	b084      	sub	sp, #16
 801184a:	af00      	add	r7, sp, #0
 801184c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011852:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	2200      	movs	r2, #0
 8011858:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011862:	68f8      	ldr	r0, [r7, #12]
 8011864:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011866:	bf00      	nop
 8011868:	3710      	adds	r7, #16
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}

0801186e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801186e:	b580      	push	{r7, lr}
 8011870:	b088      	sub	sp, #32
 8011872:	af00      	add	r7, sp, #0
 8011874:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	e853 3f00 	ldrex	r3, [r3]
 8011882:	60bb      	str	r3, [r7, #8]
   return(result);
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801188a:	61fb      	str	r3, [r7, #28]
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	461a      	mov	r2, r3
 8011892:	69fb      	ldr	r3, [r7, #28]
 8011894:	61bb      	str	r3, [r7, #24]
 8011896:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011898:	6979      	ldr	r1, [r7, #20]
 801189a:	69ba      	ldr	r2, [r7, #24]
 801189c:	e841 2300 	strex	r3, r2, [r1]
 80118a0:	613b      	str	r3, [r7, #16]
   return(result);
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d1e6      	bne.n	8011876 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2220      	movs	r2, #32
 80118ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2200      	movs	r2, #0
 80118b4:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80118c0:	bf00      	nop
 80118c2:	3720      	adds	r7, #32
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}

080118c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80118c8:	b480      	push	{r7}
 80118ca:	b083      	sub	sp, #12
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80118d0:	bf00      	nop
 80118d2:	370c      	adds	r7, #12
 80118d4:	46bd      	mov	sp, r7
 80118d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118da:	4770      	bx	lr

080118dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80118dc:	b480      	push	{r7}
 80118de:	b083      	sub	sp, #12
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80118e4:	bf00      	nop
 80118e6:	370c      	adds	r7, #12
 80118e8:	46bd      	mov	sp, r7
 80118ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ee:	4770      	bx	lr

080118f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80118f0:	b480      	push	{r7}
 80118f2:	b083      	sub	sp, #12
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80118f8:	bf00      	nop
 80118fa:	370c      	adds	r7, #12
 80118fc:	46bd      	mov	sp, r7
 80118fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011902:	4770      	bx	lr

08011904 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011904:	b480      	push	{r7}
 8011906:	b085      	sub	sp, #20
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011912:	2b01      	cmp	r3, #1
 8011914:	d101      	bne.n	801191a <HAL_UARTEx_DisableFifoMode+0x16>
 8011916:	2302      	movs	r3, #2
 8011918:	e027      	b.n	801196a <HAL_UARTEx_DisableFifoMode+0x66>
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	2201      	movs	r2, #1
 801191e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2224      	movs	r2, #36	@ 0x24
 8011926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	681a      	ldr	r2, [r3, #0]
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	f022 0201 	bic.w	r2, r2, #1
 8011940:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011948:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2200      	movs	r2, #0
 801194e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	68fa      	ldr	r2, [r7, #12]
 8011956:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2220      	movs	r2, #32
 801195c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2200      	movs	r2, #0
 8011964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011968:	2300      	movs	r3, #0
}
 801196a:	4618      	mov	r0, r3
 801196c:	3714      	adds	r7, #20
 801196e:	46bd      	mov	sp, r7
 8011970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011974:	4770      	bx	lr

08011976 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011976:	b580      	push	{r7, lr}
 8011978:	b084      	sub	sp, #16
 801197a:	af00      	add	r7, sp, #0
 801197c:	6078      	str	r0, [r7, #4]
 801197e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011986:	2b01      	cmp	r3, #1
 8011988:	d101      	bne.n	801198e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801198a:	2302      	movs	r3, #2
 801198c:	e02d      	b.n	80119ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2201      	movs	r2, #1
 8011992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2224      	movs	r2, #36	@ 0x24
 801199a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	681a      	ldr	r2, [r3, #0]
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	f022 0201 	bic.w	r2, r2, #1
 80119b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	689b      	ldr	r3, [r3, #8]
 80119bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	683a      	ldr	r2, [r7, #0]
 80119c6:	430a      	orrs	r2, r1
 80119c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f000 f850 	bl	8011a70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	68fa      	ldr	r2, [r7, #12]
 80119d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2220      	movs	r2, #32
 80119dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2200      	movs	r2, #0
 80119e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80119e8:	2300      	movs	r3, #0
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3710      	adds	r7, #16
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}

080119f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80119f2:	b580      	push	{r7, lr}
 80119f4:	b084      	sub	sp, #16
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	6078      	str	r0, [r7, #4]
 80119fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011a02:	2b01      	cmp	r3, #1
 8011a04:	d101      	bne.n	8011a0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011a06:	2302      	movs	r3, #2
 8011a08:	e02d      	b.n	8011a66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2201      	movs	r2, #1
 8011a0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	2224      	movs	r2, #36	@ 0x24
 8011a16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	681a      	ldr	r2, [r3, #0]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	f022 0201 	bic.w	r2, r2, #1
 8011a30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	689b      	ldr	r3, [r3, #8]
 8011a38:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	683a      	ldr	r2, [r7, #0]
 8011a42:	430a      	orrs	r2, r1
 8011a44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	f000 f812 	bl	8011a70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	68fa      	ldr	r2, [r7, #12]
 8011a52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2220      	movs	r2, #32
 8011a58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2200      	movs	r2, #0
 8011a60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011a64:	2300      	movs	r3, #0
}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3710      	adds	r7, #16
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}
	...

08011a70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011a70:	b480      	push	{r7}
 8011a72:	b085      	sub	sp, #20
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d108      	bne.n	8011a92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2201      	movs	r2, #1
 8011a84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2201      	movs	r2, #1
 8011a8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011a90:	e031      	b.n	8011af6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011a92:	2308      	movs	r3, #8
 8011a94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011a96:	2308      	movs	r3, #8
 8011a98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	689b      	ldr	r3, [r3, #8]
 8011aa0:	0e5b      	lsrs	r3, r3, #25
 8011aa2:	b2db      	uxtb	r3, r3
 8011aa4:	f003 0307 	and.w	r3, r3, #7
 8011aa8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	689b      	ldr	r3, [r3, #8]
 8011ab0:	0f5b      	lsrs	r3, r3, #29
 8011ab2:	b2db      	uxtb	r3, r3
 8011ab4:	f003 0307 	and.w	r3, r3, #7
 8011ab8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011aba:	7bbb      	ldrb	r3, [r7, #14]
 8011abc:	7b3a      	ldrb	r2, [r7, #12]
 8011abe:	4911      	ldr	r1, [pc, #68]	@ (8011b04 <UARTEx_SetNbDataToProcess+0x94>)
 8011ac0:	5c8a      	ldrb	r2, [r1, r2]
 8011ac2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011ac6:	7b3a      	ldrb	r2, [r7, #12]
 8011ac8:	490f      	ldr	r1, [pc, #60]	@ (8011b08 <UARTEx_SetNbDataToProcess+0x98>)
 8011aca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011acc:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ad0:	b29a      	uxth	r2, r3
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ad8:	7bfb      	ldrb	r3, [r7, #15]
 8011ada:	7b7a      	ldrb	r2, [r7, #13]
 8011adc:	4909      	ldr	r1, [pc, #36]	@ (8011b04 <UARTEx_SetNbDataToProcess+0x94>)
 8011ade:	5c8a      	ldrb	r2, [r1, r2]
 8011ae0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011ae4:	7b7a      	ldrb	r2, [r7, #13]
 8011ae6:	4908      	ldr	r1, [pc, #32]	@ (8011b08 <UARTEx_SetNbDataToProcess+0x98>)
 8011ae8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011aea:	fb93 f3f2 	sdiv	r3, r3, r2
 8011aee:	b29a      	uxth	r2, r3
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011af6:	bf00      	nop
 8011af8:	3714      	adds	r7, #20
 8011afa:	46bd      	mov	sp, r7
 8011afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b00:	4770      	bx	lr
 8011b02:	bf00      	nop
 8011b04:	080145a0 	.word	0x080145a0
 8011b08:	080145a8 	.word	0x080145a8

08011b0c <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	b08b      	sub	sp, #44	@ 0x2c
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	60b9      	str	r1, [r7, #8]
 8011b16:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	685b      	ldr	r3, [r3, #4]
 8011b22:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	685b      	ldr	r3, [r3, #4]
 8011b28:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	881b      	ldrh	r3, [r3, #0]
 8011b2e:	461a      	mov	r2, r3
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	885b      	ldrh	r3, [r3, #2]
 8011b34:	fb02 f303 	mul.w	r3, r2, r3
 8011b38:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8011b3e:	e013      	b.n	8011b68 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8011b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b42:	1d1a      	adds	r2, r3, #4
 8011b44:	627a      	str	r2, [r7, #36]	@ 0x24
 8011b46:	ed93 7a00 	vldr	s14, [r3]
 8011b4a:	6a3b      	ldr	r3, [r7, #32]
 8011b4c:	1d1a      	adds	r2, r3, #4
 8011b4e:	623a      	str	r2, [r7, #32]
 8011b50:	edd3 7a00 	vldr	s15, [r3]
 8011b54:	69fb      	ldr	r3, [r7, #28]
 8011b56:	1d1a      	adds	r2, r3, #4
 8011b58:	61fa      	str	r2, [r7, #28]
 8011b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b5e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8011b62:	69bb      	ldr	r3, [r7, #24]
 8011b64:	3b01      	subs	r3, #1
 8011b66:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8011b68:	69bb      	ldr	r3, [r7, #24]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d1e8      	bne.n	8011b40 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8011b72:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	372c      	adds	r7, #44	@ 0x2c
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b80:	4770      	bx	lr

08011b82 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8011b82:	b480      	push	{r7}
 8011b84:	b085      	sub	sp, #20
 8011b86:	af00      	add	r7, sp, #0
 8011b88:	60f8      	str	r0, [r7, #12]
 8011b8a:	607b      	str	r3, [r7, #4]
 8011b8c:	460b      	mov	r3, r1
 8011b8e:	817b      	strh	r3, [r7, #10]
 8011b90:	4613      	mov	r3, r2
 8011b92:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	897a      	ldrh	r2, [r7, #10]
 8011b98:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	893a      	ldrh	r2, [r7, #8]
 8011b9e:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	687a      	ldr	r2, [r7, #4]
 8011ba4:	605a      	str	r2, [r3, #4]
}
 8011ba6:	bf00      	nop
 8011ba8:	3714      	adds	r7, #20
 8011baa:	46bd      	mov	sp, r7
 8011bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb0:	4770      	bx	lr

08011bb2 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8011bb2:	b480      	push	{r7}
 8011bb4:	b0bb      	sub	sp, #236	@ 0xec
 8011bb6:	af00      	add	r7, sp, #0
 8011bb8:	6078      	str	r0, [r7, #4]
 8011bba:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	685b      	ldr	r3, [r3, #4]
 8011bc0:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	685b      	ldr	r3, [r3, #4]
 8011bc6:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	881b      	ldrh	r3, [r3, #0]
 8011bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	885b      	ldrh	r3, [r3, #2]
 8011bd2:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8011bd4:	f04f 0300 	mov.w	r3, #0
 8011bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011bdc:	f04f 0300 	mov.w	r3, #0
 8011be0:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 8011be2:	2300      	movs	r3, #0
 8011be4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8011be8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011bea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 8011bee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8011bf4:	e03b      	b.n	8011c6e <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8011bf6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011bf8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011bfc:	1ad3      	subs	r3, r2, r3
 8011bfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011c02:	e00c      	b.n	8011c1e <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8011c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011c08:	1d1a      	adds	r2, r3, #4
 8011c0a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8011c0e:	f04f 0200 	mov.w	r2, #0
 8011c12:	601a      	str	r2, [r3, #0]
        j--;
 8011c14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011c18:	3b01      	subs	r3, #1
 8011c1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011c1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d1ee      	bne.n	8011c04 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8011c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011c2a:	1d1a      	adds	r2, r3, #4
 8011c2c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8011c30:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8011c34:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8011c36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011c3a:	3b01      	subs	r3, #1
 8011c3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011c40:	e00c      	b.n	8011c5c <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 8011c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011c46:	1d1a      	adds	r2, r3, #4
 8011c48:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8011c4c:	f04f 0200 	mov.w	r2, #0
 8011c50:	601a      	str	r2, [r3, #0]
        j--;
 8011c52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011c56:	3b01      	subs	r3, #1
 8011c58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011c5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d1ee      	bne.n	8011c42 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 8011c64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011c68:	3b01      	subs	r3, #1
 8011c6a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 8011c6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d1bf      	bne.n	8011bf6 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 8011c76:	2300      	movs	r3, #0
 8011c78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011c7c:	e2c7      	b.n	801220e <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8011c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011c82:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	685a      	ldr	r2, [r3, #4]
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	885b      	ldrh	r3, [r3, #2]
 8011c8c:	3301      	adds	r3, #1
 8011c8e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8011c92:	fb01 f303 	mul.w	r3, r1, r3
 8011c96:	009b      	lsls	r3, r3, #2
 8011c98:	4413      	add	r3, r2
 8011c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 8011c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 8011ca8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011cac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8011cb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011cb4:	3301      	adds	r3, #1
 8011cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011cba:	e02c      	b.n	8011d16 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	685a      	ldr	r2, [r3, #4]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	885b      	ldrh	r3, [r3, #2]
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011cca:	fb03 f101 	mul.w	r1, r3, r1
 8011cce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011cd2:	440b      	add	r3, r1
 8011cd4:	009b      	lsls	r3, r3, #2
 8011cd6:	4413      	add	r3, r2
 8011cd8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 8011cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8011ce4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8011ce8:	eeb0 7ae7 	vabs.f32	s14, s15
 8011cec:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011cf0:	eef0 7ae7 	vabs.f32	s15, s15
 8011cf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cfc:	dd06      	ble.n	8011d0c <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 8011cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011d02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 8011d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8011d0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011d10:	3301      	adds	r3, #1
 8011d12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011d16:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011d1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d3cd      	bcc.n	8011cbc <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8011d20:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011d24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d2c:	f000 809b 	beq.w	8011e66 <arm_mat_inverse_f32+0x2b4>
 8011d30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011d34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	f000 8094 	beq.w	8011e66 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	685b      	ldr	r3, [r3, #4]
 8011d42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	685b      	ldr	r3, [r3, #4]
 8011d4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	885b      	ldrh	r3, [r3, #2]
 8011d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011d54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011d56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011d5a:	1ad3      	subs	r3, r2, r3
 8011d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d60:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011d62:	fb03 f202 	mul.w	r2, r3, r2
 8011d66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011d6a:	4413      	add	r3, r2
 8011d6c:	009b      	lsls	r3, r3, #2
 8011d6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8011d72:	4413      	add	r3, r2
 8011d74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011d78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011d7e:	fb03 f202 	mul.w	r2, r3, r2
 8011d82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011d86:	4413      	add	r3, r2
 8011d88:	009b      	lsls	r3, r3, #2
 8011d8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011d8e:	4413      	add	r3, r2
 8011d90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011d94:	2300      	movs	r3, #0
 8011d96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011d9a:	e018      	b.n	8011dce <arm_mat_inverse_f32+0x21c>
 8011d9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011da4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011da8:	1d1a      	adds	r2, r3, #4
 8011daa:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8011dae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011db2:	6812      	ldr	r2, [r2, #0]
 8011db4:	601a      	str	r2, [r3, #0]
 8011db6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011dba:	1d1a      	adds	r2, r3, #4
 8011dbc:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8011dc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011dc2:	601a      	str	r2, [r3, #0]
 8011dc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011dc8:	3301      	adds	r3, #1
 8011dca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011dce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8011dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	dbe1      	blt.n	8011d9c <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	685b      	ldr	r3, [r3, #4]
 8011ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	685b      	ldr	r3, [r3, #4]
 8011de4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	885b      	ldrh	r3, [r3, #2]
 8011dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8011dee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011df0:	643b      	str	r3, [r7, #64]	@ 0x40
 8011df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011df4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011df6:	fb02 f303 	mul.w	r3, r2, r3
 8011dfa:	009b      	lsls	r3, r3, #2
 8011dfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8011e00:	4413      	add	r3, r2
 8011e02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011e06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011e0c:	fb02 f303 	mul.w	r3, r2, r3
 8011e10:	009b      	lsls	r3, r3, #2
 8011e12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011e16:	4413      	add	r3, r2
 8011e18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011e22:	e018      	b.n	8011e56 <arm_mat_inverse_f32+0x2a4>
 8011e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011e2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e30:	1d1a      	adds	r2, r3, #4
 8011e32:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8011e36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011e3a:	6812      	ldr	r2, [r2, #0]
 8011e3c:	601a      	str	r2, [r3, #0]
 8011e3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011e42:	1d1a      	adds	r2, r3, #4
 8011e44:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8011e48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011e4a:	601a      	str	r2, [r3, #0]
 8011e4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8011e50:	3301      	adds	r3, #1
 8011e52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011e56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e5c:	429a      	cmp	r2, r3
 8011e5e:	dbe1      	blt.n	8011e24 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8011e60:	2301      	movs	r3, #1
 8011e62:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 8011e66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8011e6a:	2b01      	cmp	r3, #1
 8011e6c:	d009      	beq.n	8011e82 <arm_mat_inverse_f32+0x2d0>
 8011e6e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011e72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e7a:	d102      	bne.n	8011e82 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8011e7c:	f06f 0304 	mvn.w	r3, #4
 8011e80:	e208      	b.n	8012294 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 8011e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011e86:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8011e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011e8e:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	685b      	ldr	r3, [r3, #4]
 8011e96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	885b      	ldrh	r3, [r3, #2]
 8011e9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ea0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011ea2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011ea6:	1ad3      	subs	r3, r2, r3
 8011ea8:	633b      	str	r3, [r7, #48]	@ 0x30
 8011eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011eac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011eae:	fb03 f202 	mul.w	r2, r3, r2
 8011eb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011eb6:	4413      	add	r3, r2
 8011eb8:	009b      	lsls	r3, r3, #2
 8011eba:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8011ebe:	4413      	add	r3, r2
 8011ec0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011eca:	e011      	b.n	8011ef0 <arm_mat_inverse_f32+0x33e>
 8011ecc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011ed0:	1d1a      	adds	r2, r3, #4
 8011ed2:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8011ed6:	ed93 7a00 	vldr	s14, [r3]
 8011eda:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ee2:	edc3 7a00 	vstr	s15, [r3]
 8011ee6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011eea:	3301      	adds	r3, #1
 8011eec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011ef0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	dbe8      	blt.n	8011ecc <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	685b      	ldr	r3, [r3, #4]
 8011efe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	885b      	ldrh	r3, [r3, #2]
 8011f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011f10:	fb02 f303 	mul.w	r3, r2, r3
 8011f14:	009b      	lsls	r3, r3, #2
 8011f16:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011f1a:	4413      	add	r3, r2
 8011f1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011f20:	2300      	movs	r3, #0
 8011f22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011f26:	e011      	b.n	8011f4c <arm_mat_inverse_f32+0x39a>
 8011f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011f2c:	1d1a      	adds	r2, r3, #4
 8011f2e:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8011f32:	ed93 7a00 	vldr	s14, [r3]
 8011f36:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f3e:	edc3 7a00 	vstr	s15, [r3]
 8011f42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011f46:	3301      	adds	r3, #1
 8011f48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011f4c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f52:	429a      	cmp	r2, r3
 8011f54:	dbe8      	blt.n	8011f28 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 8011f56:	2300      	movs	r3, #0
 8011f58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8011f5c:	e0ae      	b.n	80120bc <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	685a      	ldr	r2, [r3, #4]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	885b      	ldrh	r3, [r3, #2]
 8011f66:	4619      	mov	r1, r3
 8011f68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011f6c:	fb03 f101 	mul.w	r1, r3, r1
 8011f70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011f74:	440b      	add	r3, r1
 8011f76:	009b      	lsls	r3, r3, #2
 8011f78:	4413      	add	r3, r2
 8011f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8011f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	685b      	ldr	r3, [r3, #4]
 8011f8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	685b      	ldr	r3, [r3, #4]
 8011f94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	885b      	ldrh	r3, [r3, #2]
 8011f9c:	617b      	str	r3, [r7, #20]
 8011f9e:	697a      	ldr	r2, [r7, #20]
 8011fa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011fa4:	1ad3      	subs	r3, r2, r3
 8011fa6:	613b      	str	r3, [r7, #16]
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011fae:	fb03 f202 	mul.w	r2, r3, r2
 8011fb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011fb6:	4413      	add	r3, r2
 8011fb8:	009b      	lsls	r3, r3, #2
 8011fba:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8011fbe:	4413      	add	r3, r2
 8011fc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011fc8:	fb03 f202 	mul.w	r2, r3, r2
 8011fcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011fd0:	4413      	add	r3, r2
 8011fd2:	009b      	lsls	r3, r3, #2
 8011fd4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8011fd8:	4413      	add	r3, r2
 8011fda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011fde:	2300      	movs	r3, #0
 8011fe0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011fe4:	e01a      	b.n	801201c <arm_mat_inverse_f32+0x46a>
 8011fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011fea:	1d1a      	adds	r2, r3, #4
 8011fec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011ff0:	ed93 7a00 	vldr	s14, [r3]
 8011ff4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012000:	1d1a      	adds	r2, r3, #4
 8012002:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8012006:	ed93 7a00 	vldr	s14, [r3]
 801200a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801200e:	edc3 7a00 	vstr	s15, [r3]
 8012012:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012016:	3301      	adds	r3, #1
 8012018:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801201c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	429a      	cmp	r2, r3
 8012024:	dbdf      	blt.n	8011fe6 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	685b      	ldr	r3, [r3, #4]
 801202a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	685b      	ldr	r3, [r3, #4]
 8012032:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012036:	683b      	ldr	r3, [r7, #0]
 8012038:	885b      	ldrh	r3, [r3, #2]
 801203a:	60fb      	str	r3, [r7, #12]
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	60bb      	str	r3, [r7, #8]
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012046:	fb02 f303 	mul.w	r3, r2, r3
 801204a:	009b      	lsls	r3, r3, #2
 801204c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012050:	4413      	add	r3, r2
 8012052:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801205a:	fb02 f303 	mul.w	r3, r2, r3
 801205e:	009b      	lsls	r3, r3, #2
 8012060:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012064:	4413      	add	r3, r2
 8012066:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801206a:	2300      	movs	r3, #0
 801206c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012070:	e01a      	b.n	80120a8 <arm_mat_inverse_f32+0x4f6>
 8012072:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012076:	1d1a      	adds	r2, r3, #4
 8012078:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801207c:	ed93 7a00 	vldr	s14, [r3]
 8012080:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012088:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801208c:	1d1a      	adds	r2, r3, #4
 801208e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8012092:	ed93 7a00 	vldr	s14, [r3]
 8012096:	ee77 7a67 	vsub.f32	s15, s14, s15
 801209a:	edc3 7a00 	vstr	s15, [r3]
 801209e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80120a2:	3301      	adds	r3, #1
 80120a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80120a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	429a      	cmp	r2, r3
 80120b0:	dbdf      	blt.n	8012072 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 80120b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80120b6:	3301      	adds	r3, #1
 80120b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80120bc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80120c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80120c2:	429a      	cmp	r2, r3
 80120c4:	f4ff af4b 	bcc.w	8011f5e <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 80120c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80120ca:	3301      	adds	r3, #1
 80120cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80120d0:	e092      	b.n	80121f8 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	685a      	ldr	r2, [r3, #4]
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	885b      	ldrh	r3, [r3, #2]
 80120da:	4619      	mov	r1, r3
 80120dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80120e0:	fb03 f101 	mul.w	r1, r3, r1
 80120e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80120e8:	440b      	add	r3, r1
 80120ea:	009b      	lsls	r3, r3, #2
 80120ec:	4413      	add	r3, r2
 80120ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 80120f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	685b      	ldr	r3, [r3, #4]
 8012100:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	685b      	ldr	r3, [r3, #4]
 8012106:	677b      	str	r3, [r7, #116]	@ 0x74
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	885b      	ldrh	r3, [r3, #2]
 801210c:	627b      	str	r3, [r7, #36]	@ 0x24
 801210e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012110:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012114:	1ad3      	subs	r3, r2, r3
 8012116:	623b      	str	r3, [r7, #32]
 8012118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801211a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801211e:	fb03 f202 	mul.w	r2, r3, r2
 8012122:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012126:	4413      	add	r3, r2
 8012128:	009b      	lsls	r3, r3, #2
 801212a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801212c:	4413      	add	r3, r2
 801212e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012132:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012134:	fb03 f202 	mul.w	r2, r3, r2
 8012138:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801213c:	4413      	add	r3, r2
 801213e:	009b      	lsls	r3, r3, #2
 8012140:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8012142:	4413      	add	r3, r2
 8012144:	677b      	str	r3, [r7, #116]	@ 0x74
 8012146:	2300      	movs	r3, #0
 8012148:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801214a:	e014      	b.n	8012176 <arm_mat_inverse_f32+0x5c4>
 801214c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801214e:	1d1a      	adds	r2, r3, #4
 8012150:	677a      	str	r2, [r7, #116]	@ 0x74
 8012152:	ed93 7a00 	vldr	s14, [r3]
 8012156:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801215a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801215e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012160:	1d1a      	adds	r2, r3, #4
 8012162:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012164:	ed93 7a00 	vldr	s14, [r3]
 8012168:	ee77 7a67 	vsub.f32	s15, s14, s15
 801216c:	edc3 7a00 	vstr	s15, [r3]
 8012170:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012172:	3301      	adds	r3, #1
 8012174:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012176:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012178:	6a3b      	ldr	r3, [r7, #32]
 801217a:	429a      	cmp	r2, r3
 801217c:	dbe6      	blt.n	801214c <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 801217e:	683b      	ldr	r3, [r7, #0]
 8012180:	685b      	ldr	r3, [r3, #4]
 8012182:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	685b      	ldr	r3, [r3, #4]
 8012188:	66bb      	str	r3, [r7, #104]	@ 0x68
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	885b      	ldrh	r3, [r3, #2]
 801218e:	61fb      	str	r3, [r7, #28]
 8012190:	69fb      	ldr	r3, [r7, #28]
 8012192:	61bb      	str	r3, [r7, #24]
 8012194:	69fb      	ldr	r3, [r7, #28]
 8012196:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801219a:	fb02 f303 	mul.w	r3, r2, r3
 801219e:	009b      	lsls	r3, r3, #2
 80121a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80121a2:	4413      	add	r3, r2
 80121a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80121a6:	69fb      	ldr	r3, [r7, #28]
 80121a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80121aa:	fb02 f303 	mul.w	r3, r2, r3
 80121ae:	009b      	lsls	r3, r3, #2
 80121b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80121b2:	4413      	add	r3, r2
 80121b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80121b6:	2300      	movs	r3, #0
 80121b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80121ba:	e014      	b.n	80121e6 <arm_mat_inverse_f32+0x634>
 80121bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80121be:	1d1a      	adds	r2, r3, #4
 80121c0:	66ba      	str	r2, [r7, #104]	@ 0x68
 80121c2:	ed93 7a00 	vldr	s14, [r3]
 80121c6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80121ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121d0:	1d1a      	adds	r2, r3, #4
 80121d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80121d4:	ed93 7a00 	vldr	s14, [r3]
 80121d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80121dc:	edc3 7a00 	vstr	s15, [r3]
 80121e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80121e2:	3301      	adds	r3, #1
 80121e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80121e6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80121e8:	69bb      	ldr	r3, [r7, #24]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	dbe6      	blt.n	80121bc <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 80121ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80121f2:	3301      	adds	r3, #1
 80121f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80121f8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80121fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121fe:	429a      	cmp	r2, r3
 8012200:	f4ff af67 	bcc.w	80120d2 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8012204:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012208:	3301      	adds	r3, #1
 801220a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801220e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012212:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012214:	429a      	cmp	r2, r3
 8012216:	f4ff ad32 	bcc.w	8011c7e <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 801221a:	2300      	movs	r3, #0
 801221c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8012220:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012224:	2b01      	cmp	r3, #1
 8012226:	d033      	beq.n	8012290 <arm_mat_inverse_f32+0x6de>
 8012228:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801222c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012234:	d12c      	bne.n	8012290 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	685b      	ldr	r3, [r3, #4]
 801223a:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 801223c:	2300      	movs	r3, #0
 801223e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012242:	e010      	b.n	8012266 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8012244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012248:	009b      	lsls	r3, r3, #2
 801224a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801224c:	4413      	add	r3, r2
 801224e:	edd3 7a00 	vldr	s15, [r3]
 8012252:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801225a:	d10d      	bne.n	8012278 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 801225c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012260:	3301      	adds	r3, #1
 8012262:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012266:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012268:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801226a:	fb02 f303 	mul.w	r3, r2, r3
 801226e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8012272:	429a      	cmp	r2, r3
 8012274:	d3e6      	bcc.n	8012244 <arm_mat_inverse_f32+0x692>
 8012276:	e000      	b.n	801227a <arm_mat_inverse_f32+0x6c8>
            break;
 8012278:	bf00      	nop
      }

      if (i == numRows * numCols)
 801227a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801227c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801227e:	fb02 f303 	mul.w	r3, r2, r3
 8012282:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8012286:	429a      	cmp	r2, r3
 8012288:	d102      	bne.n	8012290 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 801228a:	23fb      	movs	r3, #251	@ 0xfb
 801228c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 8012290:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 8012294:	4618      	mov	r0, r3
 8012296:	37ec      	adds	r7, #236	@ 0xec
 8012298:	46bd      	mov	sp, r7
 801229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229e:	4770      	bx	lr

080122a0 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80122a0:	b480      	push	{r7}
 80122a2:	b093      	sub	sp, #76	@ 0x4c
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	60f8      	str	r0, [r7, #12]
 80122a8:	60b9      	str	r1, [r7, #8]
 80122aa:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	685b      	ldr	r3, [r3, #4]
 80122b0:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 80122b2:	68bb      	ldr	r3, [r7, #8]
 80122b4:	685b      	ldr	r3, [r3, #4]
 80122b6:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	685b      	ldr	r3, [r3, #4]
 80122bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	685b      	ldr	r3, [r3, #4]
 80122c2:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	685b      	ldr	r3, [r3, #4]
 80122c8:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	881b      	ldrh	r3, [r3, #0]
 80122ce:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	885b      	ldrh	r3, [r3, #2]
 80122d4:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	885b      	ldrh	r3, [r3, #2]
 80122da:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 80122dc:	2300      	movs	r3, #0
 80122de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80122e0:	8b7b      	ldrh	r3, [r7, #26]
 80122e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 80122e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122e6:	009b      	lsls	r3, r3, #2
 80122e8:	69fa      	ldr	r2, [r7, #28]
 80122ea:	4413      	add	r3, r2
 80122ec:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 80122ee:	8b3b      	ldrh	r3, [r7, #24]
 80122f0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	685b      	ldr	r3, [r3, #4]
 80122f6:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 80122f8:	f04f 0300 	mov.w	r3, #0
 80122fc:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 80122fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012300:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8012302:	8afb      	ldrh	r3, [r7, #22]
 8012304:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8012306:	e017      	b.n	8012338 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8012308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801230a:	1d1a      	adds	r2, r3, #4
 801230c:	647a      	str	r2, [r7, #68]	@ 0x44
 801230e:	ed93 7a00 	vldr	s14, [r3]
 8012312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012314:	edd3 7a00 	vldr	s15, [r3]
 8012318:	ee67 7a27 	vmul.f32	s15, s14, s15
 801231c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8012320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012324:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 8012328:	8b3b      	ldrh	r3, [r7, #24]
 801232a:	009b      	lsls	r3, r3, #2
 801232c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801232e:	4413      	add	r3, r2
 8012330:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 8012332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012334:	3b01      	subs	r3, #1
 8012336:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8012338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801233a:	2b00      	cmp	r3, #0
 801233c:	d1e4      	bne.n	8012308 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 801233e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012340:	1d1a      	adds	r2, r3, #4
 8012342:	63ba      	str	r2, [r7, #56]	@ 0x38
 8012344:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012346:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8012348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801234a:	3b01      	subs	r3, #1
 801234c:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 801234e:	8b3a      	ldrh	r2, [r7, #24]
 8012350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012352:	1ad3      	subs	r3, r2, r3
 8012354:	009b      	lsls	r3, r3, #2
 8012356:	6a3a      	ldr	r2, [r7, #32]
 8012358:	4413      	add	r3, r2
 801235a:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 801235c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801235e:	2b00      	cmp	r3, #0
 8012360:	d1ca      	bne.n	80122f8 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8012362:	8b3b      	ldrh	r3, [r7, #24]
 8012364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012366:	4413      	add	r3, r2
 8012368:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 801236a:	8afb      	ldrh	r3, [r7, #22]
 801236c:	009b      	lsls	r3, r3, #2
 801236e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012370:	4413      	add	r3, r2
 8012372:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8012374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012376:	3b01      	subs	r3, #1
 8012378:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 801237a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801237c:	2b00      	cmp	r3, #0
 801237e:	d1b1      	bne.n	80122e4 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012380:	2300      	movs	r3, #0
 8012382:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8012384:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8012388:	4618      	mov	r0, r3
 801238a:	374c      	adds	r7, #76	@ 0x4c
 801238c:	46bd      	mov	sp, r7
 801238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012392:	4770      	bx	lr

08012394 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8012394:	b480      	push	{r7}
 8012396:	b08b      	sub	sp, #44	@ 0x2c
 8012398:	af00      	add	r7, sp, #0
 801239a:	60f8      	str	r0, [r7, #12]
 801239c:	ed87 0a02 	vstr	s0, [r7, #8]
 80123a0:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	685b      	ldr	r3, [r3, #4]
 80123a6:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	685b      	ldr	r3, [r3, #4]
 80123ac:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	881b      	ldrh	r3, [r3, #0]
 80123b2:	461a      	mov	r2, r3
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	885b      	ldrh	r3, [r3, #2]
 80123b8:	fb02 f303 	mul.w	r3, r2, r3
 80123bc:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80123be:	69bb      	ldr	r3, [r7, #24]
 80123c0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80123c2:	e010      	b.n	80123e6 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 80123c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123c6:	1d1a      	adds	r2, r3, #4
 80123c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80123ca:	ed93 7a00 	vldr	s14, [r3]
 80123ce:	6a3b      	ldr	r3, [r7, #32]
 80123d0:	1d1a      	adds	r2, r3, #4
 80123d2:	623a      	str	r2, [r7, #32]
 80123d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80123d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123dc:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80123e0:	69fb      	ldr	r3, [r7, #28]
 80123e2:	3b01      	subs	r3, #1
 80123e4:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80123e6:	69fb      	ldr	r3, [r7, #28]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d1eb      	bne.n	80123c4 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80123ec:	2300      	movs	r3, #0
 80123ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 80123f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80123f4:	4618      	mov	r0, r3
 80123f6:	372c      	adds	r7, #44	@ 0x2c
 80123f8:	46bd      	mov	sp, r7
 80123fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fe:	4770      	bx	lr

08012400 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012400:	b480      	push	{r7}
 8012402:	b08b      	sub	sp, #44	@ 0x2c
 8012404:	af00      	add	r7, sp, #0
 8012406:	60f8      	str	r0, [r7, #12]
 8012408:	60b9      	str	r1, [r7, #8]
 801240a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	685b      	ldr	r3, [r3, #4]
 8012416:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	685b      	ldr	r3, [r3, #4]
 801241c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	881b      	ldrh	r3, [r3, #0]
 8012422:	461a      	mov	r2, r3
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	885b      	ldrh	r3, [r3, #2]
 8012428:	fb02 f303 	mul.w	r3, r2, r3
 801242c:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8012432:	e013      	b.n	801245c <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8012434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012436:	1d1a      	adds	r2, r3, #4
 8012438:	627a      	str	r2, [r7, #36]	@ 0x24
 801243a:	ed93 7a00 	vldr	s14, [r3]
 801243e:	6a3b      	ldr	r3, [r7, #32]
 8012440:	1d1a      	adds	r2, r3, #4
 8012442:	623a      	str	r2, [r7, #32]
 8012444:	edd3 7a00 	vldr	s15, [r3]
 8012448:	69fb      	ldr	r3, [r7, #28]
 801244a:	1d1a      	adds	r2, r3, #4
 801244c:	61fa      	str	r2, [r7, #28]
 801244e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012452:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8012456:	69bb      	ldr	r3, [r7, #24]
 8012458:	3b01      	subs	r3, #1
 801245a:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 801245c:	69bb      	ldr	r3, [r7, #24]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d1e8      	bne.n	8012434 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012462:	2300      	movs	r3, #0
 8012464:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8012466:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801246a:	4618      	mov	r0, r3
 801246c:	372c      	adds	r7, #44	@ 0x2c
 801246e:	46bd      	mov	sp, r7
 8012470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012474:	4770      	bx	lr

08012476 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8012476:	b480      	push	{r7}
 8012478:	b08b      	sub	sp, #44	@ 0x2c
 801247a:	af00      	add	r7, sp, #0
 801247c:	6078      	str	r0, [r7, #4]
 801247e:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	685b      	ldr	r3, [r3, #4]
 8012484:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	685b      	ldr	r3, [r3, #4]
 801248a:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	881b      	ldrh	r3, [r3, #0]
 8012490:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	885b      	ldrh	r3, [r3, #2]
 8012496:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8012498:	89fb      	ldrh	r3, [r7, #14]
 801249a:	61bb      	str	r3, [r7, #24]
 801249c:	2300      	movs	r3, #0
 801249e:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	009b      	lsls	r3, r3, #2
 80124a4:	693a      	ldr	r2, [r7, #16]
 80124a6:	4413      	add	r3, r2
 80124a8:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 80124aa:	89bb      	ldrh	r3, [r7, #12]
 80124ac:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 80124ae:	e00d      	b.n	80124cc <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 80124b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124b2:	1d1a      	adds	r2, r3, #4
 80124b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80124b6:	681a      	ldr	r2, [r3, #0]
 80124b8:	6a3b      	ldr	r3, [r7, #32]
 80124ba:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 80124bc:	89fb      	ldrh	r3, [r7, #14]
 80124be:	009b      	lsls	r3, r3, #2
 80124c0:	6a3a      	ldr	r2, [r7, #32]
 80124c2:	4413      	add	r3, r2
 80124c4:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 80124c6:	69fb      	ldr	r3, [r7, #28]
 80124c8:	3b01      	subs	r3, #1
 80124ca:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 80124cc:	69fb      	ldr	r3, [r7, #28]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d1ee      	bne.n	80124b0 <arm_mat_trans_f32+0x3a>
      }

      i++;
 80124d2:	697b      	ldr	r3, [r7, #20]
 80124d4:	3301      	adds	r3, #1
 80124d6:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 80124d8:	69bb      	ldr	r3, [r7, #24]
 80124da:	3b01      	subs	r3, #1
 80124dc:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 80124de:	69bb      	ldr	r3, [r7, #24]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d1dd      	bne.n	80124a0 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80124e4:	2300      	movs	r3, #0
 80124e6:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 80124e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80124ec:	4618      	mov	r0, r3
 80124ee:	372c      	adds	r7, #44	@ 0x2c
 80124f0:	46bd      	mov	sp, r7
 80124f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f6:	4770      	bx	lr

080124f8 <malloc>:
 80124f8:	4b02      	ldr	r3, [pc, #8]	@ (8012504 <malloc+0xc>)
 80124fa:	4601      	mov	r1, r0
 80124fc:	6818      	ldr	r0, [r3, #0]
 80124fe:	f000 b825 	b.w	801254c <_malloc_r>
 8012502:	bf00      	nop
 8012504:	20000344 	.word	0x20000344

08012508 <sbrk_aligned>:
 8012508:	b570      	push	{r4, r5, r6, lr}
 801250a:	4e0f      	ldr	r6, [pc, #60]	@ (8012548 <sbrk_aligned+0x40>)
 801250c:	460c      	mov	r4, r1
 801250e:	6831      	ldr	r1, [r6, #0]
 8012510:	4605      	mov	r5, r0
 8012512:	b911      	cbnz	r1, 801251a <sbrk_aligned+0x12>
 8012514:	f000 f8ae 	bl	8012674 <_sbrk_r>
 8012518:	6030      	str	r0, [r6, #0]
 801251a:	4621      	mov	r1, r4
 801251c:	4628      	mov	r0, r5
 801251e:	f000 f8a9 	bl	8012674 <_sbrk_r>
 8012522:	1c43      	adds	r3, r0, #1
 8012524:	d103      	bne.n	801252e <sbrk_aligned+0x26>
 8012526:	f04f 34ff 	mov.w	r4, #4294967295
 801252a:	4620      	mov	r0, r4
 801252c:	bd70      	pop	{r4, r5, r6, pc}
 801252e:	1cc4      	adds	r4, r0, #3
 8012530:	f024 0403 	bic.w	r4, r4, #3
 8012534:	42a0      	cmp	r0, r4
 8012536:	d0f8      	beq.n	801252a <sbrk_aligned+0x22>
 8012538:	1a21      	subs	r1, r4, r0
 801253a:	4628      	mov	r0, r5
 801253c:	f000 f89a 	bl	8012674 <_sbrk_r>
 8012540:	3001      	adds	r0, #1
 8012542:	d1f2      	bne.n	801252a <sbrk_aligned+0x22>
 8012544:	e7ef      	b.n	8012526 <sbrk_aligned+0x1e>
 8012546:	bf00      	nop
 8012548:	20002470 	.word	0x20002470

0801254c <_malloc_r>:
 801254c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012550:	1ccd      	adds	r5, r1, #3
 8012552:	f025 0503 	bic.w	r5, r5, #3
 8012556:	3508      	adds	r5, #8
 8012558:	2d0c      	cmp	r5, #12
 801255a:	bf38      	it	cc
 801255c:	250c      	movcc	r5, #12
 801255e:	2d00      	cmp	r5, #0
 8012560:	4606      	mov	r6, r0
 8012562:	db01      	blt.n	8012568 <_malloc_r+0x1c>
 8012564:	42a9      	cmp	r1, r5
 8012566:	d904      	bls.n	8012572 <_malloc_r+0x26>
 8012568:	230c      	movs	r3, #12
 801256a:	6033      	str	r3, [r6, #0]
 801256c:	2000      	movs	r0, #0
 801256e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012572:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012648 <_malloc_r+0xfc>
 8012576:	f000 f869 	bl	801264c <__malloc_lock>
 801257a:	f8d8 3000 	ldr.w	r3, [r8]
 801257e:	461c      	mov	r4, r3
 8012580:	bb44      	cbnz	r4, 80125d4 <_malloc_r+0x88>
 8012582:	4629      	mov	r1, r5
 8012584:	4630      	mov	r0, r6
 8012586:	f7ff ffbf 	bl	8012508 <sbrk_aligned>
 801258a:	1c43      	adds	r3, r0, #1
 801258c:	4604      	mov	r4, r0
 801258e:	d158      	bne.n	8012642 <_malloc_r+0xf6>
 8012590:	f8d8 4000 	ldr.w	r4, [r8]
 8012594:	4627      	mov	r7, r4
 8012596:	2f00      	cmp	r7, #0
 8012598:	d143      	bne.n	8012622 <_malloc_r+0xd6>
 801259a:	2c00      	cmp	r4, #0
 801259c:	d04b      	beq.n	8012636 <_malloc_r+0xea>
 801259e:	6823      	ldr	r3, [r4, #0]
 80125a0:	4639      	mov	r1, r7
 80125a2:	4630      	mov	r0, r6
 80125a4:	eb04 0903 	add.w	r9, r4, r3
 80125a8:	f000 f864 	bl	8012674 <_sbrk_r>
 80125ac:	4581      	cmp	r9, r0
 80125ae:	d142      	bne.n	8012636 <_malloc_r+0xea>
 80125b0:	6821      	ldr	r1, [r4, #0]
 80125b2:	1a6d      	subs	r5, r5, r1
 80125b4:	4629      	mov	r1, r5
 80125b6:	4630      	mov	r0, r6
 80125b8:	f7ff ffa6 	bl	8012508 <sbrk_aligned>
 80125bc:	3001      	adds	r0, #1
 80125be:	d03a      	beq.n	8012636 <_malloc_r+0xea>
 80125c0:	6823      	ldr	r3, [r4, #0]
 80125c2:	442b      	add	r3, r5
 80125c4:	6023      	str	r3, [r4, #0]
 80125c6:	f8d8 3000 	ldr.w	r3, [r8]
 80125ca:	685a      	ldr	r2, [r3, #4]
 80125cc:	bb62      	cbnz	r2, 8012628 <_malloc_r+0xdc>
 80125ce:	f8c8 7000 	str.w	r7, [r8]
 80125d2:	e00f      	b.n	80125f4 <_malloc_r+0xa8>
 80125d4:	6822      	ldr	r2, [r4, #0]
 80125d6:	1b52      	subs	r2, r2, r5
 80125d8:	d420      	bmi.n	801261c <_malloc_r+0xd0>
 80125da:	2a0b      	cmp	r2, #11
 80125dc:	d917      	bls.n	801260e <_malloc_r+0xc2>
 80125de:	1961      	adds	r1, r4, r5
 80125e0:	42a3      	cmp	r3, r4
 80125e2:	6025      	str	r5, [r4, #0]
 80125e4:	bf18      	it	ne
 80125e6:	6059      	strne	r1, [r3, #4]
 80125e8:	6863      	ldr	r3, [r4, #4]
 80125ea:	bf08      	it	eq
 80125ec:	f8c8 1000 	streq.w	r1, [r8]
 80125f0:	5162      	str	r2, [r4, r5]
 80125f2:	604b      	str	r3, [r1, #4]
 80125f4:	4630      	mov	r0, r6
 80125f6:	f000 f82f 	bl	8012658 <__malloc_unlock>
 80125fa:	f104 000b 	add.w	r0, r4, #11
 80125fe:	1d23      	adds	r3, r4, #4
 8012600:	f020 0007 	bic.w	r0, r0, #7
 8012604:	1ac2      	subs	r2, r0, r3
 8012606:	bf1c      	itt	ne
 8012608:	1a1b      	subne	r3, r3, r0
 801260a:	50a3      	strne	r3, [r4, r2]
 801260c:	e7af      	b.n	801256e <_malloc_r+0x22>
 801260e:	6862      	ldr	r2, [r4, #4]
 8012610:	42a3      	cmp	r3, r4
 8012612:	bf0c      	ite	eq
 8012614:	f8c8 2000 	streq.w	r2, [r8]
 8012618:	605a      	strne	r2, [r3, #4]
 801261a:	e7eb      	b.n	80125f4 <_malloc_r+0xa8>
 801261c:	4623      	mov	r3, r4
 801261e:	6864      	ldr	r4, [r4, #4]
 8012620:	e7ae      	b.n	8012580 <_malloc_r+0x34>
 8012622:	463c      	mov	r4, r7
 8012624:	687f      	ldr	r7, [r7, #4]
 8012626:	e7b6      	b.n	8012596 <_malloc_r+0x4a>
 8012628:	461a      	mov	r2, r3
 801262a:	685b      	ldr	r3, [r3, #4]
 801262c:	42a3      	cmp	r3, r4
 801262e:	d1fb      	bne.n	8012628 <_malloc_r+0xdc>
 8012630:	2300      	movs	r3, #0
 8012632:	6053      	str	r3, [r2, #4]
 8012634:	e7de      	b.n	80125f4 <_malloc_r+0xa8>
 8012636:	230c      	movs	r3, #12
 8012638:	6033      	str	r3, [r6, #0]
 801263a:	4630      	mov	r0, r6
 801263c:	f000 f80c 	bl	8012658 <__malloc_unlock>
 8012640:	e794      	b.n	801256c <_malloc_r+0x20>
 8012642:	6005      	str	r5, [r0, #0]
 8012644:	e7d6      	b.n	80125f4 <_malloc_r+0xa8>
 8012646:	bf00      	nop
 8012648:	20002474 	.word	0x20002474

0801264c <__malloc_lock>:
 801264c:	4801      	ldr	r0, [pc, #4]	@ (8012654 <__malloc_lock+0x8>)
 801264e:	f000 b84b 	b.w	80126e8 <__retarget_lock_acquire_recursive>
 8012652:	bf00      	nop
 8012654:	200025b4 	.word	0x200025b4

08012658 <__malloc_unlock>:
 8012658:	4801      	ldr	r0, [pc, #4]	@ (8012660 <__malloc_unlock+0x8>)
 801265a:	f000 b846 	b.w	80126ea <__retarget_lock_release_recursive>
 801265e:	bf00      	nop
 8012660:	200025b4 	.word	0x200025b4

08012664 <memset>:
 8012664:	4402      	add	r2, r0
 8012666:	4603      	mov	r3, r0
 8012668:	4293      	cmp	r3, r2
 801266a:	d100      	bne.n	801266e <memset+0xa>
 801266c:	4770      	bx	lr
 801266e:	f803 1b01 	strb.w	r1, [r3], #1
 8012672:	e7f9      	b.n	8012668 <memset+0x4>

08012674 <_sbrk_r>:
 8012674:	b538      	push	{r3, r4, r5, lr}
 8012676:	4d06      	ldr	r5, [pc, #24]	@ (8012690 <_sbrk_r+0x1c>)
 8012678:	2300      	movs	r3, #0
 801267a:	4604      	mov	r4, r0
 801267c:	4608      	mov	r0, r1
 801267e:	602b      	str	r3, [r5, #0]
 8012680:	f7f7 f846 	bl	8009710 <_sbrk>
 8012684:	1c43      	adds	r3, r0, #1
 8012686:	d102      	bne.n	801268e <_sbrk_r+0x1a>
 8012688:	682b      	ldr	r3, [r5, #0]
 801268a:	b103      	cbz	r3, 801268e <_sbrk_r+0x1a>
 801268c:	6023      	str	r3, [r4, #0]
 801268e:	bd38      	pop	{r3, r4, r5, pc}
 8012690:	200025b0 	.word	0x200025b0

08012694 <__errno>:
 8012694:	4b01      	ldr	r3, [pc, #4]	@ (801269c <__errno+0x8>)
 8012696:	6818      	ldr	r0, [r3, #0]
 8012698:	4770      	bx	lr
 801269a:	bf00      	nop
 801269c:	20000344 	.word	0x20000344

080126a0 <__libc_init_array>:
 80126a0:	b570      	push	{r4, r5, r6, lr}
 80126a2:	4d0d      	ldr	r5, [pc, #52]	@ (80126d8 <__libc_init_array+0x38>)
 80126a4:	4c0d      	ldr	r4, [pc, #52]	@ (80126dc <__libc_init_array+0x3c>)
 80126a6:	1b64      	subs	r4, r4, r5
 80126a8:	10a4      	asrs	r4, r4, #2
 80126aa:	2600      	movs	r6, #0
 80126ac:	42a6      	cmp	r6, r4
 80126ae:	d109      	bne.n	80126c4 <__libc_init_array+0x24>
 80126b0:	4d0b      	ldr	r5, [pc, #44]	@ (80126e0 <__libc_init_array+0x40>)
 80126b2:	4c0c      	ldr	r4, [pc, #48]	@ (80126e4 <__libc_init_array+0x44>)
 80126b4:	f001 ff30 	bl	8014518 <_init>
 80126b8:	1b64      	subs	r4, r4, r5
 80126ba:	10a4      	asrs	r4, r4, #2
 80126bc:	2600      	movs	r6, #0
 80126be:	42a6      	cmp	r6, r4
 80126c0:	d105      	bne.n	80126ce <__libc_init_array+0x2e>
 80126c2:	bd70      	pop	{r4, r5, r6, pc}
 80126c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80126c8:	4798      	blx	r3
 80126ca:	3601      	adds	r6, #1
 80126cc:	e7ee      	b.n	80126ac <__libc_init_array+0xc>
 80126ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80126d2:	4798      	blx	r3
 80126d4:	3601      	adds	r6, #1
 80126d6:	e7f2      	b.n	80126be <__libc_init_array+0x1e>
 80126d8:	08014b68 	.word	0x08014b68
 80126dc:	08014b68 	.word	0x08014b68
 80126e0:	08014b68 	.word	0x08014b68
 80126e4:	08014b6c 	.word	0x08014b6c

080126e8 <__retarget_lock_acquire_recursive>:
 80126e8:	4770      	bx	lr

080126ea <__retarget_lock_release_recursive>:
 80126ea:	4770      	bx	lr

080126ec <memcpy>:
 80126ec:	440a      	add	r2, r1
 80126ee:	4291      	cmp	r1, r2
 80126f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80126f4:	d100      	bne.n	80126f8 <memcpy+0xc>
 80126f6:	4770      	bx	lr
 80126f8:	b510      	push	{r4, lr}
 80126fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80126fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012702:	4291      	cmp	r1, r2
 8012704:	d1f9      	bne.n	80126fa <memcpy+0xe>
 8012706:	bd10      	pop	{r4, pc}

08012708 <cos>:
 8012708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801270a:	ec53 2b10 	vmov	r2, r3, d0
 801270e:	4826      	ldr	r0, [pc, #152]	@ (80127a8 <cos+0xa0>)
 8012710:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012714:	4281      	cmp	r1, r0
 8012716:	d806      	bhi.n	8012726 <cos+0x1e>
 8012718:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80127a0 <cos+0x98>
 801271c:	b005      	add	sp, #20
 801271e:	f85d eb04 	ldr.w	lr, [sp], #4
 8012722:	f000 b9bd 	b.w	8012aa0 <__kernel_cos>
 8012726:	4821      	ldr	r0, [pc, #132]	@ (80127ac <cos+0xa4>)
 8012728:	4281      	cmp	r1, r0
 801272a:	d908      	bls.n	801273e <cos+0x36>
 801272c:	4610      	mov	r0, r2
 801272e:	4619      	mov	r1, r3
 8012730:	f7ed fd76 	bl	8000220 <__aeabi_dsub>
 8012734:	ec41 0b10 	vmov	d0, r0, r1
 8012738:	b005      	add	sp, #20
 801273a:	f85d fb04 	ldr.w	pc, [sp], #4
 801273e:	4668      	mov	r0, sp
 8012740:	f000 fb32 	bl	8012da8 <__ieee754_rem_pio2>
 8012744:	f000 0003 	and.w	r0, r0, #3
 8012748:	2801      	cmp	r0, #1
 801274a:	d00b      	beq.n	8012764 <cos+0x5c>
 801274c:	2802      	cmp	r0, #2
 801274e:	d015      	beq.n	801277c <cos+0x74>
 8012750:	b9d8      	cbnz	r0, 801278a <cos+0x82>
 8012752:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012756:	ed9d 0b00 	vldr	d0, [sp]
 801275a:	f000 f9a1 	bl	8012aa0 <__kernel_cos>
 801275e:	ec51 0b10 	vmov	r0, r1, d0
 8012762:	e7e7      	b.n	8012734 <cos+0x2c>
 8012764:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012768:	ed9d 0b00 	vldr	d0, [sp]
 801276c:	f000 fa60 	bl	8012c30 <__kernel_sin>
 8012770:	ec53 2b10 	vmov	r2, r3, d0
 8012774:	4610      	mov	r0, r2
 8012776:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801277a:	e7db      	b.n	8012734 <cos+0x2c>
 801277c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012780:	ed9d 0b00 	vldr	d0, [sp]
 8012784:	f000 f98c 	bl	8012aa0 <__kernel_cos>
 8012788:	e7f2      	b.n	8012770 <cos+0x68>
 801278a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801278e:	ed9d 0b00 	vldr	d0, [sp]
 8012792:	2001      	movs	r0, #1
 8012794:	f000 fa4c 	bl	8012c30 <__kernel_sin>
 8012798:	e7e1      	b.n	801275e <cos+0x56>
 801279a:	bf00      	nop
 801279c:	f3af 8000 	nop.w
	...
 80127a8:	3fe921fb 	.word	0x3fe921fb
 80127ac:	7fefffff 	.word	0x7fefffff

080127b0 <sin>:
 80127b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80127b2:	ec53 2b10 	vmov	r2, r3, d0
 80127b6:	4826      	ldr	r0, [pc, #152]	@ (8012850 <sin+0xa0>)
 80127b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80127bc:	4281      	cmp	r1, r0
 80127be:	d807      	bhi.n	80127d0 <sin+0x20>
 80127c0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012848 <sin+0x98>
 80127c4:	2000      	movs	r0, #0
 80127c6:	b005      	add	sp, #20
 80127c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80127cc:	f000 ba30 	b.w	8012c30 <__kernel_sin>
 80127d0:	4820      	ldr	r0, [pc, #128]	@ (8012854 <sin+0xa4>)
 80127d2:	4281      	cmp	r1, r0
 80127d4:	d908      	bls.n	80127e8 <sin+0x38>
 80127d6:	4610      	mov	r0, r2
 80127d8:	4619      	mov	r1, r3
 80127da:	f7ed fd21 	bl	8000220 <__aeabi_dsub>
 80127de:	ec41 0b10 	vmov	d0, r0, r1
 80127e2:	b005      	add	sp, #20
 80127e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80127e8:	4668      	mov	r0, sp
 80127ea:	f000 fadd 	bl	8012da8 <__ieee754_rem_pio2>
 80127ee:	f000 0003 	and.w	r0, r0, #3
 80127f2:	2801      	cmp	r0, #1
 80127f4:	d00c      	beq.n	8012810 <sin+0x60>
 80127f6:	2802      	cmp	r0, #2
 80127f8:	d011      	beq.n	801281e <sin+0x6e>
 80127fa:	b9e8      	cbnz	r0, 8012838 <sin+0x88>
 80127fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012800:	ed9d 0b00 	vldr	d0, [sp]
 8012804:	2001      	movs	r0, #1
 8012806:	f000 fa13 	bl	8012c30 <__kernel_sin>
 801280a:	ec51 0b10 	vmov	r0, r1, d0
 801280e:	e7e6      	b.n	80127de <sin+0x2e>
 8012810:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012814:	ed9d 0b00 	vldr	d0, [sp]
 8012818:	f000 f942 	bl	8012aa0 <__kernel_cos>
 801281c:	e7f5      	b.n	801280a <sin+0x5a>
 801281e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012822:	ed9d 0b00 	vldr	d0, [sp]
 8012826:	2001      	movs	r0, #1
 8012828:	f000 fa02 	bl	8012c30 <__kernel_sin>
 801282c:	ec53 2b10 	vmov	r2, r3, d0
 8012830:	4610      	mov	r0, r2
 8012832:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012836:	e7d2      	b.n	80127de <sin+0x2e>
 8012838:	ed9d 1b02 	vldr	d1, [sp, #8]
 801283c:	ed9d 0b00 	vldr	d0, [sp]
 8012840:	f000 f92e 	bl	8012aa0 <__kernel_cos>
 8012844:	e7f2      	b.n	801282c <sin+0x7c>
 8012846:	bf00      	nop
	...
 8012850:	3fe921fb 	.word	0x3fe921fb
 8012854:	7fefffff 	.word	0x7fefffff

08012858 <fmodf>:
 8012858:	b508      	push	{r3, lr}
 801285a:	ed2d 8b02 	vpush	{d8}
 801285e:	eef0 8a40 	vmov.f32	s17, s0
 8012862:	eeb0 8a60 	vmov.f32	s16, s1
 8012866:	f000 fd43 	bl	80132f0 <__ieee754_fmodf>
 801286a:	eef4 8a48 	vcmp.f32	s17, s16
 801286e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012872:	d60c      	bvs.n	801288e <fmodf+0x36>
 8012874:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012894 <fmodf+0x3c>
 8012878:	eeb4 8a68 	vcmp.f32	s16, s17
 801287c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012880:	d105      	bne.n	801288e <fmodf+0x36>
 8012882:	f7ff ff07 	bl	8012694 <__errno>
 8012886:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801288a:	2321      	movs	r3, #33	@ 0x21
 801288c:	6003      	str	r3, [r0, #0]
 801288e:	ecbd 8b02 	vpop	{d8}
 8012892:	bd08      	pop	{r3, pc}
 8012894:	00000000 	.word	0x00000000

08012898 <sqrtf>:
 8012898:	b508      	push	{r3, lr}
 801289a:	ed2d 8b02 	vpush	{d8}
 801289e:	eeb0 8a40 	vmov.f32	s16, s0
 80128a2:	f000 f8f7 	bl	8012a94 <__ieee754_sqrtf>
 80128a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80128aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128ae:	d60c      	bvs.n	80128ca <sqrtf+0x32>
 80128b0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80128d0 <sqrtf+0x38>
 80128b4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80128b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128bc:	d505      	bpl.n	80128ca <sqrtf+0x32>
 80128be:	f7ff fee9 	bl	8012694 <__errno>
 80128c2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80128c6:	2321      	movs	r3, #33	@ 0x21
 80128c8:	6003      	str	r3, [r0, #0]
 80128ca:	ecbd 8b02 	vpop	{d8}
 80128ce:	bd08      	pop	{r3, pc}
 80128d0:	00000000 	.word	0x00000000

080128d4 <cosf>:
 80128d4:	ee10 3a10 	vmov	r3, s0
 80128d8:	b507      	push	{r0, r1, r2, lr}
 80128da:	4a1e      	ldr	r2, [pc, #120]	@ (8012954 <cosf+0x80>)
 80128dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80128e0:	4293      	cmp	r3, r2
 80128e2:	d806      	bhi.n	80128f2 <cosf+0x1e>
 80128e4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8012958 <cosf+0x84>
 80128e8:	b003      	add	sp, #12
 80128ea:	f85d eb04 	ldr.w	lr, [sp], #4
 80128ee:	f000 bc5f 	b.w	80131b0 <__kernel_cosf>
 80128f2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80128f6:	d304      	bcc.n	8012902 <cosf+0x2e>
 80128f8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80128fc:	b003      	add	sp, #12
 80128fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8012902:	4668      	mov	r0, sp
 8012904:	f000 fd76 	bl	80133f4 <__ieee754_rem_pio2f>
 8012908:	f000 0003 	and.w	r0, r0, #3
 801290c:	2801      	cmp	r0, #1
 801290e:	d009      	beq.n	8012924 <cosf+0x50>
 8012910:	2802      	cmp	r0, #2
 8012912:	d010      	beq.n	8012936 <cosf+0x62>
 8012914:	b9b0      	cbnz	r0, 8012944 <cosf+0x70>
 8012916:	eddd 0a01 	vldr	s1, [sp, #4]
 801291a:	ed9d 0a00 	vldr	s0, [sp]
 801291e:	f000 fc47 	bl	80131b0 <__kernel_cosf>
 8012922:	e7eb      	b.n	80128fc <cosf+0x28>
 8012924:	eddd 0a01 	vldr	s1, [sp, #4]
 8012928:	ed9d 0a00 	vldr	s0, [sp]
 801292c:	f000 fc98 	bl	8013260 <__kernel_sinf>
 8012930:	eeb1 0a40 	vneg.f32	s0, s0
 8012934:	e7e2      	b.n	80128fc <cosf+0x28>
 8012936:	eddd 0a01 	vldr	s1, [sp, #4]
 801293a:	ed9d 0a00 	vldr	s0, [sp]
 801293e:	f000 fc37 	bl	80131b0 <__kernel_cosf>
 8012942:	e7f5      	b.n	8012930 <cosf+0x5c>
 8012944:	eddd 0a01 	vldr	s1, [sp, #4]
 8012948:	ed9d 0a00 	vldr	s0, [sp]
 801294c:	2001      	movs	r0, #1
 801294e:	f000 fc87 	bl	8013260 <__kernel_sinf>
 8012952:	e7d3      	b.n	80128fc <cosf+0x28>
 8012954:	3f490fd8 	.word	0x3f490fd8
 8012958:	00000000 	.word	0x00000000

0801295c <sinf>:
 801295c:	ee10 3a10 	vmov	r3, s0
 8012960:	b507      	push	{r0, r1, r2, lr}
 8012962:	4a1f      	ldr	r2, [pc, #124]	@ (80129e0 <sinf+0x84>)
 8012964:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012968:	4293      	cmp	r3, r2
 801296a:	d807      	bhi.n	801297c <sinf+0x20>
 801296c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80129e4 <sinf+0x88>
 8012970:	2000      	movs	r0, #0
 8012972:	b003      	add	sp, #12
 8012974:	f85d eb04 	ldr.w	lr, [sp], #4
 8012978:	f000 bc72 	b.w	8013260 <__kernel_sinf>
 801297c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012980:	d304      	bcc.n	801298c <sinf+0x30>
 8012982:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012986:	b003      	add	sp, #12
 8012988:	f85d fb04 	ldr.w	pc, [sp], #4
 801298c:	4668      	mov	r0, sp
 801298e:	f000 fd31 	bl	80133f4 <__ieee754_rem_pio2f>
 8012992:	f000 0003 	and.w	r0, r0, #3
 8012996:	2801      	cmp	r0, #1
 8012998:	d00a      	beq.n	80129b0 <sinf+0x54>
 801299a:	2802      	cmp	r0, #2
 801299c:	d00f      	beq.n	80129be <sinf+0x62>
 801299e:	b9c0      	cbnz	r0, 80129d2 <sinf+0x76>
 80129a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80129a4:	ed9d 0a00 	vldr	s0, [sp]
 80129a8:	2001      	movs	r0, #1
 80129aa:	f000 fc59 	bl	8013260 <__kernel_sinf>
 80129ae:	e7ea      	b.n	8012986 <sinf+0x2a>
 80129b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80129b4:	ed9d 0a00 	vldr	s0, [sp]
 80129b8:	f000 fbfa 	bl	80131b0 <__kernel_cosf>
 80129bc:	e7e3      	b.n	8012986 <sinf+0x2a>
 80129be:	eddd 0a01 	vldr	s1, [sp, #4]
 80129c2:	ed9d 0a00 	vldr	s0, [sp]
 80129c6:	2001      	movs	r0, #1
 80129c8:	f000 fc4a 	bl	8013260 <__kernel_sinf>
 80129cc:	eeb1 0a40 	vneg.f32	s0, s0
 80129d0:	e7d9      	b.n	8012986 <sinf+0x2a>
 80129d2:	eddd 0a01 	vldr	s1, [sp, #4]
 80129d6:	ed9d 0a00 	vldr	s0, [sp]
 80129da:	f000 fbe9 	bl	80131b0 <__kernel_cosf>
 80129de:	e7f5      	b.n	80129cc <sinf+0x70>
 80129e0:	3f490fd8 	.word	0x3f490fd8
 80129e4:	00000000 	.word	0x00000000

080129e8 <fmaxf>:
 80129e8:	b508      	push	{r3, lr}
 80129ea:	ed2d 8b02 	vpush	{d8}
 80129ee:	eeb0 8a40 	vmov.f32	s16, s0
 80129f2:	eef0 8a60 	vmov.f32	s17, s1
 80129f6:	f000 f831 	bl	8012a5c <__fpclassifyf>
 80129fa:	b930      	cbnz	r0, 8012a0a <fmaxf+0x22>
 80129fc:	eeb0 8a68 	vmov.f32	s16, s17
 8012a00:	eeb0 0a48 	vmov.f32	s0, s16
 8012a04:	ecbd 8b02 	vpop	{d8}
 8012a08:	bd08      	pop	{r3, pc}
 8012a0a:	eeb0 0a68 	vmov.f32	s0, s17
 8012a0e:	f000 f825 	bl	8012a5c <__fpclassifyf>
 8012a12:	2800      	cmp	r0, #0
 8012a14:	d0f4      	beq.n	8012a00 <fmaxf+0x18>
 8012a16:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a1e:	dded      	ble.n	80129fc <fmaxf+0x14>
 8012a20:	e7ee      	b.n	8012a00 <fmaxf+0x18>

08012a22 <fminf>:
 8012a22:	b508      	push	{r3, lr}
 8012a24:	ed2d 8b02 	vpush	{d8}
 8012a28:	eeb0 8a40 	vmov.f32	s16, s0
 8012a2c:	eef0 8a60 	vmov.f32	s17, s1
 8012a30:	f000 f814 	bl	8012a5c <__fpclassifyf>
 8012a34:	b930      	cbnz	r0, 8012a44 <fminf+0x22>
 8012a36:	eeb0 8a68 	vmov.f32	s16, s17
 8012a3a:	eeb0 0a48 	vmov.f32	s0, s16
 8012a3e:	ecbd 8b02 	vpop	{d8}
 8012a42:	bd08      	pop	{r3, pc}
 8012a44:	eeb0 0a68 	vmov.f32	s0, s17
 8012a48:	f000 f808 	bl	8012a5c <__fpclassifyf>
 8012a4c:	2800      	cmp	r0, #0
 8012a4e:	d0f4      	beq.n	8012a3a <fminf+0x18>
 8012a50:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a58:	d5ed      	bpl.n	8012a36 <fminf+0x14>
 8012a5a:	e7ee      	b.n	8012a3a <fminf+0x18>

08012a5c <__fpclassifyf>:
 8012a5c:	ee10 3a10 	vmov	r3, s0
 8012a60:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8012a64:	d00d      	beq.n	8012a82 <__fpclassifyf+0x26>
 8012a66:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8012a6a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8012a6e:	d30a      	bcc.n	8012a86 <__fpclassifyf+0x2a>
 8012a70:	4b07      	ldr	r3, [pc, #28]	@ (8012a90 <__fpclassifyf+0x34>)
 8012a72:	1e42      	subs	r2, r0, #1
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d908      	bls.n	8012a8a <__fpclassifyf+0x2e>
 8012a78:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8012a7c:	4258      	negs	r0, r3
 8012a7e:	4158      	adcs	r0, r3
 8012a80:	4770      	bx	lr
 8012a82:	2002      	movs	r0, #2
 8012a84:	4770      	bx	lr
 8012a86:	2004      	movs	r0, #4
 8012a88:	4770      	bx	lr
 8012a8a:	2003      	movs	r0, #3
 8012a8c:	4770      	bx	lr
 8012a8e:	bf00      	nop
 8012a90:	007ffffe 	.word	0x007ffffe

08012a94 <__ieee754_sqrtf>:
 8012a94:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012a98:	4770      	bx	lr
 8012a9a:	0000      	movs	r0, r0
 8012a9c:	0000      	movs	r0, r0
	...

08012aa0 <__kernel_cos>:
 8012aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aa4:	ec57 6b10 	vmov	r6, r7, d0
 8012aa8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012aac:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8012ab0:	ed8d 1b00 	vstr	d1, [sp]
 8012ab4:	d206      	bcs.n	8012ac4 <__kernel_cos+0x24>
 8012ab6:	4630      	mov	r0, r6
 8012ab8:	4639      	mov	r1, r7
 8012aba:	f7ee f803 	bl	8000ac4 <__aeabi_d2iz>
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	f000 8088 	beq.w	8012bd4 <__kernel_cos+0x134>
 8012ac4:	4632      	mov	r2, r6
 8012ac6:	463b      	mov	r3, r7
 8012ac8:	4630      	mov	r0, r6
 8012aca:	4639      	mov	r1, r7
 8012acc:	f7ed fd60 	bl	8000590 <__aeabi_dmul>
 8012ad0:	4b51      	ldr	r3, [pc, #324]	@ (8012c18 <__kernel_cos+0x178>)
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	4604      	mov	r4, r0
 8012ad6:	460d      	mov	r5, r1
 8012ad8:	f7ed fd5a 	bl	8000590 <__aeabi_dmul>
 8012adc:	a340      	add	r3, pc, #256	@ (adr r3, 8012be0 <__kernel_cos+0x140>)
 8012ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae2:	4682      	mov	sl, r0
 8012ae4:	468b      	mov	fp, r1
 8012ae6:	4620      	mov	r0, r4
 8012ae8:	4629      	mov	r1, r5
 8012aea:	f7ed fd51 	bl	8000590 <__aeabi_dmul>
 8012aee:	a33e      	add	r3, pc, #248	@ (adr r3, 8012be8 <__kernel_cos+0x148>)
 8012af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af4:	f7ed fb96 	bl	8000224 <__adddf3>
 8012af8:	4622      	mov	r2, r4
 8012afa:	462b      	mov	r3, r5
 8012afc:	f7ed fd48 	bl	8000590 <__aeabi_dmul>
 8012b00:	a33b      	add	r3, pc, #236	@ (adr r3, 8012bf0 <__kernel_cos+0x150>)
 8012b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b06:	f7ed fb8b 	bl	8000220 <__aeabi_dsub>
 8012b0a:	4622      	mov	r2, r4
 8012b0c:	462b      	mov	r3, r5
 8012b0e:	f7ed fd3f 	bl	8000590 <__aeabi_dmul>
 8012b12:	a339      	add	r3, pc, #228	@ (adr r3, 8012bf8 <__kernel_cos+0x158>)
 8012b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b18:	f7ed fb84 	bl	8000224 <__adddf3>
 8012b1c:	4622      	mov	r2, r4
 8012b1e:	462b      	mov	r3, r5
 8012b20:	f7ed fd36 	bl	8000590 <__aeabi_dmul>
 8012b24:	a336      	add	r3, pc, #216	@ (adr r3, 8012c00 <__kernel_cos+0x160>)
 8012b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2a:	f7ed fb79 	bl	8000220 <__aeabi_dsub>
 8012b2e:	4622      	mov	r2, r4
 8012b30:	462b      	mov	r3, r5
 8012b32:	f7ed fd2d 	bl	8000590 <__aeabi_dmul>
 8012b36:	a334      	add	r3, pc, #208	@ (adr r3, 8012c08 <__kernel_cos+0x168>)
 8012b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b3c:	f7ed fb72 	bl	8000224 <__adddf3>
 8012b40:	4622      	mov	r2, r4
 8012b42:	462b      	mov	r3, r5
 8012b44:	f7ed fd24 	bl	8000590 <__aeabi_dmul>
 8012b48:	4622      	mov	r2, r4
 8012b4a:	462b      	mov	r3, r5
 8012b4c:	f7ed fd20 	bl	8000590 <__aeabi_dmul>
 8012b50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b54:	4604      	mov	r4, r0
 8012b56:	460d      	mov	r5, r1
 8012b58:	4630      	mov	r0, r6
 8012b5a:	4639      	mov	r1, r7
 8012b5c:	f7ed fd18 	bl	8000590 <__aeabi_dmul>
 8012b60:	460b      	mov	r3, r1
 8012b62:	4602      	mov	r2, r0
 8012b64:	4629      	mov	r1, r5
 8012b66:	4620      	mov	r0, r4
 8012b68:	f7ed fb5a 	bl	8000220 <__aeabi_dsub>
 8012b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8012c1c <__kernel_cos+0x17c>)
 8012b6e:	4598      	cmp	r8, r3
 8012b70:	4606      	mov	r6, r0
 8012b72:	460f      	mov	r7, r1
 8012b74:	d810      	bhi.n	8012b98 <__kernel_cos+0xf8>
 8012b76:	4602      	mov	r2, r0
 8012b78:	460b      	mov	r3, r1
 8012b7a:	4650      	mov	r0, sl
 8012b7c:	4659      	mov	r1, fp
 8012b7e:	f7ed fb4f 	bl	8000220 <__aeabi_dsub>
 8012b82:	460b      	mov	r3, r1
 8012b84:	4926      	ldr	r1, [pc, #152]	@ (8012c20 <__kernel_cos+0x180>)
 8012b86:	4602      	mov	r2, r0
 8012b88:	2000      	movs	r0, #0
 8012b8a:	f7ed fb49 	bl	8000220 <__aeabi_dsub>
 8012b8e:	ec41 0b10 	vmov	d0, r0, r1
 8012b92:	b003      	add	sp, #12
 8012b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b98:	4b22      	ldr	r3, [pc, #136]	@ (8012c24 <__kernel_cos+0x184>)
 8012b9a:	4921      	ldr	r1, [pc, #132]	@ (8012c20 <__kernel_cos+0x180>)
 8012b9c:	4598      	cmp	r8, r3
 8012b9e:	bf8c      	ite	hi
 8012ba0:	4d21      	ldrhi	r5, [pc, #132]	@ (8012c28 <__kernel_cos+0x188>)
 8012ba2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8012ba6:	2400      	movs	r4, #0
 8012ba8:	4622      	mov	r2, r4
 8012baa:	462b      	mov	r3, r5
 8012bac:	2000      	movs	r0, #0
 8012bae:	f7ed fb37 	bl	8000220 <__aeabi_dsub>
 8012bb2:	4622      	mov	r2, r4
 8012bb4:	4680      	mov	r8, r0
 8012bb6:	4689      	mov	r9, r1
 8012bb8:	462b      	mov	r3, r5
 8012bba:	4650      	mov	r0, sl
 8012bbc:	4659      	mov	r1, fp
 8012bbe:	f7ed fb2f 	bl	8000220 <__aeabi_dsub>
 8012bc2:	4632      	mov	r2, r6
 8012bc4:	463b      	mov	r3, r7
 8012bc6:	f7ed fb2b 	bl	8000220 <__aeabi_dsub>
 8012bca:	4602      	mov	r2, r0
 8012bcc:	460b      	mov	r3, r1
 8012bce:	4640      	mov	r0, r8
 8012bd0:	4649      	mov	r1, r9
 8012bd2:	e7da      	b.n	8012b8a <__kernel_cos+0xea>
 8012bd4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8012c10 <__kernel_cos+0x170>
 8012bd8:	e7db      	b.n	8012b92 <__kernel_cos+0xf2>
 8012bda:	bf00      	nop
 8012bdc:	f3af 8000 	nop.w
 8012be0:	be8838d4 	.word	0xbe8838d4
 8012be4:	bda8fae9 	.word	0xbda8fae9
 8012be8:	bdb4b1c4 	.word	0xbdb4b1c4
 8012bec:	3e21ee9e 	.word	0x3e21ee9e
 8012bf0:	809c52ad 	.word	0x809c52ad
 8012bf4:	3e927e4f 	.word	0x3e927e4f
 8012bf8:	19cb1590 	.word	0x19cb1590
 8012bfc:	3efa01a0 	.word	0x3efa01a0
 8012c00:	16c15177 	.word	0x16c15177
 8012c04:	3f56c16c 	.word	0x3f56c16c
 8012c08:	5555554c 	.word	0x5555554c
 8012c0c:	3fa55555 	.word	0x3fa55555
 8012c10:	00000000 	.word	0x00000000
 8012c14:	3ff00000 	.word	0x3ff00000
 8012c18:	3fe00000 	.word	0x3fe00000
 8012c1c:	3fd33332 	.word	0x3fd33332
 8012c20:	3ff00000 	.word	0x3ff00000
 8012c24:	3fe90000 	.word	0x3fe90000
 8012c28:	3fd20000 	.word	0x3fd20000
 8012c2c:	00000000 	.word	0x00000000

08012c30 <__kernel_sin>:
 8012c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c34:	ec55 4b10 	vmov	r4, r5, d0
 8012c38:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012c3c:	b085      	sub	sp, #20
 8012c3e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8012c42:	ed8d 1b02 	vstr	d1, [sp, #8]
 8012c46:	4680      	mov	r8, r0
 8012c48:	d205      	bcs.n	8012c56 <__kernel_sin+0x26>
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	4629      	mov	r1, r5
 8012c4e:	f7ed ff39 	bl	8000ac4 <__aeabi_d2iz>
 8012c52:	2800      	cmp	r0, #0
 8012c54:	d052      	beq.n	8012cfc <__kernel_sin+0xcc>
 8012c56:	4622      	mov	r2, r4
 8012c58:	462b      	mov	r3, r5
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	4629      	mov	r1, r5
 8012c5e:	f7ed fc97 	bl	8000590 <__aeabi_dmul>
 8012c62:	4682      	mov	sl, r0
 8012c64:	468b      	mov	fp, r1
 8012c66:	4602      	mov	r2, r0
 8012c68:	460b      	mov	r3, r1
 8012c6a:	4620      	mov	r0, r4
 8012c6c:	4629      	mov	r1, r5
 8012c6e:	f7ed fc8f 	bl	8000590 <__aeabi_dmul>
 8012c72:	a342      	add	r3, pc, #264	@ (adr r3, 8012d7c <__kernel_sin+0x14c>)
 8012c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c78:	e9cd 0100 	strd	r0, r1, [sp]
 8012c7c:	4650      	mov	r0, sl
 8012c7e:	4659      	mov	r1, fp
 8012c80:	f7ed fc86 	bl	8000590 <__aeabi_dmul>
 8012c84:	a33f      	add	r3, pc, #252	@ (adr r3, 8012d84 <__kernel_sin+0x154>)
 8012c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8a:	f7ed fac9 	bl	8000220 <__aeabi_dsub>
 8012c8e:	4652      	mov	r2, sl
 8012c90:	465b      	mov	r3, fp
 8012c92:	f7ed fc7d 	bl	8000590 <__aeabi_dmul>
 8012c96:	a33d      	add	r3, pc, #244	@ (adr r3, 8012d8c <__kernel_sin+0x15c>)
 8012c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c9c:	f7ed fac2 	bl	8000224 <__adddf3>
 8012ca0:	4652      	mov	r2, sl
 8012ca2:	465b      	mov	r3, fp
 8012ca4:	f7ed fc74 	bl	8000590 <__aeabi_dmul>
 8012ca8:	a33a      	add	r3, pc, #232	@ (adr r3, 8012d94 <__kernel_sin+0x164>)
 8012caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cae:	f7ed fab7 	bl	8000220 <__aeabi_dsub>
 8012cb2:	4652      	mov	r2, sl
 8012cb4:	465b      	mov	r3, fp
 8012cb6:	f7ed fc6b 	bl	8000590 <__aeabi_dmul>
 8012cba:	a338      	add	r3, pc, #224	@ (adr r3, 8012d9c <__kernel_sin+0x16c>)
 8012cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc0:	f7ed fab0 	bl	8000224 <__adddf3>
 8012cc4:	4606      	mov	r6, r0
 8012cc6:	460f      	mov	r7, r1
 8012cc8:	f1b8 0f00 	cmp.w	r8, #0
 8012ccc:	d11b      	bne.n	8012d06 <__kernel_sin+0xd6>
 8012cce:	4602      	mov	r2, r0
 8012cd0:	460b      	mov	r3, r1
 8012cd2:	4650      	mov	r0, sl
 8012cd4:	4659      	mov	r1, fp
 8012cd6:	f7ed fc5b 	bl	8000590 <__aeabi_dmul>
 8012cda:	a325      	add	r3, pc, #148	@ (adr r3, 8012d70 <__kernel_sin+0x140>)
 8012cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ce0:	f7ed fa9e 	bl	8000220 <__aeabi_dsub>
 8012ce4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ce8:	f7ed fc52 	bl	8000590 <__aeabi_dmul>
 8012cec:	4602      	mov	r2, r0
 8012cee:	460b      	mov	r3, r1
 8012cf0:	4620      	mov	r0, r4
 8012cf2:	4629      	mov	r1, r5
 8012cf4:	f7ed fa96 	bl	8000224 <__adddf3>
 8012cf8:	4604      	mov	r4, r0
 8012cfa:	460d      	mov	r5, r1
 8012cfc:	ec45 4b10 	vmov	d0, r4, r5
 8012d00:	b005      	add	sp, #20
 8012d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8012d78 <__kernel_sin+0x148>)
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	f7ed fc3f 	bl	8000590 <__aeabi_dmul>
 8012d12:	4632      	mov	r2, r6
 8012d14:	4680      	mov	r8, r0
 8012d16:	4689      	mov	r9, r1
 8012d18:	463b      	mov	r3, r7
 8012d1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d1e:	f7ed fc37 	bl	8000590 <__aeabi_dmul>
 8012d22:	4602      	mov	r2, r0
 8012d24:	460b      	mov	r3, r1
 8012d26:	4640      	mov	r0, r8
 8012d28:	4649      	mov	r1, r9
 8012d2a:	f7ed fa79 	bl	8000220 <__aeabi_dsub>
 8012d2e:	4652      	mov	r2, sl
 8012d30:	465b      	mov	r3, fp
 8012d32:	f7ed fc2d 	bl	8000590 <__aeabi_dmul>
 8012d36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012d3a:	f7ed fa71 	bl	8000220 <__aeabi_dsub>
 8012d3e:	a30c      	add	r3, pc, #48	@ (adr r3, 8012d70 <__kernel_sin+0x140>)
 8012d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d44:	4606      	mov	r6, r0
 8012d46:	460f      	mov	r7, r1
 8012d48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d4c:	f7ed fc20 	bl	8000590 <__aeabi_dmul>
 8012d50:	4602      	mov	r2, r0
 8012d52:	460b      	mov	r3, r1
 8012d54:	4630      	mov	r0, r6
 8012d56:	4639      	mov	r1, r7
 8012d58:	f7ed fa64 	bl	8000224 <__adddf3>
 8012d5c:	4602      	mov	r2, r0
 8012d5e:	460b      	mov	r3, r1
 8012d60:	4620      	mov	r0, r4
 8012d62:	4629      	mov	r1, r5
 8012d64:	f7ed fa5c 	bl	8000220 <__aeabi_dsub>
 8012d68:	e7c6      	b.n	8012cf8 <__kernel_sin+0xc8>
 8012d6a:	bf00      	nop
 8012d6c:	f3af 8000 	nop.w
 8012d70:	55555549 	.word	0x55555549
 8012d74:	3fc55555 	.word	0x3fc55555
 8012d78:	3fe00000 	.word	0x3fe00000
 8012d7c:	5acfd57c 	.word	0x5acfd57c
 8012d80:	3de5d93a 	.word	0x3de5d93a
 8012d84:	8a2b9ceb 	.word	0x8a2b9ceb
 8012d88:	3e5ae5e6 	.word	0x3e5ae5e6
 8012d8c:	57b1fe7d 	.word	0x57b1fe7d
 8012d90:	3ec71de3 	.word	0x3ec71de3
 8012d94:	19c161d5 	.word	0x19c161d5
 8012d98:	3f2a01a0 	.word	0x3f2a01a0
 8012d9c:	1110f8a6 	.word	0x1110f8a6
 8012da0:	3f811111 	.word	0x3f811111
 8012da4:	00000000 	.word	0x00000000

08012da8 <__ieee754_rem_pio2>:
 8012da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dac:	ec57 6b10 	vmov	r6, r7, d0
 8012db0:	4bc5      	ldr	r3, [pc, #788]	@ (80130c8 <__ieee754_rem_pio2+0x320>)
 8012db2:	b08d      	sub	sp, #52	@ 0x34
 8012db4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012db8:	4598      	cmp	r8, r3
 8012dba:	4604      	mov	r4, r0
 8012dbc:	9704      	str	r7, [sp, #16]
 8012dbe:	d807      	bhi.n	8012dd0 <__ieee754_rem_pio2+0x28>
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	ed80 0b00 	vstr	d0, [r0]
 8012dc8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012dcc:	2500      	movs	r5, #0
 8012dce:	e028      	b.n	8012e22 <__ieee754_rem_pio2+0x7a>
 8012dd0:	4bbe      	ldr	r3, [pc, #760]	@ (80130cc <__ieee754_rem_pio2+0x324>)
 8012dd2:	4598      	cmp	r8, r3
 8012dd4:	d878      	bhi.n	8012ec8 <__ieee754_rem_pio2+0x120>
 8012dd6:	9b04      	ldr	r3, [sp, #16]
 8012dd8:	4dbd      	ldr	r5, [pc, #756]	@ (80130d0 <__ieee754_rem_pio2+0x328>)
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	4630      	mov	r0, r6
 8012dde:	a3ac      	add	r3, pc, #688	@ (adr r3, 8013090 <__ieee754_rem_pio2+0x2e8>)
 8012de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de4:	4639      	mov	r1, r7
 8012de6:	dd38      	ble.n	8012e5a <__ieee754_rem_pio2+0xb2>
 8012de8:	f7ed fa1a 	bl	8000220 <__aeabi_dsub>
 8012dec:	45a8      	cmp	r8, r5
 8012dee:	4606      	mov	r6, r0
 8012df0:	460f      	mov	r7, r1
 8012df2:	d01a      	beq.n	8012e2a <__ieee754_rem_pio2+0x82>
 8012df4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8013098 <__ieee754_rem_pio2+0x2f0>)
 8012df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dfa:	f7ed fa11 	bl	8000220 <__aeabi_dsub>
 8012dfe:	4602      	mov	r2, r0
 8012e00:	460b      	mov	r3, r1
 8012e02:	4680      	mov	r8, r0
 8012e04:	4689      	mov	r9, r1
 8012e06:	4630      	mov	r0, r6
 8012e08:	4639      	mov	r1, r7
 8012e0a:	f7ed fa09 	bl	8000220 <__aeabi_dsub>
 8012e0e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8013098 <__ieee754_rem_pio2+0x2f0>)
 8012e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e14:	f7ed fa04 	bl	8000220 <__aeabi_dsub>
 8012e18:	e9c4 8900 	strd	r8, r9, [r4]
 8012e1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012e20:	2501      	movs	r5, #1
 8012e22:	4628      	mov	r0, r5
 8012e24:	b00d      	add	sp, #52	@ 0x34
 8012e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e2a:	a39d      	add	r3, pc, #628	@ (adr r3, 80130a0 <__ieee754_rem_pio2+0x2f8>)
 8012e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e30:	f7ed f9f6 	bl	8000220 <__aeabi_dsub>
 8012e34:	a39c      	add	r3, pc, #624	@ (adr r3, 80130a8 <__ieee754_rem_pio2+0x300>)
 8012e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e3a:	4606      	mov	r6, r0
 8012e3c:	460f      	mov	r7, r1
 8012e3e:	f7ed f9ef 	bl	8000220 <__aeabi_dsub>
 8012e42:	4602      	mov	r2, r0
 8012e44:	460b      	mov	r3, r1
 8012e46:	4680      	mov	r8, r0
 8012e48:	4689      	mov	r9, r1
 8012e4a:	4630      	mov	r0, r6
 8012e4c:	4639      	mov	r1, r7
 8012e4e:	f7ed f9e7 	bl	8000220 <__aeabi_dsub>
 8012e52:	a395      	add	r3, pc, #596	@ (adr r3, 80130a8 <__ieee754_rem_pio2+0x300>)
 8012e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e58:	e7dc      	b.n	8012e14 <__ieee754_rem_pio2+0x6c>
 8012e5a:	f7ed f9e3 	bl	8000224 <__adddf3>
 8012e5e:	45a8      	cmp	r8, r5
 8012e60:	4606      	mov	r6, r0
 8012e62:	460f      	mov	r7, r1
 8012e64:	d018      	beq.n	8012e98 <__ieee754_rem_pio2+0xf0>
 8012e66:	a38c      	add	r3, pc, #560	@ (adr r3, 8013098 <__ieee754_rem_pio2+0x2f0>)
 8012e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e6c:	f7ed f9da 	bl	8000224 <__adddf3>
 8012e70:	4602      	mov	r2, r0
 8012e72:	460b      	mov	r3, r1
 8012e74:	4680      	mov	r8, r0
 8012e76:	4689      	mov	r9, r1
 8012e78:	4630      	mov	r0, r6
 8012e7a:	4639      	mov	r1, r7
 8012e7c:	f7ed f9d0 	bl	8000220 <__aeabi_dsub>
 8012e80:	a385      	add	r3, pc, #532	@ (adr r3, 8013098 <__ieee754_rem_pio2+0x2f0>)
 8012e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e86:	f7ed f9cd 	bl	8000224 <__adddf3>
 8012e8a:	f04f 35ff 	mov.w	r5, #4294967295
 8012e8e:	e9c4 8900 	strd	r8, r9, [r4]
 8012e92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012e96:	e7c4      	b.n	8012e22 <__ieee754_rem_pio2+0x7a>
 8012e98:	a381      	add	r3, pc, #516	@ (adr r3, 80130a0 <__ieee754_rem_pio2+0x2f8>)
 8012e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e9e:	f7ed f9c1 	bl	8000224 <__adddf3>
 8012ea2:	a381      	add	r3, pc, #516	@ (adr r3, 80130a8 <__ieee754_rem_pio2+0x300>)
 8012ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ea8:	4606      	mov	r6, r0
 8012eaa:	460f      	mov	r7, r1
 8012eac:	f7ed f9ba 	bl	8000224 <__adddf3>
 8012eb0:	4602      	mov	r2, r0
 8012eb2:	460b      	mov	r3, r1
 8012eb4:	4680      	mov	r8, r0
 8012eb6:	4689      	mov	r9, r1
 8012eb8:	4630      	mov	r0, r6
 8012eba:	4639      	mov	r1, r7
 8012ebc:	f7ed f9b0 	bl	8000220 <__aeabi_dsub>
 8012ec0:	a379      	add	r3, pc, #484	@ (adr r3, 80130a8 <__ieee754_rem_pio2+0x300>)
 8012ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec6:	e7de      	b.n	8012e86 <__ieee754_rem_pio2+0xde>
 8012ec8:	4b82      	ldr	r3, [pc, #520]	@ (80130d4 <__ieee754_rem_pio2+0x32c>)
 8012eca:	4598      	cmp	r8, r3
 8012ecc:	f200 80d1 	bhi.w	8013072 <__ieee754_rem_pio2+0x2ca>
 8012ed0:	f000 f966 	bl	80131a0 <fabs>
 8012ed4:	ec57 6b10 	vmov	r6, r7, d0
 8012ed8:	a375      	add	r3, pc, #468	@ (adr r3, 80130b0 <__ieee754_rem_pio2+0x308>)
 8012eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ede:	4630      	mov	r0, r6
 8012ee0:	4639      	mov	r1, r7
 8012ee2:	f7ed fb55 	bl	8000590 <__aeabi_dmul>
 8012ee6:	4b7c      	ldr	r3, [pc, #496]	@ (80130d8 <__ieee754_rem_pio2+0x330>)
 8012ee8:	2200      	movs	r2, #0
 8012eea:	f7ed f99b 	bl	8000224 <__adddf3>
 8012eee:	f7ed fde9 	bl	8000ac4 <__aeabi_d2iz>
 8012ef2:	4605      	mov	r5, r0
 8012ef4:	f7ed fae2 	bl	80004bc <__aeabi_i2d>
 8012ef8:	4602      	mov	r2, r0
 8012efa:	460b      	mov	r3, r1
 8012efc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012f00:	a363      	add	r3, pc, #396	@ (adr r3, 8013090 <__ieee754_rem_pio2+0x2e8>)
 8012f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f06:	f7ed fb43 	bl	8000590 <__aeabi_dmul>
 8012f0a:	4602      	mov	r2, r0
 8012f0c:	460b      	mov	r3, r1
 8012f0e:	4630      	mov	r0, r6
 8012f10:	4639      	mov	r1, r7
 8012f12:	f7ed f985 	bl	8000220 <__aeabi_dsub>
 8012f16:	a360      	add	r3, pc, #384	@ (adr r3, 8013098 <__ieee754_rem_pio2+0x2f0>)
 8012f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f1c:	4682      	mov	sl, r0
 8012f1e:	468b      	mov	fp, r1
 8012f20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f24:	f7ed fb34 	bl	8000590 <__aeabi_dmul>
 8012f28:	2d1f      	cmp	r5, #31
 8012f2a:	4606      	mov	r6, r0
 8012f2c:	460f      	mov	r7, r1
 8012f2e:	dc0c      	bgt.n	8012f4a <__ieee754_rem_pio2+0x1a2>
 8012f30:	4b6a      	ldr	r3, [pc, #424]	@ (80130dc <__ieee754_rem_pio2+0x334>)
 8012f32:	1e6a      	subs	r2, r5, #1
 8012f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f38:	4543      	cmp	r3, r8
 8012f3a:	d006      	beq.n	8012f4a <__ieee754_rem_pio2+0x1a2>
 8012f3c:	4632      	mov	r2, r6
 8012f3e:	463b      	mov	r3, r7
 8012f40:	4650      	mov	r0, sl
 8012f42:	4659      	mov	r1, fp
 8012f44:	f7ed f96c 	bl	8000220 <__aeabi_dsub>
 8012f48:	e00e      	b.n	8012f68 <__ieee754_rem_pio2+0x1c0>
 8012f4a:	463b      	mov	r3, r7
 8012f4c:	4632      	mov	r2, r6
 8012f4e:	4650      	mov	r0, sl
 8012f50:	4659      	mov	r1, fp
 8012f52:	f7ed f965 	bl	8000220 <__aeabi_dsub>
 8012f56:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012f5a:	9305      	str	r3, [sp, #20]
 8012f5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012f60:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8012f64:	2b10      	cmp	r3, #16
 8012f66:	dc02      	bgt.n	8012f6e <__ieee754_rem_pio2+0x1c6>
 8012f68:	e9c4 0100 	strd	r0, r1, [r4]
 8012f6c:	e039      	b.n	8012fe2 <__ieee754_rem_pio2+0x23a>
 8012f6e:	a34c      	add	r3, pc, #304	@ (adr r3, 80130a0 <__ieee754_rem_pio2+0x2f8>)
 8012f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f78:	f7ed fb0a 	bl	8000590 <__aeabi_dmul>
 8012f7c:	4606      	mov	r6, r0
 8012f7e:	460f      	mov	r7, r1
 8012f80:	4602      	mov	r2, r0
 8012f82:	460b      	mov	r3, r1
 8012f84:	4650      	mov	r0, sl
 8012f86:	4659      	mov	r1, fp
 8012f88:	f7ed f94a 	bl	8000220 <__aeabi_dsub>
 8012f8c:	4602      	mov	r2, r0
 8012f8e:	460b      	mov	r3, r1
 8012f90:	4680      	mov	r8, r0
 8012f92:	4689      	mov	r9, r1
 8012f94:	4650      	mov	r0, sl
 8012f96:	4659      	mov	r1, fp
 8012f98:	f7ed f942 	bl	8000220 <__aeabi_dsub>
 8012f9c:	4632      	mov	r2, r6
 8012f9e:	463b      	mov	r3, r7
 8012fa0:	f7ed f93e 	bl	8000220 <__aeabi_dsub>
 8012fa4:	a340      	add	r3, pc, #256	@ (adr r3, 80130a8 <__ieee754_rem_pio2+0x300>)
 8012fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012faa:	4606      	mov	r6, r0
 8012fac:	460f      	mov	r7, r1
 8012fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fb2:	f7ed faed 	bl	8000590 <__aeabi_dmul>
 8012fb6:	4632      	mov	r2, r6
 8012fb8:	463b      	mov	r3, r7
 8012fba:	f7ed f931 	bl	8000220 <__aeabi_dsub>
 8012fbe:	4602      	mov	r2, r0
 8012fc0:	460b      	mov	r3, r1
 8012fc2:	4606      	mov	r6, r0
 8012fc4:	460f      	mov	r7, r1
 8012fc6:	4640      	mov	r0, r8
 8012fc8:	4649      	mov	r1, r9
 8012fca:	f7ed f929 	bl	8000220 <__aeabi_dsub>
 8012fce:	9a05      	ldr	r2, [sp, #20]
 8012fd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012fd4:	1ad3      	subs	r3, r2, r3
 8012fd6:	2b31      	cmp	r3, #49	@ 0x31
 8012fd8:	dc20      	bgt.n	801301c <__ieee754_rem_pio2+0x274>
 8012fda:	e9c4 0100 	strd	r0, r1, [r4]
 8012fde:	46c2      	mov	sl, r8
 8012fe0:	46cb      	mov	fp, r9
 8012fe2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012fe6:	4650      	mov	r0, sl
 8012fe8:	4642      	mov	r2, r8
 8012fea:	464b      	mov	r3, r9
 8012fec:	4659      	mov	r1, fp
 8012fee:	f7ed f917 	bl	8000220 <__aeabi_dsub>
 8012ff2:	463b      	mov	r3, r7
 8012ff4:	4632      	mov	r2, r6
 8012ff6:	f7ed f913 	bl	8000220 <__aeabi_dsub>
 8012ffa:	9b04      	ldr	r3, [sp, #16]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013002:	f6bf af0e 	bge.w	8012e22 <__ieee754_rem_pio2+0x7a>
 8013006:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801300a:	6063      	str	r3, [r4, #4]
 801300c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013010:	f8c4 8000 	str.w	r8, [r4]
 8013014:	60a0      	str	r0, [r4, #8]
 8013016:	60e3      	str	r3, [r4, #12]
 8013018:	426d      	negs	r5, r5
 801301a:	e702      	b.n	8012e22 <__ieee754_rem_pio2+0x7a>
 801301c:	a326      	add	r3, pc, #152	@ (adr r3, 80130b8 <__ieee754_rem_pio2+0x310>)
 801301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013026:	f7ed fab3 	bl	8000590 <__aeabi_dmul>
 801302a:	4606      	mov	r6, r0
 801302c:	460f      	mov	r7, r1
 801302e:	4602      	mov	r2, r0
 8013030:	460b      	mov	r3, r1
 8013032:	4640      	mov	r0, r8
 8013034:	4649      	mov	r1, r9
 8013036:	f7ed f8f3 	bl	8000220 <__aeabi_dsub>
 801303a:	4602      	mov	r2, r0
 801303c:	460b      	mov	r3, r1
 801303e:	4682      	mov	sl, r0
 8013040:	468b      	mov	fp, r1
 8013042:	4640      	mov	r0, r8
 8013044:	4649      	mov	r1, r9
 8013046:	f7ed f8eb 	bl	8000220 <__aeabi_dsub>
 801304a:	4632      	mov	r2, r6
 801304c:	463b      	mov	r3, r7
 801304e:	f7ed f8e7 	bl	8000220 <__aeabi_dsub>
 8013052:	a31b      	add	r3, pc, #108	@ (adr r3, 80130c0 <__ieee754_rem_pio2+0x318>)
 8013054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013058:	4606      	mov	r6, r0
 801305a:	460f      	mov	r7, r1
 801305c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013060:	f7ed fa96 	bl	8000590 <__aeabi_dmul>
 8013064:	4632      	mov	r2, r6
 8013066:	463b      	mov	r3, r7
 8013068:	f7ed f8da 	bl	8000220 <__aeabi_dsub>
 801306c:	4606      	mov	r6, r0
 801306e:	460f      	mov	r7, r1
 8013070:	e764      	b.n	8012f3c <__ieee754_rem_pio2+0x194>
 8013072:	4b1b      	ldr	r3, [pc, #108]	@ (80130e0 <__ieee754_rem_pio2+0x338>)
 8013074:	4598      	cmp	r8, r3
 8013076:	d935      	bls.n	80130e4 <__ieee754_rem_pio2+0x33c>
 8013078:	4632      	mov	r2, r6
 801307a:	463b      	mov	r3, r7
 801307c:	4630      	mov	r0, r6
 801307e:	4639      	mov	r1, r7
 8013080:	f7ed f8ce 	bl	8000220 <__aeabi_dsub>
 8013084:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013088:	e9c4 0100 	strd	r0, r1, [r4]
 801308c:	e69e      	b.n	8012dcc <__ieee754_rem_pio2+0x24>
 801308e:	bf00      	nop
 8013090:	54400000 	.word	0x54400000
 8013094:	3ff921fb 	.word	0x3ff921fb
 8013098:	1a626331 	.word	0x1a626331
 801309c:	3dd0b461 	.word	0x3dd0b461
 80130a0:	1a600000 	.word	0x1a600000
 80130a4:	3dd0b461 	.word	0x3dd0b461
 80130a8:	2e037073 	.word	0x2e037073
 80130ac:	3ba3198a 	.word	0x3ba3198a
 80130b0:	6dc9c883 	.word	0x6dc9c883
 80130b4:	3fe45f30 	.word	0x3fe45f30
 80130b8:	2e000000 	.word	0x2e000000
 80130bc:	3ba3198a 	.word	0x3ba3198a
 80130c0:	252049c1 	.word	0x252049c1
 80130c4:	397b839a 	.word	0x397b839a
 80130c8:	3fe921fb 	.word	0x3fe921fb
 80130cc:	4002d97b 	.word	0x4002d97b
 80130d0:	3ff921fb 	.word	0x3ff921fb
 80130d4:	413921fb 	.word	0x413921fb
 80130d8:	3fe00000 	.word	0x3fe00000
 80130dc:	080145b0 	.word	0x080145b0
 80130e0:	7fefffff 	.word	0x7fefffff
 80130e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80130e8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80130ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80130f0:	4630      	mov	r0, r6
 80130f2:	460f      	mov	r7, r1
 80130f4:	f7ed fce6 	bl	8000ac4 <__aeabi_d2iz>
 80130f8:	f7ed f9e0 	bl	80004bc <__aeabi_i2d>
 80130fc:	4602      	mov	r2, r0
 80130fe:	460b      	mov	r3, r1
 8013100:	4630      	mov	r0, r6
 8013102:	4639      	mov	r1, r7
 8013104:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013108:	f7ed f88a 	bl	8000220 <__aeabi_dsub>
 801310c:	4b22      	ldr	r3, [pc, #136]	@ (8013198 <__ieee754_rem_pio2+0x3f0>)
 801310e:	2200      	movs	r2, #0
 8013110:	f7ed fa3e 	bl	8000590 <__aeabi_dmul>
 8013114:	460f      	mov	r7, r1
 8013116:	4606      	mov	r6, r0
 8013118:	f7ed fcd4 	bl	8000ac4 <__aeabi_d2iz>
 801311c:	f7ed f9ce 	bl	80004bc <__aeabi_i2d>
 8013120:	4602      	mov	r2, r0
 8013122:	460b      	mov	r3, r1
 8013124:	4630      	mov	r0, r6
 8013126:	4639      	mov	r1, r7
 8013128:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801312c:	f7ed f878 	bl	8000220 <__aeabi_dsub>
 8013130:	4b19      	ldr	r3, [pc, #100]	@ (8013198 <__ieee754_rem_pio2+0x3f0>)
 8013132:	2200      	movs	r2, #0
 8013134:	f7ed fa2c 	bl	8000590 <__aeabi_dmul>
 8013138:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801313c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8013140:	f04f 0803 	mov.w	r8, #3
 8013144:	2600      	movs	r6, #0
 8013146:	2700      	movs	r7, #0
 8013148:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801314c:	4632      	mov	r2, r6
 801314e:	463b      	mov	r3, r7
 8013150:	46c2      	mov	sl, r8
 8013152:	f108 38ff 	add.w	r8, r8, #4294967295
 8013156:	f7ed fc83 	bl	8000a60 <__aeabi_dcmpeq>
 801315a:	2800      	cmp	r0, #0
 801315c:	d1f4      	bne.n	8013148 <__ieee754_rem_pio2+0x3a0>
 801315e:	4b0f      	ldr	r3, [pc, #60]	@ (801319c <__ieee754_rem_pio2+0x3f4>)
 8013160:	9301      	str	r3, [sp, #4]
 8013162:	2302      	movs	r3, #2
 8013164:	9300      	str	r3, [sp, #0]
 8013166:	462a      	mov	r2, r5
 8013168:	4653      	mov	r3, sl
 801316a:	4621      	mov	r1, r4
 801316c:	a806      	add	r0, sp, #24
 801316e:	f000 fb5b 	bl	8013828 <__kernel_rem_pio2>
 8013172:	9b04      	ldr	r3, [sp, #16]
 8013174:	2b00      	cmp	r3, #0
 8013176:	4605      	mov	r5, r0
 8013178:	f6bf ae53 	bge.w	8012e22 <__ieee754_rem_pio2+0x7a>
 801317c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013180:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013184:	e9c4 2300 	strd	r2, r3, [r4]
 8013188:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801318c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013190:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8013194:	e740      	b.n	8013018 <__ieee754_rem_pio2+0x270>
 8013196:	bf00      	nop
 8013198:	41700000 	.word	0x41700000
 801319c:	08014630 	.word	0x08014630

080131a0 <fabs>:
 80131a0:	ec51 0b10 	vmov	r0, r1, d0
 80131a4:	4602      	mov	r2, r0
 80131a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80131aa:	ec43 2b10 	vmov	d0, r2, r3
 80131ae:	4770      	bx	lr

080131b0 <__kernel_cosf>:
 80131b0:	ee10 3a10 	vmov	r3, s0
 80131b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80131b8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80131bc:	eef0 6a40 	vmov.f32	s13, s0
 80131c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80131c4:	d204      	bcs.n	80131d0 <__kernel_cosf+0x20>
 80131c6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80131ca:	ee17 2a90 	vmov	r2, s15
 80131ce:	b342      	cbz	r2, 8013222 <__kernel_cosf+0x72>
 80131d0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80131d4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8013240 <__kernel_cosf+0x90>
 80131d8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8013244 <__kernel_cosf+0x94>
 80131dc:	4a1a      	ldr	r2, [pc, #104]	@ (8013248 <__kernel_cosf+0x98>)
 80131de:	eea7 6a27 	vfma.f32	s12, s14, s15
 80131e2:	4293      	cmp	r3, r2
 80131e4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801324c <__kernel_cosf+0x9c>
 80131e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80131ec:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8013250 <__kernel_cosf+0xa0>
 80131f0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80131f4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8013254 <__kernel_cosf+0xa4>
 80131f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80131fc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8013258 <__kernel_cosf+0xa8>
 8013200:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013204:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8013208:	ee26 6a07 	vmul.f32	s12, s12, s14
 801320c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013210:	eee7 0a06 	vfma.f32	s1, s14, s12
 8013214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013218:	d804      	bhi.n	8013224 <__kernel_cosf+0x74>
 801321a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801321e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013222:	4770      	bx	lr
 8013224:	4a0d      	ldr	r2, [pc, #52]	@ (801325c <__kernel_cosf+0xac>)
 8013226:	4293      	cmp	r3, r2
 8013228:	bf9a      	itte	ls
 801322a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801322e:	ee07 3a10 	vmovls	s14, r3
 8013232:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8013236:	ee30 0a47 	vsub.f32	s0, s0, s14
 801323a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801323e:	e7ec      	b.n	801321a <__kernel_cosf+0x6a>
 8013240:	ad47d74e 	.word	0xad47d74e
 8013244:	310f74f6 	.word	0x310f74f6
 8013248:	3e999999 	.word	0x3e999999
 801324c:	b493f27c 	.word	0xb493f27c
 8013250:	37d00d01 	.word	0x37d00d01
 8013254:	bab60b61 	.word	0xbab60b61
 8013258:	3d2aaaab 	.word	0x3d2aaaab
 801325c:	3f480000 	.word	0x3f480000

08013260 <__kernel_sinf>:
 8013260:	ee10 3a10 	vmov	r3, s0
 8013264:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013268:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801326c:	d204      	bcs.n	8013278 <__kernel_sinf+0x18>
 801326e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013272:	ee17 3a90 	vmov	r3, s15
 8013276:	b35b      	cbz	r3, 80132d0 <__kernel_sinf+0x70>
 8013278:	ee20 7a00 	vmul.f32	s14, s0, s0
 801327c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80132d4 <__kernel_sinf+0x74>
 8013280:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80132d8 <__kernel_sinf+0x78>
 8013284:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013288:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80132dc <__kernel_sinf+0x7c>
 801328c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013290:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80132e0 <__kernel_sinf+0x80>
 8013294:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013298:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80132e4 <__kernel_sinf+0x84>
 801329c:	ee60 6a07 	vmul.f32	s13, s0, s14
 80132a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80132a4:	b930      	cbnz	r0, 80132b4 <__kernel_sinf+0x54>
 80132a6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80132e8 <__kernel_sinf+0x88>
 80132aa:	eea7 6a27 	vfma.f32	s12, s14, s15
 80132ae:	eea6 0a26 	vfma.f32	s0, s12, s13
 80132b2:	4770      	bx	lr
 80132b4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80132b8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80132bc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80132c0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80132c4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80132ec <__kernel_sinf+0x8c>
 80132c8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80132cc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80132d0:	4770      	bx	lr
 80132d2:	bf00      	nop
 80132d4:	2f2ec9d3 	.word	0x2f2ec9d3
 80132d8:	b2d72f34 	.word	0xb2d72f34
 80132dc:	3638ef1b 	.word	0x3638ef1b
 80132e0:	b9500d01 	.word	0xb9500d01
 80132e4:	3c088889 	.word	0x3c088889
 80132e8:	be2aaaab 	.word	0xbe2aaaab
 80132ec:	3e2aaaab 	.word	0x3e2aaaab

080132f0 <__ieee754_fmodf>:
 80132f0:	b570      	push	{r4, r5, r6, lr}
 80132f2:	ee10 6a90 	vmov	r6, s1
 80132f6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80132fa:	1e5a      	subs	r2, r3, #1
 80132fc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013300:	d206      	bcs.n	8013310 <__ieee754_fmodf+0x20>
 8013302:	ee10 4a10 	vmov	r4, s0
 8013306:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 801330a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801330e:	d304      	bcc.n	801331a <__ieee754_fmodf+0x2a>
 8013310:	ee60 0a20 	vmul.f32	s1, s0, s1
 8013314:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8013318:	bd70      	pop	{r4, r5, r6, pc}
 801331a:	4299      	cmp	r1, r3
 801331c:	dbfc      	blt.n	8013318 <__ieee754_fmodf+0x28>
 801331e:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 8013322:	d105      	bne.n	8013330 <__ieee754_fmodf+0x40>
 8013324:	4b32      	ldr	r3, [pc, #200]	@ (80133f0 <__ieee754_fmodf+0x100>)
 8013326:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 801332a:	ed93 0a00 	vldr	s0, [r3]
 801332e:	e7f3      	b.n	8013318 <__ieee754_fmodf+0x28>
 8013330:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8013334:	d146      	bne.n	80133c4 <__ieee754_fmodf+0xd4>
 8013336:	020a      	lsls	r2, r1, #8
 8013338:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 801333c:	2a00      	cmp	r2, #0
 801333e:	dc3e      	bgt.n	80133be <__ieee754_fmodf+0xce>
 8013340:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8013344:	bf01      	itttt	eq
 8013346:	021a      	lsleq	r2, r3, #8
 8013348:	fab2 f282 	clzeq	r2, r2
 801334c:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8013350:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 8013354:	bf16      	itet	ne
 8013356:	15da      	asrne	r2, r3, #23
 8013358:	3282      	addeq	r2, #130	@ 0x82
 801335a:	3a7f      	subne	r2, #127	@ 0x7f
 801335c:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8013360:	bfbb      	ittet	lt
 8013362:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8013366:	1a24      	sublt	r4, r4, r0
 8013368:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 801336c:	40a1      	lsllt	r1, r4
 801336e:	bfa8      	it	ge
 8013370:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 8013374:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8013378:	bfb5      	itete	lt
 801337a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 801337e:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 8013382:	1aa4      	sublt	r4, r4, r2
 8013384:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8013388:	bfb8      	it	lt
 801338a:	fa03 f404 	lsllt.w	r4, r3, r4
 801338e:	1a80      	subs	r0, r0, r2
 8013390:	1b0b      	subs	r3, r1, r4
 8013392:	b9d0      	cbnz	r0, 80133ca <__ieee754_fmodf+0xda>
 8013394:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8013398:	bf28      	it	cs
 801339a:	460b      	movcs	r3, r1
 801339c:	2b00      	cmp	r3, #0
 801339e:	d0c1      	beq.n	8013324 <__ieee754_fmodf+0x34>
 80133a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80133a4:	db19      	blt.n	80133da <__ieee754_fmodf+0xea>
 80133a6:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 80133aa:	db19      	blt.n	80133e0 <__ieee754_fmodf+0xf0>
 80133ac:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80133b0:	327f      	adds	r2, #127	@ 0x7f
 80133b2:	432b      	orrs	r3, r5
 80133b4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80133b8:	ee00 3a10 	vmov	s0, r3
 80133bc:	e7ac      	b.n	8013318 <__ieee754_fmodf+0x28>
 80133be:	3801      	subs	r0, #1
 80133c0:	0052      	lsls	r2, r2, #1
 80133c2:	e7bb      	b.n	801333c <__ieee754_fmodf+0x4c>
 80133c4:	15c8      	asrs	r0, r1, #23
 80133c6:	387f      	subs	r0, #127	@ 0x7f
 80133c8:	e7ba      	b.n	8013340 <__ieee754_fmodf+0x50>
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	da02      	bge.n	80133d4 <__ieee754_fmodf+0xe4>
 80133ce:	0049      	lsls	r1, r1, #1
 80133d0:	3801      	subs	r0, #1
 80133d2:	e7dd      	b.n	8013390 <__ieee754_fmodf+0xa0>
 80133d4:	d0a6      	beq.n	8013324 <__ieee754_fmodf+0x34>
 80133d6:	0059      	lsls	r1, r3, #1
 80133d8:	e7fa      	b.n	80133d0 <__ieee754_fmodf+0xe0>
 80133da:	005b      	lsls	r3, r3, #1
 80133dc:	3a01      	subs	r2, #1
 80133de:	e7df      	b.n	80133a0 <__ieee754_fmodf+0xb0>
 80133e0:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 80133e4:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80133e8:	3282      	adds	r2, #130	@ 0x82
 80133ea:	4113      	asrs	r3, r2
 80133ec:	432b      	orrs	r3, r5
 80133ee:	e7e3      	b.n	80133b8 <__ieee754_fmodf+0xc8>
 80133f0:	08014738 	.word	0x08014738

080133f4 <__ieee754_rem_pio2f>:
 80133f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133f6:	ee10 6a10 	vmov	r6, s0
 80133fa:	4b88      	ldr	r3, [pc, #544]	@ (801361c <__ieee754_rem_pio2f+0x228>)
 80133fc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8013400:	429d      	cmp	r5, r3
 8013402:	b087      	sub	sp, #28
 8013404:	4604      	mov	r4, r0
 8013406:	d805      	bhi.n	8013414 <__ieee754_rem_pio2f+0x20>
 8013408:	2300      	movs	r3, #0
 801340a:	ed80 0a00 	vstr	s0, [r0]
 801340e:	6043      	str	r3, [r0, #4]
 8013410:	2000      	movs	r0, #0
 8013412:	e022      	b.n	801345a <__ieee754_rem_pio2f+0x66>
 8013414:	4b82      	ldr	r3, [pc, #520]	@ (8013620 <__ieee754_rem_pio2f+0x22c>)
 8013416:	429d      	cmp	r5, r3
 8013418:	d83a      	bhi.n	8013490 <__ieee754_rem_pio2f+0x9c>
 801341a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801341e:	2e00      	cmp	r6, #0
 8013420:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8013624 <__ieee754_rem_pio2f+0x230>
 8013424:	4a80      	ldr	r2, [pc, #512]	@ (8013628 <__ieee754_rem_pio2f+0x234>)
 8013426:	f023 030f 	bic.w	r3, r3, #15
 801342a:	dd18      	ble.n	801345e <__ieee754_rem_pio2f+0x6a>
 801342c:	4293      	cmp	r3, r2
 801342e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8013432:	bf09      	itett	eq
 8013434:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801362c <__ieee754_rem_pio2f+0x238>
 8013438:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8013630 <__ieee754_rem_pio2f+0x23c>
 801343c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8013634 <__ieee754_rem_pio2f+0x240>
 8013440:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013444:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8013448:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801344c:	ed80 7a00 	vstr	s14, [r0]
 8013450:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013454:	edc0 7a01 	vstr	s15, [r0, #4]
 8013458:	2001      	movs	r0, #1
 801345a:	b007      	add	sp, #28
 801345c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801345e:	4293      	cmp	r3, r2
 8013460:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013464:	bf09      	itett	eq
 8013466:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801362c <__ieee754_rem_pio2f+0x238>
 801346a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8013630 <__ieee754_rem_pio2f+0x23c>
 801346e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8013634 <__ieee754_rem_pio2f+0x240>
 8013472:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013476:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801347a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801347e:	ed80 7a00 	vstr	s14, [r0]
 8013482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013486:	edc0 7a01 	vstr	s15, [r0, #4]
 801348a:	f04f 30ff 	mov.w	r0, #4294967295
 801348e:	e7e4      	b.n	801345a <__ieee754_rem_pio2f+0x66>
 8013490:	4b69      	ldr	r3, [pc, #420]	@ (8013638 <__ieee754_rem_pio2f+0x244>)
 8013492:	429d      	cmp	r5, r3
 8013494:	d873      	bhi.n	801357e <__ieee754_rem_pio2f+0x18a>
 8013496:	f000 f8dd 	bl	8013654 <fabsf>
 801349a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801363c <__ieee754_rem_pio2f+0x248>
 801349e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80134a2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80134a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80134aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80134ae:	ee17 0a90 	vmov	r0, s15
 80134b2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8013624 <__ieee754_rem_pio2f+0x230>
 80134b6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80134ba:	281f      	cmp	r0, #31
 80134bc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8013630 <__ieee754_rem_pio2f+0x23c>
 80134c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80134c4:	eeb1 6a47 	vneg.f32	s12, s14
 80134c8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80134cc:	ee16 1a90 	vmov	r1, s13
 80134d0:	dc09      	bgt.n	80134e6 <__ieee754_rem_pio2f+0xf2>
 80134d2:	4a5b      	ldr	r2, [pc, #364]	@ (8013640 <__ieee754_rem_pio2f+0x24c>)
 80134d4:	1e47      	subs	r7, r0, #1
 80134d6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80134da:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80134de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80134e2:	4293      	cmp	r3, r2
 80134e4:	d107      	bne.n	80134f6 <__ieee754_rem_pio2f+0x102>
 80134e6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80134ea:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80134ee:	2a08      	cmp	r2, #8
 80134f0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80134f4:	dc14      	bgt.n	8013520 <__ieee754_rem_pio2f+0x12c>
 80134f6:	6021      	str	r1, [r4, #0]
 80134f8:	ed94 7a00 	vldr	s14, [r4]
 80134fc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013500:	2e00      	cmp	r6, #0
 8013502:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013506:	ed84 0a01 	vstr	s0, [r4, #4]
 801350a:	daa6      	bge.n	801345a <__ieee754_rem_pio2f+0x66>
 801350c:	eeb1 7a47 	vneg.f32	s14, s14
 8013510:	eeb1 0a40 	vneg.f32	s0, s0
 8013514:	ed84 7a00 	vstr	s14, [r4]
 8013518:	ed84 0a01 	vstr	s0, [r4, #4]
 801351c:	4240      	negs	r0, r0
 801351e:	e79c      	b.n	801345a <__ieee754_rem_pio2f+0x66>
 8013520:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801362c <__ieee754_rem_pio2f+0x238>
 8013524:	eef0 6a40 	vmov.f32	s13, s0
 8013528:	eee6 6a25 	vfma.f32	s13, s12, s11
 801352c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8013530:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013534:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8013634 <__ieee754_rem_pio2f+0x240>
 8013538:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801353c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013540:	ee15 2a90 	vmov	r2, s11
 8013544:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013548:	1a5b      	subs	r3, r3, r1
 801354a:	2b19      	cmp	r3, #25
 801354c:	dc04      	bgt.n	8013558 <__ieee754_rem_pio2f+0x164>
 801354e:	edc4 5a00 	vstr	s11, [r4]
 8013552:	eeb0 0a66 	vmov.f32	s0, s13
 8013556:	e7cf      	b.n	80134f8 <__ieee754_rem_pio2f+0x104>
 8013558:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8013644 <__ieee754_rem_pio2f+0x250>
 801355c:	eeb0 0a66 	vmov.f32	s0, s13
 8013560:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013564:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013568:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8013648 <__ieee754_rem_pio2f+0x254>
 801356c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013570:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013574:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013578:	ed84 7a00 	vstr	s14, [r4]
 801357c:	e7bc      	b.n	80134f8 <__ieee754_rem_pio2f+0x104>
 801357e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8013582:	d306      	bcc.n	8013592 <__ieee754_rem_pio2f+0x19e>
 8013584:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013588:	edc0 7a01 	vstr	s15, [r0, #4]
 801358c:	edc0 7a00 	vstr	s15, [r0]
 8013590:	e73e      	b.n	8013410 <__ieee754_rem_pio2f+0x1c>
 8013592:	15ea      	asrs	r2, r5, #23
 8013594:	3a86      	subs	r2, #134	@ 0x86
 8013596:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801359a:	ee07 3a90 	vmov	s15, r3
 801359e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80135a2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801364c <__ieee754_rem_pio2f+0x258>
 80135a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80135aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80135ae:	ed8d 7a03 	vstr	s14, [sp, #12]
 80135b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80135b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80135ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80135be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80135c2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80135c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80135ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80135ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135d2:	edcd 7a05 	vstr	s15, [sp, #20]
 80135d6:	d11e      	bne.n	8013616 <__ieee754_rem_pio2f+0x222>
 80135d8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80135dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135e0:	bf0c      	ite	eq
 80135e2:	2301      	moveq	r3, #1
 80135e4:	2302      	movne	r3, #2
 80135e6:	491a      	ldr	r1, [pc, #104]	@ (8013650 <__ieee754_rem_pio2f+0x25c>)
 80135e8:	9101      	str	r1, [sp, #4]
 80135ea:	2102      	movs	r1, #2
 80135ec:	9100      	str	r1, [sp, #0]
 80135ee:	a803      	add	r0, sp, #12
 80135f0:	4621      	mov	r1, r4
 80135f2:	f000 fc69 	bl	8013ec8 <__kernel_rem_pio2f>
 80135f6:	2e00      	cmp	r6, #0
 80135f8:	f6bf af2f 	bge.w	801345a <__ieee754_rem_pio2f+0x66>
 80135fc:	edd4 7a00 	vldr	s15, [r4]
 8013600:	eef1 7a67 	vneg.f32	s15, s15
 8013604:	edc4 7a00 	vstr	s15, [r4]
 8013608:	edd4 7a01 	vldr	s15, [r4, #4]
 801360c:	eef1 7a67 	vneg.f32	s15, s15
 8013610:	edc4 7a01 	vstr	s15, [r4, #4]
 8013614:	e782      	b.n	801351c <__ieee754_rem_pio2f+0x128>
 8013616:	2303      	movs	r3, #3
 8013618:	e7e5      	b.n	80135e6 <__ieee754_rem_pio2f+0x1f2>
 801361a:	bf00      	nop
 801361c:	3f490fd8 	.word	0x3f490fd8
 8013620:	4016cbe3 	.word	0x4016cbe3
 8013624:	3fc90f80 	.word	0x3fc90f80
 8013628:	3fc90fd0 	.word	0x3fc90fd0
 801362c:	37354400 	.word	0x37354400
 8013630:	37354443 	.word	0x37354443
 8013634:	2e85a308 	.word	0x2e85a308
 8013638:	43490f80 	.word	0x43490f80
 801363c:	3f22f984 	.word	0x3f22f984
 8013640:	08014740 	.word	0x08014740
 8013644:	2e85a300 	.word	0x2e85a300
 8013648:	248d3132 	.word	0x248d3132
 801364c:	43800000 	.word	0x43800000
 8013650:	080147c0 	.word	0x080147c0

08013654 <fabsf>:
 8013654:	ee10 3a10 	vmov	r3, s0
 8013658:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801365c:	ee00 3a10 	vmov	s0, r3
 8013660:	4770      	bx	lr
 8013662:	0000      	movs	r0, r0
 8013664:	0000      	movs	r0, r0
	...

08013668 <scalbn>:
 8013668:	b570      	push	{r4, r5, r6, lr}
 801366a:	ec55 4b10 	vmov	r4, r5, d0
 801366e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013672:	4606      	mov	r6, r0
 8013674:	462b      	mov	r3, r5
 8013676:	b991      	cbnz	r1, 801369e <scalbn+0x36>
 8013678:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801367c:	4323      	orrs	r3, r4
 801367e:	d03b      	beq.n	80136f8 <scalbn+0x90>
 8013680:	4b33      	ldr	r3, [pc, #204]	@ (8013750 <scalbn+0xe8>)
 8013682:	4620      	mov	r0, r4
 8013684:	4629      	mov	r1, r5
 8013686:	2200      	movs	r2, #0
 8013688:	f7ec ff82 	bl	8000590 <__aeabi_dmul>
 801368c:	4b31      	ldr	r3, [pc, #196]	@ (8013754 <scalbn+0xec>)
 801368e:	429e      	cmp	r6, r3
 8013690:	4604      	mov	r4, r0
 8013692:	460d      	mov	r5, r1
 8013694:	da0f      	bge.n	80136b6 <scalbn+0x4e>
 8013696:	a326      	add	r3, pc, #152	@ (adr r3, 8013730 <scalbn+0xc8>)
 8013698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801369c:	e01e      	b.n	80136dc <scalbn+0x74>
 801369e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80136a2:	4291      	cmp	r1, r2
 80136a4:	d10b      	bne.n	80136be <scalbn+0x56>
 80136a6:	4622      	mov	r2, r4
 80136a8:	4620      	mov	r0, r4
 80136aa:	4629      	mov	r1, r5
 80136ac:	f7ec fdba 	bl	8000224 <__adddf3>
 80136b0:	4604      	mov	r4, r0
 80136b2:	460d      	mov	r5, r1
 80136b4:	e020      	b.n	80136f8 <scalbn+0x90>
 80136b6:	460b      	mov	r3, r1
 80136b8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80136bc:	3936      	subs	r1, #54	@ 0x36
 80136be:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80136c2:	4296      	cmp	r6, r2
 80136c4:	dd0d      	ble.n	80136e2 <scalbn+0x7a>
 80136c6:	2d00      	cmp	r5, #0
 80136c8:	a11b      	add	r1, pc, #108	@ (adr r1, 8013738 <scalbn+0xd0>)
 80136ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136ce:	da02      	bge.n	80136d6 <scalbn+0x6e>
 80136d0:	a11b      	add	r1, pc, #108	@ (adr r1, 8013740 <scalbn+0xd8>)
 80136d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136d6:	a318      	add	r3, pc, #96	@ (adr r3, 8013738 <scalbn+0xd0>)
 80136d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136dc:	f7ec ff58 	bl	8000590 <__aeabi_dmul>
 80136e0:	e7e6      	b.n	80136b0 <scalbn+0x48>
 80136e2:	1872      	adds	r2, r6, r1
 80136e4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80136e8:	428a      	cmp	r2, r1
 80136ea:	dcec      	bgt.n	80136c6 <scalbn+0x5e>
 80136ec:	2a00      	cmp	r2, #0
 80136ee:	dd06      	ble.n	80136fe <scalbn+0x96>
 80136f0:	f36f 531e 	bfc	r3, #20, #11
 80136f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80136f8:	ec45 4b10 	vmov	d0, r4, r5
 80136fc:	bd70      	pop	{r4, r5, r6, pc}
 80136fe:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013702:	da08      	bge.n	8013716 <scalbn+0xae>
 8013704:	2d00      	cmp	r5, #0
 8013706:	a10a      	add	r1, pc, #40	@ (adr r1, 8013730 <scalbn+0xc8>)
 8013708:	e9d1 0100 	ldrd	r0, r1, [r1]
 801370c:	dac3      	bge.n	8013696 <scalbn+0x2e>
 801370e:	a10e      	add	r1, pc, #56	@ (adr r1, 8013748 <scalbn+0xe0>)
 8013710:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013714:	e7bf      	b.n	8013696 <scalbn+0x2e>
 8013716:	3236      	adds	r2, #54	@ 0x36
 8013718:	f36f 531e 	bfc	r3, #20, #11
 801371c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013720:	4620      	mov	r0, r4
 8013722:	4b0d      	ldr	r3, [pc, #52]	@ (8013758 <scalbn+0xf0>)
 8013724:	4629      	mov	r1, r5
 8013726:	2200      	movs	r2, #0
 8013728:	e7d8      	b.n	80136dc <scalbn+0x74>
 801372a:	bf00      	nop
 801372c:	f3af 8000 	nop.w
 8013730:	c2f8f359 	.word	0xc2f8f359
 8013734:	01a56e1f 	.word	0x01a56e1f
 8013738:	8800759c 	.word	0x8800759c
 801373c:	7e37e43c 	.word	0x7e37e43c
 8013740:	8800759c 	.word	0x8800759c
 8013744:	fe37e43c 	.word	0xfe37e43c
 8013748:	c2f8f359 	.word	0xc2f8f359
 801374c:	81a56e1f 	.word	0x81a56e1f
 8013750:	43500000 	.word	0x43500000
 8013754:	ffff3cb0 	.word	0xffff3cb0
 8013758:	3c900000 	.word	0x3c900000

0801375c <scalbnf>:
 801375c:	ee10 3a10 	vmov	r3, s0
 8013760:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8013764:	d02b      	beq.n	80137be <scalbnf+0x62>
 8013766:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801376a:	d302      	bcc.n	8013772 <scalbnf+0x16>
 801376c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013770:	4770      	bx	lr
 8013772:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8013776:	d123      	bne.n	80137c0 <scalbnf+0x64>
 8013778:	4b24      	ldr	r3, [pc, #144]	@ (801380c <scalbnf+0xb0>)
 801377a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8013810 <scalbnf+0xb4>
 801377e:	4298      	cmp	r0, r3
 8013780:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013784:	db17      	blt.n	80137b6 <scalbnf+0x5a>
 8013786:	ee10 3a10 	vmov	r3, s0
 801378a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801378e:	3a19      	subs	r2, #25
 8013790:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013794:	4288      	cmp	r0, r1
 8013796:	dd15      	ble.n	80137c4 <scalbnf+0x68>
 8013798:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8013814 <scalbnf+0xb8>
 801379c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8013818 <scalbnf+0xbc>
 80137a0:	ee10 3a10 	vmov	r3, s0
 80137a4:	eeb0 7a67 	vmov.f32	s14, s15
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	bfb8      	it	lt
 80137ac:	eef0 7a66 	vmovlt.f32	s15, s13
 80137b0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80137b4:	4770      	bx	lr
 80137b6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801381c <scalbnf+0xc0>
 80137ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 80137be:	4770      	bx	lr
 80137c0:	0dd2      	lsrs	r2, r2, #23
 80137c2:	e7e5      	b.n	8013790 <scalbnf+0x34>
 80137c4:	4410      	add	r0, r2
 80137c6:	28fe      	cmp	r0, #254	@ 0xfe
 80137c8:	dce6      	bgt.n	8013798 <scalbnf+0x3c>
 80137ca:	2800      	cmp	r0, #0
 80137cc:	dd06      	ble.n	80137dc <scalbnf+0x80>
 80137ce:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80137d2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80137d6:	ee00 3a10 	vmov	s0, r3
 80137da:	4770      	bx	lr
 80137dc:	f110 0f16 	cmn.w	r0, #22
 80137e0:	da09      	bge.n	80137f6 <scalbnf+0x9a>
 80137e2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801381c <scalbnf+0xc0>
 80137e6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8013820 <scalbnf+0xc4>
 80137ea:	ee10 3a10 	vmov	r3, s0
 80137ee:	eeb0 7a67 	vmov.f32	s14, s15
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	e7d9      	b.n	80137aa <scalbnf+0x4e>
 80137f6:	3019      	adds	r0, #25
 80137f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80137fc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013800:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8013824 <scalbnf+0xc8>
 8013804:	ee07 3a90 	vmov	s15, r3
 8013808:	e7d7      	b.n	80137ba <scalbnf+0x5e>
 801380a:	bf00      	nop
 801380c:	ffff3cb0 	.word	0xffff3cb0
 8013810:	4c000000 	.word	0x4c000000
 8013814:	7149f2ca 	.word	0x7149f2ca
 8013818:	f149f2ca 	.word	0xf149f2ca
 801381c:	0da24260 	.word	0x0da24260
 8013820:	8da24260 	.word	0x8da24260
 8013824:	33000000 	.word	0x33000000

08013828 <__kernel_rem_pio2>:
 8013828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801382c:	ed2d 8b02 	vpush	{d8}
 8013830:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8013834:	f112 0f14 	cmn.w	r2, #20
 8013838:	9306      	str	r3, [sp, #24]
 801383a:	9104      	str	r1, [sp, #16]
 801383c:	4bc2      	ldr	r3, [pc, #776]	@ (8013b48 <__kernel_rem_pio2+0x320>)
 801383e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8013840:	9008      	str	r0, [sp, #32]
 8013842:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013846:	9300      	str	r3, [sp, #0]
 8013848:	9b06      	ldr	r3, [sp, #24]
 801384a:	f103 33ff 	add.w	r3, r3, #4294967295
 801384e:	bfa8      	it	ge
 8013850:	1ed4      	subge	r4, r2, #3
 8013852:	9305      	str	r3, [sp, #20]
 8013854:	bfb2      	itee	lt
 8013856:	2400      	movlt	r4, #0
 8013858:	2318      	movge	r3, #24
 801385a:	fb94 f4f3 	sdivge	r4, r4, r3
 801385e:	f06f 0317 	mvn.w	r3, #23
 8013862:	fb04 3303 	mla	r3, r4, r3, r3
 8013866:	eb03 0b02 	add.w	fp, r3, r2
 801386a:	9b00      	ldr	r3, [sp, #0]
 801386c:	9a05      	ldr	r2, [sp, #20]
 801386e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8013b38 <__kernel_rem_pio2+0x310>
 8013872:	eb03 0802 	add.w	r8, r3, r2
 8013876:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013878:	1aa7      	subs	r7, r4, r2
 801387a:	ae20      	add	r6, sp, #128	@ 0x80
 801387c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013880:	2500      	movs	r5, #0
 8013882:	4545      	cmp	r5, r8
 8013884:	dd12      	ble.n	80138ac <__kernel_rem_pio2+0x84>
 8013886:	9b06      	ldr	r3, [sp, #24]
 8013888:	aa20      	add	r2, sp, #128	@ 0x80
 801388a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801388e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8013892:	2700      	movs	r7, #0
 8013894:	9b00      	ldr	r3, [sp, #0]
 8013896:	429f      	cmp	r7, r3
 8013898:	dc2e      	bgt.n	80138f8 <__kernel_rem_pio2+0xd0>
 801389a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8013b38 <__kernel_rem_pio2+0x310>
 801389e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80138a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80138a6:	46a8      	mov	r8, r5
 80138a8:	2600      	movs	r6, #0
 80138aa:	e01b      	b.n	80138e4 <__kernel_rem_pio2+0xbc>
 80138ac:	42ef      	cmn	r7, r5
 80138ae:	d407      	bmi.n	80138c0 <__kernel_rem_pio2+0x98>
 80138b0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80138b4:	f7ec fe02 	bl	80004bc <__aeabi_i2d>
 80138b8:	e8e6 0102 	strd	r0, r1, [r6], #8
 80138bc:	3501      	adds	r5, #1
 80138be:	e7e0      	b.n	8013882 <__kernel_rem_pio2+0x5a>
 80138c0:	ec51 0b18 	vmov	r0, r1, d8
 80138c4:	e7f8      	b.n	80138b8 <__kernel_rem_pio2+0x90>
 80138c6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80138ca:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80138ce:	f7ec fe5f 	bl	8000590 <__aeabi_dmul>
 80138d2:	4602      	mov	r2, r0
 80138d4:	460b      	mov	r3, r1
 80138d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80138da:	f7ec fca3 	bl	8000224 <__adddf3>
 80138de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80138e2:	3601      	adds	r6, #1
 80138e4:	9b05      	ldr	r3, [sp, #20]
 80138e6:	429e      	cmp	r6, r3
 80138e8:	dded      	ble.n	80138c6 <__kernel_rem_pio2+0x9e>
 80138ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80138ee:	3701      	adds	r7, #1
 80138f0:	ecaa 7b02 	vstmia	sl!, {d7}
 80138f4:	3508      	adds	r5, #8
 80138f6:	e7cd      	b.n	8013894 <__kernel_rem_pio2+0x6c>
 80138f8:	9b00      	ldr	r3, [sp, #0]
 80138fa:	f8dd 8000 	ldr.w	r8, [sp]
 80138fe:	aa0c      	add	r2, sp, #48	@ 0x30
 8013900:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013904:	930a      	str	r3, [sp, #40]	@ 0x28
 8013906:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013908:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801390c:	9309      	str	r3, [sp, #36]	@ 0x24
 801390e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8013912:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013914:	ab98      	add	r3, sp, #608	@ 0x260
 8013916:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801391a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801391e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013922:	ac0c      	add	r4, sp, #48	@ 0x30
 8013924:	ab70      	add	r3, sp, #448	@ 0x1c0
 8013926:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801392a:	46a1      	mov	r9, r4
 801392c:	46c2      	mov	sl, r8
 801392e:	f1ba 0f00 	cmp.w	sl, #0
 8013932:	dc77      	bgt.n	8013a24 <__kernel_rem_pio2+0x1fc>
 8013934:	4658      	mov	r0, fp
 8013936:	ed9d 0b02 	vldr	d0, [sp, #8]
 801393a:	f7ff fe95 	bl	8013668 <scalbn>
 801393e:	ec57 6b10 	vmov	r6, r7, d0
 8013942:	2200      	movs	r2, #0
 8013944:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8013948:	4630      	mov	r0, r6
 801394a:	4639      	mov	r1, r7
 801394c:	f7ec fe20 	bl	8000590 <__aeabi_dmul>
 8013950:	ec41 0b10 	vmov	d0, r0, r1
 8013954:	f000 fd20 	bl	8014398 <floor>
 8013958:	4b7c      	ldr	r3, [pc, #496]	@ (8013b4c <__kernel_rem_pio2+0x324>)
 801395a:	ec51 0b10 	vmov	r0, r1, d0
 801395e:	2200      	movs	r2, #0
 8013960:	f7ec fe16 	bl	8000590 <__aeabi_dmul>
 8013964:	4602      	mov	r2, r0
 8013966:	460b      	mov	r3, r1
 8013968:	4630      	mov	r0, r6
 801396a:	4639      	mov	r1, r7
 801396c:	f7ec fc58 	bl	8000220 <__aeabi_dsub>
 8013970:	460f      	mov	r7, r1
 8013972:	4606      	mov	r6, r0
 8013974:	f7ed f8a6 	bl	8000ac4 <__aeabi_d2iz>
 8013978:	9002      	str	r0, [sp, #8]
 801397a:	f7ec fd9f 	bl	80004bc <__aeabi_i2d>
 801397e:	4602      	mov	r2, r0
 8013980:	460b      	mov	r3, r1
 8013982:	4630      	mov	r0, r6
 8013984:	4639      	mov	r1, r7
 8013986:	f7ec fc4b 	bl	8000220 <__aeabi_dsub>
 801398a:	f1bb 0f00 	cmp.w	fp, #0
 801398e:	4606      	mov	r6, r0
 8013990:	460f      	mov	r7, r1
 8013992:	dd6c      	ble.n	8013a6e <__kernel_rem_pio2+0x246>
 8013994:	f108 31ff 	add.w	r1, r8, #4294967295
 8013998:	ab0c      	add	r3, sp, #48	@ 0x30
 801399a:	9d02      	ldr	r5, [sp, #8]
 801399c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80139a0:	f1cb 0018 	rsb	r0, fp, #24
 80139a4:	fa43 f200 	asr.w	r2, r3, r0
 80139a8:	4415      	add	r5, r2
 80139aa:	4082      	lsls	r2, r0
 80139ac:	1a9b      	subs	r3, r3, r2
 80139ae:	aa0c      	add	r2, sp, #48	@ 0x30
 80139b0:	9502      	str	r5, [sp, #8]
 80139b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80139b6:	f1cb 0217 	rsb	r2, fp, #23
 80139ba:	fa43 f902 	asr.w	r9, r3, r2
 80139be:	f1b9 0f00 	cmp.w	r9, #0
 80139c2:	dd64      	ble.n	8013a8e <__kernel_rem_pio2+0x266>
 80139c4:	9b02      	ldr	r3, [sp, #8]
 80139c6:	2200      	movs	r2, #0
 80139c8:	3301      	adds	r3, #1
 80139ca:	9302      	str	r3, [sp, #8]
 80139cc:	4615      	mov	r5, r2
 80139ce:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80139d2:	4590      	cmp	r8, r2
 80139d4:	f300 80a1 	bgt.w	8013b1a <__kernel_rem_pio2+0x2f2>
 80139d8:	f1bb 0f00 	cmp.w	fp, #0
 80139dc:	dd07      	ble.n	80139ee <__kernel_rem_pio2+0x1c6>
 80139de:	f1bb 0f01 	cmp.w	fp, #1
 80139e2:	f000 80c1 	beq.w	8013b68 <__kernel_rem_pio2+0x340>
 80139e6:	f1bb 0f02 	cmp.w	fp, #2
 80139ea:	f000 80c8 	beq.w	8013b7e <__kernel_rem_pio2+0x356>
 80139ee:	f1b9 0f02 	cmp.w	r9, #2
 80139f2:	d14c      	bne.n	8013a8e <__kernel_rem_pio2+0x266>
 80139f4:	4632      	mov	r2, r6
 80139f6:	463b      	mov	r3, r7
 80139f8:	4955      	ldr	r1, [pc, #340]	@ (8013b50 <__kernel_rem_pio2+0x328>)
 80139fa:	2000      	movs	r0, #0
 80139fc:	f7ec fc10 	bl	8000220 <__aeabi_dsub>
 8013a00:	4606      	mov	r6, r0
 8013a02:	460f      	mov	r7, r1
 8013a04:	2d00      	cmp	r5, #0
 8013a06:	d042      	beq.n	8013a8e <__kernel_rem_pio2+0x266>
 8013a08:	4658      	mov	r0, fp
 8013a0a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8013b40 <__kernel_rem_pio2+0x318>
 8013a0e:	f7ff fe2b 	bl	8013668 <scalbn>
 8013a12:	4630      	mov	r0, r6
 8013a14:	4639      	mov	r1, r7
 8013a16:	ec53 2b10 	vmov	r2, r3, d0
 8013a1a:	f7ec fc01 	bl	8000220 <__aeabi_dsub>
 8013a1e:	4606      	mov	r6, r0
 8013a20:	460f      	mov	r7, r1
 8013a22:	e034      	b.n	8013a8e <__kernel_rem_pio2+0x266>
 8013a24:	4b4b      	ldr	r3, [pc, #300]	@ (8013b54 <__kernel_rem_pio2+0x32c>)
 8013a26:	2200      	movs	r2, #0
 8013a28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a2c:	f7ec fdb0 	bl	8000590 <__aeabi_dmul>
 8013a30:	f7ed f848 	bl	8000ac4 <__aeabi_d2iz>
 8013a34:	f7ec fd42 	bl	80004bc <__aeabi_i2d>
 8013a38:	4b47      	ldr	r3, [pc, #284]	@ (8013b58 <__kernel_rem_pio2+0x330>)
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	4606      	mov	r6, r0
 8013a3e:	460f      	mov	r7, r1
 8013a40:	f7ec fda6 	bl	8000590 <__aeabi_dmul>
 8013a44:	4602      	mov	r2, r0
 8013a46:	460b      	mov	r3, r1
 8013a48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a4c:	f7ec fbe8 	bl	8000220 <__aeabi_dsub>
 8013a50:	f7ed f838 	bl	8000ac4 <__aeabi_d2iz>
 8013a54:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8013a58:	f849 0b04 	str.w	r0, [r9], #4
 8013a5c:	4639      	mov	r1, r7
 8013a5e:	4630      	mov	r0, r6
 8013a60:	f7ec fbe0 	bl	8000224 <__adddf3>
 8013a64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013a68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a6c:	e75f      	b.n	801392e <__kernel_rem_pio2+0x106>
 8013a6e:	d107      	bne.n	8013a80 <__kernel_rem_pio2+0x258>
 8013a70:	f108 33ff 	add.w	r3, r8, #4294967295
 8013a74:	aa0c      	add	r2, sp, #48	@ 0x30
 8013a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a7a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8013a7e:	e79e      	b.n	80139be <__kernel_rem_pio2+0x196>
 8013a80:	4b36      	ldr	r3, [pc, #216]	@ (8013b5c <__kernel_rem_pio2+0x334>)
 8013a82:	2200      	movs	r2, #0
 8013a84:	f7ed f80a 	bl	8000a9c <__aeabi_dcmpge>
 8013a88:	2800      	cmp	r0, #0
 8013a8a:	d143      	bne.n	8013b14 <__kernel_rem_pio2+0x2ec>
 8013a8c:	4681      	mov	r9, r0
 8013a8e:	2200      	movs	r2, #0
 8013a90:	2300      	movs	r3, #0
 8013a92:	4630      	mov	r0, r6
 8013a94:	4639      	mov	r1, r7
 8013a96:	f7ec ffe3 	bl	8000a60 <__aeabi_dcmpeq>
 8013a9a:	2800      	cmp	r0, #0
 8013a9c:	f000 80c1 	beq.w	8013c22 <__kernel_rem_pio2+0x3fa>
 8013aa0:	f108 33ff 	add.w	r3, r8, #4294967295
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	9900      	ldr	r1, [sp, #0]
 8013aa8:	428b      	cmp	r3, r1
 8013aaa:	da70      	bge.n	8013b8e <__kernel_rem_pio2+0x366>
 8013aac:	2a00      	cmp	r2, #0
 8013aae:	f000 808b 	beq.w	8013bc8 <__kernel_rem_pio2+0x3a0>
 8013ab2:	f108 38ff 	add.w	r8, r8, #4294967295
 8013ab6:	ab0c      	add	r3, sp, #48	@ 0x30
 8013ab8:	f1ab 0b18 	sub.w	fp, fp, #24
 8013abc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d0f6      	beq.n	8013ab2 <__kernel_rem_pio2+0x28a>
 8013ac4:	4658      	mov	r0, fp
 8013ac6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8013b40 <__kernel_rem_pio2+0x318>
 8013aca:	f7ff fdcd 	bl	8013668 <scalbn>
 8013ace:	f108 0301 	add.w	r3, r8, #1
 8013ad2:	00da      	lsls	r2, r3, #3
 8013ad4:	9205      	str	r2, [sp, #20]
 8013ad6:	ec55 4b10 	vmov	r4, r5, d0
 8013ada:	aa70      	add	r2, sp, #448	@ 0x1c0
 8013adc:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8013b54 <__kernel_rem_pio2+0x32c>
 8013ae0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8013ae4:	4646      	mov	r6, r8
 8013ae6:	f04f 0a00 	mov.w	sl, #0
 8013aea:	2e00      	cmp	r6, #0
 8013aec:	f280 80d1 	bge.w	8013c92 <__kernel_rem_pio2+0x46a>
 8013af0:	4644      	mov	r4, r8
 8013af2:	2c00      	cmp	r4, #0
 8013af4:	f2c0 80ff 	blt.w	8013cf6 <__kernel_rem_pio2+0x4ce>
 8013af8:	4b19      	ldr	r3, [pc, #100]	@ (8013b60 <__kernel_rem_pio2+0x338>)
 8013afa:	461f      	mov	r7, r3
 8013afc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8013afe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013b02:	9306      	str	r3, [sp, #24]
 8013b04:	f04f 0a00 	mov.w	sl, #0
 8013b08:	f04f 0b00 	mov.w	fp, #0
 8013b0c:	2600      	movs	r6, #0
 8013b0e:	eba8 0504 	sub.w	r5, r8, r4
 8013b12:	e0e4      	b.n	8013cde <__kernel_rem_pio2+0x4b6>
 8013b14:	f04f 0902 	mov.w	r9, #2
 8013b18:	e754      	b.n	80139c4 <__kernel_rem_pio2+0x19c>
 8013b1a:	f854 3b04 	ldr.w	r3, [r4], #4
 8013b1e:	bb0d      	cbnz	r5, 8013b64 <__kernel_rem_pio2+0x33c>
 8013b20:	b123      	cbz	r3, 8013b2c <__kernel_rem_pio2+0x304>
 8013b22:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8013b26:	f844 3c04 	str.w	r3, [r4, #-4]
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	3201      	adds	r2, #1
 8013b2e:	461d      	mov	r5, r3
 8013b30:	e74f      	b.n	80139d2 <__kernel_rem_pio2+0x1aa>
 8013b32:	bf00      	nop
 8013b34:	f3af 8000 	nop.w
	...
 8013b44:	3ff00000 	.word	0x3ff00000
 8013b48:	08014b18 	.word	0x08014b18
 8013b4c:	40200000 	.word	0x40200000
 8013b50:	3ff00000 	.word	0x3ff00000
 8013b54:	3e700000 	.word	0x3e700000
 8013b58:	41700000 	.word	0x41700000
 8013b5c:	3fe00000 	.word	0x3fe00000
 8013b60:	08014ad8 	.word	0x08014ad8
 8013b64:	1acb      	subs	r3, r1, r3
 8013b66:	e7de      	b.n	8013b26 <__kernel_rem_pio2+0x2fe>
 8013b68:	f108 32ff 	add.w	r2, r8, #4294967295
 8013b6c:	ab0c      	add	r3, sp, #48	@ 0x30
 8013b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b72:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013b76:	a90c      	add	r1, sp, #48	@ 0x30
 8013b78:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013b7c:	e737      	b.n	80139ee <__kernel_rem_pio2+0x1c6>
 8013b7e:	f108 32ff 	add.w	r2, r8, #4294967295
 8013b82:	ab0c      	add	r3, sp, #48	@ 0x30
 8013b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b88:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013b8c:	e7f3      	b.n	8013b76 <__kernel_rem_pio2+0x34e>
 8013b8e:	a90c      	add	r1, sp, #48	@ 0x30
 8013b90:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013b94:	3b01      	subs	r3, #1
 8013b96:	430a      	orrs	r2, r1
 8013b98:	e785      	b.n	8013aa6 <__kernel_rem_pio2+0x27e>
 8013b9a:	3401      	adds	r4, #1
 8013b9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013ba0:	2a00      	cmp	r2, #0
 8013ba2:	d0fa      	beq.n	8013b9a <__kernel_rem_pio2+0x372>
 8013ba4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ba6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013baa:	eb0d 0503 	add.w	r5, sp, r3
 8013bae:	9b06      	ldr	r3, [sp, #24]
 8013bb0:	aa20      	add	r2, sp, #128	@ 0x80
 8013bb2:	4443      	add	r3, r8
 8013bb4:	f108 0701 	add.w	r7, r8, #1
 8013bb8:	3d98      	subs	r5, #152	@ 0x98
 8013bba:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8013bbe:	4444      	add	r4, r8
 8013bc0:	42bc      	cmp	r4, r7
 8013bc2:	da04      	bge.n	8013bce <__kernel_rem_pio2+0x3a6>
 8013bc4:	46a0      	mov	r8, r4
 8013bc6:	e6a2      	b.n	801390e <__kernel_rem_pio2+0xe6>
 8013bc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013bca:	2401      	movs	r4, #1
 8013bcc:	e7e6      	b.n	8013b9c <__kernel_rem_pio2+0x374>
 8013bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bd0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8013bd4:	f7ec fc72 	bl	80004bc <__aeabi_i2d>
 8013bd8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8013e98 <__kernel_rem_pio2+0x670>
 8013bdc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013be0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013be4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013be8:	46b2      	mov	sl, r6
 8013bea:	f04f 0800 	mov.w	r8, #0
 8013bee:	9b05      	ldr	r3, [sp, #20]
 8013bf0:	4598      	cmp	r8, r3
 8013bf2:	dd05      	ble.n	8013c00 <__kernel_rem_pio2+0x3d8>
 8013bf4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013bf8:	3701      	adds	r7, #1
 8013bfa:	eca5 7b02 	vstmia	r5!, {d7}
 8013bfe:	e7df      	b.n	8013bc0 <__kernel_rem_pio2+0x398>
 8013c00:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8013c04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013c08:	f7ec fcc2 	bl	8000590 <__aeabi_dmul>
 8013c0c:	4602      	mov	r2, r0
 8013c0e:	460b      	mov	r3, r1
 8013c10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c14:	f7ec fb06 	bl	8000224 <__adddf3>
 8013c18:	f108 0801 	add.w	r8, r8, #1
 8013c1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c20:	e7e5      	b.n	8013bee <__kernel_rem_pio2+0x3c6>
 8013c22:	f1cb 0000 	rsb	r0, fp, #0
 8013c26:	ec47 6b10 	vmov	d0, r6, r7
 8013c2a:	f7ff fd1d 	bl	8013668 <scalbn>
 8013c2e:	ec55 4b10 	vmov	r4, r5, d0
 8013c32:	4b9b      	ldr	r3, [pc, #620]	@ (8013ea0 <__kernel_rem_pio2+0x678>)
 8013c34:	2200      	movs	r2, #0
 8013c36:	4620      	mov	r0, r4
 8013c38:	4629      	mov	r1, r5
 8013c3a:	f7ec ff2f 	bl	8000a9c <__aeabi_dcmpge>
 8013c3e:	b300      	cbz	r0, 8013c82 <__kernel_rem_pio2+0x45a>
 8013c40:	4b98      	ldr	r3, [pc, #608]	@ (8013ea4 <__kernel_rem_pio2+0x67c>)
 8013c42:	2200      	movs	r2, #0
 8013c44:	4620      	mov	r0, r4
 8013c46:	4629      	mov	r1, r5
 8013c48:	f7ec fca2 	bl	8000590 <__aeabi_dmul>
 8013c4c:	f7ec ff3a 	bl	8000ac4 <__aeabi_d2iz>
 8013c50:	4606      	mov	r6, r0
 8013c52:	f7ec fc33 	bl	80004bc <__aeabi_i2d>
 8013c56:	4b92      	ldr	r3, [pc, #584]	@ (8013ea0 <__kernel_rem_pio2+0x678>)
 8013c58:	2200      	movs	r2, #0
 8013c5a:	f7ec fc99 	bl	8000590 <__aeabi_dmul>
 8013c5e:	460b      	mov	r3, r1
 8013c60:	4602      	mov	r2, r0
 8013c62:	4629      	mov	r1, r5
 8013c64:	4620      	mov	r0, r4
 8013c66:	f7ec fadb 	bl	8000220 <__aeabi_dsub>
 8013c6a:	f7ec ff2b 	bl	8000ac4 <__aeabi_d2iz>
 8013c6e:	ab0c      	add	r3, sp, #48	@ 0x30
 8013c70:	f10b 0b18 	add.w	fp, fp, #24
 8013c74:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013c78:	f108 0801 	add.w	r8, r8, #1
 8013c7c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8013c80:	e720      	b.n	8013ac4 <__kernel_rem_pio2+0x29c>
 8013c82:	4620      	mov	r0, r4
 8013c84:	4629      	mov	r1, r5
 8013c86:	f7ec ff1d 	bl	8000ac4 <__aeabi_d2iz>
 8013c8a:	ab0c      	add	r3, sp, #48	@ 0x30
 8013c8c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013c90:	e718      	b.n	8013ac4 <__kernel_rem_pio2+0x29c>
 8013c92:	ab0c      	add	r3, sp, #48	@ 0x30
 8013c94:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013c98:	f7ec fc10 	bl	80004bc <__aeabi_i2d>
 8013c9c:	4622      	mov	r2, r4
 8013c9e:	462b      	mov	r3, r5
 8013ca0:	f7ec fc76 	bl	8000590 <__aeabi_dmul>
 8013ca4:	4652      	mov	r2, sl
 8013ca6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8013caa:	465b      	mov	r3, fp
 8013cac:	4620      	mov	r0, r4
 8013cae:	4629      	mov	r1, r5
 8013cb0:	f7ec fc6e 	bl	8000590 <__aeabi_dmul>
 8013cb4:	3e01      	subs	r6, #1
 8013cb6:	4604      	mov	r4, r0
 8013cb8:	460d      	mov	r5, r1
 8013cba:	e716      	b.n	8013aea <__kernel_rem_pio2+0x2c2>
 8013cbc:	9906      	ldr	r1, [sp, #24]
 8013cbe:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8013cc2:	9106      	str	r1, [sp, #24]
 8013cc4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8013cc8:	f7ec fc62 	bl	8000590 <__aeabi_dmul>
 8013ccc:	4602      	mov	r2, r0
 8013cce:	460b      	mov	r3, r1
 8013cd0:	4650      	mov	r0, sl
 8013cd2:	4659      	mov	r1, fp
 8013cd4:	f7ec faa6 	bl	8000224 <__adddf3>
 8013cd8:	3601      	adds	r6, #1
 8013cda:	4682      	mov	sl, r0
 8013cdc:	468b      	mov	fp, r1
 8013cde:	9b00      	ldr	r3, [sp, #0]
 8013ce0:	429e      	cmp	r6, r3
 8013ce2:	dc01      	bgt.n	8013ce8 <__kernel_rem_pio2+0x4c0>
 8013ce4:	42ae      	cmp	r6, r5
 8013ce6:	dde9      	ble.n	8013cbc <__kernel_rem_pio2+0x494>
 8013ce8:	ab48      	add	r3, sp, #288	@ 0x120
 8013cea:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013cee:	e9c5 ab00 	strd	sl, fp, [r5]
 8013cf2:	3c01      	subs	r4, #1
 8013cf4:	e6fd      	b.n	8013af2 <__kernel_rem_pio2+0x2ca>
 8013cf6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013cf8:	2b02      	cmp	r3, #2
 8013cfa:	dc0b      	bgt.n	8013d14 <__kernel_rem_pio2+0x4ec>
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	dc35      	bgt.n	8013d6c <__kernel_rem_pio2+0x544>
 8013d00:	d059      	beq.n	8013db6 <__kernel_rem_pio2+0x58e>
 8013d02:	9b02      	ldr	r3, [sp, #8]
 8013d04:	f003 0007 	and.w	r0, r3, #7
 8013d08:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8013d0c:	ecbd 8b02 	vpop	{d8}
 8013d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d14:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013d16:	2b03      	cmp	r3, #3
 8013d18:	d1f3      	bne.n	8013d02 <__kernel_rem_pio2+0x4da>
 8013d1a:	9b05      	ldr	r3, [sp, #20]
 8013d1c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013d20:	eb0d 0403 	add.w	r4, sp, r3
 8013d24:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8013d28:	4625      	mov	r5, r4
 8013d2a:	46c2      	mov	sl, r8
 8013d2c:	f1ba 0f00 	cmp.w	sl, #0
 8013d30:	dc69      	bgt.n	8013e06 <__kernel_rem_pio2+0x5de>
 8013d32:	4645      	mov	r5, r8
 8013d34:	2d01      	cmp	r5, #1
 8013d36:	f300 8087 	bgt.w	8013e48 <__kernel_rem_pio2+0x620>
 8013d3a:	9c05      	ldr	r4, [sp, #20]
 8013d3c:	ab48      	add	r3, sp, #288	@ 0x120
 8013d3e:	441c      	add	r4, r3
 8013d40:	2000      	movs	r0, #0
 8013d42:	2100      	movs	r1, #0
 8013d44:	f1b8 0f01 	cmp.w	r8, #1
 8013d48:	f300 809c 	bgt.w	8013e84 <__kernel_rem_pio2+0x65c>
 8013d4c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8013d50:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8013d54:	f1b9 0f00 	cmp.w	r9, #0
 8013d58:	f040 80a6 	bne.w	8013ea8 <__kernel_rem_pio2+0x680>
 8013d5c:	9b04      	ldr	r3, [sp, #16]
 8013d5e:	e9c3 5600 	strd	r5, r6, [r3]
 8013d62:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8013d66:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013d6a:	e7ca      	b.n	8013d02 <__kernel_rem_pio2+0x4da>
 8013d6c:	9d05      	ldr	r5, [sp, #20]
 8013d6e:	ab48      	add	r3, sp, #288	@ 0x120
 8013d70:	441d      	add	r5, r3
 8013d72:	4644      	mov	r4, r8
 8013d74:	2000      	movs	r0, #0
 8013d76:	2100      	movs	r1, #0
 8013d78:	2c00      	cmp	r4, #0
 8013d7a:	da35      	bge.n	8013de8 <__kernel_rem_pio2+0x5c0>
 8013d7c:	f1b9 0f00 	cmp.w	r9, #0
 8013d80:	d038      	beq.n	8013df4 <__kernel_rem_pio2+0x5cc>
 8013d82:	4602      	mov	r2, r0
 8013d84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013d88:	9c04      	ldr	r4, [sp, #16]
 8013d8a:	e9c4 2300 	strd	r2, r3, [r4]
 8013d8e:	4602      	mov	r2, r0
 8013d90:	460b      	mov	r3, r1
 8013d92:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8013d96:	f7ec fa43 	bl	8000220 <__aeabi_dsub>
 8013d9a:	ad4a      	add	r5, sp, #296	@ 0x128
 8013d9c:	2401      	movs	r4, #1
 8013d9e:	45a0      	cmp	r8, r4
 8013da0:	da2b      	bge.n	8013dfa <__kernel_rem_pio2+0x5d2>
 8013da2:	f1b9 0f00 	cmp.w	r9, #0
 8013da6:	d002      	beq.n	8013dae <__kernel_rem_pio2+0x586>
 8013da8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013dac:	4619      	mov	r1, r3
 8013dae:	9b04      	ldr	r3, [sp, #16]
 8013db0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013db4:	e7a5      	b.n	8013d02 <__kernel_rem_pio2+0x4da>
 8013db6:	9c05      	ldr	r4, [sp, #20]
 8013db8:	ab48      	add	r3, sp, #288	@ 0x120
 8013dba:	441c      	add	r4, r3
 8013dbc:	2000      	movs	r0, #0
 8013dbe:	2100      	movs	r1, #0
 8013dc0:	f1b8 0f00 	cmp.w	r8, #0
 8013dc4:	da09      	bge.n	8013dda <__kernel_rem_pio2+0x5b2>
 8013dc6:	f1b9 0f00 	cmp.w	r9, #0
 8013dca:	d002      	beq.n	8013dd2 <__kernel_rem_pio2+0x5aa>
 8013dcc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013dd0:	4619      	mov	r1, r3
 8013dd2:	9b04      	ldr	r3, [sp, #16]
 8013dd4:	e9c3 0100 	strd	r0, r1, [r3]
 8013dd8:	e793      	b.n	8013d02 <__kernel_rem_pio2+0x4da>
 8013dda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013dde:	f7ec fa21 	bl	8000224 <__adddf3>
 8013de2:	f108 38ff 	add.w	r8, r8, #4294967295
 8013de6:	e7eb      	b.n	8013dc0 <__kernel_rem_pio2+0x598>
 8013de8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8013dec:	f7ec fa1a 	bl	8000224 <__adddf3>
 8013df0:	3c01      	subs	r4, #1
 8013df2:	e7c1      	b.n	8013d78 <__kernel_rem_pio2+0x550>
 8013df4:	4602      	mov	r2, r0
 8013df6:	460b      	mov	r3, r1
 8013df8:	e7c6      	b.n	8013d88 <__kernel_rem_pio2+0x560>
 8013dfa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8013dfe:	f7ec fa11 	bl	8000224 <__adddf3>
 8013e02:	3401      	adds	r4, #1
 8013e04:	e7cb      	b.n	8013d9e <__kernel_rem_pio2+0x576>
 8013e06:	ed35 7b02 	vldmdb	r5!, {d7}
 8013e0a:	ed8d 7b00 	vstr	d7, [sp]
 8013e0e:	ed95 7b02 	vldr	d7, [r5, #8]
 8013e12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e16:	ec53 2b17 	vmov	r2, r3, d7
 8013e1a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013e1e:	f7ec fa01 	bl	8000224 <__adddf3>
 8013e22:	4602      	mov	r2, r0
 8013e24:	460b      	mov	r3, r1
 8013e26:	4606      	mov	r6, r0
 8013e28:	460f      	mov	r7, r1
 8013e2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e2e:	f7ec f9f7 	bl	8000220 <__aeabi_dsub>
 8013e32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013e36:	f7ec f9f5 	bl	8000224 <__adddf3>
 8013e3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013e3e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8013e42:	e9c5 6700 	strd	r6, r7, [r5]
 8013e46:	e771      	b.n	8013d2c <__kernel_rem_pio2+0x504>
 8013e48:	ed34 7b02 	vldmdb	r4!, {d7}
 8013e4c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8013e50:	ec51 0b17 	vmov	r0, r1, d7
 8013e54:	4652      	mov	r2, sl
 8013e56:	465b      	mov	r3, fp
 8013e58:	ed8d 7b00 	vstr	d7, [sp]
 8013e5c:	f7ec f9e2 	bl	8000224 <__adddf3>
 8013e60:	4602      	mov	r2, r0
 8013e62:	460b      	mov	r3, r1
 8013e64:	4606      	mov	r6, r0
 8013e66:	460f      	mov	r7, r1
 8013e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e6c:	f7ec f9d8 	bl	8000220 <__aeabi_dsub>
 8013e70:	4652      	mov	r2, sl
 8013e72:	465b      	mov	r3, fp
 8013e74:	f7ec f9d6 	bl	8000224 <__adddf3>
 8013e78:	3d01      	subs	r5, #1
 8013e7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013e7e:	e9c4 6700 	strd	r6, r7, [r4]
 8013e82:	e757      	b.n	8013d34 <__kernel_rem_pio2+0x50c>
 8013e84:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013e88:	f7ec f9cc 	bl	8000224 <__adddf3>
 8013e8c:	f108 38ff 	add.w	r8, r8, #4294967295
 8013e90:	e758      	b.n	8013d44 <__kernel_rem_pio2+0x51c>
 8013e92:	bf00      	nop
 8013e94:	f3af 8000 	nop.w
	...
 8013ea0:	41700000 	.word	0x41700000
 8013ea4:	3e700000 	.word	0x3e700000
 8013ea8:	9b04      	ldr	r3, [sp, #16]
 8013eaa:	9a04      	ldr	r2, [sp, #16]
 8013eac:	601d      	str	r5, [r3, #0]
 8013eae:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8013eb2:	605c      	str	r4, [r3, #4]
 8013eb4:	609f      	str	r7, [r3, #8]
 8013eb6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8013eba:	60d3      	str	r3, [r2, #12]
 8013ebc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013ec0:	6110      	str	r0, [r2, #16]
 8013ec2:	6153      	str	r3, [r2, #20]
 8013ec4:	e71d      	b.n	8013d02 <__kernel_rem_pio2+0x4da>
 8013ec6:	bf00      	nop

08013ec8 <__kernel_rem_pio2f>:
 8013ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ecc:	ed2d 8b04 	vpush	{d8-d9}
 8013ed0:	b0d9      	sub	sp, #356	@ 0x164
 8013ed2:	4690      	mov	r8, r2
 8013ed4:	9001      	str	r0, [sp, #4]
 8013ed6:	4ab6      	ldr	r2, [pc, #728]	@ (80141b0 <__kernel_rem_pio2f+0x2e8>)
 8013ed8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8013eda:	f118 0f04 	cmn.w	r8, #4
 8013ede:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8013ee2:	460f      	mov	r7, r1
 8013ee4:	f103 3bff 	add.w	fp, r3, #4294967295
 8013ee8:	db26      	blt.n	8013f38 <__kernel_rem_pio2f+0x70>
 8013eea:	f1b8 0203 	subs.w	r2, r8, #3
 8013eee:	bf48      	it	mi
 8013ef0:	f108 0204 	addmi.w	r2, r8, #4
 8013ef4:	10d2      	asrs	r2, r2, #3
 8013ef6:	1c55      	adds	r5, r2, #1
 8013ef8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013efa:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80141c0 <__kernel_rem_pio2f+0x2f8>
 8013efe:	00e8      	lsls	r0, r5, #3
 8013f00:	eba2 060b 	sub.w	r6, r2, fp
 8013f04:	9002      	str	r0, [sp, #8]
 8013f06:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8013f0a:	eb0a 0c0b 	add.w	ip, sl, fp
 8013f0e:	ac1c      	add	r4, sp, #112	@ 0x70
 8013f10:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8013f14:	2000      	movs	r0, #0
 8013f16:	4560      	cmp	r0, ip
 8013f18:	dd10      	ble.n	8013f3c <__kernel_rem_pio2f+0x74>
 8013f1a:	a91c      	add	r1, sp, #112	@ 0x70
 8013f1c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8013f20:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8013f24:	2600      	movs	r6, #0
 8013f26:	4556      	cmp	r6, sl
 8013f28:	dc24      	bgt.n	8013f74 <__kernel_rem_pio2f+0xac>
 8013f2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013f2e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80141c0 <__kernel_rem_pio2f+0x2f8>
 8013f32:	4684      	mov	ip, r0
 8013f34:	2400      	movs	r4, #0
 8013f36:	e016      	b.n	8013f66 <__kernel_rem_pio2f+0x9e>
 8013f38:	2200      	movs	r2, #0
 8013f3a:	e7dc      	b.n	8013ef6 <__kernel_rem_pio2f+0x2e>
 8013f3c:	42c6      	cmn	r6, r0
 8013f3e:	bf5d      	ittte	pl
 8013f40:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8013f44:	ee07 1a90 	vmovpl	s15, r1
 8013f48:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013f4c:	eef0 7a47 	vmovmi.f32	s15, s14
 8013f50:	ece4 7a01 	vstmia	r4!, {s15}
 8013f54:	3001      	adds	r0, #1
 8013f56:	e7de      	b.n	8013f16 <__kernel_rem_pio2f+0x4e>
 8013f58:	ecfe 6a01 	vldmia	lr!, {s13}
 8013f5c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8013f60:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013f64:	3401      	adds	r4, #1
 8013f66:	455c      	cmp	r4, fp
 8013f68:	ddf6      	ble.n	8013f58 <__kernel_rem_pio2f+0x90>
 8013f6a:	ece9 7a01 	vstmia	r9!, {s15}
 8013f6e:	3601      	adds	r6, #1
 8013f70:	3004      	adds	r0, #4
 8013f72:	e7d8      	b.n	8013f26 <__kernel_rem_pio2f+0x5e>
 8013f74:	a908      	add	r1, sp, #32
 8013f76:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013f7a:	9104      	str	r1, [sp, #16]
 8013f7c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013f7e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80141bc <__kernel_rem_pio2f+0x2f4>
 8013f82:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80141b8 <__kernel_rem_pio2f+0x2f0>
 8013f86:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013f8a:	9203      	str	r2, [sp, #12]
 8013f8c:	4654      	mov	r4, sl
 8013f8e:	00a2      	lsls	r2, r4, #2
 8013f90:	9205      	str	r2, [sp, #20]
 8013f92:	aa58      	add	r2, sp, #352	@ 0x160
 8013f94:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8013f98:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8013f9c:	a944      	add	r1, sp, #272	@ 0x110
 8013f9e:	aa08      	add	r2, sp, #32
 8013fa0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8013fa4:	4694      	mov	ip, r2
 8013fa6:	4626      	mov	r6, r4
 8013fa8:	2e00      	cmp	r6, #0
 8013faa:	dc4c      	bgt.n	8014046 <__kernel_rem_pio2f+0x17e>
 8013fac:	4628      	mov	r0, r5
 8013fae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013fb2:	f7ff fbd3 	bl	801375c <scalbnf>
 8013fb6:	eeb0 8a40 	vmov.f32	s16, s0
 8013fba:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8013fbe:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013fc2:	f000 fa65 	bl	8014490 <floorf>
 8013fc6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8013fca:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013fce:	2d00      	cmp	r5, #0
 8013fd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013fd4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013fd8:	ee17 9a90 	vmov	r9, s15
 8013fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013fe0:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013fe4:	dd41      	ble.n	801406a <__kernel_rem_pio2f+0x1a2>
 8013fe6:	f104 3cff 	add.w	ip, r4, #4294967295
 8013fea:	a908      	add	r1, sp, #32
 8013fec:	f1c5 0e08 	rsb	lr, r5, #8
 8013ff0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8013ff4:	fa46 f00e 	asr.w	r0, r6, lr
 8013ff8:	4481      	add	r9, r0
 8013ffa:	fa00 f00e 	lsl.w	r0, r0, lr
 8013ffe:	1a36      	subs	r6, r6, r0
 8014000:	f1c5 0007 	rsb	r0, r5, #7
 8014004:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8014008:	4106      	asrs	r6, r0
 801400a:	2e00      	cmp	r6, #0
 801400c:	dd3c      	ble.n	8014088 <__kernel_rem_pio2f+0x1c0>
 801400e:	f04f 0e00 	mov.w	lr, #0
 8014012:	f109 0901 	add.w	r9, r9, #1
 8014016:	4670      	mov	r0, lr
 8014018:	4574      	cmp	r4, lr
 801401a:	dc68      	bgt.n	80140ee <__kernel_rem_pio2f+0x226>
 801401c:	2d00      	cmp	r5, #0
 801401e:	dd03      	ble.n	8014028 <__kernel_rem_pio2f+0x160>
 8014020:	2d01      	cmp	r5, #1
 8014022:	d074      	beq.n	801410e <__kernel_rem_pio2f+0x246>
 8014024:	2d02      	cmp	r5, #2
 8014026:	d07d      	beq.n	8014124 <__kernel_rem_pio2f+0x25c>
 8014028:	2e02      	cmp	r6, #2
 801402a:	d12d      	bne.n	8014088 <__kernel_rem_pio2f+0x1c0>
 801402c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014030:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014034:	b340      	cbz	r0, 8014088 <__kernel_rem_pio2f+0x1c0>
 8014036:	4628      	mov	r0, r5
 8014038:	9306      	str	r3, [sp, #24]
 801403a:	f7ff fb8f 	bl	801375c <scalbnf>
 801403e:	9b06      	ldr	r3, [sp, #24]
 8014040:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014044:	e020      	b.n	8014088 <__kernel_rem_pio2f+0x1c0>
 8014046:	ee60 7a28 	vmul.f32	s15, s0, s17
 801404a:	3e01      	subs	r6, #1
 801404c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014054:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8014058:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801405c:	ecac 0a01 	vstmia	ip!, {s0}
 8014060:	ed30 0a01 	vldmdb	r0!, {s0}
 8014064:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014068:	e79e      	b.n	8013fa8 <__kernel_rem_pio2f+0xe0>
 801406a:	d105      	bne.n	8014078 <__kernel_rem_pio2f+0x1b0>
 801406c:	1e60      	subs	r0, r4, #1
 801406e:	a908      	add	r1, sp, #32
 8014070:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8014074:	11f6      	asrs	r6, r6, #7
 8014076:	e7c8      	b.n	801400a <__kernel_rem_pio2f+0x142>
 8014078:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801407c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014084:	da31      	bge.n	80140ea <__kernel_rem_pio2f+0x222>
 8014086:	2600      	movs	r6, #0
 8014088:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801408c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014090:	f040 8098 	bne.w	80141c4 <__kernel_rem_pio2f+0x2fc>
 8014094:	1e60      	subs	r0, r4, #1
 8014096:	2200      	movs	r2, #0
 8014098:	4550      	cmp	r0, sl
 801409a:	da4b      	bge.n	8014134 <__kernel_rem_pio2f+0x26c>
 801409c:	2a00      	cmp	r2, #0
 801409e:	d065      	beq.n	801416c <__kernel_rem_pio2f+0x2a4>
 80140a0:	3c01      	subs	r4, #1
 80140a2:	ab08      	add	r3, sp, #32
 80140a4:	3d08      	subs	r5, #8
 80140a6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d0f8      	beq.n	80140a0 <__kernel_rem_pio2f+0x1d8>
 80140ae:	4628      	mov	r0, r5
 80140b0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80140b4:	f7ff fb52 	bl	801375c <scalbnf>
 80140b8:	1c63      	adds	r3, r4, #1
 80140ba:	aa44      	add	r2, sp, #272	@ 0x110
 80140bc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80141bc <__kernel_rem_pio2f+0x2f4>
 80140c0:	0099      	lsls	r1, r3, #2
 80140c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80140c6:	4623      	mov	r3, r4
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	f280 80a9 	bge.w	8014220 <__kernel_rem_pio2f+0x358>
 80140ce:	4623      	mov	r3, r4
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	f2c0 80c7 	blt.w	8014264 <__kernel_rem_pio2f+0x39c>
 80140d6:	aa44      	add	r2, sp, #272	@ 0x110
 80140d8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80140dc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80141b4 <__kernel_rem_pio2f+0x2ec>
 80140e0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80141c0 <__kernel_rem_pio2f+0x2f8>
 80140e4:	2000      	movs	r0, #0
 80140e6:	1ae2      	subs	r2, r4, r3
 80140e8:	e0b1      	b.n	801424e <__kernel_rem_pio2f+0x386>
 80140ea:	2602      	movs	r6, #2
 80140ec:	e78f      	b.n	801400e <__kernel_rem_pio2f+0x146>
 80140ee:	f852 1b04 	ldr.w	r1, [r2], #4
 80140f2:	b948      	cbnz	r0, 8014108 <__kernel_rem_pio2f+0x240>
 80140f4:	b121      	cbz	r1, 8014100 <__kernel_rem_pio2f+0x238>
 80140f6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80140fa:	f842 1c04 	str.w	r1, [r2, #-4]
 80140fe:	2101      	movs	r1, #1
 8014100:	f10e 0e01 	add.w	lr, lr, #1
 8014104:	4608      	mov	r0, r1
 8014106:	e787      	b.n	8014018 <__kernel_rem_pio2f+0x150>
 8014108:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801410c:	e7f5      	b.n	80140fa <__kernel_rem_pio2f+0x232>
 801410e:	f104 3cff 	add.w	ip, r4, #4294967295
 8014112:	aa08      	add	r2, sp, #32
 8014114:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8014118:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801411c:	a908      	add	r1, sp, #32
 801411e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8014122:	e781      	b.n	8014028 <__kernel_rem_pio2f+0x160>
 8014124:	f104 3cff 	add.w	ip, r4, #4294967295
 8014128:	aa08      	add	r2, sp, #32
 801412a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801412e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8014132:	e7f3      	b.n	801411c <__kernel_rem_pio2f+0x254>
 8014134:	a908      	add	r1, sp, #32
 8014136:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801413a:	3801      	subs	r0, #1
 801413c:	430a      	orrs	r2, r1
 801413e:	e7ab      	b.n	8014098 <__kernel_rem_pio2f+0x1d0>
 8014140:	3201      	adds	r2, #1
 8014142:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8014146:	2e00      	cmp	r6, #0
 8014148:	d0fa      	beq.n	8014140 <__kernel_rem_pio2f+0x278>
 801414a:	9905      	ldr	r1, [sp, #20]
 801414c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8014150:	eb0d 0001 	add.w	r0, sp, r1
 8014154:	18e6      	adds	r6, r4, r3
 8014156:	a91c      	add	r1, sp, #112	@ 0x70
 8014158:	f104 0c01 	add.w	ip, r4, #1
 801415c:	384c      	subs	r0, #76	@ 0x4c
 801415e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8014162:	4422      	add	r2, r4
 8014164:	4562      	cmp	r2, ip
 8014166:	da04      	bge.n	8014172 <__kernel_rem_pio2f+0x2aa>
 8014168:	4614      	mov	r4, r2
 801416a:	e710      	b.n	8013f8e <__kernel_rem_pio2f+0xc6>
 801416c:	9804      	ldr	r0, [sp, #16]
 801416e:	2201      	movs	r2, #1
 8014170:	e7e7      	b.n	8014142 <__kernel_rem_pio2f+0x27a>
 8014172:	9903      	ldr	r1, [sp, #12]
 8014174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8014178:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801417c:	9105      	str	r1, [sp, #20]
 801417e:	ee07 1a90 	vmov	s15, r1
 8014182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014186:	2400      	movs	r4, #0
 8014188:	ece6 7a01 	vstmia	r6!, {s15}
 801418c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80141c0 <__kernel_rem_pio2f+0x2f8>
 8014190:	46b1      	mov	r9, r6
 8014192:	455c      	cmp	r4, fp
 8014194:	dd04      	ble.n	80141a0 <__kernel_rem_pio2f+0x2d8>
 8014196:	ece0 7a01 	vstmia	r0!, {s15}
 801419a:	f10c 0c01 	add.w	ip, ip, #1
 801419e:	e7e1      	b.n	8014164 <__kernel_rem_pio2f+0x29c>
 80141a0:	ecfe 6a01 	vldmia	lr!, {s13}
 80141a4:	ed39 7a01 	vldmdb	r9!, {s14}
 80141a8:	3401      	adds	r4, #1
 80141aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80141ae:	e7f0      	b.n	8014192 <__kernel_rem_pio2f+0x2ca>
 80141b0:	08014b54 	.word	0x08014b54
 80141b4:	08014b28 	.word	0x08014b28
 80141b8:	43800000 	.word	0x43800000
 80141bc:	3b800000 	.word	0x3b800000
 80141c0:	00000000 	.word	0x00000000
 80141c4:	9b02      	ldr	r3, [sp, #8]
 80141c6:	eeb0 0a48 	vmov.f32	s0, s16
 80141ca:	eba3 0008 	sub.w	r0, r3, r8
 80141ce:	f7ff fac5 	bl	801375c <scalbnf>
 80141d2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80141b8 <__kernel_rem_pio2f+0x2f0>
 80141d6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80141da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141de:	db19      	blt.n	8014214 <__kernel_rem_pio2f+0x34c>
 80141e0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80141bc <__kernel_rem_pio2f+0x2f4>
 80141e4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80141e8:	aa08      	add	r2, sp, #32
 80141ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141ee:	3508      	adds	r5, #8
 80141f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141f4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80141f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014200:	ee10 3a10 	vmov	r3, s0
 8014204:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014208:	ee17 3a90 	vmov	r3, s15
 801420c:	3401      	adds	r4, #1
 801420e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014212:	e74c      	b.n	80140ae <__kernel_rem_pio2f+0x1e6>
 8014214:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014218:	aa08      	add	r2, sp, #32
 801421a:	ee10 3a10 	vmov	r3, s0
 801421e:	e7f6      	b.n	801420e <__kernel_rem_pio2f+0x346>
 8014220:	a808      	add	r0, sp, #32
 8014222:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8014226:	9001      	str	r0, [sp, #4]
 8014228:	ee07 0a90 	vmov	s15, r0
 801422c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014230:	3b01      	subs	r3, #1
 8014232:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014236:	ee20 0a07 	vmul.f32	s0, s0, s14
 801423a:	ed62 7a01 	vstmdb	r2!, {s15}
 801423e:	e743      	b.n	80140c8 <__kernel_rem_pio2f+0x200>
 8014240:	ecfc 6a01 	vldmia	ip!, {s13}
 8014244:	ecb5 7a01 	vldmia	r5!, {s14}
 8014248:	eee6 7a87 	vfma.f32	s15, s13, s14
 801424c:	3001      	adds	r0, #1
 801424e:	4550      	cmp	r0, sl
 8014250:	dc01      	bgt.n	8014256 <__kernel_rem_pio2f+0x38e>
 8014252:	4290      	cmp	r0, r2
 8014254:	ddf4      	ble.n	8014240 <__kernel_rem_pio2f+0x378>
 8014256:	a858      	add	r0, sp, #352	@ 0x160
 8014258:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801425c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8014260:	3b01      	subs	r3, #1
 8014262:	e735      	b.n	80140d0 <__kernel_rem_pio2f+0x208>
 8014264:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8014266:	2b02      	cmp	r3, #2
 8014268:	dc09      	bgt.n	801427e <__kernel_rem_pio2f+0x3b6>
 801426a:	2b00      	cmp	r3, #0
 801426c:	dc27      	bgt.n	80142be <__kernel_rem_pio2f+0x3f6>
 801426e:	d040      	beq.n	80142f2 <__kernel_rem_pio2f+0x42a>
 8014270:	f009 0007 	and.w	r0, r9, #7
 8014274:	b059      	add	sp, #356	@ 0x164
 8014276:	ecbd 8b04 	vpop	{d8-d9}
 801427a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801427e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8014280:	2b03      	cmp	r3, #3
 8014282:	d1f5      	bne.n	8014270 <__kernel_rem_pio2f+0x3a8>
 8014284:	aa30      	add	r2, sp, #192	@ 0xc0
 8014286:	1f0b      	subs	r3, r1, #4
 8014288:	4413      	add	r3, r2
 801428a:	461a      	mov	r2, r3
 801428c:	4620      	mov	r0, r4
 801428e:	2800      	cmp	r0, #0
 8014290:	dc50      	bgt.n	8014334 <__kernel_rem_pio2f+0x46c>
 8014292:	4622      	mov	r2, r4
 8014294:	2a01      	cmp	r2, #1
 8014296:	dc5d      	bgt.n	8014354 <__kernel_rem_pio2f+0x48c>
 8014298:	ab30      	add	r3, sp, #192	@ 0xc0
 801429a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80141c0 <__kernel_rem_pio2f+0x2f8>
 801429e:	440b      	add	r3, r1
 80142a0:	2c01      	cmp	r4, #1
 80142a2:	dc67      	bgt.n	8014374 <__kernel_rem_pio2f+0x4ac>
 80142a4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80142a8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80142ac:	2e00      	cmp	r6, #0
 80142ae:	d167      	bne.n	8014380 <__kernel_rem_pio2f+0x4b8>
 80142b0:	edc7 6a00 	vstr	s13, [r7]
 80142b4:	ed87 7a01 	vstr	s14, [r7, #4]
 80142b8:	edc7 7a02 	vstr	s15, [r7, #8]
 80142bc:	e7d8      	b.n	8014270 <__kernel_rem_pio2f+0x3a8>
 80142be:	ab30      	add	r3, sp, #192	@ 0xc0
 80142c0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80141c0 <__kernel_rem_pio2f+0x2f8>
 80142c4:	440b      	add	r3, r1
 80142c6:	4622      	mov	r2, r4
 80142c8:	2a00      	cmp	r2, #0
 80142ca:	da24      	bge.n	8014316 <__kernel_rem_pio2f+0x44e>
 80142cc:	b34e      	cbz	r6, 8014322 <__kernel_rem_pio2f+0x45a>
 80142ce:	eef1 7a47 	vneg.f32	s15, s14
 80142d2:	edc7 7a00 	vstr	s15, [r7]
 80142d6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80142da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80142de:	aa31      	add	r2, sp, #196	@ 0xc4
 80142e0:	2301      	movs	r3, #1
 80142e2:	429c      	cmp	r4, r3
 80142e4:	da20      	bge.n	8014328 <__kernel_rem_pio2f+0x460>
 80142e6:	b10e      	cbz	r6, 80142ec <__kernel_rem_pio2f+0x424>
 80142e8:	eef1 7a67 	vneg.f32	s15, s15
 80142ec:	edc7 7a01 	vstr	s15, [r7, #4]
 80142f0:	e7be      	b.n	8014270 <__kernel_rem_pio2f+0x3a8>
 80142f2:	ab30      	add	r3, sp, #192	@ 0xc0
 80142f4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80141c0 <__kernel_rem_pio2f+0x2f8>
 80142f8:	440b      	add	r3, r1
 80142fa:	2c00      	cmp	r4, #0
 80142fc:	da05      	bge.n	801430a <__kernel_rem_pio2f+0x442>
 80142fe:	b10e      	cbz	r6, 8014304 <__kernel_rem_pio2f+0x43c>
 8014300:	eef1 7a67 	vneg.f32	s15, s15
 8014304:	edc7 7a00 	vstr	s15, [r7]
 8014308:	e7b2      	b.n	8014270 <__kernel_rem_pio2f+0x3a8>
 801430a:	ed33 7a01 	vldmdb	r3!, {s14}
 801430e:	3c01      	subs	r4, #1
 8014310:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014314:	e7f1      	b.n	80142fa <__kernel_rem_pio2f+0x432>
 8014316:	ed73 7a01 	vldmdb	r3!, {s15}
 801431a:	3a01      	subs	r2, #1
 801431c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014320:	e7d2      	b.n	80142c8 <__kernel_rem_pio2f+0x400>
 8014322:	eef0 7a47 	vmov.f32	s15, s14
 8014326:	e7d4      	b.n	80142d2 <__kernel_rem_pio2f+0x40a>
 8014328:	ecb2 7a01 	vldmia	r2!, {s14}
 801432c:	3301      	adds	r3, #1
 801432e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014332:	e7d6      	b.n	80142e2 <__kernel_rem_pio2f+0x41a>
 8014334:	ed72 7a01 	vldmdb	r2!, {s15}
 8014338:	edd2 6a01 	vldr	s13, [r2, #4]
 801433c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014340:	3801      	subs	r0, #1
 8014342:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014346:	ed82 7a00 	vstr	s14, [r2]
 801434a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801434e:	edc2 7a01 	vstr	s15, [r2, #4]
 8014352:	e79c      	b.n	801428e <__kernel_rem_pio2f+0x3c6>
 8014354:	ed73 7a01 	vldmdb	r3!, {s15}
 8014358:	edd3 6a01 	vldr	s13, [r3, #4]
 801435c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014360:	3a01      	subs	r2, #1
 8014362:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014366:	ed83 7a00 	vstr	s14, [r3]
 801436a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801436e:	edc3 7a01 	vstr	s15, [r3, #4]
 8014372:	e78f      	b.n	8014294 <__kernel_rem_pio2f+0x3cc>
 8014374:	ed33 7a01 	vldmdb	r3!, {s14}
 8014378:	3c01      	subs	r4, #1
 801437a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801437e:	e78f      	b.n	80142a0 <__kernel_rem_pio2f+0x3d8>
 8014380:	eef1 6a66 	vneg.f32	s13, s13
 8014384:	eeb1 7a47 	vneg.f32	s14, s14
 8014388:	edc7 6a00 	vstr	s13, [r7]
 801438c:	ed87 7a01 	vstr	s14, [r7, #4]
 8014390:	eef1 7a67 	vneg.f32	s15, s15
 8014394:	e790      	b.n	80142b8 <__kernel_rem_pio2f+0x3f0>
 8014396:	bf00      	nop

08014398 <floor>:
 8014398:	ec51 0b10 	vmov	r0, r1, d0
 801439c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80143a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143a4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80143a8:	2e13      	cmp	r6, #19
 80143aa:	460c      	mov	r4, r1
 80143ac:	4605      	mov	r5, r0
 80143ae:	4680      	mov	r8, r0
 80143b0:	dc34      	bgt.n	801441c <floor+0x84>
 80143b2:	2e00      	cmp	r6, #0
 80143b4:	da17      	bge.n	80143e6 <floor+0x4e>
 80143b6:	a332      	add	r3, pc, #200	@ (adr r3, 8014480 <floor+0xe8>)
 80143b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143bc:	f7eb ff32 	bl	8000224 <__adddf3>
 80143c0:	2200      	movs	r2, #0
 80143c2:	2300      	movs	r3, #0
 80143c4:	f7ec fb74 	bl	8000ab0 <__aeabi_dcmpgt>
 80143c8:	b150      	cbz	r0, 80143e0 <floor+0x48>
 80143ca:	2c00      	cmp	r4, #0
 80143cc:	da55      	bge.n	801447a <floor+0xe2>
 80143ce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80143d2:	432c      	orrs	r4, r5
 80143d4:	2500      	movs	r5, #0
 80143d6:	42ac      	cmp	r4, r5
 80143d8:	4c2b      	ldr	r4, [pc, #172]	@ (8014488 <floor+0xf0>)
 80143da:	bf08      	it	eq
 80143dc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80143e0:	4621      	mov	r1, r4
 80143e2:	4628      	mov	r0, r5
 80143e4:	e023      	b.n	801442e <floor+0x96>
 80143e6:	4f29      	ldr	r7, [pc, #164]	@ (801448c <floor+0xf4>)
 80143e8:	4137      	asrs	r7, r6
 80143ea:	ea01 0307 	and.w	r3, r1, r7
 80143ee:	4303      	orrs	r3, r0
 80143f0:	d01d      	beq.n	801442e <floor+0x96>
 80143f2:	a323      	add	r3, pc, #140	@ (adr r3, 8014480 <floor+0xe8>)
 80143f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143f8:	f7eb ff14 	bl	8000224 <__adddf3>
 80143fc:	2200      	movs	r2, #0
 80143fe:	2300      	movs	r3, #0
 8014400:	f7ec fb56 	bl	8000ab0 <__aeabi_dcmpgt>
 8014404:	2800      	cmp	r0, #0
 8014406:	d0eb      	beq.n	80143e0 <floor+0x48>
 8014408:	2c00      	cmp	r4, #0
 801440a:	bfbe      	ittt	lt
 801440c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8014410:	4133      	asrlt	r3, r6
 8014412:	18e4      	addlt	r4, r4, r3
 8014414:	ea24 0407 	bic.w	r4, r4, r7
 8014418:	2500      	movs	r5, #0
 801441a:	e7e1      	b.n	80143e0 <floor+0x48>
 801441c:	2e33      	cmp	r6, #51	@ 0x33
 801441e:	dd0a      	ble.n	8014436 <floor+0x9e>
 8014420:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8014424:	d103      	bne.n	801442e <floor+0x96>
 8014426:	4602      	mov	r2, r0
 8014428:	460b      	mov	r3, r1
 801442a:	f7eb fefb 	bl	8000224 <__adddf3>
 801442e:	ec41 0b10 	vmov	d0, r0, r1
 8014432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014436:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801443a:	f04f 37ff 	mov.w	r7, #4294967295
 801443e:	40df      	lsrs	r7, r3
 8014440:	4207      	tst	r7, r0
 8014442:	d0f4      	beq.n	801442e <floor+0x96>
 8014444:	a30e      	add	r3, pc, #56	@ (adr r3, 8014480 <floor+0xe8>)
 8014446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801444a:	f7eb feeb 	bl	8000224 <__adddf3>
 801444e:	2200      	movs	r2, #0
 8014450:	2300      	movs	r3, #0
 8014452:	f7ec fb2d 	bl	8000ab0 <__aeabi_dcmpgt>
 8014456:	2800      	cmp	r0, #0
 8014458:	d0c2      	beq.n	80143e0 <floor+0x48>
 801445a:	2c00      	cmp	r4, #0
 801445c:	da0a      	bge.n	8014474 <floor+0xdc>
 801445e:	2e14      	cmp	r6, #20
 8014460:	d101      	bne.n	8014466 <floor+0xce>
 8014462:	3401      	adds	r4, #1
 8014464:	e006      	b.n	8014474 <floor+0xdc>
 8014466:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801446a:	2301      	movs	r3, #1
 801446c:	40b3      	lsls	r3, r6
 801446e:	441d      	add	r5, r3
 8014470:	4545      	cmp	r5, r8
 8014472:	d3f6      	bcc.n	8014462 <floor+0xca>
 8014474:	ea25 0507 	bic.w	r5, r5, r7
 8014478:	e7b2      	b.n	80143e0 <floor+0x48>
 801447a:	2500      	movs	r5, #0
 801447c:	462c      	mov	r4, r5
 801447e:	e7af      	b.n	80143e0 <floor+0x48>
 8014480:	8800759c 	.word	0x8800759c
 8014484:	7e37e43c 	.word	0x7e37e43c
 8014488:	bff00000 	.word	0xbff00000
 801448c:	000fffff 	.word	0x000fffff

08014490 <floorf>:
 8014490:	ee10 3a10 	vmov	r3, s0
 8014494:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014498:	3a7f      	subs	r2, #127	@ 0x7f
 801449a:	2a16      	cmp	r2, #22
 801449c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80144a0:	dc2b      	bgt.n	80144fa <floorf+0x6a>
 80144a2:	2a00      	cmp	r2, #0
 80144a4:	da12      	bge.n	80144cc <floorf+0x3c>
 80144a6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801450c <floorf+0x7c>
 80144aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80144ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80144b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144b6:	dd06      	ble.n	80144c6 <floorf+0x36>
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	da24      	bge.n	8014506 <floorf+0x76>
 80144bc:	2900      	cmp	r1, #0
 80144be:	4b14      	ldr	r3, [pc, #80]	@ (8014510 <floorf+0x80>)
 80144c0:	bf08      	it	eq
 80144c2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80144c6:	ee00 3a10 	vmov	s0, r3
 80144ca:	4770      	bx	lr
 80144cc:	4911      	ldr	r1, [pc, #68]	@ (8014514 <floorf+0x84>)
 80144ce:	4111      	asrs	r1, r2
 80144d0:	420b      	tst	r3, r1
 80144d2:	d0fa      	beq.n	80144ca <floorf+0x3a>
 80144d4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801450c <floorf+0x7c>
 80144d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80144dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80144e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e4:	ddef      	ble.n	80144c6 <floorf+0x36>
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	bfbe      	ittt	lt
 80144ea:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80144ee:	fa40 f202 	asrlt.w	r2, r0, r2
 80144f2:	189b      	addlt	r3, r3, r2
 80144f4:	ea23 0301 	bic.w	r3, r3, r1
 80144f8:	e7e5      	b.n	80144c6 <floorf+0x36>
 80144fa:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80144fe:	d3e4      	bcc.n	80144ca <floorf+0x3a>
 8014500:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014504:	4770      	bx	lr
 8014506:	2300      	movs	r3, #0
 8014508:	e7dd      	b.n	80144c6 <floorf+0x36>
 801450a:	bf00      	nop
 801450c:	7149f2ca 	.word	0x7149f2ca
 8014510:	bf800000 	.word	0xbf800000
 8014514:	007fffff 	.word	0x007fffff

08014518 <_init>:
 8014518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801451a:	bf00      	nop
 801451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801451e:	bc08      	pop	{r3}
 8014520:	469e      	mov	lr, r3
 8014522:	4770      	bx	lr

08014524 <_fini>:
 8014524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014526:	bf00      	nop
 8014528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801452a:	bc08      	pop	{r3}
 801452c:	469e      	mov	lr, r3
 801452e:	4770      	bx	lr
