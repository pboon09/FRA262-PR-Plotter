
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012248  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  08012420  08012420  00013420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012a80  08012a80  0001418c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012a80  08012a80  00013a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012a88  08012a88  0001418c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012a88  08012a88  00013a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012a8c  08012a8c  00013a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  08012a90  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000218c  2000018c  08012c1c  0001418c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002318  08012c1c  00014318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001418c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c178  00000000  00000000  000141bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005582  00000000  00000000  00040334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c70  00000000  00000000  000458b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001619  00000000  00000000  00047528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db4e  00000000  00000000  00048b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b1b8  00000000  00000000  0007668f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119b54  00000000  00000000  000a1847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bb39b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081e4  00000000  00000000  001bb3e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c35c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000018c 	.word	0x2000018c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08012408 	.word	0x08012408

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000190 	.word	0x20000190
 8000214:	08012408 	.word	0x08012408

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f008 fe58 	bl	8009c94 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f007 ff41 	bl	8008e78 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe1c 	bl	8001d78 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PID_CONTROLLER_Reset>:

void PID_CONTROLLER_Reset(PID_CONTROLLER *controller) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    controller->ek_1 = 0.0f;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
    controller->ek_2 = 0.0f;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
    controller->u = 0.0f;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
    controller->prev_Kp = controller->Kp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
    controller->prev_Ki = controller->Ki;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
    controller->prev_Kd = controller->Kd;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3328      	adds	r3, #40	@ 0x28
 80013a0:	88fa      	ldrh	r2, [r7, #6]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 ffdb 	bl	8003360 <PWM_init>
	mdxx->GPIOx = GPIOx;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8b3a      	ldrh	r2, [r7, #24]
 80013b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013d4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d15f      	bne.n	80014a2 <MDXX_set_range+0xda>
		if (duty == 0) {
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d115      	bne.n	800141c <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3310      	adds	r3, #16
 80013f4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001574 <MDXX_set_range+0x1ac>
 80013f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 f8d7 	bl	80035b0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3328      	adds	r3, #40	@ 0x28
 8001406:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001574 <MDXX_set_range+0x1ac>
 800140a:	ed97 0a02 	vldr	s0, [r7, #8]
 800140e:	4618      	mov	r0, r3
 8001410:	f002 f8ce 	bl	80035b0 <PWM_write_range>
			mdxx->cmd = 0;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800141a:	e0a6      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 800141c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd1a      	ble.n	8001460 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3310      	adds	r3, #16
 800142e:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001574 <MDXX_set_range+0x1ac>
 8001432:	ed97 0a02 	vldr	s0, [r7, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f002 f8ba 	bl	80035b0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3328      	adds	r3, #40	@ 0x28
 8001440:	edd7 0a01 	vldr	s1, [r7, #4]
 8001444:	ed97 0a02 	vldr	s0, [r7, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f002 f8b1 	bl	80035b0 <PWM_write_range>
			mdxx->cmd = duty;
 800144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001456:	ee17 2a90 	vmov	r2, s15
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145e:	e084      	b.n	800156a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3310      	adds	r3, #16
 8001464:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001578 <MDXX_set_range+0x1b0>
 8001468:	ed97 0a02 	vldr	s0, [r7, #8]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 f89f 	bl	80035b0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3328      	adds	r3, #40	@ 0x28
 8001476:	edd7 7a01 	vldr	s15, [r7, #4]
 800147a:	eef0 7ae7 	vabs.f32	s15, s15
 800147e:	eef0 0a67 	vmov.f32	s1, s15
 8001482:	ed97 0a02 	vldr	s0, [r7, #8]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 f892 	bl	80035b0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001490:	eef0 7ae7 	vabs.f32	s15, s15
 8001494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001498:	ee17 2a90 	vmov	r2, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e063      	b.n	800156a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d15e      	bne.n	800156a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80014ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d115      	bne.n	80014e6 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	f009 fb2a 	bl	800ab20 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3328      	adds	r3, #40	@ 0x28
 80014d0:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001574 <MDXX_set_range+0x1ac>
 80014d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 f869 	bl	80035b0 <PWM_write_range>
			mdxx->cmd = 0;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e041      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd1a      	ble.n	800152a <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	f009 fb0d 	bl	800ab20 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3328      	adds	r3, #40	@ 0x28
 800150a:	edd7 0a01 	vldr	s1, [r7, #4]
 800150e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f002 f84c 	bl	80035b0 <PWM_write_range>
			mdxx->cmd = duty;
 8001518:	edd7 7a01 	vldr	s15, [r7, #4]
 800151c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001520:	ee17 2a90 	vmov	r2, s15
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001528:	e01f      	b.n	800156a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f009 faf2 	bl	800ab20 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3328      	adds	r3, #40	@ 0x28
 8001540:	edd7 7a01 	vldr	s15, [r7, #4]
 8001544:	eef0 7ae7 	vabs.f32	s15, s15
 8001548:	eef0 0a67 	vmov.f32	s1, s15
 800154c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f002 f82d 	bl	80035b0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001556:	edd7 7a01 	vldr	s15, [r7, #4]
 800155a:	eef0 7ae7 	vabs.f32	s15, s15
 800155e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001562:	ee17 2a90 	vmov	r2, s15
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	00000000 	.word	0x00000000
 8001578:	42c80000 	.word	0x42c80000

0800157c <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	ed2d 8b02 	vpush	{d8}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015b8:	f7fe ffea 	bl	8000590 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	461d      	mov	r5, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015d4:	f7fe ffdc 	bl	8000590 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe fe20 	bl	8000224 <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015f4:	f7ff f8f6 	bl	80007e4 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff faa8 	bl	8000b54 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 8001608:	ed97 7a00 	vldr	s14, [r7]
 800160c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa96 	bl	8000b54 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eeb1 8a67 	vneg.f32	s16, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa89 	bl	8000b54 <__aeabi_d2f>
 8001642:	4604      	mov	r4, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fa80 	bl	8000b54 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef1 8a67 	vneg.f32	s17, s15
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa73 	bl	8000b54 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	ee02 3a10 	vmov	s4, r3
 8001674:	eef0 1a68 	vmov.f32	s3, s17
 8001678:	ee01 4a10 	vmov	s2, r4
 800167c:	eef0 0a48 	vmov.f32	s1, s16
 8001680:	ed97 0a02 	vldr	s0, [r7, #8]
 8001684:	f000 fb78 	bl	8001d78 <mapf>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
}
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	ecbd 8b02 	vpop	{d8}
 8001698:	bdb0      	pop	{r4, r5, r7, pc}

0800169a <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	605a      	str	r2, [r3, #4]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qdd, float s){
 80016c0:	b5b0      	push	{r4, r5, r7, lr}
 80016c2:	ed2d 8b02 	vpush	{d8}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80016d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80016d4:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s - 0.17);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ec:	ee17 0a90 	vmov	r0, s15
 80016f0:	f7fe fef6 	bl	80004e0 <__aeabi_f2d>
 80016f4:	4604      	mov	r4, r0
 80016f6:	460d      	mov	r5, r1
 80016f8:	68b8      	ldr	r0, [r7, #8]
 80016fa:	f7fe fef1 	bl	80004e0 <__aeabi_f2d>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	ec43 2b10 	vmov	d0, r2, r3
 8001706:	f00e ffcb 	bl	80106a0 <sin>
 800170a:	ec53 2b10 	vmov	r2, r3, d0
 800170e:	4620      	mov	r0, r4
 8001710:	4629      	mov	r1, r5
 8001712:	f7fe ff3d 	bl	8000590 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4614      	mov	r4, r2
 800171c:	461d      	mov	r5, r3
 800171e:	6838      	ldr	r0, [r7, #0]
 8001720:	f7fe fede 	bl	80004e0 <__aeabi_f2d>
 8001724:	a357      	add	r3, pc, #348	@ (adr r3, 8001884 <REVOLUTE_MOTOR_DFD_Compute+0x1c4>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	f7fe fd79 	bl	8000220 <__aeabi_dsub>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4620      	mov	r0, r4
 8001734:	4629      	mov	r1, r5
 8001736:	f7fe ff2b 	bl	8000590 <__aeabi_dmul>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	f7ff fa07 	bl	8000b54 <__aeabi_d2f>
 8001746:	4603      	mov	r3, r0
 8001748:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->plotter_mass * motor->En->g * sin(q) * motor->En->c;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175e:	ee17 0a90 	vmov	r0, s15
 8001762:	f7fe febd 	bl	80004e0 <__aeabi_f2d>
 8001766:	4604      	mov	r4, r0
 8001768:	460d      	mov	r5, r1
 800176a:	68b8      	ldr	r0, [r7, #8]
 800176c:	f7fe feb8 	bl	80004e0 <__aeabi_f2d>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	ec43 2b10 	vmov	d0, r2, r3
 8001778:	f00e ff92 	bl	80106a0 <sin>
 800177c:	ec53 2b10 	vmov	r2, r3, d0
 8001780:	4620      	mov	r0, r4
 8001782:	4629      	mov	r1, r5
 8001784:	f7fe ff04 	bl	8000590 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4614      	mov	r4, r2
 800178e:	461d      	mov	r5, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fea2 	bl	80004e0 <__aeabi_f2d>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4620      	mov	r0, r4
 80017a2:	4629      	mov	r1, r5
 80017a4:	f7fe fef4 	bl	8000590 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f7ff f9d0 	bl	8000b54 <__aeabi_d2f>
 80017b4:	4603      	mov	r3, r0
 80017b6:	61bb      	str	r3, [r7, #24]
//    float mass_torque = motor->En->plotter_mass * s*s * qdd;

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017c8:	f7ff f80c 	bl	80007e4 <__aeabi_ddiv>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f9be 	bl	8000b54 <__aeabi_d2f>
 80017d8:	4603      	mov	r3, r0
 80017da:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + gravity_compensate_rail + 0) * transfer_function;
 80017dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80017e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80017e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e8:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001880 <REVOLUTE_MOTOR_DFD_Compute+0x1c0>
 80017ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80017f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f8:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f9a4 	bl	8000b54 <__aeabi_d2f>
 800180c:	4603      	mov	r3, r0
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eeb1 8a67 	vneg.f32	s16, s15
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f7ff f997 	bl	8000b54 <__aeabi_d2f>
 8001826:	4604      	mov	r4, r0
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff f98e 	bl	8000b54 <__aeabi_d2f>
 8001838:	4603      	mov	r3, r0
 800183a:	ee07 3a90 	vmov	s15, r3
 800183e:	eef1 8a67 	vneg.f32	s17, s15
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f981 	bl	8000b54 <__aeabi_d2f>
 8001852:	4603      	mov	r3, r0
 8001854:	ee02 3a10 	vmov	s4, r3
 8001858:	eef0 1a68 	vmov.f32	s3, s17
 800185c:	ee01 4a10 	vmov	s2, r4
 8001860:	eef0 0a48 	vmov.f32	s1, s16
 8001864:	ed97 0a04 	vldr	s0, [r7, #16]
 8001868:	f000 fa86 	bl	8001d78 <mapf>
 800186c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001870:	eeb0 0a67 	vmov.f32	s0, s15
 8001874:	3720      	adds	r7, #32
 8001876:	46bd      	mov	sp, r7
 8001878:	ecbd 8b02 	vpop	{d8}
 800187c:	bdb0      	pop	{r4, r5, r7, pc}
 800187e:	bf00      	nop
 8001880:	00000000 	.word	0x00000000
 8001884:	5c28f5c3 	.word	0x5c28f5c3
 8001888:	3fc5c28f 	.word	0x3fc5c28f

0800188c <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	601a      	str	r2, [r3, #0]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	ed2d 8b02 	vpush	{d8}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018c8:	f7fe fe62 	bl	8000590 <__aeabi_dmul>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4614      	mov	r4, r2
 80018d2:	461d      	mov	r5, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018e4:	f7fe fe54 	bl	8000590 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4620      	mov	r0, r4
 80018ee:	4629      	mov	r1, r5
 80018f0:	f7fe fc98 	bl	8000224 <__adddf3>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001904:	f7fe ff6e 	bl	80007e4 <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f920 	bl	8000b54 <__aeabi_d2f>
 8001914:	4603      	mov	r3, r0
 8001916:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 8001918:	ed97 7a00 	vldr	s14, [r7]
 800191c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001924:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff f90e 	bl	8000b54 <__aeabi_d2f>
 8001938:	4603      	mov	r3, r0
 800193a:	ee07 3a90 	vmov	s15, r3
 800193e:	eeb1 8a67 	vneg.f32	s16, s15
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	f7ff f901 	bl	8000b54 <__aeabi_d2f>
 8001952:	4604      	mov	r4, r0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f7ff f8f8 	bl	8000b54 <__aeabi_d2f>
 8001964:	4603      	mov	r3, r0
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eef1 8a67 	vneg.f32	s17, s15
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f7ff f8eb 	bl	8000b54 <__aeabi_d2f>
 800197e:	4603      	mov	r3, r0
 8001980:	ee02 3a10 	vmov	s4, r3
 8001984:	eef0 1a68 	vmov.f32	s3, s17
 8001988:	ee01 4a10 	vmov	s2, r4
 800198c:	eef0 0a48 	vmov.f32	s1, s16
 8001990:	ed97 0a02 	vldr	s0, [r7, #8]
 8001994:	f000 f9f0 	bl	8001d78 <mapf>
 8001998:	eef0 7a40 	vmov.f32	s15, s0
}
 800199c:	eeb0 0a67 	vmov.f32	s0, s15
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	ecbd 8b02 	vpop	{d8}
 80019a8:	bdb0      	pop	{r4, r5, r7, pc}

080019aa <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	605a      	str	r2, [r3, #4]
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 80019ce:	b5b0      	push	{r4, r5, r7, lr}
 80019d0:	ed2d 8b02 	vpush	{d8}
 80019d4:	b088      	sub	sp, #32
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	ed87 0a02 	vstr	s0, [r7, #8]
 80019de:	edc7 0a01 	vstr	s1, [r7, #4]
 80019e2:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fa:	ee17 0a90 	vmov	r0, s15
 80019fe:	f7fe fd6f 	bl	80004e0 <__aeabi_f2d>
 8001a02:	4604      	mov	r4, r0
 8001a04:	460d      	mov	r5, r1
 8001a06:	68b8      	ldr	r0, [r7, #8]
 8001a08:	f7fe fd6a 	bl	80004e0 <__aeabi_f2d>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	ec43 2b10 	vmov	d0, r2, r3
 8001a14:	f00e fdf0 	bl	80105f8 <cos>
 8001a18:	ec53 2b10 	vmov	r2, r3, d0
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	4629      	mov	r1, r5
 8001a20:	f7fe fdb6 	bl	8000590 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7ff f892 	bl	8000b54 <__aeabi_d2f>
 8001a30:	4603      	mov	r3, r0
 8001a32:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a44:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	ed97 7a00 	vldr	s14, [r7]
 8001a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a54:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd3a 	bl	80004e0 <__aeabi_f2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4620      	mov	r0, r4
 8001a72:	4629      	mov	r1, r5
 8001a74:	f7fe fd8c 	bl	8000590 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a88:	f7fe feac 	bl	80007e4 <__aeabi_ddiv>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f85e 	bl	8000b54 <__aeabi_d2f>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a9c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aa0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab0:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f7ff f848 	bl	8000b54 <__aeabi_d2f>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eeb1 8a67 	vneg.f32	s16, s15
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f7ff f83b 	bl	8000b54 <__aeabi_d2f>
 8001ade:	4604      	mov	r4, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff f832 	bl	8000b54 <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef1 8a67 	vneg.f32	s17, s15
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7ff f825 	bl	8000b54 <__aeabi_d2f>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	ee02 3a10 	vmov	s4, r3
 8001b10:	eef0 1a68 	vmov.f32	s3, s17
 8001b14:	ee01 4a10 	vmov	s2, r4
 8001b18:	eef0 0a48 	vmov.f32	s1, s16
 8001b1c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b20:	f000 f92a 	bl	8001d78 <mapf>
 8001b24:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b28:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	ecbd 8b02 	vpop	{d8}
 8001b34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b38 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	ed2d 8b02 	vpush	{d8}
 8001b3e:	b08a      	sub	sp, #40	@ 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	460b      	mov	r3, r1
 8001b46:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b4a:	edc7 0a00 	vstr	s1, [r7]
 8001b4e:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b50:	897b      	ldrh	r3, [r7, #10]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d102      	bne.n	8001b62 <FIR_init+0x2a>
        numTaps += 1;
 8001b5c:	897b      	ldrh	r3, [r7, #10]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	897a      	ldrh	r2, [r7, #10]
 8001b66:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b6e:	897b      	ldrh	r3, [r7, #10]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f00e fc38 	bl	80103e8 <malloc>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b80:	897b      	ldrh	r3, [r7, #10]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f00e fc2f 	bl	80103e8 <malloc>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 80e0 	beq.w	8001d5c <FIR_init+0x224>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80db 	beq.w	8001d5c <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001baa:	e00a      	b.n	8001bc2 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001bbc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bc2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bc4:	897b      	ldrh	r3, [r7, #10]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d3f0      	bcc.n	8001bac <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001bca:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bce:	ed97 7a00 	vldr	s14, [r7]
 8001bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd6:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001bda:	897b      	ldrh	r3, [r7, #10]
 8001bdc:	085b      	lsrs	r3, r3, #1
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001be2:	2300      	movs	r3, #0
 8001be4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001be6:	e077      	b.n	8001cd8 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001be8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001bec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d10c      	bne.n	8001c0e <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c08:	edc3 7a00 	vstr	s15, [r3]
 8001c0c:	e02c      	b.n	8001c68 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001c0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c10:	8afb      	ldrh	r3, [r7, #22]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001c18:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c1c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d68 <FIR_init+0x230>
 8001c20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c24:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c34:	eeb0 0a67 	vmov.f32	s0, s15
 8001c38:	f00e fe08 	bl	801084c <sinf>
 8001c3c:	eef0 6a40 	vmov.f32	s13, s0
 8001c40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d6c <FIR_init+0x234>
 8001c50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c64:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	ed93 8a00 	vldr	s16, [r3]
 8001c78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c84:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d68 <FIR_init+0x230>
 8001c88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c8c:	897b      	ldrh	r3, [r7, #10]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c98:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c9c:	eeb0 0a66 	vmov.f32	s0, s13
 8001ca0:	f00e fd90 	bl	80107c4 <cosf>
 8001ca4:	eef0 7a40 	vmov.f32	s15, s0
 8001ca8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d70 <FIR_init+0x238>
 8001cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d74 <FIR_init+0x23c>
 8001cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cc8:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001ccc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001cd8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001cdc:	897b      	ldrh	r3, [r7, #10]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	db82      	blt.n	8001be8 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001ce8:	2300      	movs	r3, #0
 8001cea:	83fb      	strh	r3, [r7, #30]
 8001cec:	e00f      	b.n	8001d0e <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	8bfb      	ldrh	r3, [r7, #30]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d04:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001d08:	8bfb      	ldrh	r3, [r7, #30]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	83fb      	strh	r3, [r7, #30]
 8001d0e:	8bfa      	ldrh	r2, [r7, #30]
 8001d10:	897b      	ldrh	r3, [r7, #10]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d3eb      	bcc.n	8001cee <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001d16:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d22:	d01b      	beq.n	8001d5c <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d24:	2300      	movs	r3, #0
 8001d26:	83bb      	strh	r3, [r7, #28]
 8001d28:	e014      	b.n	8001d54 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	8bbb      	ldrh	r3, [r7, #28]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	edd3 6a00 	vldr	s13, [r3]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	8bbb      	ldrh	r3, [r7, #28]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d4a:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d4e:	8bbb      	ldrh	r3, [r7, #28]
 8001d50:	3301      	adds	r3, #1
 8001d52:	83bb      	strh	r3, [r7, #28]
 8001d54:	8bba      	ldrh	r2, [r7, #28]
 8001d56:	897b      	ldrh	r3, [r7, #10]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d3e6      	bcc.n	8001d2a <FIR_init+0x1f2>
            }
        }
    }
}
 8001d5c:	bf00      	nop
 8001d5e:	3728      	adds	r7, #40	@ 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	ecbd 8b02 	vpop	{d8}
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40c90fdb 	.word	0x40c90fdb
 8001d6c:	40490fdb 	.word	0x40490fdb
 8001d70:	3eeb851f 	.word	0x3eeb851f
 8001d74:	3f0a3d71 	.word	0x3f0a3d71

08001d78 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	@ 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d82:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d86:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d8a:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d8e:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001d92:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d96:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d9a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001da2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001da6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dae:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001db2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001db6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dce:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	ee07 3a90 	vmov	s15, r3
}
 8001dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ddc:	3724      	adds	r7, #36	@ 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001dec:	4b0d      	ldr	r3, [pc, #52]	@ (8001e24 <modbus_1t5_Timeout+0x3c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2201      	movs	r2, #1
 8001df2:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001df4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <modbus_1t5_Timeout+0x3c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001e00:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <modbus_1t5_Timeout+0x3c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <modbus_1t5_Timeout+0x3c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	200001a8 	.word	0x200001a8

08001e28 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <modbus_3t5_Timeout+0x1c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2201      	movs	r2, #1
 8001e36:	755a      	strb	r2, [r3, #21]

}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	200001a8 	.word	0x200001a8

08001e48 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f00c fd0f 	bl	800e874 <HAL_UART_GetError>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b20      	cmp	r3, #32
 8001e5a:	d101      	bne.n	8001e60 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001e5c:	f7ff ffc4 	bl	8001de8 <modbus_1t5_Timeout>

	}
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001e76:	4a2d      	ldr	r2, [pc, #180]	@ (8001f2c <Modbus_init+0xc4>)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f2c <Modbus_init+0xc4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001e84:	4b29      	ldr	r3, [pc, #164]	@ (8001f2c <Modbus_init+0xc4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001e8c:	4b27      	ldr	r3, [pc, #156]	@ (8001f2c <Modbus_init+0xc4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001e94:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <Modbus_init+0xc4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	7e3a      	ldrb	r2, [r7, #24]
 8001e9a:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001e9c:	4b23      	ldr	r3, [pc, #140]	@ (8001f2c <Modbus_init+0xc4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	4a21      	ldr	r2, [pc, #132]	@ (8001f30 <Modbus_init+0xc8>)
 8001eaa:	210e      	movs	r1, #14
 8001eac:	4618      	mov	r0, r3
 8001eae:	f00a ff8f 	bl	800cdd0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2110      	movs	r1, #16
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f00c fc85 	bl	800e7c8 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f00c fc9c 	bl	800e800 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	@ (8001f34 <Modbus_init+0xcc>)
 8001ece:	2104      	movs	r1, #4
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f00b ffcd 	bl	800de70 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001ed6:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <Modbus_init+0xc4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001edc:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <Modbus_init+0xc4>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <Modbus_init+0xc4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001ee8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001eec:	4413      	add	r3, r2
 8001eee:	3302      	adds	r3, #2
 8001ef0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f00c f875 	bl	800dfe4 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001efa:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <Modbus_init+0xc4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d10c      	bne.n	8001f24 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001f0a:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <Modbus_init+0xc4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f009 ff39 	bl	800bd88 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001f16:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <Modbus_init+0xc4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f00a f988 	bl	800c234 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200001a8 	.word	0x200001a8
 8001f30:	08001e29 	.word	0x08001e29
 8001f34:	08001e49 	.word	0x08001e49

08001f38 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08c      	sub	sp, #48	@ 0x30
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001f40:	ed87 0a08 	vstr	s0, [r7, #32]
 8001f44:	edc7 0a07 	vstr	s1, [r7, #28]
 8001f48:	ed87 1a06 	vstr	s2, [r7, #24]
 8001f4c:	edc7 1a05 	vstr	s3, [r7, #20]
 8001f50:	ed87 2a04 	vstr	s4, [r7, #16]
 8001f54:	edc7 2a03 	vstr	s5, [r7, #12]
 8001f58:	ed87 3a02 	vstr	s6, [r7, #8]
 8001f5c:	edc7 3a01 	vstr	s7, [r7, #4]
 8001f60:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	6a3a      	ldr	r2, [r7, #32]
 8001f68:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	2210      	movs	r2, #16
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f00e fad6 	bl	8010554 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	3310      	adds	r3, #16
 8001fac:	2240      	movs	r2, #64	@ 0x40
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f00e facf 	bl	8010554 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fba:	e00c      	b.n	8001fd6 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8001fbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a79      	ldr	r2, [pc, #484]	@ (80021b4 <MotorKalman_Init+0x27c>)
 8001fce:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	ddef      	ble.n	8001fbc <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001fe2:	2240      	movs	r2, #64	@ 0x40
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f00e fab4 	bl	8010554 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fec:	2300      	movs	r3, #0
 8001fee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ff0:	e00d      	b.n	800200e <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001ff2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ffc:	33be      	adds	r3, #190	@ 0xbe
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002006:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200a:	3301      	adds	r3, #1
 800200c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800200e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002010:	2b03      	cmp	r3, #3
 8002012:	ddee      	ble.n	8001ff2 <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8002014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002016:	33f0      	adds	r3, #240	@ 0xf0
 8002018:	2210      	movs	r2, #16
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f00e fa99 	bl	8010554 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8002022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002024:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002028:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002032:	2210      	movs	r2, #16
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f00e fa8c 	bl	8010554 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 800203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002042:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8002046:	ed97 0a01 	vldr	s0, [r7, #4]
 800204a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800204c:	f000 f922 	bl	8002294 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8002050:	ed97 0a00 	vldr	s0, [r7]
 8002054:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002056:	f000 f94d 	bl	80022f4 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	2201      	movs	r2, #1
 8002064:	2104      	movs	r1, #4
 8002066:	f00d fd04 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002072:	3310      	adds	r3, #16
 8002074:	2204      	movs	r2, #4
 8002076:	2104      	movs	r1, #4
 8002078:	f00d fcfb 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002088:	2204      	movs	r2, #4
 800208a:	2104      	movs	r1, #4
 800208c:	f00d fcf1 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800209c:	2201      	movs	r2, #1
 800209e:	2101      	movs	r1, #1
 80020a0:	f00d fce7 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 80020a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a6:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80020b0:	2201      	movs	r2, #1
 80020b2:	2101      	movs	r1, #1
 80020b4:	f00d fcdd 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80020c4:	2201      	movs	r2, #1
 80020c6:	2101      	movs	r1, #1
 80020c8:	f00d fcd3 	bl	800fa72 <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80020d8:	2204      	movs	r2, #4
 80020da:	2104      	movs	r1, #4
 80020dc:	f00d fcc9 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 80020e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e2:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 80020ec:	2201      	movs	r2, #1
 80020ee:	2104      	movs	r1, #4
 80020f0:	f00d fcbf 	bl	800fa72 <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002100:	2201      	movs	r2, #1
 8002102:	2104      	movs	r1, #4
 8002104:	f00d fcb5 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8002114:	2204      	movs	r2, #4
 8002116:	2104      	movs	r1, #4
 8002118:	f00d fcab 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8002128:	2204      	movs	r2, #4
 800212a:	2101      	movs	r1, #1
 800212c:	f00d fca1 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800213c:	2201      	movs	r2, #1
 800213e:	2101      	movs	r1, #1
 8002140:	f00d fc97 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8002150:	2201      	movs	r2, #1
 8002152:	2104      	movs	r1, #4
 8002154:	f00d fc8d 	bl	800fa72 <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002158:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800215a:	f000 f82d 	bl	80021b8 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	3390      	adds	r3, #144	@ 0x90
 8002168:	2204      	movs	r2, #4
 800216a:	2104      	movs	r1, #4
 800216c:	f00d fc81 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	33e0      	adds	r3, #224	@ 0xe0
 800217a:	2201      	movs	r2, #1
 800217c:	2104      	movs	r1, #4
 800217e:	f00d fc78 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800218e:	2204      	movs	r2, #4
 8002190:	2104      	movs	r1, #4
 8002192:	f00d fc6e 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 80021a2:	2201      	movs	r2, #1
 80021a4:	2104      	movs	r1, #4
 80021a6:	f00d fc64 	bl	800fa72 <arm_mat_init_f32>
}
 80021aa:	bf00      	nop
 80021ac:	3730      	adds	r7, #48	@ 0x30
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	42c80000 	.word	0x42c80000

080021b8 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 80021f4:	4619      	mov	r1, r3
 80021f6:	4610      	mov	r0, r2
 80021f8:	eeb0 3a64 	vmov.f32	s6, s9
 80021fc:	eef0 2a45 	vmov.f32	s5, s10
 8002200:	eeb0 2a65 	vmov.f32	s4, s11
 8002204:	eef0 1a46 	vmov.f32	s3, s12
 8002208:	eeb0 1a66 	vmov.f32	s2, s13
 800220c:	eef0 0a47 	vmov.f32	s1, s14
 8002210:	eeb0 0a67 	vmov.f32	s0, s15
 8002214:	f001 f83c 	bl	8003290 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800221e:	2240      	movs	r2, #64	@ 0x40
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f00e f996 	bl	8010554 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800222e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800228c <MotorKalman_DiscretizeModel+0xd4>
 8002232:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800223c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002262:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002290 <MotorKalman_DiscretizeModel+0xd8>
 8002266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002276:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800228c <MotorKalman_DiscretizeModel+0xd4>
 800227a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	3c23d70a 	.word	0x3c23d70a
 8002290:	3dcccccd 	.word	0x3dcccccd

08002294 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80022a6:	2240      	movs	r2, #64	@ 0x40
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f00e f952 	bl	8010554 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 80022b0:	edd7 7a00 	vldr	s15, [r7]
 80022b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80022cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d4:	d107      	bne.n	80022e6 <MotorKalman_SetProcessNoise+0x52>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80022dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e4:	d002      	beq.n	80022ec <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ff66 	bl	80021b8 <MotorKalman_DiscretizeModel>
    }
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 8002300:	ed97 0a00 	vldr	s0, [r7]
 8002304:	f00e fa40 	bl	8010788 <sqrtf>
 8002308:	eef0 7a40 	vmov.f32	s15, s0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 8002322:	b580      	push	{r7, lr}
 8002324:	b0b2      	sub	sp, #200	@ 0xc8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 8002336:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002344:	2300      	movs	r3, #0
 8002346:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800234a:	e041      	b.n	80023d0 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 800234c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	33c8      	adds	r3, #200	@ 0xc8
 8002354:	443b      	add	r3, r7
 8002356:	3b3c      	subs	r3, #60	@ 0x3c
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800235e:	2300      	movs	r3, #0
 8002360:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002364:	e02b      	b.n	80023be <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 8002366:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	33c8      	adds	r3, #200	@ 0xc8
 800236e:	443b      	add	r3, r7
 8002370:	3b3c      	subs	r3, #60	@ 0x3c
 8002372:	ed93 7a00 	vldr	s14, [r3]
 8002376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800237a:	009a      	lsls	r2, r3, #2
 800237c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002380:	4413      	add	r3, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	3324      	adds	r3, #36	@ 0x24
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	edd3 6a00 	vldr	s13, [r3]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	33c8      	adds	r3, #200	@ 0xc8
 80023ac:	443b      	add	r3, r7
 80023ae:	3b3c      	subs	r3, #60	@ 0x3c
 80023b0:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80023b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023b8:	3301      	adds	r3, #1
 80023ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80023be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	ddcf      	ble.n	8002366 <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023ca:	3301      	adds	r3, #1
 80023cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80023d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	ddb9      	ble.n	800234c <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80023de:	e021      	b.n	8002424 <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 80023e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	33c8      	adds	r3, #200	@ 0xc8
 80023e8:	443b      	add	r3, r7
 80023ea:	3b3c      	subs	r3, #60	@ 0x3c
 80023ec:	ed93 7a00 	vldr	s14, [r3]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023f6:	3338      	adds	r3, #56	@ 0x38
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	edd3 6a00 	vldr	s13, [r3]
 8002400:	edd7 7a00 	vldr	s15, [r7]
 8002404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800241a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800241e:	3301      	adds	r3, #1
 8002420:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002424:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002428:	2b03      	cmp	r3, #3
 800242a:	ddd9      	ble.n	80023e0 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 800242c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002430:	2240      	movs	r2, #64	@ 0x40
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f00e f88d 	bl	8010554 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 800243a:	f107 030c 	add.w	r3, r7, #12
 800243e:	2240      	movs	r2, #64	@ 0x40
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f00e f886 	bl	8010554 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002448:	2300      	movs	r3, #0
 800244a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800244e:	e05f      	b.n	8002510 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002456:	e052      	b.n	80024fe <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002458:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800245c:	009a      	lsls	r2, r3, #2
 800245e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	33c8      	adds	r3, #200	@ 0xc8
 8002468:	443b      	add	r3, r7
 800246a:	3b7c      	subs	r3, #124	@ 0x7c
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002472:	2300      	movs	r3, #0
 8002474:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002478:	e038      	b.n	80024ec <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800247a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800247e:	009a      	lsls	r2, r3, #2
 8002480:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	33c8      	adds	r3, #200	@ 0xc8
 800248a:	443b      	add	r3, r7
 800248c:	3b7c      	subs	r3, #124	@ 0x7c
 800248e:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 8002492:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002496:	009a      	lsls	r2, r3, #2
 8002498:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800249c:	4413      	add	r3, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	3324      	adds	r3, #36	@ 0x24
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	edd3 6a00 	vldr	s13, [r3]
 80024aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024ae:	009a      	lsls	r2, r3, #2
 80024b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024b4:	4413      	add	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	3304      	adds	r3, #4
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	edd3 7a00 	vldr	s15, [r3]
 80024c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80024c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024ca:	009a      	lsls	r2, r3, #2
 80024cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024d0:	4413      	add	r3, r2
 80024d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	33c8      	adds	r3, #200	@ 0xc8
 80024da:	443b      	add	r3, r7
 80024dc:	3b7c      	subs	r3, #124	@ 0x7c
 80024de:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80024e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024e6:	3301      	adds	r3, #1
 80024e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	ddc2      	ble.n	800247a <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024f8:	3301      	adds	r3, #1
 80024fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002502:	2b03      	cmp	r3, #3
 8002504:	dda8      	ble.n	8002458 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002506:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800250a:	3301      	adds	r3, #1
 800250c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002510:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002514:	2b03      	cmp	r3, #3
 8002516:	dd9b      	ble.n	8002450 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002518:	2300      	movs	r3, #0
 800251a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800251e:	e05f      	b.n	80025e0 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002526:	e052      	b.n	80025ce <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002528:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800252c:	009a      	lsls	r2, r3, #2
 800252e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	33c8      	adds	r3, #200	@ 0xc8
 8002538:	443b      	add	r3, r7
 800253a:	3bbc      	subs	r3, #188	@ 0xbc
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002548:	e038      	b.n	80025bc <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800254a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800254e:	009a      	lsls	r2, r3, #2
 8002550:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	33c8      	adds	r3, #200	@ 0xc8
 800255a:	443b      	add	r3, r7
 800255c:	3bbc      	subs	r3, #188	@ 0xbc
 800255e:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 8002562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002566:	009a      	lsls	r2, r3, #2
 8002568:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	33c8      	adds	r3, #200	@ 0xc8
 8002572:	443b      	add	r3, r7
 8002574:	3b7c      	subs	r3, #124	@ 0x7c
 8002576:	edd3 6a00 	vldr	s13, [r3]
 800257a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800257e:	009a      	lsls	r2, r3, #2
 8002580:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002584:	4413      	add	r3, r2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	3324      	adds	r3, #36	@ 0x24
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800259a:	009a      	lsls	r2, r3, #2
 800259c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025a0:	4413      	add	r3, r2
 80025a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	33c8      	adds	r3, #200	@ 0xc8
 80025aa:	443b      	add	r3, r7
 80025ac:	3bbc      	subs	r3, #188	@ 0xbc
 80025ae:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80025b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025b6:	3301      	adds	r3, #1
 80025b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80025bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	ddc2      	ble.n	800254a <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025c8:	3301      	adds	r3, #1
 80025ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	dda8      	ble.n	8002528 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025da:	3301      	adds	r3, #1
 80025dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80025e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	dd9b      	ble.n	8002520 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025ee:	e037      	b.n	8002660 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025f6:	e02a      	b.n	800264e <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80025f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025fc:	009a      	lsls	r2, r3, #2
 80025fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	33c8      	adds	r3, #200	@ 0xc8
 8002608:	443b      	add	r3, r7
 800260a:	3bbc      	subs	r3, #188	@ 0xbc
 800260c:	ed93 7a00 	vldr	s14, [r3]
 8002610:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002614:	009a      	lsls	r2, r3, #2
 8002616:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800261a:	4413      	add	r3, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	3354      	adds	r3, #84	@ 0x54
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002628:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800262c:	009a      	lsls	r2, r3, #2
 800262e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002632:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002634:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	3304      	adds	r3, #4
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002644:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002648:	3301      	adds	r3, #1
 800264a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800264e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002652:	2b03      	cmp	r3, #3
 8002654:	ddd0      	ble.n	80025f8 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800265a:	3301      	adds	r3, #1
 800265c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002660:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002664:	2b03      	cmp	r3, #3
 8002666:	ddc3      	ble.n	80025f0 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	2104      	movs	r1, #4
 800269c:	f00d f9e9 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3310      	adds	r3, #16
 80026aa:	2204      	movs	r2, #4
 80026ac:	2104      	movs	r1, #4
 80026ae:	f00d f9e0 	bl	800fa72 <arm_mat_init_f32>
}
 80026b2:	bf00      	nop
 80026b4:	37c8      	adds	r7, #200	@ 0xc8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b0d0      	sub	sp, #320	@ 0x140
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026c6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026ca:	6018      	str	r0, [r3, #0]
 80026cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026d0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80026d4:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 80026d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80026e6:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80026f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 80026fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002702:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	edd3 7a00 	vldr	s15, [r3]
 800270c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002710:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002714:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 800271e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002722:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	edd3 7a01 	vldr	s15, [r3, #4]
 800272c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002730:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002734:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002738:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 8002742:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002746:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002750:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002754:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002758:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800275c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002766:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800276a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	edd3 7a03 	vldr	s15, [r3, #12]
 8002774:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277c:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8002780:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002784:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002788:	ed93 7a00 	vldr	s14, [r3]
 800278c:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002794:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002798:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80027ac:	e04d      	b.n	800284a <MotorKalman_Update+0x18e>
        CP[i] = 0;
 80027ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80027b8:	443b      	add	r3, r7
 80027ba:	3b58      	subs	r3, #88	@ 0x58
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80027c8:	e036      	b.n	8002838 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 80027ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80027d4:	443b      	add	r3, r7
 80027d6:	3b58      	subs	r3, #88	@ 0x58
 80027d8:	ed93 7a00 	vldr	s14, [r3]
 80027dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027ea:	333c      	adds	r3, #60	@ 0x3c
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	edd3 6a00 	vldr	s13, [r3]
 80027f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027f8:	009a      	lsls	r2, r3, #2
 80027fa:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027fe:	4413      	add	r3, r2
 8002800:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002804:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	3304      	adds	r3, #4
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	edd3 7a00 	vldr	s15, [r3]
 8002814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002826:	443b      	add	r3, r7
 8002828:	3b58      	subs	r3, #88	@ 0x58
 800282a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800282e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002832:	3301      	adds	r3, #1
 8002834:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002838:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800283c:	2b03      	cmp	r3, #3
 800283e:	ddc4      	ble.n	80027ca <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002840:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002844:	3301      	adds	r3, #1
 8002846:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800284a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800284e:	2b03      	cmp	r3, #3
 8002850:	ddad      	ble.n	80027ae <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800285a:	2300      	movs	r3, #0
 800285c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002860:	e021      	b.n	80028a6 <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 8002862:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800286c:	443b      	add	r3, r7
 800286e:	3b58      	subs	r3, #88	@ 0x58
 8002870:	ed93 7a00 	vldr	s14, [r3]
 8002874:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002878:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002882:	333c      	adds	r3, #60	@ 0x3c
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002890:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002898:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800289c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80028a0:	3301      	adds	r3, #1
 80028a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80028a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	ddd9      	ble.n	8002862 <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 80028ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028b2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 80028bc:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 80028c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c4:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 80028c8:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80028dc:	e04d      	b.n	800297a <MotorKalman_Update+0x2be>
        PC[i] = 0;
 80028de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028e8:	443b      	add	r3, r7
 80028ea:	3b68      	subs	r3, #104	@ 0x68
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80028f2:	2300      	movs	r3, #0
 80028f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80028f8:	e036      	b.n	8002968 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 80028fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002904:	443b      	add	r3, r7
 8002906:	3b68      	subs	r3, #104	@ 0x68
 8002908:	ed93 7a00 	vldr	s14, [r3]
 800290c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002910:	009a      	lsls	r2, r3, #2
 8002912:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002916:	4413      	add	r3, r2
 8002918:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800291c:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	3304      	adds	r3, #4
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	edd3 6a00 	vldr	s13, [r3]
 800292c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002930:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800293a:	333c      	adds	r3, #60	@ 0x3c
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	edd3 7a00 	vldr	s15, [r3]
 8002944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800294c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002956:	443b      	add	r3, r7
 8002958:	3b68      	subs	r3, #104	@ 0x68
 800295a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800295e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002962:	3301      	adds	r3, #1
 8002964:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002968:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800296c:	2b03      	cmp	r3, #3
 800296e:	ddc4      	ble.n	80028fa <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002970:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002974:	3301      	adds	r3, #1
 8002976:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800297a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800297e:	2b03      	cmp	r3, #3
 8002980:	ddad      	ble.n	80028de <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 8002982:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	609a      	str	r2, [r3, #8]
 800298e:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002990:	2300      	movs	r3, #0
 8002992:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002996:	e01a      	b.n	80029ce <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002998:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029a2:	443b      	add	r3, r7
 80029a4:	3b68      	subs	r3, #104	@ 0x68
 80029a6:	edd3 6a00 	vldr	s13, [r3]
 80029aa:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 80029ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029bc:	443b      	add	r3, r7
 80029be:	3b78      	subs	r3, #120	@ 0x78
 80029c0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80029c8:	3301      	adds	r3, #1
 80029ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80029ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	dde0      	ble.n	8002998 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80029dc:	e029      	b.n	8002a32 <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 80029de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80029e2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	ed93 7a00 	vldr	s14, [r3]
 80029f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029fe:	443b      	add	r3, r7
 8002a00:	3b78      	subs	r3, #120	@ 0x78
 8002a02:	edd3 6a00 	vldr	s13, [r3]
 8002a06:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002a0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a16:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002a32:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	ddd1      	ble.n	80029de <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a3a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002a3e:	2240      	movs	r2, #64	@ 0x40
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f00d fd86 	bl	8010554 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002a4e:	e035      	b.n	8002abc <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002a56:	e028      	b.n	8002aaa <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8002a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a62:	443b      	add	r3, r7
 8002a64:	3b78      	subs	r3, #120	@ 0x78
 8002a66:	ed93 7a00 	vldr	s14, [r3]
 8002a6a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a6e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a78:	333c      	adds	r3, #60	@ 0x3c
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	edd3 7a00 	vldr	s15, [r3]
 8002a82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a86:	009a      	lsls	r2, r3, #2
 8002a88:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a8c:	4413      	add	r3, r2
 8002a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a98:	443b      	add	r3, r7
 8002a9a:	3bb8      	subs	r3, #184	@ 0xb8
 8002a9c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002aa0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002aaa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	ddd2      	ble.n	8002a58 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ab2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002abc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	ddc5      	ble.n	8002a50 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002ac4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002ac8:	2240      	movs	r2, #64	@ 0x40
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f00d fd41 	bl	8010554 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002ad8:	e038      	b.n	8002b4c <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002ae0:	e02b      	b.n	8002b3a <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8002ae2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002ae6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d102      	bne.n	8002af4 <MotorKalman_Update+0x438>
 8002aee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002af2:	e001      	b.n	8002af8 <MotorKalman_Update+0x43c>
 8002af4:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002d10 <MotorKalman_Update+0x654>
 8002af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002afc:	009a      	lsls	r2, r3, #2
 8002afe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b0a:	443b      	add	r3, r7
 8002b0c:	3bb8      	subs	r3, #184	@ 0xb8
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b16:	009a      	lsls	r2, r3, #2
 8002b18:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b1c:	4413      	add	r3, r2
 8002b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b28:	443b      	add	r3, r7
 8002b2a:	3bf8      	subs	r3, #248	@ 0xf8
 8002b2c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b30:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b34:	3301      	adds	r3, #1
 8002b36:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002b3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	ddcf      	ble.n	8002ae2 <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b46:	3301      	adds	r3, #1
 8002b48:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	ddc2      	ble.n	8002ada <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8002b54:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b58:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f103 0110 	add.w	r1, r3, #16
 8002b62:	f107 0308 	add.w	r3, r7, #8
 8002b66:	2240      	movs	r2, #64	@ 0x40
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f00d fd37 	bl	80105dc <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b74:	e06e      	b.n	8002c54 <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b7c:	e061      	b.n	8002c42 <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b82:	009a      	lsls	r2, r3, #2
 8002b84:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b88:	4413      	add	r3, r2
 8002b8a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b8e:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	3304      	adds	r3, #4
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002ba6:	e043      	b.n	8002c30 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bac:	009a      	lsls	r2, r3, #2
 8002bae:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002bb8:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bcc:	009a      	lsls	r2, r3, #2
 8002bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002bda:	443b      	add	r3, r7
 8002bdc:	3bf8      	subs	r3, #248	@ 0xf8
 8002bde:	edd3 6a00 	vldr	s13, [r3]
 8002be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002be6:	009a      	lsls	r2, r3, #2
 8002be8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bec:	4413      	add	r3, r2
 8002bee:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002bf2:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	edd3 7a00 	vldr	s15, [r3]
 8002bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c06:	009a      	lsls	r2, r3, #2
 8002c08:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c0c:	4413      	add	r3, r2
 8002c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c12:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c16:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	ddb7      	ble.n	8002ba8 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c38:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002c42:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	dd99      	ble.n	8002b7e <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	dd8c      	ble.n	8002b76 <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002c5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c6c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002c76:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c7a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c86:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002c90:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c94:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ca0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002caa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cba:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002cc4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cc8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002cd2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cd6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	2104      	movs	r1, #4
 8002ce0:	f00c fec7 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002ce4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ce8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002cf2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cf6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3310      	adds	r3, #16
 8002cfe:	2204      	movs	r2, #4
 8002d00:	2104      	movs	r1, #4
 8002d02:	f00c feb6 	bl	800fa72 <arm_mat_init_f32>
}
 8002d06:	bf00      	nop
 8002d08:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	00000000 	.word	0x00000000

08002d14 <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d20:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8002d24:	ed97 0a02 	vldr	s0, [r7, #8]
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f7ff fafa 	bl	8002322 <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8002d2e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f7ff fcc2 	bl	80026bc <MotorKalman_Update>

    return filter->velocity;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8002d3e:	ee07 3a90 	vmov	s15, r3
}
 8002d42:	eeb0 0a67 	vmov.f32	s0, s15
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	e00c      	b.n	8002d78 <matrix_copy+0x2c>
        dst[i] = src[i];
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	441a      	add	r2, r3
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	440b      	add	r3, r1
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	3301      	adds	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	dbee      	blt.n	8002d5e <matrix_copy+0x12>
    }
}
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8002d9c:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8002da0:	6020      	str	r0, [r4, #0]
 8002da2:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002da6:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8002daa:	6001      	str	r1, [r0, #0]
 8002dac:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002db0:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002db4:	ed81 0a00 	vstr	s0, [r1]
 8002db8:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002dbc:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002dc0:	600a      	str	r2, [r1, #0]
 8002dc2:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002dc6:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8002dca:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002dcc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dd0:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002dd4:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2204      	movs	r2, #4
 8002ddc:	2104      	movs	r1, #4
 8002dde:	f00c fe48 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002de2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002de6:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002dea:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2204      	movs	r2, #4
 8002df2:	2104      	movs	r1, #4
 8002df4:	f00c fe3d 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002df8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dfc:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002e00:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2201      	movs	r2, #1
 8002e08:	2104      	movs	r1, #4
 8002e0a:	f00c fe32 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002e0e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e12:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002e16:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	2104      	movs	r1, #4
 8002e20:	f00c fe27 	bl	800fa72 <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002e24:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002e28:	2240      	movs	r2, #64	@ 0x40
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f00d fb91 	bl	8010554 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002e32:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002e36:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	2104      	movs	r1, #4
 8002e3e:	f00c fe18 	bl	800fa72 <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002e48:	e011      	b.n	8002e6e <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8002e4a:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8002e5a:	443b      	add	r3, r7
 8002e5c:	3b6c      	subs	r3, #108	@ 0x6c
 8002e5e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e62:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8002e64:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e68:	3301      	adds	r3, #1
 8002e6a:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002e6e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	dde9      	ble.n	8002e4a <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8002e76:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002e7a:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8002e7e:	2204      	movs	r2, #4
 8002e80:	2104      	movs	r1, #4
 8002e82:	f00c fdf6 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002e86:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002e8a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e8e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002e92:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002e96:	ed93 0a00 	vldr	s0, [r3]
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	f00d f9f2 	bl	8010284 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002ea0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002ea4:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002ea8:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002eac:	2210      	movs	r2, #16
 8002eae:	6819      	ldr	r1, [r3, #0]
 8002eb0:	f7ff ff4c 	bl	8002d4c <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002eb4:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002eb8:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	2104      	movs	r1, #4
 8002ec0:	f00c fdd7 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002ec4:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002ec8:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002ecc:	2204      	movs	r2, #4
 8002ece:	2104      	movs	r1, #4
 8002ed0:	f00c fdcf 	bl	800fa72 <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002ed4:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002ed8:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002edc:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f00c fd8b 	bl	800f9fc <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002ee6:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002eea:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002eee:	2210      	movs	r2, #16
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff ff2b 	bl	8002d4c <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002ef6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002efa:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002efe:	2302      	movs	r3, #2
 8002f00:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002f04:	e03a      	b.n	8002f7c <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002f06:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f12:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8002f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f1a:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8002f1e:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002f22:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002f26:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f00d f930 	bl	8010190 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8002f30:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002f34:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002f38:	2210      	movs	r2, #16
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff ff06 	bl	8002d4c <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8002f40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f44:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8002f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f4c:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002f50:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002f54:	4611      	mov	r1, r2
 8002f56:	eeb0 0a47 	vmov.f32	s0, s14
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f00d f992 	bl	8010284 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8002f60:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002f64:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8002f68:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f00c fd45 	bl	800f9fc <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002f72:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f76:	3301      	adds	r3, #1
 8002f78:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002f7c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f80:	2b0a      	cmp	r3, #10
 8002f82:	ddc0      	ble.n	8002f06 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8002f84:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8002f88:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f8c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f90:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8002f94:	ed93 0a00 	vldr	s0, [r3]
 8002f98:	4610      	mov	r0, r2
 8002f9a:	f00d f973 	bl	8010284 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8002f9e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002fa2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2300      	movs	r3, #0
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	6053      	str	r3, [r2, #4]
 8002fae:	6093      	str	r3, [r2, #8]
 8002fb0:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8002fb2:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8002fb6:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8002fba:	2201      	movs	r2, #1
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	f00c fd58 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8002fc2:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8002fc6:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002fca:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f00d f8de 	bl	8010190 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8002fd4:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002fd8:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8002fdc:	2201      	movs	r2, #1
 8002fde:	2104      	movs	r1, #4
 8002fe0:	f00c fd47 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8002fe4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002fe8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002fec:	edd3 7a00 	vldr	s15, [r3]
 8002ff0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ff4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002ff8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ffc:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003000:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8003004:	4611      	mov	r1, r2
 8003006:	eeb0 0a47 	vmov.f32	s0, s14
 800300a:	4618      	mov	r0, r3
 800300c:	f00d f93a 	bl	8010284 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003010:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003014:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003018:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800301c:	4618      	mov	r0, r3
 800301e:	f00c fced 	bl	800f9fc <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8003022:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003026:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800302a:	4618      	mov	r0, r3
 800302c:	2340      	movs	r3, #64	@ 0x40
 800302e:	461a      	mov	r2, r3
 8003030:	2100      	movs	r1, #0
 8003032:	f00d fa8f 	bl	8010554 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8003036:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800303a:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 800303e:	2204      	movs	r2, #4
 8003040:	2104      	movs	r1, #4
 8003042:	f00c fd16 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8003046:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 800304a:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800304e:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8003052:	4618      	mov	r0, r3
 8003054:	f00d f89c 	bl	8010190 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003058:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800305c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003060:	461a      	mov	r2, r3
 8003062:	2300      	movs	r3, #0
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	6053      	str	r3, [r2, #4]
 8003068:	6093      	str	r3, [r2, #8]
 800306a:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 800306c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003070:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8003074:	2201      	movs	r2, #1
 8003076:	2104      	movs	r1, #4
 8003078:	f00c fcfb 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 800307c:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8003080:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003084:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003088:	4618      	mov	r0, r3
 800308a:	f00d f881 	bl	8010190 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 800308e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003092:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003096:	edd3 7a00 	vldr	s15, [r3]
 800309a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800309e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030a2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80030a6:	edd3 7a00 	vldr	s15, [r3]
 80030aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ae:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80030b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80030b6:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80030ba:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030be:	4611      	mov	r1, r2
 80030c0:	eeb0 0a47 	vmov.f32	s0, s14
 80030c4:	4618      	mov	r0, r3
 80030c6:	f00d f8dd 	bl	8010284 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80030ca:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80030ce:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80030d2:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80030d6:	4618      	mov	r0, r3
 80030d8:	f00c fc90 	bl	800f9fc <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 80030dc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030e0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80030e4:	4618      	mov	r0, r3
 80030e6:	2340      	movs	r3, #64	@ 0x40
 80030e8:	461a      	mov	r2, r3
 80030ea:	2100      	movs	r1, #0
 80030ec:	f00d fa32 	bl	8010554 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 80030f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80030f4:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80030f8:	2204      	movs	r2, #4
 80030fa:	2104      	movs	r1, #4
 80030fc:	f00c fcb9 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 8003100:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8003104:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8003108:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800310c:	4618      	mov	r0, r3
 800310e:	f00d f83f 	bl	8010190 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 8003112:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003116:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800311a:	461a      	mov	r2, r3
 800311c:	2300      	movs	r3, #0
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	6053      	str	r3, [r2, #4]
 8003122:	6093      	str	r3, [r2, #8]
 8003124:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 8003126:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800312a:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800312e:	2201      	movs	r2, #1
 8003130:	2104      	movs	r1, #4
 8003132:	f00c fc9e 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 8003136:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800313a:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800313e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003142:	4618      	mov	r0, r3
 8003144:	f00d f824 	bl	8010190 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8003148:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800314c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003150:	edd3 7a00 	vldr	s15, [r3]
 8003154:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003158:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800315c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003160:	edd3 7a00 	vldr	s15, [r3]
 8003164:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003168:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800316c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003170:	edd3 7a00 	vldr	s15, [r3]
 8003174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003178:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 800317c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003180:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003184:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003188:	4611      	mov	r1, r2
 800318a:	eeb0 0a47 	vmov.f32	s0, s14
 800318e:	4618      	mov	r0, r3
 8003190:	f00d f878 	bl	8010284 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003194:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003198:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800319c:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80031a0:	4618      	mov	r0, r3
 80031a2:	f00c fc2b 	bl	800f9fc <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 80031a6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031aa:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80031ae:	4618      	mov	r0, r3
 80031b0:	2340      	movs	r3, #64	@ 0x40
 80031b2:	461a      	mov	r2, r3
 80031b4:	2100      	movs	r1, #0
 80031b6:	f00d f9cd 	bl	8010554 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 80031ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80031be:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80031c2:	2204      	movs	r2, #4
 80031c4:	2104      	movs	r1, #4
 80031c6:	f00c fc54 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 80031ca:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80031ce:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80031d2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80031d6:	4618      	mov	r0, r3
 80031d8:	f00c ffda 	bl	8010190 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 80031dc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031e0:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80031e4:	461a      	mov	r2, r3
 80031e6:	2300      	movs	r3, #0
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	6053      	str	r3, [r2, #4]
 80031ec:	6093      	str	r3, [r2, #8]
 80031ee:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 80031f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031f4:	f107 001c 	add.w	r0, r7, #28
 80031f8:	2201      	movs	r2, #1
 80031fa:	2104      	movs	r1, #4
 80031fc:	f00c fc39 	bl	800fa72 <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 8003200:	f107 021c 	add.w	r2, r7, #28
 8003204:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003208:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800320c:	4618      	mov	r0, r3
 800320e:	f00c ffbf 	bl	8010190 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 8003212:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003216:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800321a:	edd3 7a00 	vldr	s15, [r3]
 800321e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003222:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003226:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003232:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003236:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800323a:	edd3 7a00 	vldr	s15, [r3]
 800323e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003242:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003246:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800324a:	edd3 7a00 	vldr	s15, [r3]
 800324e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003252:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800328c <discretize_system_with_arm+0x4fc>
 8003256:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800325a:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800325e:	f107 031c 	add.w	r3, r7, #28
 8003262:	4611      	mov	r1, r2
 8003264:	eeb0 0a47 	vmov.f32	s0, s14
 8003268:	4618      	mov	r0, r3
 800326a:	f00d f80b 	bl	8010284 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800326e:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003272:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003276:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800327a:	4618      	mov	r0, r3
 800327c:	f00c fbbe 	bl	800f9fc <arm_mat_add_f32>
}
 8003280:	bf00      	nop
 8003282:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8003286:	46bd      	mov	sp, r7
 8003288:	bd90      	pop	{r4, r7, pc}
 800328a:	bf00      	nop
 800328c:	42f00000 	.word	0x42f00000

08003290 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8003290:	b580      	push	{r7, lr}
 8003292:	b09e      	sub	sp, #120	@ 0x78
 8003294:	af00      	add	r7, sp, #0
 8003296:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 800329a:	edc7 0a08 	vstr	s1, [r7, #32]
 800329e:	ed87 1a07 	vstr	s2, [r7, #28]
 80032a2:	edc7 1a06 	vstr	s3, [r7, #24]
 80032a6:	ed87 2a05 	vstr	s4, [r7, #20]
 80032aa:	edc7 2a04 	vstr	s5, [r7, #16]
 80032ae:	ed87 3a03 	vstr	s6, [r7, #12]
 80032b2:	60b8      	str	r0, [r7, #8]
 80032b4:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 80032b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80032ba:	2240      	movs	r2, #64	@ 0x40
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f00d f948 	bl	8010554 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 80032c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 80032d2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80032d6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 80032d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80032dc:	eef1 6a67 	vneg.f32	s13, s15
 80032e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80032e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032e8:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 80032ec:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 80032f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80032f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032f8:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 80032fc:	edd7 6a04 	vldr	s13, [r7, #16]
 8003300:	ed97 7a07 	vldr	s14, [r7, #28]
 8003304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003308:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 800330c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003310:	eef1 6a67 	vneg.f32	s13, s15
 8003314:	ed97 7a08 	vldr	s14, [r7, #32]
 8003318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800331c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8003320:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003324:	eef1 6a67 	vneg.f32	s13, s15
 8003328:	ed97 7a08 	vldr	s14, [r7, #32]
 800332c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003330:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8003334:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003338:	ed97 7a08 	vldr	s14, [r7, #32]
 800333c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003340:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8003344:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003348:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	ed97 0a03 	vldr	s0, [r7, #12]
 8003354:	f7ff fd1c 	bl	8002d90 <discretize_system_with_arm>
}
 8003358:	bf00      	nop
 800335a:	3778      	adds	r7, #120	@ 0x78
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4a0b      	ldr	r2, [pc, #44]	@ (80033a0 <PWM_init+0x40>)
 8003372:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	88fa      	ldrh	r2, [r7, #6]
 800337e:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8003386:	68b8      	ldr	r0, [r7, #8]
 8003388:	f008 fc8e 	bl	800bca8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 800338c:	88fb      	ldrh	r3, [r7, #6]
 800338e:	4619      	mov	r1, r3
 8003390:	68b8      	ldr	r0, [r7, #8]
 8003392:	f008 fdd5 	bl	800bf40 <HAL_TIM_PWM_Start>
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	0a21fe80 	.word	0x0a21fe80

080033a4 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 80033a4:	b5b0      	push	{r4, r5, r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80033b0:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80033b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80033b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c0:	d137      	bne.n	8003432 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	889b      	ldrh	r3, [r3, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d105      	bne.n	80033d6 <PWM_write_duty+0x32>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2200      	movs	r2, #0
 80033d2:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80033d4:	e0e1      	b.n	800359a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	889b      	ldrh	r3, [r3, #4]
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d105      	bne.n	80033ea <PWM_write_duty+0x46>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	2300      	movs	r3, #0
 80033e6:	6393      	str	r3, [r2, #56]	@ 0x38
 80033e8:	e0d7      	b.n	800359a <PWM_write_duty+0x1f6>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	889b      	ldrh	r3, [r3, #4]
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d105      	bne.n	80033fe <PWM_write_duty+0x5a>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80033fc:	e0cd      	b.n	800359a <PWM_write_duty+0x1f6>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	889b      	ldrh	r3, [r3, #4]
 8003402:	2b0c      	cmp	r3, #12
 8003404:	d105      	bne.n	8003412 <PWM_write_duty+0x6e>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	2300      	movs	r3, #0
 800340e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003410:	e0c3      	b.n	800359a <PWM_write_duty+0x1f6>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	889b      	ldrh	r3, [r3, #4]
 8003416:	2b10      	cmp	r3, #16
 8003418:	d105      	bne.n	8003426 <PWM_write_duty+0x82>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	2300      	movs	r3, #0
 8003422:	6493      	str	r3, [r2, #72]	@ 0x48
 8003424:	e0b9      	b.n	800359a <PWM_write_duty+0x1f6>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	2300      	movs	r3, #0
 800342e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003430:	e0b3      	b.n	800359a <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800344a:	ee17 2a90 	vmov	r2, s15
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800345a:	33fe      	adds	r3, #254	@ 0xfe
 800345c:	4a51      	ldr	r2, [pc, #324]	@ (80035a4 <PWM_write_duty+0x200>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	0bdb      	lsrs	r3, r3, #15
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	899b      	ldrh	r3, [r3, #12]
 800347e:	3301      	adds	r3, #1
 8003480:	ee07 3a90 	vmov	s15, r3
 8003484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003488:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800348c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003494:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003498:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800349c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034a0:	ee17 3a90 	vmov	r3, s15
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	89db      	ldrh	r3, [r3, #14]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd f804 	bl	80004bc <__aeabi_i2d>
 80034b4:	4604      	mov	r4, r0
 80034b6:	460d      	mov	r5, r1
 80034b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80034bc:	eef0 7ae7 	vabs.f32	s15, s15
 80034c0:	ee17 0a90 	vmov	r0, s15
 80034c4:	f7fd f80c 	bl	80004e0 <__aeabi_f2d>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4620      	mov	r0, r4
 80034ce:	4629      	mov	r1, r5
 80034d0:	f7fd f85e 	bl	8000590 <__aeabi_dmul>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	4b31      	ldr	r3, [pc, #196]	@ (80035a8 <PWM_write_duty+0x204>)
 80034e2:	f7fd f97f 	bl	80007e4 <__aeabi_ddiv>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	f7fd fb11 	bl	8000b14 <__aeabi_d2uiz>
 80034f2:	4603      	mov	r3, r0
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	899a      	ldrh	r2, [r3, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	89da      	ldrh	r2, [r3, #14]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	89da      	ldrh	r2, [r3, #14]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	889b      	ldrh	r3, [r3, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <PWM_write_duty+0x190>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	6952      	ldr	r2, [r2, #20]
 8003530:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003532:	e032      	b.n	800359a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	889b      	ldrh	r3, [r3, #4]
 8003538:	2b04      	cmp	r3, #4
 800353a:	d106      	bne.n	800354a <PWM_write_duty+0x1a6>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003548:	e027      	b.n	800359a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	889b      	ldrh	r3, [r3, #4]
 800354e:	2b08      	cmp	r3, #8
 8003550:	d106      	bne.n	8003560 <PWM_write_duty+0x1bc>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800355e:	e01c      	b.n	800359a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	889b      	ldrh	r3, [r3, #4]
 8003564:	2b0c      	cmp	r3, #12
 8003566:	d106      	bne.n	8003576 <PWM_write_duty+0x1d2>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003574:	e011      	b.n	800359a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	889b      	ldrh	r3, [r3, #4]
 800357a:	2b10      	cmp	r3, #16
 800357c:	d106      	bne.n	800358c <PWM_write_duty+0x1e8>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800358a:	e006      	b.n	800359a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003598:	e7ff      	b.n	800359a <PWM_write_duty+0x1f6>
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bdb0      	pop	{r4, r5, r7, pc}
 80035a2:	bf00      	nop
 80035a4:	80008001 	.word	0x80008001
 80035a8:	40590000 	.word	0x40590000
 80035ac:	00000000 	.word	0x00000000

080035b0 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 80035b0:	b5b0      	push	{r4, r5, r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80035bc:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80035c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80035c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035cc:	d137      	bne.n	800363e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	889b      	ldrh	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d105      	bne.n	80035e2 <PWM_write_range+0x32>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2200      	movs	r2, #0
 80035de:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80035e0:	e0e1      	b.n	80037a6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	889b      	ldrh	r3, [r3, #4]
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d105      	bne.n	80035f6 <PWM_write_range+0x46>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	2300      	movs	r3, #0
 80035f2:	6393      	str	r3, [r2, #56]	@ 0x38
 80035f4:	e0d7      	b.n	80037a6 <PWM_write_range+0x1f6>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	889b      	ldrh	r3, [r3, #4]
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d105      	bne.n	800360a <PWM_write_range+0x5a>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	2300      	movs	r3, #0
 8003606:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003608:	e0cd      	b.n	80037a6 <PWM_write_range+0x1f6>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	889b      	ldrh	r3, [r3, #4]
 800360e:	2b0c      	cmp	r3, #12
 8003610:	d105      	bne.n	800361e <PWM_write_range+0x6e>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	2300      	movs	r3, #0
 800361a:	6413      	str	r3, [r2, #64]	@ 0x40
 800361c:	e0c3      	b.n	80037a6 <PWM_write_range+0x1f6>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	889b      	ldrh	r3, [r3, #4]
 8003622:	2b10      	cmp	r3, #16
 8003624:	d105      	bne.n	8003632 <PWM_write_range+0x82>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	2300      	movs	r3, #0
 800362e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003630:	e0b9      	b.n	80037a6 <PWM_write_range+0x1f6>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	2300      	movs	r3, #0
 800363a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800363c:	e0b3      	b.n	80037a6 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800364a:	ed97 7a02 	vldr	s14, [r7, #8]
 800364e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003656:	ee17 2a90 	vmov	r2, s15
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003666:	33fe      	adds	r3, #254	@ 0xfe
 8003668:	4a53      	ldr	r2, [pc, #332]	@ (80037b8 <PWM_write_range+0x208>)
 800366a:	fba2 2303 	umull	r2, r3, r2, r3
 800366e:	0bdb      	lsrs	r3, r3, #15
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	ee07 3a90 	vmov	s15, r3
 8003682:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	899b      	ldrh	r3, [r3, #12]
 800368a:	3301      	adds	r3, #1
 800368c:	ee07 3a90 	vmov	s15, r3
 8003690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003694:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003698:	ed97 7a02 	vldr	s14, [r7, #8]
 800369c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80036a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ac:	ee17 3a90 	vmov	r3, s15
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	89db      	ldrh	r3, [r3, #14]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fc fefe 	bl	80004bc <__aeabi_i2d>
 80036c0:	4604      	mov	r4, r0
 80036c2:	460d      	mov	r5, r1
 80036c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036c8:	eef0 7ae7 	vabs.f32	s15, s15
 80036cc:	ee17 0a90 	vmov	r0, s15
 80036d0:	f7fc ff06 	bl	80004e0 <__aeabi_f2d>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4620      	mov	r0, r4
 80036da:	4629      	mov	r1, r5
 80036dc:	f7fc ff58 	bl	8000590 <__aeabi_dmul>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4610      	mov	r0, r2
 80036e6:	4619      	mov	r1, r3
 80036e8:	a331      	add	r3, pc, #196	@ (adr r3, 80037b0 <PWM_write_range+0x200>)
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	f7fd f879 	bl	80007e4 <__aeabi_ddiv>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4610      	mov	r0, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	f7fd fa0b 	bl	8000b14 <__aeabi_d2uiz>
 80036fe:	4603      	mov	r3, r0
 8003700:	b29b      	uxth	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	899a      	ldrh	r2, [r3, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	89da      	ldrh	r2, [r3, #14]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	89da      	ldrh	r2, [r3, #14]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	889b      	ldrh	r3, [r3, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <PWM_write_range+0x190>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	6952      	ldr	r2, [r2, #20]
 800373c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800373e:	e032      	b.n	80037a6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	889b      	ldrh	r3, [r3, #4]
 8003744:	2b04      	cmp	r3, #4
 8003746:	d106      	bne.n	8003756 <PWM_write_range+0x1a6>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003754:	e027      	b.n	80037a6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	889b      	ldrh	r3, [r3, #4]
 800375a:	2b08      	cmp	r3, #8
 800375c:	d106      	bne.n	800376c <PWM_write_range+0x1bc>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800376a:	e01c      	b.n	80037a6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	889b      	ldrh	r3, [r3, #4]
 8003770:	2b0c      	cmp	r3, #12
 8003772:	d106      	bne.n	8003782 <PWM_write_range+0x1d2>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003780:	e011      	b.n	80037a6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	889b      	ldrh	r3, [r3, #4]
 8003786:	2b10      	cmp	r3, #16
 8003788:	d106      	bne.n	8003798 <PWM_write_range+0x1e8>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003796:	e006      	b.n	80037a6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80037a4:	e7ff      	b.n	80037a6 <PWM_write_range+0x1f6>
 80037a6:	bf00      	nop
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bdb0      	pop	{r4, r5, r7, pc}
 80037ae:	bf00      	nop
 80037b0:	00000000 	.word	0x00000000
 80037b4:	40efffe0 	.word	0x40efffe0
 80037b8:	80008001 	.word	0x80008001

080037bc <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6178      	str	r0, [r7, #20]
 80037c4:	6139      	str	r1, [r7, #16]
 80037c6:	60fa      	str	r2, [r7, #12]
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80037ce:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2200      	movs	r2, #0
 80037fa:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 800381c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	fb93 f2f2 	sdiv	r2, r3, r2
 8003826:	68f9      	ldr	r1, [r7, #12]
 8003828:	fb01 f202 	mul.w	r2, r1, r2
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2200      	movs	r2, #0
 800383a:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2200      	movs	r2, #0
 8003840:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 800388a:	213c      	movs	r1, #60	@ 0x3c
 800388c:	6938      	ldr	r0, [r7, #16]
 800388e:	f008 fe13 	bl	800c4b8 <HAL_TIM_Encoder_Start>
}
 8003892:	bf00      	nop
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	0000      	movs	r0, r0
 800389c:	0000      	movs	r0, r0
	...

080038a0 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 80038a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	0fda      	lsrs	r2, r3, #31
 80038c8:	4413      	add	r3, r2
 80038ca:	105b      	asrs	r3, r3, #1
 80038cc:	461a      	mov	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4293      	cmp	r3, r2
 80038d2:	dd05      	ble.n	80038e0 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	e00e      	b.n	80038fe <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	0fda      	lsrs	r2, r3, #31
 80038e6:	4413      	add	r3, r2
 80038e8:	105b      	asrs	r3, r3, #1
 80038ea:	425b      	negs	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4293      	cmp	r3, r2
 80038f2:	da04      	bge.n	80038fe <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	441a      	add	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	ee07 3a90 	vmov	s15, r3
 800392c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003930:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800393a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800393e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394c:	4618      	mov	r0, r3
 800394e:	f7fc fdc7 	bl	80004e0 <__aeabi_f2d>
 8003952:	4604      	mov	r4, r0
 8003954:	460d      	mov	r5, r1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800396e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003972:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003976:	ee17 0a90 	vmov	r0, s15
 800397a:	f7fc fdb1 	bl	80004e0 <__aeabi_f2d>
 800397e:	a33c      	add	r3, pc, #240	@ (adr r3, 8003a70 <QEI_get_diff_count+0x1d0>)
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	f7fc fe04 	bl	8000590 <__aeabi_dmul>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4690      	mov	r8, r2
 800398e:	4699      	mov	r9, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003994:	4618      	mov	r0, r3
 8003996:	f7fc fda3 	bl	80004e0 <__aeabi_f2d>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4640      	mov	r0, r8
 80039a0:	4649      	mov	r1, r9
 80039a2:	f7fc fdf5 	bl	8000590 <__aeabi_dmul>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4620      	mov	r0, r4
 80039ac:	4629      	mov	r1, r5
 80039ae:	f7fc fc39 	bl	8000224 <__adddf3>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4610      	mov	r0, r2
 80039b8:	4619      	mov	r1, r3
 80039ba:	f7fd f8cb 	bl	8000b54 <__aeabi_d2f>
 80039be:	4602      	mov	r2, r0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fc fd89 	bl	80004e0 <__aeabi_f2d>
 80039ce:	4604      	mov	r4, r0
 80039d0:	460d      	mov	r5, r1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039ee:	ee16 0a90 	vmov	r0, s13
 80039f2:	f7fc fd75 	bl	80004e0 <__aeabi_f2d>
 80039f6:	a31e      	add	r3, pc, #120	@ (adr r3, 8003a70 <QEI_get_diff_count+0x1d0>)
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	f7fc fdc8 	bl	8000590 <__aeabi_dmul>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4690      	mov	r8, r2
 8003a06:	4699      	mov	r9, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fc fd67 	bl	80004e0 <__aeabi_f2d>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4640      	mov	r0, r8
 8003a18:	4649      	mov	r1, r9
 8003a1a:	f7fc fdb9 	bl	8000590 <__aeabi_dmul>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4690      	mov	r8, r2
 8003a24:	4699      	mov	r9, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fc fd58 	bl	80004e0 <__aeabi_f2d>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4640      	mov	r0, r8
 8003a36:	4649      	mov	r1, r9
 8003a38:	f7fc fdaa 	bl	8000590 <__aeabi_dmul>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4620      	mov	r0, r4
 8003a42:	4629      	mov	r1, r5
 8003a44:	f7fc fbee 	bl	8000224 <__adddf3>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4619      	mov	r1, r3
 8003a50:	f7fd f880 	bl	8000b54 <__aeabi_d2f>
 8003a54:	4602      	mov	r2, r0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	605a      	str	r2, [r3, #4]
}
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a6c:	f3af 8000 	nop.w
 8003a70:	54442d18 	.word	0x54442d18
 8003a74:	400921fb 	.word	0x400921fb

08003a78 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8003a78:	b5b0      	push	{r4, r5, r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a88:	fb02 f303 	mul.w	r3, r2, r3
 8003a8c:	ee07 3a90 	vmov	s15, r3
 8003a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fc fd1e 	bl	80004e0 <__aeabi_f2d>
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	4b83      	ldr	r3, [pc, #524]	@ (8003cb8 <QEI_compute_data+0x240>)
 8003aaa:	f7fc fd71 	bl	8000590 <__aeabi_dmul>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4614      	mov	r4, r2
 8003ab4:	461d      	mov	r5, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ac2:	ee17 0a90 	vmov	r0, s15
 8003ac6:	f7fc fd0b 	bl	80004e0 <__aeabi_f2d>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4620      	mov	r0, r4
 8003ad0:	4629      	mov	r1, r5
 8003ad2:	f7fc fe87 	bl	80007e4 <__aeabi_ddiv>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4614      	mov	r4, r2
 8003adc:	461d      	mov	r5, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fc fcfc 	bl	80004e0 <__aeabi_f2d>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4620      	mov	r0, r4
 8003aee:	4629      	mov	r1, r5
 8003af0:	f7fc fd4e 	bl	8000590 <__aeabi_dmul>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4610      	mov	r0, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	f7fd f82a 	bl	8000b54 <__aeabi_d2f>
 8003b00:	4602      	mov	r2, r0
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003b0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b10:	ee17 0a90 	vmov	r0, s15
 8003b14:	f7fc fce4 	bl	80004e0 <__aeabi_f2d>
 8003b18:	a365      	add	r3, pc, #404	@ (adr r3, 8003cb0 <QEI_compute_data+0x238>)
 8003b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1e:	f7fc fd37 	bl	8000590 <__aeabi_dmul>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4614      	mov	r4, r2
 8003b28:	461d      	mov	r5, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b36:	ee17 0a90 	vmov	r0, s15
 8003b3a:	f7fc fcd1 	bl	80004e0 <__aeabi_f2d>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4620      	mov	r0, r4
 8003b44:	4629      	mov	r1, r5
 8003b46:	f7fc fe4d 	bl	80007e4 <__aeabi_ddiv>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4614      	mov	r4, r2
 8003b50:	461d      	mov	r5, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fc fcc2 	bl	80004e0 <__aeabi_f2d>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4620      	mov	r0, r4
 8003b62:	4629      	mov	r1, r5
 8003b64:	f7fc fd14 	bl	8000590 <__aeabi_dmul>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	f7fc fff0 	bl	8000b54 <__aeabi_d2f>
 8003b74:	4602      	mov	r2, r0
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fc fcae 	bl	80004e0 <__aeabi_f2d>
 8003b84:	a34a      	add	r3, pc, #296	@ (adr r3, 8003cb0 <QEI_compute_data+0x238>)
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	f7fc fd01 	bl	8000590 <__aeabi_dmul>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4614      	mov	r4, r2
 8003b94:	461d      	mov	r5, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fc fca0 	bl	80004e0 <__aeabi_f2d>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	f7fc fcf2 	bl	8000590 <__aeabi_dmul>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4614      	mov	r4, r2
 8003bb2:	461d      	mov	r5, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	ee07 3a90 	vmov	s15, r3
 8003bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bc0:	ee17 0a90 	vmov	r0, s15
 8003bc4:	f7fc fc8c 	bl	80004e0 <__aeabi_f2d>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4620      	mov	r0, r4
 8003bce:	4629      	mov	r1, r5
 8003bd0:	f7fc fe08 	bl	80007e4 <__aeabi_ddiv>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4614      	mov	r4, r2
 8003bda:	461d      	mov	r5, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fc fc7d 	bl	80004e0 <__aeabi_f2d>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4620      	mov	r0, r4
 8003bec:	4629      	mov	r1, r5
 8003bee:	f7fc fccf 	bl	8000590 <__aeabi_dmul>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	f7fc ffab 	bl	8000b54 <__aeabi_d2f>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c24:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8003c28:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c34:	d00a      	beq.n	8003c4c <QEI_compute_data+0x1d4>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c42:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4a:	e001      	b.n	8003c50 <QEI_compute_data+0x1d8>
 8003c4c:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003cbc <QEI_compute_data+0x244>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	ed93 7a04 	vldr	s14, [r3, #16]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c66:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8003c6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c76:	d00a      	beq.n	8003c8e <QEI_compute_data+0x216>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7c:	ee07 3a90 	vmov	s15, r3
 8003c80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c84:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8c:	e001      	b.n	8003c92 <QEI_compute_data+0x21a>
 8003c8e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8003cbc <QEI_compute_data+0x244>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	615a      	str	r2, [r3, #20]
}
 8003ca8:	bf00      	nop
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bdb0      	pop	{r4, r5, r7, pc}
 8003cb0:	54442d18 	.word	0x54442d18
 8003cb4:	400921fb 	.word	0x400921fb
 8003cb8:	404e0000 	.word	0x404e0000
 8003cbc:	00000000 	.word	0x00000000

08003cc0 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08e      	sub	sp, #56	@ 0x38
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6178      	str	r0, [r7, #20]
 8003cc8:	ed87 0a04 	vstr	s0, [r7, #16]
 8003ccc:	edc7 0a03 	vstr	s1, [r7, #12]
 8003cd0:	ed87 1a02 	vstr	s2, [r7, #8]
 8003cd4:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8003cfe:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d02:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d0a:	eef0 7ae7 	vabs.f32	s15, s15
 8003d0e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8003d12:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d16:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d26:	d503      	bpl.n	8003d30 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	22ff      	movs	r2, #255	@ 0xff
 8003d2c:	741a      	strb	r2, [r3, #16]
 8003d2e:	e002      	b.n	8003d36 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2201      	movs	r2, #1
 8003d34:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8003d36:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003d3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d42:	d006      	beq.n	8003d52 <Trapezoidal_Generator+0x92>
 8003d44:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d50:	d104      	bne.n	8003d5c <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	60da      	str	r2, [r3, #12]
        return;
 8003d5a:	e06f      	b.n	8003e3c <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8003d5c:	edd7 6a02 	vldr	s13, [r7, #8]
 8003d60:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d68:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8003d6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d70:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003d74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d78:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d80:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d88:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8003d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003d90:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003d94:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d9c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003da0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003da4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db0:	db27      	blt.n	8003e02 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003db2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003db6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dc6:	ed97 7a02 	vldr	s14, [r7, #8]
 8003dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dce:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dd6:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003dd8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003ddc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8003dea:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003dee:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003df2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	edc3 7a02 	vstr	s15, [r3, #8]
 8003e00:	e018      	b.n	8003e34 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003e02:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003e06:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e0e:	eeb0 0a66 	vmov.f32	s0, s13
 8003e12:	f00c fcb9 	bl	8010788 <sqrtf>
 8003e16:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	6a3a      	ldr	r2, [r7, #32]
 8003e1e:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	6a3a      	ldr	r2, [r7, #32]
 8003e24:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8003e26:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	60da      	str	r2, [r3, #12]
}
 8003e3c:	3738      	adds	r7, #56	@ 0x38
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8003e44:	b480      	push	{r7}
 8003e46:	b08d      	sub	sp, #52	@ 0x34
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6178      	str	r0, [r7, #20]
 8003e4c:	6139      	str	r1, [r7, #16]
 8003e4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003e52:	edc7 0a02 	vstr	s1, [r7, #8]
 8003e56:	ed87 1a01 	vstr	s2, [r7, #4]
 8003e5a:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e64:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 80040e8 <Trapezoidal_Evaluated+0x2a4>
 8003e68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e86:	f200 811b 	bhi.w	80040c0 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	7c1b      	ldrb	r3, [r3, #16]
 8003e94:	b25b      	sxtb	r3, r3
 8003e96:	ee07 3a90 	vmov	s15, r3
 8003e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e9e:	ed97 7a00 	vldr	s14, [r7]
 8003ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	ed93 7a00 	vldr	s14, [r3]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003eb6:	eeb4 7a67 	vcmp.f32	s14, s15
 8003eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ebe:	d109      	bne.n	8003ed4 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	edd3 7a00 	vldr	s15, [r3]
 8003ec6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ece:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003ed2:	e00c      	b.n	8003eee <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	7c1b      	ldrb	r3, [r3, #16]
 8003ed8:	b25b      	sxtb	r3, r3
 8003eda:	ee07 3a90 	vmov	s15, r3
 8003ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ee2:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eea:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	edd3 7a00 	vldr	s15, [r3]
 8003efa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f02:	d824      	bhi.n	8003f4e <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8003f04:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f08:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f24:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f38:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f4a:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8003f4c:	e0c6      	b.n	80040dc <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f62:	d830      	bhi.n	8003fc6 <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003f64:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f68:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	edd3 7a00 	vldr	s15, [r3]
 8003f76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	edd3 7a00 	vldr	s15, [r3]
 8003f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f84:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f8c:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	edd3 7a00 	vldr	s15, [r3]
 8003f9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fa0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003fa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fa8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fba:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
}
 8003fc4:	e08a      	b.n	80040dc <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	ed93 7a03 	vldr	s14, [r3, #12]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	edd3 7a02 	vldr	s15, [r3, #8]
 8003fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fda:	d900      	bls.n	8003fde <Trapezoidal_Evaluated+0x19a>
}
 8003fdc:	e07e      	b.n	80040dc <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003fde:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003fe2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003fe6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	edd3 7a00 	vldr	s15, [r3]
 8003ff0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	edd3 7a00 	vldr	s15, [r3]
 8003ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffe:	ed97 7a03 	vldr	s14, [r7, #12]
 8004002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004006:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	ed93 7a01 	vldr	s14, [r3, #4]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	edd3 7a00 	vldr	s15, [r3]
 800401a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800401e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004022:	dd11      	ble.n	8004048 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	ed93 7a01 	vldr	s14, [r3, #4]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	edd3 7a00 	vldr	s15, [r3]
 8004030:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004034:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004044:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	ed93 7a03 	vldr	s14, [r3, #12]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	edd3 7a01 	vldr	s15, [r3, #4]
 8004054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004058:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 800405c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004060:	edd7 7a07 	vldr	s15, [r7, #28]
 8004064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004068:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800406c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004070:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004074:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004078:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800407c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004080:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004084:	edd7 7a07 	vldr	s15, [r7, #28]
 8004088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800408c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 8004096:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800409a:	edd7 7a07 	vldr	s15, [r7, #28]
 800409e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80040a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 80040b0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80040b4:	eef1 7a67 	vneg.f32	s15, s15
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80040be:	e00d      	b.n	80040dc <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2201      	movs	r2, #1
 80040c4:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	609a      	str	r2, [r3, #8]
}
 80040dc:	bf00      	nop
 80040de:	3734      	adds	r7, #52	@ 0x34
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	3a83126f 	.word	0x3a83126f

080040ec <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80040f6:	4603      	mov	r3, r0
 80040f8:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	2b1a      	cmp	r3, #26
 80040fe:	d018      	beq.n	8004132 <temperature_to_base+0x46>
 8004100:	2b1a      	cmp	r3, #26
 8004102:	dc1d      	bgt.n	8004140 <temperature_to_base+0x54>
 8004104:	2b18      	cmp	r3, #24
 8004106:	d002      	beq.n	800410e <temperature_to_base+0x22>
 8004108:	2b19      	cmp	r3, #25
 800410a:	d003      	beq.n	8004114 <temperature_to_base+0x28>
 800410c:	e018      	b.n	8004140 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 800410e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004112:	e017      	b.n	8004144 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8004114:	edd7 7a01 	vldr	s15, [r7, #4]
 8004118:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004154 <temperature_to_base+0x68>
 800411c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004120:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004124:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004128:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 800412c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004130:	e008      	b.n	8004144 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 8004132:	edd7 7a01 	vldr	s15, [r7, #4]
 8004136:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004158 <temperature_to_base+0x6c>
 800413a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800413e:	e001      	b.n	8004144 <temperature_to_base+0x58>
        default:
            return value;
 8004140:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004144:	eeb0 0a67 	vmov.f32	s0, s15
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	42000000 	.word	0x42000000
 8004158:	43889333 	.word	0x43889333

0800415c <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	ed87 0a01 	vstr	s0, [r7, #4]
 8004166:	4603      	mov	r3, r0
 8004168:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	2b1a      	cmp	r3, #26
 800416e:	d018      	beq.n	80041a2 <temperature_from_base+0x46>
 8004170:	2b1a      	cmp	r3, #26
 8004172:	dc1d      	bgt.n	80041b0 <temperature_from_base+0x54>
 8004174:	2b18      	cmp	r3, #24
 8004176:	d002      	beq.n	800417e <temperature_from_base+0x22>
 8004178:	2b19      	cmp	r3, #25
 800417a:	d003      	beq.n	8004184 <temperature_from_base+0x28>
 800417c:	e018      	b.n	80041b0 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 800417e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004182:	e017      	b.n	80041b4 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 8004184:	edd7 7a01 	vldr	s15, [r7, #4]
 8004188:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 800418c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004190:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8004194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004198:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80041c4 <temperature_from_base+0x68>
 800419c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041a0:	e008      	b.n	80041b4 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 80041a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80041a6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80041c8 <temperature_from_base+0x6c>
 80041aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041ae:	e001      	b.n	80041b4 <temperature_from_base+0x58>
        default:
            return value;
 80041b0:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80041b4:	eeb0 0a67 	vmov.f32	s0, s15
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	42000000 	.word	0x42000000
 80041c8:	43889333 	.word	0x43889333

080041cc <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2202      	movs	r2, #2
 80041de:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e00a      	b.n	80041fc <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	3304      	adds	r3, #4
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	3301      	adds	r3, #1
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b1a      	cmp	r3, #26
 8004200:	ddf1      	ble.n	80041e6 <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a11      	ldr	r2, [pc, #68]	@ (800424c <init_length_converter+0x80>)
 8004206:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a11      	ldr	r2, [pc, #68]	@ (8004250 <init_length_converter+0x84>)
 800420c:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004214:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a0e      	ldr	r2, [pc, #56]	@ (8004254 <init_length_converter+0x88>)
 800421a:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a0e      	ldr	r2, [pc, #56]	@ (8004258 <init_length_converter+0x8c>)
 8004220:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a0d      	ldr	r2, [pc, #52]	@ (800425c <init_length_converter+0x90>)
 8004226:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a0d      	ldr	r2, [pc, #52]	@ (8004260 <init_length_converter+0x94>)
 800422c:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a0c      	ldr	r2, [pc, #48]	@ (8004264 <init_length_converter+0x98>)
 8004232:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	3a83126f 	.word	0x3a83126f
 8004250:	3c23d70a 	.word	0x3c23d70a
 8004254:	447a0000 	.word	0x447a0000
 8004258:	3cd013a9 	.word	0x3cd013a9
 800425c:	3e9c0ebf 	.word	0x3e9c0ebf
 8004260:	3f6a161e 	.word	0x3f6a161e
 8004264:	44c92b02 	.word	0x44c92b02

08004268 <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	220a      	movs	r2, #10
 800427a:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	e00a      	b.n	8004298 <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	3304      	adds	r3, #4
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3301      	adds	r3, #1
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b1a      	cmp	r3, #26
 800429c:	ddf1      	ble.n	8004282 <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a0e      	ldr	r2, [pc, #56]	@ (80042dc <init_mass_converter+0x74>)
 80042a2:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a0e      	ldr	r2, [pc, #56]	@ (80042e0 <init_mass_converter+0x78>)
 80042a8:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80042b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a0b      	ldr	r2, [pc, #44]	@ (80042e4 <init_mass_converter+0x7c>)
 80042b6:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a0b      	ldr	r2, [pc, #44]	@ (80042e8 <init_mass_converter+0x80>)
 80042bc:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a0a      	ldr	r2, [pc, #40]	@ (80042ec <init_mass_converter+0x84>)
 80042c2:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80042d0:	bf00      	nop
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	358637bd 	.word	0x358637bd
 80042e0:	3a83126f 	.word	0x3a83126f
 80042e4:	447a0000 	.word	0x447a0000
 80042e8:	3ce83d36 	.word	0x3ce83d36
 80042ec:	3ee83d36 	.word	0x3ee83d36

080042f0 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	220f      	movs	r2, #15
 8004302:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	e00a      	b.n	8004320 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	3304      	adds	r3, #4
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3301      	adds	r3, #1
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b1a      	cmp	r3, #26
 8004324:	ddf1      	ble.n	800430a <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a0a      	ldr	r2, [pc, #40]	@ (8004354 <init_angle_converter+0x64>)
 800432a:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004332:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a08      	ldr	r2, [pc, #32]	@ (8004358 <init_angle_converter+0x68>)
 8004338:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	3c8efa35 	.word	0x3c8efa35
 8004358:	3c80adfd 	.word	0x3c80adfd

0800435c <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2203      	movs	r2, #3
 8004368:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2214      	movs	r2, #20
 800436e:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	e00a      	b.n	800438c <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	3304      	adds	r3, #4
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3301      	adds	r3, #1
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b1a      	cmp	r3, #26
 8004390:	ddf1      	ble.n	8004376 <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a10      	ldr	r2, [pc, #64]	@ (80043d8 <init_time_converter+0x7c>)
 8004396:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a10      	ldr	r2, [pc, #64]	@ (80043dc <init_time_converter+0x80>)
 800439c:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a0f      	ldr	r2, [pc, #60]	@ (80043e0 <init_time_converter+0x84>)
 80043a2:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80043aa:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a0d      	ldr	r2, [pc, #52]	@ (80043e4 <init_time_converter+0x88>)
 80043b0:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a0c      	ldr	r2, [pc, #48]	@ (80043e8 <init_time_converter+0x8c>)
 80043b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a0c      	ldr	r2, [pc, #48]	@ (80043ec <init_time_converter+0x90>)
 80043bc:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	3089705f 	.word	0x3089705f
 80043dc:	358637bd 	.word	0x358637bd
 80043e0:	3a83126f 	.word	0x3a83126f
 80043e4:	42700000 	.word	0x42700000
 80043e8:	45610000 	.word	0x45610000
 80043ec:	47a8c000 	.word	0x47a8c000

080043f0 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2204      	movs	r2, #4
 80043fc:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2218      	movs	r2, #24
 8004402:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	e00a      	b.n	8004420 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	3304      	adds	r3, #4
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3301      	adds	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b1a      	cmp	r3, #26
 8004424:	ddf1      	ble.n	800440a <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a05      	ldr	r2, [pc, #20]	@ (8004440 <init_temperature_converter+0x50>)
 800442a:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a05      	ldr	r2, [pc, #20]	@ (8004444 <init_temperature_converter+0x54>)
 8004430:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004432:	bf00      	nop
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	080040ed 	.word	0x080040ed
 8004444:	0800415d 	.word	0x0800415d

08004448 <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff feba 	bl	80041cc <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3378      	adds	r3, #120	@ 0x78
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff ff03 	bl	8004268 <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	33f0      	adds	r3, #240	@ 0xf0
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff ff42 	bl	80042f0 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff ff72 	bl	800435c <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff ffb6 	bl	80043f0 <init_temperature_converter>
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	2b1a      	cmp	r3, #26
 800449a:	d803      	bhi.n	80044a4 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	4a05      	ldr	r2, [pc, #20]	@ (80044b4 <UnitConverter_get_unit_type+0x28>)
 80044a0:	5cd3      	ldrb	r3, [r2, r3]
 80044a2:	e000      	b.n	80044a6 <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000114 	.word	0x20000114

080044b8 <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80044c4:	460b      	mov	r3, r1
 80044c6:	71fb      	strb	r3, [r7, #7]
 80044c8:	4613      	mov	r3, r2
 80044ca:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff ffdc 	bl	800448c <UnitConverter_get_unit_type>
 80044d4:	4603      	mov	r3, r0
 80044d6:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 80044d8:	79bb      	ldrb	r3, [r7, #6]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff ffd6 	bl	800448c <UnitConverter_get_unit_type>
 80044e0:	4603      	mov	r3, r0
 80044e2:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 80044e4:	7efa      	ldrb	r2, [r7, #27]
 80044e6:	7ebb      	ldrb	r3, [r7, #26]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d002      	beq.n	80044f2 <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 80044ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80044f0:	e03b      	b.n	800456a <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 80044f2:	7efa      	ldrb	r2, [r7, #27]
 80044f4:	4613      	mov	r3, r2
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004506:	2b00      	cmp	r3, #0
 8004508:	d009      	beq.n	800451e <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450e:	79fa      	ldrb	r2, [r7, #7]
 8004510:	4610      	mov	r0, r2
 8004512:	ed97 0a02 	vldr	s0, [r7, #8]
 8004516:	4798      	blx	r3
 8004518:	ed87 0a07 	vstr	s0, [r7, #28]
 800451c:	e00c      	b.n	8004538 <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	3304      	adds	r3, #4
 8004528:	edd3 7a00 	vldr	s15, [r3]
 800452c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004534:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453c:	2b00      	cmp	r3, #0
 800453e:	d009      	beq.n	8004554 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004544:	79ba      	ldrb	r2, [r7, #6]
 8004546:	4610      	mov	r0, r2
 8004548:	ed97 0a07 	vldr	s0, [r7, #28]
 800454c:	4798      	blx	r3
 800454e:	eef0 7a40 	vmov.f32	s15, s0
 8004552:	e00a      	b.n	800456a <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 8004554:	79bb      	ldrb	r3, [r7, #6]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	3304      	adds	r3, #4
 800455e:	ed93 7a00 	vldr	s14, [r3]
 8004562:	edd7 6a07 	vldr	s13, [r7, #28]
 8004566:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 800456a:	eeb0 0a67 	vmov.f32	s0, s15
 800456e:	3720      	adds	r7, #32
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004580:	460b      	mov	r3, r1
 8004582:	71fb      	strb	r3, [r7, #7]
 8004584:	4613      	mov	r3, r2
 8004586:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff ff7e 	bl	800448c <UnitConverter_get_unit_type>
 8004590:	4603      	mov	r3, r0
 8004592:	2b02      	cmp	r3, #2
 8004594:	d111      	bne.n	80045ba <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 8004596:	79bb      	ldrb	r3, [r7, #6]
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff ff77 	bl	800448c <UnitConverter_get_unit_type>
 800459e:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d10a      	bne.n	80045ba <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 80045a4:	79ba      	ldrb	r2, [r7, #6]
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	4619      	mov	r1, r3
 80045aa:	ed97 0a02 	vldr	s0, [r7, #8]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff ff82 	bl	80044b8 <UnitConverter_convert>
 80045b4:	eef0 7a40 	vmov.f32	s15, s0
 80045b8:	e001      	b.n	80045be <UnitConverter_angle+0x4a>
    }
    return value;
 80045ba:	edd7 7a02 	vldr	s15, [r7, #8]
}
 80045be:	eeb0 0a67 	vmov.f32	s0, s15
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08c      	sub	sp, #48	@ 0x30
 80045cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80045ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80045da:	1d3b      	adds	r3, r7, #4
 80045dc:	2220      	movs	r2, #32
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f00b ffb7 	bl	8010554 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80045e6:	4b39      	ldr	r3, [pc, #228]	@ (80046cc <MX_ADC1_Init+0x104>)
 80045e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80045ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80045ee:	4b37      	ldr	r3, [pc, #220]	@ (80046cc <MX_ADC1_Init+0x104>)
 80045f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80045f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80045f6:	4b35      	ldr	r3, [pc, #212]	@ (80046cc <MX_ADC1_Init+0x104>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80045fc:	4b33      	ldr	r3, [pc, #204]	@ (80046cc <MX_ADC1_Init+0x104>)
 80045fe:	2200      	movs	r2, #0
 8004600:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004602:	4b32      	ldr	r3, [pc, #200]	@ (80046cc <MX_ADC1_Init+0x104>)
 8004604:	2200      	movs	r2, #0
 8004606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004608:	4b30      	ldr	r3, [pc, #192]	@ (80046cc <MX_ADC1_Init+0x104>)
 800460a:	2201      	movs	r2, #1
 800460c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800460e:	4b2f      	ldr	r3, [pc, #188]	@ (80046cc <MX_ADC1_Init+0x104>)
 8004610:	2204      	movs	r2, #4
 8004612:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004614:	4b2d      	ldr	r3, [pc, #180]	@ (80046cc <MX_ADC1_Init+0x104>)
 8004616:	2200      	movs	r2, #0
 8004618:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800461a:	4b2c      	ldr	r3, [pc, #176]	@ (80046cc <MX_ADC1_Init+0x104>)
 800461c:	2201      	movs	r2, #1
 800461e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004620:	4b2a      	ldr	r3, [pc, #168]	@ (80046cc <MX_ADC1_Init+0x104>)
 8004622:	2202      	movs	r2, #2
 8004624:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004626:	4b29      	ldr	r3, [pc, #164]	@ (80046cc <MX_ADC1_Init+0x104>)
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800462e:	4b27      	ldr	r3, [pc, #156]	@ (80046cc <MX_ADC1_Init+0x104>)
 8004630:	2200      	movs	r2, #0
 8004632:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004634:	4b25      	ldr	r3, [pc, #148]	@ (80046cc <MX_ADC1_Init+0x104>)
 8004636:	2200      	movs	r2, #0
 8004638:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800463a:	4b24      	ldr	r3, [pc, #144]	@ (80046cc <MX_ADC1_Init+0x104>)
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004642:	4b22      	ldr	r3, [pc, #136]	@ (80046cc <MX_ADC1_Init+0x104>)
 8004644:	2200      	movs	r2, #0
 8004646:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004648:	4b20      	ldr	r3, [pc, #128]	@ (80046cc <MX_ADC1_Init+0x104>)
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004650:	481e      	ldr	r0, [pc, #120]	@ (80046cc <MX_ADC1_Init+0x104>)
 8004652:	f004 fa55 	bl	8008b00 <HAL_ADC_Init>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800465c:	f002 fa8c 	bl	8006b78 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004660:	2300      	movs	r3, #0
 8004662:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004668:	4619      	mov	r1, r3
 800466a:	4818      	ldr	r0, [pc, #96]	@ (80046cc <MX_ADC1_Init+0x104>)
 800466c:	f005 fb74 	bl	8009d58 <HAL_ADCEx_MultiModeConfigChannel>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004676:	f002 fa7f 	bl	8006b78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800467a:	4b15      	ldr	r3, [pc, #84]	@ (80046d0 <MX_ADC1_Init+0x108>)
 800467c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800467e:	2306      	movs	r3, #6
 8004680:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004682:	2307      	movs	r3, #7
 8004684:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004686:	237f      	movs	r3, #127	@ 0x7f
 8004688:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800468a:	2304      	movs	r3, #4
 800468c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004692:	1d3b      	adds	r3, r7, #4
 8004694:	4619      	mov	r1, r3
 8004696:	480d      	ldr	r0, [pc, #52]	@ (80046cc <MX_ADC1_Init+0x104>)
 8004698:	f004 fce0 	bl	800905c <HAL_ADC_ConfigChannel>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80046a2:	f002 fa69 	bl	8006b78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80046a6:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <MX_ADC1_Init+0x10c>)
 80046a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80046aa:	230c      	movs	r3, #12
 80046ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046ae:	1d3b      	adds	r3, r7, #4
 80046b0:	4619      	mov	r1, r3
 80046b2:	4806      	ldr	r0, [pc, #24]	@ (80046cc <MX_ADC1_Init+0x104>)
 80046b4:	f004 fcd2 	bl	800905c <HAL_ADC_ConfigChannel>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80046be:	f002 fa5b 	bl	8006b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80046c2:	bf00      	nop
 80046c4:	3730      	adds	r7, #48	@ 0x30
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	200001ac 	.word	0x200001ac
 80046d0:	19200040 	.word	0x19200040
 80046d4:	1d500080 	.word	0x1d500080

080046d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b09e      	sub	sp, #120	@ 0x78
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	609a      	str	r2, [r3, #8]
 80046ec:	60da      	str	r2, [r3, #12]
 80046ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046f0:	f107 0310 	add.w	r3, r7, #16
 80046f4:	2254      	movs	r2, #84	@ 0x54
 80046f6:	2100      	movs	r1, #0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f00b ff2b 	bl	8010554 <memset>
  if(adcHandle->Instance==ADC1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004706:	d15e      	bne.n	80047c6 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004708:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800470c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800470e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004712:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004714:	f107 0310 	add.w	r3, r7, #16
 8004718:	4618      	mov	r0, r3
 800471a:	f007 f813 	bl	800b744 <HAL_RCCEx_PeriphCLKConfig>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004724:	f002 fa28 	bl	8006b78 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004728:	4b29      	ldr	r3, [pc, #164]	@ (80047d0 <HAL_ADC_MspInit+0xf8>)
 800472a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800472c:	4a28      	ldr	r2, [pc, #160]	@ (80047d0 <HAL_ADC_MspInit+0xf8>)
 800472e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004732:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004734:	4b26      	ldr	r3, [pc, #152]	@ (80047d0 <HAL_ADC_MspInit+0xf8>)
 8004736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004738:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004740:	4b23      	ldr	r3, [pc, #140]	@ (80047d0 <HAL_ADC_MspInit+0xf8>)
 8004742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004744:	4a22      	ldr	r2, [pc, #136]	@ (80047d0 <HAL_ADC_MspInit+0xf8>)
 8004746:	f043 0304 	orr.w	r3, r3, #4
 800474a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800474c:	4b20      	ldr	r3, [pc, #128]	@ (80047d0 <HAL_ADC_MspInit+0xf8>)
 800474e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004758:	2303      	movs	r3, #3
 800475a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800475c:	2303      	movs	r3, #3
 800475e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004760:	2300      	movs	r3, #0
 8004762:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004764:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004768:	4619      	mov	r1, r3
 800476a:	481a      	ldr	r0, [pc, #104]	@ (80047d4 <HAL_ADC_MspInit+0xfc>)
 800476c:	f006 f83e 	bl	800a7ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004770:	4b19      	ldr	r3, [pc, #100]	@ (80047d8 <HAL_ADC_MspInit+0x100>)
 8004772:	4a1a      	ldr	r2, [pc, #104]	@ (80047dc <HAL_ADC_MspInit+0x104>)
 8004774:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004776:	4b18      	ldr	r3, [pc, #96]	@ (80047d8 <HAL_ADC_MspInit+0x100>)
 8004778:	2205      	movs	r2, #5
 800477a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800477c:	4b16      	ldr	r3, [pc, #88]	@ (80047d8 <HAL_ADC_MspInit+0x100>)
 800477e:	2200      	movs	r2, #0
 8004780:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004782:	4b15      	ldr	r3, [pc, #84]	@ (80047d8 <HAL_ADC_MspInit+0x100>)
 8004784:	2200      	movs	r2, #0
 8004786:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004788:	4b13      	ldr	r3, [pc, #76]	@ (80047d8 <HAL_ADC_MspInit+0x100>)
 800478a:	2280      	movs	r2, #128	@ 0x80
 800478c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800478e:	4b12      	ldr	r3, [pc, #72]	@ (80047d8 <HAL_ADC_MspInit+0x100>)
 8004790:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004794:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004796:	4b10      	ldr	r3, [pc, #64]	@ (80047d8 <HAL_ADC_MspInit+0x100>)
 8004798:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800479c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800479e:	4b0e      	ldr	r3, [pc, #56]	@ (80047d8 <HAL_ADC_MspInit+0x100>)
 80047a0:	2220      	movs	r2, #32
 80047a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80047a4:	4b0c      	ldr	r3, [pc, #48]	@ (80047d8 <HAL_ADC_MspInit+0x100>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80047aa:	480b      	ldr	r0, [pc, #44]	@ (80047d8 <HAL_ADC_MspInit+0x100>)
 80047ac:	f005 fcec 	bl	800a188 <HAL_DMA_Init>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 80047b6:	f002 f9df 	bl	8006b78 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a06      	ldr	r2, [pc, #24]	@ (80047d8 <HAL_ADC_MspInit+0x100>)
 80047be:	655a      	str	r2, [r3, #84]	@ 0x54
 80047c0:	4a05      	ldr	r2, [pc, #20]	@ (80047d8 <HAL_ADC_MspInit+0x100>)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80047c6:	bf00      	nop
 80047c8:	3778      	adds	r7, #120	@ 0x78
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000
 80047d4:	48000800 	.word	0x48000800
 80047d8:	20000218 	.word	0x20000218
 80047dc:	40020008 	.word	0x40020008

080047e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80047e6:	4b22      	ldr	r3, [pc, #136]	@ (8004870 <MX_DMA_Init+0x90>)
 80047e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ea:	4a21      	ldr	r2, [pc, #132]	@ (8004870 <MX_DMA_Init+0x90>)
 80047ec:	f043 0304 	orr.w	r3, r3, #4
 80047f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80047f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004870 <MX_DMA_Init+0x90>)
 80047f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	607b      	str	r3, [r7, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80047fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004870 <MX_DMA_Init+0x90>)
 8004800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004802:	4a1b      	ldr	r2, [pc, #108]	@ (8004870 <MX_DMA_Init+0x90>)
 8004804:	f043 0301 	orr.w	r3, r3, #1
 8004808:	6493      	str	r3, [r2, #72]	@ 0x48
 800480a:	4b19      	ldr	r3, [pc, #100]	@ (8004870 <MX_DMA_Init+0x90>)
 800480c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004816:	2200      	movs	r2, #0
 8004818:	2100      	movs	r1, #0
 800481a:	200b      	movs	r0, #11
 800481c:	f005 fc7f 	bl	800a11e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004820:	200b      	movs	r0, #11
 8004822:	f005 fc96 	bl	800a152 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004826:	2200      	movs	r2, #0
 8004828:	2100      	movs	r1, #0
 800482a:	200c      	movs	r0, #12
 800482c:	f005 fc77 	bl	800a11e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004830:	200c      	movs	r0, #12
 8004832:	f005 fc8e 	bl	800a152 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004836:	2200      	movs	r2, #0
 8004838:	2100      	movs	r1, #0
 800483a:	200d      	movs	r0, #13
 800483c:	f005 fc6f 	bl	800a11e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004840:	200d      	movs	r0, #13
 8004842:	f005 fc86 	bl	800a152 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004846:	2200      	movs	r2, #0
 8004848:	2100      	movs	r1, #0
 800484a:	200e      	movs	r0, #14
 800484c:	f005 fc67 	bl	800a11e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004850:	200e      	movs	r0, #14
 8004852:	f005 fc7e 	bl	800a152 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004856:	2200      	movs	r2, #0
 8004858:	2100      	movs	r1, #0
 800485a:	200f      	movs	r0, #15
 800485c:	f005 fc5f 	bl	800a11e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004860:	200f      	movs	r0, #15
 8004862:	f005 fc76 	bl	800a152 <HAL_NVIC_EnableIRQ>

}
 8004866:	bf00      	nop
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40021000 	.word	0x40021000

08004874 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b08a      	sub	sp, #40	@ 0x28
 8004878:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800487a:	f107 0314 	add.w	r3, r7, #20
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	605a      	str	r2, [r3, #4]
 8004884:	609a      	str	r2, [r3, #8]
 8004886:	60da      	str	r2, [r3, #12]
 8004888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800488a:	4b67      	ldr	r3, [pc, #412]	@ (8004a28 <MX_GPIO_Init+0x1b4>)
 800488c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800488e:	4a66      	ldr	r2, [pc, #408]	@ (8004a28 <MX_GPIO_Init+0x1b4>)
 8004890:	f043 0304 	orr.w	r3, r3, #4
 8004894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004896:	4b64      	ldr	r3, [pc, #400]	@ (8004a28 <MX_GPIO_Init+0x1b4>)
 8004898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80048a2:	4b61      	ldr	r3, [pc, #388]	@ (8004a28 <MX_GPIO_Init+0x1b4>)
 80048a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a6:	4a60      	ldr	r2, [pc, #384]	@ (8004a28 <MX_GPIO_Init+0x1b4>)
 80048a8:	f043 0320 	orr.w	r3, r3, #32
 80048ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048ae:	4b5e      	ldr	r3, [pc, #376]	@ (8004a28 <MX_GPIO_Init+0x1b4>)
 80048b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b2:	f003 0320 	and.w	r3, r3, #32
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004a28 <MX_GPIO_Init+0x1b4>)
 80048bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048be:	4a5a      	ldr	r2, [pc, #360]	@ (8004a28 <MX_GPIO_Init+0x1b4>)
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048c6:	4b58      	ldr	r3, [pc, #352]	@ (8004a28 <MX_GPIO_Init+0x1b4>)
 80048c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048d2:	4b55      	ldr	r3, [pc, #340]	@ (8004a28 <MX_GPIO_Init+0x1b4>)
 80048d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d6:	4a54      	ldr	r2, [pc, #336]	@ (8004a28 <MX_GPIO_Init+0x1b4>)
 80048d8:	f043 0302 	orr.w	r3, r3, #2
 80048dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048de:	4b52      	ldr	r3, [pc, #328]	@ (8004a28 <MX_GPIO_Init+0x1b4>)
 80048e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	607b      	str	r3, [r7, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 80048ea:	2200      	movs	r2, #0
 80048ec:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80048f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048f4:	f006 f914 	bl	800ab20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80048f8:	2200      	movs	r2, #0
 80048fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80048fe:	484b      	ldr	r0, [pc, #300]	@ (8004a2c <MX_GPIO_Init+0x1b8>)
 8004900:	f006 f90e 	bl	800ab20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004904:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800490a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800490e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004910:	2300      	movs	r3, #0
 8004912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004914:	f107 0314 	add.w	r3, r7, #20
 8004918:	4619      	mov	r1, r3
 800491a:	4844      	ldr	r0, [pc, #272]	@ (8004a2c <MX_GPIO_Init+0x1b8>)
 800491c:	f005 ff66 	bl	800a7ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004920:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004926:	2301      	movs	r3, #1
 8004928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800492e:	2300      	movs	r3, #0
 8004930:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004932:	f107 0314 	add.w	r3, r7, #20
 8004936:	4619      	mov	r1, r3
 8004938:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800493c:	f005 ff56 	bl	800a7ec <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin EMER_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin|EMER_Pin;
 8004940:	f241 0311 	movw	r3, #4113	@ 0x1011
 8004944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004946:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800494a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494c:	2300      	movs	r3, #0
 800494e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004950:	f107 0314 	add.w	r3, r7, #20
 8004954:	4619      	mov	r1, r3
 8004956:	4836      	ldr	r0, [pc, #216]	@ (8004a30 <MX_GPIO_Init+0x1bc>)
 8004958:	f005 ff48 	bl	800a7ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 800495c:	2306      	movs	r3, #6
 800495e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004960:	2300      	movs	r3, #0
 8004962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004964:	2302      	movs	r3, #2
 8004966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004968:	f107 0314 	add.w	r3, r7, #20
 800496c:	4619      	mov	r1, r3
 800496e:	4830      	ldr	r0, [pc, #192]	@ (8004a30 <MX_GPIO_Init+0x1bc>)
 8004970:	f005 ff3c 	bl	800a7ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004974:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800497a:	2301      	movs	r3, #1
 800497c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497e:	2300      	movs	r3, #0
 8004980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004982:	2300      	movs	r3, #0
 8004984:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004986:	f107 0314 	add.w	r3, r7, #20
 800498a:	4619      	mov	r1, r3
 800498c:	4827      	ldr	r0, [pc, #156]	@ (8004a2c <MX_GPIO_Init+0x1b8>)
 800498e:	f005 ff2d 	bl	800a7ec <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin J2_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin|J2_Pin;
 8004992:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004998:	2300      	movs	r3, #0
 800499a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499c:	2300      	movs	r3, #0
 800499e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049a0:	f107 0314 	add.w	r3, r7, #20
 80049a4:	4619      	mov	r1, r3
 80049a6:	4821      	ldr	r0, [pc, #132]	@ (8004a2c <MX_GPIO_Init+0x1b8>)
 80049a8:	f005 ff20 	bl	800a7ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 80049ac:	2340      	movs	r3, #64	@ 0x40
 80049ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80049b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80049b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049b6:	2301      	movs	r3, #1
 80049b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 80049ba:	f107 0314 	add.w	r3, r7, #20
 80049be:	4619      	mov	r1, r3
 80049c0:	481b      	ldr	r0, [pc, #108]	@ (8004a30 <MX_GPIO_Init+0x1bc>)
 80049c2:	f005 ff13 	bl	800a7ec <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 80049c6:	2380      	movs	r3, #128	@ 0x80
 80049c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049ca:	2300      	movs	r3, #0
 80049cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 80049d2:	f107 0314 	add.w	r3, r7, #20
 80049d6:	4619      	mov	r1, r3
 80049d8:	4815      	ldr	r0, [pc, #84]	@ (8004a30 <MX_GPIO_Init+0x1bc>)
 80049da:	f005 ff07 	bl	800a7ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80049de:	2200      	movs	r2, #0
 80049e0:	2100      	movs	r1, #0
 80049e2:	2006      	movs	r0, #6
 80049e4:	f005 fb9b 	bl	800a11e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80049e8:	2006      	movs	r0, #6
 80049ea:	f005 fbb2 	bl	800a152 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80049ee:	2200      	movs	r2, #0
 80049f0:	2100      	movs	r1, #0
 80049f2:	200a      	movs	r0, #10
 80049f4:	f005 fb93 	bl	800a11e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80049f8:	200a      	movs	r0, #10
 80049fa:	f005 fbaa 	bl	800a152 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80049fe:	2200      	movs	r2, #0
 8004a00:	2100      	movs	r1, #0
 8004a02:	2017      	movs	r0, #23
 8004a04:	f005 fb8b 	bl	800a11e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004a08:	2017      	movs	r0, #23
 8004a0a:	f005 fba2 	bl	800a152 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2100      	movs	r1, #0
 8004a12:	2028      	movs	r0, #40	@ 0x28
 8004a14:	f005 fb83 	bl	800a11e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004a18:	2028      	movs	r0, #40	@ 0x28
 8004a1a:	f005 fb9a 	bl	800a152 <HAL_NVIC_EnableIRQ>

}
 8004a1e:	bf00      	nop
 8004a20:	3728      	adds	r7, #40	@ 0x28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	48000800 	.word	0x48000800
 8004a30:	48000400 	.word	0x48000400

08004a34 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b096      	sub	sp, #88	@ 0x58
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a40:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004a4a:	1d3b      	adds	r3, r7, #4
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	2101      	movs	r1, #1
 8004a50:	f00b f80f 	bl	800fa72 <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8004a60:	4619      	mov	r1, r3
 8004a62:	4610      	mov	r0, r2
 8004a64:	f00b fc7f 	bl	8010366 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8004a74:	4619      	mov	r1, r3
 8004a76:	4610      	mov	r0, r2
 8004a78:	f00b fc75 	bl	8010366 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	f00b fc6b 	bl	8010366 <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	ed97 0a02 	vldr	s0, [r7, #8]
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f00b fbee 	bl	8010284 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8004aba:	461a      	mov	r2, r3
 8004abc:	f00b fb68 	bl	8010190 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f00a ff92 	bl	800f9fc <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004aea:	461a      	mov	r2, r3
 8004aec:	f00b fb50 	bl	8010190 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004b02:	461a      	mov	r2, r3
 8004b04:	f00b fb44 	bl	8010190 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f00b fb38 	bl	8010190 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8004b32:	4619      	mov	r1, r3
 8004b34:	eeb0 0a67 	vmov.f32	s0, s15
 8004b38:	4610      	mov	r0, r2
 8004b3a:	f00b fba3 	bl	8010284 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004b50:	461a      	mov	r2, r3
 8004b52:	f00a ff53 	bl	800f9fc <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8004b68:	461a      	mov	r2, r3
 8004b6a:	f00b fb11 	bl	8010190 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8004b80:	461a      	mov	r2, r3
 8004b82:	f00b fb05 	bl	8010190 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8004b98:	461a      	mov	r2, r3
 8004b9a:	f00a ff2f 	bl	800f9fc <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8004baa:	4619      	mov	r1, r3
 8004bac:	4610      	mov	r0, r2
 8004bae:	f00a ff78 	bl	800faa2 <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	f00b fae3 	bl	8010190 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f00b fad7 	bl	8010190 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f00b facb 	bl	8010190 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f00b fb6f 	bl	80102f0 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8004c24:	461a      	mov	r2, r3
 8004c26:	f00b fab3 	bl	8010190 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f00a fedd 	bl	800f9fc <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8004c54:	461a      	mov	r2, r3
 8004c56:	f00b fa9b 	bl	8010190 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 8004c5a:	f107 0310 	add.w	r3, r7, #16
 8004c5e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8004c62:	2204      	movs	r2, #4
 8004c64:	2104      	movs	r1, #4
 8004c66:	f00a ff04 	bl	800fa72 <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8004c76:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	f00b fa88 	bl	8010190 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8004c86:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004c8a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f00b fb2e 	bl	80102f0 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8004ca0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f00b fa73 	bl	8010190 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004cba:	ee07 3a90 	vmov	s15, r3
}
 8004cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8004cc2:	3758      	adds	r7, #88	@ 0x58
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8004cc8:	b5b0      	push	{r4, r5, r7, lr}
 8004cca:	b0a4      	sub	sp, #144	@ 0x90
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6178      	str	r0, [r7, #20]
 8004cd0:	6139      	str	r1, [r7, #16]
 8004cd2:	60fa      	str	r2, [r7, #12]
 8004cd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8004cd8:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8004cec:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004cf0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d10:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004d14:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8004d22:	4bc6      	ldr	r3, [pc, #792]	@ (800503c <Kalman_Start+0x374>)
 8004d24:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8004d28:	461d      	mov	r5, r3
 8004d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d36:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004d3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8004d3e:	f107 031c 	add.w	r3, r7, #28
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	605a      	str	r2, [r3, #4]
 8004d48:	609a      	str	r2, [r3, #8]
 8004d4a:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8004d56:	2300      	movs	r3, #0
 8004d58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004d5c:	e028      	b.n	8004db0 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8004d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4413      	add	r3, r2
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	6979      	ldr	r1, [r7, #20]
 8004d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d70:	3314      	adds	r3, #20
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8004d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	3390      	adds	r3, #144	@ 0x90
 8004d80:	443b      	add	r3, r7
 8004d82:	3b64      	subs	r3, #100	@ 0x64
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	6979      	ldr	r1, [r7, #20]
 8004d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d8c:	3398      	adds	r3, #152	@ 0x98
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8004da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004daa:	3301      	adds	r3, #1
 8004dac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004db4:	2b0f      	cmp	r3, #15
 8004db6:	ddd2      	ble.n	8004d5e <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8004db8:	2300      	movs	r3, #0
 8004dba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004dbe:	e03a      	b.n	8004e36 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8004dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	3390      	adds	r3, #144	@ 0x90
 8004dc8:	443b      	add	r3, r7
 8004dca:	3b74      	subs	r3, #116	@ 0x74
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	6979      	ldr	r1, [r7, #20]
 8004dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8004dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	6979      	ldr	r1, [r7, #20]
 8004de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dec:	3324      	adds	r3, #36	@ 0x24
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8004df4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	3390      	adds	r3, #144	@ 0x90
 8004dfc:	443b      	add	r3, r7
 8004dfe:	3b14      	subs	r3, #20
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	6979      	ldr	r1, [r7, #20]
 8004e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e08:	3328      	adds	r3, #40	@ 0x28
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8004e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	3390      	adds	r3, #144	@ 0x90
 8004e18:	443b      	add	r3, r7
 8004e1a:	3b24      	subs	r3, #36	@ 0x24
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	6979      	ldr	r1, [r7, #20]
 8004e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e24:	332c      	adds	r3, #44	@ 0x2c
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8004e2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e30:	3301      	adds	r3, #1
 8004e32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	ddc0      	ble.n	8004dc0 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2201      	movs	r2, #1
 8004e48:	2104      	movs	r1, #4
 8004e4a:	f00a fe12 	bl	800fa72 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	3310      	adds	r3, #16
 8004e58:	2204      	movs	r2, #4
 8004e5a:	2104      	movs	r1, #4
 8004e5c:	f00a fe09 	bl	800fa72 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	3350      	adds	r3, #80	@ 0x50
 8004e6a:	2204      	movs	r2, #4
 8004e6c:	2104      	movs	r1, #4
 8004e6e:	f00a fe00 	bl	800fa72 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	3390      	adds	r3, #144	@ 0x90
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	2104      	movs	r1, #4
 8004e80:	f00a fdf7 	bl	800fa72 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	33a0      	adds	r3, #160	@ 0xa0
 8004e8e:	2204      	movs	r2, #4
 8004e90:	2101      	movs	r1, #1
 8004e92:	f00a fdee 	bl	800fa72 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	33b0      	adds	r3, #176	@ 0xb0
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	2104      	movs	r1, #4
 8004ea4:	f00a fde5 	bl	800fa72 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	33c8      	adds	r3, #200	@ 0xc8
 8004eb2:	2204      	movs	r2, #4
 8004eb4:	2104      	movs	r1, #4
 8004eb6:	f00a fddc 	bl	800fa72 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	2104      	movs	r1, #4
 8004eca:	f00a fdd2 	bl	800fa72 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8004eda:	2204      	movs	r2, #4
 8004edc:	2101      	movs	r1, #1
 8004ede:	f00a fdc8 	bl	800fa72 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004eee:	2204      	movs	r2, #4
 8004ef0:	2104      	movs	r1, #4
 8004ef2:	f00a fdbe 	bl	800fa72 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004f02:	2204      	movs	r2, #4
 8004f04:	2104      	movs	r1, #4
 8004f06:	f00a fdb4 	bl	800fa72 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004f16:	2201      	movs	r2, #1
 8004f18:	2104      	movs	r1, #4
 8004f1a:	f00a fdaa 	bl	800fa72 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	2104      	movs	r1, #4
 8004f2e:	f00a fda0 	bl	800fa72 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004f3e:	2204      	movs	r2, #4
 8004f40:	2101      	movs	r1, #1
 8004f42:	f00a fd96 	bl	800fa72 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8004f52:	2201      	movs	r2, #1
 8004f54:	2101      	movs	r1, #1
 8004f56:	f00a fd8c 	bl	800fa72 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8004f66:	2201      	movs	r2, #1
 8004f68:	2101      	movs	r1, #1
 8004f6a:	f00a fd82 	bl	800fa72 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	2104      	movs	r1, #4
 8004f7e:	f00a fd78 	bl	800fa72 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004f8e:	2201      	movs	r2, #1
 8004f90:	2104      	movs	r1, #4
 8004f92:	f00a fd6e 	bl	800fa72 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	f00a fd64 	bl	800fa72 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	2101      	movs	r1, #1
 8004fba:	f00a fd5a 	bl	800fa72 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004fca:	2201      	movs	r2, #1
 8004fcc:	2101      	movs	r1, #1
 8004fce:	f00a fd50 	bl	800fa72 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004fde:	2201      	movs	r2, #1
 8004fe0:	2104      	movs	r1, #4
 8004fe2:	f00a fd46 	bl	800fa72 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	f00a fd3c 	bl	800fa72 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005006:	2204      	movs	r2, #4
 8005008:	2104      	movs	r1, #4
 800500a:	f00a fd32 	bl	800fa72 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	33c4      	adds	r3, #196	@ 0xc4
 8005018:	2201      	movs	r2, #1
 800501a:	2101      	movs	r1, #1
 800501c:	f00a fd29 	bl	800fa72 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 800502c:	2201      	movs	r2, #1
 800502e:	2101      	movs	r1, #1
 8005030:	f00a fd1f 	bl	800fa72 <arm_mat_init_f32>
}
 8005034:	bf00      	nop
 8005036:	3790      	adds	r7, #144	@ 0x90
 8005038:	46bd      	mov	sp, r7
 800503a:	bdb0      	pop	{r4, r5, r7, pc}
 800503c:	08012420 	.word	0x08012420

08005040 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005044:	f003 faa7 	bl	8008596 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005048:	f000 f8b8 	bl	80051bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800504c:	f7ff fc12 	bl	8004874 <MX_GPIO_Init>
	MX_DMA_Init();
 8005050:	f7ff fbc6 	bl	80047e0 <MX_DMA_Init>
	MX_ADC1_Init();
 8005054:	f7ff fab8 	bl	80045c8 <MX_ADC1_Init>
	MX_TIM2_Init();
 8005058:	f002 fcb2 	bl	80079c0 <MX_TIM2_Init>
	MX_TIM3_Init();
 800505c:	f002 fcfe 	bl	8007a5c <MX_TIM3_Init>
	MX_TIM4_Init();
 8005060:	f002 fd52 	bl	8007b08 <MX_TIM4_Init>
	MX_TIM5_Init();
 8005064:	f002 fda6 	bl	8007bb4 <MX_TIM5_Init>
	MX_TIM8_Init();
 8005068:	f002 fdfa 	bl	8007c60 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 800506c:	f003 f8bc 	bl	80081e8 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8005070:	f002 feb4 	bl	8007ddc <MX_TIM16_Init>
	MX_TIM1_Init();
 8005074:	f002 fc10 	bl	8007898 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 8005078:	f003 f86c 	bl	8008154 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 800507c:	f001 fd84 	bl	8006b88 <plotter_begin>

	// Initialize position setpoints to current position to prevent startup errors
	prismatic_axis.position = prismatic_encoder.mm;
 8005080:	4b3f      	ldr	r3, [pc, #252]	@ (8005180 <main+0x140>)
 8005082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005084:	4a3f      	ldr	r2, [pc, #252]	@ (8005184 <main+0x144>)
 8005086:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8005088:	4b3f      	ldr	r3, [pc, #252]	@ (8005188 <main+0x148>)
 800508a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508c:	4a3f      	ldr	r2, [pc, #252]	@ (800518c <main+0x14c>)
 800508e:	6013      	str	r3, [r2, #0]

	// Reset all error terms and flags
	prismatic_axis.pos_error = 0.0f;
 8005090:	4b3c      	ldr	r3, [pc, #240]	@ (8005184 <main+0x144>)
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	615a      	str	r2, [r3, #20]
	prismatic_axis.vel_error = 0.0f;
 8005098:	4b3a      	ldr	r3, [pc, #232]	@ (8005184 <main+0x144>)
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	619a      	str	r2, [r3, #24]
	revolute_axis.pos_error = 0.0f;
 80050a0:	4b3a      	ldr	r3, [pc, #232]	@ (800518c <main+0x14c>)
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	615a      	str	r2, [r3, #20]
	revolute_axis.vel_error = 0.0f;
 80050a8:	4b38      	ldr	r3, [pc, #224]	@ (800518c <main+0x14c>)
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	619a      	str	r2, [r3, #24]
	prismatic_axis.trajectory_active = false;
 80050b0:	4b34      	ldr	r3, [pc, #208]	@ (8005184 <main+0x144>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 80050b8:	4b34      	ldr	r3, [pc, #208]	@ (800518c <main+0x14c>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	    if (first_startup && !homing_active) {
 80050c0:	4b33      	ldr	r3, [pc, #204]	@ (8005190 <main+0x150>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d009      	beq.n	80050dc <main+0x9c>
 80050c8:	4b32      	ldr	r3, [pc, #200]	@ (8005194 <main+0x154>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	f083 0301 	eor.w	r3, r3, #1
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <main+0x9c>
	        start_homing_sequence(true);
 80050d6:	2001      	movs	r0, #1
 80050d8:	f000 f8bc 	bl	8005254 <start_homing_sequence>
	    }

		if (b1 && !j1_pressed_previous
 80050dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005198 <main+0x158>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d02b      	beq.n	800513c <main+0xfc>
 80050e4:	4b2d      	ldr	r3, [pc, #180]	@ (800519c <main+0x15c>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d127      	bne.n	800513c <main+0xfc>
				&& motion_sequence_state == MOTION_IDLE) {
 80050ec:	4b2c      	ldr	r3, [pc, #176]	@ (80051a0 <main+0x160>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d123      	bne.n	800513c <main+0xfc>
			start_combined_trajectory(
 80050f4:	4b2b      	ldr	r3, [pc, #172]	@ (80051a4 <main+0x164>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
					sequence_pris_points[trajectory_sequence_index],
 80050f8:	4a2b      	ldr	r2, [pc, #172]	@ (80051a8 <main+0x168>)
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	edd3 7a00 	vldr	s15, [r3]
			start_combined_trajectory(
 8005102:	4b28      	ldr	r3, [pc, #160]	@ (80051a4 <main+0x164>)
 8005104:	781b      	ldrb	r3, [r3, #0]
					sequence_rev_points[trajectory_sequence_index]);
 8005106:	4a29      	ldr	r2, [pc, #164]	@ (80051ac <main+0x16c>)
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	ed93 7a00 	vldr	s14, [r3]
			start_combined_trajectory(
 8005110:	eef0 0a47 	vmov.f32	s1, s14
 8005114:	eeb0 0a67 	vmov.f32	s0, s15
 8005118:	f000 ff6c 	bl	8005ff4 <start_combined_trajectory>
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 800511c:	4b21      	ldr	r3, [pc, #132]	@ (80051a4 <main+0x164>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	1c5a      	adds	r2, r3, #1
					% SEQUENCE_MAX_POINTS;
 8005122:	4b23      	ldr	r3, [pc, #140]	@ (80051b0 <main+0x170>)
 8005124:	fb83 3102 	smull	r3, r1, r3, r2
 8005128:	17d3      	asrs	r3, r2, #31
 800512a:	1ac9      	subs	r1, r1, r3
 800512c:	460b      	mov	r3, r1
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	440b      	add	r3, r1
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	1ad1      	subs	r1, r2, r3
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8005136:	b2ca      	uxtb	r2, r1
 8005138:	4b1a      	ldr	r3, [pc, #104]	@ (80051a4 <main+0x164>)
 800513a:	701a      	strb	r2, [r3, #0]
		}
		j1_pressed_previous = b1;
 800513c:	4b16      	ldr	r3, [pc, #88]	@ (8005198 <main+0x158>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	b2da      	uxtb	r2, r3
 8005142:	4b16      	ldr	r3, [pc, #88]	@ (800519c <main+0x15c>)
 8005144:	701a      	strb	r2, [r3, #0]

	    if (b2 && !j2_pressed_previous && !homing_active && motion_sequence_state == MOTION_IDLE) {
 8005146:	4b1b      	ldr	r3, [pc, #108]	@ (80051b4 <main+0x174>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d011      	beq.n	8005172 <main+0x132>
 800514e:	4b1a      	ldr	r3, [pc, #104]	@ (80051b8 <main+0x178>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10d      	bne.n	8005172 <main+0x132>
 8005156:	4b0f      	ldr	r3, [pc, #60]	@ (8005194 <main+0x154>)
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	f083 0301 	eor.w	r3, r3, #1
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d006      	beq.n	8005172 <main+0x132>
 8005164:	4b0e      	ldr	r3, [pc, #56]	@ (80051a0 <main+0x160>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d102      	bne.n	8005172 <main+0x132>
	        start_homing_sequence(false);
 800516c:	2000      	movs	r0, #0
 800516e:	f000 f871 	bl	8005254 <start_homing_sequence>
	    }
	    j2_pressed_previous = b2;
 8005172:	4b10      	ldr	r3, [pc, #64]	@ (80051b4 <main+0x174>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	b2da      	uxtb	r2, r3
 8005178:	4b0f      	ldr	r3, [pc, #60]	@ (80051b8 <main+0x178>)
 800517a:	701a      	strb	r2, [r3, #0]
	    if (first_startup && !homing_active) {
 800517c:	e7a0      	b.n	80050c0 <main+0x80>
 800517e:	bf00      	nop
 8005180:	2000043c 	.word	0x2000043c
 8005184:	20000278 	.word	0x20000278
 8005188:	20000498 	.word	0x20000498
 800518c:	200002bc 	.word	0x200002bc
 8005190:	2000012f 	.word	0x2000012f
 8005194:	2000036f 	.word	0x2000036f
 8005198:	2000190c 	.word	0x2000190c
 800519c:	20000370 	.word	0x20000370
 80051a0:	20000300 	.word	0x20000300
 80051a4:	20000354 	.word	0x20000354
 80051a8:	08012460 	.word	0x08012460
 80051ac:	08012478 	.word	0x08012478
 80051b0:	2aaaaaab 	.word	0x2aaaaaab
 80051b4:	20001910 	.word	0x20001910
 80051b8:	20000371 	.word	0x20000371

080051bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80051bc:	b580      	push	{r7, lr}
 80051be:	b094      	sub	sp, #80	@ 0x50
 80051c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80051c2:	f107 0318 	add.w	r3, r7, #24
 80051c6:	2238      	movs	r2, #56	@ 0x38
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f00b f9c2 	bl	8010554 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80051d0:	1d3b      	adds	r3, r7, #4
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	605a      	str	r2, [r3, #4]
 80051d8:	609a      	str	r2, [r3, #8]
 80051da:	60da      	str	r2, [r3, #12]
 80051dc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80051de:	2000      	movs	r0, #0
 80051e0:	f005 fcce 	bl	800ab80 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80051e4:	2302      	movs	r3, #2
 80051e6:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051ec:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80051ee:	2340      	movs	r3, #64	@ 0x40
 80051f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051f2:	2302      	movs	r3, #2
 80051f4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80051f6:	2302      	movs	r3, #2
 80051f8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80051fa:	2304      	movs	r3, #4
 80051fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80051fe:	2355      	movs	r3, #85	@ 0x55
 8005200:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005202:	2302      	movs	r3, #2
 8005204:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005206:	2302      	movs	r3, #2
 8005208:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800520a:	2302      	movs	r3, #2
 800520c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800520e:	f107 0318 	add.w	r3, r7, #24
 8005212:	4618      	mov	r0, r3
 8005214:	f005 fd68 	bl	800ace8 <HAL_RCC_OscConfig>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <SystemClock_Config+0x66>
		Error_Handler();
 800521e:	f001 fcab 	bl	8006b78 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005222:	230f      	movs	r3, #15
 8005224:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005226:	2303      	movs	r3, #3
 8005228:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800522e:	2300      	movs	r3, #0
 8005230:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8005236:	1d3b      	adds	r3, r7, #4
 8005238:	2104      	movs	r1, #4
 800523a:	4618      	mov	r0, r3
 800523c:	f006 f866 	bl	800b30c <HAL_RCC_ClockConfig>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <SystemClock_Config+0x8e>
		Error_Handler();
 8005246:	f001 fc97 	bl	8006b78 <Error_Handler>
	}
}
 800524a:	bf00      	nop
 800524c:	3750      	adds	r7, #80	@ 0x50
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	71fb      	strb	r3, [r7, #7]
    if (homing_active) return; // Already homing
 800525e:	4b1b      	ldr	r3, [pc, #108]	@ (80052cc <start_homing_sequence+0x78>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d12e      	bne.n	80052c4 <start_homing_sequence+0x70>

    homing_active = true;
 8005266:	4b19      	ldr	r3, [pc, #100]	@ (80052cc <start_homing_sequence+0x78>)
 8005268:	2201      	movs	r2, #1
 800526a:	701a      	strb	r2, [r3, #0]
    motion_sequence_state = MOTION_IDLE; // Stop any current motion
 800526c:	4b18      	ldr	r3, [pc, #96]	@ (80052d0 <start_homing_sequence+0x7c>)
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]

    // Reset prox counter and photo flags for homing
    prox_count = 0;
 8005272:	4b18      	ldr	r3, [pc, #96]	@ (80052d4 <start_homing_sequence+0x80>)
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
    up_photo = false;
 8005278:	4b17      	ldr	r3, [pc, #92]	@ (80052d8 <start_homing_sequence+0x84>)
 800527a:	2200      	movs	r2, #0
 800527c:	701a      	strb	r2, [r3, #0]
    low_photo = false;
 800527e:	4b17      	ldr	r3, [pc, #92]	@ (80052dc <start_homing_sequence+0x88>)
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]

    if (is_startup) {
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <start_homing_sequence+0x3e>
        // First time startup - do full homing sequence starting with pen up
        homing_state = HOMING_PEN_UP;
 800528a:	4b15      	ldr	r3, [pc, #84]	@ (80052e0 <start_homing_sequence+0x8c>)
 800528c:	2201      	movs	r2, #1
 800528e:	701a      	strb	r2, [r3, #0]
 8005290:	e019      	b.n	80052c6 <start_homing_sequence+0x72>
    } else {
        // J2 pressed - system already knows reference, can go to 0° first
        up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 8005292:	2101      	movs	r1, #1
 8005294:	4813      	ldr	r0, [pc, #76]	@ (80052e4 <start_homing_sequence+0x90>)
 8005296:	f005 fc2b 	bl	800aaf0 <HAL_GPIO_ReadPin>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	bf14      	ite	ne
 80052a0:	2301      	movne	r3, #1
 80052a2:	2300      	moveq	r3, #0
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	4b0c      	ldr	r3, [pc, #48]	@ (80052d8 <start_homing_sequence+0x84>)
 80052a8:	701a      	strb	r2, [r3, #0]

        if (up_photo) {
 80052aa:	4b0b      	ldr	r3, [pc, #44]	@ (80052d8 <start_homing_sequence+0x84>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <start_homing_sequence+0x68>
            // Already at up photo, go to 0° then find prox
            homing_state = HOMING_REV_TO_ZERO_DEG;
 80052b4:	4b0a      	ldr	r3, [pc, #40]	@ (80052e0 <start_homing_sequence+0x8c>)
 80052b6:	2207      	movs	r2, #7
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	e004      	b.n	80052c6 <start_homing_sequence+0x72>
        } else {
            // Not at up photo, need to do prismatic homing first
            homing_state = HOMING_PEN_UP;
 80052bc:	4b08      	ldr	r3, [pc, #32]	@ (80052e0 <start_homing_sequence+0x8c>)
 80052be:	2201      	movs	r2, #1
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	e000      	b.n	80052c6 <start_homing_sequence+0x72>
    if (homing_active) return; // Already homing
 80052c4:	bf00      	nop
        }
    }
}
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	2000036f 	.word	0x2000036f
 80052d0:	20000300 	.word	0x20000300
 80052d4:	20000368 	.word	0x20000368
 80052d8:	2000036c 	.word	0x2000036c
 80052dc:	2000036d 	.word	0x2000036d
 80052e0:	2000036e 	.word	0x2000036e
 80052e4:	48000400 	.word	0x48000400

080052e8 <update_homing_sequence>:

void update_homing_sequence(void) {
 80052e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	ed2d 8b02 	vpush	{d8}
 80052f0:	b095      	sub	sp, #84	@ 0x54
 80052f2:	af00      	add	r7, sp, #0
    if (!homing_active) return;
 80052f4:	4b8f      	ldr	r3, [pc, #572]	@ (8005534 <update_homing_sequence+0x24c>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	f083 0301 	eor.w	r3, r3, #1
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f040 8572 	bne.w	8005de8 <update_homing_sequence+0xb00>

    switch (homing_state) {
 8005304:	4b8c      	ldr	r3, [pc, #560]	@ (8005538 <update_homing_sequence+0x250>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	3b01      	subs	r3, #1
 800530a:	2b0a      	cmp	r3, #10
 800530c:	f200 856e 	bhi.w	8005dec <update_homing_sequence+0xb04>
 8005310:	a201      	add	r2, pc, #4	@ (adr r2, 8005318 <update_homing_sequence+0x30>)
 8005312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005316:	bf00      	nop
 8005318:	08005345 	.word	0x08005345
 800531c:	08005369 	.word	0x08005369
 8005320:	0800539b 	.word	0x0800539b
 8005324:	080056c3 	.word	0x080056c3
 8005328:	0800557d 	.word	0x0800557d
 800532c:	080054e9 	.word	0x080054e9
 8005330:	0800572d 	.word	0x0800572d
 8005334:	08005aef 	.word	0x08005aef
 8005338:	08005b1f 	.word	0x08005b1f
 800533c:	08005c59 	.word	0x08005c59
 8005340:	08005c89 	.word	0x08005c89
        case HOMING_PEN_UP:
            // Ensure pen is up
            plotter_pen_up();
 8005344:	f002 f89e 	bl	8007484 <plotter_pen_up>
            prismatic_axis.command_pos = 0.0f;
 8005348:	4b7c      	ldr	r3, [pc, #496]	@ (800553c <update_homing_sequence+0x254>)
 800534a:	f04f 0200 	mov.w	r2, #0
 800534e:	625a      	str	r2, [r3, #36]	@ 0x24
            revolute_axis.command_pos = 0.0f;
 8005350:	4b7b      	ldr	r3, [pc, #492]	@ (8005540 <update_homing_sequence+0x258>)
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	625a      	str	r2, [r3, #36]	@ 0x24
            motion_delay_timer = 0;
 8005358:	4b7a      	ldr	r3, [pc, #488]	@ (8005544 <update_homing_sequence+0x25c>)
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
            homing_state = HOMING_DELAY_AFTER_PEN_UP;
 800535e:	4b76      	ldr	r3, [pc, #472]	@ (8005538 <update_homing_sequence+0x250>)
 8005360:	2202      	movs	r2, #2
 8005362:	701a      	strb	r2, [r3, #0]
            break;
 8005364:	f000 bd55 	b.w	8005e12 <update_homing_sequence+0xb2a>

        case HOMING_DELAY_AFTER_PEN_UP:
            // Stop motors and wait
            prismatic_axis.command_pos = 0.0f;
 8005368:	4b74      	ldr	r3, [pc, #464]	@ (800553c <update_homing_sequence+0x254>)
 800536a:	f04f 0200 	mov.w	r2, #0
 800536e:	625a      	str	r2, [r3, #36]	@ 0x24
            revolute_axis.command_pos = 0.0f;
 8005370:	4b73      	ldr	r3, [pc, #460]	@ (8005540 <update_homing_sequence+0x258>)
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	625a      	str	r2, [r3, #36]	@ 0x24
            motion_delay_timer++;
 8005378:	4b72      	ldr	r3, [pc, #456]	@ (8005544 <update_homing_sequence+0x25c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3301      	adds	r3, #1
 800537e:	4a71      	ldr	r2, [pc, #452]	@ (8005544 <update_homing_sequence+0x25c>)
 8005380:	6013      	str	r3, [r2, #0]
            if (motion_delay_timer >= 1500) {
 8005382:	4b70      	ldr	r3, [pc, #448]	@ (8005544 <update_homing_sequence+0x25c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f240 52db 	movw	r2, #1499	@ 0x5db
 800538a:	4293      	cmp	r3, r2
 800538c:	f240 8530 	bls.w	8005df0 <update_homing_sequence+0xb08>
                homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 8005390:	4b69      	ldr	r3, [pc, #420]	@ (8005538 <update_homing_sequence+0x250>)
 8005392:	2203      	movs	r2, #3
 8005394:	701a      	strb	r2, [r3, #0]
            }
            break;
 8005396:	f000 bd2b 	b.w	8005df0 <update_homing_sequence+0xb08>

        case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
            // Move prismatic down at constant velocity
            prismatic_axis.vel_error = HOMING_PRIS_VELOCITY - prismatic_axis.kalman_velocity;
 800539a:	4b68      	ldr	r3, [pc, #416]	@ (800553c <update_homing_sequence+0x254>)
 800539c:	edd3 7a07 	vldr	s15, [r3, #28]
 80053a0:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8005548 <update_homing_sequence+0x260>
 80053a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053a8:	4b64      	ldr	r3, [pc, #400]	@ (800553c <update_homing_sequence+0x254>)
 80053aa:	edc3 7a06 	vstr	s15, [r3, #24]
            prismatic_axis.command_pos = PWM_Satuation(
 80053ae:	4b63      	ldr	r3, [pc, #396]	@ (800553c <update_homing_sequence+0x254>)
 80053b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80053b4:	eeb0 0a67 	vmov.f32	s0, s15
 80053b8:	4864      	ldr	r0, [pc, #400]	@ (800554c <update_homing_sequence+0x264>)
 80053ba:	f7fb ff2d 	bl	8001218 <PID_CONTROLLER_Compute>
 80053be:	eeb0 8a40 	vmov.f32	s16, s0
                PID_CONTROLLER_Compute(&prismatic_velocity_pid, prismatic_axis.vel_error),
                ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80053c2:	4b63      	ldr	r3, [pc, #396]	@ (8005550 <update_homing_sequence+0x268>)
 80053c4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
            prismatic_axis.command_pos = PWM_Satuation(
 80053c8:	4610      	mov	r0, r2
 80053ca:	4619      	mov	r1, r3
 80053cc:	f7fb fb7a 	bl	8000ac4 <__aeabi_d2iz>
 80053d0:	4604      	mov	r4, r0
                ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80053d2:	4b5f      	ldr	r3, [pc, #380]	@ (8005550 <update_homing_sequence+0x268>)
 80053d4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80053d8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80053da:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80053de:	62fb      	str	r3, [r7, #44]	@ 0x2c
            prismatic_axis.command_pos = PWM_Satuation(
 80053e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80053e4:	f7fb fb6e 	bl	8000ac4 <__aeabi_d2iz>
 80053e8:	4603      	mov	r3, r0
 80053ea:	4619      	mov	r1, r3
 80053ec:	4620      	mov	r0, r4
 80053ee:	eeb0 0a48 	vmov.f32	s0, s16
 80053f2:	f7fb feaf 	bl	8001154 <PWM_Satuation>
 80053f6:	ee07 0a90 	vmov	s15, r0
 80053fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053fe:	4b4f      	ldr	r3, [pc, #316]	@ (800553c <update_homing_sequence+0x254>)
 8005400:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

            // Add feedforward compensation during homing
            prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd, HOMING_PRIS_VELOCITY / 1000.0f);
 8005404:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005408:	4852      	ldr	r0, [pc, #328]	@ (8005554 <update_homing_sequence+0x26c>)
 800540a:	f7fc fa4d 	bl	80018a8 <PRISMATIC_MOTOR_FFD_Compute>
 800540e:	eef0 7a40 	vmov.f32	s15, s0
 8005412:	4b4a      	ldr	r3, [pc, #296]	@ (800553c <update_homing_sequence+0x254>)
 8005414:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
            prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005418:	4b4f      	ldr	r3, [pc, #316]	@ (8005558 <update_homing_sequence+0x270>)
 800541a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
                                                            revolute_encoder.rads, 0.0f,
                                                            prismatic_encoder.mm / 1000.0f);
 800541e:	4b4f      	ldr	r3, [pc, #316]	@ (800555c <update_homing_sequence+0x274>)
 8005420:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
            prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005424:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 8005560 <update_homing_sequence+0x278>
 8005428:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800542c:	eeb0 1a66 	vmov.f32	s2, s13
 8005430:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 8005564 <update_homing_sequence+0x27c>
 8005434:	eeb0 0a47 	vmov.f32	s0, s14
 8005438:	484b      	ldr	r0, [pc, #300]	@ (8005568 <update_homing_sequence+0x280>)
 800543a:	f7fc fac8 	bl	80019ce <PRISMATIC_MOTOR_DFD_Compute>
 800543e:	eef0 7a40 	vmov.f32	s15, s0
 8005442:	4b3e      	ldr	r3, [pc, #248]	@ (800553c <update_homing_sequence+0x254>)
 8005444:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
            prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005448:	4b3c      	ldr	r3, [pc, #240]	@ (800553c <update_homing_sequence+0x254>)
 800544a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800544e:	4b3b      	ldr	r3, [pc, #236]	@ (800553c <update_homing_sequence+0x254>)
 8005450:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005454:	4b39      	ldr	r3, [pc, #228]	@ (800553c <update_homing_sequence+0x254>)
 8005456:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800545a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800545e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005462:	4b36      	ldr	r3, [pc, #216]	@ (800553c <update_homing_sequence+0x254>)
 8005464:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

            prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005468:	4b34      	ldr	r3, [pc, #208]	@ (800553c <update_homing_sequence+0x254>)
 800546a:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
                                                      ZGX45RGG_400RPM_Constant.U_max,
 800546e:	4b38      	ldr	r3, [pc, #224]	@ (8005550 <update_homing_sequence+0x268>)
 8005470:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
            prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005474:	4610      	mov	r0, r2
 8005476:	4619      	mov	r1, r3
 8005478:	f7fb fb24 	bl	8000ac4 <__aeabi_d2iz>
 800547c:	4604      	mov	r4, r0
                                                      -ZGX45RGG_400RPM_Constant.U_max);
 800547e:	4b34      	ldr	r3, [pc, #208]	@ (8005550 <update_homing_sequence+0x268>)
 8005480:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005484:	623a      	str	r2, [r7, #32]
 8005486:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800548a:	627b      	str	r3, [r7, #36]	@ 0x24
            prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800548c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005490:	f7fb fb18 	bl	8000ac4 <__aeabi_d2iz>
 8005494:	4603      	mov	r3, r0
 8005496:	4619      	mov	r1, r3
 8005498:	4620      	mov	r0, r4
 800549a:	eeb0 0a48 	vmov.f32	s0, s16
 800549e:	f7fb fe59 	bl	8001154 <PWM_Satuation>
 80054a2:	ee07 0a90 	vmov	s15, r0
 80054a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054aa:	4b24      	ldr	r3, [pc, #144]	@ (800553c <update_homing_sequence+0x254>)
 80054ac:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

            if (low_photo) {
 80054b0:	4b2e      	ldr	r3, [pc, #184]	@ (800556c <update_homing_sequence+0x284>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 849c 	beq.w	8005df4 <update_homing_sequence+0xb0c>
                // Found low photo, stop and start delay
                prismatic_axis.command_pos = 0.0f;
 80054bc:	4b1f      	ldr	r3, [pc, #124]	@ (800553c <update_homing_sequence+0x254>)
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	625a      	str	r2, [r3, #36]	@ 0x24
                revolute_axis.command_pos = 0.0f;
 80054c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005540 <update_homing_sequence+0x258>)
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	625a      	str	r2, [r3, #36]	@ 0x24
                motion_delay_timer = 0;
 80054cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005544 <update_homing_sequence+0x25c>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]
                homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 80054d2:	4b19      	ldr	r3, [pc, #100]	@ (8005538 <update_homing_sequence+0x250>)
 80054d4:	2204      	movs	r2, #4
 80054d6:	701a      	strb	r2, [r3, #0]
                low_photo = false; // Reset flag after use
 80054d8:	4b24      	ldr	r3, [pc, #144]	@ (800556c <update_homing_sequence+0x284>)
 80054da:	2200      	movs	r2, #0
 80054dc:	701a      	strb	r2, [r3, #0]
                up_photo = false;  // Reset for next detection
 80054de:	4b24      	ldr	r3, [pc, #144]	@ (8005570 <update_homing_sequence+0x288>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	701a      	strb	r2, [r3, #0]
            }
            break;
 80054e4:	f000 bc86 	b.w	8005df4 <update_homing_sequence+0xb0c>

        case HOMING_DELAY_AFTER_UP_PHOTO:
            // Stop motors and wait
            prismatic_axis.command_pos = 0.0f;
 80054e8:	4b14      	ldr	r3, [pc, #80]	@ (800553c <update_homing_sequence+0x254>)
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	625a      	str	r2, [r3, #36]	@ 0x24
            revolute_axis.command_pos = 0.0f;
 80054f0:	4b13      	ldr	r3, [pc, #76]	@ (8005540 <update_homing_sequence+0x258>)
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	625a      	str	r2, [r3, #36]	@ 0x24
            motion_delay_timer++;
 80054f8:	4b12      	ldr	r3, [pc, #72]	@ (8005544 <update_homing_sequence+0x25c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	4a11      	ldr	r2, [pc, #68]	@ (8005544 <update_homing_sequence+0x25c>)
 8005500:	6013      	str	r3, [r2, #0]
            if (motion_delay_timer >= 1500) {
 8005502:	4b10      	ldr	r3, [pc, #64]	@ (8005544 <update_homing_sequence+0x25c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f240 52db 	movw	r2, #1499	@ 0x5db
 800550a:	4293      	cmp	r3, r2
 800550c:	f240 8474 	bls.w	8005df8 <update_homing_sequence+0xb10>
                if (first_startup) {
 8005510:	4b18      	ldr	r3, [pc, #96]	@ (8005574 <update_homing_sequence+0x28c>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d007      	beq.n	8005528 <update_homing_sequence+0x240>
                    // First startup - find prox sensor first (don't know where 0° is yet)
                    homing_state = HOMING_REV_CW_TO_PROX1;
 8005518:	4b07      	ldr	r3, [pc, #28]	@ (8005538 <update_homing_sequence+0x250>)
 800551a:	2209      	movs	r2, #9
 800551c:	701a      	strb	r2, [r3, #0]
                    prox_count = 0; // Reset prox counter
 800551e:	4b16      	ldr	r3, [pc, #88]	@ (8005578 <update_homing_sequence+0x290>)
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
                } else {
                    // Subsequent homing - go to 0° first (we know where it is)
                    homing_state = HOMING_REV_TO_ZERO_DEG;
                }
            }
            break;
 8005524:	f000 bc68 	b.w	8005df8 <update_homing_sequence+0xb10>
                    homing_state = HOMING_REV_TO_ZERO_DEG;
 8005528:	4b03      	ldr	r3, [pc, #12]	@ (8005538 <update_homing_sequence+0x250>)
 800552a:	2207      	movs	r2, #7
 800552c:	701a      	strb	r2, [r3, #0]
            break;
 800552e:	f000 bc63 	b.w	8005df8 <update_homing_sequence+0xb10>
 8005532:	bf00      	nop
 8005534:	2000036f 	.word	0x2000036f
 8005538:	2000036e 	.word	0x2000036e
 800553c:	20000278 	.word	0x20000278
 8005540:	200002bc 	.word	0x200002bc
 8005544:	20000358 	.word	0x20000358
 8005548:	437a0000 	.word	0x437a0000
 800554c:	2000051c 	.word	0x2000051c
 8005550:	20000080 	.word	0x20000080
 8005554:	20000594 	.word	0x20000594
 8005558:	20000498 	.word	0x20000498
 800555c:	2000043c 	.word	0x2000043c
 8005560:	447a0000 	.word	0x447a0000
 8005564:	00000000 	.word	0x00000000
 8005568:	20000598 	.word	0x20000598
 800556c:	2000036d 	.word	0x2000036d
 8005570:	2000036c 	.word	0x2000036c
 8005574:	2000012f 	.word	0x2000012f
 8005578:	20000368 	.word	0x20000368

        case HOMING_PRIS_UP_TO_UP_PHOTO:
            // Move prismatic up at constant velocity
            prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY - prismatic_axis.kalman_velocity;
 800557c:	4b5d      	ldr	r3, [pc, #372]	@ (80056f4 <update_homing_sequence+0x40c>)
 800557e:	edd3 7a07 	vldr	s15, [r3, #28]
 8005582:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80056f8 <update_homing_sequence+0x410>
 8005586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800558a:	4b5a      	ldr	r3, [pc, #360]	@ (80056f4 <update_homing_sequence+0x40c>)
 800558c:	edc3 7a06 	vstr	s15, [r3, #24]
            prismatic_axis.command_pos = PWM_Satuation(
 8005590:	4b58      	ldr	r3, [pc, #352]	@ (80056f4 <update_homing_sequence+0x40c>)
 8005592:	edd3 7a06 	vldr	s15, [r3, #24]
 8005596:	eeb0 0a67 	vmov.f32	s0, s15
 800559a:	4858      	ldr	r0, [pc, #352]	@ (80056fc <update_homing_sequence+0x414>)
 800559c:	f7fb fe3c 	bl	8001218 <PID_CONTROLLER_Compute>
 80055a0:	eeb0 8a40 	vmov.f32	s16, s0
                PID_CONTROLLER_Compute(&prismatic_velocity_pid, prismatic_axis.vel_error),
                ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80055a4:	4b56      	ldr	r3, [pc, #344]	@ (8005700 <update_homing_sequence+0x418>)
 80055a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
            prismatic_axis.command_pos = PWM_Satuation(
 80055aa:	4610      	mov	r0, r2
 80055ac:	4619      	mov	r1, r3
 80055ae:	f7fb fa89 	bl	8000ac4 <__aeabi_d2iz>
 80055b2:	4604      	mov	r4, r0
                ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80055b4:	4b52      	ldr	r3, [pc, #328]	@ (8005700 <update_homing_sequence+0x418>)
 80055b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80055ba:	61ba      	str	r2, [r7, #24]
 80055bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80055c0:	61fb      	str	r3, [r7, #28]
            prismatic_axis.command_pos = PWM_Satuation(
 80055c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80055c6:	f7fb fa7d 	bl	8000ac4 <__aeabi_d2iz>
 80055ca:	4603      	mov	r3, r0
 80055cc:	4619      	mov	r1, r3
 80055ce:	4620      	mov	r0, r4
 80055d0:	eeb0 0a48 	vmov.f32	s0, s16
 80055d4:	f7fb fdbe 	bl	8001154 <PWM_Satuation>
 80055d8:	ee07 0a90 	vmov	s15, r0
 80055dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055e0:	4b44      	ldr	r3, [pc, #272]	@ (80056f4 <update_homing_sequence+0x40c>)
 80055e2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

            // Add feedforward compensation during homing
            prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd, -HOMING_PRIS_VELOCITY / 1000.0f);
 80055e6:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 80055ea:	4846      	ldr	r0, [pc, #280]	@ (8005704 <update_homing_sequence+0x41c>)
 80055ec:	f7fc f95c 	bl	80018a8 <PRISMATIC_MOTOR_FFD_Compute>
 80055f0:	eef0 7a40 	vmov.f32	s15, s0
 80055f4:	4b3f      	ldr	r3, [pc, #252]	@ (80056f4 <update_homing_sequence+0x40c>)
 80055f6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
            prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80055fa:	4b43      	ldr	r3, [pc, #268]	@ (8005708 <update_homing_sequence+0x420>)
 80055fc:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
                                                            revolute_encoder.rads, 0.0f,
                                                            prismatic_encoder.mm / 1000.0f);
 8005600:	4b42      	ldr	r3, [pc, #264]	@ (800570c <update_homing_sequence+0x424>)
 8005602:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
            prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005606:	ed9f 6a42 	vldr	s12, [pc, #264]	@ 8005710 <update_homing_sequence+0x428>
 800560a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800560e:	eeb0 1a66 	vmov.f32	s2, s13
 8005612:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8005714 <update_homing_sequence+0x42c>
 8005616:	eeb0 0a47 	vmov.f32	s0, s14
 800561a:	483f      	ldr	r0, [pc, #252]	@ (8005718 <update_homing_sequence+0x430>)
 800561c:	f7fc f9d7 	bl	80019ce <PRISMATIC_MOTOR_DFD_Compute>
 8005620:	eef0 7a40 	vmov.f32	s15, s0
 8005624:	4b33      	ldr	r3, [pc, #204]	@ (80056f4 <update_homing_sequence+0x40c>)
 8005626:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
            prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 800562a:	4b32      	ldr	r3, [pc, #200]	@ (80056f4 <update_homing_sequence+0x40c>)
 800562c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005630:	4b30      	ldr	r3, [pc, #192]	@ (80056f4 <update_homing_sequence+0x40c>)
 8005632:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005636:	4b2f      	ldr	r3, [pc, #188]	@ (80056f4 <update_homing_sequence+0x40c>)
 8005638:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800563c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005644:	4b2b      	ldr	r3, [pc, #172]	@ (80056f4 <update_homing_sequence+0x40c>)
 8005646:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

            prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800564a:	4b2a      	ldr	r3, [pc, #168]	@ (80056f4 <update_homing_sequence+0x40c>)
 800564c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
                                                      ZGX45RGG_400RPM_Constant.U_max,
 8005650:	4b2b      	ldr	r3, [pc, #172]	@ (8005700 <update_homing_sequence+0x418>)
 8005652:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
            prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005656:	4610      	mov	r0, r2
 8005658:	4619      	mov	r1, r3
 800565a:	f7fb fa33 	bl	8000ac4 <__aeabi_d2iz>
 800565e:	4604      	mov	r4, r0
                                                      -ZGX45RGG_400RPM_Constant.U_max);
 8005660:	4b27      	ldr	r3, [pc, #156]	@ (8005700 <update_homing_sequence+0x418>)
 8005662:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005666:	613a      	str	r2, [r7, #16]
 8005668:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800566c:	617b      	str	r3, [r7, #20]
            prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800566e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005672:	f7fb fa27 	bl	8000ac4 <__aeabi_d2iz>
 8005676:	4603      	mov	r3, r0
 8005678:	4619      	mov	r1, r3
 800567a:	4620      	mov	r0, r4
 800567c:	eeb0 0a48 	vmov.f32	s0, s16
 8005680:	f7fb fd68 	bl	8001154 <PWM_Satuation>
 8005684:	ee07 0a90 	vmov	s15, r0
 8005688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800568c:	4b19      	ldr	r3, [pc, #100]	@ (80056f4 <update_homing_sequence+0x40c>)
 800568e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

            if (up_photo) {
 8005692:	4b22      	ldr	r3, [pc, #136]	@ (800571c <update_homing_sequence+0x434>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 83af 	beq.w	8005dfc <update_homing_sequence+0xb14>
                // Found up photo, stop and start delay
                prismatic_axis.command_pos = 0.0f;
 800569e:	4b15      	ldr	r3, [pc, #84]	@ (80056f4 <update_homing_sequence+0x40c>)
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	625a      	str	r2, [r3, #36]	@ 0x24
                revolute_axis.command_pos = 0.0f;
 80056a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005720 <update_homing_sequence+0x438>)
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	625a      	str	r2, [r3, #36]	@ 0x24
                motion_delay_timer = 0;
 80056ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005724 <update_homing_sequence+0x43c>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
                homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 80056b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005728 <update_homing_sequence+0x440>)
 80056b6:	2206      	movs	r2, #6
 80056b8:	701a      	strb	r2, [r3, #0]
                up_photo = false; // Reset flag after use
 80056ba:	4b18      	ldr	r3, [pc, #96]	@ (800571c <update_homing_sequence+0x434>)
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
            }
            break;
 80056c0:	e39c      	b.n	8005dfc <update_homing_sequence+0xb14>

        case HOMING_DELAY_AFTER_LOW_PHOTO:
            // Stop motors and wait
            prismatic_axis.command_pos = 0.0f;
 80056c2:	4b0c      	ldr	r3, [pc, #48]	@ (80056f4 <update_homing_sequence+0x40c>)
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	625a      	str	r2, [r3, #36]	@ 0x24
            revolute_axis.command_pos = 0.0f;
 80056ca:	4b15      	ldr	r3, [pc, #84]	@ (8005720 <update_homing_sequence+0x438>)
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	625a      	str	r2, [r3, #36]	@ 0x24
            motion_delay_timer++;
 80056d2:	4b14      	ldr	r3, [pc, #80]	@ (8005724 <update_homing_sequence+0x43c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3301      	adds	r3, #1
 80056d8:	4a12      	ldr	r2, [pc, #72]	@ (8005724 <update_homing_sequence+0x43c>)
 80056da:	6013      	str	r3, [r2, #0]
            if (motion_delay_timer >= 1500) {
 80056dc:	4b11      	ldr	r3, [pc, #68]	@ (8005724 <update_homing_sequence+0x43c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f240 52db 	movw	r2, #1499	@ 0x5db
 80056e4:	4293      	cmp	r3, r2
 80056e6:	f240 838b 	bls.w	8005e00 <update_homing_sequence+0xb18>
                homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 80056ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005728 <update_homing_sequence+0x440>)
 80056ec:	2205      	movs	r2, #5
 80056ee:	701a      	strb	r2, [r3, #0]
            }
            break;
 80056f0:	e386      	b.n	8005e00 <update_homing_sequence+0xb18>
 80056f2:	bf00      	nop
 80056f4:	20000278 	.word	0x20000278
 80056f8:	c37a0000 	.word	0xc37a0000
 80056fc:	2000051c 	.word	0x2000051c
 8005700:	20000080 	.word	0x20000080
 8005704:	20000594 	.word	0x20000594
 8005708:	20000498 	.word	0x20000498
 800570c:	2000043c 	.word	0x2000043c
 8005710:	447a0000 	.word	0x447a0000
 8005714:	00000000 	.word	0x00000000
 8005718:	20000598 	.word	0x20000598
 800571c:	2000036c 	.word	0x2000036c
 8005720:	200002bc 	.word	0x200002bc
 8005724:	20000358 	.word	0x20000358
 8005728:	2000036e 	.word	0x2000036e
            static Trapezoidal_EvaStruct revZeroEva;
            static Trapezoidal_GenStruct revZeroGen;
            static float rev_zero_initial_pos;
            static float rev_zero_target_pos;

            if (!rev_to_zero_trajectory_started) {
 800572c:	4bc4      	ldr	r3, [pc, #784]	@ (8005a40 <update_homing_sequence+0x758>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f083 0301 	eor.w	r3, r3, #1
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d062      	beq.n	8005800 <update_homing_sequence+0x518>
                // Get current position and calculate shortest path to 0 degrees
                float current_rev_pos = revolute_encoder.rads;
 800573a:	4bc2      	ldr	r3, [pc, #776]	@ (8005a44 <update_homing_sequence+0x75c>)
 800573c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573e:	647b      	str	r3, [r7, #68]	@ 0x44
                float normalized_current = normalize_angle(current_rev_pos);
 8005740:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8005744:	f000 fb6c 	bl	8005e20 <normalize_angle>
 8005748:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
                float current_deg = normalized_current * 180.0f / PI;
 800574c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005750:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8005a48 <update_homing_sequence+0x760>
 8005754:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005758:	eddf 6abc 	vldr	s13, [pc, #752]	@ 8005a4c <update_homing_sequence+0x764>
 800575c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005760:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

                // Calculate shortest movement to 0 degrees
                float target_deg = 0.0f;
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	63bb      	str	r3, [r7, #56]	@ 0x38
                float movement_deg = calculate_movement_deg(current_deg, target_deg);
 800576a:	edd7 0a0e 	vldr	s1, [r7, #56]	@ 0x38
 800576e:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8005772:	f000 fb7b 	bl	8005e6c <calculate_movement_deg>
 8005776:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34

                // Convert movement to radians and apply to absolute position
                float movement_rad = movement_deg * PI / 180.0f;
 800577a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800577e:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8005a4c <update_homing_sequence+0x764>
 8005782:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005786:	eddf 6ab0 	vldr	s13, [pc, #704]	@ 8005a48 <update_homing_sequence+0x760>
 800578a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800578e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

                // Store initial and target positions
                rev_zero_initial_pos = current_rev_pos;
 8005792:	4aaf      	ldr	r2, [pc, #700]	@ (8005a50 <update_homing_sequence+0x768>)
 8005794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005796:	6013      	str	r3, [r2, #0]
                rev_zero_target_pos = current_rev_pos + movement_rad;
 8005798:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800579c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80057a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057a4:	4bab      	ldr	r3, [pc, #684]	@ (8005a54 <update_homing_sequence+0x76c>)
 80057a6:	edc3 7a00 	vstr	s15, [r3]

                // Generate trajectory from current position to calculated target
                Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos, rev_zero_target_pos,
 80057aa:	4ba9      	ldr	r3, [pc, #676]	@ (8005a50 <update_homing_sequence+0x768>)
 80057ac:	ed93 8a00 	vldr	s16, [r3]
 80057b0:	4ba8      	ldr	r3, [pc, #672]	@ (8005a54 <update_homing_sequence+0x76c>)
 80057b2:	edd3 8a00 	vldr	s17, [r3]
                                     ZGX45RGG_150RPM_Constant.traject_qd_max,
 80057b6:	4ba8      	ldr	r3, [pc, #672]	@ (8005a58 <update_homing_sequence+0x770>)
 80057b8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
                Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos, rev_zero_target_pos,
 80057bc:	4610      	mov	r0, r2
 80057be:	4619      	mov	r1, r3
 80057c0:	f7fb f9c8 	bl	8000b54 <__aeabi_d2f>
 80057c4:	4604      	mov	r4, r0
                                     ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80057c6:	4ba4      	ldr	r3, [pc, #656]	@ (8005a58 <update_homing_sequence+0x770>)
 80057c8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
                Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos, rev_zero_target_pos,
 80057cc:	4610      	mov	r0, r2
 80057ce:	4619      	mov	r1, r3
 80057d0:	f7fb f9c0 	bl	8000b54 <__aeabi_d2f>
 80057d4:	4603      	mov	r3, r0
 80057d6:	ee01 3a90 	vmov	s3, r3
 80057da:	ee01 4a10 	vmov	s2, r4
 80057de:	eef0 0a68 	vmov.f32	s1, s17
 80057e2:	eeb0 0a48 	vmov.f32	s0, s16
 80057e6:	489d      	ldr	r0, [pc, #628]	@ (8005a5c <update_homing_sequence+0x774>)
 80057e8:	f7fe fa6a 	bl	8003cc0 <Trapezoidal_Generator>

                // Reset trajectory evaluation
                revZeroEva.t = 0.0f;
 80057ec:	4b9c      	ldr	r3, [pc, #624]	@ (8005a60 <update_homing_sequence+0x778>)
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	60da      	str	r2, [r3, #12]
                revZeroEva.isFinised = false;
 80057f4:	4b9a      	ldr	r3, [pc, #616]	@ (8005a60 <update_homing_sequence+0x778>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	741a      	strb	r2, [r3, #16]

                rev_to_zero_trajectory_started = true;
 80057fa:	4b91      	ldr	r3, [pc, #580]	@ (8005a40 <update_homing_sequence+0x758>)
 80057fc:	2201      	movs	r2, #1
 80057fe:	701a      	strb	r2, [r3, #0]
            }

            // Update trajectory
            if (!revZeroEva.isFinised) {
 8005800:	4b97      	ldr	r3, [pc, #604]	@ (8005a60 <update_homing_sequence+0x778>)
 8005802:	7c1b      	ldrb	r3, [r3, #16]
 8005804:	f083 0301 	eor.w	r3, r3, #1
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 82fa 	beq.w	8005e04 <update_homing_sequence+0xb1c>
                Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 8005810:	4b8f      	ldr	r3, [pc, #572]	@ (8005a50 <update_homing_sequence+0x768>)
 8005812:	ed93 8a00 	vldr	s16, [r3]
 8005816:	4b8f      	ldr	r3, [pc, #572]	@ (8005a54 <update_homing_sequence+0x76c>)
 8005818:	edd3 8a00 	vldr	s17, [r3]
                                     rev_zero_initial_pos, rev_zero_target_pos,
                                     ZGX45RGG_150RPM_Constant.traject_qd_max,
 800581c:	4b8e      	ldr	r3, [pc, #568]	@ (8005a58 <update_homing_sequence+0x770>)
 800581e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
                Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 8005822:	4610      	mov	r0, r2
 8005824:	4619      	mov	r1, r3
 8005826:	f7fb f995 	bl	8000b54 <__aeabi_d2f>
 800582a:	4604      	mov	r4, r0
                                     ZGX45RGG_150RPM_Constant.traject_qdd_max);
 800582c:	4b8a      	ldr	r3, [pc, #552]	@ (8005a58 <update_homing_sequence+0x770>)
 800582e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
                Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 8005832:	4610      	mov	r0, r2
 8005834:	4619      	mov	r1, r3
 8005836:	f7fb f98d 	bl	8000b54 <__aeabi_d2f>
 800583a:	4603      	mov	r3, r0
 800583c:	ee01 3a90 	vmov	s3, r3
 8005840:	ee01 4a10 	vmov	s2, r4
 8005844:	eef0 0a68 	vmov.f32	s1, s17
 8005848:	eeb0 0a48 	vmov.f32	s0, s16
 800584c:	4984      	ldr	r1, [pc, #528]	@ (8005a60 <update_homing_sequence+0x778>)
 800584e:	4883      	ldr	r0, [pc, #524]	@ (8005a5c <update_homing_sequence+0x774>)
 8005850:	f7fe faf8 	bl	8003e44 <Trapezoidal_Evaluated>

                revolute_axis.position = revZeroEva.setposition;
 8005854:	4b82      	ldr	r3, [pc, #520]	@ (8005a60 <update_homing_sequence+0x778>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a82      	ldr	r2, [pc, #520]	@ (8005a64 <update_homing_sequence+0x77c>)
 800585a:	6013      	str	r3, [r2, #0]
                revolute_axis.velocity = revZeroEva.setvelocity;
 800585c:	4b80      	ldr	r3, [pc, #512]	@ (8005a60 <update_homing_sequence+0x778>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	4a80      	ldr	r2, [pc, #512]	@ (8005a64 <update_homing_sequence+0x77c>)
 8005862:	6053      	str	r3, [r2, #4]

                // Use normal revolute control with trajectory
                revolute_axis.pos_error = revolute_axis.position - normalize_angle(revolute_encoder.rads);
 8005864:	4b7f      	ldr	r3, [pc, #508]	@ (8005a64 <update_homing_sequence+0x77c>)
 8005866:	ed93 8a00 	vldr	s16, [r3]
 800586a:	4b76      	ldr	r3, [pc, #472]	@ (8005a44 <update_homing_sequence+0x75c>)
 800586c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005870:	eeb0 0a67 	vmov.f32	s0, s15
 8005874:	f000 fad4 	bl	8005e20 <normalize_angle>
 8005878:	eef0 7a40 	vmov.f32	s15, s0
 800587c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005880:	4b78      	ldr	r3, [pc, #480]	@ (8005a64 <update_homing_sequence+0x77c>)
 8005882:	edc3 7a05 	vstr	s15, [r3, #20]

                // Ensure error uses the shortest path for control
                if (revolute_axis.pos_error > PI) {
 8005886:	4b77      	ldr	r3, [pc, #476]	@ (8005a64 <update_homing_sequence+0x77c>)
 8005888:	edd3 7a05 	vldr	s15, [r3, #20]
 800588c:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8005a4c <update_homing_sequence+0x764>
 8005890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005898:	dd09      	ble.n	80058ae <update_homing_sequence+0x5c6>
                    revolute_axis.pos_error -= 2.0f * PI;
 800589a:	4b72      	ldr	r3, [pc, #456]	@ (8005a64 <update_homing_sequence+0x77c>)
 800589c:	edd3 7a05 	vldr	s15, [r3, #20]
 80058a0:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8005a68 <update_homing_sequence+0x780>
 80058a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058a8:	4b6e      	ldr	r3, [pc, #440]	@ (8005a64 <update_homing_sequence+0x77c>)
 80058aa:	edc3 7a05 	vstr	s15, [r3, #20]
                }
                if (revolute_axis.pos_error < -PI) {
 80058ae:	4b6d      	ldr	r3, [pc, #436]	@ (8005a64 <update_homing_sequence+0x77c>)
 80058b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80058b4:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8005a6c <update_homing_sequence+0x784>
 80058b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c0:	d509      	bpl.n	80058d6 <update_homing_sequence+0x5ee>
                    revolute_axis.pos_error += 2.0f * PI;
 80058c2:	4b68      	ldr	r3, [pc, #416]	@ (8005a64 <update_homing_sequence+0x77c>)
 80058c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80058c8:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8005a68 <update_homing_sequence+0x780>
 80058cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058d0:	4b64      	ldr	r3, [pc, #400]	@ (8005a64 <update_homing_sequence+0x77c>)
 80058d2:	edc3 7a05 	vstr	s15, [r3, #20]
                }

                revolute_axis.command_vel = PWM_Satuation(
 80058d6:	4b63      	ldr	r3, [pc, #396]	@ (8005a64 <update_homing_sequence+0x77c>)
 80058d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80058dc:	eeb0 0a67 	vmov.f32	s0, s15
 80058e0:	4863      	ldr	r0, [pc, #396]	@ (8005a70 <update_homing_sequence+0x788>)
 80058e2:	f7fb fc99 	bl	8001218 <PID_CONTROLLER_Compute>
 80058e6:	eeb0 8a40 	vmov.f32	s16, s0
                    PID_CONTROLLER_Compute(&revolute_position_pid, revolute_axis.pos_error),
                    ZGX45RGG_150RPM_Constant.qd_max, -ZGX45RGG_150RPM_Constant.qd_max);
 80058ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005a58 <update_homing_sequence+0x770>)
 80058ec:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
                revolute_axis.command_vel = PWM_Satuation(
 80058f0:	4610      	mov	r0, r2
 80058f2:	4619      	mov	r1, r3
 80058f4:	f7fb f8e6 	bl	8000ac4 <__aeabi_d2iz>
 80058f8:	4604      	mov	r4, r0
                    ZGX45RGG_150RPM_Constant.qd_max, -ZGX45RGG_150RPM_Constant.qd_max);
 80058fa:	4b57      	ldr	r3, [pc, #348]	@ (8005a58 <update_homing_sequence+0x770>)
 80058fc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005900:	60ba      	str	r2, [r7, #8]
 8005902:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005906:	60fb      	str	r3, [r7, #12]
                revolute_axis.command_vel = PWM_Satuation(
 8005908:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800590c:	f7fb f8da 	bl	8000ac4 <__aeabi_d2iz>
 8005910:	4603      	mov	r3, r0
 8005912:	4619      	mov	r1, r3
 8005914:	4620      	mov	r0, r4
 8005916:	eeb0 0a48 	vmov.f32	s0, s16
 800591a:	f7fb fc1b 	bl	8001154 <PWM_Satuation>
 800591e:	ee07 0a90 	vmov	s15, r0
 8005922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005926:	4b4f      	ldr	r3, [pc, #316]	@ (8005a64 <update_homing_sequence+0x77c>)
 8005928:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

                // Add velocity feedforward for trajectory
                revolute_axis.vel_error = revolute_axis.command_vel + revolute_axis.velocity - revolute_axis.kalman_velocity;
 800592c:	4b4d      	ldr	r3, [pc, #308]	@ (8005a64 <update_homing_sequence+0x77c>)
 800592e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8005932:	4b4c      	ldr	r3, [pc, #304]	@ (8005a64 <update_homing_sequence+0x77c>)
 8005934:	edd3 7a01 	vldr	s15, [r3, #4]
 8005938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800593c:	4b49      	ldr	r3, [pc, #292]	@ (8005a64 <update_homing_sequence+0x77c>)
 800593e:	edd3 7a07 	vldr	s15, [r3, #28]
 8005942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005946:	4b47      	ldr	r3, [pc, #284]	@ (8005a64 <update_homing_sequence+0x77c>)
 8005948:	edc3 7a06 	vstr	s15, [r3, #24]

                revolute_axis.command_pos = PWM_Satuation(
 800594c:	4b45      	ldr	r3, [pc, #276]	@ (8005a64 <update_homing_sequence+0x77c>)
 800594e:	edd3 7a06 	vldr	s15, [r3, #24]
 8005952:	eeb0 0a67 	vmov.f32	s0, s15
 8005956:	4847      	ldr	r0, [pc, #284]	@ (8005a74 <update_homing_sequence+0x78c>)
 8005958:	f7fb fc5e 	bl	8001218 <PID_CONTROLLER_Compute>
 800595c:	eeb0 8a40 	vmov.f32	s16, s0
                    PID_CONTROLLER_Compute(&revolute_velocity_pid, revolute_axis.vel_error),
                    ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8005960:	4b3d      	ldr	r3, [pc, #244]	@ (8005a58 <update_homing_sequence+0x770>)
 8005962:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
                revolute_axis.command_pos = PWM_Satuation(
 8005966:	4610      	mov	r0, r2
 8005968:	4619      	mov	r1, r3
 800596a:	f7fb f8ab 	bl	8000ac4 <__aeabi_d2iz>
 800596e:	4604      	mov	r4, r0
                    ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8005970:	4b39      	ldr	r3, [pc, #228]	@ (8005a58 <update_homing_sequence+0x770>)
 8005972:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005976:	603a      	str	r2, [r7, #0]
 8005978:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800597c:	607b      	str	r3, [r7, #4]
                revolute_axis.command_pos = PWM_Satuation(
 800597e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005982:	f7fb f89f 	bl	8000ac4 <__aeabi_d2iz>
 8005986:	4603      	mov	r3, r0
 8005988:	4619      	mov	r1, r3
 800598a:	4620      	mov	r0, r4
 800598c:	eeb0 0a48 	vmov.f32	s0, s16
 8005990:	f7fb fbe0 	bl	8001154 <PWM_Satuation>
 8005994:	ee07 0a90 	vmov	s15, r0
 8005998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800599c:	4b31      	ldr	r3, [pc, #196]	@ (8005a64 <update_homing_sequence+0x77c>)
 800599e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

                // Add feedforward compensation
                revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd, revolute_axis.velocity);
 80059a2:	4b30      	ldr	r3, [pc, #192]	@ (8005a64 <update_homing_sequence+0x77c>)
 80059a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80059a8:	eeb0 0a67 	vmov.f32	s0, s15
 80059ac:	4832      	ldr	r0, [pc, #200]	@ (8005a78 <update_homing_sequence+0x790>)
 80059ae:	f7fb fdf3 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 80059b2:	eef0 7a40 	vmov.f32	s15, s0
 80059b6:	4b2b      	ldr	r3, [pc, #172]	@ (8005a64 <update_homing_sequence+0x77c>)
 80059b8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
                revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80059bc:	4b21      	ldr	r3, [pc, #132]	@ (8005a44 <update_homing_sequence+0x75c>)
 80059be:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
                                                              revolute_encoder.rads, 0.0f,
                                                              prismatic_encoder.mm / 1000.0f);
 80059c2:	4b2e      	ldr	r3, [pc, #184]	@ (8005a7c <update_homing_sequence+0x794>)
 80059c4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
                revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80059c8:	ed9f 6a2d 	vldr	s12, [pc, #180]	@ 8005a80 <update_homing_sequence+0x798>
 80059cc:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80059d0:	eeb0 1a66 	vmov.f32	s2, s13
 80059d4:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8005a84 <update_homing_sequence+0x79c>
 80059d8:	eeb0 0a47 	vmov.f32	s0, s14
 80059dc:	482a      	ldr	r0, [pc, #168]	@ (8005a88 <update_homing_sequence+0x7a0>)
 80059de:	f7fb fe6f 	bl	80016c0 <REVOLUTE_MOTOR_DFD_Compute>
 80059e2:	eef0 7a40 	vmov.f32	s15, s0
 80059e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a64 <update_homing_sequence+0x77c>)
 80059e8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
                revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 80059ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005a64 <update_homing_sequence+0x77c>)
 80059ee:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80059f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005a64 <update_homing_sequence+0x77c>)
 80059f4:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80059f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005a64 <update_homing_sequence+0x77c>)
 80059fa:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80059fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a06:	4b17      	ldr	r3, [pc, #92]	@ (8005a64 <update_homing_sequence+0x77c>)
 8005a08:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

                revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005a0c:	4b15      	ldr	r3, [pc, #84]	@ (8005a64 <update_homing_sequence+0x77c>)
 8005a0e:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
                                                         ZGX45RGG_150RPM_Constant.U_max,
 8005a12:	4b11      	ldr	r3, [pc, #68]	@ (8005a58 <update_homing_sequence+0x770>)
 8005a14:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
                revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	f7fb f852 	bl	8000ac4 <__aeabi_d2iz>
 8005a20:	4604      	mov	r4, r0
                                                         -ZGX45RGG_150RPM_Constant.U_max);
 8005a22:	4b0d      	ldr	r3, [pc, #52]	@ (8005a58 <update_homing_sequence+0x770>)
 8005a24:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005a28:	4615      	mov	r5, r2
 8005a2a:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
                revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005a2e:	4628      	mov	r0, r5
 8005a30:	4631      	mov	r1, r6
 8005a32:	f7fb f847 	bl	8000ac4 <__aeabi_d2iz>
 8005a36:	4603      	mov	r3, r0
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	e026      	b.n	8005a8c <update_homing_sequence+0x7a4>
 8005a3e:	bf00      	nop
 8005a40:	20000372 	.word	0x20000372
 8005a44:	20000498 	.word	0x20000498
 8005a48:	43340000 	.word	0x43340000
 8005a4c:	40490fdb 	.word	0x40490fdb
 8005a50:	20000374 	.word	0x20000374
 8005a54:	20000378 	.word	0x20000378
 8005a58:	20000000 	.word	0x20000000
 8005a5c:	2000037c 	.word	0x2000037c
 8005a60:	20000390 	.word	0x20000390
 8005a64:	200002bc 	.word	0x200002bc
 8005a68:	40c90fdb 	.word	0x40c90fdb
 8005a6c:	c0490fdb 	.word	0xc0490fdb
 8005a70:	20000544 	.word	0x20000544
 8005a74:	2000056c 	.word	0x2000056c
 8005a78:	200005a0 	.word	0x200005a0
 8005a7c:	2000043c 	.word	0x2000043c
 8005a80:	447a0000 	.word	0x447a0000
 8005a84:	00000000 	.word	0x00000000
 8005a88:	200005a4 	.word	0x200005a4
 8005a8c:	eeb0 0a48 	vmov.f32	s0, s16
 8005a90:	f7fb fb60 	bl	8001154 <PWM_Satuation>
 8005a94:	ee07 0a90 	vmov	s15, r0
 8005a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a9c:	4bba      	ldr	r3, [pc, #744]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005a9e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

                if (revZeroEva.isFinised) {
 8005aa2:	4bba      	ldr	r3, [pc, #744]	@ (8005d8c <update_homing_sequence+0xaa4>)
 8005aa4:	7c1b      	ldrb	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 81ac 	beq.w	8005e04 <update_homing_sequence+0xb1c>
                    // Trajectory complete, stop and start delay
                    revolute_axis.command_pos = 0.0f;
 8005aac:	4bb6      	ldr	r3, [pc, #728]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	625a      	str	r2, [r3, #36]	@ 0x24
                    prismatic_axis.command_pos = 0.0f;
 8005ab4:	4bb6      	ldr	r3, [pc, #728]	@ (8005d90 <update_homing_sequence+0xaa8>)
 8005ab6:	f04f 0200 	mov.w	r2, #0
 8005aba:	625a      	str	r2, [r3, #36]	@ 0x24
                    revolute_axis.velocity = 0.0f;
 8005abc:	4bb2      	ldr	r3, [pc, #712]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	605a      	str	r2, [r3, #4]
                    revolute_axis.ffd = 0.0f;
 8005ac4:	4bb0      	ldr	r3, [pc, #704]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	631a      	str	r2, [r3, #48]	@ 0x30
                    revolute_axis.dfd = 0.0f;
 8005acc:	4bae      	ldr	r3, [pc, #696]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005ace:	f04f 0200 	mov.w	r2, #0
 8005ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

                    motion_delay_timer = 0;
 8005ad4:	4baf      	ldr	r3, [pc, #700]	@ (8005d94 <update_homing_sequence+0xaac>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]
                    homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 8005ada:	4baf      	ldr	r3, [pc, #700]	@ (8005d98 <update_homing_sequence+0xab0>)
 8005adc:	2208      	movs	r2, #8
 8005ade:	701a      	strb	r2, [r3, #0]
                    prox_count = 0; // Reset prox counter for next stage
 8005ae0:	4bae      	ldr	r3, [pc, #696]	@ (8005d9c <update_homing_sequence+0xab4>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]
                    rev_to_zero_trajectory_started = false; // Reset for next time
 8005ae6:	4bae      	ldr	r3, [pc, #696]	@ (8005da0 <update_homing_sequence+0xab8>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 8005aec:	e18a      	b.n	8005e04 <update_homing_sequence+0xb1c>

        case HOMING_DELAY_AFTER_ZERO_DEG:
            // Stop motors and wait
            prismatic_axis.command_pos = 0.0f;
 8005aee:	4ba8      	ldr	r3, [pc, #672]	@ (8005d90 <update_homing_sequence+0xaa8>)
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	625a      	str	r2, [r3, #36]	@ 0x24
            revolute_axis.command_pos = 0.0f;
 8005af6:	4ba4      	ldr	r3, [pc, #656]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	625a      	str	r2, [r3, #36]	@ 0x24
            motion_delay_timer++;
 8005afe:	4ba5      	ldr	r3, [pc, #660]	@ (8005d94 <update_homing_sequence+0xaac>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3301      	adds	r3, #1
 8005b04:	4aa3      	ldr	r2, [pc, #652]	@ (8005d94 <update_homing_sequence+0xaac>)
 8005b06:	6013      	str	r3, [r2, #0]
            if (motion_delay_timer >= 1500) {
 8005b08:	4ba2      	ldr	r3, [pc, #648]	@ (8005d94 <update_homing_sequence+0xaac>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f240 52db 	movw	r2, #1499	@ 0x5db
 8005b10:	4293      	cmp	r3, r2
 8005b12:	f240 8179 	bls.w	8005e08 <update_homing_sequence+0xb20>
                homing_state = HOMING_REV_CW_TO_PROX1;
 8005b16:	4ba0      	ldr	r3, [pc, #640]	@ (8005d98 <update_homing_sequence+0xab0>)
 8005b18:	2209      	movs	r2, #9
 8005b1a:	701a      	strb	r2, [r3, #0]
            }
            break;
 8005b1c:	e174      	b.n	8005e08 <update_homing_sequence+0xb20>

        case HOMING_REV_CW_TO_PROX1:
            // Move revolute clockwise with velocity control until prox count = 1
            revolute_axis.vel_error = -HOMING_REV_VELOCITY - revolute_axis.kalman_velocity;
 8005b1e:	4b9a      	ldr	r3, [pc, #616]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005b20:	edd3 7a07 	vldr	s15, [r3, #28]
 8005b24:	eebf 7a08 	vmov.f32	s14, #248	@ 0xbfc00000 -1.5
 8005b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b2c:	4b96      	ldr	r3, [pc, #600]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005b2e:	edc3 7a06 	vstr	s15, [r3, #24]
            revolute_axis.command_pos = PWM_Satuation(
 8005b32:	4b95      	ldr	r3, [pc, #596]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005b34:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b38:	eeb0 0a67 	vmov.f32	s0, s15
 8005b3c:	4899      	ldr	r0, [pc, #612]	@ (8005da4 <update_homing_sequence+0xabc>)
 8005b3e:	f7fb fb6b 	bl	8001218 <PID_CONTROLLER_Compute>
 8005b42:	eeb0 8a40 	vmov.f32	s16, s0
                PID_CONTROLLER_Compute(&revolute_velocity_pid, revolute_axis.vel_error),
                ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8005b46:	4b98      	ldr	r3, [pc, #608]	@ (8005da8 <update_homing_sequence+0xac0>)
 8005b48:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
            revolute_axis.command_pos = PWM_Satuation(
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4619      	mov	r1, r3
 8005b50:	f7fa ffb8 	bl	8000ac4 <__aeabi_d2iz>
 8005b54:	4604      	mov	r4, r0
                ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8005b56:	4b94      	ldr	r3, [pc, #592]	@ (8005da8 <update_homing_sequence+0xac0>)
 8005b58:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005b5c:	4692      	mov	sl, r2
 8005b5e:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
            revolute_axis.command_pos = PWM_Satuation(
 8005b62:	4650      	mov	r0, sl
 8005b64:	4659      	mov	r1, fp
 8005b66:	f7fa ffad 	bl	8000ac4 <__aeabi_d2iz>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4620      	mov	r0, r4
 8005b70:	eeb0 0a48 	vmov.f32	s0, s16
 8005b74:	f7fb faee 	bl	8001154 <PWM_Satuation>
 8005b78:	ee07 0a90 	vmov	s15, r0
 8005b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b80:	4b81      	ldr	r3, [pc, #516]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005b82:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

            // Add feedforward compensation during homing
            revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd, -HOMING_REV_VELOCITY);
 8005b86:	eebf 0a08 	vmov.f32	s0, #248	@ 0xbfc00000 -1.5
 8005b8a:	4888      	ldr	r0, [pc, #544]	@ (8005dac <update_homing_sequence+0xac4>)
 8005b8c:	f7fb fd04 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8005b90:	eef0 7a40 	vmov.f32	s15, s0
 8005b94:	4b7c      	ldr	r3, [pc, #496]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005b96:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
            revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005b9a:	4b85      	ldr	r3, [pc, #532]	@ (8005db0 <update_homing_sequence+0xac8>)
 8005b9c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
                                                          revolute_encoder.rads, 0.0f,
                                                          prismatic_encoder.mm / 1000.0f);
 8005ba0:	4b84      	ldr	r3, [pc, #528]	@ (8005db4 <update_homing_sequence+0xacc>)
 8005ba2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
            revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005ba6:	ed9f 6a84 	vldr	s12, [pc, #528]	@ 8005db8 <update_homing_sequence+0xad0>
 8005baa:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005bae:	eeb0 1a66 	vmov.f32	s2, s13
 8005bb2:	eddf 0a82 	vldr	s1, [pc, #520]	@ 8005dbc <update_homing_sequence+0xad4>
 8005bb6:	eeb0 0a47 	vmov.f32	s0, s14
 8005bba:	4881      	ldr	r0, [pc, #516]	@ (8005dc0 <update_homing_sequence+0xad8>)
 8005bbc:	f7fb fd80 	bl	80016c0 <REVOLUTE_MOTOR_DFD_Compute>
 8005bc0:	eef0 7a40 	vmov.f32	s15, s0
 8005bc4:	4b70      	ldr	r3, [pc, #448]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005bc6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
            revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 8005bca:	4b6f      	ldr	r3, [pc, #444]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005bcc:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005bd0:	4b6d      	ldr	r3, [pc, #436]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005bd2:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005bd6:	4b6c      	ldr	r3, [pc, #432]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005bd8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005be4:	4b68      	ldr	r3, [pc, #416]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005be6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

            revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005bea:	4b67      	ldr	r3, [pc, #412]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005bec:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
                                                     ZGX45RGG_150RPM_Constant.U_max,
 8005bf0:	4b6d      	ldr	r3, [pc, #436]	@ (8005da8 <update_homing_sequence+0xac0>)
 8005bf2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
            revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	f7fa ff63 	bl	8000ac4 <__aeabi_d2iz>
 8005bfe:	4604      	mov	r4, r0
                                                     -ZGX45RGG_150RPM_Constant.U_max);
 8005c00:	4b69      	ldr	r3, [pc, #420]	@ (8005da8 <update_homing_sequence+0xac0>)
 8005c02:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005c06:	4690      	mov	r8, r2
 8005c08:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
            revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005c0c:	4640      	mov	r0, r8
 8005c0e:	4649      	mov	r1, r9
 8005c10:	f7fa ff58 	bl	8000ac4 <__aeabi_d2iz>
 8005c14:	4603      	mov	r3, r0
 8005c16:	4619      	mov	r1, r3
 8005c18:	4620      	mov	r0, r4
 8005c1a:	eeb0 0a48 	vmov.f32	s0, s16
 8005c1e:	f7fb fa99 	bl	8001154 <PWM_Satuation>
 8005c22:	ee07 0a90 	vmov	s15, r0
 8005c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c2a:	4b57      	ldr	r3, [pc, #348]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005c2c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

            if (prox_count >= 1) {
 8005c30:	4b5a      	ldr	r3, [pc, #360]	@ (8005d9c <update_homing_sequence+0xab4>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 80e9 	beq.w	8005e0c <update_homing_sequence+0xb24>
                // Found prox sensor, stop and start delay
                prismatic_axis.command_pos = 0.0f;
 8005c3a:	4b55      	ldr	r3, [pc, #340]	@ (8005d90 <update_homing_sequence+0xaa8>)
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	625a      	str	r2, [r3, #36]	@ 0x24
                revolute_axis.command_pos = 0.0f;
 8005c42:	4b51      	ldr	r3, [pc, #324]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	625a      	str	r2, [r3, #36]	@ 0x24
                motion_delay_timer = 0;
 8005c4a:	4b52      	ldr	r3, [pc, #328]	@ (8005d94 <update_homing_sequence+0xaac>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]
                homing_state = HOMING_DELAY_AFTER_PROX;
 8005c50:	4b51      	ldr	r3, [pc, #324]	@ (8005d98 <update_homing_sequence+0xab0>)
 8005c52:	220a      	movs	r2, #10
 8005c54:	701a      	strb	r2, [r3, #0]
            }
            break;
 8005c56:	e0d9      	b.n	8005e0c <update_homing_sequence+0xb24>

        case HOMING_DELAY_AFTER_PROX:
            // Stop motors and wait
            prismatic_axis.command_pos = 0.0f;
 8005c58:	4b4d      	ldr	r3, [pc, #308]	@ (8005d90 <update_homing_sequence+0xaa8>)
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	625a      	str	r2, [r3, #36]	@ 0x24
            revolute_axis.command_pos = 0.0f;
 8005c60:	4b49      	ldr	r3, [pc, #292]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005c62:	f04f 0200 	mov.w	r2, #0
 8005c66:	625a      	str	r2, [r3, #36]	@ 0x24
            motion_delay_timer++;
 8005c68:	4b4a      	ldr	r3, [pc, #296]	@ (8005d94 <update_homing_sequence+0xaac>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	4a49      	ldr	r2, [pc, #292]	@ (8005d94 <update_homing_sequence+0xaac>)
 8005c70:	6013      	str	r3, [r2, #0]
            if (motion_delay_timer >= 1500) {
 8005c72:	4b48      	ldr	r3, [pc, #288]	@ (8005d94 <update_homing_sequence+0xaac>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f240 52db 	movw	r2, #1499	@ 0x5db
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	f240 80c8 	bls.w	8005e10 <update_homing_sequence+0xb28>
                homing_state = HOMING_COMPLETE;
 8005c80:	4b45      	ldr	r3, [pc, #276]	@ (8005d98 <update_homing_sequence+0xab0>)
 8005c82:	220b      	movs	r2, #11
 8005c84:	701a      	strb	r2, [r3, #0]
            }
            break;
 8005c86:	e0c3      	b.n	8005e10 <update_homing_sequence+0xb28>

        case HOMING_COMPLETE:
            // Reset both encoders and set revolute to -5.18 degrees
            float target_home_deg = -5.18f;
 8005c88:	4b4e      	ldr	r3, [pc, #312]	@ (8005dc4 <update_homing_sequence+0xadc>)
 8005c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            float target_home_rad = target_home_deg * PI / 180.0f;
 8005c8c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8005c90:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8005dc8 <update_homing_sequence+0xae0>
 8005c94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c98:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8005dcc <update_homing_sequence+0xae4>
 8005c9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ca0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

            revolute_encoder.rads = target_home_rad;
 8005ca4:	4a42      	ldr	r2, [pc, #264]	@ (8005db0 <update_homing_sequence+0xac8>)
 8005ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ca8:	6413      	str	r3, [r2, #64]	@ 0x40
            revolute_encoder.revs = target_home_rad / (2.0f * PI);
 8005caa:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8005cae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005dd0 <update_homing_sequence+0xae8>
 8005cb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8005db0 <update_homing_sequence+0xac8>)
 8005cb8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
            revolute_encoder.pulses = (int32_t)(target_home_rad * ENC_PPR * MOTOR2_RATIO / (2.0f * PI));
 8005cbc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8005cbe:	f7fa fc0f 	bl	80004e0 <__aeabi_f2d>
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	4b43      	ldr	r3, [pc, #268]	@ (8005dd4 <update_homing_sequence+0xaec>)
 8005cc8:	f7fa fc62 	bl	8000590 <__aeabi_dmul>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	a32a      	add	r3, pc, #168	@ (adr r3, 8005d80 <update_homing_sequence+0xa98>)
 8005cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cda:	f7fa fd83 	bl	80007e4 <__aeabi_ddiv>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	f7fa feed 	bl	8000ac4 <__aeabi_d2iz>
 8005cea:	4603      	mov	r3, r0
 8005cec:	4a30      	ldr	r2, [pc, #192]	@ (8005db0 <update_homing_sequence+0xac8>)
 8005cee:	6393      	str	r3, [r2, #56]	@ 0x38
            revolute_encoder.mm = 0.0f;
 8005cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8005db0 <update_homing_sequence+0xac8>)
 8005cf2:	f04f 0200 	mov.w	r2, #0
 8005cf6:	649a      	str	r2, [r3, #72]	@ 0x48

            // Reset prismatic encoder to 0.0mm (up photo position becomes 0.0mm reference)
            prismatic_encoder.mm = 0.0f;
 8005cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8005db4 <update_homing_sequence+0xacc>)
 8005cfa:	f04f 0200 	mov.w	r2, #0
 8005cfe:	649a      	str	r2, [r3, #72]	@ 0x48
            prismatic_encoder.pulses = 0;
 8005d00:	4b2c      	ldr	r3, [pc, #176]	@ (8005db4 <update_homing_sequence+0xacc>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	639a      	str	r2, [r3, #56]	@ 0x38
            prismatic_encoder.revs = 0.0f;
 8005d06:	4b2b      	ldr	r3, [pc, #172]	@ (8005db4 <update_homing_sequence+0xacc>)
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	63da      	str	r2, [r3, #60]	@ 0x3c
            prismatic_encoder.rads = 0.0f;
 8005d0e:	4b29      	ldr	r3, [pc, #164]	@ (8005db4 <update_homing_sequence+0xacc>)
 8005d10:	f04f 0200 	mov.w	r2, #0
 8005d14:	641a      	str	r2, [r3, #64]	@ 0x40

            // Set position setpoints to current positions for holding
            prismatic_axis.position = prismatic_encoder.mm;
 8005d16:	4b27      	ldr	r3, [pc, #156]	@ (8005db4 <update_homing_sequence+0xacc>)
 8005d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005d90 <update_homing_sequence+0xaa8>)
 8005d1c:	6013      	str	r3, [r2, #0]
            revolute_axis.position = revolute_encoder.rads;
 8005d1e:	4b24      	ldr	r3, [pc, #144]	@ (8005db0 <update_homing_sequence+0xac8>)
 8005d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d22:	4a19      	ldr	r2, [pc, #100]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005d24:	6013      	str	r3, [r2, #0]

            // Reset trajectory flags
            prismatic_axis.trajectory_active = false;
 8005d26:	4b1a      	ldr	r3, [pc, #104]	@ (8005d90 <update_homing_sequence+0xaa8>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            revolute_axis.trajectory_active = false;
 8005d2e:	4b16      	ldr	r3, [pc, #88]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

            // Reset feedforward terms
            prismatic_axis.ffd = 0.0f;
 8005d36:	4b16      	ldr	r3, [pc, #88]	@ (8005d90 <update_homing_sequence+0xaa8>)
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	631a      	str	r2, [r3, #48]	@ 0x30
            prismatic_axis.dfd = 0.0f;
 8005d3e:	4b14      	ldr	r3, [pc, #80]	@ (8005d90 <update_homing_sequence+0xaa8>)
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	62da      	str	r2, [r3, #44]	@ 0x2c
            revolute_axis.ffd = 0.0f;
 8005d46:	4b10      	ldr	r3, [pc, #64]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005d48:	f04f 0200 	mov.w	r2, #0
 8005d4c:	631a      	str	r2, [r3, #48]	@ 0x30
            revolute_axis.dfd = 0.0f;
 8005d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d88 <update_homing_sequence+0xaa0>)
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	62da      	str	r2, [r3, #44]	@ 0x2c

            homing_active = false;
 8005d56:	4b20      	ldr	r3, [pc, #128]	@ (8005dd8 <update_homing_sequence+0xaf0>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	701a      	strb	r2, [r3, #0]
            first_startup = false;
 8005d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8005ddc <update_homing_sequence+0xaf4>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	701a      	strb	r2, [r3, #0]
            homing_state = HOMING_IDLE;
 8005d62:	4b0d      	ldr	r3, [pc, #52]	@ (8005d98 <update_homing_sequence+0xab0>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]

            // Reset all flags and counters
            up_photo = false;
 8005d68:	4b1d      	ldr	r3, [pc, #116]	@ (8005de0 <update_homing_sequence+0xaf8>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
            low_photo = false;
 8005d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8005de4 <update_homing_sequence+0xafc>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	701a      	strb	r2, [r3, #0]
            prox_count = 0;
 8005d74:	4b09      	ldr	r3, [pc, #36]	@ (8005d9c <update_homing_sequence+0xab4>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	601a      	str	r2, [r3, #0]
            break;
 8005d7a:	e04a      	b.n	8005e12 <update_homing_sequence+0xb2a>
 8005d7c:	f3af 8000 	nop.w
 8005d80:	60000000 	.word	0x60000000
 8005d84:	401921fb 	.word	0x401921fb
 8005d88:	200002bc 	.word	0x200002bc
 8005d8c:	20000390 	.word	0x20000390
 8005d90:	20000278 	.word	0x20000278
 8005d94:	20000358 	.word	0x20000358
 8005d98:	2000036e 	.word	0x2000036e
 8005d9c:	20000368 	.word	0x20000368
 8005da0:	20000372 	.word	0x20000372
 8005da4:	2000056c 	.word	0x2000056c
 8005da8:	20000000 	.word	0x20000000
 8005dac:	200005a0 	.word	0x200005a0
 8005db0:	20000498 	.word	0x20000498
 8005db4:	2000043c 	.word	0x2000043c
 8005db8:	447a0000 	.word	0x447a0000
 8005dbc:	00000000 	.word	0x00000000
 8005dc0:	200005a4 	.word	0x200005a4
 8005dc4:	c0a5c28f 	.word	0xc0a5c28f
 8005dc8:	40490fdb 	.word	0x40490fdb
 8005dcc:	43340000 	.word	0x43340000
 8005dd0:	40c90fdb 	.word	0x40c90fdb
 8005dd4:	40c00000 	.word	0x40c00000
 8005dd8:	2000036f 	.word	0x2000036f
 8005ddc:	2000012f 	.word	0x2000012f
 8005de0:	2000036c 	.word	0x2000036c
 8005de4:	2000036d 	.word	0x2000036d
    if (!homing_active) return;
 8005de8:	bf00      	nop
 8005dea:	e012      	b.n	8005e12 <update_homing_sequence+0xb2a>

        case HOMING_IDLE:
        default:
            break;
 8005dec:	bf00      	nop
 8005dee:	e010      	b.n	8005e12 <update_homing_sequence+0xb2a>
            break;
 8005df0:	bf00      	nop
 8005df2:	e00e      	b.n	8005e12 <update_homing_sequence+0xb2a>
            break;
 8005df4:	bf00      	nop
 8005df6:	e00c      	b.n	8005e12 <update_homing_sequence+0xb2a>
            break;
 8005df8:	bf00      	nop
 8005dfa:	e00a      	b.n	8005e12 <update_homing_sequence+0xb2a>
            break;
 8005dfc:	bf00      	nop
 8005dfe:	e008      	b.n	8005e12 <update_homing_sequence+0xb2a>
            break;
 8005e00:	bf00      	nop
 8005e02:	e006      	b.n	8005e12 <update_homing_sequence+0xb2a>
            break;
 8005e04:	bf00      	nop
 8005e06:	e004      	b.n	8005e12 <update_homing_sequence+0xb2a>
            break;
 8005e08:	bf00      	nop
 8005e0a:	e002      	b.n	8005e12 <update_homing_sequence+0xb2a>
            break;
 8005e0c:	bf00      	nop
 8005e0e:	e000      	b.n	8005e12 <update_homing_sequence+0xb2a>
            break;
 8005e10:	bf00      	nop
    }
}
 8005e12:	3754      	adds	r7, #84	@ 0x54
 8005e14:	46bd      	mov	sp, r7
 8005e16:	ecbd 8b02 	vpop	{d8}
 8005e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1e:	bf00      	nop

08005e20 <normalize_angle>:

float normalize_angle(float angle_rad) {
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8005e2a:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8005e68 <normalize_angle+0x48>
 8005e2e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e32:	f00a fc89 	bl	8010748 <fmodf>
 8005e36:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 8005e3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e46:	d507      	bpl.n	8005e58 <normalize_angle+0x38>
		result += 2.0f * PI;
 8005e48:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e4c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005e68 <normalize_angle+0x48>
 8005e50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e54:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	ee07 3a90 	vmov	s15, r3
}
 8005e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	40c90fdb 	.word	0x40c90fdb

08005e6c <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	ed87 0a01 	vstr	s0, [r7, #4]
 8005e76:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 8005e80:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e84:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005fe8 <calculate_movement_deg+0x17c>
 8005e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e90:	d508      	bpl.n	8005ea4 <calculate_movement_deg+0x38>
 8005e92:	edd7 7a00 	vldr	s15, [r7]
 8005e96:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8005fe8 <calculate_movement_deg+0x17c>
 8005e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea2:	d411      	bmi.n	8005ec8 <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 8005ea4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ea8:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8005fe8 <calculate_movement_deg+0x17c>
 8005eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb4:	db33      	blt.n	8005f1e <calculate_movement_deg+0xb2>
 8005eb6:	edd7 7a00 	vldr	s15, [r7]
 8005eba:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8005fe8 <calculate_movement_deg+0x17c>
 8005ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec6:	db2a      	blt.n	8005f1e <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 8005ec8:	ed97 7a00 	vldr	s14, [r7]
 8005ecc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ed4:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 8005ed8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005edc:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8005fe8 <calculate_movement_deg+0x17c>
 8005ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee8:	dd07      	ble.n	8005efa <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 8005eea:	edd7 7a03 	vldr	s15, [r7, #12]
 8005eee:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8005fec <calculate_movement_deg+0x180>
 8005ef2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ef6:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8005efa:	edd7 7a03 	vldr	s15, [r7, #12]
 8005efe:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8005ff0 <calculate_movement_deg+0x184>
 8005f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0a:	d562      	bpl.n	8005fd2 <calculate_movement_deg+0x166>
			movement += 360.0f;
 8005f0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f10:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005fec <calculate_movement_deg+0x180>
 8005f14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f18:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8005f1c:	e059      	b.n	8005fd2 <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 8005f1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f22:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005fe8 <calculate_movement_deg+0x17c>
 8005f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f2e:	d52a      	bpl.n	8005f86 <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8005f30:	edd7 7a00 	vldr	s15, [r7]
 8005f34:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8005fe8 <calculate_movement_deg+0x17c>
 8005f38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005f40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f48:	d50e      	bpl.n	8005f68 <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 8005f4a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005fec <calculate_movement_deg+0x180>
 8005f4e:	edd7 7a00 	vldr	s15, [r7]
 8005f52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f56:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f5e:	eef1 7a67 	vneg.f32	s15, s15
 8005f62:	edc7 7a03 	vstr	s15, [r7, #12]
 8005f66:	e034      	b.n	8005fd2 <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 8005f68:	ed97 7a01 	vldr	s14, [r7, #4]
 8005f6c:	edd7 7a00 	vldr	s15, [r7]
 8005f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f74:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005fec <calculate_movement_deg+0x180>
 8005f78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f7c:	eef1 7a67 	vneg.f32	s15, s15
 8005f80:	edc7 7a03 	vstr	s15, [r7, #12]
 8005f84:	e025      	b.n	8005fd2 <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 8005f86:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f8a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005fe8 <calculate_movement_deg+0x17c>
 8005f8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f92:	ed97 7a00 	vldr	s14, [r7]
 8005f96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f9e:	d50c      	bpl.n	8005fba <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 8005fa0:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8005fec <calculate_movement_deg+0x180>
 8005fa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fac:	ed97 7a00 	vldr	s14, [r7]
 8005fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fb4:	edc7 7a03 	vstr	s15, [r7, #12]
 8005fb8:	e00b      	b.n	8005fd2 <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 8005fba:	ed97 7a00 	vldr	s14, [r7]
 8005fbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fc6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8005fec <calculate_movement_deg+0x180>
 8005fca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fce:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	ee07 3a90 	vmov	s15, r3
}
 8005fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	43340000 	.word	0x43340000
 8005fec:	43b40000 	.word	0x43b40000
 8005ff0:	c3340000 	.word	0xc3340000

08005ff4 <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	ed2d 8b02 	vpush	{d8}
 8005ffa:	b089      	sub	sp, #36	@ 0x24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	ed87 0a01 	vstr	s0, [r7, #4]
 8006002:	edc7 0a00 	vstr	s1, [r7]
	// Get current positions
	float pris_current = prismatic_encoder.mm;
 8006006:	4b4c      	ldr	r3, [pc, #304]	@ (8006138 <start_combined_trajectory+0x144>)
 8006008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800600a:	61fb      	str	r3, [r7, #28]
	float rev_current = revolute_encoder.rads;
 800600c:	4b4b      	ldr	r3, [pc, #300]	@ (800613c <start_combined_trajectory+0x148>)
 800600e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006010:	61bb      	str	r3, [r7, #24]

	// Reset trajectory evaluation structs
	prisEva.t = 0.0f;
 8006012:	4b4b      	ldr	r3, [pc, #300]	@ (8006140 <start_combined_trajectory+0x14c>)
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 800601a:	4b49      	ldr	r3, [pc, #292]	@ (8006140 <start_combined_trajectory+0x14c>)
 800601c:	2200      	movs	r2, #0
 800601e:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 8006020:	4b48      	ldr	r3, [pc, #288]	@ (8006144 <start_combined_trajectory+0x150>)
 8006022:	f04f 0200 	mov.w	r2, #0
 8006026:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 8006028:	4b46      	ldr	r3, [pc, #280]	@ (8006144 <start_combined_trajectory+0x150>)
 800602a:	2200      	movs	r2, #0
 800602c:	741a      	strb	r2, [r3, #16]

	// Save initial positions
	prismatic_axis.initial_pos = pris_current;
 800602e:	4a46      	ldr	r2, [pc, #280]	@ (8006148 <start_combined_trajectory+0x154>)
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 8006034:	4a45      	ldr	r2, [pc, #276]	@ (800614c <start_combined_trajectory+0x158>)
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	60d3      	str	r3, [r2, #12]

	// For prismatic axis - direct target with bounds checking
	prismatic_axis.target_pos = fminf(
 800603a:	eddf 0a45 	vldr	s1, [pc, #276]	@ 8006150 <start_combined_trajectory+0x15c>
 800603e:	ed97 0a01 	vldr	s0, [r7, #4]
 8006042:	f00a fc49 	bl	80108d8 <fmaxf>
 8006046:	eef0 7a40 	vmov.f32	s15, s0
 800604a:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8006154 <start_combined_trajectory+0x160>
 800604e:	eeb0 0a67 	vmov.f32	s0, s15
 8006052:	f00a fc5e 	bl	8010912 <fminf>
 8006056:	eef0 7a40 	vmov.f32	s15, s0
 800605a:	4b3b      	ldr	r3, [pc, #236]	@ (8006148 <start_combined_trajectory+0x154>)
 800605c:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS), PRISMATIC_MAX_POS);

	// For revolute axis - calculate target but don't start yet
	// Normalize current position to [0, 2π]
	float normalized_current = normalize_angle(rev_current);
 8006060:	ed97 0a06 	vldr	s0, [r7, #24]
 8006064:	f7ff fedc 	bl	8005e20 <normalize_angle>
 8006068:	ed87 0a05 	vstr	s0, [r7, #20]

	// Convert to degrees for movement calculation
	float current_deg = normalized_current * 180.0f / PI;
 800606c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006070:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8006158 <start_combined_trajectory+0x164>
 8006074:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006078:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800615c <start_combined_trajectory+0x168>
 800607c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006080:	edc7 7a04 	vstr	s15, [r7, #16]

	// Calculate movement in degrees
	movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 8006084:	edd7 0a00 	vldr	s1, [r7]
 8006088:	ed97 0a04 	vldr	s0, [r7, #16]
 800608c:	f7ff feee 	bl	8005e6c <calculate_movement_deg>
 8006090:	eef0 7a40 	vmov.f32	s15, s0
 8006094:	4b32      	ldr	r3, [pc, #200]	@ (8006160 <start_combined_trajectory+0x16c>)
 8006096:	edc3 7a00 	vstr	s15, [r3]

	// Convert to radians and apply to absolute position
	float movement_rad = movement_deg * PI / 180.0f;
 800609a:	4b31      	ldr	r3, [pc, #196]	@ (8006160 <start_combined_trajectory+0x16c>)
 800609c:	edd3 7a00 	vldr	s15, [r3]
 80060a0:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800615c <start_combined_trajectory+0x168>
 80060a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80060a8:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8006158 <start_combined_trajectory+0x164>
 80060ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060b0:	edc7 7a03 	vstr	s15, [r7, #12]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 80060b4:	4b25      	ldr	r3, [pc, #148]	@ (800614c <start_combined_trajectory+0x158>)
 80060b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80060ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80060be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060c2:	4b22      	ldr	r3, [pc, #136]	@ (800614c <start_combined_trajectory+0x158>)
 80060c4:	edc3 7a04 	vstr	s15, [r3, #16]

	// Generate ONLY prismatic trajectory first
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80060c8:	4b1f      	ldr	r3, [pc, #124]	@ (8006148 <start_combined_trajectory+0x154>)
 80060ca:	ed93 8a03 	vldr	s16, [r3, #12]
 80060ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006148 <start_combined_trajectory+0x154>)
 80060d0:	edd3 8a04 	vldr	s17, [r3, #16]
			prismatic_axis.target_pos, ZGX45RGG_400RPM_Constant.traject_sd_max,
 80060d4:	4b23      	ldr	r3, [pc, #140]	@ (8006164 <start_combined_trajectory+0x170>)
 80060d6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80060da:	4610      	mov	r0, r2
 80060dc:	4619      	mov	r1, r3
 80060de:	f7fa fd39 	bl	8000b54 <__aeabi_d2f>
 80060e2:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.traject_sdd_max);
 80060e4:	4b1f      	ldr	r3, [pc, #124]	@ (8006164 <start_combined_trajectory+0x170>)
 80060e6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80060ea:	4610      	mov	r0, r2
 80060ec:	4619      	mov	r1, r3
 80060ee:	f7fa fd31 	bl	8000b54 <__aeabi_d2f>
 80060f2:	4603      	mov	r3, r0
 80060f4:	ee01 3a90 	vmov	s3, r3
 80060f8:	ee01 4a10 	vmov	s2, r4
 80060fc:	eef0 0a68 	vmov.f32	s1, s17
 8006100:	eeb0 0a48 	vmov.f32	s0, s16
 8006104:	4818      	ldr	r0, [pc, #96]	@ (8006168 <start_combined_trajectory+0x174>)
 8006106:	f7fd fddb 	bl	8003cc0 <Trapezoidal_Generator>

	// Start with prismatic motion only
	prismatic_axis.trajectory_active = true;
 800610a:	4b0f      	ldr	r3, [pc, #60]	@ (8006148 <start_combined_trajectory+0x154>)
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;  // Don't start revolute yet
 8006112:	4b0e      	ldr	r3, [pc, #56]	@ (800614c <start_combined_trajectory+0x158>)
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Set sequence state
	plotter_pen_up();
 800611a:	f001 f9b3 	bl	8007484 <plotter_pen_up>
	motion_delay_timer = 0;
 800611e:	4b13      	ldr	r3, [pc, #76]	@ (800616c <start_combined_trajectory+0x178>)
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]
	motion_sequence_state = MOTION_PEN_UP_DELAY;
 8006124:	4b12      	ldr	r3, [pc, #72]	@ (8006170 <start_combined_trajectory+0x17c>)
 8006126:	2201      	movs	r2, #1
 8006128:	701a      	strb	r2, [r3, #0]
}
 800612a:	bf00      	nop
 800612c:	3724      	adds	r7, #36	@ 0x24
 800612e:	46bd      	mov	sp, r7
 8006130:	ecbd 8b02 	vpop	{d8}
 8006134:	bd90      	pop	{r4, r7, pc}
 8006136:	bf00      	nop
 8006138:	2000043c 	.word	0x2000043c
 800613c:	20000498 	.word	0x20000498
 8006140:	2000032c 	.word	0x2000032c
 8006144:	20000340 	.word	0x20000340
 8006148:	20000278 	.word	0x20000278
 800614c:	200002bc 	.word	0x200002bc
 8006150:	00000000 	.word	0x00000000
 8006154:	43960000 	.word	0x43960000
 8006158:	43340000 	.word	0x43340000
 800615c:	40490fdb 	.word	0x40490fdb
 8006160:	20000360 	.word	0x20000360
 8006164:	20000080 	.word	0x20000080
 8006168:	20000304 	.word	0x20000304
 800616c:	20000358 	.word	0x20000358
 8006170:	20000300 	.word	0x20000300

08006174 <update_control_loops>:

void update_control_loops(void) {
 8006174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006178:	ed2d 8b02 	vpush	{d8}
 800617c:	b087      	sub	sp, #28
 800617e:	af00      	add	r7, sp, #0
	// Normalize revolute position
	normalized_position = normalize_angle(revolute_encoder.rads);
 8006180:	4baf      	ldr	r3, [pc, #700]	@ (8006440 <update_control_loops+0x2cc>)
 8006182:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006186:	eeb0 0a67 	vmov.f32	s0, s15
 800618a:	f7ff fe49 	bl	8005e20 <normalize_angle>
 800618e:	eef0 7a40 	vmov.f32	s15, s0
 8006192:	4bac      	ldr	r3, [pc, #688]	@ (8006444 <update_control_loops+0x2d0>)
 8006194:	edc3 7a00 	vstr	s15, [r3]
	angle_deg = normalize_angle(revolute_axis.target_pos);
 8006198:	4bab      	ldr	r3, [pc, #684]	@ (8006448 <update_control_loops+0x2d4>)
 800619a:	edd3 7a04 	vldr	s15, [r3, #16]
 800619e:	eeb0 0a67 	vmov.f32	s0, s15
 80061a2:	f7ff fe3d 	bl	8005e20 <normalize_angle>
 80061a6:	eef0 7a40 	vmov.f32	s15, s0
 80061aa:	4ba8      	ldr	r3, [pc, #672]	@ (800644c <update_control_loops+0x2d8>)
 80061ac:	edc3 7a00 	vstr	s15, [r3]

    if (homing_active) {
 80061b0:	4ba7      	ldr	r3, [pc, #668]	@ (8006450 <update_control_loops+0x2dc>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d029      	beq.n	800620c <update_control_loops+0x98>
        update_homing_sequence();
 80061b8:	f7ff f896 	bl	80052e8 <update_homing_sequence>

        // Apply homing commands directly to motors
        MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 80061bc:	4ba5      	ldr	r3, [pc, #660]	@ (8006454 <update_control_loops+0x2e0>)
 80061be:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80061c2:	eef0 0a67 	vmov.f32	s1, s15
 80061c6:	ed9f 0aa4 	vldr	s0, [pc, #656]	@ 8006458 <update_control_loops+0x2e4>
 80061ca:	48a4      	ldr	r0, [pc, #656]	@ (800645c <update_control_loops+0x2e8>)
 80061cc:	f7fb f8fc 	bl	80013c8 <MDXX_set_range>
        MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 80061d0:	4b9d      	ldr	r3, [pc, #628]	@ (8006448 <update_control_loops+0x2d4>)
 80061d2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80061d6:	eef0 0a67 	vmov.f32	s1, s15
 80061da:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8006458 <update_control_loops+0x2e4>
 80061de:	48a0      	ldr	r0, [pc, #640]	@ (8006460 <update_control_loops+0x2ec>)
 80061e0:	f7fb f8f2 	bl	80013c8 <MDXX_set_range>

        // Update display values during homing
        prismatic_axis.mm = prismatic_encoder.mm;
 80061e4:	4b9f      	ldr	r3, [pc, #636]	@ (8006464 <update_control_loops+0x2f0>)
 80061e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061e8:	4a9a      	ldr	r2, [pc, #616]	@ (8006454 <update_control_loops+0x2e0>)
 80061ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
        revolute_axis.deg = UnitConverter_angle(&converter_system, normalized_position,
 80061ec:	4b95      	ldr	r3, [pc, #596]	@ (8006444 <update_control_loops+0x2d0>)
 80061ee:	edd3 7a00 	vldr	s15, [r3]
 80061f2:	220e      	movs	r2, #14
 80061f4:	210f      	movs	r1, #15
 80061f6:	eeb0 0a67 	vmov.f32	s0, s15
 80061fa:	489b      	ldr	r0, [pc, #620]	@ (8006468 <update_control_loops+0x2f4>)
 80061fc:	f7fe f9ba 	bl	8004574 <UnitConverter_angle>
 8006200:	eef0 7a40 	vmov.f32	s15, s0
 8006204:	4b90      	ldr	r3, [pc, #576]	@ (8006448 <update_control_loops+0x2d4>)
 8006206:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
                                              UNIT_RADIAN, UNIT_DEGREE);
        return; // Skip normal control when homing
 800620a:	e3be      	b.n	800698a <update_control_loops+0x816>
    }

	// Handle motion sequence state machine
	switch (motion_sequence_state) {
 800620c:	4b97      	ldr	r3, [pc, #604]	@ (800646c <update_control_loops+0x2f8>)
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	3b01      	subs	r3, #1
 8006212:	2b04      	cmp	r3, #4
 8006214:	f200 8152 	bhi.w	80064bc <update_control_loops+0x348>
 8006218:	a201      	add	r2, pc, #4	@ (adr r2, 8006220 <update_control_loops+0xac>)
 800621a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621e:	bf00      	nop
 8006220:	08006235 	.word	0x08006235
 8006224:	08006253 	.word	0x08006253
 8006228:	08006367 	.word	0x08006367
 800622c:	08006495 	.word	0x08006495
 8006230:	080064b5 	.word	0x080064b5
	case MOTION_PEN_UP_DELAY:
		motion_delay_timer++;
 8006234:	4b8e      	ldr	r3, [pc, #568]	@ (8006470 <update_control_loops+0x2fc>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3301      	adds	r3, #1
 800623a:	4a8d      	ldr	r2, [pc, #564]	@ (8006470 <update_control_loops+0x2fc>)
 800623c:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 2000) {
 800623e:	4b8c      	ldr	r3, [pc, #560]	@ (8006470 <update_control_loops+0x2fc>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8006246:	f0c0 813b 	bcc.w	80064c0 <update_control_loops+0x34c>
			motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 800624a:	4a88      	ldr	r2, [pc, #544]	@ (800646c <update_control_loops+0x2f8>)
 800624c:	2302      	movs	r3, #2
 800624e:	7013      	strb	r3, [r2, #0]
		}
		break;
 8006250:	e136      	b.n	80064c0 <update_control_loops+0x34c>

	case MOTION_PRISMATIC_ACTIVE:
		// Update prismatic trajectory
		if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8006252:	4b80      	ldr	r3, [pc, #512]	@ (8006454 <update_control_loops+0x2e0>)
 8006254:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 8133 	beq.w	80064c4 <update_control_loops+0x350>
 800625e:	4b85      	ldr	r3, [pc, #532]	@ (8006474 <update_control_loops+0x300>)
 8006260:	7c1b      	ldrb	r3, [r3, #16]
 8006262:	f083 0301 	eor.w	r3, r3, #1
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 812b 	beq.w	80064c4 <update_control_loops+0x350>
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 800626e:	4b79      	ldr	r3, [pc, #484]	@ (8006454 <update_control_loops+0x2e0>)
 8006270:	ed93 8a03 	vldr	s16, [r3, #12]
 8006274:	4b77      	ldr	r3, [pc, #476]	@ (8006454 <update_control_loops+0x2e0>)
 8006276:	edd3 8a04 	vldr	s17, [r3, #16]
					prismatic_axis.initial_pos, prismatic_axis.target_pos,
					ZGX45RGG_400RPM_Constant.traject_sd_max,
 800627a:	4b7f      	ldr	r3, [pc, #508]	@ (8006478 <update_control_loops+0x304>)
 800627c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006280:	4610      	mov	r0, r2
 8006282:	4619      	mov	r1, r3
 8006284:	f7fa fc66 	bl	8000b54 <__aeabi_d2f>
 8006288:	4604      	mov	r4, r0
					ZGX45RGG_400RPM_Constant.traject_sdd_max);
 800628a:	4b7b      	ldr	r3, [pc, #492]	@ (8006478 <update_control_loops+0x304>)
 800628c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006290:	4610      	mov	r0, r2
 8006292:	4619      	mov	r1, r3
 8006294:	f7fa fc5e 	bl	8000b54 <__aeabi_d2f>
 8006298:	4603      	mov	r3, r0
 800629a:	ee01 3a90 	vmov	s3, r3
 800629e:	ee01 4a10 	vmov	s2, r4
 80062a2:	eef0 0a68 	vmov.f32	s1, s17
 80062a6:	eeb0 0a48 	vmov.f32	s0, s16
 80062aa:	4972      	ldr	r1, [pc, #456]	@ (8006474 <update_control_loops+0x300>)
 80062ac:	4873      	ldr	r0, [pc, #460]	@ (800647c <update_control_loops+0x308>)
 80062ae:	f7fd fdc9 	bl	8003e44 <Trapezoidal_Evaluated>

			prismatic_axis.position = prisEva.setposition;
 80062b2:	4b70      	ldr	r3, [pc, #448]	@ (8006474 <update_control_loops+0x300>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a67      	ldr	r2, [pc, #412]	@ (8006454 <update_control_loops+0x2e0>)
 80062b8:	6013      	str	r3, [r2, #0]
			prismatic_axis.velocity = prisEva.setvelocity;
 80062ba:	4b6e      	ldr	r3, [pc, #440]	@ (8006474 <update_control_loops+0x300>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	4a65      	ldr	r2, [pc, #404]	@ (8006454 <update_control_loops+0x2e0>)
 80062c0:	6053      	str	r3, [r2, #4]

			if (prisEva.isFinised) {
 80062c2:	4b6c      	ldr	r3, [pc, #432]	@ (8006474 <update_control_loops+0x300>)
 80062c4:	7c1b      	ldrb	r3, [r3, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 80fc 	beq.w	80064c4 <update_control_loops+0x350>
				// Prismatic motion complete - start revolute motion
				prismatic_axis.trajectory_active = false;
 80062cc:	4a61      	ldr	r2, [pc, #388]	@ (8006454 <update_control_loops+0x2e0>)
 80062ce:	2300      	movs	r3, #0
 80062d0:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
				prismatic_axis.position = prisEva.setposition;
 80062d4:	4b67      	ldr	r3, [pc, #412]	@ (8006474 <update_control_loops+0x300>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a5e      	ldr	r2, [pc, #376]	@ (8006454 <update_control_loops+0x2e0>)
 80062da:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = 0.0f;
 80062dc:	4b5d      	ldr	r3, [pc, #372]	@ (8006454 <update_control_loops+0x2e0>)
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	605a      	str	r2, [r3, #4]
				prismatic_axis.dfd = 0.0f;
 80062e4:	4b5b      	ldr	r3, [pc, #364]	@ (8006454 <update_control_loops+0x2e0>)
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	62da      	str	r2, [r3, #44]	@ 0x2c
				prismatic_axis.ffd = 0.0f;
 80062ec:	4b59      	ldr	r3, [pc, #356]	@ (8006454 <update_control_loops+0x2e0>)
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	631a      	str	r2, [r3, #48]	@ 0x30

				// Reset prismatic control variables
				prismatic_axis.pos_error = 0.0f;
 80062f4:	4b57      	ldr	r3, [pc, #348]	@ (8006454 <update_control_loops+0x2e0>)
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	615a      	str	r2, [r3, #20]
				prismatic_axis.vel_error = 0.0f;
 80062fc:	4b55      	ldr	r3, [pc, #340]	@ (8006454 <update_control_loops+0x2e0>)
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	619a      	str	r2, [r3, #24]
				prismatic_axis.command_vel = 0.0f;
 8006304:	4b53      	ldr	r3, [pc, #332]	@ (8006454 <update_control_loops+0x2e0>)
 8006306:	f04f 0200 	mov.w	r2, #0
 800630a:	629a      	str	r2, [r3, #40]	@ 0x28
				prismatic_axis.command_pos = 0.0f;
 800630c:	4b51      	ldr	r3, [pc, #324]	@ (8006454 <update_control_loops+0x2e0>)
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	625a      	str	r2, [r3, #36]	@ 0x24

				// Now start revolute trajectory
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006314:	4b4c      	ldr	r3, [pc, #304]	@ (8006448 <update_control_loops+0x2d4>)
 8006316:	ed93 8a03 	vldr	s16, [r3, #12]
 800631a:	4b4b      	ldr	r3, [pc, #300]	@ (8006448 <update_control_loops+0x2d4>)
 800631c:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006320:	4b57      	ldr	r3, [pc, #348]	@ (8006480 <update_control_loops+0x30c>)
 8006322:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006326:	4610      	mov	r0, r2
 8006328:	4619      	mov	r1, r3
 800632a:	f7fa fc13 	bl	8000b54 <__aeabi_d2f>
 800632e:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006330:	4b53      	ldr	r3, [pc, #332]	@ (8006480 <update_control_loops+0x30c>)
 8006332:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006336:	4610      	mov	r0, r2
 8006338:	4619      	mov	r1, r3
 800633a:	f7fa fc0b 	bl	8000b54 <__aeabi_d2f>
 800633e:	4603      	mov	r3, r0
 8006340:	ee01 3a90 	vmov	s3, r3
 8006344:	ee01 4a10 	vmov	s2, r4
 8006348:	eef0 0a68 	vmov.f32	s1, s17
 800634c:	eeb0 0a48 	vmov.f32	s0, s16
 8006350:	484c      	ldr	r0, [pc, #304]	@ (8006484 <update_control_loops+0x310>)
 8006352:	f7fd fcb5 	bl	8003cc0 <Trapezoidal_Generator>

				revolute_axis.trajectory_active = true;
 8006356:	4a3c      	ldr	r2, [pc, #240]	@ (8006448 <update_control_loops+0x2d4>)
 8006358:	2301      	movs	r3, #1
 800635a:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
				motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 800635e:	4a43      	ldr	r2, [pc, #268]	@ (800646c <update_control_loops+0x2f8>)
 8006360:	2303      	movs	r3, #3
 8006362:	7013      	strb	r3, [r2, #0]
			}
		}
		break;
 8006364:	e0ae      	b.n	80064c4 <update_control_loops+0x350>

	case MOTION_REVOLUTE_ACTIVE:
		// Update revolute trajectory
		if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8006366:	4b38      	ldr	r3, [pc, #224]	@ (8006448 <update_control_loops+0x2d4>)
 8006368:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 80ab 	beq.w	80064c8 <update_control_loops+0x354>
 8006372:	4b45      	ldr	r3, [pc, #276]	@ (8006488 <update_control_loops+0x314>)
 8006374:	7c1b      	ldrb	r3, [r3, #16]
 8006376:	f083 0301 	eor.w	r3, r3, #1
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 80a3 	beq.w	80064c8 <update_control_loops+0x354>
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006382:	4b31      	ldr	r3, [pc, #196]	@ (8006448 <update_control_loops+0x2d4>)
 8006384:	ed93 8a03 	vldr	s16, [r3, #12]
 8006388:	4b2f      	ldr	r3, [pc, #188]	@ (8006448 <update_control_loops+0x2d4>)
 800638a:	edd3 8a04 	vldr	s17, [r3, #16]
					revolute_axis.target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 800638e:	4b3c      	ldr	r3, [pc, #240]	@ (8006480 <update_control_loops+0x30c>)
 8006390:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006394:	4610      	mov	r0, r2
 8006396:	4619      	mov	r1, r3
 8006398:	f7fa fbdc 	bl	8000b54 <__aeabi_d2f>
 800639c:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 800639e:	4b38      	ldr	r3, [pc, #224]	@ (8006480 <update_control_loops+0x30c>)
 80063a0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 80063a4:	4610      	mov	r0, r2
 80063a6:	4619      	mov	r1, r3
 80063a8:	f7fa fbd4 	bl	8000b54 <__aeabi_d2f>
 80063ac:	4603      	mov	r3, r0
 80063ae:	ee01 3a90 	vmov	s3, r3
 80063b2:	ee01 4a10 	vmov	s2, r4
 80063b6:	eef0 0a68 	vmov.f32	s1, s17
 80063ba:	eeb0 0a48 	vmov.f32	s0, s16
 80063be:	4932      	ldr	r1, [pc, #200]	@ (8006488 <update_control_loops+0x314>)
 80063c0:	4830      	ldr	r0, [pc, #192]	@ (8006484 <update_control_loops+0x310>)
 80063c2:	f7fd fd3f 	bl	8003e44 <Trapezoidal_Evaluated>

			revolute_axis.position = revEva.setposition;
 80063c6:	4b30      	ldr	r3, [pc, #192]	@ (8006488 <update_control_loops+0x314>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a1f      	ldr	r2, [pc, #124]	@ (8006448 <update_control_loops+0x2d4>)
 80063cc:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = revEva.setvelocity;
 80063ce:	4b2e      	ldr	r3, [pc, #184]	@ (8006488 <update_control_loops+0x314>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006448 <update_control_loops+0x2d4>)
 80063d4:	6053      	str	r3, [r2, #4]

			if (revEva.isFinised) {
 80063d6:	4b2c      	ldr	r3, [pc, #176]	@ (8006488 <update_control_loops+0x314>)
 80063d8:	7c1b      	ldrb	r3, [r3, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d074      	beq.n	80064c8 <update_control_loops+0x354>
				// Revolute motion complete - start pen down delay
				revolute_axis.trajectory_active = false;
 80063de:	4a1a      	ldr	r2, [pc, #104]	@ (8006448 <update_control_loops+0x2d4>)
 80063e0:	2300      	movs	r3, #0
 80063e2:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
				revolute_axis.position = revEva.setposition;
 80063e6:	4b28      	ldr	r3, [pc, #160]	@ (8006488 <update_control_loops+0x314>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a17      	ldr	r2, [pc, #92]	@ (8006448 <update_control_loops+0x2d4>)
 80063ec:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = 0.0f;
 80063ee:	4b16      	ldr	r3, [pc, #88]	@ (8006448 <update_control_loops+0x2d4>)
 80063f0:	f04f 0200 	mov.w	r2, #0
 80063f4:	605a      	str	r2, [r3, #4]
				revolute_axis.dfd = 0.0f;
 80063f6:	4b14      	ldr	r3, [pc, #80]	@ (8006448 <update_control_loops+0x2d4>)
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	62da      	str	r2, [r3, #44]	@ 0x2c
				revolute_axis.ffd = 0.0f;
 80063fe:	4b12      	ldr	r3, [pc, #72]	@ (8006448 <update_control_loops+0x2d4>)
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	631a      	str	r2, [r3, #48]	@ 0x30

				// Reset revolute control variables
				revolute_axis.pos_error = 0.0f;
 8006406:	4b10      	ldr	r3, [pc, #64]	@ (8006448 <update_control_loops+0x2d4>)
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	615a      	str	r2, [r3, #20]
				revolute_axis.vel_error = 0.0f;
 800640e:	4b0e      	ldr	r3, [pc, #56]	@ (8006448 <update_control_loops+0x2d4>)
 8006410:	f04f 0200 	mov.w	r2, #0
 8006414:	619a      	str	r2, [r3, #24]
				revolute_axis.command_vel = 0.0f;
 8006416:	4b0c      	ldr	r3, [pc, #48]	@ (8006448 <update_control_loops+0x2d4>)
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	629a      	str	r2, [r3, #40]	@ 0x28
				revolute_axis.command_pos = 0.0f;
 800641e:	4b0a      	ldr	r3, [pc, #40]	@ (8006448 <update_control_loops+0x2d4>)
 8006420:	f04f 0200 	mov.w	r2, #0
 8006424:	625a      	str	r2, [r3, #36]	@ 0x24

				PID_CONTROLLER_Reset(&revolute_position_pid);
 8006426:	4819      	ldr	r0, [pc, #100]	@ (800648c <update_control_loops+0x318>)
 8006428:	f7fa ff88 	bl	800133c <PID_CONTROLLER_Reset>
				PID_CONTROLLER_Reset(&revolute_velocity_pid);
 800642c:	4818      	ldr	r0, [pc, #96]	@ (8006490 <update_control_loops+0x31c>)
 800642e:	f7fa ff85 	bl	800133c <PID_CONTROLLER_Reset>

				motion_delay_timer = 0;
 8006432:	4b0f      	ldr	r3, [pc, #60]	@ (8006470 <update_control_loops+0x2fc>)
 8006434:	2200      	movs	r2, #0
 8006436:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8006438:	4a0c      	ldr	r2, [pc, #48]	@ (800646c <update_control_loops+0x2f8>)
 800643a:	2304      	movs	r3, #4
 800643c:	7013      	strb	r3, [r2, #0]
			}
		}
		break;
 800643e:	e043      	b.n	80064c8 <update_control_loops+0x354>
 8006440:	20000498 	.word	0x20000498
 8006444:	2000035c 	.word	0x2000035c
 8006448:	200002bc 	.word	0x200002bc
 800644c:	20000364 	.word	0x20000364
 8006450:	2000036f 	.word	0x2000036f
 8006454:	20000278 	.word	0x20000278
 8006458:	44fa0000 	.word	0x44fa0000
 800645c:	200003a4 	.word	0x200003a4
 8006460:	200003f0 	.word	0x200003f0
 8006464:	2000043c 	.word	0x2000043c
 8006468:	20000808 	.word	0x20000808
 800646c:	20000300 	.word	0x20000300
 8006470:	20000358 	.word	0x20000358
 8006474:	2000032c 	.word	0x2000032c
 8006478:	20000080 	.word	0x20000080
 800647c:	20000304 	.word	0x20000304
 8006480:	20000000 	.word	0x20000000
 8006484:	20000318 	.word	0x20000318
 8006488:	20000340 	.word	0x20000340
 800648c:	20000544 	.word	0x20000544
 8006490:	2000056c 	.word	0x2000056c

	case MOTION_PEN_DOWN_DELAY:
		motion_delay_timer++;
 8006494:	4bbc      	ldr	r3, [pc, #752]	@ (8006788 <update_control_loops+0x614>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3301      	adds	r3, #1
 800649a:	4abb      	ldr	r2, [pc, #748]	@ (8006788 <update_control_loops+0x614>)
 800649c:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 2000) {
 800649e:	4bba      	ldr	r3, [pc, #744]	@ (8006788 <update_control_loops+0x614>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80064a6:	d311      	bcc.n	80064cc <update_control_loops+0x358>
			plotter_pen_down();
 80064a8:	f000 fffc 	bl	80074a4 <plotter_pen_down>
			motion_sequence_state = MOTION_COMPLETE;
 80064ac:	4ab7      	ldr	r2, [pc, #732]	@ (800678c <update_control_loops+0x618>)
 80064ae:	2305      	movs	r3, #5
 80064b0:	7013      	strb	r3, [r2, #0]
		}
		break;
 80064b2:	e00b      	b.n	80064cc <update_control_loops+0x358>

	case MOTION_COMPLETE:
		// Both motions complete - ready for next command
		motion_sequence_state = MOTION_IDLE;
 80064b4:	4ab5      	ldr	r2, [pc, #724]	@ (800678c <update_control_loops+0x618>)
 80064b6:	2300      	movs	r3, #0
 80064b8:	7013      	strb	r3, [r2, #0]
		break;
 80064ba:	e008      	b.n	80064ce <update_control_loops+0x35a>

	case MOTION_IDLE:
	default:
		// No active motion
		break;
 80064bc:	bf00      	nop
 80064be:	e006      	b.n	80064ce <update_control_loops+0x35a>
		break;
 80064c0:	bf00      	nop
 80064c2:	e004      	b.n	80064ce <update_control_loops+0x35a>
		break;
 80064c4:	bf00      	nop
 80064c6:	e002      	b.n	80064ce <update_control_loops+0x35a>
		break;
 80064c8:	bf00      	nop
 80064ca:	e000      	b.n	80064ce <update_control_loops+0x35a>
		break;
 80064cc:	bf00      	nop
	}

	// *** PRISMATIC CONTROL ***
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 80064ce:	4bb0      	ldr	r3, [pc, #704]	@ (8006790 <update_control_loops+0x61c>)
 80064d0:	ed93 7a00 	vldr	s14, [r3]
 80064d4:	4baf      	ldr	r3, [pc, #700]	@ (8006794 <update_control_loops+0x620>)
 80064d6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80064da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064de:	4bac      	ldr	r3, [pc, #688]	@ (8006790 <update_control_loops+0x61c>)
 80064e0:	edc3 7a05 	vstr	s15, [r3, #20]

	prismatic_axis.command_vel = PWM_Satuation(
 80064e4:	4baa      	ldr	r3, [pc, #680]	@ (8006790 <update_control_loops+0x61c>)
 80064e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80064ea:	eeb0 0a67 	vmov.f32	s0, s15
 80064ee:	48aa      	ldr	r0, [pc, #680]	@ (8006798 <update_control_loops+0x624>)
 80064f0:	f7fa fe92 	bl	8001218 <PID_CONTROLLER_Compute>
 80064f4:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 80064f8:	4ba8      	ldr	r3, [pc, #672]	@ (800679c <update_control_loops+0x628>)
 80064fa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 80064fe:	4610      	mov	r0, r2
 8006500:	4619      	mov	r1, r3
 8006502:	f7fa fadf 	bl	8000ac4 <__aeabi_d2iz>
 8006506:	4604      	mov	r4, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 8006508:	4ba4      	ldr	r3, [pc, #656]	@ (800679c <update_control_loops+0x628>)
 800650a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800650e:	4690      	mov	r8, r2
 8006510:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 8006514:	4640      	mov	r0, r8
 8006516:	4649      	mov	r1, r9
 8006518:	f7fa fad4 	bl	8000ac4 <__aeabi_d2iz>
 800651c:	4603      	mov	r3, r0
 800651e:	4619      	mov	r1, r3
 8006520:	4620      	mov	r0, r4
 8006522:	eeb0 0a48 	vmov.f32	s0, s16
 8006526:	f7fa fe15 	bl	8001154 <PWM_Satuation>
 800652a:	ee07 0a90 	vmov	s15, r0
 800652e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006532:	4b97      	ldr	r3, [pc, #604]	@ (8006790 <update_control_loops+0x61c>)
 8006534:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Add velocity feedforward for trajectory
	if (prismatic_axis.trajectory_active) {
 8006538:	4b95      	ldr	r3, [pc, #596]	@ (8006790 <update_control_loops+0x61c>)
 800653a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800653e:	2b00      	cmp	r3, #0
 8006540:	d010      	beq.n	8006564 <update_control_loops+0x3f0>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006542:	4b93      	ldr	r3, [pc, #588]	@ (8006790 <update_control_loops+0x61c>)
 8006544:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 8006548:	4b91      	ldr	r3, [pc, #580]	@ (8006790 <update_control_loops+0x61c>)
 800654a:	edd3 7a01 	vldr	s15, [r3, #4]
 800654e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006552:	4b8f      	ldr	r3, [pc, #572]	@ (8006790 <update_control_loops+0x61c>)
 8006554:	edd3 7a07 	vldr	s15, [r3, #28]
 8006558:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 800655c:	4b8c      	ldr	r3, [pc, #560]	@ (8006790 <update_control_loops+0x61c>)
 800655e:	edc3 7a06 	vstr	s15, [r3, #24]
 8006562:	e00a      	b.n	800657a <update_control_loops+0x406>
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006564:	4b8a      	ldr	r3, [pc, #552]	@ (8006790 <update_control_loops+0x61c>)
 8006566:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 800656a:	4b89      	ldr	r3, [pc, #548]	@ (8006790 <update_control_loops+0x61c>)
 800656c:	edd3 7a07 	vldr	s15, [r3, #28]
 8006570:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006574:	4b86      	ldr	r3, [pc, #536]	@ (8006790 <update_control_loops+0x61c>)
 8006576:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 800657a:	4b85      	ldr	r3, [pc, #532]	@ (8006790 <update_control_loops+0x61c>)
 800657c:	edd3 7a06 	vldr	s15, [r3, #24]
 8006580:	eeb0 0a67 	vmov.f32	s0, s15
 8006584:	4886      	ldr	r0, [pc, #536]	@ (80067a0 <update_control_loops+0x62c>)
 8006586:	f7fa fe47 	bl	8001218 <PID_CONTROLLER_Compute>
 800658a:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 800658e:	4b83      	ldr	r3, [pc, #524]	@ (800679c <update_control_loops+0x628>)
 8006590:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 8006594:	4610      	mov	r0, r2
 8006596:	4619      	mov	r1, r3
 8006598:	f7fa fa94 	bl	8000ac4 <__aeabi_d2iz>
 800659c:	4604      	mov	r4, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 800659e:	4b7f      	ldr	r3, [pc, #508]	@ (800679c <update_control_loops+0x628>)
 80065a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80065a4:	613a      	str	r2, [r7, #16]
 80065a6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80065aa:	617b      	str	r3, [r7, #20]
	prismatic_axis.command_pos = PWM_Satuation(
 80065ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80065b0:	f7fa fa88 	bl	8000ac4 <__aeabi_d2iz>
 80065b4:	4603      	mov	r3, r0
 80065b6:	4619      	mov	r1, r3
 80065b8:	4620      	mov	r0, r4
 80065ba:	eeb0 0a48 	vmov.f32	s0, s16
 80065be:	f7fa fdc9 	bl	8001154 <PWM_Satuation>
 80065c2:	ee07 0a90 	vmov	s15, r0
 80065c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065ca:	4b71      	ldr	r3, [pc, #452]	@ (8006790 <update_control_loops+0x61c>)
 80065cc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// *** REVOLUTE CONTROL ***
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 80065d0:	4b74      	ldr	r3, [pc, #464]	@ (80067a4 <update_control_loops+0x630>)
 80065d2:	ed93 7a00 	vldr	s14, [r3]
 80065d6:	4b74      	ldr	r3, [pc, #464]	@ (80067a8 <update_control_loops+0x634>)
 80065d8:	edd3 7a00 	vldr	s15, [r3]
 80065dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065e0:	4b70      	ldr	r3, [pc, #448]	@ (80067a4 <update_control_loops+0x630>)
 80065e2:	edc3 7a05 	vstr	s15, [r3, #20]

	// Ensure error uses the shortest path for control
	if (revolute_axis.pos_error > PI) {
 80065e6:	4b6f      	ldr	r3, [pc, #444]	@ (80067a4 <update_control_loops+0x630>)
 80065e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80065ec:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80067ac <update_control_loops+0x638>
 80065f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f8:	dd09      	ble.n	800660e <update_control_loops+0x49a>
		revolute_axis.pos_error -= 2.0f * PI;
 80065fa:	4b6a      	ldr	r3, [pc, #424]	@ (80067a4 <update_control_loops+0x630>)
 80065fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8006600:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80067b0 <update_control_loops+0x63c>
 8006604:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006608:	4b66      	ldr	r3, [pc, #408]	@ (80067a4 <update_control_loops+0x630>)
 800660a:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	if (revolute_axis.pos_error < -PI) {
 800660e:	4b65      	ldr	r3, [pc, #404]	@ (80067a4 <update_control_loops+0x630>)
 8006610:	edd3 7a05 	vldr	s15, [r3, #20]
 8006614:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80067b4 <update_control_loops+0x640>
 8006618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800661c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006620:	d509      	bpl.n	8006636 <update_control_loops+0x4c2>
		revolute_axis.pos_error += 2.0f * PI;
 8006622:	4b60      	ldr	r3, [pc, #384]	@ (80067a4 <update_control_loops+0x630>)
 8006624:	edd3 7a05 	vldr	s15, [r3, #20]
 8006628:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80067b0 <update_control_loops+0x63c>
 800662c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006630:	4b5c      	ldr	r3, [pc, #368]	@ (80067a4 <update_control_loops+0x630>)
 8006632:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	revolute_axis.command_vel = PWM_Satuation(
 8006636:	4b5b      	ldr	r3, [pc, #364]	@ (80067a4 <update_control_loops+0x630>)
 8006638:	edd3 7a05 	vldr	s15, [r3, #20]
 800663c:	eeb0 0a67 	vmov.f32	s0, s15
 8006640:	485d      	ldr	r0, [pc, #372]	@ (80067b8 <update_control_loops+0x644>)
 8006642:	f7fa fde9 	bl	8001218 <PID_CONTROLLER_Compute>
 8006646:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 800664a:	4b5c      	ldr	r3, [pc, #368]	@ (80067bc <update_control_loops+0x648>)
 800664c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 8006650:	4610      	mov	r0, r2
 8006652:	4619      	mov	r1, r3
 8006654:	f7fa fa36 	bl	8000ac4 <__aeabi_d2iz>
 8006658:	4604      	mov	r4, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 800665a:	4b58      	ldr	r3, [pc, #352]	@ (80067bc <update_control_loops+0x648>)
 800665c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006660:	60ba      	str	r2, [r7, #8]
 8006662:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006666:	60fb      	str	r3, [r7, #12]
	revolute_axis.command_vel = PWM_Satuation(
 8006668:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800666c:	f7fa fa2a 	bl	8000ac4 <__aeabi_d2iz>
 8006670:	4603      	mov	r3, r0
 8006672:	4619      	mov	r1, r3
 8006674:	4620      	mov	r0, r4
 8006676:	eeb0 0a48 	vmov.f32	s0, s16
 800667a:	f7fa fd6b 	bl	8001154 <PWM_Satuation>
 800667e:	ee07 0a90 	vmov	s15, r0
 8006682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006686:	4b47      	ldr	r3, [pc, #284]	@ (80067a4 <update_control_loops+0x630>)
 8006688:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Add velocity feedforward for trajectory
	if (revolute_axis.trajectory_active) {
 800668c:	4b45      	ldr	r3, [pc, #276]	@ (80067a4 <update_control_loops+0x630>)
 800668e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006692:	2b00      	cmp	r3, #0
 8006694:	d010      	beq.n	80066b8 <update_control_loops+0x544>
		revolute_axis.vel_error = revolute_axis.command_vel
 8006696:	4b43      	ldr	r3, [pc, #268]	@ (80067a4 <update_control_loops+0x630>)
 8006698:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 800669c:	4b41      	ldr	r3, [pc, #260]	@ (80067a4 <update_control_loops+0x630>)
 800669e:	edd3 7a01 	vldr	s15, [r3, #4]
 80066a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066a6:	4b3f      	ldr	r3, [pc, #252]	@ (80067a4 <update_control_loops+0x630>)
 80066a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80066ac:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 80066b0:	4b3c      	ldr	r3, [pc, #240]	@ (80067a4 <update_control_loops+0x630>)
 80066b2:	edc3 7a06 	vstr	s15, [r3, #24]
 80066b6:	e00a      	b.n	80066ce <update_control_loops+0x55a>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 80066b8:	4b3a      	ldr	r3, [pc, #232]	@ (80067a4 <update_control_loops+0x630>)
 80066ba:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 80066be:	4b39      	ldr	r3, [pc, #228]	@ (80067a4 <update_control_loops+0x630>)
 80066c0:	edd3 7a07 	vldr	s15, [r3, #28]
 80066c4:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 80066c8:	4b36      	ldr	r3, [pc, #216]	@ (80067a4 <update_control_loops+0x630>)
 80066ca:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 80066ce:	4b35      	ldr	r3, [pc, #212]	@ (80067a4 <update_control_loops+0x630>)
 80066d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80066d4:	eeb0 0a67 	vmov.f32	s0, s15
 80066d8:	4839      	ldr	r0, [pc, #228]	@ (80067c0 <update_control_loops+0x64c>)
 80066da:	f7fa fd9d 	bl	8001218 <PID_CONTROLLER_Compute>
 80066de:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 80066e2:	4b36      	ldr	r3, [pc, #216]	@ (80067bc <update_control_loops+0x648>)
 80066e4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 80066e8:	4610      	mov	r0, r2
 80066ea:	4619      	mov	r1, r3
 80066ec:	f7fa f9ea 	bl	8000ac4 <__aeabi_d2iz>
 80066f0:	4604      	mov	r4, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 80066f2:	4b32      	ldr	r3, [pc, #200]	@ (80067bc <update_control_loops+0x648>)
 80066f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80066f8:	603a      	str	r2, [r7, #0]
 80066fa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80066fe:	607b      	str	r3, [r7, #4]
	revolute_axis.command_pos = PWM_Satuation(
 8006700:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006704:	f7fa f9de 	bl	8000ac4 <__aeabi_d2iz>
 8006708:	4603      	mov	r3, r0
 800670a:	4619      	mov	r1, r3
 800670c:	4620      	mov	r0, r4
 800670e:	eeb0 0a48 	vmov.f32	s0, s16
 8006712:	f7fa fd1f 	bl	8001154 <PWM_Satuation>
 8006716:	ee07 0a90 	vmov	s15, r0
 800671a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800671e:	4b21      	ldr	r3, [pc, #132]	@ (80067a4 <update_control_loops+0x630>)
 8006720:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// *** FEEDFORWARD COMPENSATION ***
	// Add feed-forward compensation for prismatic axis
	if (prismatic_axis.trajectory_active) {
 8006724:	4b1a      	ldr	r3, [pc, #104]	@ (8006790 <update_control_loops+0x61c>)
 8006726:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800672a:	2b00      	cmp	r3, #0
 800672c:	d052      	beq.n	80067d4 <update_control_loops+0x660>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 800672e:	4b18      	ldr	r3, [pc, #96]	@ (8006790 <update_control_loops+0x61c>)
 8006730:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8006734:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80067c4 <update_control_loops+0x650>
 8006738:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800673c:	eeb0 0a47 	vmov.f32	s0, s14
 8006740:	4821      	ldr	r0, [pc, #132]	@ (80067c8 <update_control_loops+0x654>)
 8006742:	f7fb f8b1 	bl	80018a8 <PRISMATIC_MOTOR_FFD_Compute>
 8006746:	eef0 7a40 	vmov.f32	s15, s0
 800674a:	4b11      	ldr	r3, [pc, #68]	@ (8006790 <update_control_loops+0x61c>)
 800674c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006750:	4b1e      	ldr	r3, [pc, #120]	@ (80067cc <update_control_loops+0x658>)
 8006752:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8006756:	4b13      	ldr	r3, [pc, #76]	@ (80067a4 <update_control_loops+0x630>)
 8006758:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 800675c:	4b0d      	ldr	r3, [pc, #52]	@ (8006794 <update_control_loops+0x620>)
 800675e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006762:	eddf 5a18 	vldr	s11, [pc, #96]	@ 80067c4 <update_control_loops+0x650>
 8006766:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800676a:	eeb0 1a46 	vmov.f32	s2, s12
 800676e:	eef0 0a66 	vmov.f32	s1, s13
 8006772:	eeb0 0a47 	vmov.f32	s0, s14
 8006776:	4816      	ldr	r0, [pc, #88]	@ (80067d0 <update_control_loops+0x65c>)
 8006778:	f7fb f929 	bl	80019ce <PRISMATIC_MOTOR_DFD_Compute>
 800677c:	eef0 7a40 	vmov.f32	s15, s0
 8006780:	4b03      	ldr	r3, [pc, #12]	@ (8006790 <update_control_loops+0x61c>)
 8006782:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006786:	e02d      	b.n	80067e4 <update_control_loops+0x670>
 8006788:	20000358 	.word	0x20000358
 800678c:	20000300 	.word	0x20000300
 8006790:	20000278 	.word	0x20000278
 8006794:	2000043c 	.word	0x2000043c
 8006798:	200004f4 	.word	0x200004f4
 800679c:	20000080 	.word	0x20000080
 80067a0:	2000051c 	.word	0x2000051c
 80067a4:	200002bc 	.word	0x200002bc
 80067a8:	2000035c 	.word	0x2000035c
 80067ac:	40490fdb 	.word	0x40490fdb
 80067b0:	40c90fdb 	.word	0x40c90fdb
 80067b4:	c0490fdb 	.word	0xc0490fdb
 80067b8:	20000544 	.word	0x20000544
 80067bc:	20000000 	.word	0x20000000
 80067c0:	2000056c 	.word	0x2000056c
 80067c4:	447a0000 	.word	0x447a0000
 80067c8:	20000594 	.word	0x20000594
 80067cc:	20000498 	.word	0x20000498
 80067d0:	20000598 	.word	0x20000598
	} else {
		prismatic_axis.ffd = 0.0f;
 80067d4:	4b70      	ldr	r3, [pc, #448]	@ (8006998 <update_control_loops+0x824>)
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 80067dc:	4b6e      	ldr	r3, [pc, #440]	@ (8006998 <update_control_loops+0x824>)
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	// Add feed-forward compensation for revolute axis
	if (revolute_axis.trajectory_active) {
 80067e4:	4b6d      	ldr	r3, [pc, #436]	@ (800699c <update_control_loops+0x828>)
 80067e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d025      	beq.n	800683a <update_control_loops+0x6c6>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 80067ee:	4b6b      	ldr	r3, [pc, #428]	@ (800699c <update_control_loops+0x828>)
 80067f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80067f4:	eeb0 0a67 	vmov.f32	s0, s15
 80067f8:	4869      	ldr	r0, [pc, #420]	@ (80069a0 <update_control_loops+0x82c>)
 80067fa:	f7fa fecd 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 80067fe:	eef0 7a40 	vmov.f32	s15, s0
 8006802:	4b66      	ldr	r3, [pc, #408]	@ (800699c <update_control_loops+0x828>)
 8006804:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006808:	4b66      	ldr	r3, [pc, #408]	@ (80069a4 <update_control_loops+0x830>)
 800680a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 800680e:	4b66      	ldr	r3, [pc, #408]	@ (80069a8 <update_control_loops+0x834>)
 8006810:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006814:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 80069ac <update_control_loops+0x838>
 8006818:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800681c:	eeb0 1a66 	vmov.f32	s2, s13
 8006820:	eddf 0a63 	vldr	s1, [pc, #396]	@ 80069b0 <update_control_loops+0x83c>
 8006824:	eeb0 0a47 	vmov.f32	s0, s14
 8006828:	4862      	ldr	r0, [pc, #392]	@ (80069b4 <update_control_loops+0x840>)
 800682a:	f7fa ff49 	bl	80016c0 <REVOLUTE_MOTOR_DFD_Compute>
 800682e:	eef0 7a40 	vmov.f32	s15, s0
 8006832:	4b5a      	ldr	r3, [pc, #360]	@ (800699c <update_control_loops+0x828>)
 8006834:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006838:	e007      	b.n	800684a <update_control_loops+0x6d6>
	} else {
		revolute_axis.ffd = 0.0f;
 800683a:	4b58      	ldr	r3, [pc, #352]	@ (800699c <update_control_loops+0x828>)
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = 0.0f;
 8006842:	4b56      	ldr	r3, [pc, #344]	@ (800699c <update_control_loops+0x828>)
 8006844:	f04f 0200 	mov.w	r2, #0
 8006848:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	// Add feedforward terms to commands
	prismatic_axis.command_pos += prismatic_axis.dfd + prismatic_axis.ffd;
 800684a:	4b53      	ldr	r3, [pc, #332]	@ (8006998 <update_control_loops+0x824>)
 800684c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006850:	4b51      	ldr	r3, [pc, #324]	@ (8006998 <update_control_loops+0x824>)
 8006852:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8006856:	4b50      	ldr	r3, [pc, #320]	@ (8006998 <update_control_loops+0x824>)
 8006858:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800685c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006864:	4b4c      	ldr	r3, [pc, #304]	@ (8006998 <update_control_loops+0x824>)
 8006866:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	revolute_axis.command_pos += revolute_axis.dfd + revolute_axis.ffd;
 800686a:	4b4c      	ldr	r3, [pc, #304]	@ (800699c <update_control_loops+0x828>)
 800686c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006870:	4b4a      	ldr	r3, [pc, #296]	@ (800699c <update_control_loops+0x828>)
 8006872:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8006876:	4b49      	ldr	r3, [pc, #292]	@ (800699c <update_control_loops+0x828>)
 8006878:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800687c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006884:	4b45      	ldr	r3, [pc, #276]	@ (800699c <update_control_loops+0x828>)
 8006886:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Final saturation
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800688a:	4b43      	ldr	r3, [pc, #268]	@ (8006998 <update_control_loops+0x824>)
 800688c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006890:	4b49      	ldr	r3, [pc, #292]	@ (80069b8 <update_control_loops+0x844>)
 8006892:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006896:	4610      	mov	r0, r2
 8006898:	4619      	mov	r1, r3
 800689a:	f7fa f913 	bl	8000ac4 <__aeabi_d2iz>
 800689e:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80068a0:	4b45      	ldr	r3, [pc, #276]	@ (80069b8 <update_control_loops+0x844>)
 80068a2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80068a6:	4615      	mov	r5, r2
 80068a8:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80068ac:	4628      	mov	r0, r5
 80068ae:	4631      	mov	r1, r6
 80068b0:	f7fa f908 	bl	8000ac4 <__aeabi_d2iz>
 80068b4:	4603      	mov	r3, r0
 80068b6:	4619      	mov	r1, r3
 80068b8:	4620      	mov	r0, r4
 80068ba:	eeb0 0a48 	vmov.f32	s0, s16
 80068be:	f7fa fc49 	bl	8001154 <PWM_Satuation>
 80068c2:	ee07 0a90 	vmov	s15, r0
 80068c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068ca:	4b33      	ldr	r3, [pc, #204]	@ (8006998 <update_control_loops+0x824>)
 80068cc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80068d0:	4b32      	ldr	r3, [pc, #200]	@ (800699c <update_control_loops+0x828>)
 80068d2:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80068d6:	4b39      	ldr	r3, [pc, #228]	@ (80069bc <update_control_loops+0x848>)
 80068d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80068dc:	4610      	mov	r0, r2
 80068de:	4619      	mov	r1, r3
 80068e0:	f7fa f8f0 	bl	8000ac4 <__aeabi_d2iz>
 80068e4:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80068e6:	4b35      	ldr	r3, [pc, #212]	@ (80069bc <update_control_loops+0x848>)
 80068e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80068ec:	4692      	mov	sl, r2
 80068ee:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80068f2:	4650      	mov	r0, sl
 80068f4:	4659      	mov	r1, fp
 80068f6:	f7fa f8e5 	bl	8000ac4 <__aeabi_d2iz>
 80068fa:	4603      	mov	r3, r0
 80068fc:	4619      	mov	r1, r3
 80068fe:	4620      	mov	r0, r4
 8006900:	eeb0 0a48 	vmov.f32	s0, s16
 8006904:	f7fa fc26 	bl	8001154 <PWM_Satuation>
 8006908:	ee07 0a90 	vmov	s15, r0
 800690c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006910:	4b22      	ldr	r3, [pc, #136]	@ (800699c <update_control_loops+0x828>)
 8006912:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply commands to motors
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006916:	4b20      	ldr	r3, [pc, #128]	@ (8006998 <update_control_loops+0x824>)
 8006918:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800691c:	eef0 0a67 	vmov.f32	s1, s15
 8006920:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80069c0 <update_control_loops+0x84c>
 8006924:	4827      	ldr	r0, [pc, #156]	@ (80069c4 <update_control_loops+0x850>)
 8006926:	f7fa fd4f 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 800692a:	4b1c      	ldr	r3, [pc, #112]	@ (800699c <update_control_loops+0x828>)
 800692c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006930:	eef0 0a67 	vmov.f32	s1, s15
 8006934:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80069c0 <update_control_loops+0x84c>
 8006938:	4823      	ldr	r0, [pc, #140]	@ (80069c8 <update_control_loops+0x854>)
 800693a:	f7fa fd45 	bl	80013c8 <MDXX_set_range>

	// Update display values
	prismatic_axis.mm = prismatic_encoder.mm;
 800693e:	4b1a      	ldr	r3, [pc, #104]	@ (80069a8 <update_control_loops+0x834>)
 8006940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006942:	4a15      	ldr	r2, [pc, #84]	@ (8006998 <update_control_loops+0x824>)
 8006944:	63d3      	str	r3, [r2, #60]	@ 0x3c
	prismatic_axis.target = prismatic_axis.target_pos;
 8006946:	4b14      	ldr	r3, [pc, #80]	@ (8006998 <update_control_loops+0x824>)
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	4a13      	ldr	r2, [pc, #76]	@ (8006998 <update_control_loops+0x824>)
 800694c:	6393      	str	r3, [r2, #56]	@ 0x38

	revolute_axis.deg = UnitConverter_angle(&converter_system,
 800694e:	4b1f      	ldr	r3, [pc, #124]	@ (80069cc <update_control_loops+0x858>)
 8006950:	edd3 7a00 	vldr	s15, [r3]
 8006954:	220e      	movs	r2, #14
 8006956:	210f      	movs	r1, #15
 8006958:	eeb0 0a67 	vmov.f32	s0, s15
 800695c:	481c      	ldr	r0, [pc, #112]	@ (80069d0 <update_control_loops+0x85c>)
 800695e:	f7fd fe09 	bl	8004574 <UnitConverter_angle>
 8006962:	eef0 7a40 	vmov.f32	s15, s0
 8006966:	4b0d      	ldr	r3, [pc, #52]	@ (800699c <update_control_loops+0x828>)
 8006968:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
	revolute_axis.target = UnitConverter_angle(&converter_system, angle_deg,
 800696c:	4b19      	ldr	r3, [pc, #100]	@ (80069d4 <update_control_loops+0x860>)
 800696e:	edd3 7a00 	vldr	s15, [r3]
 8006972:	220e      	movs	r2, #14
 8006974:	210f      	movs	r1, #15
 8006976:	eeb0 0a67 	vmov.f32	s0, s15
 800697a:	4815      	ldr	r0, [pc, #84]	@ (80069d0 <update_control_loops+0x85c>)
 800697c:	f7fd fdfa 	bl	8004574 <UnitConverter_angle>
 8006980:	eef0 7a40 	vmov.f32	s15, s0
 8006984:	4b05      	ldr	r3, [pc, #20]	@ (800699c <update_control_loops+0x828>)
 8006986:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			UNIT_RADIAN, UNIT_DEGREE);
}
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	ecbd 8b02 	vpop	{d8}
 8006992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006996:	bf00      	nop
 8006998:	20000278 	.word	0x20000278
 800699c:	200002bc 	.word	0x200002bc
 80069a0:	200005a0 	.word	0x200005a0
 80069a4:	20000498 	.word	0x20000498
 80069a8:	2000043c 	.word	0x2000043c
 80069ac:	447a0000 	.word	0x447a0000
 80069b0:	00000000 	.word	0x00000000
 80069b4:	200005a4 	.word	0x200005a4
 80069b8:	20000080 	.word	0x20000080
 80069bc:	20000000 	.word	0x20000000
 80069c0:	44fa0000 	.word	0x44fa0000
 80069c4:	200003a4 	.word	0x200003a4
 80069c8:	200003f0 	.word	0x200003f0
 80069cc:	2000035c 	.word	0x2000035c
 80069d0:	20000808 	.word	0x20000808
 80069d4:	20000364 	.word	0x20000364

080069d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PROX_Pin) {
 80069e2:	88fb      	ldrh	r3, [r7, #6]
 80069e4:	2b40      	cmp	r3, #64	@ 0x40
 80069e6:	d104      	bne.n	80069f2 <HAL_GPIO_EXTI_Callback+0x1a>
		prox_count++;
 80069e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006a18 <HAL_GPIO_EXTI_Callback+0x40>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3301      	adds	r3, #1
 80069ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006a18 <HAL_GPIO_EXTI_Callback+0x40>)
 80069f0:	6013      	str	r3, [r2, #0]
	}

	if (GPIO_Pin == UPPER_PHOTO_Pin) {
 80069f2:	88fb      	ldrh	r3, [r7, #6]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d102      	bne.n	80069fe <HAL_GPIO_EXTI_Callback+0x26>
		up_photo = true;
 80069f8:	4b08      	ldr	r3, [pc, #32]	@ (8006a1c <HAL_GPIO_EXTI_Callback+0x44>)
 80069fa:	2201      	movs	r2, #1
 80069fc:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 80069fe:	88fb      	ldrh	r3, [r7, #6]
 8006a00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a04:	d102      	bne.n	8006a0c <HAL_GPIO_EXTI_Callback+0x34>
		low_photo = true;
 8006a06:	4b06      	ldr	r3, [pc, #24]	@ (8006a20 <HAL_GPIO_EXTI_Callback+0x48>)
 8006a08:	2201      	movs	r2, #1
 8006a0a:	701a      	strb	r2, [r3, #0]
	}
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	20000368 	.word	0x20000368
 8006a1c:	2000036c 	.word	0x2000036c
 8006a20:	2000036d 	.word	0x2000036d

08006a24 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
	// Handle UART reception if needed
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a42      	ldr	r2, [pc, #264]	@ (8006b4c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d17c      	bne.n	8006b42 <HAL_TIM_PeriodElapsedCallback+0x10a>
		// Update sensor readings
		plotter_update_sensors();
 8006a48:	f000 fc76 	bl	8007338 <plotter_update_sensors>

		QEI_get_diff_count(&prismatic_encoder);
 8006a4c:	4840      	ldr	r0, [pc, #256]	@ (8006b50 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8006a4e:	f7fc ff27 	bl	80038a0 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8006a52:	483f      	ldr	r0, [pc, #252]	@ (8006b50 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8006a54:	f7fd f810 	bl	8003a78 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 8006a58:	483e      	ldr	r0, [pc, #248]	@ (8006b54 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8006a5a:	f7fc ff21 	bl	80038a0 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8006a5e:	483d      	ldr	r0, [pc, #244]	@ (8006b54 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8006a60:	f7fd f80a 	bl	8003a78 <QEI_compute_data>

		// Calculate control signals for revolute axis
		revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 8006a64:	4b3c      	ldr	r3, [pc, #240]	@ (8006b58 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8006a66:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006a6a:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8006a6e:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8006a72:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 8006b5c <HAL_TIM_PeriodElapsedCallback+0x124>
 8006a76:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8006b60 <HAL_TIM_PeriodElapsedCallback+0x128>
 8006a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8006a7e:	f7fb f97b 	bl	8001d78 <mapf>
 8006a82:	eef0 7a40 	vmov.f32	s15, s0
 8006a86:	4b34      	ldr	r3, [pc, #208]	@ (8006b58 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8006a88:	edc3 7a08 	vstr	s15, [r3, #32]
				65535.0f, -12.0f, 12.0f);

		revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 8006a8c:	4b32      	ldr	r3, [pc, #200]	@ (8006b58 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8006a8e:	edd3 7a08 	vldr	s15, [r3, #32]
 8006a92:	4b30      	ldr	r3, [pc, #192]	@ (8006b54 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8006a94:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8006a98:	eef0 0a47 	vmov.f32	s1, s14
 8006a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8006aa0:	4830      	ldr	r0, [pc, #192]	@ (8006b64 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8006aa2:	f7fd ffc7 	bl	8004a34 <SteadyStateKalmanFilter>
 8006aa6:	eef0 7a40 	vmov.f32	s15, s0
 8006aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8006b58 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8006aac:	edc3 7a07 	vstr	s15, [r3, #28]
				&revolute_kalman, revolute_axis.input_voltage,
				revolute_encoder.rads);

		if (isnan(revolute_axis.kalman_velocity)) {
 8006ab0:	4b29      	ldr	r3, [pc, #164]	@ (8006b58 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8006ab2:	edd3 7a07 	vldr	s15, [r3, #28]
 8006ab6:	eef4 7a67 	vcmp.f32	s15, s15
 8006aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006abe:	d703      	bvc.n	8006ac8 <HAL_TIM_PeriodElapsedCallback+0x90>
			revolute_axis.kalman_velocity = 0.0f;
 8006ac0:	4b25      	ldr	r3, [pc, #148]	@ (8006b58 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8006ac2:	f04f 0200 	mov.w	r2, #0
 8006ac6:	61da      	str	r2, [r3, #28]
		}

		// Calculate control signals for prismatic axis
		prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 8006ac8:	4b27      	ldr	r3, [pc, #156]	@ (8006b68 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8006aca:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006ace:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8006ad2:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8006ad6:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 8006b5c <HAL_TIM_PeriodElapsedCallback+0x124>
 8006ada:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8006b60 <HAL_TIM_PeriodElapsedCallback+0x128>
 8006ade:	eeb0 0a67 	vmov.f32	s0, s15
 8006ae2:	f7fb f949 	bl	8001d78 <mapf>
 8006ae6:	eef0 7a40 	vmov.f32	s15, s0
 8006aea:	4b1f      	ldr	r3, [pc, #124]	@ (8006b68 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8006aec:	edc3 7a08 	vstr	s15, [r3, #32]
				-65535.0f, 65535.0f, -12.0f, 12.0f);

		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8006af0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b68 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8006af2:	edd3 7a08 	vldr	s15, [r3, #32]
 8006af6:	4b16      	ldr	r3, [pc, #88]	@ (8006b50 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8006af8:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8006afc:	eef0 0a47 	vmov.f32	s1, s14
 8006b00:	eeb0 0a67 	vmov.f32	s0, s15
 8006b04:	4819      	ldr	r0, [pc, #100]	@ (8006b6c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8006b06:	f7fc f905 	bl	8002d14 <MotorKalman_Estimate>
 8006b0a:	eeb0 7a40 	vmov.f32	s14, s0
				prismatic_axis.input_voltage, prismatic_encoder.rads)
				* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8006b0e:	4b18      	ldr	r3, [pc, #96]	@ (8006b70 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8006b10:	edd3 7a04 	vldr	s15, [r3, #16]
 8006b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b18:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8006b74 <HAL_TIM_PeriodElapsedCallback+0x13c>
 8006b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8006b20:	4b11      	ldr	r3, [pc, #68]	@ (8006b68 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8006b22:	edc3 7a07 	vstr	s15, [r3, #28]

		if (isnan(prismatic_axis.kalman_velocity)) {
 8006b26:	4b10      	ldr	r3, [pc, #64]	@ (8006b68 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8006b28:	edd3 7a07 	vldr	s15, [r3, #28]
 8006b2c:	eef4 7a67 	vcmp.f32	s15, s15
 8006b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b34:	d703      	bvc.n	8006b3e <HAL_TIM_PeriodElapsedCallback+0x106>
			prismatic_axis.kalman_velocity = 0.0f;
 8006b36:	4b0c      	ldr	r3, [pc, #48]	@ (8006b68 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8006b38:	f04f 0200 	mov.w	r2, #0
 8006b3c:	61da      	str	r2, [r3, #28]
		}

		update_control_loops();
 8006b3e:	f7ff fb19 	bl	8006174 <update_control_loops>
	}
}
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	200019ec 	.word	0x200019ec
 8006b50:	2000043c 	.word	0x2000043c
 8006b54:	20000498 	.word	0x20000498
 8006b58:	200002bc 	.word	0x200002bc
 8006b5c:	477fff00 	.word	0x477fff00
 8006b60:	c77fff00 	.word	0xc77fff00
 8006b64:	2000152c 	.word	0x2000152c
 8006b68:	20000278 	.word	0x20000278
 8006b6c:	200011c0 	.word	0x200011c0
 8006b70:	20000100 	.word	0x20000100
 8006b74:	447a0000 	.word	0x447a0000

08006b78 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006b7c:	b672      	cpsid	i
}
 8006b7e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8006b80:	bf00      	nop
 8006b82:	e7fd      	b.n	8006b80 <Error_Handler+0x8>
 8006b84:	0000      	movs	r0, r0
	...

08006b88 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8006b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b8c:	ed2d 8b02 	vpush	{d8}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = 500;
 8006b94:	49c4      	ldr	r1, [pc, #784]	@ (8006ea8 <plotter_begin+0x320>)
 8006b96:	f04f 0200 	mov.w	r2, #0
 8006b9a:	4bc4      	ldr	r3, [pc, #784]	@ (8006eac <plotter_begin+0x324>)
 8006b9c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 8006ba0:	4bc1      	ldr	r3, [pc, #772]	@ (8006ea8 <plotter_begin+0x320>)
 8006ba2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	f7f9 fb3b 	bl	8000224 <__adddf3>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	49bd      	ldr	r1, [pc, #756]	@ (8006ea8 <plotter_begin+0x320>)
 8006bb4:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500;
 8006bb8:	49bb      	ldr	r1, [pc, #748]	@ (8006ea8 <plotter_begin+0x320>)
 8006bba:	f04f 0200 	mov.w	r2, #0
 8006bbe:	4bbb      	ldr	r3, [pc, #748]	@ (8006eac <plotter_begin+0x324>)
 8006bc0:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = ZGX45RGG_400RPM_Constant.sdd_max;
 8006bc4:	4bb8      	ldr	r3, [pc, #736]	@ (8006ea8 <plotter_begin+0x320>)
 8006bc6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8006bca:	49b7      	ldr	r1, [pc, #732]	@ (8006ea8 <plotter_begin+0x320>)
 8006bcc:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8006bd0:	4bb7      	ldr	r3, [pc, #732]	@ (8006eb0 <plotter_begin+0x328>)
 8006bd2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0) - 2.0;
 8006bd6:	a3b0      	add	r3, pc, #704	@ (adr r3, 8006e98 <plotter_begin+0x310>)
 8006bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bdc:	f7f9 fcd8 	bl	8000590 <__aeabi_dmul>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	4610      	mov	r0, r2
 8006be6:	4619      	mov	r1, r3
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006bf0:	f7f9 fb16 	bl	8000220 <__aeabi_dsub>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8006bf8:	49ad      	ldr	r1, [pc, #692]	@ (8006eb0 <plotter_begin+0x328>)
 8006bfa:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	ZGX45RGG_150RPM_Constant.qdd_max = ZGX45RGG_150RPM_Constant.qd_max * 0.4;
 8006bfe:	4bac      	ldr	r3, [pc, #688]	@ (8006eb0 <plotter_begin+0x328>)
 8006c00:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8006c04:	a3a6      	add	r3, pc, #664	@ (adr r3, 8006ea0 <plotter_begin+0x318>)
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	f7f9 fcc1 	bl	8000590 <__aeabi_dmul>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	49a7      	ldr	r1, [pc, #668]	@ (8006eb0 <plotter_begin+0x328>)
 8006c14:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	ZGX45RGG_150RPM_Constant.traject_qd_max = ZGX45RGG_150RPM_Constant.qd_max;
 8006c18:	4ba5      	ldr	r3, [pc, #660]	@ (8006eb0 <plotter_begin+0x328>)
 8006c1a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006c1e:	49a4      	ldr	r1, [pc, #656]	@ (8006eb0 <plotter_begin+0x328>)
 8006c20:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = ZGX45RGG_150RPM_Constant.qdd_max;
 8006c24:	4ba2      	ldr	r3, [pc, #648]	@ (8006eb0 <plotter_begin+0x328>)
 8006c26:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8006c2a:	49a1      	ldr	r1, [pc, #644]	@ (8006eb0 <plotter_begin+0x328>)
 8006c2c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8006c30:	2100      	movs	r1, #0
 8006c32:	48a0      	ldr	r0, [pc, #640]	@ (8006eb4 <plotter_begin+0x32c>)
 8006c34:	f000 fc46 	bl	80074c4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8006c38:	eddf 2a9f 	vldr	s5, [pc, #636]	@ 8006eb8 <plotter_begin+0x330>
 8006c3c:	ed9f 2a9f 	vldr	s4, [pc, #636]	@ 8006ebc <plotter_begin+0x334>
 8006c40:	eddf 1a9f 	vldr	s3, [pc, #636]	@ 8006ec0 <plotter_begin+0x338>
 8006c44:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 8006ec0 <plotter_begin+0x338>
 8006c48:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 8006ec4 <plotter_begin+0x33c>
 8006c4c:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8006eb8 <plotter_begin+0x330>
 8006c50:	4898      	ldr	r0, [pc, #608]	@ (8006eb4 <plotter_begin+0x32c>)
 8006c52:	f000 fc95 	bl	8007580 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8006c56:	2102      	movs	r1, #2
 8006c58:	489b      	ldr	r0, [pc, #620]	@ (8006ec8 <plotter_begin+0x340>)
 8006c5a:	f000 fc33 	bl	80074c4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8006c5e:	ed9f 3a96 	vldr	s6, [pc, #600]	@ 8006eb8 <plotter_begin+0x330>
 8006c62:	eddf 2a96 	vldr	s5, [pc, #600]	@ 8006ebc <plotter_begin+0x334>
 8006c66:	ed9f 2a96 	vldr	s4, [pc, #600]	@ 8006ec0 <plotter_begin+0x338>
 8006c6a:	eddf 1a95 	vldr	s3, [pc, #596]	@ 8006ec0 <plotter_begin+0x338>
 8006c6e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8006c72:	eddf 0a94 	vldr	s1, [pc, #592]	@ 8006ec4 <plotter_begin+0x33c>
 8006c76:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8006eb8 <plotter_begin+0x330>
 8006c7a:	4893      	ldr	r0, [pc, #588]	@ (8006ec8 <plotter_begin+0x340>)
 8006c7c:	f000 fcab 	bl	80075d6 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8006c80:	2100      	movs	r1, #0
 8006c82:	4892      	ldr	r0, [pc, #584]	@ (8006ecc <plotter_begin+0x344>)
 8006c84:	f000 fc1e 	bl	80074c4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8006c88:	eddf 2a91 	vldr	s5, [pc, #580]	@ 8006ed0 <plotter_begin+0x348>
 8006c8c:	ed9f 2a91 	vldr	s4, [pc, #580]	@ 8006ed4 <plotter_begin+0x34c>
 8006c90:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 8006ec0 <plotter_begin+0x338>
 8006c94:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 8006ec0 <plotter_begin+0x338>
 8006c98:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 8006ec4 <plotter_begin+0x33c>
 8006c9c:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 8006ed0 <plotter_begin+0x348>
 8006ca0:	488a      	ldr	r0, [pc, #552]	@ (8006ecc <plotter_begin+0x344>)
 8006ca2:	f000 fc6d 	bl	8007580 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8006ca6:	2102      	movs	r1, #2
 8006ca8:	488b      	ldr	r0, [pc, #556]	@ (8006ed8 <plotter_begin+0x350>)
 8006caa:	f000 fc0b 	bl	80074c4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8006cae:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8006cb2:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8006cb6:	ed9f 2a82 	vldr	s4, [pc, #520]	@ 8006ec0 <plotter_begin+0x338>
 8006cba:	eddf 1a81 	vldr	s3, [pc, #516]	@ 8006ec0 <plotter_begin+0x338>
 8006cbe:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8006cc2:	eddf 0a80 	vldr	s1, [pc, #512]	@ 8006ec4 <plotter_begin+0x33c>
 8006cc6:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8006cca:	4883      	ldr	r0, [pc, #524]	@ (8006ed8 <plotter_begin+0x350>)
 8006ccc:	f000 fc83 	bl	80075d6 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	4882      	ldr	r0, [pc, #520]	@ (8006edc <plotter_begin+0x354>)
 8006cd4:	f000 fbf6 	bl	80074c4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8006cd8:	4b73      	ldr	r3, [pc, #460]	@ (8006ea8 <plotter_begin+0x320>)
 8006cda:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006cde:	4610      	mov	r0, r2
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	f7f9 ff37 	bl	8000b54 <__aeabi_d2f>
 8006ce6:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8006ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8006ea8 <plotter_begin+0x320>)
 8006cea:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006cee:	4610      	mov	r0, r2
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	f7f9 ff2f 	bl	8000b54 <__aeabi_d2f>
 8006cf6:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8006cf8:	ee07 3a90 	vmov	s15, r3
 8006cfc:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8006d00:	4b69      	ldr	r3, [pc, #420]	@ (8006ea8 <plotter_begin+0x320>)
 8006d02:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8006d06:	4610      	mov	r0, r2
 8006d08:	4619      	mov	r1, r3
 8006d0a:	f7f9 ff23 	bl	8000b54 <__aeabi_d2f>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	ee02 3a90 	vmov	s5, r3
 8006d14:	eeb0 2a48 	vmov.f32	s4, s16
 8006d18:	eddf 1a69 	vldr	s3, [pc, #420]	@ 8006ec0 <plotter_begin+0x338>
 8006d1c:	ed9f 1a68 	vldr	s2, [pc, #416]	@ 8006ec0 <plotter_begin+0x338>
 8006d20:	eddf 0a68 	vldr	s1, [pc, #416]	@ 8006ec4 <plotter_begin+0x33c>
 8006d24:	ee00 4a10 	vmov	s0, r4
 8006d28:	486c      	ldr	r0, [pc, #432]	@ (8006edc <plotter_begin+0x354>)
 8006d2a:	f000 fc29 	bl	8007580 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8006d2e:	2102      	movs	r1, #2
 8006d30:	486b      	ldr	r0, [pc, #428]	@ (8006ee0 <plotter_begin+0x358>)
 8006d32:	f000 fbc7 	bl	80074c4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8006d36:	4b5c      	ldr	r3, [pc, #368]	@ (8006ea8 <plotter_begin+0x320>)
 8006d38:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	4619      	mov	r1, r3
 8006d40:	f7f9 ff08 	bl	8000b54 <__aeabi_d2f>
 8006d44:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8006d46:	4b58      	ldr	r3, [pc, #352]	@ (8006ea8 <plotter_begin+0x320>)
 8006d48:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4619      	mov	r1, r3
 8006d50:	f7f9 ff00 	bl	8000b54 <__aeabi_d2f>
 8006d54:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8006d5e:	4b52      	ldr	r3, [pc, #328]	@ (8006ea8 <plotter_begin+0x320>)
 8006d60:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8006d64:	4610      	mov	r0, r2
 8006d66:	4619      	mov	r1, r3
 8006d68:	f7f9 fef4 	bl	8000b54 <__aeabi_d2f>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	ee03 3a10 	vmov	s6, r3
 8006d72:	eef0 2a48 	vmov.f32	s5, s16
 8006d76:	ed9f 2a52 	vldr	s4, [pc, #328]	@ 8006ec0 <plotter_begin+0x338>
 8006d7a:	eddf 1a51 	vldr	s3, [pc, #324]	@ 8006ec0 <plotter_begin+0x338>
 8006d7e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8006d82:	eddf 0a50 	vldr	s1, [pc, #320]	@ 8006ec4 <plotter_begin+0x33c>
 8006d86:	ee00 4a10 	vmov	s0, r4
 8006d8a:	4855      	ldr	r0, [pc, #340]	@ (8006ee0 <plotter_begin+0x358>)
 8006d8c:	f000 fc23 	bl	80075d6 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8006d90:	2100      	movs	r1, #0
 8006d92:	4854      	ldr	r0, [pc, #336]	@ (8006ee4 <plotter_begin+0x35c>)
 8006d94:	f000 fb96 	bl	80074c4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006d98:	4b45      	ldr	r3, [pc, #276]	@ (8006eb0 <plotter_begin+0x328>)
 8006d9a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006d9e:	4610      	mov	r0, r2
 8006da0:	4619      	mov	r1, r3
 8006da2:	f7f9 fed7 	bl	8000b54 <__aeabi_d2f>
 8006da6:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8006da8:	4b41      	ldr	r3, [pc, #260]	@ (8006eb0 <plotter_begin+0x328>)
 8006daa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006dae:	4610      	mov	r0, r2
 8006db0:	4619      	mov	r1, r3
 8006db2:	f7f9 fecf 	bl	8000b54 <__aeabi_d2f>
 8006db6:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006db8:	ee07 3a90 	vmov	s15, r3
 8006dbc:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 8006dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8006eb0 <plotter_begin+0x328>)
 8006dc2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	4619      	mov	r1, r3
 8006dca:	f7f9 fec3 	bl	8000b54 <__aeabi_d2f>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	ee02 3a90 	vmov	s5, r3
 8006dd4:	eeb0 2a48 	vmov.f32	s4, s16
 8006dd8:	eddf 1a39 	vldr	s3, [pc, #228]	@ 8006ec0 <plotter_begin+0x338>
 8006ddc:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 8006ec0 <plotter_begin+0x338>
 8006de0:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8006ec4 <plotter_begin+0x33c>
 8006de4:	ee00 4a10 	vmov	s0, r4
 8006de8:	483e      	ldr	r0, [pc, #248]	@ (8006ee4 <plotter_begin+0x35c>)
 8006dea:	f000 fbc9 	bl	8007580 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 8006dee:	2102      	movs	r1, #2
 8006df0:	483d      	ldr	r0, [pc, #244]	@ (8006ee8 <plotter_begin+0x360>)
 8006df2:	f000 fb67 	bl	80074c4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006df6:	4b2e      	ldr	r3, [pc, #184]	@ (8006eb0 <plotter_begin+0x328>)
 8006df8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	4619      	mov	r1, r3
 8006e00:	f7f9 fea8 	bl	8000b54 <__aeabi_d2f>
 8006e04:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8006e06:	4b2a      	ldr	r3, [pc, #168]	@ (8006eb0 <plotter_begin+0x328>)
 8006e08:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4619      	mov	r1, r3
 8006e10:	f7f9 fea0 	bl	8000b54 <__aeabi_d2f>
 8006e14:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8006e1e:	4b24      	ldr	r3, [pc, #144]	@ (8006eb0 <plotter_begin+0x328>)
 8006e20:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8006e24:	4610      	mov	r0, r2
 8006e26:	4619      	mov	r1, r3
 8006e28:	f7f9 fe94 	bl	8000b54 <__aeabi_d2f>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	ee03 3a10 	vmov	s6, r3
 8006e32:	eef0 2a48 	vmov.f32	s5, s16
 8006e36:	ed9f 2a22 	vldr	s4, [pc, #136]	@ 8006ec0 <plotter_begin+0x338>
 8006e3a:	eddf 1a21 	vldr	s3, [pc, #132]	@ 8006ec0 <plotter_begin+0x338>
 8006e3e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8006e42:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8006ec4 <plotter_begin+0x33c>
 8006e46:	ee00 4a10 	vmov	s0, r4
 8006e4a:	4827      	ldr	r0, [pc, #156]	@ (8006ee8 <plotter_begin+0x360>)
 8006e4c:	f000 fbc3 	bl	80075d6 <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 8006e50:	4826      	ldr	r0, [pc, #152]	@ (8006eec <plotter_begin+0x364>)
 8006e52:	f7fd faf9 	bl	8004448 <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 8006e56:	4b26      	ldr	r3, [pc, #152]	@ (8006ef0 <plotter_begin+0x368>)
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7f9 fb40 	bl	80004e0 <__aeabi_f2d>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	f7f9 f9de 	bl	8000224 <__adddf3>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4619      	mov	r1, r3
 8006e70:	f04f 0200 	mov.w	r2, #0
 8006e74:	4b1f      	ldr	r3, [pc, #124]	@ (8006ef4 <plotter_begin+0x36c>)
 8006e76:	f7f9 fb8b 	bl	8000590 <__aeabi_dmul>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8006e7e:	4610      	mov	r0, r2
 8006e80:	4619      	mov	r1, r3
 8006e82:	f7f9 fe67 	bl	8000b54 <__aeabi_d2f>
 8006e86:	4603      	mov	r3, r0
 8006e88:	ee00 3a90 	vmov	s1, r3
 8006e8c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006e90:	e032      	b.n	8006ef8 <plotter_begin+0x370>
 8006e92:	bf00      	nop
 8006e94:	f3af 8000 	nop.w
 8006e98:	55555555 	.word	0x55555555
 8006e9c:	3fe55555 	.word	0x3fe55555
 8006ea0:	9999999a 	.word	0x9999999a
 8006ea4:	3fd99999 	.word	0x3fd99999
 8006ea8:	20000080 	.word	0x20000080
 8006eac:	407f4000 	.word	0x407f4000
 8006eb0:	20000000 	.word	0x20000000
 8006eb4:	200005e8 	.word	0x200005e8
 8006eb8:	477fff00 	.word	0x477fff00
 8006ebc:	c77fff00 	.word	0xc77fff00
 8006ec0:	00000000 	.word	0x00000000
 8006ec4:	3dcccccd 	.word	0x3dcccccd
 8006ec8:	2000062c 	.word	0x2000062c
 8006ecc:	20000670 	.word	0x20000670
 8006ed0:	43480000 	.word	0x43480000
 8006ed4:	c3480000 	.word	0xc3480000
 8006ed8:	200006b4 	.word	0x200006b4
 8006edc:	200006f8 	.word	0x200006f8
 8006ee0:	2000073c 	.word	0x2000073c
 8006ee4:	20000780 	.word	0x20000780
 8006ee8:	200007c4 	.word	0x200007c4
 8006eec:	20000808 	.word	0x20000808
 8006ef0:	20000100 	.word	0x20000100
 8006ef4:	408f4000 	.word	0x408f4000
 8006ef8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006efc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006f00:	49bd      	ldr	r1, [pc, #756]	@ (80071f8 <plotter_begin+0x670>)
 8006f02:	48be      	ldr	r0, [pc, #760]	@ (80071fc <plotter_begin+0x674>)
 8006f04:	f7fc fc5a 	bl	80037bc <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8006f08:	eddf 0abd 	vldr	s1, [pc, #756]	@ 8007200 <plotter_begin+0x678>
 8006f0c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006f10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006f18:	49ba      	ldr	r1, [pc, #744]	@ (8007204 <plotter_begin+0x67c>)
 8006f1a:	48bb      	ldr	r0, [pc, #748]	@ (8007208 <plotter_begin+0x680>)
 8006f1c:	f7fc fc4e 	bl	80037bc <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8006f20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f2a:	2204      	movs	r2, #4
 8006f2c:	49b7      	ldr	r1, [pc, #732]	@ (800720c <plotter_begin+0x684>)
 8006f2e:	48b8      	ldr	r0, [pc, #736]	@ (8007210 <plotter_begin+0x688>)
 8006f30:	f7fa fa26 	bl	8001380 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8006f34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	4bb6      	ldr	r3, [pc, #728]	@ (8007214 <plotter_begin+0x68c>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	49b3      	ldr	r1, [pc, #716]	@ (800720c <plotter_begin+0x684>)
 8006f40:	48b5      	ldr	r0, [pc, #724]	@ (8007218 <plotter_begin+0x690>)
 8006f42:	f7fa fa1d 	bl	8001380 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8006f46:	220c      	movs	r2, #12
 8006f48:	49b4      	ldr	r1, [pc, #720]	@ (800721c <plotter_begin+0x694>)
 8006f4a:	48b5      	ldr	r0, [pc, #724]	@ (8007220 <plotter_begin+0x698>)
 8006f4c:	f7fc fa08 	bl	8003360 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8006f50:	eddf 0aab 	vldr	s1, [pc, #684]	@ 8007200 <plotter_begin+0x678>
 8006f54:	ed9f 0ab3 	vldr	s0, [pc, #716]	@ 8007224 <plotter_begin+0x69c>
 8006f58:	48ad      	ldr	r0, [pc, #692]	@ (8007210 <plotter_begin+0x688>)
 8006f5a:	f7fa fa35 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8006f5e:	eddf 0aa8 	vldr	s1, [pc, #672]	@ 8007200 <plotter_begin+0x678>
 8006f62:	ed9f 0ab0 	vldr	s0, [pc, #704]	@ 8007224 <plotter_begin+0x69c>
 8006f66:	48ac      	ldr	r0, [pc, #688]	@ (8007218 <plotter_begin+0x690>)
 8006f68:	f7fa fa2e 	bl	80013c8 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
			ZGX45RGG_400RPM_Constant.sd_max);
 8006f6c:	4bae      	ldr	r3, [pc, #696]	@ (8007228 <plotter_begin+0x6a0>)
 8006f6e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
 8006f72:	4610      	mov	r0, r2
 8006f74:	4619      	mov	r1, r3
 8006f76:	f7f9 fded 	bl	8000b54 <__aeabi_d2f>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	ee01 3a90 	vmov	s3, r3
 8006f80:	ed9f 1aaa 	vldr	s2, [pc, #680]	@ 800722c <plotter_begin+0x6a4>
 8006f84:	eddf 0aaa 	vldr	s1, [pc, #680]	@ 8007230 <plotter_begin+0x6a8>
 8006f88:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 8007234 <plotter_begin+0x6ac>
 8006f8c:	48aa      	ldr	r0, [pc, #680]	@ (8007238 <plotter_begin+0x6b0>)
 8006f8e:	f7fa f910 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8006f92:	4ba5      	ldr	r3, [pc, #660]	@ (8007228 <plotter_begin+0x6a0>)
 8006f94:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 8006f98:	4610      	mov	r0, r2
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	f7f9 fdda 	bl	8000b54 <__aeabi_d2f>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	ee01 3a90 	vmov	s3, r3
 8006fa6:	ed9f 1a96 	vldr	s2, [pc, #600]	@ 8007200 <plotter_begin+0x678>
 8006faa:	eddf 0aa4 	vldr	s1, [pc, #656]	@ 800723c <plotter_begin+0x6b4>
 8006fae:	ed9f 0aa4 	vldr	s0, [pc, #656]	@ 8007240 <plotter_begin+0x6b8>
 8006fb2:	48a4      	ldr	r0, [pc, #656]	@ (8007244 <plotter_begin+0x6bc>)
 8006fb4:	f7fa f8fd 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 150, 5e-2, 2000,
			ZGX45RGG_150RPM_Constant.qd_max);
 8006fb8:	4ba3      	ldr	r3, [pc, #652]	@ (8007248 <plotter_begin+0x6c0>)
 8006fba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 150, 5e-2, 2000,
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	f7f9 fdc7 	bl	8000b54 <__aeabi_d2f>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	ee01 3a90 	vmov	s3, r3
 8006fcc:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 8007224 <plotter_begin+0x69c>
 8006fd0:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 800724c <plotter_begin+0x6c4>
 8006fd4:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8007240 <plotter_begin+0x6b8>
 8006fd8:	489d      	ldr	r0, [pc, #628]	@ (8007250 <plotter_begin+0x6c8>)
 8006fda:	f7fa f8ea 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_velocity_pid, 4500, 50, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 8006fde:	4b9a      	ldr	r3, [pc, #616]	@ (8007248 <plotter_begin+0x6c0>)
 8006fe0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 4500, 50, 0,
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	f7f9 fdb4 	bl	8000b54 <__aeabi_d2f>
 8006fec:	4603      	mov	r3, r0
 8006fee:	ee01 3a90 	vmov	s3, r3
 8006ff2:	ed9f 1a83 	vldr	s2, [pc, #524]	@ 8007200 <plotter_begin+0x678>
 8006ff6:	eddf 0a97 	vldr	s1, [pc, #604]	@ 8007254 <plotter_begin+0x6cc>
 8006ffa:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8007258 <plotter_begin+0x6d0>
 8006ffe:	4897      	ldr	r0, [pc, #604]	@ (800725c <plotter_begin+0x6d4>)
 8007000:	f7fa f8d7 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8007004:	4990      	ldr	r1, [pc, #576]	@ (8007248 <plotter_begin+0x6c0>)
 8007006:	4896      	ldr	r0, [pc, #600]	@ (8007260 <plotter_begin+0x6d8>)
 8007008:	f7fa fab8 	bl	800157c <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 800700c:	4986      	ldr	r1, [pc, #536]	@ (8007228 <plotter_begin+0x6a0>)
 800700e:	4895      	ldr	r0, [pc, #596]	@ (8007264 <plotter_begin+0x6dc>)
 8007010:	f7fa fc3c 	bl	800188c <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8007014:	4a94      	ldr	r2, [pc, #592]	@ (8007268 <plotter_begin+0x6e0>)
 8007016:	498c      	ldr	r1, [pc, #560]	@ (8007248 <plotter_begin+0x6c0>)
 8007018:	4894      	ldr	r0, [pc, #592]	@ (800726c <plotter_begin+0x6e4>)
 800701a:	f7fa fb3e 	bl	800169a <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 800701e:	4a92      	ldr	r2, [pc, #584]	@ (8007268 <plotter_begin+0x6e0>)
 8007020:	4981      	ldr	r1, [pc, #516]	@ (8007228 <plotter_begin+0x6a0>)
 8007022:	4893      	ldr	r0, [pc, #588]	@ (8007270 <plotter_begin+0x6e8>)
 8007024:	f7fa fcc1 	bl	80019aa <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 8007028:	2302      	movs	r3, #2
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8007274 <plotter_begin+0x6ec>
 8007030:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8007278 <plotter_begin+0x6f0>
 8007034:	2364      	movs	r3, #100	@ 0x64
 8007036:	4a91      	ldr	r2, [pc, #580]	@ (800727c <plotter_begin+0x6f4>)
 8007038:	4991      	ldr	r1, [pc, #580]	@ (8007280 <plotter_begin+0x6f8>)
 800703a:	4892      	ldr	r0, [pc, #584]	@ (8007284 <plotter_begin+0x6fc>)
 800703c:	f7f9 ff70 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 8007040:	2105      	movs	r1, #5
 8007042:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8007288 <plotter_begin+0x700>
 8007046:	488f      	ldr	r0, [pc, #572]	@ (8007284 <plotter_begin+0x6fc>)
 8007048:	f7fa f81c 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 800704c:	488d      	ldr	r0, [pc, #564]	@ (8007284 <plotter_begin+0x6fc>)
 800704e:	f7f9 ffbf 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8007052:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 800728c <plotter_begin+0x704>
 8007056:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800705a:	211f      	movs	r1, #31
 800705c:	488c      	ldr	r0, [pc, #560]	@ (8007290 <plotter_begin+0x708>)
 800705e:	f7fa fd6b 	bl	8001b38 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8007062:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 800728c <plotter_begin+0x704>
 8007066:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800706a:	211f      	movs	r1, #31
 800706c:	4889      	ldr	r0, [pc, #548]	@ (8007294 <plotter_begin+0x70c>)
 800706e:	f7fa fd63 	bl	8001b38 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8007072:	eddf 0a86 	vldr	s1, [pc, #536]	@ 800728c <plotter_begin+0x704>
 8007076:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800707a:	211f      	movs	r1, #31
 800707c:	4886      	ldr	r0, [pc, #536]	@ (8007298 <plotter_begin+0x710>)
 800707e:	f7fa fd5b 	bl	8001b38 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8007082:	eddf 0a82 	vldr	s1, [pc, #520]	@ 800728c <plotter_begin+0x704>
 8007086:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800708a:	211f      	movs	r1, #31
 800708c:	4883      	ldr	r0, [pc, #524]	@ (800729c <plotter_begin+0x714>)
 800708e:	f7fa fd53 	bl	8001b38 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8007092:	4b65      	ldr	r3, [pc, #404]	@ (8007228 <plotter_begin+0x6a0>)
 8007094:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007098:	4610      	mov	r0, r2
 800709a:	4619      	mov	r1, r3
 800709c:	f7f9 fd5a 	bl	8000b54 <__aeabi_d2f>
 80070a0:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80070a2:	4b61      	ldr	r3, [pc, #388]	@ (8007228 <plotter_begin+0x6a0>)
 80070a4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80070a8:	4610      	mov	r0, r2
 80070aa:	4619      	mov	r1, r3
 80070ac:	f7f9 fd52 	bl	8000b54 <__aeabi_d2f>
 80070b0:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80070b2:	4b5d      	ldr	r3, [pc, #372]	@ (8007228 <plotter_begin+0x6a0>)
 80070b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80070b8:	4610      	mov	r0, r2
 80070ba:	4619      	mov	r1, r3
 80070bc:	f7f9 fd4a 	bl	8000b54 <__aeabi_d2f>
 80070c0:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 80070c2:	4b59      	ldr	r3, [pc, #356]	@ (8007228 <plotter_begin+0x6a0>)
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80070c8:	4610      	mov	r0, r2
 80070ca:	4619      	mov	r1, r3
 80070cc:	f7f9 fd42 	bl	8000b54 <__aeabi_d2f>
 80070d0:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 80070d2:	4b55      	ldr	r3, [pc, #340]	@ (8007228 <plotter_begin+0x6a0>)
 80070d4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80070d8:	4610      	mov	r0, r2
 80070da:	4619      	mov	r1, r3
 80070dc:	f7f9 fd3a 	bl	8000b54 <__aeabi_d2f>
 80070e0:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 80070e2:	4b51      	ldr	r3, [pc, #324]	@ (8007228 <plotter_begin+0x6a0>)
 80070e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80070e8:	4610      	mov	r0, r2
 80070ea:	4619      	mov	r1, r3
 80070ec:	f7f9 fd32 	bl	8000b54 <__aeabi_d2f>
 80070f0:	4603      	mov	r3, r0
 80070f2:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 80070f6:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80070fa:	ee03 3a10 	vmov	s6, r3
 80070fe:	ee02 9a90 	vmov	s5, r9
 8007102:	ee02 8a10 	vmov	s4, r8
 8007106:	ee01 6a90 	vmov	s3, r6
 800710a:	ee01 5a10 	vmov	s2, r5
 800710e:	ee00 4a90 	vmov	s1, r4
 8007112:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 80072a0 <plotter_begin+0x718>
 8007116:	4863      	ldr	r0, [pc, #396]	@ (80072a4 <plotter_begin+0x71c>)
 8007118:	f7fa ff0e 	bl	8001f38 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800711c:	4b4a      	ldr	r3, [pc, #296]	@ (8007248 <plotter_begin+0x6c0>)
 800711e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007122:	4610      	mov	r0, r2
 8007124:	4619      	mov	r1, r3
 8007126:	f7f9 fd15 	bl	8000b54 <__aeabi_d2f>
 800712a:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L,
 800712c:	4b46      	ldr	r3, [pc, #280]	@ (8007248 <plotter_begin+0x6c0>)
 800712e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8007132:	4610      	mov	r0, r2
 8007134:	4619      	mov	r1, r3
 8007136:	f7f9 fd0d 	bl	8000b54 <__aeabi_d2f>
 800713a:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.J,
 800713c:	4b42      	ldr	r3, [pc, #264]	@ (8007248 <plotter_begin+0x6c0>)
 800713e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8007142:	4610      	mov	r0, r2
 8007144:	4619      	mov	r1, r3
 8007146:	f7f9 fd05 	bl	8000b54 <__aeabi_d2f>
 800714a:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2,
 800714c:	4b3e      	ldr	r3, [pc, #248]	@ (8007248 <plotter_begin+0x6c0>)
 800714e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007152:	a327      	add	r3, pc, #156	@ (adr r3, 80071f0 <plotter_begin+0x668>)
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	f7f9 fa1a 	bl	8000590 <__aeabi_dmul>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8007160:	4610      	mov	r0, r2
 8007162:	4619      	mov	r1, r3
 8007164:	f7f9 fcf6 	bl	8000b54 <__aeabi_d2f>
 8007168:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.Ke,
 800716a:	4b37      	ldr	r3, [pc, #220]	@ (8007248 <plotter_begin+0x6c0>)
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8007170:	4610      	mov	r0, r2
 8007172:	4619      	mov	r1, r3
 8007174:	f7f9 fcee 	bl	8000b54 <__aeabi_d2f>
 8007178:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt,
 800717a:	4b33      	ldr	r3, [pc, #204]	@ (8007248 <plotter_begin+0x6c0>)
 800717c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8007180:	4610      	mov	r0, r2
 8007182:	4619      	mov	r1, r3
 8007184:	f7f9 fce6 	bl	8000b54 <__aeabi_d2f>
 8007188:	4603      	mov	r3, r0
 800718a:	4947      	ldr	r1, [pc, #284]	@ (80072a8 <plotter_begin+0x720>)
 800718c:	4847      	ldr	r0, [pc, #284]	@ (80072ac <plotter_begin+0x724>)
 800718e:	ed9f 3a44 	vldr	s6, [pc, #272]	@ 80072a0 <plotter_begin+0x718>
 8007192:	ee02 3a90 	vmov	s5, r3
 8007196:	ee02 9a10 	vmov	s4, r9
 800719a:	ee01 8a90 	vmov	s3, r8
 800719e:	ee01 6a10 	vmov	s2, r6
 80071a2:	ee00 5a90 	vmov	s1, r5
 80071a6:	ee00 4a10 	vmov	s0, r4
 80071aa:	f7fc f871 	bl	8003290 <GenerateMotorMatrices>
			0.001,
			&revolute_A,
			&revolute_B
			);

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 80071ae:	eddf 0a27 	vldr	s1, [pc, #156]	@ 800724c <plotter_begin+0x6c4>
 80071b2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80071b6:	4a3c      	ldr	r2, [pc, #240]	@ (80072a8 <plotter_begin+0x720>)
 80071b8:	493c      	ldr	r1, [pc, #240]	@ (80072ac <plotter_begin+0x724>)
 80071ba:	483d      	ldr	r0, [pc, #244]	@ (80072b0 <plotter_begin+0x728>)
 80071bc:	f7fd fd84 	bl	8004cc8 <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 80071c0:	23c8      	movs	r3, #200	@ 0xc8
 80071c2:	9301      	str	r3, [sp, #4]
 80071c4:	2315      	movs	r3, #21
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	4b3a      	ldr	r3, [pc, #232]	@ (80072b4 <plotter_begin+0x72c>)
 80071ca:	4a3b      	ldr	r2, [pc, #236]	@ (80072b8 <plotter_begin+0x730>)
 80071cc:	493b      	ldr	r1, [pc, #236]	@ (80072bc <plotter_begin+0x734>)
 80071ce:	483c      	ldr	r0, [pc, #240]	@ (80072c0 <plotter_begin+0x738>)
 80071d0:	f7fa fe4a 	bl	8001e68 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80071d4:	483b      	ldr	r0, [pc, #236]	@ (80072c4 <plotter_begin+0x73c>)
 80071d6:	f004 fdd7 	bl	800bd88 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 80071da:	f000 f875 	bl	80072c8 <plotter_reset>
}
 80071de:	bf00      	nop
 80071e0:	3704      	adds	r7, #4
 80071e2:	46bd      	mov	sp, r7
 80071e4:	ecbd 8b02 	vpop	{d8}
 80071e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071ec:	f3af 8000 	nop.w
 80071f0:	9999999a 	.word	0x9999999a
 80071f4:	40019999 	.word	0x40019999
 80071f8:	20001c50 	.word	0x20001c50
 80071fc:	2000043c 	.word	0x2000043c
 8007200:	00000000 	.word	0x00000000
 8007204:	20001b84 	.word	0x20001b84
 8007208:	20000498 	.word	0x20000498
 800720c:	20001d1c 	.word	0x20001d1c
 8007210:	200003a4 	.word	0x200003a4
 8007214:	48000800 	.word	0x48000800
 8007218:	200003f0 	.word	0x200003f0
 800721c:	20001920 	.word	0x20001920
 8007220:	200005ac 	.word	0x200005ac
 8007224:	44fa0000 	.word	0x44fa0000
 8007228:	20000080 	.word	0x20000080
 800722c:	42f00000 	.word	0x42f00000
 8007230:	2edbe6ff 	.word	0x2edbe6ff
 8007234:	42960000 	.word	0x42960000
 8007238:	200004f4 	.word	0x200004f4
 800723c:	3727c5ac 	.word	0x3727c5ac
 8007240:	43160000 	.word	0x43160000
 8007244:	2000051c 	.word	0x2000051c
 8007248:	20000000 	.word	0x20000000
 800724c:	3d4ccccd 	.word	0x3d4ccccd
 8007250:	20000544 	.word	0x20000544
 8007254:	42480000 	.word	0x42480000
 8007258:	458ca000 	.word	0x458ca000
 800725c:	2000056c 	.word	0x2000056c
 8007260:	200005a0 	.word	0x200005a0
 8007264:	20000594 	.word	0x20000594
 8007268:	20000100 	.word	0x20000100
 800726c:	200005a4 	.word	0x200005a4
 8007270:	20000598 	.word	0x20000598
 8007274:	457ff000 	.word	0x457ff000
 8007278:	40533333 	.word	0x40533333
 800727c:	20000a90 	.word	0x20000a90
 8007280:	200001ac 	.word	0x200001ac
 8007284:	200005c4 	.word	0x200005c4
 8007288:	45000000 	.word	0x45000000
 800728c:	447a0000 	.word	0x447a0000
 8007290:	20000a6c 	.word	0x20000a6c
 8007294:	20000a60 	.word	0x20000a60
 8007298:	20000a84 	.word	0x20000a84
 800729c:	20000a78 	.word	0x20000a78
 80072a0:	3a83126f 	.word	0x3a83126f
 80072a4:	200011c0 	.word	0x200011c0
 80072a8:	200018ec 	.word	0x200018ec
 80072ac:	200018ac 	.word	0x200018ac
 80072b0:	2000152c 	.word	0x2000152c
 80072b4:	20001030 	.word	0x20001030
 80072b8:	20001de8 	.word	0x20001de8
 80072bc:	20001f80 	.word	0x20001f80
 80072c0:	20000b58 	.word	0x20000b58
 80072c4:	200019ec 	.word	0x200019ec

080072c8 <plotter_reset>:

void plotter_reset() {
 80072c8:	b480      	push	{r7}
 80072ca:	af00      	add	r7, sp, #0
	prismatic_encoder.diff_counts = 0;
 80072cc:	4b18      	ldr	r3, [pc, #96]	@ (8007330 <plotter_reset+0x68>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 80072d2:	4b17      	ldr	r3, [pc, #92]	@ (8007330 <plotter_reset+0x68>)
 80072d4:	f04f 0200 	mov.w	r2, #0
 80072d8:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 80072da:	4b15      	ldr	r3, [pc, #84]	@ (8007330 <plotter_reset+0x68>)
 80072dc:	2200      	movs	r2, #0
 80072de:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 80072e0:	4b13      	ldr	r3, [pc, #76]	@ (8007330 <plotter_reset+0x68>)
 80072e2:	f04f 0200 	mov.w	r2, #0
 80072e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 80072e8:	4b11      	ldr	r3, [pc, #68]	@ (8007330 <plotter_reset+0x68>)
 80072ea:	f04f 0200 	mov.w	r2, #0
 80072ee:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 80072f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007330 <plotter_reset+0x68>)
 80072f2:	f04f 0200 	mov.w	r2, #0
 80072f6:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 80072f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007334 <plotter_reset+0x6c>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 80072fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007334 <plotter_reset+0x6c>)
 8007300:	f04f 0200 	mov.w	r2, #0
 8007304:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 8007306:	4b0b      	ldr	r3, [pc, #44]	@ (8007334 <plotter_reset+0x6c>)
 8007308:	2200      	movs	r2, #0
 800730a:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 800730c:	4b09      	ldr	r3, [pc, #36]	@ (8007334 <plotter_reset+0x6c>)
 800730e:	f04f 0200 	mov.w	r2, #0
 8007312:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 8007314:	4b07      	ldr	r3, [pc, #28]	@ (8007334 <plotter_reset+0x6c>)
 8007316:	f04f 0200 	mov.w	r2, #0
 800731a:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 800731c:	4b05      	ldr	r3, [pc, #20]	@ (8007334 <plotter_reset+0x6c>)
 800731e:	f04f 0200 	mov.w	r2, #0
 8007322:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8007324:	bf00      	nop
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	2000043c 	.word	0x2000043c
 8007334:	20000498 	.word	0x20000498

08007338 <plotter_update_sensors>:

void plotter_update_sensors() {
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
    joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50, 50);
 800733c:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8007444 <plotter_update_sensors+0x10c>
 8007340:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8007448 <plotter_update_sensors+0x110>
 8007344:	2106      	movs	r1, #6
 8007346:	4841      	ldr	r0, [pc, #260]	@ (800744c <plotter_update_sensors+0x114>)
 8007348:	f7f9 fec6 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 800734c:	eef0 7a40 	vmov.f32	s15, s0
 8007350:	4b3f      	ldr	r3, [pc, #252]	@ (8007450 <plotter_update_sensors+0x118>)
 8007352:	edc3 7a00 	vstr	s15, [r3]
    joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50, 50);
 8007356:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8007444 <plotter_update_sensors+0x10c>
 800735a:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8007448 <plotter_update_sensors+0x110>
 800735e:	2107      	movs	r1, #7
 8007360:	483a      	ldr	r0, [pc, #232]	@ (800744c <plotter_update_sensors+0x114>)
 8007362:	f7f9 feb9 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8007366:	eef0 7a40 	vmov.f32	s15, s0
 800736a:	4b3a      	ldr	r3, [pc, #232]	@ (8007454 <plotter_update_sensors+0x11c>)
 800736c:	edc3 7a00 	vstr	s15, [r3]

    b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8007370:	2180      	movs	r1, #128	@ 0x80
 8007372:	4839      	ldr	r0, [pc, #228]	@ (8007458 <plotter_update_sensors+0x120>)
 8007374:	f003 fbbc 	bl	800aaf0 <HAL_GPIO_ReadPin>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	bf0c      	ite	eq
 800737e:	2301      	moveq	r3, #1
 8007380:	2300      	movne	r3, #0
 8007382:	b2db      	uxtb	r3, r3
 8007384:	461a      	mov	r2, r3
 8007386:	4b35      	ldr	r3, [pc, #212]	@ (800745c <plotter_update_sensors+0x124>)
 8007388:	601a      	str	r2, [r3, #0]
    b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 800738a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800738e:	4834      	ldr	r0, [pc, #208]	@ (8007460 <plotter_update_sensors+0x128>)
 8007390:	f003 fbae 	bl	800aaf0 <HAL_GPIO_ReadPin>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	bf0c      	ite	eq
 800739a:	2301      	moveq	r3, #1
 800739c:	2300      	movne	r3, #0
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	461a      	mov	r2, r3
 80073a2:	4b30      	ldr	r3, [pc, #192]	@ (8007464 <plotter_update_sensors+0x12c>)
 80073a4:	601a      	str	r2, [r3, #0]
    b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 80073a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80073aa:	482d      	ldr	r0, [pc, #180]	@ (8007460 <plotter_update_sensors+0x128>)
 80073ac:	f003 fba0 	bl	800aaf0 <HAL_GPIO_ReadPin>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	bf0c      	ite	eq
 80073b6:	2301      	moveq	r3, #1
 80073b8:	2300      	movne	r3, #0
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	461a      	mov	r2, r3
 80073be:	4b2a      	ldr	r3, [pc, #168]	@ (8007468 <plotter_update_sensors+0x130>)
 80073c0:	601a      	str	r2, [r3, #0]
    b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 80073c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80073c6:	4826      	ldr	r0, [pc, #152]	@ (8007460 <plotter_update_sensors+0x128>)
 80073c8:	f003 fb92 	bl	800aaf0 <HAL_GPIO_ReadPin>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	bf0c      	ite	eq
 80073d2:	2301      	moveq	r3, #1
 80073d4:	2300      	movne	r3, #0
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	461a      	mov	r2, r3
 80073da:	4b24      	ldr	r3, [pc, #144]	@ (800746c <plotter_update_sensors+0x134>)
 80073dc:	601a      	str	r2, [r3, #0]

    up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 80073de:	2104      	movs	r1, #4
 80073e0:	481d      	ldr	r0, [pc, #116]	@ (8007458 <plotter_update_sensors+0x120>)
 80073e2:	f003 fb85 	bl	800aaf0 <HAL_GPIO_ReadPin>
 80073e6:	4603      	mov	r3, r0
 80073e8:	461a      	mov	r2, r3
 80073ea:	4b21      	ldr	r3, [pc, #132]	@ (8007470 <plotter_update_sensors+0x138>)
 80073ec:	601a      	str	r2, [r3, #0]
    low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 80073ee:	2102      	movs	r1, #2
 80073f0:	4819      	ldr	r0, [pc, #100]	@ (8007458 <plotter_update_sensors+0x120>)
 80073f2:	f003 fb7d 	bl	800aaf0 <HAL_GPIO_ReadPin>
 80073f6:	4603      	mov	r3, r0
 80073f8:	461a      	mov	r2, r3
 80073fa:	4b1e      	ldr	r3, [pc, #120]	@ (8007474 <plotter_update_sensors+0x13c>)
 80073fc:	601a      	str	r2, [r3, #0]

    // Check current photo sensor states (these will be overridden by EXTI when triggered during homing)
    // Only update from GPIO when not homing to preserve EXTI-triggered states during homing
    extern bool homing_active; // Reference to homing_active from main.c
    if (!homing_active) {
 80073fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007478 <plotter_update_sensors+0x140>)
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	f083 0301 	eor.w	r3, r3, #1
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	d018      	beq.n	800743e <plotter_update_sensors+0x106>
        extern volatile bool up_photo, low_photo; // Reference to photo flags from main.c
        up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 800740c:	2101      	movs	r1, #1
 800740e:	4812      	ldr	r0, [pc, #72]	@ (8007458 <plotter_update_sensors+0x120>)
 8007410:	f003 fb6e 	bl	800aaf0 <HAL_GPIO_ReadPin>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	bf14      	ite	ne
 800741a:	2301      	movne	r3, #1
 800741c:	2300      	moveq	r3, #0
 800741e:	b2da      	uxtb	r2, r3
 8007420:	4b16      	ldr	r3, [pc, #88]	@ (800747c <plotter_update_sensors+0x144>)
 8007422:	701a      	strb	r2, [r3, #0]
        low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8007424:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007428:	480b      	ldr	r0, [pc, #44]	@ (8007458 <plotter_update_sensors+0x120>)
 800742a:	f003 fb61 	bl	800aaf0 <HAL_GPIO_ReadPin>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	bf14      	ite	ne
 8007434:	2301      	movne	r3, #1
 8007436:	2300      	moveq	r3, #0
 8007438:	b2da      	uxtb	r2, r3
 800743a:	4b11      	ldr	r3, [pc, #68]	@ (8007480 <plotter_update_sensors+0x148>)
 800743c:	701a      	strb	r2, [r3, #0]
    }
}
 800743e:	bf00      	nop
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	42480000 	.word	0x42480000
 8007448:	c2480000 	.word	0xc2480000
 800744c:	200005c4 	.word	0x200005c4
 8007450:	200018fc 	.word	0x200018fc
 8007454:	20001900 	.word	0x20001900
 8007458:	48000400 	.word	0x48000400
 800745c:	2000190c 	.word	0x2000190c
 8007460:	48000800 	.word	0x48000800
 8007464:	20001910 	.word	0x20001910
 8007468:	20001914 	.word	0x20001914
 800746c:	20001918 	.word	0x20001918
 8007470:	20001904 	.word	0x20001904
 8007474:	20001908 	.word	0x20001908
 8007478:	2000036f 	.word	0x2000036f
 800747c:	2000036c 	.word	0x2000036c
 8007480:	2000036d 	.word	0x2000036d

08007484 <plotter_pen_up>:

void plotter_pen_up() {
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8007488:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 800748c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 800749c <plotter_pen_up+0x18>
 8007490:	4803      	ldr	r0, [pc, #12]	@ (80074a0 <plotter_pen_up+0x1c>)
 8007492:	f7fb ff87 	bl	80033a4 <PWM_write_duty>
}
 8007496:	bf00      	nop
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	42480000 	.word	0x42480000
 80074a0:	200005ac 	.word	0x200005ac

080074a4 <plotter_pen_down>:

void plotter_pen_down() {
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 80074a8:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 80074ac:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80074bc <plotter_pen_down+0x18>
 80074b0:	4803      	ldr	r0, [pc, #12]	@ (80074c0 <plotter_pen_down+0x1c>)
 80074b2:	f7fb ff77 	bl	80033a4 <PWM_write_duty>
}
 80074b6:	bf00      	nop
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	42480000 	.word	0x42480000
 80074c0:	200005ac 	.word	0x200005ac

080074c4 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	78fa      	ldrb	r2, [r7, #3]
 80074d4:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80074dc:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80074e4:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f04f 0200 	mov.w	r2, #0
 80074ec:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f04f 0200 	mov.w	r2, #0
 80074f4:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f04f 0200 	mov.w	r2, #0
 80074fc:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f04f 0200 	mov.w	r2, #0
 8007504:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a1b      	ldr	r2, [pc, #108]	@ (8007578 <SIGNAL_init+0xb4>)
 800750a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007512:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8007514:	78fb      	ldrb	r3, [r7, #3]
 8007516:	2b03      	cmp	r3, #3
 8007518:	d828      	bhi.n	800756c <SIGNAL_init+0xa8>
 800751a:	a201      	add	r2, pc, #4	@ (adr r2, 8007520 <SIGNAL_init+0x5c>)
 800751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007520:	0800756b 	.word	0x0800756b
 8007524:	08007531 	.word	0x08007531
 8007528:	0800754f 	.word	0x0800754f
 800752c:	08007559 	.word	0x08007559
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800753c:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a0e      	ldr	r2, [pc, #56]	@ (800757c <SIGNAL_init+0xb8>)
 8007542:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800754a:	621a      	str	r2, [r3, #32]
            break;
 800754c:	e00e      	b.n	800756c <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8007554:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8007556:	e009      	b.n	800756c <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f04f 0200 	mov.w	r2, #0
 800755e:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007566:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8007568:	e000      	b.n	800756c <SIGNAL_init+0xa8>
            break;
 800756a:	bf00      	nop
    }
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	bf800000 	.word	0xbf800000
 800757c:	41200000 	.word	0x41200000

08007580 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8007580:	b480      	push	{r7}
 8007582:	b089      	sub	sp, #36	@ 0x24
 8007584:	af00      	add	r7, sp, #0
 8007586:	61f8      	str	r0, [r7, #28]
 8007588:	ed87 0a06 	vstr	s0, [r7, #24]
 800758c:	edc7 0a05 	vstr	s1, [r7, #20]
 8007590:	ed87 1a04 	vstr	s2, [r7, #16]
 8007594:	edc7 1a03 	vstr	s3, [r7, #12]
 8007598:	ed87 2a02 	vstr	s4, [r7, #8]
 800759c:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	2200      	movs	r2, #0
 80075a4:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80075ca:	bf00      	nop
 80075cc:	3724      	adds	r7, #36	@ 0x24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 80075d6:	b480      	push	{r7}
 80075d8:	b089      	sub	sp, #36	@ 0x24
 80075da:	af00      	add	r7, sp, #0
 80075dc:	61f8      	str	r0, [r7, #28]
 80075de:	ed87 0a06 	vstr	s0, [r7, #24]
 80075e2:	edc7 0a05 	vstr	s1, [r7, #20]
 80075e6:	ed87 1a04 	vstr	s2, [r7, #16]
 80075ea:	edc7 1a03 	vstr	s3, [r7, #12]
 80075ee:	ed87 2a02 	vstr	s4, [r7, #8]
 80075f2:	edc7 2a01 	vstr	s5, [r7, #4]
 80075f6:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	2202      	movs	r2, #2
 80075fe:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800762a:	bf00      	nop
 800762c:	3724      	adds	r7, #36	@ 0x24
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
	...

08007638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800763e:	4b0f      	ldr	r3, [pc, #60]	@ (800767c <HAL_MspInit+0x44>)
 8007640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007642:	4a0e      	ldr	r2, [pc, #56]	@ (800767c <HAL_MspInit+0x44>)
 8007644:	f043 0301 	orr.w	r3, r3, #1
 8007648:	6613      	str	r3, [r2, #96]	@ 0x60
 800764a:	4b0c      	ldr	r3, [pc, #48]	@ (800767c <HAL_MspInit+0x44>)
 800764c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	607b      	str	r3, [r7, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007656:	4b09      	ldr	r3, [pc, #36]	@ (800767c <HAL_MspInit+0x44>)
 8007658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800765a:	4a08      	ldr	r2, [pc, #32]	@ (800767c <HAL_MspInit+0x44>)
 800765c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007660:	6593      	str	r3, [r2, #88]	@ 0x58
 8007662:	4b06      	ldr	r3, [pc, #24]	@ (800767c <HAL_MspInit+0x44>)
 8007664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800766a:	603b      	str	r3, [r7, #0]
 800766c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800766e:	f003 fb2b 	bl	800acc8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007672:	bf00      	nop
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	40021000 	.word	0x40021000

08007680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007680:	b480      	push	{r7}
 8007682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007684:	bf00      	nop
 8007686:	e7fd      	b.n	8007684 <NMI_Handler+0x4>

08007688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800768c:	bf00      	nop
 800768e:	e7fd      	b.n	800768c <HardFault_Handler+0x4>

08007690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007690:	b480      	push	{r7}
 8007692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007694:	bf00      	nop
 8007696:	e7fd      	b.n	8007694 <MemManage_Handler+0x4>

08007698 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800769c:	bf00      	nop
 800769e:	e7fd      	b.n	800769c <BusFault_Handler+0x4>

080076a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80076a0:	b480      	push	{r7}
 80076a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80076a4:	bf00      	nop
 80076a6:	e7fd      	b.n	80076a4 <UsageFault_Handler+0x4>

080076a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80076ac:	bf00      	nop
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80076b6:	b480      	push	{r7}
 80076b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80076ba:	bf00      	nop
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80076c8:	bf00      	nop
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80076d6:	f000 ffb1 	bl	800863c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80076da:	bf00      	nop
 80076dc:	bd80      	pop	{r7, pc}

080076de <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 80076e2:	2001      	movs	r0, #1
 80076e4:	f003 fa34 	bl	800ab50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80076e8:	bf00      	nop
 80076ea:	bd80      	pop	{r7, pc}

080076ec <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 80076f0:	2010      	movs	r0, #16
 80076f2:	f003 fa2d 	bl	800ab50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80076f6:	bf00      	nop
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007700:	4802      	ldr	r0, [pc, #8]	@ (800770c <DMA1_Channel1_IRQHandler+0x10>)
 8007702:	f002 ff24 	bl	800a54e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007706:	bf00      	nop
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20000218 	.word	0x20000218

08007710 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007714:	4802      	ldr	r0, [pc, #8]	@ (8007720 <DMA1_Channel2_IRQHandler+0x10>)
 8007716:	f002 ff1a 	bl	800a54e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800771a:	bf00      	nop
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	2000210c 	.word	0x2000210c

08007724 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007728:	4802      	ldr	r0, [pc, #8]	@ (8007734 <DMA1_Channel3_IRQHandler+0x10>)
 800772a:	f002 ff10 	bl	800a54e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800772e:	bf00      	nop
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	2000216c 	.word	0x2000216c

08007738 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800773c:	4802      	ldr	r0, [pc, #8]	@ (8007748 <DMA1_Channel4_IRQHandler+0x10>)
 800773e:	f002 ff06 	bl	800a54e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007742:	bf00      	nop
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	2000204c 	.word	0x2000204c

0800774c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8007750:	4802      	ldr	r0, [pc, #8]	@ (800775c <DMA1_Channel5_IRQHandler+0x10>)
 8007752:	f002 fefc 	bl	800a54e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8007756:	bf00      	nop
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	200020ac 	.word	0x200020ac

08007760 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8007764:	2040      	movs	r0, #64	@ 0x40
 8007766:	f003 f9f3 	bl	800ab50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800776a:	bf00      	nop
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007774:	4803      	ldr	r0, [pc, #12]	@ (8007784 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8007776:	f004 ff2d 	bl	800c5d4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800777a:	4803      	ldr	r0, [pc, #12]	@ (8007788 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800777c:	f004 ff2a 	bl	800c5d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007780:	bf00      	nop
 8007782:	bd80      	pop	{r7, pc}
 8007784:	20001920 	.word	0x20001920
 8007788:	20001de8 	.word	0x20001de8

0800778c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007790:	4802      	ldr	r0, [pc, #8]	@ (800779c <TIM2_IRQHandler+0x10>)
 8007792:	f004 ff1f 	bl	800c5d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007796:	bf00      	nop
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	200019ec 	.word	0x200019ec

080077a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80077a4:	4802      	ldr	r0, [pc, #8]	@ (80077b0 <TIM3_IRQHandler+0x10>)
 80077a6:	f004 ff15 	bl	800c5d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80077aa:	bf00      	nop
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	20001ab8 	.word	0x20001ab8

080077b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80077b8:	4802      	ldr	r0, [pc, #8]	@ (80077c4 <TIM4_IRQHandler+0x10>)
 80077ba:	f004 ff0b 	bl	800c5d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80077be:	bf00      	nop
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20001b84 	.word	0x20001b84

080077c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80077cc:	4802      	ldr	r0, [pc, #8]	@ (80077d8 <USART2_IRQHandler+0x10>)
 80077ce:	f006 fc55 	bl	800e07c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80077d2:	bf00      	nop
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	20001f80 	.word	0x20001f80

080077dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 80077e0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80077e4:	f003 f9b4 	bl	800ab50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80077e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80077ec:	f003 f9b0 	bl	800ab50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80077f0:	bf00      	nop
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80077f8:	4802      	ldr	r0, [pc, #8]	@ (8007804 <LPUART1_IRQHandler+0x10>)
 80077fa:	f006 fc3f 	bl	800e07c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80077fe:	bf00      	nop
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20001eb4 	.word	0x20001eb4

08007808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007810:	4a14      	ldr	r2, [pc, #80]	@ (8007864 <_sbrk+0x5c>)
 8007812:	4b15      	ldr	r3, [pc, #84]	@ (8007868 <_sbrk+0x60>)
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800781c:	4b13      	ldr	r3, [pc, #76]	@ (800786c <_sbrk+0x64>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d102      	bne.n	800782a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007824:	4b11      	ldr	r3, [pc, #68]	@ (800786c <_sbrk+0x64>)
 8007826:	4a12      	ldr	r2, [pc, #72]	@ (8007870 <_sbrk+0x68>)
 8007828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800782a:	4b10      	ldr	r3, [pc, #64]	@ (800786c <_sbrk+0x64>)
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4413      	add	r3, r2
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	429a      	cmp	r2, r3
 8007836:	d207      	bcs.n	8007848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007838:	f008 fea4 	bl	8010584 <__errno>
 800783c:	4603      	mov	r3, r0
 800783e:	220c      	movs	r2, #12
 8007840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007842:	f04f 33ff 	mov.w	r3, #4294967295
 8007846:	e009      	b.n	800785c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007848:	4b08      	ldr	r3, [pc, #32]	@ (800786c <_sbrk+0x64>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800784e:	4b07      	ldr	r3, [pc, #28]	@ (800786c <_sbrk+0x64>)
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4413      	add	r3, r2
 8007856:	4a05      	ldr	r2, [pc, #20]	@ (800786c <_sbrk+0x64>)
 8007858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800785a:	68fb      	ldr	r3, [r7, #12]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3718      	adds	r7, #24
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	20020000 	.word	0x20020000
 8007868:	00000400 	.word	0x00000400
 800786c:	2000191c 	.word	0x2000191c
 8007870:	20002318 	.word	0x20002318

08007874 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007878:	4b06      	ldr	r3, [pc, #24]	@ (8007894 <SystemInit+0x20>)
 800787a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800787e:	4a05      	ldr	r2, [pc, #20]	@ (8007894 <SystemInit+0x20>)
 8007880:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007884:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007888:	bf00      	nop
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	e000ed00 	.word	0xe000ed00

08007898 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b098      	sub	sp, #96	@ 0x60
 800789c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800789e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80078a2:	2200      	movs	r2, #0
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	605a      	str	r2, [r3, #4]
 80078a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80078aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80078ae:	2200      	movs	r2, #0
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	605a      	str	r2, [r3, #4]
 80078b4:	609a      	str	r2, [r3, #8]
 80078b6:	60da      	str	r2, [r3, #12]
 80078b8:	611a      	str	r2, [r3, #16]
 80078ba:	615a      	str	r2, [r3, #20]
 80078bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80078be:	1d3b      	adds	r3, r7, #4
 80078c0:	2234      	movs	r2, #52	@ 0x34
 80078c2:	2100      	movs	r1, #0
 80078c4:	4618      	mov	r0, r3
 80078c6:	f008 fe45 	bl	8010554 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80078ca:	4b3b      	ldr	r3, [pc, #236]	@ (80079b8 <MX_TIM1_Init+0x120>)
 80078cc:	4a3b      	ldr	r2, [pc, #236]	@ (80079bc <MX_TIM1_Init+0x124>)
 80078ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80078d0:	4b39      	ldr	r3, [pc, #228]	@ (80079b8 <MX_TIM1_Init+0x120>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078d6:	4b38      	ldr	r3, [pc, #224]	@ (80079b8 <MX_TIM1_Init+0x120>)
 80078d8:	2200      	movs	r2, #0
 80078da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80078dc:	4b36      	ldr	r3, [pc, #216]	@ (80079b8 <MX_TIM1_Init+0x120>)
 80078de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80078e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078e4:	4b34      	ldr	r3, [pc, #208]	@ (80079b8 <MX_TIM1_Init+0x120>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80078ea:	4b33      	ldr	r3, [pc, #204]	@ (80079b8 <MX_TIM1_Init+0x120>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078f0:	4b31      	ldr	r3, [pc, #196]	@ (80079b8 <MX_TIM1_Init+0x120>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80078f6:	4830      	ldr	r0, [pc, #192]	@ (80079b8 <MX_TIM1_Init+0x120>)
 80078f8:	f004 fabe 	bl	800be78 <HAL_TIM_PWM_Init>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8007902:	f7ff f939 	bl	8006b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007906:	2300      	movs	r3, #0
 8007908:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800790a:	2300      	movs	r3, #0
 800790c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800790e:	2300      	movs	r3, #0
 8007910:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007912:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007916:	4619      	mov	r1, r3
 8007918:	4827      	ldr	r0, [pc, #156]	@ (80079b8 <MX_TIM1_Init+0x120>)
 800791a:	f006 f8cf 	bl	800dabc <HAL_TIMEx_MasterConfigSynchronization>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8007924:	f7ff f928 	bl	8006b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007928:	2360      	movs	r3, #96	@ 0x60
 800792a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800792c:	2300      	movs	r3, #0
 800792e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007930:	2300      	movs	r3, #0
 8007932:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007934:	2300      	movs	r3, #0
 8007936:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007938:	2300      	movs	r3, #0
 800793a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800793c:	2300      	movs	r3, #0
 800793e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007940:	2300      	movs	r3, #0
 8007942:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007944:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007948:	220c      	movs	r2, #12
 800794a:	4619      	mov	r1, r3
 800794c:	481a      	ldr	r0, [pc, #104]	@ (80079b8 <MX_TIM1_Init+0x120>)
 800794e:	f004 ffbb 	bl	800c8c8 <HAL_TIM_PWM_ConfigChannel>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8007958:	f7ff f90e 	bl	8006b78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800795c:	2300      	movs	r3, #0
 800795e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007960:	2300      	movs	r3, #0
 8007962:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007964:	2300      	movs	r3, #0
 8007966:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007968:	2300      	movs	r3, #0
 800796a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800796c:	2300      	movs	r3, #0
 800796e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007970:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007974:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007976:	2300      	movs	r3, #0
 8007978:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800797a:	2300      	movs	r3, #0
 800797c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800797e:	2300      	movs	r3, #0
 8007980:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8007982:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007986:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8007988:	2300      	movs	r3, #0
 800798a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800798c:	2300      	movs	r3, #0
 800798e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007990:	2300      	movs	r3, #0
 8007992:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007994:	1d3b      	adds	r3, r7, #4
 8007996:	4619      	mov	r1, r3
 8007998:	4807      	ldr	r0, [pc, #28]	@ (80079b8 <MX_TIM1_Init+0x120>)
 800799a:	f006 f925 	bl	800dbe8 <HAL_TIMEx_ConfigBreakDeadTime>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80079a4:	f7ff f8e8 	bl	8006b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80079a8:	4803      	ldr	r0, [pc, #12]	@ (80079b8 <MX_TIM1_Init+0x120>)
 80079aa:	f000 fb77 	bl	800809c <HAL_TIM_MspPostInit>

}
 80079ae:	bf00      	nop
 80079b0:	3760      	adds	r7, #96	@ 0x60
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20001920 	.word	0x20001920
 80079bc:	40012c00 	.word	0x40012c00

080079c0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80079c6:	f107 0310 	add.w	r3, r7, #16
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	605a      	str	r2, [r3, #4]
 80079d0:	609a      	str	r2, [r3, #8]
 80079d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80079d4:	1d3b      	adds	r3, r7, #4
 80079d6:	2200      	movs	r2, #0
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	605a      	str	r2, [r3, #4]
 80079dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80079de:	4b1e      	ldr	r3, [pc, #120]	@ (8007a58 <MX_TIM2_Init+0x98>)
 80079e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80079e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80079e6:	4b1c      	ldr	r3, [pc, #112]	@ (8007a58 <MX_TIM2_Init+0x98>)
 80079e8:	22a9      	movs	r2, #169	@ 0xa9
 80079ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007a58 <MX_TIM2_Init+0x98>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80079f2:	4b19      	ldr	r3, [pc, #100]	@ (8007a58 <MX_TIM2_Init+0x98>)
 80079f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80079f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079fa:	4b17      	ldr	r3, [pc, #92]	@ (8007a58 <MX_TIM2_Init+0x98>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a00:	4b15      	ldr	r3, [pc, #84]	@ (8007a58 <MX_TIM2_Init+0x98>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007a06:	4814      	ldr	r0, [pc, #80]	@ (8007a58 <MX_TIM2_Init+0x98>)
 8007a08:	f004 f8ea 	bl	800bbe0 <HAL_TIM_Base_Init>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8007a12:	f7ff f8b1 	bl	8006b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007a16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007a1c:	f107 0310 	add.w	r3, r7, #16
 8007a20:	4619      	mov	r1, r3
 8007a22:	480d      	ldr	r0, [pc, #52]	@ (8007a58 <MX_TIM2_Init+0x98>)
 8007a24:	f005 f864 	bl	800caf0 <HAL_TIM_ConfigClockSource>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8007a2e:	f7ff f8a3 	bl	8006b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007a32:	2300      	movs	r3, #0
 8007a34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007a3a:	1d3b      	adds	r3, r7, #4
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	4806      	ldr	r0, [pc, #24]	@ (8007a58 <MX_TIM2_Init+0x98>)
 8007a40:	f006 f83c 	bl	800dabc <HAL_TIMEx_MasterConfigSynchronization>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8007a4a:	f7ff f895 	bl	8006b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007a4e:	bf00      	nop
 8007a50:	3720      	adds	r7, #32
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	200019ec 	.word	0x200019ec

08007a5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b08c      	sub	sp, #48	@ 0x30
 8007a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007a62:	f107 030c 	add.w	r3, r7, #12
 8007a66:	2224      	movs	r2, #36	@ 0x24
 8007a68:	2100      	movs	r1, #0
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f008 fd72 	bl	8010554 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a70:	463b      	mov	r3, r7
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	605a      	str	r2, [r3, #4]
 8007a78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007a7a:	4b21      	ldr	r3, [pc, #132]	@ (8007b00 <MX_TIM3_Init+0xa4>)
 8007a7c:	4a21      	ldr	r2, [pc, #132]	@ (8007b04 <MX_TIM3_Init+0xa8>)
 8007a7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007a80:	4b1f      	ldr	r3, [pc, #124]	@ (8007b00 <MX_TIM3_Init+0xa4>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a86:	4b1e      	ldr	r3, [pc, #120]	@ (8007b00 <MX_TIM3_Init+0xa4>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8007a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8007b00 <MX_TIM3_Init+0xa4>)
 8007a8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a94:	4b1a      	ldr	r3, [pc, #104]	@ (8007b00 <MX_TIM3_Init+0xa4>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a9a:	4b19      	ldr	r3, [pc, #100]	@ (8007b00 <MX_TIM3_Init+0xa4>)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007aac:	2300      	movs	r3, #0
 8007aae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007abc:	2300      	movs	r3, #0
 8007abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8007ac4:	f107 030c 	add.w	r3, r7, #12
 8007ac8:	4619      	mov	r1, r3
 8007aca:	480d      	ldr	r0, [pc, #52]	@ (8007b00 <MX_TIM3_Init+0xa4>)
 8007acc:	f004 fc40 	bl	800c350 <HAL_TIM_Encoder_Init>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8007ad6:	f7ff f84f 	bl	8006b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ada:	2300      	movs	r3, #0
 8007adc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007ae2:	463b      	mov	r3, r7
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4806      	ldr	r0, [pc, #24]	@ (8007b00 <MX_TIM3_Init+0xa4>)
 8007ae8:	f005 ffe8 	bl	800dabc <HAL_TIMEx_MasterConfigSynchronization>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8007af2:	f7ff f841 	bl	8006b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007af6:	bf00      	nop
 8007af8:	3730      	adds	r7, #48	@ 0x30
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	20001ab8 	.word	0x20001ab8
 8007b04:	40000400 	.word	0x40000400

08007b08 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08c      	sub	sp, #48	@ 0x30
 8007b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007b0e:	f107 030c 	add.w	r3, r7, #12
 8007b12:	2224      	movs	r2, #36	@ 0x24
 8007b14:	2100      	movs	r1, #0
 8007b16:	4618      	mov	r0, r3
 8007b18:	f008 fd1c 	bl	8010554 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b1c:	463b      	mov	r3, r7
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	605a      	str	r2, [r3, #4]
 8007b24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007b26:	4b21      	ldr	r3, [pc, #132]	@ (8007bac <MX_TIM4_Init+0xa4>)
 8007b28:	4a21      	ldr	r2, [pc, #132]	@ (8007bb0 <MX_TIM4_Init+0xa8>)
 8007b2a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8007b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8007bac <MX_TIM4_Init+0xa4>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b32:	4b1e      	ldr	r3, [pc, #120]	@ (8007bac <MX_TIM4_Init+0xa4>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8007b38:	4b1c      	ldr	r3, [pc, #112]	@ (8007bac <MX_TIM4_Init+0xa4>)
 8007b3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007b3e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b40:	4b1a      	ldr	r3, [pc, #104]	@ (8007bac <MX_TIM4_Init+0xa4>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b46:	4b19      	ldr	r3, [pc, #100]	@ (8007bac <MX_TIM4_Init+0xa4>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007b50:	2300      	movs	r3, #0
 8007b52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007b54:	2301      	movs	r3, #1
 8007b56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007b60:	2300      	movs	r3, #0
 8007b62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007b64:	2301      	movs	r3, #1
 8007b66:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8007b70:	f107 030c 	add.w	r3, r7, #12
 8007b74:	4619      	mov	r1, r3
 8007b76:	480d      	ldr	r0, [pc, #52]	@ (8007bac <MX_TIM4_Init+0xa4>)
 8007b78:	f004 fbea 	bl	800c350 <HAL_TIM_Encoder_Init>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8007b82:	f7fe fff9 	bl	8006b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b86:	2300      	movs	r3, #0
 8007b88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007b8e:	463b      	mov	r3, r7
 8007b90:	4619      	mov	r1, r3
 8007b92:	4806      	ldr	r0, [pc, #24]	@ (8007bac <MX_TIM4_Init+0xa4>)
 8007b94:	f005 ff92 	bl	800dabc <HAL_TIMEx_MasterConfigSynchronization>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8007b9e:	f7fe ffeb 	bl	8006b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8007ba2:	bf00      	nop
 8007ba4:	3730      	adds	r7, #48	@ 0x30
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20001b84 	.word	0x20001b84
 8007bb0:	40000800 	.word	0x40000800

08007bb4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08c      	sub	sp, #48	@ 0x30
 8007bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007bba:	f107 030c 	add.w	r3, r7, #12
 8007bbe:	2224      	movs	r2, #36	@ 0x24
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f008 fcc6 	bl	8010554 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007bc8:	463b      	mov	r3, r7
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	605a      	str	r2, [r3, #4]
 8007bd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8007bd2:	4b21      	ldr	r3, [pc, #132]	@ (8007c58 <MX_TIM5_Init+0xa4>)
 8007bd4:	4a21      	ldr	r2, [pc, #132]	@ (8007c5c <MX_TIM5_Init+0xa8>)
 8007bd6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8007bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8007c58 <MX_TIM5_Init+0xa4>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007bde:	4b1e      	ldr	r3, [pc, #120]	@ (8007c58 <MX_TIM5_Init+0xa4>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8007be4:	4b1c      	ldr	r3, [pc, #112]	@ (8007c58 <MX_TIM5_Init+0xa4>)
 8007be6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007bea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007bec:	4b1a      	ldr	r3, [pc, #104]	@ (8007c58 <MX_TIM5_Init+0xa4>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007bf2:	4b19      	ldr	r3, [pc, #100]	@ (8007c58 <MX_TIM5_Init+0xa4>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007c00:	2301      	movs	r3, #1
 8007c02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007c04:	2300      	movs	r3, #0
 8007c06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007c10:	2301      	movs	r3, #1
 8007c12:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007c14:	2300      	movs	r3, #0
 8007c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8007c1c:	f107 030c 	add.w	r3, r7, #12
 8007c20:	4619      	mov	r1, r3
 8007c22:	480d      	ldr	r0, [pc, #52]	@ (8007c58 <MX_TIM5_Init+0xa4>)
 8007c24:	f004 fb94 	bl	800c350 <HAL_TIM_Encoder_Init>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8007c2e:	f7fe ffa3 	bl	8006b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007c32:	2300      	movs	r3, #0
 8007c34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c36:	2300      	movs	r3, #0
 8007c38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007c3a:	463b      	mov	r3, r7
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	4806      	ldr	r0, [pc, #24]	@ (8007c58 <MX_TIM5_Init+0xa4>)
 8007c40:	f005 ff3c 	bl	800dabc <HAL_TIMEx_MasterConfigSynchronization>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8007c4a:	f7fe ff95 	bl	8006b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8007c4e:	bf00      	nop
 8007c50:	3730      	adds	r7, #48	@ 0x30
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	20001c50 	.word	0x20001c50
 8007c5c:	40000c00 	.word	0x40000c00

08007c60 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b09c      	sub	sp, #112	@ 0x70
 8007c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007c66:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	605a      	str	r2, [r3, #4]
 8007c70:	609a      	str	r2, [r3, #8]
 8007c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	605a      	str	r2, [r3, #4]
 8007c7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007c80:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007c84:	2200      	movs	r2, #0
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	605a      	str	r2, [r3, #4]
 8007c8a:	609a      	str	r2, [r3, #8]
 8007c8c:	60da      	str	r2, [r3, #12]
 8007c8e:	611a      	str	r2, [r3, #16]
 8007c90:	615a      	str	r2, [r3, #20]
 8007c92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007c94:	1d3b      	adds	r3, r7, #4
 8007c96:	2234      	movs	r2, #52	@ 0x34
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f008 fc5a 	bl	8010554 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8007ca0:	4b4c      	ldr	r3, [pc, #304]	@ (8007dd4 <MX_TIM8_Init+0x174>)
 8007ca2:	4a4d      	ldr	r2, [pc, #308]	@ (8007dd8 <MX_TIM8_Init+0x178>)
 8007ca4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8007ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8007dd4 <MX_TIM8_Init+0x174>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007cac:	4b49      	ldr	r3, [pc, #292]	@ (8007dd4 <MX_TIM8_Init+0x174>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8007cb2:	4b48      	ldr	r3, [pc, #288]	@ (8007dd4 <MX_TIM8_Init+0x174>)
 8007cb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cb8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8007cba:	4b46      	ldr	r3, [pc, #280]	@ (8007dd4 <MX_TIM8_Init+0x174>)
 8007cbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cc0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8007cc2:	4b44      	ldr	r3, [pc, #272]	@ (8007dd4 <MX_TIM8_Init+0x174>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007cc8:	4b42      	ldr	r3, [pc, #264]	@ (8007dd4 <MX_TIM8_Init+0x174>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007cce:	4841      	ldr	r0, [pc, #260]	@ (8007dd4 <MX_TIM8_Init+0x174>)
 8007cd0:	f003 ff86 	bl	800bbe0 <HAL_TIM_Base_Init>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8007cda:	f7fe ff4d 	bl	8006b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007cde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007ce2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8007ce4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007ce8:	4619      	mov	r1, r3
 8007cea:	483a      	ldr	r0, [pc, #232]	@ (8007dd4 <MX_TIM8_Init+0x174>)
 8007cec:	f004 ff00 	bl	800caf0 <HAL_TIM_ConfigClockSource>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8007cf6:	f7fe ff3f 	bl	8006b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8007cfa:	4836      	ldr	r0, [pc, #216]	@ (8007dd4 <MX_TIM8_Init+0x174>)
 8007cfc:	f004 f8bc 	bl	800be78 <HAL_TIM_PWM_Init>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8007d06:	f7fe ff37 	bl	8006b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d12:	2300      	movs	r3, #0
 8007d14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007d16:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	482d      	ldr	r0, [pc, #180]	@ (8007dd4 <MX_TIM8_Init+0x174>)
 8007d1e:	f005 fecd 	bl	800dabc <HAL_TIMEx_MasterConfigSynchronization>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8007d28:	f7fe ff26 	bl	8006b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007d2c:	2360      	movs	r3, #96	@ 0x60
 8007d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8007d30:	2300      	movs	r3, #0
 8007d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007d34:	2300      	movs	r3, #0
 8007d36:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007d40:	2300      	movs	r3, #0
 8007d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007d44:	2300      	movs	r3, #0
 8007d46:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007d48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4820      	ldr	r0, [pc, #128]	@ (8007dd4 <MX_TIM8_Init+0x174>)
 8007d52:	f004 fdb9 	bl	800c8c8 <HAL_TIM_PWM_ConfigChannel>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8007d5c:	f7fe ff0c 	bl	8006b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007d60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007d64:	2204      	movs	r2, #4
 8007d66:	4619      	mov	r1, r3
 8007d68:	481a      	ldr	r0, [pc, #104]	@ (8007dd4 <MX_TIM8_Init+0x174>)
 8007d6a:	f004 fdad 	bl	800c8c8 <HAL_TIM_PWM_ConfigChannel>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8007d74:	f7fe ff00 	bl	8006b78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007d80:	2300      	movs	r3, #0
 8007d82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007d84:	2300      	movs	r3, #0
 8007d86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007d8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007d90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007d96:	2300      	movs	r3, #0
 8007d98:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8007d9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007da8:	2300      	movs	r3, #0
 8007daa:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007dac:	2300      	movs	r3, #0
 8007dae:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8007db0:	1d3b      	adds	r3, r7, #4
 8007db2:	4619      	mov	r1, r3
 8007db4:	4807      	ldr	r0, [pc, #28]	@ (8007dd4 <MX_TIM8_Init+0x174>)
 8007db6:	f005 ff17 	bl	800dbe8 <HAL_TIMEx_ConfigBreakDeadTime>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8007dc0:	f7fe feda 	bl	8006b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8007dc4:	4803      	ldr	r0, [pc, #12]	@ (8007dd4 <MX_TIM8_Init+0x174>)
 8007dc6:	f000 f969 	bl	800809c <HAL_TIM_MspPostInit>

}
 8007dca:	bf00      	nop
 8007dcc:	3770      	adds	r7, #112	@ 0x70
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	20001d1c 	.word	0x20001d1c
 8007dd8:	40013400 	.word	0x40013400

08007ddc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8007de0:	4b14      	ldr	r3, [pc, #80]	@ (8007e34 <MX_TIM16_Init+0x58>)
 8007de2:	4a15      	ldr	r2, [pc, #84]	@ (8007e38 <MX_TIM16_Init+0x5c>)
 8007de4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8007de6:	4b13      	ldr	r3, [pc, #76]	@ (8007e34 <MX_TIM16_Init+0x58>)
 8007de8:	22a9      	movs	r2, #169	@ 0xa9
 8007dea:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007dec:	4b11      	ldr	r3, [pc, #68]	@ (8007e34 <MX_TIM16_Init+0x58>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8007df2:	4b10      	ldr	r3, [pc, #64]	@ (8007e34 <MX_TIM16_Init+0x58>)
 8007df4:	f240 4279 	movw	r2, #1145	@ 0x479
 8007df8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8007e34 <MX_TIM16_Init+0x58>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007e00:	4b0c      	ldr	r3, [pc, #48]	@ (8007e34 <MX_TIM16_Init+0x58>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e06:	4b0b      	ldr	r3, [pc, #44]	@ (8007e34 <MX_TIM16_Init+0x58>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007e0c:	4809      	ldr	r0, [pc, #36]	@ (8007e34 <MX_TIM16_Init+0x58>)
 8007e0e:	f003 fee7 	bl	800bbe0 <HAL_TIM_Base_Init>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8007e18:	f7fe feae 	bl	8006b78 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8007e1c:	2108      	movs	r1, #8
 8007e1e:	4805      	ldr	r0, [pc, #20]	@ (8007e34 <MX_TIM16_Init+0x58>)
 8007e20:	f004 f9a0 	bl	800c164 <HAL_TIM_OnePulse_Init>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8007e2a:	f7fe fea5 	bl	8006b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8007e2e:	bf00      	nop
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	20001de8 	.word	0x20001de8
 8007e38:	40014400 	.word	0x40014400

08007e3c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a0d      	ldr	r2, [pc, #52]	@ (8007e80 <HAL_TIM_PWM_MspInit+0x44>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d113      	bne.n	8007e76 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e84 <HAL_TIM_PWM_MspInit+0x48>)
 8007e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e52:	4a0c      	ldr	r2, [pc, #48]	@ (8007e84 <HAL_TIM_PWM_MspInit+0x48>)
 8007e54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007e58:	6613      	str	r3, [r2, #96]	@ 0x60
 8007e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e84 <HAL_TIM_PWM_MspInit+0x48>)
 8007e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8007e66:	2200      	movs	r2, #0
 8007e68:	2100      	movs	r1, #0
 8007e6a:	2019      	movs	r0, #25
 8007e6c:	f002 f957 	bl	800a11e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007e70:	2019      	movs	r0, #25
 8007e72:	f002 f96e 	bl	800a152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8007e76:	bf00      	nop
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	40012c00 	.word	0x40012c00
 8007e84:	40021000 	.word	0x40021000

08007e88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e98:	d114      	bne.n	8007ec4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007e9a:	4b22      	ldr	r3, [pc, #136]	@ (8007f24 <HAL_TIM_Base_MspInit+0x9c>)
 8007e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e9e:	4a21      	ldr	r2, [pc, #132]	@ (8007f24 <HAL_TIM_Base_MspInit+0x9c>)
 8007ea0:	f043 0301 	orr.w	r3, r3, #1
 8007ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8007f24 <HAL_TIM_Base_MspInit+0x9c>)
 8007ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	617b      	str	r3, [r7, #20]
 8007eb0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	201c      	movs	r0, #28
 8007eb8:	f002 f931 	bl	800a11e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007ebc:	201c      	movs	r0, #28
 8007ebe:	f002 f948 	bl	800a152 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8007ec2:	e02a      	b.n	8007f1a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a17      	ldr	r2, [pc, #92]	@ (8007f28 <HAL_TIM_Base_MspInit+0xa0>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d10c      	bne.n	8007ee8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007ece:	4b15      	ldr	r3, [pc, #84]	@ (8007f24 <HAL_TIM_Base_MspInit+0x9c>)
 8007ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ed2:	4a14      	ldr	r2, [pc, #80]	@ (8007f24 <HAL_TIM_Base_MspInit+0x9c>)
 8007ed4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007ed8:	6613      	str	r3, [r2, #96]	@ 0x60
 8007eda:	4b12      	ldr	r3, [pc, #72]	@ (8007f24 <HAL_TIM_Base_MspInit+0x9c>)
 8007edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ede:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ee2:	613b      	str	r3, [r7, #16]
 8007ee4:	693b      	ldr	r3, [r7, #16]
}
 8007ee6:	e018      	b.n	8007f1a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a0f      	ldr	r2, [pc, #60]	@ (8007f2c <HAL_TIM_Base_MspInit+0xa4>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d113      	bne.n	8007f1a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8007f24 <HAL_TIM_Base_MspInit+0x9c>)
 8007ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ef6:	4a0b      	ldr	r2, [pc, #44]	@ (8007f24 <HAL_TIM_Base_MspInit+0x9c>)
 8007ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007efc:	6613      	str	r3, [r2, #96]	@ 0x60
 8007efe:	4b09      	ldr	r3, [pc, #36]	@ (8007f24 <HAL_TIM_Base_MspInit+0x9c>)
 8007f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f06:	60fb      	str	r3, [r7, #12]
 8007f08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	2019      	movs	r0, #25
 8007f10:	f002 f905 	bl	800a11e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007f14:	2019      	movs	r0, #25
 8007f16:	f002 f91c 	bl	800a152 <HAL_NVIC_EnableIRQ>
}
 8007f1a:	bf00      	nop
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	40021000 	.word	0x40021000
 8007f28:	40013400 	.word	0x40013400
 8007f2c:	40014400 	.word	0x40014400

08007f30 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08e      	sub	sp, #56	@ 0x38
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	601a      	str	r2, [r3, #0]
 8007f40:	605a      	str	r2, [r3, #4]
 8007f42:	609a      	str	r2, [r3, #8]
 8007f44:	60da      	str	r2, [r3, #12]
 8007f46:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a4f      	ldr	r2, [pc, #316]	@ (800808c <HAL_TIM_Encoder_MspInit+0x15c>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d131      	bne.n	8007fb6 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007f52:	4b4f      	ldr	r3, [pc, #316]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 8007f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f56:	4a4e      	ldr	r2, [pc, #312]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 8007f58:	f043 0302 	orr.w	r3, r3, #2
 8007f5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f5e:	4b4c      	ldr	r3, [pc, #304]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 8007f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	623b      	str	r3, [r7, #32]
 8007f68:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f6a:	4b49      	ldr	r3, [pc, #292]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 8007f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f6e:	4a48      	ldr	r2, [pc, #288]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 8007f70:	f043 0301 	orr.w	r3, r3, #1
 8007f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f76:	4b46      	ldr	r3, [pc, #280]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 8007f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	61fb      	str	r3, [r7, #28]
 8007f80:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007f82:	23c0      	movs	r3, #192	@ 0xc0
 8007f84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f86:	2302      	movs	r3, #2
 8007f88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007f92:	2302      	movs	r3, #2
 8007f94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007fa0:	f002 fc24 	bl	800a7ec <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	201d      	movs	r0, #29
 8007faa:	f002 f8b8 	bl	800a11e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007fae:	201d      	movs	r0, #29
 8007fb0:	f002 f8cf 	bl	800a152 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8007fb4:	e065      	b.n	8008082 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a36      	ldr	r2, [pc, #216]	@ (8008094 <HAL_TIM_Encoder_MspInit+0x164>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d132      	bne.n	8008026 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007fc0:	4b33      	ldr	r3, [pc, #204]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 8007fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fc4:	4a32      	ldr	r2, [pc, #200]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 8007fc6:	f043 0304 	orr.w	r3, r3, #4
 8007fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fcc:	4b30      	ldr	r3, [pc, #192]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 8007fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fd0:	f003 0304 	and.w	r3, r3, #4
 8007fd4:	61bb      	str	r3, [r7, #24]
 8007fd6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 8007fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fdc:	4a2c      	ldr	r2, [pc, #176]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 8007fde:	f043 0301 	orr.w	r3, r3, #1
 8007fe2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 8007fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	617b      	str	r3, [r7, #20]
 8007fee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ff0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ffe:	2300      	movs	r3, #0
 8008000:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8008002:	230a      	movs	r3, #10
 8008004:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800800a:	4619      	mov	r1, r3
 800800c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008010:	f002 fbec 	bl	800a7ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008014:	2200      	movs	r2, #0
 8008016:	2100      	movs	r1, #0
 8008018:	201e      	movs	r0, #30
 800801a:	f002 f880 	bl	800a11e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800801e:	201e      	movs	r0, #30
 8008020:	f002 f897 	bl	800a152 <HAL_NVIC_EnableIRQ>
}
 8008024:	e02d      	b.n	8008082 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a1b      	ldr	r2, [pc, #108]	@ (8008098 <HAL_TIM_Encoder_MspInit+0x168>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d128      	bne.n	8008082 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008030:	4b17      	ldr	r3, [pc, #92]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 8008032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008034:	4a16      	ldr	r2, [pc, #88]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 8008036:	f043 0308 	orr.w	r3, r3, #8
 800803a:	6593      	str	r3, [r2, #88]	@ 0x58
 800803c:	4b14      	ldr	r3, [pc, #80]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 800803e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008040:	f003 0308 	and.w	r3, r3, #8
 8008044:	613b      	str	r3, [r7, #16]
 8008046:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008048:	4b11      	ldr	r3, [pc, #68]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 800804a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800804c:	4a10      	ldr	r2, [pc, #64]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 800804e:	f043 0301 	orr.w	r3, r3, #1
 8008052:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008054:	4b0e      	ldr	r3, [pc, #56]	@ (8008090 <HAL_TIM_Encoder_MspInit+0x160>)
 8008056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	60fb      	str	r3, [r7, #12]
 800805e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008060:	2303      	movs	r3, #3
 8008062:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008064:	2302      	movs	r3, #2
 8008066:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008068:	2300      	movs	r3, #0
 800806a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800806c:	2300      	movs	r3, #0
 800806e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008070:	2302      	movs	r3, #2
 8008072:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008078:	4619      	mov	r1, r3
 800807a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800807e:	f002 fbb5 	bl	800a7ec <HAL_GPIO_Init>
}
 8008082:	bf00      	nop
 8008084:	3738      	adds	r7, #56	@ 0x38
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	40000400 	.word	0x40000400
 8008090:	40021000 	.word	0x40021000
 8008094:	40000800 	.word	0x40000800
 8008098:	40000c00 	.word	0x40000c00

0800809c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08a      	sub	sp, #40	@ 0x28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080a4:	f107 0314 	add.w	r3, r7, #20
 80080a8:	2200      	movs	r2, #0
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	605a      	str	r2, [r3, #4]
 80080ae:	609a      	str	r2, [r3, #8]
 80080b0:	60da      	str	r2, [r3, #12]
 80080b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a22      	ldr	r2, [pc, #136]	@ (8008144 <HAL_TIM_MspPostInit+0xa8>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d11c      	bne.n	80080f8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080be:	4b22      	ldr	r3, [pc, #136]	@ (8008148 <HAL_TIM_MspPostInit+0xac>)
 80080c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080c2:	4a21      	ldr	r2, [pc, #132]	@ (8008148 <HAL_TIM_MspPostInit+0xac>)
 80080c4:	f043 0304 	orr.w	r3, r3, #4
 80080c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80080ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008148 <HAL_TIM_MspPostInit+0xac>)
 80080cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080ce:	f003 0304 	and.w	r3, r3, #4
 80080d2:	613b      	str	r3, [r7, #16]
 80080d4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80080d6:	2308      	movs	r3, #8
 80080d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080da:	2302      	movs	r3, #2
 80080dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080de:	2300      	movs	r3, #0
 80080e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080e2:	2300      	movs	r3, #0
 80080e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80080e6:	2302      	movs	r3, #2
 80080e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080ea:	f107 0314 	add.w	r3, r7, #20
 80080ee:	4619      	mov	r1, r3
 80080f0:	4816      	ldr	r0, [pc, #88]	@ (800814c <HAL_TIM_MspPostInit+0xb0>)
 80080f2:	f002 fb7b 	bl	800a7ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80080f6:	e020      	b.n	800813a <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a14      	ldr	r2, [pc, #80]	@ (8008150 <HAL_TIM_MspPostInit+0xb4>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d11b      	bne.n	800813a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008102:	4b11      	ldr	r3, [pc, #68]	@ (8008148 <HAL_TIM_MspPostInit+0xac>)
 8008104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008106:	4a10      	ldr	r2, [pc, #64]	@ (8008148 <HAL_TIM_MspPostInit+0xac>)
 8008108:	f043 0304 	orr.w	r3, r3, #4
 800810c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800810e:	4b0e      	ldr	r3, [pc, #56]	@ (8008148 <HAL_TIM_MspPostInit+0xac>)
 8008110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008112:	f003 0304 	and.w	r3, r3, #4
 8008116:	60fb      	str	r3, [r7, #12]
 8008118:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800811a:	23c0      	movs	r3, #192	@ 0xc0
 800811c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800811e:	2302      	movs	r3, #2
 8008120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008122:	2300      	movs	r3, #0
 8008124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008126:	2300      	movs	r3, #0
 8008128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800812a:	2304      	movs	r3, #4
 800812c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800812e:	f107 0314 	add.w	r3, r7, #20
 8008132:	4619      	mov	r1, r3
 8008134:	4805      	ldr	r0, [pc, #20]	@ (800814c <HAL_TIM_MspPostInit+0xb0>)
 8008136:	f002 fb59 	bl	800a7ec <HAL_GPIO_Init>
}
 800813a:	bf00      	nop
 800813c:	3728      	adds	r7, #40	@ 0x28
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	40012c00 	.word	0x40012c00
 8008148:	40021000 	.word	0x40021000
 800814c:	48000800 	.word	0x48000800
 8008150:	40013400 	.word	0x40013400

08008154 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8008158:	4b20      	ldr	r3, [pc, #128]	@ (80081dc <MX_LPUART1_UART_Init+0x88>)
 800815a:	4a21      	ldr	r2, [pc, #132]	@ (80081e0 <MX_LPUART1_UART_Init+0x8c>)
 800815c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800815e:	4b1f      	ldr	r3, [pc, #124]	@ (80081dc <MX_LPUART1_UART_Init+0x88>)
 8008160:	4a20      	ldr	r2, [pc, #128]	@ (80081e4 <MX_LPUART1_UART_Init+0x90>)
 8008162:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008164:	4b1d      	ldr	r3, [pc, #116]	@ (80081dc <MX_LPUART1_UART_Init+0x88>)
 8008166:	2200      	movs	r2, #0
 8008168:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800816a:	4b1c      	ldr	r3, [pc, #112]	@ (80081dc <MX_LPUART1_UART_Init+0x88>)
 800816c:	2200      	movs	r2, #0
 800816e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8008170:	4b1a      	ldr	r3, [pc, #104]	@ (80081dc <MX_LPUART1_UART_Init+0x88>)
 8008172:	2200      	movs	r2, #0
 8008174:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8008176:	4b19      	ldr	r3, [pc, #100]	@ (80081dc <MX_LPUART1_UART_Init+0x88>)
 8008178:	220c      	movs	r2, #12
 800817a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800817c:	4b17      	ldr	r3, [pc, #92]	@ (80081dc <MX_LPUART1_UART_Init+0x88>)
 800817e:	2200      	movs	r2, #0
 8008180:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008182:	4b16      	ldr	r3, [pc, #88]	@ (80081dc <MX_LPUART1_UART_Init+0x88>)
 8008184:	2200      	movs	r2, #0
 8008186:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008188:	4b14      	ldr	r3, [pc, #80]	@ (80081dc <MX_LPUART1_UART_Init+0x88>)
 800818a:	2200      	movs	r2, #0
 800818c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800818e:	4b13      	ldr	r3, [pc, #76]	@ (80081dc <MX_LPUART1_UART_Init+0x88>)
 8008190:	2200      	movs	r2, #0
 8008192:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8008194:	4811      	ldr	r0, [pc, #68]	@ (80081dc <MX_LPUART1_UART_Init+0x88>)
 8008196:	f005 fe0b 	bl	800ddb0 <HAL_UART_Init>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80081a0:	f7fe fcea 	bl	8006b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80081a4:	2100      	movs	r1, #0
 80081a6:	480d      	ldr	r0, [pc, #52]	@ (80081dc <MX_LPUART1_UART_Init+0x88>)
 80081a8:	f007 fb5e 	bl	800f868 <HAL_UARTEx_SetTxFifoThreshold>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80081b2:	f7fe fce1 	bl	8006b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80081b6:	2100      	movs	r1, #0
 80081b8:	4808      	ldr	r0, [pc, #32]	@ (80081dc <MX_LPUART1_UART_Init+0x88>)
 80081ba:	f007 fb93 	bl	800f8e4 <HAL_UARTEx_SetRxFifoThreshold>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80081c4:	f7fe fcd8 	bl	8006b78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80081c8:	4804      	ldr	r0, [pc, #16]	@ (80081dc <MX_LPUART1_UART_Init+0x88>)
 80081ca:	f007 fb14 	bl	800f7f6 <HAL_UARTEx_DisableFifoMode>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80081d4:	f7fe fcd0 	bl	8006b78 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80081d8:	bf00      	nop
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	20001eb4 	.word	0x20001eb4
 80081e0:	40008000 	.word	0x40008000
 80081e4:	001e8480 	.word	0x001e8480

080081e8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80081ec:	4b23      	ldr	r3, [pc, #140]	@ (800827c <MX_USART2_UART_Init+0x94>)
 80081ee:	4a24      	ldr	r2, [pc, #144]	@ (8008280 <MX_USART2_UART_Init+0x98>)
 80081f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80081f2:	4b22      	ldr	r3, [pc, #136]	@ (800827c <MX_USART2_UART_Init+0x94>)
 80081f4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80081f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80081fa:	4b20      	ldr	r3, [pc, #128]	@ (800827c <MX_USART2_UART_Init+0x94>)
 80081fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008200:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008202:	4b1e      	ldr	r3, [pc, #120]	@ (800827c <MX_USART2_UART_Init+0x94>)
 8008204:	2200      	movs	r2, #0
 8008206:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8008208:	4b1c      	ldr	r3, [pc, #112]	@ (800827c <MX_USART2_UART_Init+0x94>)
 800820a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800820e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008210:	4b1a      	ldr	r3, [pc, #104]	@ (800827c <MX_USART2_UART_Init+0x94>)
 8008212:	220c      	movs	r2, #12
 8008214:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008216:	4b19      	ldr	r3, [pc, #100]	@ (800827c <MX_USART2_UART_Init+0x94>)
 8008218:	2200      	movs	r2, #0
 800821a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800821c:	4b17      	ldr	r3, [pc, #92]	@ (800827c <MX_USART2_UART_Init+0x94>)
 800821e:	2200      	movs	r2, #0
 8008220:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008222:	4b16      	ldr	r3, [pc, #88]	@ (800827c <MX_USART2_UART_Init+0x94>)
 8008224:	2200      	movs	r2, #0
 8008226:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008228:	4b14      	ldr	r3, [pc, #80]	@ (800827c <MX_USART2_UART_Init+0x94>)
 800822a:	2200      	movs	r2, #0
 800822c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800822e:	4b13      	ldr	r3, [pc, #76]	@ (800827c <MX_USART2_UART_Init+0x94>)
 8008230:	2200      	movs	r2, #0
 8008232:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008234:	4811      	ldr	r0, [pc, #68]	@ (800827c <MX_USART2_UART_Init+0x94>)
 8008236:	f005 fdbb 	bl	800ddb0 <HAL_UART_Init>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8008240:	f7fe fc9a 	bl	8006b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008244:	2100      	movs	r1, #0
 8008246:	480d      	ldr	r0, [pc, #52]	@ (800827c <MX_USART2_UART_Init+0x94>)
 8008248:	f007 fb0e 	bl	800f868 <HAL_UARTEx_SetTxFifoThreshold>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8008252:	f7fe fc91 	bl	8006b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008256:	2100      	movs	r1, #0
 8008258:	4808      	ldr	r0, [pc, #32]	@ (800827c <MX_USART2_UART_Init+0x94>)
 800825a:	f007 fb43 	bl	800f8e4 <HAL_UARTEx_SetRxFifoThreshold>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8008264:	f7fe fc88 	bl	8006b78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8008268:	4804      	ldr	r0, [pc, #16]	@ (800827c <MX_USART2_UART_Init+0x94>)
 800826a:	f007 fac4 	bl	800f7f6 <HAL_UARTEx_DisableFifoMode>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8008274:	f7fe fc80 	bl	8006b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008278:	bf00      	nop
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20001f80 	.word	0x20001f80
 8008280:	40004400 	.word	0x40004400

08008284 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b0a0      	sub	sp, #128	@ 0x80
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800828c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008290:	2200      	movs	r2, #0
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	605a      	str	r2, [r3, #4]
 8008296:	609a      	str	r2, [r3, #8]
 8008298:	60da      	str	r2, [r3, #12]
 800829a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800829c:	f107 0318 	add.w	r3, r7, #24
 80082a0:	2254      	movs	r2, #84	@ 0x54
 80082a2:	2100      	movs	r1, #0
 80082a4:	4618      	mov	r0, r3
 80082a6:	f008 f955 	bl	8010554 <memset>
  if(uartHandle->Instance==LPUART1)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a99      	ldr	r2, [pc, #612]	@ (8008514 <HAL_UART_MspInit+0x290>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	f040 8093 	bne.w	80083dc <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80082b6:	2320      	movs	r3, #32
 80082b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80082ba:	2300      	movs	r3, #0
 80082bc:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80082be:	f107 0318 	add.w	r3, r7, #24
 80082c2:	4618      	mov	r0, r3
 80082c4:	f003 fa3e 	bl	800b744 <HAL_RCCEx_PeriphCLKConfig>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80082ce:	f7fe fc53 	bl	8006b78 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80082d2:	4b91      	ldr	r3, [pc, #580]	@ (8008518 <HAL_UART_MspInit+0x294>)
 80082d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082d6:	4a90      	ldr	r2, [pc, #576]	@ (8008518 <HAL_UART_MspInit+0x294>)
 80082d8:	f043 0301 	orr.w	r3, r3, #1
 80082dc:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80082de:	4b8e      	ldr	r3, [pc, #568]	@ (8008518 <HAL_UART_MspInit+0x294>)
 80082e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	617b      	str	r3, [r7, #20]
 80082e8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082ea:	4b8b      	ldr	r3, [pc, #556]	@ (8008518 <HAL_UART_MspInit+0x294>)
 80082ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082ee:	4a8a      	ldr	r2, [pc, #552]	@ (8008518 <HAL_UART_MspInit+0x294>)
 80082f0:	f043 0302 	orr.w	r3, r3, #2
 80082f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80082f6:	4b88      	ldr	r3, [pc, #544]	@ (8008518 <HAL_UART_MspInit+0x294>)
 80082f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	613b      	str	r3, [r7, #16]
 8008300:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008302:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008306:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008308:	2302      	movs	r3, #2
 800830a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800830c:	2300      	movs	r3, #0
 800830e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008310:	2300      	movs	r3, #0
 8008312:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8008314:	2308      	movs	r3, #8
 8008316:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008318:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800831c:	4619      	mov	r1, r3
 800831e:	487f      	ldr	r0, [pc, #508]	@ (800851c <HAL_UART_MspInit+0x298>)
 8008320:	f002 fa64 	bl	800a7ec <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8008324:	4b7e      	ldr	r3, [pc, #504]	@ (8008520 <HAL_UART_MspInit+0x29c>)
 8008326:	4a7f      	ldr	r2, [pc, #508]	@ (8008524 <HAL_UART_MspInit+0x2a0>)
 8008328:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800832a:	4b7d      	ldr	r3, [pc, #500]	@ (8008520 <HAL_UART_MspInit+0x29c>)
 800832c:	2222      	movs	r2, #34	@ 0x22
 800832e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008330:	4b7b      	ldr	r3, [pc, #492]	@ (8008520 <HAL_UART_MspInit+0x29c>)
 8008332:	2200      	movs	r2, #0
 8008334:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008336:	4b7a      	ldr	r3, [pc, #488]	@ (8008520 <HAL_UART_MspInit+0x29c>)
 8008338:	2200      	movs	r2, #0
 800833a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800833c:	4b78      	ldr	r3, [pc, #480]	@ (8008520 <HAL_UART_MspInit+0x29c>)
 800833e:	2280      	movs	r2, #128	@ 0x80
 8008340:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008342:	4b77      	ldr	r3, [pc, #476]	@ (8008520 <HAL_UART_MspInit+0x29c>)
 8008344:	2200      	movs	r2, #0
 8008346:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008348:	4b75      	ldr	r3, [pc, #468]	@ (8008520 <HAL_UART_MspInit+0x29c>)
 800834a:	2200      	movs	r2, #0
 800834c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800834e:	4b74      	ldr	r3, [pc, #464]	@ (8008520 <HAL_UART_MspInit+0x29c>)
 8008350:	2200      	movs	r2, #0
 8008352:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008354:	4b72      	ldr	r3, [pc, #456]	@ (8008520 <HAL_UART_MspInit+0x29c>)
 8008356:	2200      	movs	r2, #0
 8008358:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800835a:	4871      	ldr	r0, [pc, #452]	@ (8008520 <HAL_UART_MspInit+0x29c>)
 800835c:	f001 ff14 	bl	800a188 <HAL_DMA_Init>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8008366:	f7fe fc07 	bl	8006b78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a6c      	ldr	r2, [pc, #432]	@ (8008520 <HAL_UART_MspInit+0x29c>)
 800836e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8008372:	4a6b      	ldr	r2, [pc, #428]	@ (8008520 <HAL_UART_MspInit+0x29c>)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8008378:	4b6b      	ldr	r3, [pc, #428]	@ (8008528 <HAL_UART_MspInit+0x2a4>)
 800837a:	4a6c      	ldr	r2, [pc, #432]	@ (800852c <HAL_UART_MspInit+0x2a8>)
 800837c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800837e:	4b6a      	ldr	r3, [pc, #424]	@ (8008528 <HAL_UART_MspInit+0x2a4>)
 8008380:	2223      	movs	r2, #35	@ 0x23
 8008382:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008384:	4b68      	ldr	r3, [pc, #416]	@ (8008528 <HAL_UART_MspInit+0x2a4>)
 8008386:	2210      	movs	r2, #16
 8008388:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800838a:	4b67      	ldr	r3, [pc, #412]	@ (8008528 <HAL_UART_MspInit+0x2a4>)
 800838c:	2200      	movs	r2, #0
 800838e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008390:	4b65      	ldr	r3, [pc, #404]	@ (8008528 <HAL_UART_MspInit+0x2a4>)
 8008392:	2280      	movs	r2, #128	@ 0x80
 8008394:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008396:	4b64      	ldr	r3, [pc, #400]	@ (8008528 <HAL_UART_MspInit+0x2a4>)
 8008398:	2200      	movs	r2, #0
 800839a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800839c:	4b62      	ldr	r3, [pc, #392]	@ (8008528 <HAL_UART_MspInit+0x2a4>)
 800839e:	2200      	movs	r2, #0
 80083a0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80083a2:	4b61      	ldr	r3, [pc, #388]	@ (8008528 <HAL_UART_MspInit+0x2a4>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80083a8:	4b5f      	ldr	r3, [pc, #380]	@ (8008528 <HAL_UART_MspInit+0x2a4>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80083ae:	485e      	ldr	r0, [pc, #376]	@ (8008528 <HAL_UART_MspInit+0x2a4>)
 80083b0:	f001 feea 	bl	800a188 <HAL_DMA_Init>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80083ba:	f7fe fbdd 	bl	8006b78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a59      	ldr	r2, [pc, #356]	@ (8008528 <HAL_UART_MspInit+0x2a4>)
 80083c2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80083c4:	4a58      	ldr	r2, [pc, #352]	@ (8008528 <HAL_UART_MspInit+0x2a4>)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80083ca:	2200      	movs	r2, #0
 80083cc:	2100      	movs	r1, #0
 80083ce:	205b      	movs	r0, #91	@ 0x5b
 80083d0:	f001 fea5 	bl	800a11e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80083d4:	205b      	movs	r0, #91	@ 0x5b
 80083d6:	f001 febc 	bl	800a152 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80083da:	e097      	b.n	800850c <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a53      	ldr	r2, [pc, #332]	@ (8008530 <HAL_UART_MspInit+0x2ac>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	f040 8092 	bne.w	800850c <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80083e8:	2302      	movs	r3, #2
 80083ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80083ec:	2300      	movs	r3, #0
 80083ee:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80083f0:	f107 0318 	add.w	r3, r7, #24
 80083f4:	4618      	mov	r0, r3
 80083f6:	f003 f9a5 	bl	800b744 <HAL_RCCEx_PeriphCLKConfig>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8008400:	f7fe fbba 	bl	8006b78 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008404:	4b44      	ldr	r3, [pc, #272]	@ (8008518 <HAL_UART_MspInit+0x294>)
 8008406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008408:	4a43      	ldr	r2, [pc, #268]	@ (8008518 <HAL_UART_MspInit+0x294>)
 800840a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800840e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008410:	4b41      	ldr	r3, [pc, #260]	@ (8008518 <HAL_UART_MspInit+0x294>)
 8008412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800841c:	4b3e      	ldr	r3, [pc, #248]	@ (8008518 <HAL_UART_MspInit+0x294>)
 800841e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008420:	4a3d      	ldr	r2, [pc, #244]	@ (8008518 <HAL_UART_MspInit+0x294>)
 8008422:	f043 0301 	orr.w	r3, r3, #1
 8008426:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008428:	4b3b      	ldr	r3, [pc, #236]	@ (8008518 <HAL_UART_MspInit+0x294>)
 800842a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	60bb      	str	r3, [r7, #8]
 8008432:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008434:	230c      	movs	r3, #12
 8008436:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008438:	2302      	movs	r3, #2
 800843a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800843c:	2300      	movs	r3, #0
 800843e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008440:	2300      	movs	r3, #0
 8008442:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008444:	2307      	movs	r3, #7
 8008446:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008448:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800844c:	4619      	mov	r1, r3
 800844e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008452:	f002 f9cb 	bl	800a7ec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8008456:	4b37      	ldr	r3, [pc, #220]	@ (8008534 <HAL_UART_MspInit+0x2b0>)
 8008458:	4a37      	ldr	r2, [pc, #220]	@ (8008538 <HAL_UART_MspInit+0x2b4>)
 800845a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800845c:	4b35      	ldr	r3, [pc, #212]	@ (8008534 <HAL_UART_MspInit+0x2b0>)
 800845e:	221a      	movs	r2, #26
 8008460:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008462:	4b34      	ldr	r3, [pc, #208]	@ (8008534 <HAL_UART_MspInit+0x2b0>)
 8008464:	2200      	movs	r2, #0
 8008466:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008468:	4b32      	ldr	r3, [pc, #200]	@ (8008534 <HAL_UART_MspInit+0x2b0>)
 800846a:	2200      	movs	r2, #0
 800846c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800846e:	4b31      	ldr	r3, [pc, #196]	@ (8008534 <HAL_UART_MspInit+0x2b0>)
 8008470:	2280      	movs	r2, #128	@ 0x80
 8008472:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008474:	4b2f      	ldr	r3, [pc, #188]	@ (8008534 <HAL_UART_MspInit+0x2b0>)
 8008476:	2200      	movs	r2, #0
 8008478:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800847a:	4b2e      	ldr	r3, [pc, #184]	@ (8008534 <HAL_UART_MspInit+0x2b0>)
 800847c:	2200      	movs	r2, #0
 800847e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8008480:	4b2c      	ldr	r3, [pc, #176]	@ (8008534 <HAL_UART_MspInit+0x2b0>)
 8008482:	2200      	movs	r2, #0
 8008484:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008486:	4b2b      	ldr	r3, [pc, #172]	@ (8008534 <HAL_UART_MspInit+0x2b0>)
 8008488:	2200      	movs	r2, #0
 800848a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800848c:	4829      	ldr	r0, [pc, #164]	@ (8008534 <HAL_UART_MspInit+0x2b0>)
 800848e:	f001 fe7b 	bl	800a188 <HAL_DMA_Init>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <HAL_UART_MspInit+0x218>
      Error_Handler();
 8008498:	f7fe fb6e 	bl	8006b78 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a25      	ldr	r2, [pc, #148]	@ (8008534 <HAL_UART_MspInit+0x2b0>)
 80084a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80084a4:	4a23      	ldr	r2, [pc, #140]	@ (8008534 <HAL_UART_MspInit+0x2b0>)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80084aa:	4b24      	ldr	r3, [pc, #144]	@ (800853c <HAL_UART_MspInit+0x2b8>)
 80084ac:	4a24      	ldr	r2, [pc, #144]	@ (8008540 <HAL_UART_MspInit+0x2bc>)
 80084ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80084b0:	4b22      	ldr	r3, [pc, #136]	@ (800853c <HAL_UART_MspInit+0x2b8>)
 80084b2:	221b      	movs	r2, #27
 80084b4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80084b6:	4b21      	ldr	r3, [pc, #132]	@ (800853c <HAL_UART_MspInit+0x2b8>)
 80084b8:	2210      	movs	r2, #16
 80084ba:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80084bc:	4b1f      	ldr	r3, [pc, #124]	@ (800853c <HAL_UART_MspInit+0x2b8>)
 80084be:	2200      	movs	r2, #0
 80084c0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80084c2:	4b1e      	ldr	r3, [pc, #120]	@ (800853c <HAL_UART_MspInit+0x2b8>)
 80084c4:	2280      	movs	r2, #128	@ 0x80
 80084c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80084c8:	4b1c      	ldr	r3, [pc, #112]	@ (800853c <HAL_UART_MspInit+0x2b8>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80084ce:	4b1b      	ldr	r3, [pc, #108]	@ (800853c <HAL_UART_MspInit+0x2b8>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80084d4:	4b19      	ldr	r3, [pc, #100]	@ (800853c <HAL_UART_MspInit+0x2b8>)
 80084d6:	2200      	movs	r2, #0
 80084d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80084da:	4b18      	ldr	r3, [pc, #96]	@ (800853c <HAL_UART_MspInit+0x2b8>)
 80084dc:	2200      	movs	r2, #0
 80084de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80084e0:	4816      	ldr	r0, [pc, #88]	@ (800853c <HAL_UART_MspInit+0x2b8>)
 80084e2:	f001 fe51 	bl	800a188 <HAL_DMA_Init>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 80084ec:	f7fe fb44 	bl	8006b78 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a12      	ldr	r2, [pc, #72]	@ (800853c <HAL_UART_MspInit+0x2b8>)
 80084f4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80084f6:	4a11      	ldr	r2, [pc, #68]	@ (800853c <HAL_UART_MspInit+0x2b8>)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80084fc:	2200      	movs	r2, #0
 80084fe:	2100      	movs	r1, #0
 8008500:	2026      	movs	r0, #38	@ 0x26
 8008502:	f001 fe0c 	bl	800a11e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008506:	2026      	movs	r0, #38	@ 0x26
 8008508:	f001 fe23 	bl	800a152 <HAL_NVIC_EnableIRQ>
}
 800850c:	bf00      	nop
 800850e:	3780      	adds	r7, #128	@ 0x80
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	40008000 	.word	0x40008000
 8008518:	40021000 	.word	0x40021000
 800851c:	48000400 	.word	0x48000400
 8008520:	2000204c 	.word	0x2000204c
 8008524:	40020044 	.word	0x40020044
 8008528:	200020ac 	.word	0x200020ac
 800852c:	40020058 	.word	0x40020058
 8008530:	40004400 	.word	0x40004400
 8008534:	2000210c 	.word	0x2000210c
 8008538:	4002001c 	.word	0x4002001c
 800853c:	2000216c 	.word	0x2000216c
 8008540:	40020030 	.word	0x40020030

08008544 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8008544:	480d      	ldr	r0, [pc, #52]	@ (800857c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008546:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008548:	f7ff f994 	bl	8007874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800854c:	480c      	ldr	r0, [pc, #48]	@ (8008580 <LoopForever+0x6>)
  ldr r1, =_edata
 800854e:	490d      	ldr	r1, [pc, #52]	@ (8008584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008550:	4a0d      	ldr	r2, [pc, #52]	@ (8008588 <LoopForever+0xe>)
  movs r3, #0
 8008552:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008554:	e002      	b.n	800855c <LoopCopyDataInit>

08008556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800855a:	3304      	adds	r3, #4

0800855c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800855c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800855e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008560:	d3f9      	bcc.n	8008556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008562:	4a0a      	ldr	r2, [pc, #40]	@ (800858c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008564:	4c0a      	ldr	r4, [pc, #40]	@ (8008590 <LoopForever+0x16>)
  movs r3, #0
 8008566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008568:	e001      	b.n	800856e <LoopFillZerobss>

0800856a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800856a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800856c:	3204      	adds	r2, #4

0800856e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800856e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008570:	d3fb      	bcc.n	800856a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008572:	f008 f80d 	bl	8010590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008576:	f7fc fd63 	bl	8005040 <main>

0800857a <LoopForever>:

LoopForever:
    b LoopForever
 800857a:	e7fe      	b.n	800857a <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 800857c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008584:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8008588:	08012a90 	.word	0x08012a90
  ldr r2, =_sbss
 800858c:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8008590:	20002318 	.word	0x20002318

08008594 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008594:	e7fe      	b.n	8008594 <ADC1_2_IRQHandler>

08008596 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80085a0:	2003      	movs	r0, #3
 80085a2:	f001 fdb1 	bl	800a108 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80085a6:	2000      	movs	r0, #0
 80085a8:	f000 f80e 	bl	80085c8 <HAL_InitTick>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	71fb      	strb	r3, [r7, #7]
 80085b6:	e001      	b.n	80085bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80085b8:	f7ff f83e 	bl	8007638 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80085bc:	79fb      	ldrb	r3, [r7, #7]

}
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80085d4:	4b16      	ldr	r3, [pc, #88]	@ (8008630 <HAL_InitTick+0x68>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d022      	beq.n	8008622 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80085dc:	4b15      	ldr	r3, [pc, #84]	@ (8008634 <HAL_InitTick+0x6c>)
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	4b13      	ldr	r3, [pc, #76]	@ (8008630 <HAL_InitTick+0x68>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80085e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80085ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f0:	4618      	mov	r0, r3
 80085f2:	f001 fdbc 	bl	800a16e <HAL_SYSTICK_Config>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10f      	bne.n	800861c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b0f      	cmp	r3, #15
 8008600:	d809      	bhi.n	8008616 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008602:	2200      	movs	r2, #0
 8008604:	6879      	ldr	r1, [r7, #4]
 8008606:	f04f 30ff 	mov.w	r0, #4294967295
 800860a:	f001 fd88 	bl	800a11e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800860e:	4a0a      	ldr	r2, [pc, #40]	@ (8008638 <HAL_InitTick+0x70>)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6013      	str	r3, [r2, #0]
 8008614:	e007      	b.n	8008626 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	73fb      	strb	r3, [r7, #15]
 800861a:	e004      	b.n	8008626 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	73fb      	strb	r3, [r7, #15]
 8008620:	e001      	b.n	8008626 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008626:	7bfb      	ldrb	r3, [r7, #15]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	20000138 	.word	0x20000138
 8008634:	20000130 	.word	0x20000130
 8008638:	20000134 	.word	0x20000134

0800863c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800863c:	b480      	push	{r7}
 800863e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008640:	4b05      	ldr	r3, [pc, #20]	@ (8008658 <HAL_IncTick+0x1c>)
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	4b05      	ldr	r3, [pc, #20]	@ (800865c <HAL_IncTick+0x20>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4413      	add	r3, r2
 800864a:	4a03      	ldr	r2, [pc, #12]	@ (8008658 <HAL_IncTick+0x1c>)
 800864c:	6013      	str	r3, [r2, #0]
}
 800864e:	bf00      	nop
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	200021cc 	.word	0x200021cc
 800865c:	20000138 	.word	0x20000138

08008660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008660:	b480      	push	{r7}
 8008662:	af00      	add	r7, sp, #0
  return uwTick;
 8008664:	4b03      	ldr	r3, [pc, #12]	@ (8008674 <HAL_GetTick+0x14>)
 8008666:	681b      	ldr	r3, [r3, #0]
}
 8008668:	4618      	mov	r0, r3
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	200021cc 	.word	0x200021cc

08008678 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	431a      	orrs	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	609a      	str	r2, [r3, #8]
}
 8008692:	bf00      	nop
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	431a      	orrs	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	609a      	str	r2, [r3, #8]
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3360      	adds	r3, #96	@ 0x60
 80086f2:	461a      	mov	r2, r3
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	4b08      	ldr	r3, [pc, #32]	@ (8008724 <LL_ADC_SetOffset+0x44>)
 8008702:	4013      	ands	r3, r2
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	430a      	orrs	r2, r1
 800870e:	4313      	orrs	r3, r2
 8008710:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008718:	bf00      	nop
 800871a:	371c      	adds	r7, #28
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	03fff000 	.word	0x03fff000

08008728 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	3360      	adds	r3, #96	@ 0x60
 8008736:	461a      	mov	r2, r3
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8008748:	4618      	mov	r0, r3
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008754:	b480      	push	{r7}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	3360      	adds	r3, #96	@ 0x60
 8008764:	461a      	mov	r2, r3
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	431a      	orrs	r2, r3
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800877e:	bf00      	nop
 8008780:	371c      	adds	r7, #28
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800878a:	b480      	push	{r7}
 800878c:	b087      	sub	sp, #28
 800878e:	af00      	add	r7, sp, #0
 8008790:	60f8      	str	r0, [r7, #12]
 8008792:	60b9      	str	r1, [r7, #8]
 8008794:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3360      	adds	r3, #96	@ 0x60
 800879a:	461a      	mov	r2, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	431a      	orrs	r2, r3
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80087b4:	bf00      	nop
 80087b6:	371c      	adds	r7, #28
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	3360      	adds	r3, #96	@ 0x60
 80087d0:	461a      	mov	r2, r3
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	431a      	orrs	r2, r3
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80087ea:	bf00      	nop
 80087ec:	371c      	adds	r7, #28
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b083      	sub	sp, #12
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	431a      	orrs	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	615a      	str	r2, [r3, #20]
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008830:	2301      	movs	r3, #1
 8008832:	e000      	b.n	8008836 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008842:	b480      	push	{r7}
 8008844:	b087      	sub	sp, #28
 8008846:	af00      	add	r7, sp, #0
 8008848:	60f8      	str	r0, [r7, #12]
 800884a:	60b9      	str	r1, [r7, #8]
 800884c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	3330      	adds	r3, #48	@ 0x30
 8008852:	461a      	mov	r2, r3
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	0a1b      	lsrs	r3, r3, #8
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	f003 030c 	and.w	r3, r3, #12
 800885e:	4413      	add	r3, r2
 8008860:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f003 031f 	and.w	r3, r3, #31
 800886c:	211f      	movs	r1, #31
 800886e:	fa01 f303 	lsl.w	r3, r1, r3
 8008872:	43db      	mvns	r3, r3
 8008874:	401a      	ands	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	0e9b      	lsrs	r3, r3, #26
 800887a:	f003 011f 	and.w	r1, r3, #31
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	f003 031f 	and.w	r3, r3, #31
 8008884:	fa01 f303 	lsl.w	r3, r1, r3
 8008888:	431a      	orrs	r2, r3
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800888e:	bf00      	nop
 8008890:	371c      	adds	r7, #28
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800889a:	b480      	push	{r7}
 800889c:	b087      	sub	sp, #28
 800889e:	af00      	add	r7, sp, #0
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3314      	adds	r3, #20
 80088aa:	461a      	mov	r2, r3
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	0e5b      	lsrs	r3, r3, #25
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	f003 0304 	and.w	r3, r3, #4
 80088b6:	4413      	add	r3, r2
 80088b8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	0d1b      	lsrs	r3, r3, #20
 80088c2:	f003 031f 	and.w	r3, r3, #31
 80088c6:	2107      	movs	r1, #7
 80088c8:	fa01 f303 	lsl.w	r3, r1, r3
 80088cc:	43db      	mvns	r3, r3
 80088ce:	401a      	ands	r2, r3
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	0d1b      	lsrs	r3, r3, #20
 80088d4:	f003 031f 	and.w	r3, r3, #31
 80088d8:	6879      	ldr	r1, [r7, #4]
 80088da:	fa01 f303 	lsl.w	r3, r1, r3
 80088de:	431a      	orrs	r2, r3
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80088e4:	bf00      	nop
 80088e6:	371c      	adds	r7, #28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008908:	43db      	mvns	r3, r3
 800890a:	401a      	ands	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f003 0318 	and.w	r3, r3, #24
 8008912:	4908      	ldr	r1, [pc, #32]	@ (8008934 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008914:	40d9      	lsrs	r1, r3
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	400b      	ands	r3, r1
 800891a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800891e:	431a      	orrs	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	0007ffff 	.word	0x0007ffff

08008938 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f003 031f 	and.w	r3, r3, #31
}
 8008948:	4618      	mov	r0, r3
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8008964:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	6093      	str	r3, [r2, #8]
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008988:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800898c:	d101      	bne.n	8008992 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800898e:	2301      	movs	r3, #1
 8008990:	e000      	b.n	8008994 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80089b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80089b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089dc:	d101      	bne.n	80089e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80089de:	2301      	movs	r3, #1
 80089e0:	e000      	b.n	80089e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008a04:	f043 0201 	orr.w	r2, r3, #1
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008a2c:	f043 0202 	orr.w	r2, r3, #2
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d101      	bne.n	8008a58 <LL_ADC_IsEnabled+0x18>
 8008a54:	2301      	movs	r3, #1
 8008a56:	e000      	b.n	8008a5a <LL_ADC_IsEnabled+0x1a>
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b083      	sub	sp, #12
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f003 0302 	and.w	r3, r3, #2
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d101      	bne.n	8008a7e <LL_ADC_IsDisableOngoing+0x18>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e000      	b.n	8008a80 <LL_ADC_IsDisableOngoing+0x1a>
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008aa0:	f043 0204 	orr.w	r2, r3, #4
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	f003 0304 	and.w	r3, r3, #4
 8008ac4:	2b04      	cmp	r3, #4
 8008ac6:	d101      	bne.n	8008acc <LL_ADC_REG_IsConversionOngoing+0x18>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e000      	b.n	8008ace <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b083      	sub	sp, #12
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f003 0308 	and.w	r3, r3, #8
 8008aea:	2b08      	cmp	r3, #8
 8008aec:	d101      	bne.n	8008af2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008aee:	2301      	movs	r3, #1
 8008af0:	e000      	b.n	8008af4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008b00:	b590      	push	{r4, r7, lr}
 8008b02:	b089      	sub	sp, #36	@ 0x24
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e1a9      	b.n	8008e6e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d109      	bne.n	8008b3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f7fb fdd5 	bl	80046d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7ff ff19 	bl	8008978 <LL_ADC_IsDeepPowerDownEnabled>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d004      	beq.n	8008b56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7ff feff 	bl	8008954 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff ff34 	bl	80089c8 <LL_ADC_IsInternalRegulatorEnabled>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d115      	bne.n	8008b92 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7ff ff18 	bl	80089a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008b70:	4b9c      	ldr	r3, [pc, #624]	@ (8008de4 <HAL_ADC_Init+0x2e4>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	099b      	lsrs	r3, r3, #6
 8008b76:	4a9c      	ldr	r2, [pc, #624]	@ (8008de8 <HAL_ADC_Init+0x2e8>)
 8008b78:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7c:	099b      	lsrs	r3, r3, #6
 8008b7e:	3301      	adds	r3, #1
 8008b80:	005b      	lsls	r3, r3, #1
 8008b82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8008b84:	e002      	b.n	8008b8c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1f9      	bne.n	8008b86 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7ff ff16 	bl	80089c8 <LL_ADC_IsInternalRegulatorEnabled>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10d      	bne.n	8008bbe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ba6:	f043 0210 	orr.w	r2, r3, #16
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bb2:	f043 0201 	orr.w	r2, r3, #1
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7ff ff76 	bl	8008ab4 <LL_ADC_REG_IsConversionOngoing>
 8008bc8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bce:	f003 0310 	and.w	r3, r3, #16
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f040 8142 	bne.w	8008e5c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f040 813e 	bne.w	8008e5c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008be4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8008be8:	f043 0202 	orr.w	r2, r3, #2
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7ff ff23 	bl	8008a40 <LL_ADC_IsEnabled>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d141      	bne.n	8008c84 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c08:	d004      	beq.n	8008c14 <HAL_ADC_Init+0x114>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a77      	ldr	r2, [pc, #476]	@ (8008dec <HAL_ADC_Init+0x2ec>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d10f      	bne.n	8008c34 <HAL_ADC_Init+0x134>
 8008c14:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8008c18:	f7ff ff12 	bl	8008a40 <LL_ADC_IsEnabled>
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	4873      	ldr	r0, [pc, #460]	@ (8008dec <HAL_ADC_Init+0x2ec>)
 8008c20:	f7ff ff0e 	bl	8008a40 <LL_ADC_IsEnabled>
 8008c24:	4603      	mov	r3, r0
 8008c26:	4323      	orrs	r3, r4
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	bf0c      	ite	eq
 8008c2c:	2301      	moveq	r3, #1
 8008c2e:	2300      	movne	r3, #0
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	e012      	b.n	8008c5a <HAL_ADC_Init+0x15a>
 8008c34:	486e      	ldr	r0, [pc, #440]	@ (8008df0 <HAL_ADC_Init+0x2f0>)
 8008c36:	f7ff ff03 	bl	8008a40 <LL_ADC_IsEnabled>
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	486d      	ldr	r0, [pc, #436]	@ (8008df4 <HAL_ADC_Init+0x2f4>)
 8008c3e:	f7ff feff 	bl	8008a40 <LL_ADC_IsEnabled>
 8008c42:	4603      	mov	r3, r0
 8008c44:	431c      	orrs	r4, r3
 8008c46:	486c      	ldr	r0, [pc, #432]	@ (8008df8 <HAL_ADC_Init+0x2f8>)
 8008c48:	f7ff fefa 	bl	8008a40 <LL_ADC_IsEnabled>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	4323      	orrs	r3, r4
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	bf0c      	ite	eq
 8008c54:	2301      	moveq	r3, #1
 8008c56:	2300      	movne	r3, #0
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d012      	beq.n	8008c84 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c66:	d004      	beq.n	8008c72 <HAL_ADC_Init+0x172>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a5f      	ldr	r2, [pc, #380]	@ (8008dec <HAL_ADC_Init+0x2ec>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d101      	bne.n	8008c76 <HAL_ADC_Init+0x176>
 8008c72:	4a62      	ldr	r2, [pc, #392]	@ (8008dfc <HAL_ADC_Init+0x2fc>)
 8008c74:	e000      	b.n	8008c78 <HAL_ADC_Init+0x178>
 8008c76:	4a62      	ldr	r2, [pc, #392]	@ (8008e00 <HAL_ADC_Init+0x300>)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4610      	mov	r0, r2
 8008c80:	f7ff fcfa 	bl	8008678 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	7f5b      	ldrb	r3, [r3, #29]
 8008c88:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008c8e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8008c94:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8008c9a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008ca2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d106      	bne.n	8008cc0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	045b      	lsls	r3, r3, #17
 8008cba:	69ba      	ldr	r2, [r7, #24]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d009      	beq.n	8008cdc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ccc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	4b48      	ldr	r3, [pc, #288]	@ (8008e04 <HAL_ADC_Init+0x304>)
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	6812      	ldr	r2, [r2, #0]
 8008cea:	69b9      	ldr	r1, [r7, #24]
 8008cec:	430b      	orrs	r3, r1
 8008cee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7ff fee5 	bl	8008ada <LL_ADC_INJ_IsConversionOngoing>
 8008d10:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d17f      	bne.n	8008e18 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d17c      	bne.n	8008e18 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8008d22:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008d2a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d3a:	f023 0302 	bic.w	r3, r3, #2
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	6812      	ldr	r2, [r2, #0]
 8008d42:	69b9      	ldr	r1, [r7, #24]
 8008d44:	430b      	orrs	r3, r1
 8008d46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d017      	beq.n	8008d80 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	691a      	ldr	r2, [r3, #16]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008d5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008d68:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8008d6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	6911      	ldr	r1, [r2, #16]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	6812      	ldr	r2, [r2, #0]
 8008d78:	430b      	orrs	r3, r1
 8008d7a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8008d7e:	e013      	b.n	8008da8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	691a      	ldr	r2, [r3, #16]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008d8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6812      	ldr	r2, [r2, #0]
 8008d9c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8008da0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008da4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d12a      	bne.n	8008e08 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008dbc:	f023 0304 	bic.w	r3, r3, #4
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008dc8:	4311      	orrs	r1, r2
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008dce:	4311      	orrs	r1, r2
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	431a      	orrs	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f042 0201 	orr.w	r2, r2, #1
 8008de0:	611a      	str	r2, [r3, #16]
 8008de2:	e019      	b.n	8008e18 <HAL_ADC_Init+0x318>
 8008de4:	20000130 	.word	0x20000130
 8008de8:	053e2d63 	.word	0x053e2d63
 8008dec:	50000100 	.word	0x50000100
 8008df0:	50000400 	.word	0x50000400
 8008df4:	50000500 	.word	0x50000500
 8008df8:	50000600 	.word	0x50000600
 8008dfc:	50000300 	.word	0x50000300
 8008e00:	50000700 	.word	0x50000700
 8008e04:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	691a      	ldr	r2, [r3, #16]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f022 0201 	bic.w	r2, r2, #1
 8008e16:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	695b      	ldr	r3, [r3, #20]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d10c      	bne.n	8008e3a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e26:	f023 010f 	bic.w	r1, r3, #15
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a1b      	ldr	r3, [r3, #32]
 8008e2e:	1e5a      	subs	r2, r3, #1
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	430a      	orrs	r2, r1
 8008e36:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e38:	e007      	b.n	8008e4a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f022 020f 	bic.w	r2, r2, #15
 8008e48:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e4e:	f023 0303 	bic.w	r3, r3, #3
 8008e52:	f043 0201 	orr.w	r2, r3, #1
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008e5a:	e007      	b.n	8008e6c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e60:	f043 0210 	orr.w	r2, r3, #16
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008e6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3724      	adds	r7, #36	@ 0x24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd90      	pop	{r4, r7, pc}
 8008e76:	bf00      	nop

08008e78 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e8c:	d004      	beq.n	8008e98 <HAL_ADC_Start_DMA+0x20>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a5a      	ldr	r2, [pc, #360]	@ (8008ffc <HAL_ADC_Start_DMA+0x184>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d101      	bne.n	8008e9c <HAL_ADC_Start_DMA+0x24>
 8008e98:	4b59      	ldr	r3, [pc, #356]	@ (8009000 <HAL_ADC_Start_DMA+0x188>)
 8008e9a:	e000      	b.n	8008e9e <HAL_ADC_Start_DMA+0x26>
 8008e9c:	4b59      	ldr	r3, [pc, #356]	@ (8009004 <HAL_ADC_Start_DMA+0x18c>)
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7ff fd4a 	bl	8008938 <LL_ADC_GetMultimode>
 8008ea4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7ff fe02 	bl	8008ab4 <LL_ADC_REG_IsConversionOngoing>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f040 809b 	bne.w	8008fee <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d101      	bne.n	8008ec6 <HAL_ADC_Start_DMA+0x4e>
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	e096      	b.n	8008ff4 <HAL_ADC_Start_DMA+0x17c>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a4d      	ldr	r2, [pc, #308]	@ (8009008 <HAL_ADC_Start_DMA+0x190>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d008      	beq.n	8008eea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d005      	beq.n	8008eea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	2b05      	cmp	r3, #5
 8008ee2:	d002      	beq.n	8008eea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	2b09      	cmp	r3, #9
 8008ee8:	d17a      	bne.n	8008fe0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 fcf6 	bl	80098dc <ADC_Enable>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d16d      	bne.n	8008fd6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008efe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008f02:	f023 0301 	bic.w	r3, r3, #1
 8008f06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a3a      	ldr	r2, [pc, #232]	@ (8008ffc <HAL_ADC_Start_DMA+0x184>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d009      	beq.n	8008f2c <HAL_ADC_Start_DMA+0xb4>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a3b      	ldr	r2, [pc, #236]	@ (800900c <HAL_ADC_Start_DMA+0x194>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d002      	beq.n	8008f28 <HAL_ADC_Start_DMA+0xb0>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	e003      	b.n	8008f30 <HAL_ADC_Start_DMA+0xb8>
 8008f28:	4b39      	ldr	r3, [pc, #228]	@ (8009010 <HAL_ADC_Start_DMA+0x198>)
 8008f2a:	e001      	b.n	8008f30 <HAL_ADC_Start_DMA+0xb8>
 8008f2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	6812      	ldr	r2, [r2, #0]
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d002      	beq.n	8008f3e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d105      	bne.n	8008f4a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f42:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d006      	beq.n	8008f64 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f5a:	f023 0206 	bic.w	r2, r3, #6
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	661a      	str	r2, [r3, #96]	@ 0x60
 8008f62:	e002      	b.n	8008f6a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f6e:	4a29      	ldr	r2, [pc, #164]	@ (8009014 <HAL_ADC_Start_DMA+0x19c>)
 8008f70:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f76:	4a28      	ldr	r2, [pc, #160]	@ (8009018 <HAL_ADC_Start_DMA+0x1a0>)
 8008f78:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f7e:	4a27      	ldr	r2, [pc, #156]	@ (800901c <HAL_ADC_Start_DMA+0x1a4>)
 8008f80:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	221c      	movs	r2, #28
 8008f88:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	685a      	ldr	r2, [r3, #4]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f042 0210 	orr.w	r2, r2, #16
 8008fa0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68da      	ldr	r2, [r3, #12]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f042 0201 	orr.w	r2, r2, #1
 8008fb0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3340      	adds	r3, #64	@ 0x40
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f001 f989 	bl	800a2d8 <HAL_DMA_Start_IT>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff fd5c 	bl	8008a8c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8008fd4:	e00d      	b.n	8008ff2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8008fde:	e008      	b.n	8008ff2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8008fec:	e001      	b.n	8008ff2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008fee:	2302      	movs	r3, #2
 8008ff0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	50000100 	.word	0x50000100
 8009000:	50000300 	.word	0x50000300
 8009004:	50000700 	.word	0x50000700
 8009008:	50000600 	.word	0x50000600
 800900c:	50000500 	.word	0x50000500
 8009010:	50000400 	.word	0x50000400
 8009014:	08009ac7 	.word	0x08009ac7
 8009018:	08009b9f 	.word	0x08009b9f
 800901c:	08009bbb 	.word	0x08009bbb

08009020 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b0b6      	sub	sp, #216	@ 0xd8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800906c:	2300      	movs	r3, #0
 800906e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009076:	2b01      	cmp	r3, #1
 8009078:	d102      	bne.n	8009080 <HAL_ADC_ConfigChannel+0x24>
 800907a:	2302      	movs	r3, #2
 800907c:	f000 bc13 	b.w	80098a6 <HAL_ADC_ConfigChannel+0x84a>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4618      	mov	r0, r3
 800908e:	f7ff fd11 	bl	8008ab4 <LL_ADC_REG_IsConversionOngoing>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	f040 83f3 	bne.w	8009880 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6818      	ldr	r0, [r3, #0]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	6859      	ldr	r1, [r3, #4]
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	f7ff fbcb 	bl	8008842 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7ff fcff 	bl	8008ab4 <LL_ADC_REG_IsConversionOngoing>
 80090b6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4618      	mov	r0, r3
 80090c0:	f7ff fd0b 	bl	8008ada <LL_ADC_INJ_IsConversionOngoing>
 80090c4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80090c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f040 81d9 	bne.w	8009484 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80090d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f040 81d4 	bne.w	8009484 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090e4:	d10f      	bne.n	8009106 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6818      	ldr	r0, [r3, #0]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2200      	movs	r2, #0
 80090f0:	4619      	mov	r1, r3
 80090f2:	f7ff fbd2 	bl	800889a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80090fe:	4618      	mov	r0, r3
 8009100:	f7ff fb79 	bl	80087f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8009104:	e00e      	b.n	8009124 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6818      	ldr	r0, [r3, #0]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	6819      	ldr	r1, [r3, #0]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	461a      	mov	r2, r3
 8009114:	f7ff fbc1 	bl	800889a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2100      	movs	r1, #0
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff fb69 	bl	80087f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	695a      	ldr	r2, [r3, #20]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	08db      	lsrs	r3, r3, #3
 8009130:	f003 0303 	and.w	r3, r3, #3
 8009134:	005b      	lsls	r3, r3, #1
 8009136:	fa02 f303 	lsl.w	r3, r2, r3
 800913a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	2b04      	cmp	r3, #4
 8009144:	d022      	beq.n	800918c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6818      	ldr	r0, [r3, #0]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	6919      	ldr	r1, [r3, #16]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009156:	f7ff fac3 	bl	80086e0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6818      	ldr	r0, [r3, #0]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	6919      	ldr	r1, [r3, #16]
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	461a      	mov	r2, r3
 8009168:	f7ff fb0f 	bl	800878a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6818      	ldr	r0, [r3, #0]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8009178:	2b01      	cmp	r3, #1
 800917a:	d102      	bne.n	8009182 <HAL_ADC_ConfigChannel+0x126>
 800917c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009180:	e000      	b.n	8009184 <HAL_ADC_ConfigChannel+0x128>
 8009182:	2300      	movs	r3, #0
 8009184:	461a      	mov	r2, r3
 8009186:	f7ff fb1b 	bl	80087c0 <LL_ADC_SetOffsetSaturation>
 800918a:	e17b      	b.n	8009484 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2100      	movs	r1, #0
 8009192:	4618      	mov	r0, r3
 8009194:	f7ff fac8 	bl	8008728 <LL_ADC_GetOffsetChannel>
 8009198:	4603      	mov	r3, r0
 800919a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10a      	bne.n	80091b8 <HAL_ADC_ConfigChannel+0x15c>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2100      	movs	r1, #0
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7ff fabd 	bl	8008728 <LL_ADC_GetOffsetChannel>
 80091ae:	4603      	mov	r3, r0
 80091b0:	0e9b      	lsrs	r3, r3, #26
 80091b2:	f003 021f 	and.w	r2, r3, #31
 80091b6:	e01e      	b.n	80091f6 <HAL_ADC_ConfigChannel+0x19a>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2100      	movs	r1, #0
 80091be:	4618      	mov	r0, r3
 80091c0:	f7ff fab2 	bl	8008728 <LL_ADC_GetOffsetChannel>
 80091c4:	4603      	mov	r3, r0
 80091c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80091ce:	fa93 f3a3 	rbit	r3, r3
 80091d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80091d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80091da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80091de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80091e6:	2320      	movs	r3, #32
 80091e8:	e004      	b.n	80091f4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80091ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80091ee:	fab3 f383 	clz	r3, r3
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d105      	bne.n	800920e <HAL_ADC_ConfigChannel+0x1b2>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	0e9b      	lsrs	r3, r3, #26
 8009208:	f003 031f 	and.w	r3, r3, #31
 800920c:	e018      	b.n	8009240 <HAL_ADC_ConfigChannel+0x1e4>
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009216:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800921a:	fa93 f3a3 	rbit	r3, r3
 800921e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8009222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009226:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800922a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8009232:	2320      	movs	r3, #32
 8009234:	e004      	b.n	8009240 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8009236:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800923a:	fab3 f383 	clz	r3, r3
 800923e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009240:	429a      	cmp	r2, r3
 8009242:	d106      	bne.n	8009252 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2200      	movs	r2, #0
 800924a:	2100      	movs	r1, #0
 800924c:	4618      	mov	r0, r3
 800924e:	f7ff fa81 	bl	8008754 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2101      	movs	r1, #1
 8009258:	4618      	mov	r0, r3
 800925a:	f7ff fa65 	bl	8008728 <LL_ADC_GetOffsetChannel>
 800925e:	4603      	mov	r3, r0
 8009260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10a      	bne.n	800927e <HAL_ADC_ConfigChannel+0x222>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2101      	movs	r1, #1
 800926e:	4618      	mov	r0, r3
 8009270:	f7ff fa5a 	bl	8008728 <LL_ADC_GetOffsetChannel>
 8009274:	4603      	mov	r3, r0
 8009276:	0e9b      	lsrs	r3, r3, #26
 8009278:	f003 021f 	and.w	r2, r3, #31
 800927c:	e01e      	b.n	80092bc <HAL_ADC_ConfigChannel+0x260>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2101      	movs	r1, #1
 8009284:	4618      	mov	r0, r3
 8009286:	f7ff fa4f 	bl	8008728 <LL_ADC_GetOffsetChannel>
 800928a:	4603      	mov	r3, r0
 800928c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009290:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009294:	fa93 f3a3 	rbit	r3, r3
 8009298:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800929c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80092a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80092a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d101      	bne.n	80092b0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80092ac:	2320      	movs	r3, #32
 80092ae:	e004      	b.n	80092ba <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80092b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80092b4:	fab3 f383 	clz	r3, r3
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d105      	bne.n	80092d4 <HAL_ADC_ConfigChannel+0x278>
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	0e9b      	lsrs	r3, r3, #26
 80092ce:	f003 031f 	and.w	r3, r3, #31
 80092d2:	e018      	b.n	8009306 <HAL_ADC_ConfigChannel+0x2aa>
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092e0:	fa93 f3a3 	rbit	r3, r3
 80092e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80092e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80092ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80092f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80092f8:	2320      	movs	r3, #32
 80092fa:	e004      	b.n	8009306 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80092fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009300:	fab3 f383 	clz	r3, r3
 8009304:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009306:	429a      	cmp	r2, r3
 8009308:	d106      	bne.n	8009318 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2200      	movs	r2, #0
 8009310:	2101      	movs	r1, #1
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff fa1e 	bl	8008754 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2102      	movs	r1, #2
 800931e:	4618      	mov	r0, r3
 8009320:	f7ff fa02 	bl	8008728 <LL_ADC_GetOffsetChannel>
 8009324:	4603      	mov	r3, r0
 8009326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10a      	bne.n	8009344 <HAL_ADC_ConfigChannel+0x2e8>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2102      	movs	r1, #2
 8009334:	4618      	mov	r0, r3
 8009336:	f7ff f9f7 	bl	8008728 <LL_ADC_GetOffsetChannel>
 800933a:	4603      	mov	r3, r0
 800933c:	0e9b      	lsrs	r3, r3, #26
 800933e:	f003 021f 	and.w	r2, r3, #31
 8009342:	e01e      	b.n	8009382 <HAL_ADC_ConfigChannel+0x326>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2102      	movs	r1, #2
 800934a:	4618      	mov	r0, r3
 800934c:	f7ff f9ec 	bl	8008728 <LL_ADC_GetOffsetChannel>
 8009350:	4603      	mov	r3, r0
 8009352:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009356:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800935a:	fa93 f3a3 	rbit	r3, r3
 800935e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8009362:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009366:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800936a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800936e:	2b00      	cmp	r3, #0
 8009370:	d101      	bne.n	8009376 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8009372:	2320      	movs	r3, #32
 8009374:	e004      	b.n	8009380 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8009376:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800937a:	fab3 f383 	clz	r3, r3
 800937e:	b2db      	uxtb	r3, r3
 8009380:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800938a:	2b00      	cmp	r3, #0
 800938c:	d105      	bne.n	800939a <HAL_ADC_ConfigChannel+0x33e>
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	0e9b      	lsrs	r3, r3, #26
 8009394:	f003 031f 	and.w	r3, r3, #31
 8009398:	e016      	b.n	80093c8 <HAL_ADC_ConfigChannel+0x36c>
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80093a6:	fa93 f3a3 	rbit	r3, r3
 80093aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80093ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80093ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80093b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80093ba:	2320      	movs	r3, #32
 80093bc:	e004      	b.n	80093c8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80093be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80093c2:	fab3 f383 	clz	r3, r3
 80093c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d106      	bne.n	80093da <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2200      	movs	r2, #0
 80093d2:	2102      	movs	r1, #2
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7ff f9bd 	bl	8008754 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2103      	movs	r1, #3
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7ff f9a1 	bl	8008728 <LL_ADC_GetOffsetChannel>
 80093e6:	4603      	mov	r3, r0
 80093e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10a      	bne.n	8009406 <HAL_ADC_ConfigChannel+0x3aa>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2103      	movs	r1, #3
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7ff f996 	bl	8008728 <LL_ADC_GetOffsetChannel>
 80093fc:	4603      	mov	r3, r0
 80093fe:	0e9b      	lsrs	r3, r3, #26
 8009400:	f003 021f 	and.w	r2, r3, #31
 8009404:	e017      	b.n	8009436 <HAL_ADC_ConfigChannel+0x3da>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2103      	movs	r1, #3
 800940c:	4618      	mov	r0, r3
 800940e:	f7ff f98b 	bl	8008728 <LL_ADC_GetOffsetChannel>
 8009412:	4603      	mov	r3, r0
 8009414:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009416:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009418:	fa93 f3a3 	rbit	r3, r3
 800941c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800941e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009420:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8009422:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009424:	2b00      	cmp	r3, #0
 8009426:	d101      	bne.n	800942c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8009428:	2320      	movs	r3, #32
 800942a:	e003      	b.n	8009434 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800942c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800942e:	fab3 f383 	clz	r3, r3
 8009432:	b2db      	uxtb	r3, r3
 8009434:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800943e:	2b00      	cmp	r3, #0
 8009440:	d105      	bne.n	800944e <HAL_ADC_ConfigChannel+0x3f2>
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	0e9b      	lsrs	r3, r3, #26
 8009448:	f003 031f 	and.w	r3, r3, #31
 800944c:	e011      	b.n	8009472 <HAL_ADC_ConfigChannel+0x416>
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009454:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009456:	fa93 f3a3 	rbit	r3, r3
 800945a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800945c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800945e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8009460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009462:	2b00      	cmp	r3, #0
 8009464:	d101      	bne.n	800946a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8009466:	2320      	movs	r3, #32
 8009468:	e003      	b.n	8009472 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800946a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800946c:	fab3 f383 	clz	r3, r3
 8009470:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009472:	429a      	cmp	r2, r3
 8009474:	d106      	bne.n	8009484 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2200      	movs	r2, #0
 800947c:	2103      	movs	r1, #3
 800947e:	4618      	mov	r0, r3
 8009480:	f7ff f968 	bl	8008754 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4618      	mov	r0, r3
 800948a:	f7ff fad9 	bl	8008a40 <LL_ADC_IsEnabled>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	f040 813d 	bne.w	8009710 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	6819      	ldr	r1, [r3, #0]
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	461a      	mov	r2, r3
 80094a4:	f7ff fa24 	bl	80088f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	4aa2      	ldr	r2, [pc, #648]	@ (8009738 <HAL_ADC_ConfigChannel+0x6dc>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	f040 812e 	bne.w	8009710 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10b      	bne.n	80094dc <HAL_ADC_ConfigChannel+0x480>
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	0e9b      	lsrs	r3, r3, #26
 80094ca:	3301      	adds	r3, #1
 80094cc:	f003 031f 	and.w	r3, r3, #31
 80094d0:	2b09      	cmp	r3, #9
 80094d2:	bf94      	ite	ls
 80094d4:	2301      	movls	r3, #1
 80094d6:	2300      	movhi	r3, #0
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	e019      	b.n	8009510 <HAL_ADC_ConfigChannel+0x4b4>
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094e4:	fa93 f3a3 	rbit	r3, r3
 80094e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80094ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80094ec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80094ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d101      	bne.n	80094f8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80094f4:	2320      	movs	r3, #32
 80094f6:	e003      	b.n	8009500 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80094f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094fa:	fab3 f383 	clz	r3, r3
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	3301      	adds	r3, #1
 8009502:	f003 031f 	and.w	r3, r3, #31
 8009506:	2b09      	cmp	r3, #9
 8009508:	bf94      	ite	ls
 800950a:	2301      	movls	r3, #1
 800950c:	2300      	movhi	r3, #0
 800950e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009510:	2b00      	cmp	r3, #0
 8009512:	d079      	beq.n	8009608 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800951c:	2b00      	cmp	r3, #0
 800951e:	d107      	bne.n	8009530 <HAL_ADC_ConfigChannel+0x4d4>
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	0e9b      	lsrs	r3, r3, #26
 8009526:	3301      	adds	r3, #1
 8009528:	069b      	lsls	r3, r3, #26
 800952a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800952e:	e015      	b.n	800955c <HAL_ADC_ConfigChannel+0x500>
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009538:	fa93 f3a3 	rbit	r3, r3
 800953c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800953e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009540:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8009542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009544:	2b00      	cmp	r3, #0
 8009546:	d101      	bne.n	800954c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8009548:	2320      	movs	r3, #32
 800954a:	e003      	b.n	8009554 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800954c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800954e:	fab3 f383 	clz	r3, r3
 8009552:	b2db      	uxtb	r3, r3
 8009554:	3301      	adds	r3, #1
 8009556:	069b      	lsls	r3, r3, #26
 8009558:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009564:	2b00      	cmp	r3, #0
 8009566:	d109      	bne.n	800957c <HAL_ADC_ConfigChannel+0x520>
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	0e9b      	lsrs	r3, r3, #26
 800956e:	3301      	adds	r3, #1
 8009570:	f003 031f 	and.w	r3, r3, #31
 8009574:	2101      	movs	r1, #1
 8009576:	fa01 f303 	lsl.w	r3, r1, r3
 800957a:	e017      	b.n	80095ac <HAL_ADC_ConfigChannel+0x550>
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009584:	fa93 f3a3 	rbit	r3, r3
 8009588:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800958a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800958c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800958e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009590:	2b00      	cmp	r3, #0
 8009592:	d101      	bne.n	8009598 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8009594:	2320      	movs	r3, #32
 8009596:	e003      	b.n	80095a0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8009598:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800959a:	fab3 f383 	clz	r3, r3
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	3301      	adds	r3, #1
 80095a2:	f003 031f 	and.w	r3, r3, #31
 80095a6:	2101      	movs	r1, #1
 80095a8:	fa01 f303 	lsl.w	r3, r1, r3
 80095ac:	ea42 0103 	orr.w	r1, r2, r3
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10a      	bne.n	80095d2 <HAL_ADC_ConfigChannel+0x576>
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	0e9b      	lsrs	r3, r3, #26
 80095c2:	3301      	adds	r3, #1
 80095c4:	f003 021f 	and.w	r2, r3, #31
 80095c8:	4613      	mov	r3, r2
 80095ca:	005b      	lsls	r3, r3, #1
 80095cc:	4413      	add	r3, r2
 80095ce:	051b      	lsls	r3, r3, #20
 80095d0:	e018      	b.n	8009604 <HAL_ADC_ConfigChannel+0x5a8>
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095da:	fa93 f3a3 	rbit	r3, r3
 80095de:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80095e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80095e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d101      	bne.n	80095ee <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80095ea:	2320      	movs	r3, #32
 80095ec:	e003      	b.n	80095f6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80095ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095f0:	fab3 f383 	clz	r3, r3
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	3301      	adds	r3, #1
 80095f8:	f003 021f 	and.w	r2, r3, #31
 80095fc:	4613      	mov	r3, r2
 80095fe:	005b      	lsls	r3, r3, #1
 8009600:	4413      	add	r3, r2
 8009602:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009604:	430b      	orrs	r3, r1
 8009606:	e07e      	b.n	8009706 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009610:	2b00      	cmp	r3, #0
 8009612:	d107      	bne.n	8009624 <HAL_ADC_ConfigChannel+0x5c8>
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	0e9b      	lsrs	r3, r3, #26
 800961a:	3301      	adds	r3, #1
 800961c:	069b      	lsls	r3, r3, #26
 800961e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009622:	e015      	b.n	8009650 <HAL_ADC_ConfigChannel+0x5f4>
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800962a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962c:	fa93 f3a3 	rbit	r3, r3
 8009630:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8009632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009634:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8009636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009638:	2b00      	cmp	r3, #0
 800963a:	d101      	bne.n	8009640 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800963c:	2320      	movs	r3, #32
 800963e:	e003      	b.n	8009648 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8009640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009642:	fab3 f383 	clz	r3, r3
 8009646:	b2db      	uxtb	r3, r3
 8009648:	3301      	adds	r3, #1
 800964a:	069b      	lsls	r3, r3, #26
 800964c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009658:	2b00      	cmp	r3, #0
 800965a:	d109      	bne.n	8009670 <HAL_ADC_ConfigChannel+0x614>
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	0e9b      	lsrs	r3, r3, #26
 8009662:	3301      	adds	r3, #1
 8009664:	f003 031f 	and.w	r3, r3, #31
 8009668:	2101      	movs	r1, #1
 800966a:	fa01 f303 	lsl.w	r3, r1, r3
 800966e:	e017      	b.n	80096a0 <HAL_ADC_ConfigChannel+0x644>
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009676:	6a3b      	ldr	r3, [r7, #32]
 8009678:	fa93 f3a3 	rbit	r3, r3
 800967c:	61fb      	str	r3, [r7, #28]
  return result;
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009684:	2b00      	cmp	r3, #0
 8009686:	d101      	bne.n	800968c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8009688:	2320      	movs	r3, #32
 800968a:	e003      	b.n	8009694 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800968c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968e:	fab3 f383 	clz	r3, r3
 8009692:	b2db      	uxtb	r3, r3
 8009694:	3301      	adds	r3, #1
 8009696:	f003 031f 	and.w	r3, r3, #31
 800969a:	2101      	movs	r1, #1
 800969c:	fa01 f303 	lsl.w	r3, r1, r3
 80096a0:	ea42 0103 	orr.w	r1, r2, r3
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10d      	bne.n	80096cc <HAL_ADC_ConfigChannel+0x670>
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	0e9b      	lsrs	r3, r3, #26
 80096b6:	3301      	adds	r3, #1
 80096b8:	f003 021f 	and.w	r2, r3, #31
 80096bc:	4613      	mov	r3, r2
 80096be:	005b      	lsls	r3, r3, #1
 80096c0:	4413      	add	r3, r2
 80096c2:	3b1e      	subs	r3, #30
 80096c4:	051b      	lsls	r3, r3, #20
 80096c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80096ca:	e01b      	b.n	8009704 <HAL_ADC_ConfigChannel+0x6a8>
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	fa93 f3a3 	rbit	r3, r3
 80096d8:	613b      	str	r3, [r7, #16]
  return result;
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80096e4:	2320      	movs	r3, #32
 80096e6:	e003      	b.n	80096f0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	fab3 f383 	clz	r3, r3
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	3301      	adds	r3, #1
 80096f2:	f003 021f 	and.w	r2, r3, #31
 80096f6:	4613      	mov	r3, r2
 80096f8:	005b      	lsls	r3, r3, #1
 80096fa:	4413      	add	r3, r2
 80096fc:	3b1e      	subs	r3, #30
 80096fe:	051b      	lsls	r3, r3, #20
 8009700:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009704:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800970a:	4619      	mov	r1, r3
 800970c:	f7ff f8c5 	bl	800889a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	4b09      	ldr	r3, [pc, #36]	@ (800973c <HAL_ADC_ConfigChannel+0x6e0>)
 8009716:	4013      	ands	r3, r2
 8009718:	2b00      	cmp	r3, #0
 800971a:	f000 80be 	beq.w	800989a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009726:	d004      	beq.n	8009732 <HAL_ADC_ConfigChannel+0x6d6>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a04      	ldr	r2, [pc, #16]	@ (8009740 <HAL_ADC_ConfigChannel+0x6e4>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d10a      	bne.n	8009748 <HAL_ADC_ConfigChannel+0x6ec>
 8009732:	4b04      	ldr	r3, [pc, #16]	@ (8009744 <HAL_ADC_ConfigChannel+0x6e8>)
 8009734:	e009      	b.n	800974a <HAL_ADC_ConfigChannel+0x6ee>
 8009736:	bf00      	nop
 8009738:	407f0000 	.word	0x407f0000
 800973c:	80080000 	.word	0x80080000
 8009740:	50000100 	.word	0x50000100
 8009744:	50000300 	.word	0x50000300
 8009748:	4b59      	ldr	r3, [pc, #356]	@ (80098b0 <HAL_ADC_ConfigChannel+0x854>)
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe ffba 	bl	80086c4 <LL_ADC_GetCommonPathInternalCh>
 8009750:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a56      	ldr	r2, [pc, #344]	@ (80098b4 <HAL_ADC_ConfigChannel+0x858>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d004      	beq.n	8009768 <HAL_ADC_ConfigChannel+0x70c>
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a55      	ldr	r2, [pc, #340]	@ (80098b8 <HAL_ADC_ConfigChannel+0x85c>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d13a      	bne.n	80097de <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800976c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d134      	bne.n	80097de <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800977c:	d005      	beq.n	800978a <HAL_ADC_ConfigChannel+0x72e>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a4e      	ldr	r2, [pc, #312]	@ (80098bc <HAL_ADC_ConfigChannel+0x860>)
 8009784:	4293      	cmp	r3, r2
 8009786:	f040 8085 	bne.w	8009894 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009792:	d004      	beq.n	800979e <HAL_ADC_ConfigChannel+0x742>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a49      	ldr	r2, [pc, #292]	@ (80098c0 <HAL_ADC_ConfigChannel+0x864>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d101      	bne.n	80097a2 <HAL_ADC_ConfigChannel+0x746>
 800979e:	4a49      	ldr	r2, [pc, #292]	@ (80098c4 <HAL_ADC_ConfigChannel+0x868>)
 80097a0:	e000      	b.n	80097a4 <HAL_ADC_ConfigChannel+0x748>
 80097a2:	4a43      	ldr	r2, [pc, #268]	@ (80098b0 <HAL_ADC_ConfigChannel+0x854>)
 80097a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80097a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80097ac:	4619      	mov	r1, r3
 80097ae:	4610      	mov	r0, r2
 80097b0:	f7fe ff75 	bl	800869e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80097b4:	4b44      	ldr	r3, [pc, #272]	@ (80098c8 <HAL_ADC_ConfigChannel+0x86c>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	099b      	lsrs	r3, r3, #6
 80097ba:	4a44      	ldr	r2, [pc, #272]	@ (80098cc <HAL_ADC_ConfigChannel+0x870>)
 80097bc:	fba2 2303 	umull	r2, r3, r2, r3
 80097c0:	099b      	lsrs	r3, r3, #6
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	4613      	mov	r3, r2
 80097c6:	005b      	lsls	r3, r3, #1
 80097c8:	4413      	add	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80097ce:	e002      	b.n	80097d6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	3b01      	subs	r3, #1
 80097d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1f9      	bne.n	80097d0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80097dc:	e05a      	b.n	8009894 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a3b      	ldr	r2, [pc, #236]	@ (80098d0 <HAL_ADC_ConfigChannel+0x874>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d125      	bne.n	8009834 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80097e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80097ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d11f      	bne.n	8009834 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a31      	ldr	r2, [pc, #196]	@ (80098c0 <HAL_ADC_ConfigChannel+0x864>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d104      	bne.n	8009808 <HAL_ADC_ConfigChannel+0x7ac>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a34      	ldr	r2, [pc, #208]	@ (80098d4 <HAL_ADC_ConfigChannel+0x878>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d047      	beq.n	8009898 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009810:	d004      	beq.n	800981c <HAL_ADC_ConfigChannel+0x7c0>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a2a      	ldr	r2, [pc, #168]	@ (80098c0 <HAL_ADC_ConfigChannel+0x864>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d101      	bne.n	8009820 <HAL_ADC_ConfigChannel+0x7c4>
 800981c:	4a29      	ldr	r2, [pc, #164]	@ (80098c4 <HAL_ADC_ConfigChannel+0x868>)
 800981e:	e000      	b.n	8009822 <HAL_ADC_ConfigChannel+0x7c6>
 8009820:	4a23      	ldr	r2, [pc, #140]	@ (80098b0 <HAL_ADC_ConfigChannel+0x854>)
 8009822:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800982a:	4619      	mov	r1, r3
 800982c:	4610      	mov	r0, r2
 800982e:	f7fe ff36 	bl	800869e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009832:	e031      	b.n	8009898 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a27      	ldr	r2, [pc, #156]	@ (80098d8 <HAL_ADC_ConfigChannel+0x87c>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d12d      	bne.n	800989a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800983e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009846:	2b00      	cmp	r3, #0
 8009848:	d127      	bne.n	800989a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a1c      	ldr	r2, [pc, #112]	@ (80098c0 <HAL_ADC_ConfigChannel+0x864>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d022      	beq.n	800989a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800985c:	d004      	beq.n	8009868 <HAL_ADC_ConfigChannel+0x80c>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a17      	ldr	r2, [pc, #92]	@ (80098c0 <HAL_ADC_ConfigChannel+0x864>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d101      	bne.n	800986c <HAL_ADC_ConfigChannel+0x810>
 8009868:	4a16      	ldr	r2, [pc, #88]	@ (80098c4 <HAL_ADC_ConfigChannel+0x868>)
 800986a:	e000      	b.n	800986e <HAL_ADC_ConfigChannel+0x812>
 800986c:	4a10      	ldr	r2, [pc, #64]	@ (80098b0 <HAL_ADC_ConfigChannel+0x854>)
 800986e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009872:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009876:	4619      	mov	r1, r3
 8009878:	4610      	mov	r0, r2
 800987a:	f7fe ff10 	bl	800869e <LL_ADC_SetCommonPathInternalCh>
 800987e:	e00c      	b.n	800989a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009884:	f043 0220 	orr.w	r2, r3, #32
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8009892:	e002      	b.n	800989a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009894:	bf00      	nop
 8009896:	e000      	b.n	800989a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009898:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80098a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	37d8      	adds	r7, #216	@ 0xd8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	50000700 	.word	0x50000700
 80098b4:	c3210000 	.word	0xc3210000
 80098b8:	90c00010 	.word	0x90c00010
 80098bc:	50000600 	.word	0x50000600
 80098c0:	50000100 	.word	0x50000100
 80098c4:	50000300 	.word	0x50000300
 80098c8:	20000130 	.word	0x20000130
 80098cc:	053e2d63 	.word	0x053e2d63
 80098d0:	c7520000 	.word	0xc7520000
 80098d4:	50000500 	.word	0x50000500
 80098d8:	cb840000 	.word	0xcb840000

080098dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80098e4:	2300      	movs	r3, #0
 80098e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7ff f8a7 	bl	8008a40 <LL_ADC_IsEnabled>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d176      	bne.n	80099e6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	689a      	ldr	r2, [r3, #8]
 80098fe:	4b3c      	ldr	r3, [pc, #240]	@ (80099f0 <ADC_Enable+0x114>)
 8009900:	4013      	ands	r3, r2
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00d      	beq.n	8009922 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800990a:	f043 0210 	orr.w	r2, r3, #16
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009916:	f043 0201 	orr.w	r2, r3, #1
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e062      	b.n	80099e8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4618      	mov	r0, r3
 8009928:	f7ff f862 	bl	80089f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009934:	d004      	beq.n	8009940 <ADC_Enable+0x64>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a2e      	ldr	r2, [pc, #184]	@ (80099f4 <ADC_Enable+0x118>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d101      	bne.n	8009944 <ADC_Enable+0x68>
 8009940:	4b2d      	ldr	r3, [pc, #180]	@ (80099f8 <ADC_Enable+0x11c>)
 8009942:	e000      	b.n	8009946 <ADC_Enable+0x6a>
 8009944:	4b2d      	ldr	r3, [pc, #180]	@ (80099fc <ADC_Enable+0x120>)
 8009946:	4618      	mov	r0, r3
 8009948:	f7fe febc 	bl	80086c4 <LL_ADC_GetCommonPathInternalCh>
 800994c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800994e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8009952:	2b00      	cmp	r3, #0
 8009954:	d013      	beq.n	800997e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009956:	4b2a      	ldr	r3, [pc, #168]	@ (8009a00 <ADC_Enable+0x124>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	099b      	lsrs	r3, r3, #6
 800995c:	4a29      	ldr	r2, [pc, #164]	@ (8009a04 <ADC_Enable+0x128>)
 800995e:	fba2 2303 	umull	r2, r3, r2, r3
 8009962:	099b      	lsrs	r3, r3, #6
 8009964:	1c5a      	adds	r2, r3, #1
 8009966:	4613      	mov	r3, r2
 8009968:	005b      	lsls	r3, r3, #1
 800996a:	4413      	add	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8009970:	e002      	b.n	8009978 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	3b01      	subs	r3, #1
 8009976:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1f9      	bne.n	8009972 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800997e:	f7fe fe6f 	bl	8008660 <HAL_GetTick>
 8009982:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009984:	e028      	b.n	80099d8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4618      	mov	r0, r3
 800998c:	f7ff f858 	bl	8008a40 <LL_ADC_IsEnabled>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d104      	bne.n	80099a0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4618      	mov	r0, r3
 800999c:	f7ff f828 	bl	80089f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80099a0:	f7fe fe5e 	bl	8008660 <HAL_GetTick>
 80099a4:	4602      	mov	r2, r0
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d914      	bls.n	80099d8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d00d      	beq.n	80099d8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099c0:	f043 0210 	orr.w	r2, r3, #16
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099cc:	f043 0201 	orr.w	r2, r3, #1
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	e007      	b.n	80099e8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d1cf      	bne.n	8009986 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	8000003f 	.word	0x8000003f
 80099f4:	50000100 	.word	0x50000100
 80099f8:	50000300 	.word	0x50000300
 80099fc:	50000700 	.word	0x50000700
 8009a00:	20000130 	.word	0x20000130
 8009a04:	053e2d63 	.word	0x053e2d63

08009a08 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7ff f826 	bl	8008a66 <LL_ADC_IsDisableOngoing>
 8009a1a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7ff f80d 	bl	8008a40 <LL_ADC_IsEnabled>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d047      	beq.n	8009abc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d144      	bne.n	8009abc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f003 030d 	and.w	r3, r3, #13
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d10c      	bne.n	8009a5a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7fe ffe7 	bl	8008a18 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2203      	movs	r2, #3
 8009a50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009a52:	f7fe fe05 	bl	8008660 <HAL_GetTick>
 8009a56:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009a58:	e029      	b.n	8009aae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a5e:	f043 0210 	orr.w	r2, r3, #16
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a6a:	f043 0201 	orr.w	r2, r3, #1
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e023      	b.n	8009abe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009a76:	f7fe fdf3 	bl	8008660 <HAL_GetTick>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d914      	bls.n	8009aae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00d      	beq.n	8009aae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a96:	f043 0210 	orr.w	r2, r3, #16
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009aa2:	f043 0201 	orr.w	r2, r3, #1
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e007      	b.n	8009abe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	f003 0301 	and.w	r3, r3, #1
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1dc      	bne.n	8009a76 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b084      	sub	sp, #16
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ad8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d14b      	bne.n	8009b78 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ae4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 0308 	and.w	r3, r3, #8
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d021      	beq.n	8009b3e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fe fe8c 	bl	800881c <LL_ADC_REG_IsTriggerSourceSWStart>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d032      	beq.n	8009b70 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d12b      	bne.n	8009b70 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d11f      	bne.n	8009b70 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b34:	f043 0201 	orr.w	r2, r3, #1
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009b3c:	e018      	b.n	8009b70 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	f003 0302 	and.w	r3, r3, #2
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d111      	bne.n	8009b70 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d105      	bne.n	8009b70 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b68:	f043 0201 	orr.w	r2, r3, #1
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f7ff fa55 	bl	8009020 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009b76:	e00e      	b.n	8009b96 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b7c:	f003 0310 	and.w	r3, r3, #16
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d003      	beq.n	8009b8c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f7ff fa5f 	bl	8009048 <HAL_ADC_ErrorCallback>
}
 8009b8a:	e004      	b.n	8009b96 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	4798      	blx	r3
}
 8009b96:	bf00      	nop
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b084      	sub	sp, #16
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f7ff fa41 	bl	8009034 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009bb2:	bf00      	nop
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b084      	sub	sp, #16
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bcc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bd8:	f043 0204 	orr.w	r2, r3, #4
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f7ff fa31 	bl	8009048 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009be6:	bf00      	nop
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <LL_ADC_IsEnabled>:
{
 8009bee:	b480      	push	{r7}
 8009bf0:	b083      	sub	sp, #12
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d101      	bne.n	8009c06 <LL_ADC_IsEnabled+0x18>
 8009c02:	2301      	movs	r3, #1
 8009c04:	e000      	b.n	8009c08 <LL_ADC_IsEnabled+0x1a>
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <LL_ADC_StartCalibration>:
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8009c26:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8009c30:	4313      	orrs	r3, r2
 8009c32:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	609a      	str	r2, [r3, #8]
}
 8009c3a:	bf00      	nop
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr

08009c46 <LL_ADC_IsCalibrationOnGoing>:
{
 8009c46:	b480      	push	{r7}
 8009c48:	b083      	sub	sp, #12
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c5a:	d101      	bne.n	8009c60 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e000      	b.n	8009c62 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr

08009c6e <LL_ADC_REG_IsConversionOngoing>:
{
 8009c6e:	b480      	push	{r7}
 8009c70:	b083      	sub	sp, #12
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	f003 0304 	and.w	r3, r3, #4
 8009c7e:	2b04      	cmp	r3, #4
 8009c80:	d101      	bne.n	8009c86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009c82:	2301      	movs	r3, #1
 8009c84:	e000      	b.n	8009c88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d101      	bne.n	8009cb0 <HAL_ADCEx_Calibration_Start+0x1c>
 8009cac:	2302      	movs	r3, #2
 8009cae:	e04d      	b.n	8009d4c <HAL_ADCEx_Calibration_Start+0xb8>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f7ff fea5 	bl	8009a08 <ADC_Disable>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8009cc2:	7bfb      	ldrb	r3, [r7, #15]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d136      	bne.n	8009d36 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ccc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8009cd0:	f023 0302 	bic.w	r3, r3, #2
 8009cd4:	f043 0202 	orr.w	r2, r3, #2
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7ff ff96 	bl	8009c14 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009ce8:	e014      	b.n	8009d14 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	3301      	adds	r3, #1
 8009cee:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	4a18      	ldr	r2, [pc, #96]	@ (8009d54 <HAL_ADCEx_Calibration_Start+0xc0>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d90d      	bls.n	8009d14 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009cfc:	f023 0312 	bic.w	r3, r3, #18
 8009d00:	f043 0210 	orr.w	r2, r3, #16
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e01b      	b.n	8009d4c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7ff ff94 	bl	8009c46 <LL_ADC_IsCalibrationOnGoing>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1e2      	bne.n	8009cea <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d28:	f023 0303 	bic.w	r3, r3, #3
 8009d2c:	f043 0201 	orr.w	r2, r3, #1
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009d34:	e005      	b.n	8009d42 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d3a:	f043 0210 	orr.w	r2, r3, #16
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	0004de01 	.word	0x0004de01

08009d58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8009d58:	b590      	push	{r4, r7, lr}
 8009d5a:	b0a1      	sub	sp, #132	@ 0x84
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d101      	bne.n	8009d76 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009d72:	2302      	movs	r3, #2
 8009d74:	e0e7      	b.n	8009f46 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8009d7e:	2300      	movs	r3, #0
 8009d80:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8009d82:	2300      	movs	r3, #0
 8009d84:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d8e:	d102      	bne.n	8009d96 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009d90:	4b6f      	ldr	r3, [pc, #444]	@ (8009f50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009d92:	60bb      	str	r3, [r7, #8]
 8009d94:	e009      	b.n	8009daa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a6e      	ldr	r2, [pc, #440]	@ (8009f54 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d102      	bne.n	8009da6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8009da0:	4b6d      	ldr	r3, [pc, #436]	@ (8009f58 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8009da2:	60bb      	str	r3, [r7, #8]
 8009da4:	e001      	b.n	8009daa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8009da6:	2300      	movs	r3, #0
 8009da8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10b      	bne.n	8009dc8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009db4:	f043 0220 	orr.w	r2, r3, #32
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e0be      	b.n	8009f46 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7ff ff4f 	bl	8009c6e <LL_ADC_REG_IsConversionOngoing>
 8009dd0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7ff ff49 	bl	8009c6e <LL_ADC_REG_IsConversionOngoing>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f040 80a0 	bne.w	8009f24 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8009de4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f040 809c 	bne.w	8009f24 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009df4:	d004      	beq.n	8009e00 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a55      	ldr	r2, [pc, #340]	@ (8009f50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d101      	bne.n	8009e04 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8009e00:	4b56      	ldr	r3, [pc, #344]	@ (8009f5c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009e02:	e000      	b.n	8009e06 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8009e04:	4b56      	ldr	r3, [pc, #344]	@ (8009f60 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8009e06:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d04b      	beq.n	8009ea8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009e10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	6859      	ldr	r1, [r3, #4]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009e22:	035b      	lsls	r3, r3, #13
 8009e24:	430b      	orrs	r3, r1
 8009e26:	431a      	orrs	r2, r3
 8009e28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e2a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e34:	d004      	beq.n	8009e40 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a45      	ldr	r2, [pc, #276]	@ (8009f50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d10f      	bne.n	8009e60 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8009e40:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8009e44:	f7ff fed3 	bl	8009bee <LL_ADC_IsEnabled>
 8009e48:	4604      	mov	r4, r0
 8009e4a:	4841      	ldr	r0, [pc, #260]	@ (8009f50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009e4c:	f7ff fecf 	bl	8009bee <LL_ADC_IsEnabled>
 8009e50:	4603      	mov	r3, r0
 8009e52:	4323      	orrs	r3, r4
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	bf0c      	ite	eq
 8009e58:	2301      	moveq	r3, #1
 8009e5a:	2300      	movne	r3, #0
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	e012      	b.n	8009e86 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8009e60:	483c      	ldr	r0, [pc, #240]	@ (8009f54 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009e62:	f7ff fec4 	bl	8009bee <LL_ADC_IsEnabled>
 8009e66:	4604      	mov	r4, r0
 8009e68:	483b      	ldr	r0, [pc, #236]	@ (8009f58 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8009e6a:	f7ff fec0 	bl	8009bee <LL_ADC_IsEnabled>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	431c      	orrs	r4, r3
 8009e72:	483c      	ldr	r0, [pc, #240]	@ (8009f64 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8009e74:	f7ff febb 	bl	8009bee <LL_ADC_IsEnabled>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	4323      	orrs	r3, r4
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	bf0c      	ite	eq
 8009e80:	2301      	moveq	r3, #1
 8009e82:	2300      	movne	r3, #0
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d056      	beq.n	8009f38 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009e8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8009e92:	f023 030f 	bic.w	r3, r3, #15
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	6811      	ldr	r1, [r2, #0]
 8009e9a:	683a      	ldr	r2, [r7, #0]
 8009e9c:	6892      	ldr	r2, [r2, #8]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	431a      	orrs	r2, r3
 8009ea2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ea4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009ea6:	e047      	b.n	8009f38 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009ea8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009eb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009eb2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ebc:	d004      	beq.n	8009ec8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a23      	ldr	r2, [pc, #140]	@ (8009f50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d10f      	bne.n	8009ee8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8009ec8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8009ecc:	f7ff fe8f 	bl	8009bee <LL_ADC_IsEnabled>
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	481f      	ldr	r0, [pc, #124]	@ (8009f50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009ed4:	f7ff fe8b 	bl	8009bee <LL_ADC_IsEnabled>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	4323      	orrs	r3, r4
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	bf0c      	ite	eq
 8009ee0:	2301      	moveq	r3, #1
 8009ee2:	2300      	movne	r3, #0
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	e012      	b.n	8009f0e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8009ee8:	481a      	ldr	r0, [pc, #104]	@ (8009f54 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009eea:	f7ff fe80 	bl	8009bee <LL_ADC_IsEnabled>
 8009eee:	4604      	mov	r4, r0
 8009ef0:	4819      	ldr	r0, [pc, #100]	@ (8009f58 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8009ef2:	f7ff fe7c 	bl	8009bee <LL_ADC_IsEnabled>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	431c      	orrs	r4, r3
 8009efa:	481a      	ldr	r0, [pc, #104]	@ (8009f64 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8009efc:	f7ff fe77 	bl	8009bee <LL_ADC_IsEnabled>
 8009f00:	4603      	mov	r3, r0
 8009f02:	4323      	orrs	r3, r4
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	bf0c      	ite	eq
 8009f08:	2301      	moveq	r3, #1
 8009f0a:	2300      	movne	r3, #0
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d012      	beq.n	8009f38 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009f12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8009f1a:	f023 030f 	bic.w	r3, r3, #15
 8009f1e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009f20:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009f22:	e009      	b.n	8009f38 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f28:	f043 0220 	orr.w	r2, r3, #32
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8009f36:	e000      	b.n	8009f3a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009f38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8009f42:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3784      	adds	r7, #132	@ 0x84
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd90      	pop	{r4, r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	50000100 	.word	0x50000100
 8009f54:	50000400 	.word	0x50000400
 8009f58:	50000500 	.word	0x50000500
 8009f5c:	50000300 	.word	0x50000300
 8009f60:	50000700 	.word	0x50000700
 8009f64:	50000600 	.word	0x50000600

08009f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f003 0307 	and.w	r3, r3, #7
 8009f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009f78:	4b0c      	ldr	r3, [pc, #48]	@ (8009fac <__NVIC_SetPriorityGrouping+0x44>)
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009f84:	4013      	ands	r3, r2
 8009f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009f90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009f9a:	4a04      	ldr	r2, [pc, #16]	@ (8009fac <__NVIC_SetPriorityGrouping+0x44>)
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	60d3      	str	r3, [r2, #12]
}
 8009fa0:	bf00      	nop
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	e000ed00 	.word	0xe000ed00

08009fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009fb4:	4b04      	ldr	r3, [pc, #16]	@ (8009fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	0a1b      	lsrs	r3, r3, #8
 8009fba:	f003 0307 	and.w	r3, r3, #7
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	e000ed00 	.word	0xe000ed00

08009fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	db0b      	blt.n	8009ff6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009fde:	79fb      	ldrb	r3, [r7, #7]
 8009fe0:	f003 021f 	and.w	r2, r3, #31
 8009fe4:	4907      	ldr	r1, [pc, #28]	@ (800a004 <__NVIC_EnableIRQ+0x38>)
 8009fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fea:	095b      	lsrs	r3, r3, #5
 8009fec:	2001      	movs	r0, #1
 8009fee:	fa00 f202 	lsl.w	r2, r0, r2
 8009ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009ff6:	bf00      	nop
 8009ff8:	370c      	adds	r7, #12
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	e000e100 	.word	0xe000e100

0800a008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	4603      	mov	r3, r0
 800a010:	6039      	str	r1, [r7, #0]
 800a012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	db0a      	blt.n	800a032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	490c      	ldr	r1, [pc, #48]	@ (800a054 <__NVIC_SetPriority+0x4c>)
 800a022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a026:	0112      	lsls	r2, r2, #4
 800a028:	b2d2      	uxtb	r2, r2
 800a02a:	440b      	add	r3, r1
 800a02c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a030:	e00a      	b.n	800a048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	b2da      	uxtb	r2, r3
 800a036:	4908      	ldr	r1, [pc, #32]	@ (800a058 <__NVIC_SetPriority+0x50>)
 800a038:	79fb      	ldrb	r3, [r7, #7]
 800a03a:	f003 030f 	and.w	r3, r3, #15
 800a03e:	3b04      	subs	r3, #4
 800a040:	0112      	lsls	r2, r2, #4
 800a042:	b2d2      	uxtb	r2, r2
 800a044:	440b      	add	r3, r1
 800a046:	761a      	strb	r2, [r3, #24]
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr
 800a054:	e000e100 	.word	0xe000e100
 800a058:	e000ed00 	.word	0xe000ed00

0800a05c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b089      	sub	sp, #36	@ 0x24
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f003 0307 	and.w	r3, r3, #7
 800a06e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	f1c3 0307 	rsb	r3, r3, #7
 800a076:	2b04      	cmp	r3, #4
 800a078:	bf28      	it	cs
 800a07a:	2304      	movcs	r3, #4
 800a07c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	3304      	adds	r3, #4
 800a082:	2b06      	cmp	r3, #6
 800a084:	d902      	bls.n	800a08c <NVIC_EncodePriority+0x30>
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	3b03      	subs	r3, #3
 800a08a:	e000      	b.n	800a08e <NVIC_EncodePriority+0x32>
 800a08c:	2300      	movs	r3, #0
 800a08e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a090:	f04f 32ff 	mov.w	r2, #4294967295
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	fa02 f303 	lsl.w	r3, r2, r3
 800a09a:	43da      	mvns	r2, r3
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	401a      	ands	r2, r3
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a0a4:	f04f 31ff 	mov.w	r1, #4294967295
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ae:	43d9      	mvns	r1, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0b4:	4313      	orrs	r3, r2
         );
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3724      	adds	r7, #36	@ 0x24
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
	...

0800a0c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a0d4:	d301      	bcc.n	800a0da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e00f      	b.n	800a0fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a0da:	4a0a      	ldr	r2, [pc, #40]	@ (800a104 <SysTick_Config+0x40>)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a0e2:	210f      	movs	r1, #15
 800a0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e8:	f7ff ff8e 	bl	800a008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a0ec:	4b05      	ldr	r3, [pc, #20]	@ (800a104 <SysTick_Config+0x40>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a0f2:	4b04      	ldr	r3, [pc, #16]	@ (800a104 <SysTick_Config+0x40>)
 800a0f4:	2207      	movs	r2, #7
 800a0f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	e000e010 	.word	0xe000e010

0800a108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7ff ff29 	bl	8009f68 <__NVIC_SetPriorityGrouping>
}
 800a116:	bf00      	nop
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b086      	sub	sp, #24
 800a122:	af00      	add	r7, sp, #0
 800a124:	4603      	mov	r3, r0
 800a126:	60b9      	str	r1, [r7, #8]
 800a128:	607a      	str	r2, [r7, #4]
 800a12a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a12c:	f7ff ff40 	bl	8009fb0 <__NVIC_GetPriorityGrouping>
 800a130:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	68b9      	ldr	r1, [r7, #8]
 800a136:	6978      	ldr	r0, [r7, #20]
 800a138:	f7ff ff90 	bl	800a05c <NVIC_EncodePriority>
 800a13c:	4602      	mov	r2, r0
 800a13e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a142:	4611      	mov	r1, r2
 800a144:	4618      	mov	r0, r3
 800a146:	f7ff ff5f 	bl	800a008 <__NVIC_SetPriority>
}
 800a14a:	bf00      	nop
 800a14c:	3718      	adds	r7, #24
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b082      	sub	sp, #8
 800a156:	af00      	add	r7, sp, #0
 800a158:	4603      	mov	r3, r0
 800a15a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a15c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a160:	4618      	mov	r0, r3
 800a162:	f7ff ff33 	bl	8009fcc <__NVIC_EnableIRQ>
}
 800a166:	bf00      	nop
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b082      	sub	sp, #8
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f7ff ffa4 	bl	800a0c4 <SysTick_Config>
 800a17c:	4603      	mov	r3, r0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3708      	adds	r7, #8
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
	...

0800a188 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e08d      	b.n	800a2b6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	4b47      	ldr	r3, [pc, #284]	@ (800a2c0 <HAL_DMA_Init+0x138>)
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d80f      	bhi.n	800a1c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	4b45      	ldr	r3, [pc, #276]	@ (800a2c4 <HAL_DMA_Init+0x13c>)
 800a1ae:	4413      	add	r3, r2
 800a1b0:	4a45      	ldr	r2, [pc, #276]	@ (800a2c8 <HAL_DMA_Init+0x140>)
 800a1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b6:	091b      	lsrs	r3, r3, #4
 800a1b8:	009a      	lsls	r2, r3, #2
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a42      	ldr	r2, [pc, #264]	@ (800a2cc <HAL_DMA_Init+0x144>)
 800a1c2:	641a      	str	r2, [r3, #64]	@ 0x40
 800a1c4:	e00e      	b.n	800a1e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	4b40      	ldr	r3, [pc, #256]	@ (800a2d0 <HAL_DMA_Init+0x148>)
 800a1ce:	4413      	add	r3, r2
 800a1d0:	4a3d      	ldr	r2, [pc, #244]	@ (800a2c8 <HAL_DMA_Init+0x140>)
 800a1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1d6:	091b      	lsrs	r3, r3, #4
 800a1d8:	009a      	lsls	r2, r3, #2
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a3c      	ldr	r2, [pc, #240]	@ (800a2d4 <HAL_DMA_Init+0x14c>)
 800a1e2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a1fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a208:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a214:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a220:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 fa76 	bl	800a728 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a244:	d102      	bne.n	800a24c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685a      	ldr	r2, [r3, #4]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a254:	b2d2      	uxtb	r2, r2
 800a256:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a260:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d010      	beq.n	800a28c <HAL_DMA_Init+0x104>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	2b04      	cmp	r3, #4
 800a270:	d80c      	bhi.n	800a28c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fa96 	bl	800a7a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a27c:	2200      	movs	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a288:	605a      	str	r2, [r3, #4]
 800a28a:	e008      	b.n	800a29e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	40020407 	.word	0x40020407
 800a2c4:	bffdfff8 	.word	0xbffdfff8
 800a2c8:	cccccccd 	.word	0xcccccccd
 800a2cc:	40020000 	.word	0x40020000
 800a2d0:	bffdfbf8 	.word	0xbffdfbf8
 800a2d4:	40020400 	.word	0x40020400

0800a2d8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d101      	bne.n	800a2f8 <HAL_DMA_Start_IT+0x20>
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	e066      	b.n	800a3c6 <HAL_DMA_Start_IT+0xee>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d155      	bne.n	800a3b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2202      	movs	r2, #2
 800a310:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f022 0201 	bic.w	r2, r2, #1
 800a328:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	68b9      	ldr	r1, [r7, #8]
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f000 f9bb 	bl	800a6ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d008      	beq.n	800a350 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f042 020e 	orr.w	r2, r2, #14
 800a34c:	601a      	str	r2, [r3, #0]
 800a34e:	e00f      	b.n	800a370 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f022 0204 	bic.w	r2, r2, #4
 800a35e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f042 020a 	orr.w	r2, r2, #10
 800a36e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d007      	beq.n	800a38e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a388:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a38c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a392:	2b00      	cmp	r3, #0
 800a394:	d007      	beq.n	800a3a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a3a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f042 0201 	orr.w	r2, r2, #1
 800a3b4:	601a      	str	r2, [r3, #0]
 800a3b6:	e005      	b.n	800a3c4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a3c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3718      	adds	r7, #24
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b085      	sub	sp, #20
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d005      	beq.n	800a3f2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2204      	movs	r2, #4
 800a3ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	73fb      	strb	r3, [r7, #15]
 800a3f0:	e037      	b.n	800a462 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f022 020e 	bic.w	r2, r2, #14
 800a400:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a40c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a410:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f022 0201 	bic.w	r2, r2, #1
 800a420:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a426:	f003 021f 	and.w	r2, r3, #31
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a42e:	2101      	movs	r1, #1
 800a430:	fa01 f202 	lsl.w	r2, r1, r2
 800a434:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a43e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00c      	beq.n	800a462 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a452:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a456:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a460:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800a472:	7bfb      	ldrb	r3, [r7, #15]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a488:	2300      	movs	r3, #0
 800a48a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a492:	b2db      	uxtb	r3, r3
 800a494:	2b02      	cmp	r3, #2
 800a496:	d00d      	beq.n	800a4b4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2204      	movs	r2, #4
 800a49c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	73fb      	strb	r3, [r7, #15]
 800a4b2:	e047      	b.n	800a544 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f022 020e 	bic.w	r2, r2, #14
 800a4c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f022 0201 	bic.w	r2, r2, #1
 800a4d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a4e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4e8:	f003 021f 	and.w	r2, r3, #31
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4f0:	2101      	movs	r1, #1
 800a4f2:	fa01 f202 	lsl.w	r2, r1, r2
 800a4f6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a500:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00c      	beq.n	800a524 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a514:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a518:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a522:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d003      	beq.n	800a544 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	4798      	blx	r3
    }
  }
  return status;
 800a544:	7bfb      	ldrb	r3, [r7, #15]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b084      	sub	sp, #16
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a56a:	f003 031f 	and.w	r3, r3, #31
 800a56e:	2204      	movs	r2, #4
 800a570:	409a      	lsls	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	4013      	ands	r3, r2
 800a576:	2b00      	cmp	r3, #0
 800a578:	d026      	beq.n	800a5c8 <HAL_DMA_IRQHandler+0x7a>
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	f003 0304 	and.w	r3, r3, #4
 800a580:	2b00      	cmp	r3, #0
 800a582:	d021      	beq.n	800a5c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f003 0320 	and.w	r3, r3, #32
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d107      	bne.n	800a5a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f022 0204 	bic.w	r2, r2, #4
 800a5a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5a6:	f003 021f 	and.w	r2, r3, #31
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ae:	2104      	movs	r1, #4
 800a5b0:	fa01 f202 	lsl.w	r2, r1, r2
 800a5b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d071      	beq.n	800a6a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a5c6:	e06c      	b.n	800a6a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5cc:	f003 031f 	and.w	r3, r3, #31
 800a5d0:	2202      	movs	r2, #2
 800a5d2:	409a      	lsls	r2, r3
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d02e      	beq.n	800a63a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	f003 0302 	and.w	r3, r3, #2
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d029      	beq.n	800a63a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 0320 	and.w	r3, r3, #32
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10b      	bne.n	800a60c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f022 020a 	bic.w	r2, r2, #10
 800a602:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a610:	f003 021f 	and.w	r2, r3, #31
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a618:	2102      	movs	r1, #2
 800a61a:	fa01 f202 	lsl.w	r2, r1, r2
 800a61e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d038      	beq.n	800a6a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a638:	e033      	b.n	800a6a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a63e:	f003 031f 	and.w	r3, r3, #31
 800a642:	2208      	movs	r2, #8
 800a644:	409a      	lsls	r2, r3
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	4013      	ands	r3, r2
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d02a      	beq.n	800a6a4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	f003 0308 	and.w	r3, r3, #8
 800a654:	2b00      	cmp	r3, #0
 800a656:	d025      	beq.n	800a6a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f022 020e 	bic.w	r2, r2, #14
 800a666:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a66c:	f003 021f 	and.w	r2, r3, #31
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a674:	2101      	movs	r1, #1
 800a676:	fa01 f202 	lsl.w	r2, r1, r2
 800a67a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a696:	2b00      	cmp	r3, #0
 800a698:	d004      	beq.n	800a6a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a6a2:	bf00      	nop
 800a6a4:	bf00      	nop
}
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
 800a6b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a6c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d004      	beq.n	800a6d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800a6d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6da:	f003 021f 	and.w	r2, r3, #31
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e2:	2101      	movs	r1, #1
 800a6e4:	fa01 f202 	lsl.w	r2, r1, r2
 800a6e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	2b10      	cmp	r3, #16
 800a6f8:	d108      	bne.n	800a70c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a70a:	e007      	b.n	800a71c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	60da      	str	r2, [r3, #12]
}
 800a71c:	bf00      	nop
 800a71e:	3714      	adds	r7, #20
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a728:	b480      	push	{r7}
 800a72a:	b087      	sub	sp, #28
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	461a      	mov	r2, r3
 800a736:	4b16      	ldr	r3, [pc, #88]	@ (800a790 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a738:	429a      	cmp	r2, r3
 800a73a:	d802      	bhi.n	800a742 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a73c:	4b15      	ldr	r3, [pc, #84]	@ (800a794 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a73e:	617b      	str	r3, [r7, #20]
 800a740:	e001      	b.n	800a746 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a742:	4b15      	ldr	r3, [pc, #84]	@ (800a798 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a744:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	3b08      	subs	r3, #8
 800a752:	4a12      	ldr	r2, [pc, #72]	@ (800a79c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a754:	fba2 2303 	umull	r2, r3, r2, r3
 800a758:	091b      	lsrs	r3, r3, #4
 800a75a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a760:	089b      	lsrs	r3, r3, #2
 800a762:	009a      	lsls	r2, r3, #2
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	4413      	add	r3, r2
 800a768:	461a      	mov	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a0b      	ldr	r2, [pc, #44]	@ (800a7a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a772:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f003 031f 	and.w	r3, r3, #31
 800a77a:	2201      	movs	r2, #1
 800a77c:	409a      	lsls	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a782:	bf00      	nop
 800a784:	371c      	adds	r7, #28
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	40020407 	.word	0x40020407
 800a794:	40020800 	.word	0x40020800
 800a798:	40020820 	.word	0x40020820
 800a79c:	cccccccd 	.word	0xcccccccd
 800a7a0:	40020880 	.word	0x40020880

0800a7a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a7e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a7b8:	4413      	add	r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	461a      	mov	r2, r3
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a08      	ldr	r2, [pc, #32]	@ (800a7e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a7c6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	f003 031f 	and.w	r3, r3, #31
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	409a      	lsls	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800a7d8:	bf00      	nop
 800a7da:	3714      	adds	r7, #20
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	1000823f 	.word	0x1000823f
 800a7e8:	40020940 	.word	0x40020940

0800a7ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b087      	sub	sp, #28
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a7fa:	e15a      	b.n	800aab2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	2101      	movs	r1, #1
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	fa01 f303 	lsl.w	r3, r1, r3
 800a808:	4013      	ands	r3, r2
 800a80a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f000 814c 	beq.w	800aaac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	f003 0303 	and.w	r3, r3, #3
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d005      	beq.n	800a82c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d130      	bne.n	800a88e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	005b      	lsls	r3, r3, #1
 800a836:	2203      	movs	r2, #3
 800a838:	fa02 f303 	lsl.w	r3, r2, r3
 800a83c:	43db      	mvns	r3, r3
 800a83e:	693a      	ldr	r2, [r7, #16]
 800a840:	4013      	ands	r3, r2
 800a842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	68da      	ldr	r2, [r3, #12]
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	005b      	lsls	r3, r3, #1
 800a84c:	fa02 f303 	lsl.w	r3, r2, r3
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	4313      	orrs	r3, r2
 800a854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a862:	2201      	movs	r2, #1
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	fa02 f303 	lsl.w	r3, r2, r3
 800a86a:	43db      	mvns	r3, r3
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	4013      	ands	r3, r2
 800a870:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	091b      	lsrs	r3, r3, #4
 800a878:	f003 0201 	and.w	r2, r3, #1
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	fa02 f303 	lsl.w	r3, r2, r3
 800a882:	693a      	ldr	r2, [r7, #16]
 800a884:	4313      	orrs	r3, r2
 800a886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	f003 0303 	and.w	r3, r3, #3
 800a896:	2b03      	cmp	r3, #3
 800a898:	d017      	beq.n	800a8ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	005b      	lsls	r3, r3, #1
 800a8a4:	2203      	movs	r2, #3
 800a8a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8aa:	43db      	mvns	r3, r3
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	689a      	ldr	r2, [r3, #8]
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	005b      	lsls	r3, r3, #1
 800a8ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a8be:	693a      	ldr	r2, [r7, #16]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	f003 0303 	and.w	r3, r3, #3
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	d123      	bne.n	800a91e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	08da      	lsrs	r2, r3, #3
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	3208      	adds	r2, #8
 800a8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	f003 0307 	and.w	r3, r3, #7
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	220f      	movs	r2, #15
 800a8ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f2:	43db      	mvns	r3, r3
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	4013      	ands	r3, r2
 800a8f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	691a      	ldr	r2, [r3, #16]
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f003 0307 	and.w	r3, r3, #7
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	fa02 f303 	lsl.w	r3, r2, r3
 800a90a:	693a      	ldr	r2, [r7, #16]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	08da      	lsrs	r2, r3, #3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	3208      	adds	r2, #8
 800a918:	6939      	ldr	r1, [r7, #16]
 800a91a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	005b      	lsls	r3, r3, #1
 800a928:	2203      	movs	r2, #3
 800a92a:	fa02 f303 	lsl.w	r3, r2, r3
 800a92e:	43db      	mvns	r3, r3
 800a930:	693a      	ldr	r2, [r7, #16]
 800a932:	4013      	ands	r3, r2
 800a934:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	f003 0203 	and.w	r2, r3, #3
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	005b      	lsls	r3, r3, #1
 800a942:	fa02 f303 	lsl.w	r3, r2, r3
 800a946:	693a      	ldr	r2, [r7, #16]
 800a948:	4313      	orrs	r3, r2
 800a94a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	f000 80a6 	beq.w	800aaac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a960:	4b5b      	ldr	r3, [pc, #364]	@ (800aad0 <HAL_GPIO_Init+0x2e4>)
 800a962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a964:	4a5a      	ldr	r2, [pc, #360]	@ (800aad0 <HAL_GPIO_Init+0x2e4>)
 800a966:	f043 0301 	orr.w	r3, r3, #1
 800a96a:	6613      	str	r3, [r2, #96]	@ 0x60
 800a96c:	4b58      	ldr	r3, [pc, #352]	@ (800aad0 <HAL_GPIO_Init+0x2e4>)
 800a96e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a970:	f003 0301 	and.w	r3, r3, #1
 800a974:	60bb      	str	r3, [r7, #8]
 800a976:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a978:	4a56      	ldr	r2, [pc, #344]	@ (800aad4 <HAL_GPIO_Init+0x2e8>)
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	089b      	lsrs	r3, r3, #2
 800a97e:	3302      	adds	r3, #2
 800a980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a984:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	f003 0303 	and.w	r3, r3, #3
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	220f      	movs	r2, #15
 800a990:	fa02 f303 	lsl.w	r3, r2, r3
 800a994:	43db      	mvns	r3, r3
 800a996:	693a      	ldr	r2, [r7, #16]
 800a998:	4013      	ands	r3, r2
 800a99a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a9a2:	d01f      	beq.n	800a9e4 <HAL_GPIO_Init+0x1f8>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a4c      	ldr	r2, [pc, #304]	@ (800aad8 <HAL_GPIO_Init+0x2ec>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d019      	beq.n	800a9e0 <HAL_GPIO_Init+0x1f4>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a4b      	ldr	r2, [pc, #300]	@ (800aadc <HAL_GPIO_Init+0x2f0>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d013      	beq.n	800a9dc <HAL_GPIO_Init+0x1f0>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a4a      	ldr	r2, [pc, #296]	@ (800aae0 <HAL_GPIO_Init+0x2f4>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d00d      	beq.n	800a9d8 <HAL_GPIO_Init+0x1ec>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a49      	ldr	r2, [pc, #292]	@ (800aae4 <HAL_GPIO_Init+0x2f8>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d007      	beq.n	800a9d4 <HAL_GPIO_Init+0x1e8>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a48      	ldr	r2, [pc, #288]	@ (800aae8 <HAL_GPIO_Init+0x2fc>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d101      	bne.n	800a9d0 <HAL_GPIO_Init+0x1e4>
 800a9cc:	2305      	movs	r3, #5
 800a9ce:	e00a      	b.n	800a9e6 <HAL_GPIO_Init+0x1fa>
 800a9d0:	2306      	movs	r3, #6
 800a9d2:	e008      	b.n	800a9e6 <HAL_GPIO_Init+0x1fa>
 800a9d4:	2304      	movs	r3, #4
 800a9d6:	e006      	b.n	800a9e6 <HAL_GPIO_Init+0x1fa>
 800a9d8:	2303      	movs	r3, #3
 800a9da:	e004      	b.n	800a9e6 <HAL_GPIO_Init+0x1fa>
 800a9dc:	2302      	movs	r3, #2
 800a9de:	e002      	b.n	800a9e6 <HAL_GPIO_Init+0x1fa>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e000      	b.n	800a9e6 <HAL_GPIO_Init+0x1fa>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	f002 0203 	and.w	r2, r2, #3
 800a9ec:	0092      	lsls	r2, r2, #2
 800a9ee:	4093      	lsls	r3, r2
 800a9f0:	693a      	ldr	r2, [r7, #16]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a9f6:	4937      	ldr	r1, [pc, #220]	@ (800aad4 <HAL_GPIO_Init+0x2e8>)
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	089b      	lsrs	r3, r3, #2
 800a9fc:	3302      	adds	r3, #2
 800a9fe:	693a      	ldr	r2, [r7, #16]
 800aa00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800aa04:	4b39      	ldr	r3, [pc, #228]	@ (800aaec <HAL_GPIO_Init+0x300>)
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	43db      	mvns	r3, r3
 800aa0e:	693a      	ldr	r2, [r7, #16]
 800aa10:	4013      	ands	r3, r2
 800aa12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d003      	beq.n	800aa28 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800aa28:	4a30      	ldr	r2, [pc, #192]	@ (800aaec <HAL_GPIO_Init+0x300>)
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800aa2e:	4b2f      	ldr	r3, [pc, #188]	@ (800aaec <HAL_GPIO_Init+0x300>)
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	43db      	mvns	r3, r3
 800aa38:	693a      	ldr	r2, [r7, #16]
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d003      	beq.n	800aa52 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800aa4a:	693a      	ldr	r2, [r7, #16]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800aa52:	4a26      	ldr	r2, [pc, #152]	@ (800aaec <HAL_GPIO_Init+0x300>)
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800aa58:	4b24      	ldr	r3, [pc, #144]	@ (800aaec <HAL_GPIO_Init+0x300>)
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	43db      	mvns	r3, r3
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	4013      	ands	r3, r2
 800aa66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d003      	beq.n	800aa7c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800aa74:	693a      	ldr	r2, [r7, #16]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800aa7c:	4a1b      	ldr	r2, [pc, #108]	@ (800aaec <HAL_GPIO_Init+0x300>)
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800aa82:	4b1a      	ldr	r3, [pc, #104]	@ (800aaec <HAL_GPIO_Init+0x300>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	43db      	mvns	r3, r3
 800aa8c:	693a      	ldr	r2, [r7, #16]
 800aa8e:	4013      	ands	r3, r2
 800aa90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d003      	beq.n	800aaa6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800aaa6:	4a11      	ldr	r2, [pc, #68]	@ (800aaec <HAL_GPIO_Init+0x300>)
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	3301      	adds	r3, #1
 800aab0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	fa22 f303 	lsr.w	r3, r2, r3
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f47f ae9d 	bne.w	800a7fc <HAL_GPIO_Init+0x10>
  }
}
 800aac2:	bf00      	nop
 800aac4:	bf00      	nop
 800aac6:	371c      	adds	r7, #28
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr
 800aad0:	40021000 	.word	0x40021000
 800aad4:	40010000 	.word	0x40010000
 800aad8:	48000400 	.word	0x48000400
 800aadc:	48000800 	.word	0x48000800
 800aae0:	48000c00 	.word	0x48000c00
 800aae4:	48001000 	.word	0x48001000
 800aae8:	48001400 	.word	0x48001400
 800aaec:	40010400 	.word	0x40010400

0800aaf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	691a      	ldr	r2, [r3, #16]
 800ab00:	887b      	ldrh	r3, [r7, #2]
 800ab02:	4013      	ands	r3, r2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d002      	beq.n	800ab0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	73fb      	strb	r3, [r7, #15]
 800ab0c:	e001      	b.n	800ab12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ab12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3714      	adds	r7, #20
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	807b      	strh	r3, [r7, #2]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ab30:	787b      	ldrb	r3, [r7, #1]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d003      	beq.n	800ab3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ab36:	887a      	ldrh	r2, [r7, #2]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ab3c:	e002      	b.n	800ab44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ab3e:	887a      	ldrh	r2, [r7, #2]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ab44:	bf00      	nop
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	4603      	mov	r3, r0
 800ab58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800ab5a:	4b08      	ldr	r3, [pc, #32]	@ (800ab7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ab5c:	695a      	ldr	r2, [r3, #20]
 800ab5e:	88fb      	ldrh	r3, [r7, #6]
 800ab60:	4013      	ands	r3, r2
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d006      	beq.n	800ab74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ab66:	4a05      	ldr	r2, [pc, #20]	@ (800ab7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ab68:	88fb      	ldrh	r3, [r7, #6]
 800ab6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ab6c:	88fb      	ldrh	r3, [r7, #6]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fb ff32 	bl	80069d8 <HAL_GPIO_EXTI_Callback>
  }
}
 800ab74:	bf00      	nop
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	40010400 	.word	0x40010400

0800ab80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d141      	bne.n	800ac12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ab8e:	4b4b      	ldr	r3, [pc, #300]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ab96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab9a:	d131      	bne.n	800ac00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ab9c:	4b47      	ldr	r3, [pc, #284]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aba2:	4a46      	ldr	r2, [pc, #280]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aba8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800abac:	4b43      	ldr	r3, [pc, #268]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800abb4:	4a41      	ldr	r2, [pc, #260]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800abba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800abbc:	4b40      	ldr	r3, [pc, #256]	@ (800acc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2232      	movs	r2, #50	@ 0x32
 800abc2:	fb02 f303 	mul.w	r3, r2, r3
 800abc6:	4a3f      	ldr	r2, [pc, #252]	@ (800acc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800abc8:	fba2 2303 	umull	r2, r3, r2, r3
 800abcc:	0c9b      	lsrs	r3, r3, #18
 800abce:	3301      	adds	r3, #1
 800abd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800abd2:	e002      	b.n	800abda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	3b01      	subs	r3, #1
 800abd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800abda:	4b38      	ldr	r3, [pc, #224]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abdc:	695b      	ldr	r3, [r3, #20]
 800abde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800abe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abe6:	d102      	bne.n	800abee <HAL_PWREx_ControlVoltageScaling+0x6e>
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1f2      	bne.n	800abd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800abee:	4b33      	ldr	r3, [pc, #204]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800abf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abfa:	d158      	bne.n	800acae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800abfc:	2303      	movs	r3, #3
 800abfe:	e057      	b.n	800acb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ac00:	4b2e      	ldr	r3, [pc, #184]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac06:	4a2d      	ldr	r2, [pc, #180]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800ac10:	e04d      	b.n	800acae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac18:	d141      	bne.n	800ac9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ac1a:	4b28      	ldr	r3, [pc, #160]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ac22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac26:	d131      	bne.n	800ac8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ac28:	4b24      	ldr	r3, [pc, #144]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac2e:	4a23      	ldr	r2, [pc, #140]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ac38:	4b20      	ldr	r3, [pc, #128]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800ac40:	4a1e      	ldr	r2, [pc, #120]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ac46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ac48:	4b1d      	ldr	r3, [pc, #116]	@ (800acc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2232      	movs	r2, #50	@ 0x32
 800ac4e:	fb02 f303 	mul.w	r3, r2, r3
 800ac52:	4a1c      	ldr	r2, [pc, #112]	@ (800acc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ac54:	fba2 2303 	umull	r2, r3, r2, r3
 800ac58:	0c9b      	lsrs	r3, r3, #18
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ac5e:	e002      	b.n	800ac66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	3b01      	subs	r3, #1
 800ac64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ac66:	4b15      	ldr	r3, [pc, #84]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac72:	d102      	bne.n	800ac7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1f2      	bne.n	800ac60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ac7a:	4b10      	ldr	r3, [pc, #64]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac86:	d112      	bne.n	800acae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	e011      	b.n	800acb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ac8c:	4b0b      	ldr	r3, [pc, #44]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac92:	4a0a      	ldr	r2, [pc, #40]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800ac9c:	e007      	b.n	800acae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ac9e:	4b07      	ldr	r3, [pc, #28]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800aca6:	4a05      	ldr	r2, [pc, #20]	@ (800acbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aca8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800acac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3714      	adds	r7, #20
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr
 800acbc:	40007000 	.word	0x40007000
 800acc0:	20000130 	.word	0x20000130
 800acc4:	431bde83 	.word	0x431bde83

0800acc8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800acc8:	b480      	push	{r7}
 800acca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800accc:	4b05      	ldr	r3, [pc, #20]	@ (800ace4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	4a04      	ldr	r2, [pc, #16]	@ (800ace4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800acd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800acd6:	6093      	str	r3, [r2, #8]
}
 800acd8:	bf00      	nop
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop
 800ace4:	40007000 	.word	0x40007000

0800ace8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b088      	sub	sp, #32
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d101      	bne.n	800acfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	e2fe      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f003 0301 	and.w	r3, r3, #1
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d075      	beq.n	800adf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad06:	4b97      	ldr	r3, [pc, #604]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	f003 030c 	and.w	r3, r3, #12
 800ad0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ad10:	4b94      	ldr	r3, [pc, #592]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	f003 0303 	and.w	r3, r3, #3
 800ad18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	2b0c      	cmp	r3, #12
 800ad1e:	d102      	bne.n	800ad26 <HAL_RCC_OscConfig+0x3e>
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	d002      	beq.n	800ad2c <HAL_RCC_OscConfig+0x44>
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	2b08      	cmp	r3, #8
 800ad2a:	d10b      	bne.n	800ad44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad2c:	4b8d      	ldr	r3, [pc, #564]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d05b      	beq.n	800adf0 <HAL_RCC_OscConfig+0x108>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d157      	bne.n	800adf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	e2d9      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad4c:	d106      	bne.n	800ad5c <HAL_RCC_OscConfig+0x74>
 800ad4e:	4b85      	ldr	r3, [pc, #532]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a84      	ldr	r2, [pc, #528]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ad54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad58:	6013      	str	r3, [r2, #0]
 800ad5a:	e01d      	b.n	800ad98 <HAL_RCC_OscConfig+0xb0>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad64:	d10c      	bne.n	800ad80 <HAL_RCC_OscConfig+0x98>
 800ad66:	4b7f      	ldr	r3, [pc, #508]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a7e      	ldr	r2, [pc, #504]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ad6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ad70:	6013      	str	r3, [r2, #0]
 800ad72:	4b7c      	ldr	r3, [pc, #496]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a7b      	ldr	r2, [pc, #492]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ad78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad7c:	6013      	str	r3, [r2, #0]
 800ad7e:	e00b      	b.n	800ad98 <HAL_RCC_OscConfig+0xb0>
 800ad80:	4b78      	ldr	r3, [pc, #480]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a77      	ldr	r2, [pc, #476]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ad86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad8a:	6013      	str	r3, [r2, #0]
 800ad8c:	4b75      	ldr	r3, [pc, #468]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a74      	ldr	r2, [pc, #464]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ad92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ad96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d013      	beq.n	800adc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ada0:	f7fd fc5e 	bl	8008660 <HAL_GetTick>
 800ada4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ada6:	e008      	b.n	800adba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ada8:	f7fd fc5a 	bl	8008660 <HAL_GetTick>
 800adac:	4602      	mov	r2, r0
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	2b64      	cmp	r3, #100	@ 0x64
 800adb4:	d901      	bls.n	800adba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800adb6:	2303      	movs	r3, #3
 800adb8:	e29e      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800adba:	4b6a      	ldr	r3, [pc, #424]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d0f0      	beq.n	800ada8 <HAL_RCC_OscConfig+0xc0>
 800adc6:	e014      	b.n	800adf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adc8:	f7fd fc4a 	bl	8008660 <HAL_GetTick>
 800adcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800adce:	e008      	b.n	800ade2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800add0:	f7fd fc46 	bl	8008660 <HAL_GetTick>
 800add4:	4602      	mov	r2, r0
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	2b64      	cmp	r3, #100	@ 0x64
 800addc:	d901      	bls.n	800ade2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800adde:	2303      	movs	r3, #3
 800ade0:	e28a      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ade2:	4b60      	ldr	r3, [pc, #384]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1f0      	bne.n	800add0 <HAL_RCC_OscConfig+0xe8>
 800adee:	e000      	b.n	800adf2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800adf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f003 0302 	and.w	r3, r3, #2
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d075      	beq.n	800aeea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800adfe:	4b59      	ldr	r3, [pc, #356]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	f003 030c 	and.w	r3, r3, #12
 800ae06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ae08:	4b56      	ldr	r3, [pc, #344]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	f003 0303 	and.w	r3, r3, #3
 800ae10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	2b0c      	cmp	r3, #12
 800ae16:	d102      	bne.n	800ae1e <HAL_RCC_OscConfig+0x136>
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	d002      	beq.n	800ae24 <HAL_RCC_OscConfig+0x13c>
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	2b04      	cmp	r3, #4
 800ae22:	d11f      	bne.n	800ae64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ae24:	4b4f      	ldr	r3, [pc, #316]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d005      	beq.n	800ae3c <HAL_RCC_OscConfig+0x154>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d101      	bne.n	800ae3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e25d      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae3c:	4b49      	ldr	r3, [pc, #292]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	061b      	lsls	r3, r3, #24
 800ae4a:	4946      	ldr	r1, [pc, #280]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800ae50:	4b45      	ldr	r3, [pc, #276]	@ (800af68 <HAL_RCC_OscConfig+0x280>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fd fbb7 	bl	80085c8 <HAL_InitTick>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d043      	beq.n	800aee8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800ae60:	2301      	movs	r3, #1
 800ae62:	e249      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d023      	beq.n	800aeb4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ae6c:	4b3d      	ldr	r3, [pc, #244]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a3c      	ldr	r2, [pc, #240]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ae72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae78:	f7fd fbf2 	bl	8008660 <HAL_GetTick>
 800ae7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ae7e:	e008      	b.n	800ae92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae80:	f7fd fbee 	bl	8008660 <HAL_GetTick>
 800ae84:	4602      	mov	r2, r0
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	1ad3      	subs	r3, r2, r3
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d901      	bls.n	800ae92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	e232      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ae92:	4b34      	ldr	r3, [pc, #208]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d0f0      	beq.n	800ae80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae9e:	4b31      	ldr	r3, [pc, #196]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	061b      	lsls	r3, r3, #24
 800aeac:	492d      	ldr	r1, [pc, #180]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	604b      	str	r3, [r1, #4]
 800aeb2:	e01a      	b.n	800aeea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aeb4:	4b2b      	ldr	r3, [pc, #172]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a2a      	ldr	r2, [pc, #168]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800aeba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aec0:	f7fd fbce 	bl	8008660 <HAL_GetTick>
 800aec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800aec6:	e008      	b.n	800aeda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aec8:	f7fd fbca 	bl	8008660 <HAL_GetTick>
 800aecc:	4602      	mov	r2, r0
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	d901      	bls.n	800aeda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800aed6:	2303      	movs	r3, #3
 800aed8:	e20e      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800aeda:	4b22      	ldr	r3, [pc, #136]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d1f0      	bne.n	800aec8 <HAL_RCC_OscConfig+0x1e0>
 800aee6:	e000      	b.n	800aeea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aee8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f003 0308 	and.w	r3, r3, #8
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d041      	beq.n	800af7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	695b      	ldr	r3, [r3, #20]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d01c      	beq.n	800af38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aefe:	4b19      	ldr	r3, [pc, #100]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800af00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af04:	4a17      	ldr	r2, [pc, #92]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800af06:	f043 0301 	orr.w	r3, r3, #1
 800af0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af0e:	f7fd fba7 	bl	8008660 <HAL_GetTick>
 800af12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800af14:	e008      	b.n	800af28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af16:	f7fd fba3 	bl	8008660 <HAL_GetTick>
 800af1a:	4602      	mov	r2, r0
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	1ad3      	subs	r3, r2, r3
 800af20:	2b02      	cmp	r3, #2
 800af22:	d901      	bls.n	800af28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800af24:	2303      	movs	r3, #3
 800af26:	e1e7      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800af28:	4b0e      	ldr	r3, [pc, #56]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800af2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af2e:	f003 0302 	and.w	r3, r3, #2
 800af32:	2b00      	cmp	r3, #0
 800af34:	d0ef      	beq.n	800af16 <HAL_RCC_OscConfig+0x22e>
 800af36:	e020      	b.n	800af7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af38:	4b0a      	ldr	r3, [pc, #40]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800af3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af3e:	4a09      	ldr	r2, [pc, #36]	@ (800af64 <HAL_RCC_OscConfig+0x27c>)
 800af40:	f023 0301 	bic.w	r3, r3, #1
 800af44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af48:	f7fd fb8a 	bl	8008660 <HAL_GetTick>
 800af4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800af4e:	e00d      	b.n	800af6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af50:	f7fd fb86 	bl	8008660 <HAL_GetTick>
 800af54:	4602      	mov	r2, r0
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	1ad3      	subs	r3, r2, r3
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	d906      	bls.n	800af6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800af5e:	2303      	movs	r3, #3
 800af60:	e1ca      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
 800af62:	bf00      	nop
 800af64:	40021000 	.word	0x40021000
 800af68:	20000134 	.word	0x20000134
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800af6c:	4b8c      	ldr	r3, [pc, #560]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800af6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af72:	f003 0302 	and.w	r3, r3, #2
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1ea      	bne.n	800af50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 0304 	and.w	r3, r3, #4
 800af82:	2b00      	cmp	r3, #0
 800af84:	f000 80a6 	beq.w	800b0d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800af88:	2300      	movs	r3, #0
 800af8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800af8c:	4b84      	ldr	r3, [pc, #528]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800af8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af94:	2b00      	cmp	r3, #0
 800af96:	d101      	bne.n	800af9c <HAL_RCC_OscConfig+0x2b4>
 800af98:	2301      	movs	r3, #1
 800af9a:	e000      	b.n	800af9e <HAL_RCC_OscConfig+0x2b6>
 800af9c:	2300      	movs	r3, #0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00d      	beq.n	800afbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800afa2:	4b7f      	ldr	r3, [pc, #508]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800afa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afa6:	4a7e      	ldr	r2, [pc, #504]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800afa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800afac:	6593      	str	r3, [r2, #88]	@ 0x58
 800afae:	4b7c      	ldr	r3, [pc, #496]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800afb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800afb6:	60fb      	str	r3, [r7, #12]
 800afb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800afba:	2301      	movs	r3, #1
 800afbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800afbe:	4b79      	ldr	r3, [pc, #484]	@ (800b1a4 <HAL_RCC_OscConfig+0x4bc>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d118      	bne.n	800affc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800afca:	4b76      	ldr	r3, [pc, #472]	@ (800b1a4 <HAL_RCC_OscConfig+0x4bc>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a75      	ldr	r2, [pc, #468]	@ (800b1a4 <HAL_RCC_OscConfig+0x4bc>)
 800afd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800afd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800afd6:	f7fd fb43 	bl	8008660 <HAL_GetTick>
 800afda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800afdc:	e008      	b.n	800aff0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afde:	f7fd fb3f 	bl	8008660 <HAL_GetTick>
 800afe2:	4602      	mov	r2, r0
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d901      	bls.n	800aff0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800afec:	2303      	movs	r3, #3
 800afee:	e183      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aff0:	4b6c      	ldr	r3, [pc, #432]	@ (800b1a4 <HAL_RCC_OscConfig+0x4bc>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d0f0      	beq.n	800afde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d108      	bne.n	800b016 <HAL_RCC_OscConfig+0x32e>
 800b004:	4b66      	ldr	r3, [pc, #408]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b00a:	4a65      	ldr	r2, [pc, #404]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b00c:	f043 0301 	orr.w	r3, r3, #1
 800b010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b014:	e024      	b.n	800b060 <HAL_RCC_OscConfig+0x378>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	2b05      	cmp	r3, #5
 800b01c:	d110      	bne.n	800b040 <HAL_RCC_OscConfig+0x358>
 800b01e:	4b60      	ldr	r3, [pc, #384]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b024:	4a5e      	ldr	r2, [pc, #376]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b026:	f043 0304 	orr.w	r3, r3, #4
 800b02a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b02e:	4b5c      	ldr	r3, [pc, #368]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b034:	4a5a      	ldr	r2, [pc, #360]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b036:	f043 0301 	orr.w	r3, r3, #1
 800b03a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b03e:	e00f      	b.n	800b060 <HAL_RCC_OscConfig+0x378>
 800b040:	4b57      	ldr	r3, [pc, #348]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b046:	4a56      	ldr	r2, [pc, #344]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b048:	f023 0301 	bic.w	r3, r3, #1
 800b04c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b050:	4b53      	ldr	r3, [pc, #332]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b056:	4a52      	ldr	r2, [pc, #328]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b058:	f023 0304 	bic.w	r3, r3, #4
 800b05c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d016      	beq.n	800b096 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b068:	f7fd fafa 	bl	8008660 <HAL_GetTick>
 800b06c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b06e:	e00a      	b.n	800b086 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b070:	f7fd faf6 	bl	8008660 <HAL_GetTick>
 800b074:	4602      	mov	r2, r0
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b07e:	4293      	cmp	r3, r2
 800b080:	d901      	bls.n	800b086 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b082:	2303      	movs	r3, #3
 800b084:	e138      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b086:	4b46      	ldr	r3, [pc, #280]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b08c:	f003 0302 	and.w	r3, r3, #2
 800b090:	2b00      	cmp	r3, #0
 800b092:	d0ed      	beq.n	800b070 <HAL_RCC_OscConfig+0x388>
 800b094:	e015      	b.n	800b0c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b096:	f7fd fae3 	bl	8008660 <HAL_GetTick>
 800b09a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b09c:	e00a      	b.n	800b0b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b09e:	f7fd fadf 	bl	8008660 <HAL_GetTick>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	1ad3      	subs	r3, r2, r3
 800b0a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d901      	bls.n	800b0b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e121      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b0b4:	4b3a      	ldr	r3, [pc, #232]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b0b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0ba:	f003 0302 	and.w	r3, r3, #2
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d1ed      	bne.n	800b09e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b0c2:	7ffb      	ldrb	r3, [r7, #31]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d105      	bne.n	800b0d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b0c8:	4b35      	ldr	r3, [pc, #212]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b0ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0cc:	4a34      	ldr	r2, [pc, #208]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b0ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f003 0320 	and.w	r3, r3, #32
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d03c      	beq.n	800b15a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d01c      	beq.n	800b122 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b0e8:	4b2d      	ldr	r3, [pc, #180]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b0ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b0ee:	4a2c      	ldr	r2, [pc, #176]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b0f0:	f043 0301 	orr.w	r3, r3, #1
 800b0f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0f8:	f7fd fab2 	bl	8008660 <HAL_GetTick>
 800b0fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b0fe:	e008      	b.n	800b112 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b100:	f7fd faae 	bl	8008660 <HAL_GetTick>
 800b104:	4602      	mov	r2, r0
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	d901      	bls.n	800b112 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b10e:	2303      	movs	r3, #3
 800b110:	e0f2      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b112:	4b23      	ldr	r3, [pc, #140]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b114:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b118:	f003 0302 	and.w	r3, r3, #2
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d0ef      	beq.n	800b100 <HAL_RCC_OscConfig+0x418>
 800b120:	e01b      	b.n	800b15a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b122:	4b1f      	ldr	r3, [pc, #124]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b124:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b128:	4a1d      	ldr	r2, [pc, #116]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b12a:	f023 0301 	bic.w	r3, r3, #1
 800b12e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b132:	f7fd fa95 	bl	8008660 <HAL_GetTick>
 800b136:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b138:	e008      	b.n	800b14c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b13a:	f7fd fa91 	bl	8008660 <HAL_GetTick>
 800b13e:	4602      	mov	r2, r0
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	1ad3      	subs	r3, r2, r3
 800b144:	2b02      	cmp	r3, #2
 800b146:	d901      	bls.n	800b14c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b148:	2303      	movs	r3, #3
 800b14a:	e0d5      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b14c:	4b14      	ldr	r3, [pc, #80]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b14e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b152:	f003 0302 	and.w	r3, r3, #2
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1ef      	bne.n	800b13a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	69db      	ldr	r3, [r3, #28]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	f000 80c9 	beq.w	800b2f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b164:	4b0e      	ldr	r3, [pc, #56]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	f003 030c 	and.w	r3, r3, #12
 800b16c:	2b0c      	cmp	r3, #12
 800b16e:	f000 8083 	beq.w	800b278 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	69db      	ldr	r3, [r3, #28]
 800b176:	2b02      	cmp	r3, #2
 800b178:	d15e      	bne.n	800b238 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b17a:	4b09      	ldr	r3, [pc, #36]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a08      	ldr	r2, [pc, #32]	@ (800b1a0 <HAL_RCC_OscConfig+0x4b8>)
 800b180:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b186:	f7fd fa6b 	bl	8008660 <HAL_GetTick>
 800b18a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b18c:	e00c      	b.n	800b1a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b18e:	f7fd fa67 	bl	8008660 <HAL_GetTick>
 800b192:	4602      	mov	r2, r0
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	1ad3      	subs	r3, r2, r3
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d905      	bls.n	800b1a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b19c:	2303      	movs	r3, #3
 800b19e:	e0ab      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
 800b1a0:	40021000 	.word	0x40021000
 800b1a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b1a8:	4b55      	ldr	r3, [pc, #340]	@ (800b300 <HAL_RCC_OscConfig+0x618>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1ec      	bne.n	800b18e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b1b4:	4b52      	ldr	r3, [pc, #328]	@ (800b300 <HAL_RCC_OscConfig+0x618>)
 800b1b6:	68da      	ldr	r2, [r3, #12]
 800b1b8:	4b52      	ldr	r3, [pc, #328]	@ (800b304 <HAL_RCC_OscConfig+0x61c>)
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	6a11      	ldr	r1, [r2, #32]
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b1c4:	3a01      	subs	r2, #1
 800b1c6:	0112      	lsls	r2, r2, #4
 800b1c8:	4311      	orrs	r1, r2
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800b1ce:	0212      	lsls	r2, r2, #8
 800b1d0:	4311      	orrs	r1, r2
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b1d6:	0852      	lsrs	r2, r2, #1
 800b1d8:	3a01      	subs	r2, #1
 800b1da:	0552      	lsls	r2, r2, #21
 800b1dc:	4311      	orrs	r1, r2
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b1e2:	0852      	lsrs	r2, r2, #1
 800b1e4:	3a01      	subs	r2, #1
 800b1e6:	0652      	lsls	r2, r2, #25
 800b1e8:	4311      	orrs	r1, r2
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b1ee:	06d2      	lsls	r2, r2, #27
 800b1f0:	430a      	orrs	r2, r1
 800b1f2:	4943      	ldr	r1, [pc, #268]	@ (800b300 <HAL_RCC_OscConfig+0x618>)
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b1f8:	4b41      	ldr	r3, [pc, #260]	@ (800b300 <HAL_RCC_OscConfig+0x618>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a40      	ldr	r2, [pc, #256]	@ (800b300 <HAL_RCC_OscConfig+0x618>)
 800b1fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b202:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b204:	4b3e      	ldr	r3, [pc, #248]	@ (800b300 <HAL_RCC_OscConfig+0x618>)
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	4a3d      	ldr	r2, [pc, #244]	@ (800b300 <HAL_RCC_OscConfig+0x618>)
 800b20a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b20e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b210:	f7fd fa26 	bl	8008660 <HAL_GetTick>
 800b214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b216:	e008      	b.n	800b22a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b218:	f7fd fa22 	bl	8008660 <HAL_GetTick>
 800b21c:	4602      	mov	r2, r0
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	1ad3      	subs	r3, r2, r3
 800b222:	2b02      	cmp	r3, #2
 800b224:	d901      	bls.n	800b22a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b226:	2303      	movs	r3, #3
 800b228:	e066      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b22a:	4b35      	ldr	r3, [pc, #212]	@ (800b300 <HAL_RCC_OscConfig+0x618>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b232:	2b00      	cmp	r3, #0
 800b234:	d0f0      	beq.n	800b218 <HAL_RCC_OscConfig+0x530>
 800b236:	e05e      	b.n	800b2f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b238:	4b31      	ldr	r3, [pc, #196]	@ (800b300 <HAL_RCC_OscConfig+0x618>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a30      	ldr	r2, [pc, #192]	@ (800b300 <HAL_RCC_OscConfig+0x618>)
 800b23e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b244:	f7fd fa0c 	bl	8008660 <HAL_GetTick>
 800b248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b24a:	e008      	b.n	800b25e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b24c:	f7fd fa08 	bl	8008660 <HAL_GetTick>
 800b250:	4602      	mov	r2, r0
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	1ad3      	subs	r3, r2, r3
 800b256:	2b02      	cmp	r3, #2
 800b258:	d901      	bls.n	800b25e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800b25a:	2303      	movs	r3, #3
 800b25c:	e04c      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b25e:	4b28      	ldr	r3, [pc, #160]	@ (800b300 <HAL_RCC_OscConfig+0x618>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1f0      	bne.n	800b24c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b26a:	4b25      	ldr	r3, [pc, #148]	@ (800b300 <HAL_RCC_OscConfig+0x618>)
 800b26c:	68da      	ldr	r2, [r3, #12]
 800b26e:	4924      	ldr	r1, [pc, #144]	@ (800b300 <HAL_RCC_OscConfig+0x618>)
 800b270:	4b25      	ldr	r3, [pc, #148]	@ (800b308 <HAL_RCC_OscConfig+0x620>)
 800b272:	4013      	ands	r3, r2
 800b274:	60cb      	str	r3, [r1, #12]
 800b276:	e03e      	b.n	800b2f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	69db      	ldr	r3, [r3, #28]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d101      	bne.n	800b284 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800b280:	2301      	movs	r3, #1
 800b282:	e039      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b284:	4b1e      	ldr	r3, [pc, #120]	@ (800b300 <HAL_RCC_OscConfig+0x618>)
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	f003 0203 	and.w	r2, r3, #3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6a1b      	ldr	r3, [r3, #32]
 800b294:	429a      	cmp	r2, r3
 800b296:	d12c      	bne.n	800b2f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d123      	bne.n	800b2f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d11b      	bne.n	800b2f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d113      	bne.n	800b2f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2d4:	085b      	lsrs	r3, r3, #1
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d109      	bne.n	800b2f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2e8:	085b      	lsrs	r3, r3, #1
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d001      	beq.n	800b2f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e000      	b.n	800b2f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3720      	adds	r7, #32
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	40021000 	.word	0x40021000
 800b304:	019f800c 	.word	0x019f800c
 800b308:	feeefffc 	.word	0xfeeefffc

0800b30c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b086      	sub	sp, #24
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b316:	2300      	movs	r3, #0
 800b318:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d101      	bne.n	800b324 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b320:	2301      	movs	r3, #1
 800b322:	e11e      	b.n	800b562 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b324:	4b91      	ldr	r3, [pc, #580]	@ (800b56c <HAL_RCC_ClockConfig+0x260>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f003 030f 	and.w	r3, r3, #15
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d910      	bls.n	800b354 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b332:	4b8e      	ldr	r3, [pc, #568]	@ (800b56c <HAL_RCC_ClockConfig+0x260>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f023 020f 	bic.w	r2, r3, #15
 800b33a:	498c      	ldr	r1, [pc, #560]	@ (800b56c <HAL_RCC_ClockConfig+0x260>)
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	4313      	orrs	r3, r2
 800b340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b342:	4b8a      	ldr	r3, [pc, #552]	@ (800b56c <HAL_RCC_ClockConfig+0x260>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f003 030f 	and.w	r3, r3, #15
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d001      	beq.n	800b354 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	e106      	b.n	800b562 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f003 0301 	and.w	r3, r3, #1
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d073      	beq.n	800b448 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	2b03      	cmp	r3, #3
 800b366:	d129      	bne.n	800b3bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b368:	4b81      	ldr	r3, [pc, #516]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b370:	2b00      	cmp	r3, #0
 800b372:	d101      	bne.n	800b378 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b374:	2301      	movs	r3, #1
 800b376:	e0f4      	b.n	800b562 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b378:	f000 f99e 	bl	800b6b8 <RCC_GetSysClockFreqFromPLLSource>
 800b37c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	4a7c      	ldr	r2, [pc, #496]	@ (800b574 <HAL_RCC_ClockConfig+0x268>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d93f      	bls.n	800b406 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b386:	4b7a      	ldr	r3, [pc, #488]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d009      	beq.n	800b3a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d033      	beq.n	800b406 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d12f      	bne.n	800b406 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b3a6:	4b72      	ldr	r3, [pc, #456]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b3ae:	4a70      	ldr	r2, [pc, #448]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b3b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b3b6:	2380      	movs	r3, #128	@ 0x80
 800b3b8:	617b      	str	r3, [r7, #20]
 800b3ba:	e024      	b.n	800b406 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d107      	bne.n	800b3d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b3c4:	4b6a      	ldr	r3, [pc, #424]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d109      	bne.n	800b3e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e0c6      	b.n	800b562 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b3d4:	4b66      	ldr	r3, [pc, #408]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d101      	bne.n	800b3e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e0be      	b.n	800b562 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b3e4:	f000 f8ce 	bl	800b584 <HAL_RCC_GetSysClockFreq>
 800b3e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	4a61      	ldr	r2, [pc, #388]	@ (800b574 <HAL_RCC_ClockConfig+0x268>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d909      	bls.n	800b406 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b3f2:	4b5f      	ldr	r3, [pc, #380]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b3fa:	4a5d      	ldr	r2, [pc, #372]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b3fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b400:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b402:	2380      	movs	r3, #128	@ 0x80
 800b404:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b406:	4b5a      	ldr	r3, [pc, #360]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	f023 0203 	bic.w	r2, r3, #3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	4957      	ldr	r1, [pc, #348]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b414:	4313      	orrs	r3, r2
 800b416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b418:	f7fd f922 	bl	8008660 <HAL_GetTick>
 800b41c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b41e:	e00a      	b.n	800b436 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b420:	f7fd f91e 	bl	8008660 <HAL_GetTick>
 800b424:	4602      	mov	r2, r0
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b42e:	4293      	cmp	r3, r2
 800b430:	d901      	bls.n	800b436 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b432:	2303      	movs	r3, #3
 800b434:	e095      	b.n	800b562 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b436:	4b4e      	ldr	r3, [pc, #312]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	f003 020c 	and.w	r2, r3, #12
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	429a      	cmp	r2, r3
 800b446:	d1eb      	bne.n	800b420 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f003 0302 	and.w	r3, r3, #2
 800b450:	2b00      	cmp	r3, #0
 800b452:	d023      	beq.n	800b49c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 0304 	and.w	r3, r3, #4
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d005      	beq.n	800b46c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b460:	4b43      	ldr	r3, [pc, #268]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	4a42      	ldr	r2, [pc, #264]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b466:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b46a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 0308 	and.w	r3, r3, #8
 800b474:	2b00      	cmp	r3, #0
 800b476:	d007      	beq.n	800b488 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b478:	4b3d      	ldr	r3, [pc, #244]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b480:	4a3b      	ldr	r2, [pc, #236]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b482:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b486:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b488:	4b39      	ldr	r3, [pc, #228]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	4936      	ldr	r1, [pc, #216]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b496:	4313      	orrs	r3, r2
 800b498:	608b      	str	r3, [r1, #8]
 800b49a:	e008      	b.n	800b4ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	2b80      	cmp	r3, #128	@ 0x80
 800b4a0:	d105      	bne.n	800b4ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b4a2:	4b33      	ldr	r3, [pc, #204]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	4a32      	ldr	r2, [pc, #200]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b4a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b4ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b4ae:	4b2f      	ldr	r3, [pc, #188]	@ (800b56c <HAL_RCC_ClockConfig+0x260>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f003 030f 	and.w	r3, r3, #15
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d21d      	bcs.n	800b4f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4bc:	4b2b      	ldr	r3, [pc, #172]	@ (800b56c <HAL_RCC_ClockConfig+0x260>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f023 020f 	bic.w	r2, r3, #15
 800b4c4:	4929      	ldr	r1, [pc, #164]	@ (800b56c <HAL_RCC_ClockConfig+0x260>)
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b4cc:	f7fd f8c8 	bl	8008660 <HAL_GetTick>
 800b4d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4d2:	e00a      	b.n	800b4ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4d4:	f7fd f8c4 	bl	8008660 <HAL_GetTick>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	1ad3      	subs	r3, r2, r3
 800b4de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d901      	bls.n	800b4ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	e03b      	b.n	800b562 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4ea:	4b20      	ldr	r3, [pc, #128]	@ (800b56c <HAL_RCC_ClockConfig+0x260>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 030f 	and.w	r3, r3, #15
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d1ed      	bne.n	800b4d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f003 0304 	and.w	r3, r3, #4
 800b500:	2b00      	cmp	r3, #0
 800b502:	d008      	beq.n	800b516 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b504:	4b1a      	ldr	r3, [pc, #104]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	4917      	ldr	r1, [pc, #92]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b512:	4313      	orrs	r3, r2
 800b514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f003 0308 	and.w	r3, r3, #8
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d009      	beq.n	800b536 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b522:	4b13      	ldr	r3, [pc, #76]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	691b      	ldr	r3, [r3, #16]
 800b52e:	00db      	lsls	r3, r3, #3
 800b530:	490f      	ldr	r1, [pc, #60]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b532:	4313      	orrs	r3, r2
 800b534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b536:	f000 f825 	bl	800b584 <HAL_RCC_GetSysClockFreq>
 800b53a:	4602      	mov	r2, r0
 800b53c:	4b0c      	ldr	r3, [pc, #48]	@ (800b570 <HAL_RCC_ClockConfig+0x264>)
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	091b      	lsrs	r3, r3, #4
 800b542:	f003 030f 	and.w	r3, r3, #15
 800b546:	490c      	ldr	r1, [pc, #48]	@ (800b578 <HAL_RCC_ClockConfig+0x26c>)
 800b548:	5ccb      	ldrb	r3, [r1, r3]
 800b54a:	f003 031f 	and.w	r3, r3, #31
 800b54e:	fa22 f303 	lsr.w	r3, r2, r3
 800b552:	4a0a      	ldr	r2, [pc, #40]	@ (800b57c <HAL_RCC_ClockConfig+0x270>)
 800b554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b556:	4b0a      	ldr	r3, [pc, #40]	@ (800b580 <HAL_RCC_ClockConfig+0x274>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fd f834 	bl	80085c8 <HAL_InitTick>
 800b560:	4603      	mov	r3, r0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3718      	adds	r7, #24
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	40022000 	.word	0x40022000
 800b570:	40021000 	.word	0x40021000
 800b574:	04c4b400 	.word	0x04c4b400
 800b578:	08012490 	.word	0x08012490
 800b57c:	20000130 	.word	0x20000130
 800b580:	20000134 	.word	0x20000134

0800b584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b584:	b480      	push	{r7}
 800b586:	b087      	sub	sp, #28
 800b588:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b58a:	4b2c      	ldr	r3, [pc, #176]	@ (800b63c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	f003 030c 	and.w	r3, r3, #12
 800b592:	2b04      	cmp	r3, #4
 800b594:	d102      	bne.n	800b59c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b596:	4b2a      	ldr	r3, [pc, #168]	@ (800b640 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b598:	613b      	str	r3, [r7, #16]
 800b59a:	e047      	b.n	800b62c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b59c:	4b27      	ldr	r3, [pc, #156]	@ (800b63c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	f003 030c 	and.w	r3, r3, #12
 800b5a4:	2b08      	cmp	r3, #8
 800b5a6:	d102      	bne.n	800b5ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b5a8:	4b26      	ldr	r3, [pc, #152]	@ (800b644 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b5aa:	613b      	str	r3, [r7, #16]
 800b5ac:	e03e      	b.n	800b62c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b5ae:	4b23      	ldr	r3, [pc, #140]	@ (800b63c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	f003 030c 	and.w	r3, r3, #12
 800b5b6:	2b0c      	cmp	r3, #12
 800b5b8:	d136      	bne.n	800b628 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b5ba:	4b20      	ldr	r3, [pc, #128]	@ (800b63c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	f003 0303 	and.w	r3, r3, #3
 800b5c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b5c4:	4b1d      	ldr	r3, [pc, #116]	@ (800b63c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	091b      	lsrs	r3, r3, #4
 800b5ca:	f003 030f 	and.w	r3, r3, #15
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2b03      	cmp	r3, #3
 800b5d6:	d10c      	bne.n	800b5f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b5d8:	4a1a      	ldr	r2, [pc, #104]	@ (800b644 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5e0:	4a16      	ldr	r2, [pc, #88]	@ (800b63c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b5e2:	68d2      	ldr	r2, [r2, #12]
 800b5e4:	0a12      	lsrs	r2, r2, #8
 800b5e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b5ea:	fb02 f303 	mul.w	r3, r2, r3
 800b5ee:	617b      	str	r3, [r7, #20]
      break;
 800b5f0:	e00c      	b.n	800b60c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b5f2:	4a13      	ldr	r2, [pc, #76]	@ (800b640 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5fa:	4a10      	ldr	r2, [pc, #64]	@ (800b63c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b5fc:	68d2      	ldr	r2, [r2, #12]
 800b5fe:	0a12      	lsrs	r2, r2, #8
 800b600:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b604:	fb02 f303 	mul.w	r3, r2, r3
 800b608:	617b      	str	r3, [r7, #20]
      break;
 800b60a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b60c:	4b0b      	ldr	r3, [pc, #44]	@ (800b63c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	0e5b      	lsrs	r3, r3, #25
 800b612:	f003 0303 	and.w	r3, r3, #3
 800b616:	3301      	adds	r3, #1
 800b618:	005b      	lsls	r3, r3, #1
 800b61a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b61c:	697a      	ldr	r2, [r7, #20]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	fbb2 f3f3 	udiv	r3, r2, r3
 800b624:	613b      	str	r3, [r7, #16]
 800b626:	e001      	b.n	800b62c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b628:	2300      	movs	r3, #0
 800b62a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b62c:	693b      	ldr	r3, [r7, #16]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	371c      	adds	r7, #28
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	40021000 	.word	0x40021000
 800b640:	00f42400 	.word	0x00f42400
 800b644:	016e3600 	.word	0x016e3600

0800b648 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b648:	b480      	push	{r7}
 800b64a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b64c:	4b03      	ldr	r3, [pc, #12]	@ (800b65c <HAL_RCC_GetHCLKFreq+0x14>)
 800b64e:	681b      	ldr	r3, [r3, #0]
}
 800b650:	4618      	mov	r0, r3
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	20000130 	.word	0x20000130

0800b660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b664:	f7ff fff0 	bl	800b648 <HAL_RCC_GetHCLKFreq>
 800b668:	4602      	mov	r2, r0
 800b66a:	4b06      	ldr	r3, [pc, #24]	@ (800b684 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	0a1b      	lsrs	r3, r3, #8
 800b670:	f003 0307 	and.w	r3, r3, #7
 800b674:	4904      	ldr	r1, [pc, #16]	@ (800b688 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b676:	5ccb      	ldrb	r3, [r1, r3]
 800b678:	f003 031f 	and.w	r3, r3, #31
 800b67c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b680:	4618      	mov	r0, r3
 800b682:	bd80      	pop	{r7, pc}
 800b684:	40021000 	.word	0x40021000
 800b688:	080124a0 	.word	0x080124a0

0800b68c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b690:	f7ff ffda 	bl	800b648 <HAL_RCC_GetHCLKFreq>
 800b694:	4602      	mov	r2, r0
 800b696:	4b06      	ldr	r3, [pc, #24]	@ (800b6b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	0adb      	lsrs	r3, r3, #11
 800b69c:	f003 0307 	and.w	r3, r3, #7
 800b6a0:	4904      	ldr	r1, [pc, #16]	@ (800b6b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b6a2:	5ccb      	ldrb	r3, [r1, r3]
 800b6a4:	f003 031f 	and.w	r3, r3, #31
 800b6a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	40021000 	.word	0x40021000
 800b6b4:	080124a0 	.word	0x080124a0

0800b6b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b087      	sub	sp, #28
 800b6bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b6be:	4b1e      	ldr	r3, [pc, #120]	@ (800b738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	f003 0303 	and.w	r3, r3, #3
 800b6c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b6c8:	4b1b      	ldr	r3, [pc, #108]	@ (800b738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	091b      	lsrs	r3, r3, #4
 800b6ce:	f003 030f 	and.w	r3, r3, #15
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	2b03      	cmp	r3, #3
 800b6da:	d10c      	bne.n	800b6f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b6dc:	4a17      	ldr	r2, [pc, #92]	@ (800b73c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6e4:	4a14      	ldr	r2, [pc, #80]	@ (800b738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b6e6:	68d2      	ldr	r2, [r2, #12]
 800b6e8:	0a12      	lsrs	r2, r2, #8
 800b6ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b6ee:	fb02 f303 	mul.w	r3, r2, r3
 800b6f2:	617b      	str	r3, [r7, #20]
    break;
 800b6f4:	e00c      	b.n	800b710 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b6f6:	4a12      	ldr	r2, [pc, #72]	@ (800b740 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6fe:	4a0e      	ldr	r2, [pc, #56]	@ (800b738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b700:	68d2      	ldr	r2, [r2, #12]
 800b702:	0a12      	lsrs	r2, r2, #8
 800b704:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b708:	fb02 f303 	mul.w	r3, r2, r3
 800b70c:	617b      	str	r3, [r7, #20]
    break;
 800b70e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b710:	4b09      	ldr	r3, [pc, #36]	@ (800b738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	0e5b      	lsrs	r3, r3, #25
 800b716:	f003 0303 	and.w	r3, r3, #3
 800b71a:	3301      	adds	r3, #1
 800b71c:	005b      	lsls	r3, r3, #1
 800b71e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b720:	697a      	ldr	r2, [r7, #20]
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	fbb2 f3f3 	udiv	r3, r2, r3
 800b728:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b72a:	687b      	ldr	r3, [r7, #4]
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	371c      	adds	r7, #28
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr
 800b738:	40021000 	.word	0x40021000
 800b73c:	016e3600 	.word	0x016e3600
 800b740:	00f42400 	.word	0x00f42400

0800b744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b086      	sub	sp, #24
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b74c:	2300      	movs	r3, #0
 800b74e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b750:	2300      	movs	r3, #0
 800b752:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f000 8098 	beq.w	800b892 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b762:	2300      	movs	r3, #0
 800b764:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b766:	4b43      	ldr	r3, [pc, #268]	@ (800b874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b76a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10d      	bne.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b772:	4b40      	ldr	r3, [pc, #256]	@ (800b874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b776:	4a3f      	ldr	r2, [pc, #252]	@ (800b874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b77c:	6593      	str	r3, [r2, #88]	@ 0x58
 800b77e:	4b3d      	ldr	r3, [pc, #244]	@ (800b874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b786:	60bb      	str	r3, [r7, #8]
 800b788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b78a:	2301      	movs	r3, #1
 800b78c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b78e:	4b3a      	ldr	r3, [pc, #232]	@ (800b878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a39      	ldr	r2, [pc, #228]	@ (800b878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b798:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b79a:	f7fc ff61 	bl	8008660 <HAL_GetTick>
 800b79e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7a0:	e009      	b.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7a2:	f7fc ff5d 	bl	8008660 <HAL_GetTick>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d902      	bls.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	74fb      	strb	r3, [r7, #19]
        break;
 800b7b4:	e005      	b.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7b6:	4b30      	ldr	r3, [pc, #192]	@ (800b878 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d0ef      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b7c2:	7cfb      	ldrb	r3, [r7, #19]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d159      	bne.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b7c8:	4b2a      	ldr	r3, [pc, #168]	@ (800b874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b7ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b7d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d01e      	beq.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d019      	beq.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b7e4:	4b23      	ldr	r3, [pc, #140]	@ (800b874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b7e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b7ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b7f0:	4b20      	ldr	r3, [pc, #128]	@ (800b874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7f6:	4a1f      	ldr	r2, [pc, #124]	@ (800b874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b7f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b7fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b800:	4b1c      	ldr	r3, [pc, #112]	@ (800b874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b806:	4a1b      	ldr	r2, [pc, #108]	@ (800b874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b80c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b810:	4a18      	ldr	r2, [pc, #96]	@ (800b874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	f003 0301 	and.w	r3, r3, #1
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d016      	beq.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b822:	f7fc ff1d 	bl	8008660 <HAL_GetTick>
 800b826:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b828:	e00b      	b.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b82a:	f7fc ff19 	bl	8008660 <HAL_GetTick>
 800b82e:	4602      	mov	r2, r0
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	1ad3      	subs	r3, r2, r3
 800b834:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b838:	4293      	cmp	r3, r2
 800b83a:	d902      	bls.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b83c:	2303      	movs	r3, #3
 800b83e:	74fb      	strb	r3, [r7, #19]
            break;
 800b840:	e006      	b.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b842:	4b0c      	ldr	r3, [pc, #48]	@ (800b874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b848:	f003 0302 	and.w	r3, r3, #2
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d0ec      	beq.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b850:	7cfb      	ldrb	r3, [r7, #19]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10b      	bne.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b856:	4b07      	ldr	r3, [pc, #28]	@ (800b874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b85c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b864:	4903      	ldr	r1, [pc, #12]	@ (800b874 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b866:	4313      	orrs	r3, r2
 800b868:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800b86c:	e008      	b.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b86e:	7cfb      	ldrb	r3, [r7, #19]
 800b870:	74bb      	strb	r3, [r7, #18]
 800b872:	e005      	b.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b874:	40021000 	.word	0x40021000
 800b878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b87c:	7cfb      	ldrb	r3, [r7, #19]
 800b87e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b880:	7c7b      	ldrb	r3, [r7, #17]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d105      	bne.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b886:	4ba7      	ldr	r3, [pc, #668]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b88a:	4aa6      	ldr	r2, [pc, #664]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b88c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b890:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f003 0301 	and.w	r3, r3, #1
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00a      	beq.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b89e:	4ba1      	ldr	r3, [pc, #644]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b8a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8a4:	f023 0203 	bic.w	r2, r3, #3
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	499d      	ldr	r1, [pc, #628]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f003 0302 	and.w	r3, r3, #2
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00a      	beq.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b8c0:	4b98      	ldr	r3, [pc, #608]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b8c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8c6:	f023 020c 	bic.w	r2, r3, #12
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	4995      	ldr	r1, [pc, #596]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f003 0304 	and.w	r3, r3, #4
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d00a      	beq.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b8e2:	4b90      	ldr	r3, [pc, #576]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b8e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	498c      	ldr	r1, [pc, #560]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 0308 	and.w	r3, r3, #8
 800b900:	2b00      	cmp	r3, #0
 800b902:	d00a      	beq.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b904:	4b87      	ldr	r3, [pc, #540]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b90a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	4984      	ldr	r1, [pc, #528]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b914:	4313      	orrs	r3, r2
 800b916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f003 0310 	and.w	r3, r3, #16
 800b922:	2b00      	cmp	r3, #0
 800b924:	d00a      	beq.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b926:	4b7f      	ldr	r3, [pc, #508]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b92c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	695b      	ldr	r3, [r3, #20]
 800b934:	497b      	ldr	r1, [pc, #492]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b936:	4313      	orrs	r3, r2
 800b938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f003 0320 	and.w	r3, r3, #32
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00a      	beq.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b948:	4b76      	ldr	r3, [pc, #472]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b94a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b94e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	699b      	ldr	r3, [r3, #24]
 800b956:	4973      	ldr	r1, [pc, #460]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b958:	4313      	orrs	r3, r2
 800b95a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00a      	beq.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b96a:	4b6e      	ldr	r3, [pc, #440]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b96c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b970:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	69db      	ldr	r3, [r3, #28]
 800b978:	496a      	ldr	r1, [pc, #424]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b97a:	4313      	orrs	r3, r2
 800b97c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00a      	beq.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b98c:	4b65      	ldr	r3, [pc, #404]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b98e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b992:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a1b      	ldr	r3, [r3, #32]
 800b99a:	4962      	ldr	r1, [pc, #392]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b99c:	4313      	orrs	r3, r2
 800b99e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00a      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b9ae:	4b5d      	ldr	r3, [pc, #372]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9bc:	4959      	ldr	r1, [pc, #356]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00a      	beq.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b9d0:	4b54      	ldr	r3, [pc, #336]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b9d6:	f023 0203 	bic.w	r2, r3, #3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9de:	4951      	ldr	r1, [pc, #324]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00a      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b9f2:	4b4c      	ldr	r3, [pc, #304]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b9f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba00:	4948      	ldr	r1, [pc, #288]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba02:	4313      	orrs	r3, r2
 800ba04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d015      	beq.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ba14:	4b43      	ldr	r3, [pc, #268]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba22:	4940      	ldr	r1, [pc, #256]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba24:	4313      	orrs	r3, r2
 800ba26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba32:	d105      	bne.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ba34:	4b3b      	ldr	r3, [pc, #236]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	4a3a      	ldr	r2, [pc, #232]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba3e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d015      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ba4c:	4b35      	ldr	r3, [pc, #212]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba5a:	4932      	ldr	r1, [pc, #200]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba6a:	d105      	bne.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ba6c:	4b2d      	ldr	r3, [pc, #180]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	4a2c      	ldr	r2, [pc, #176]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba76:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d015      	beq.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ba84:	4b27      	ldr	r3, [pc, #156]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba8a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba92:	4924      	ldr	r1, [pc, #144]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba94:	4313      	orrs	r3, r2
 800ba96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800baa2:	d105      	bne.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800baa4:	4b1f      	ldr	r3, [pc, #124]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	4a1e      	ldr	r2, [pc, #120]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800baaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800baae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d015      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800babc:	4b19      	ldr	r3, [pc, #100]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800babe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bac2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baca:	4916      	ldr	r1, [pc, #88]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bacc:	4313      	orrs	r3, r2
 800bace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bada:	d105      	bne.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800badc:	4b11      	ldr	r3, [pc, #68]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	4a10      	ldr	r2, [pc, #64]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bae6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d019      	beq.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800baf4:	4b0b      	ldr	r3, [pc, #44]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800baf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bafa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb02:	4908      	ldr	r1, [pc, #32]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb04:	4313      	orrs	r3, r2
 800bb06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb12:	d109      	bne.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bb14:	4b03      	ldr	r3, [pc, #12]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	4a02      	ldr	r2, [pc, #8]	@ (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb1e:	60d3      	str	r3, [r2, #12]
 800bb20:	e002      	b.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800bb22:	bf00      	nop
 800bb24:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d015      	beq.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bb34:	4b29      	ldr	r3, [pc, #164]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bb36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb3a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb42:	4926      	ldr	r1, [pc, #152]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bb44:	4313      	orrs	r3, r2
 800bb46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb52:	d105      	bne.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bb54:	4b21      	ldr	r3, [pc, #132]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	4a20      	ldr	r2, [pc, #128]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bb5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb5e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d015      	beq.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800bb6c:	4b1b      	ldr	r3, [pc, #108]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bb6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb72:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb7a:	4918      	ldr	r1, [pc, #96]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb8a:	d105      	bne.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bb8c:	4b13      	ldr	r3, [pc, #76]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	4a12      	ldr	r2, [pc, #72]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bb92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb96:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d015      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bba4:	4b0d      	ldr	r3, [pc, #52]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bbaa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbb2:	490a      	ldr	r1, [pc, #40]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bbc2:	d105      	bne.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bbc4:	4b05      	ldr	r3, [pc, #20]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	4a04      	ldr	r2, [pc, #16]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bbca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bbce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800bbd0:	7cbb      	ldrb	r3, [r7, #18]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3718      	adds	r7, #24
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	40021000 	.word	0x40021000

0800bbe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d101      	bne.n	800bbf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e054      	b.n	800bc9c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d111      	bne.n	800bc22 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f001 fee2 	bl	800d9d0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d102      	bne.n	800bc1a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a23      	ldr	r2, [pc, #140]	@ (800bca4 <HAL_TIM_Base_Init+0xc4>)
 800bc18:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2202      	movs	r2, #2
 800bc26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	3304      	adds	r3, #4
 800bc32:	4619      	mov	r1, r3
 800bc34:	4610      	mov	r0, r2
 800bc36:	f001 fa2b 	bl	800d090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2201      	movs	r2, #1
 800bc46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2201      	movs	r2, #1
 800bc56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2201      	movs	r2, #1
 800bc66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2201      	movs	r2, #1
 800bc76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2201      	movs	r2, #1
 800bc86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2201      	movs	r2, #1
 800bc96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3708      	adds	r7, #8
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	08007e89 	.word	0x08007e89

0800bca8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d001      	beq.n	800bcc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	e04c      	b.n	800bd5a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2202      	movs	r2, #2
 800bcc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a26      	ldr	r2, [pc, #152]	@ (800bd68 <HAL_TIM_Base_Start+0xc0>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d022      	beq.n	800bd18 <HAL_TIM_Base_Start+0x70>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcda:	d01d      	beq.n	800bd18 <HAL_TIM_Base_Start+0x70>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a22      	ldr	r2, [pc, #136]	@ (800bd6c <HAL_TIM_Base_Start+0xc4>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d018      	beq.n	800bd18 <HAL_TIM_Base_Start+0x70>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a21      	ldr	r2, [pc, #132]	@ (800bd70 <HAL_TIM_Base_Start+0xc8>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d013      	beq.n	800bd18 <HAL_TIM_Base_Start+0x70>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a1f      	ldr	r2, [pc, #124]	@ (800bd74 <HAL_TIM_Base_Start+0xcc>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d00e      	beq.n	800bd18 <HAL_TIM_Base_Start+0x70>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a1e      	ldr	r2, [pc, #120]	@ (800bd78 <HAL_TIM_Base_Start+0xd0>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d009      	beq.n	800bd18 <HAL_TIM_Base_Start+0x70>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a1c      	ldr	r2, [pc, #112]	@ (800bd7c <HAL_TIM_Base_Start+0xd4>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d004      	beq.n	800bd18 <HAL_TIM_Base_Start+0x70>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4a1b      	ldr	r2, [pc, #108]	@ (800bd80 <HAL_TIM_Base_Start+0xd8>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d115      	bne.n	800bd44 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	689a      	ldr	r2, [r3, #8]
 800bd1e:	4b19      	ldr	r3, [pc, #100]	@ (800bd84 <HAL_TIM_Base_Start+0xdc>)
 800bd20:	4013      	ands	r3, r2
 800bd22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2b06      	cmp	r3, #6
 800bd28:	d015      	beq.n	800bd56 <HAL_TIM_Base_Start+0xae>
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd30:	d011      	beq.n	800bd56 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f042 0201 	orr.w	r2, r2, #1
 800bd40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd42:	e008      	b.n	800bd56 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f042 0201 	orr.w	r2, r2, #1
 800bd52:	601a      	str	r2, [r3, #0]
 800bd54:	e000      	b.n	800bd58 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3714      	adds	r7, #20
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop
 800bd68:	40012c00 	.word	0x40012c00
 800bd6c:	40000400 	.word	0x40000400
 800bd70:	40000800 	.word	0x40000800
 800bd74:	40000c00 	.word	0x40000c00
 800bd78:	40013400 	.word	0x40013400
 800bd7c:	40014000 	.word	0x40014000
 800bd80:	40015000 	.word	0x40015000
 800bd84:	00010007 	.word	0x00010007

0800bd88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd96:	b2db      	uxtb	r3, r3
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d001      	beq.n	800bda0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	e054      	b.n	800be4a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2202      	movs	r2, #2
 800bda4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	68da      	ldr	r2, [r3, #12]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f042 0201 	orr.w	r2, r2, #1
 800bdb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a26      	ldr	r2, [pc, #152]	@ (800be58 <HAL_TIM_Base_Start_IT+0xd0>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d022      	beq.n	800be08 <HAL_TIM_Base_Start_IT+0x80>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdca:	d01d      	beq.n	800be08 <HAL_TIM_Base_Start_IT+0x80>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a22      	ldr	r2, [pc, #136]	@ (800be5c <HAL_TIM_Base_Start_IT+0xd4>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d018      	beq.n	800be08 <HAL_TIM_Base_Start_IT+0x80>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a21      	ldr	r2, [pc, #132]	@ (800be60 <HAL_TIM_Base_Start_IT+0xd8>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d013      	beq.n	800be08 <HAL_TIM_Base_Start_IT+0x80>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a1f      	ldr	r2, [pc, #124]	@ (800be64 <HAL_TIM_Base_Start_IT+0xdc>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d00e      	beq.n	800be08 <HAL_TIM_Base_Start_IT+0x80>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a1e      	ldr	r2, [pc, #120]	@ (800be68 <HAL_TIM_Base_Start_IT+0xe0>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d009      	beq.n	800be08 <HAL_TIM_Base_Start_IT+0x80>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a1c      	ldr	r2, [pc, #112]	@ (800be6c <HAL_TIM_Base_Start_IT+0xe4>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d004      	beq.n	800be08 <HAL_TIM_Base_Start_IT+0x80>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a1b      	ldr	r2, [pc, #108]	@ (800be70 <HAL_TIM_Base_Start_IT+0xe8>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d115      	bne.n	800be34 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	689a      	ldr	r2, [r3, #8]
 800be0e:	4b19      	ldr	r3, [pc, #100]	@ (800be74 <HAL_TIM_Base_Start_IT+0xec>)
 800be10:	4013      	ands	r3, r2
 800be12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2b06      	cmp	r3, #6
 800be18:	d015      	beq.n	800be46 <HAL_TIM_Base_Start_IT+0xbe>
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be20:	d011      	beq.n	800be46 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f042 0201 	orr.w	r2, r2, #1
 800be30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be32:	e008      	b.n	800be46 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f042 0201 	orr.w	r2, r2, #1
 800be42:	601a      	str	r2, [r3, #0]
 800be44:	e000      	b.n	800be48 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3714      	adds	r7, #20
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop
 800be58:	40012c00 	.word	0x40012c00
 800be5c:	40000400 	.word	0x40000400
 800be60:	40000800 	.word	0x40000800
 800be64:	40000c00 	.word	0x40000c00
 800be68:	40013400 	.word	0x40013400
 800be6c:	40014000 	.word	0x40014000
 800be70:	40015000 	.word	0x40015000
 800be74:	00010007 	.word	0x00010007

0800be78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d101      	bne.n	800be8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800be86:	2301      	movs	r3, #1
 800be88:	e054      	b.n	800bf34 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be90:	b2db      	uxtb	r3, r3
 800be92:	2b00      	cmp	r3, #0
 800be94:	d111      	bne.n	800beba <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2200      	movs	r2, #0
 800be9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f001 fd96 	bl	800d9d0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d102      	bne.n	800beb2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	4a23      	ldr	r2, [pc, #140]	@ (800bf3c <HAL_TIM_PWM_Init+0xc4>)
 800beb0:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2202      	movs	r2, #2
 800bebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	3304      	adds	r3, #4
 800beca:	4619      	mov	r1, r3
 800becc:	4610      	mov	r0, r2
 800bece:	f001 f8df 	bl	800d090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2201      	movs	r2, #1
 800bed6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2201      	movs	r2, #1
 800bede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2201      	movs	r2, #1
 800bee6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2201      	movs	r2, #1
 800beee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2201      	movs	r2, #1
 800bef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2201      	movs	r2, #1
 800befe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2201      	movs	r2, #1
 800bf06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2201      	movs	r2, #1
 800bf16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2201      	movs	r2, #1
 800bf26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	08007e3d 	.word	0x08007e3d

0800bf40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d109      	bne.n	800bf64 <HAL_TIM_PWM_Start+0x24>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	bf14      	ite	ne
 800bf5c:	2301      	movne	r3, #1
 800bf5e:	2300      	moveq	r3, #0
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	e03c      	b.n	800bfde <HAL_TIM_PWM_Start+0x9e>
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	2b04      	cmp	r3, #4
 800bf68:	d109      	bne.n	800bf7e <HAL_TIM_PWM_Start+0x3e>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	bf14      	ite	ne
 800bf76:	2301      	movne	r3, #1
 800bf78:	2300      	moveq	r3, #0
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	e02f      	b.n	800bfde <HAL_TIM_PWM_Start+0x9e>
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	2b08      	cmp	r3, #8
 800bf82:	d109      	bne.n	800bf98 <HAL_TIM_PWM_Start+0x58>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	bf14      	ite	ne
 800bf90:	2301      	movne	r3, #1
 800bf92:	2300      	moveq	r3, #0
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	e022      	b.n	800bfde <HAL_TIM_PWM_Start+0x9e>
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	2b0c      	cmp	r3, #12
 800bf9c:	d109      	bne.n	800bfb2 <HAL_TIM_PWM_Start+0x72>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	bf14      	ite	ne
 800bfaa:	2301      	movne	r3, #1
 800bfac:	2300      	moveq	r3, #0
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	e015      	b.n	800bfde <HAL_TIM_PWM_Start+0x9e>
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	2b10      	cmp	r3, #16
 800bfb6:	d109      	bne.n	800bfcc <HAL_TIM_PWM_Start+0x8c>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	bf14      	ite	ne
 800bfc4:	2301      	movne	r3, #1
 800bfc6:	2300      	moveq	r3, #0
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	e008      	b.n	800bfde <HAL_TIM_PWM_Start+0x9e>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	bf14      	ite	ne
 800bfd8:	2301      	movne	r3, #1
 800bfda:	2300      	moveq	r3, #0
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d001      	beq.n	800bfe6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e0a6      	b.n	800c134 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d104      	bne.n	800bff6 <HAL_TIM_PWM_Start+0xb6>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2202      	movs	r2, #2
 800bff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bff4:	e023      	b.n	800c03e <HAL_TIM_PWM_Start+0xfe>
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	2b04      	cmp	r3, #4
 800bffa:	d104      	bne.n	800c006 <HAL_TIM_PWM_Start+0xc6>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2202      	movs	r2, #2
 800c000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c004:	e01b      	b.n	800c03e <HAL_TIM_PWM_Start+0xfe>
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	2b08      	cmp	r3, #8
 800c00a:	d104      	bne.n	800c016 <HAL_TIM_PWM_Start+0xd6>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2202      	movs	r2, #2
 800c010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c014:	e013      	b.n	800c03e <HAL_TIM_PWM_Start+0xfe>
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	2b0c      	cmp	r3, #12
 800c01a:	d104      	bne.n	800c026 <HAL_TIM_PWM_Start+0xe6>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2202      	movs	r2, #2
 800c020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c024:	e00b      	b.n	800c03e <HAL_TIM_PWM_Start+0xfe>
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	2b10      	cmp	r3, #16
 800c02a:	d104      	bne.n	800c036 <HAL_TIM_PWM_Start+0xf6>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2202      	movs	r2, #2
 800c030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c034:	e003      	b.n	800c03e <HAL_TIM_PWM_Start+0xfe>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2202      	movs	r2, #2
 800c03a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2201      	movs	r2, #1
 800c044:	6839      	ldr	r1, [r7, #0]
 800c046:	4618      	mov	r0, r3
 800c048:	f001 fc9c 	bl	800d984 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a3a      	ldr	r2, [pc, #232]	@ (800c13c <HAL_TIM_PWM_Start+0x1fc>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d018      	beq.n	800c088 <HAL_TIM_PWM_Start+0x148>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a39      	ldr	r2, [pc, #228]	@ (800c140 <HAL_TIM_PWM_Start+0x200>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d013      	beq.n	800c088 <HAL_TIM_PWM_Start+0x148>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a37      	ldr	r2, [pc, #220]	@ (800c144 <HAL_TIM_PWM_Start+0x204>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d00e      	beq.n	800c088 <HAL_TIM_PWM_Start+0x148>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a36      	ldr	r2, [pc, #216]	@ (800c148 <HAL_TIM_PWM_Start+0x208>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d009      	beq.n	800c088 <HAL_TIM_PWM_Start+0x148>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a34      	ldr	r2, [pc, #208]	@ (800c14c <HAL_TIM_PWM_Start+0x20c>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d004      	beq.n	800c088 <HAL_TIM_PWM_Start+0x148>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a33      	ldr	r2, [pc, #204]	@ (800c150 <HAL_TIM_PWM_Start+0x210>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d101      	bne.n	800c08c <HAL_TIM_PWM_Start+0x14c>
 800c088:	2301      	movs	r3, #1
 800c08a:	e000      	b.n	800c08e <HAL_TIM_PWM_Start+0x14e>
 800c08c:	2300      	movs	r3, #0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d007      	beq.n	800c0a2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c0a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a25      	ldr	r2, [pc, #148]	@ (800c13c <HAL_TIM_PWM_Start+0x1fc>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d022      	beq.n	800c0f2 <HAL_TIM_PWM_Start+0x1b2>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0b4:	d01d      	beq.n	800c0f2 <HAL_TIM_PWM_Start+0x1b2>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a26      	ldr	r2, [pc, #152]	@ (800c154 <HAL_TIM_PWM_Start+0x214>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d018      	beq.n	800c0f2 <HAL_TIM_PWM_Start+0x1b2>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a24      	ldr	r2, [pc, #144]	@ (800c158 <HAL_TIM_PWM_Start+0x218>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d013      	beq.n	800c0f2 <HAL_TIM_PWM_Start+0x1b2>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4a23      	ldr	r2, [pc, #140]	@ (800c15c <HAL_TIM_PWM_Start+0x21c>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d00e      	beq.n	800c0f2 <HAL_TIM_PWM_Start+0x1b2>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4a19      	ldr	r2, [pc, #100]	@ (800c140 <HAL_TIM_PWM_Start+0x200>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d009      	beq.n	800c0f2 <HAL_TIM_PWM_Start+0x1b2>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4a18      	ldr	r2, [pc, #96]	@ (800c144 <HAL_TIM_PWM_Start+0x204>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d004      	beq.n	800c0f2 <HAL_TIM_PWM_Start+0x1b2>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a18      	ldr	r2, [pc, #96]	@ (800c150 <HAL_TIM_PWM_Start+0x210>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d115      	bne.n	800c11e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	689a      	ldr	r2, [r3, #8]
 800c0f8:	4b19      	ldr	r3, [pc, #100]	@ (800c160 <HAL_TIM_PWM_Start+0x220>)
 800c0fa:	4013      	ands	r3, r2
 800c0fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2b06      	cmp	r3, #6
 800c102:	d015      	beq.n	800c130 <HAL_TIM_PWM_Start+0x1f0>
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c10a:	d011      	beq.n	800c130 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f042 0201 	orr.w	r2, r2, #1
 800c11a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c11c:	e008      	b.n	800c130 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f042 0201 	orr.w	r2, r2, #1
 800c12c:	601a      	str	r2, [r3, #0]
 800c12e:	e000      	b.n	800c132 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c130:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	3710      	adds	r7, #16
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	40012c00 	.word	0x40012c00
 800c140:	40013400 	.word	0x40013400
 800c144:	40014000 	.word	0x40014000
 800c148:	40014400 	.word	0x40014400
 800c14c:	40014800 	.word	0x40014800
 800c150:	40015000 	.word	0x40015000
 800c154:	40000400 	.word	0x40000400
 800c158:	40000800 	.word	0x40000800
 800c15c:	40000c00 	.word	0x40000c00
 800c160:	00010007 	.word	0x00010007

0800c164 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d101      	bne.n	800c178 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	e04c      	b.n	800c212 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	2b00      	cmp	r3, #0
 800c182:	d111      	bne.n	800c1a8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f001 fc1f 	bl	800d9d0 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c196:	2b00      	cmp	r3, #0
 800c198:	d102      	bne.n	800c1a0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a1f      	ldr	r2, [pc, #124]	@ (800c21c <HAL_TIM_OnePulse_Init+0xb8>)
 800c19e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2202      	movs	r2, #2
 800c1ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	3304      	adds	r3, #4
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	4610      	mov	r0, r2
 800c1bc:	f000 ff68 	bl	800d090 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f022 0208 	bic.w	r2, r2, #8
 800c1ce:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	6819      	ldr	r1, [r3, #0]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	683a      	ldr	r2, [r7, #0]
 800c1dc:	430a      	orrs	r2, r1
 800c1de:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c210:	2300      	movs	r3, #0
}
 800c212:	4618      	mov	r0, r3
 800c214:	3708      	adds	r7, #8
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	0800c221 	.word	0x0800c221

0800c220 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800c228:	bf00      	nop
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c244:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c24c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c254:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c25c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c25e:	7bfb      	ldrb	r3, [r7, #15]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d108      	bne.n	800c276 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c264:	7bbb      	ldrb	r3, [r7, #14]
 800c266:	2b01      	cmp	r3, #1
 800c268:	d105      	bne.n	800c276 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c26a:	7b7b      	ldrb	r3, [r7, #13]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d102      	bne.n	800c276 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c270:	7b3b      	ldrb	r3, [r7, #12]
 800c272:	2b01      	cmp	r3, #1
 800c274:	d001      	beq.n	800c27a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	e059      	b.n	800c32e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2202      	movs	r2, #2
 800c27e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2202      	movs	r2, #2
 800c286:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2202      	movs	r2, #2
 800c28e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2202      	movs	r2, #2
 800c296:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	68da      	ldr	r2, [r3, #12]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f042 0202 	orr.w	r2, r2, #2
 800c2a8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	68da      	ldr	r2, [r3, #12]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f042 0204 	orr.w	r2, r2, #4
 800c2b8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2201      	movs	r2, #1
 800c2c0:	2100      	movs	r1, #0
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f001 fb5e 	bl	800d984 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	2104      	movs	r1, #4
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f001 fb57 	bl	800d984 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a17      	ldr	r2, [pc, #92]	@ (800c338 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d018      	beq.n	800c312 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a15      	ldr	r2, [pc, #84]	@ (800c33c <HAL_TIM_OnePulse_Start_IT+0x108>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d013      	beq.n	800c312 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4a14      	ldr	r2, [pc, #80]	@ (800c340 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d00e      	beq.n	800c312 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a12      	ldr	r2, [pc, #72]	@ (800c344 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d009      	beq.n	800c312 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a11      	ldr	r2, [pc, #68]	@ (800c348 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d004      	beq.n	800c312 <HAL_TIM_OnePulse_Start_IT+0xde>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a0f      	ldr	r2, [pc, #60]	@ (800c34c <HAL_TIM_OnePulse_Start_IT+0x118>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d101      	bne.n	800c316 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800c312:	2301      	movs	r3, #1
 800c314:	e000      	b.n	800c318 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800c316:	2300      	movs	r3, #0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d007      	beq.n	800c32c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c32a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	40012c00 	.word	0x40012c00
 800c33c:	40013400 	.word	0x40013400
 800c340:	40014000 	.word	0x40014000
 800c344:	40014400 	.word	0x40014400
 800c348:	40014800 	.word	0x40014800
 800c34c:	40015000 	.word	0x40015000

0800c350 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d101      	bne.n	800c364 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c360:	2301      	movs	r3, #1
 800c362:	e0a2      	b.n	800c4aa <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d111      	bne.n	800c394 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f001 fb29 	bl	800d9d0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c382:	2b00      	cmp	r3, #0
 800c384:	d102      	bne.n	800c38c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a4a      	ldr	r2, [pc, #296]	@ (800c4b4 <HAL_TIM_Encoder_Init+0x164>)
 800c38a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2202      	movs	r2, #2
 800c398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	6812      	ldr	r2, [r2, #0]
 800c3a6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800c3aa:	f023 0307 	bic.w	r3, r3, #7
 800c3ae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	3304      	adds	r3, #4
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	4610      	mov	r0, r2
 800c3bc:	f000 fe68 	bl	800d090 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	699b      	ldr	r3, [r3, #24]
 800c3ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	697a      	ldr	r2, [r7, #20]
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c3e8:	f023 0303 	bic.w	r3, r3, #3
 800c3ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	689a      	ldr	r2, [r3, #8]
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	699b      	ldr	r3, [r3, #24]
 800c3f6:	021b      	lsls	r3, r3, #8
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	693a      	ldr	r2, [r7, #16]
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800c406:	f023 030c 	bic.w	r3, r3, #12
 800c40a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c412:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	68da      	ldr	r2, [r3, #12]
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	69db      	ldr	r3, [r3, #28]
 800c420:	021b      	lsls	r3, r3, #8
 800c422:	4313      	orrs	r3, r2
 800c424:	693a      	ldr	r2, [r7, #16]
 800c426:	4313      	orrs	r3, r2
 800c428:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	011a      	lsls	r2, r3, #4
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	6a1b      	ldr	r3, [r3, #32]
 800c434:	031b      	lsls	r3, r3, #12
 800c436:	4313      	orrs	r3, r2
 800c438:	693a      	ldr	r2, [r7, #16]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800c444:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800c44c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	685a      	ldr	r2, [r3, #4]
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	695b      	ldr	r3, [r3, #20]
 800c456:	011b      	lsls	r3, r3, #4
 800c458:	4313      	orrs	r3, r2
 800c45a:	68fa      	ldr	r2, [r7, #12]
 800c45c:	4313      	orrs	r3, r2
 800c45e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	697a      	ldr	r2, [r7, #20]
 800c466:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	693a      	ldr	r2, [r7, #16]
 800c46e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	68fa      	ldr	r2, [r7, #12]
 800c476:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2201      	movs	r2, #1
 800c48c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3718      	adds	r7, #24
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	08007f31 	.word	0x08007f31

0800c4b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c4c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c4d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c4d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c4e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d110      	bne.n	800c50a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c4e8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d102      	bne.n	800c4f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c4ee:	7b7b      	ldrb	r3, [r7, #13]
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d001      	beq.n	800c4f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	e069      	b.n	800c5cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2202      	movs	r2, #2
 800c4fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2202      	movs	r2, #2
 800c504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c508:	e031      	b.n	800c56e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	2b04      	cmp	r3, #4
 800c50e:	d110      	bne.n	800c532 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c510:	7bbb      	ldrb	r3, [r7, #14]
 800c512:	2b01      	cmp	r3, #1
 800c514:	d102      	bne.n	800c51c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c516:	7b3b      	ldrb	r3, [r7, #12]
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d001      	beq.n	800c520 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800c51c:	2301      	movs	r3, #1
 800c51e:	e055      	b.n	800c5cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2202      	movs	r2, #2
 800c524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2202      	movs	r2, #2
 800c52c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c530:	e01d      	b.n	800c56e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c532:	7bfb      	ldrb	r3, [r7, #15]
 800c534:	2b01      	cmp	r3, #1
 800c536:	d108      	bne.n	800c54a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c538:	7bbb      	ldrb	r3, [r7, #14]
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d105      	bne.n	800c54a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c53e:	7b7b      	ldrb	r3, [r7, #13]
 800c540:	2b01      	cmp	r3, #1
 800c542:	d102      	bne.n	800c54a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c544:	7b3b      	ldrb	r3, [r7, #12]
 800c546:	2b01      	cmp	r3, #1
 800c548:	d001      	beq.n	800c54e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e03e      	b.n	800c5cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2202      	movs	r2, #2
 800c552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2202      	movs	r2, #2
 800c55a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2202      	movs	r2, #2
 800c562:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2202      	movs	r2, #2
 800c56a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d003      	beq.n	800c57c <HAL_TIM_Encoder_Start+0xc4>
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	2b04      	cmp	r3, #4
 800c578:	d008      	beq.n	800c58c <HAL_TIM_Encoder_Start+0xd4>
 800c57a:	e00f      	b.n	800c59c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2201      	movs	r2, #1
 800c582:	2100      	movs	r1, #0
 800c584:	4618      	mov	r0, r3
 800c586:	f001 f9fd 	bl	800d984 <TIM_CCxChannelCmd>
      break;
 800c58a:	e016      	b.n	800c5ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2201      	movs	r2, #1
 800c592:	2104      	movs	r1, #4
 800c594:	4618      	mov	r0, r3
 800c596:	f001 f9f5 	bl	800d984 <TIM_CCxChannelCmd>
      break;
 800c59a:	e00e      	b.n	800c5ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f001 f9ed 	bl	800d984 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	2104      	movs	r1, #4
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f001 f9e6 	bl	800d984 <TIM_CCxChannelCmd>
      break;
 800c5b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f042 0201 	orr.w	r2, r2, #1
 800c5c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c5ca:	2300      	movs	r3, #0
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3710      	adds	r7, #16
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	691b      	ldr	r3, [r3, #16]
 800c5ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	f003 0302 	and.w	r3, r3, #2
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d026      	beq.n	800c644 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f003 0302 	and.w	r3, r3, #2
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d021      	beq.n	800c644 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f06f 0202 	mvn.w	r2, #2
 800c608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2201      	movs	r2, #1
 800c60e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	699b      	ldr	r3, [r3, #24]
 800c616:	f003 0303 	and.w	r3, r3, #3
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d005      	beq.n	800c62a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	4798      	blx	r3
 800c628:	e009      	b.n	800c63e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	f003 0304 	and.w	r3, r3, #4
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d026      	beq.n	800c69c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f003 0304 	and.w	r3, r3, #4
 800c654:	2b00      	cmp	r3, #0
 800c656:	d021      	beq.n	800c69c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f06f 0204 	mvn.w	r2, #4
 800c660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2202      	movs	r2, #2
 800c666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	699b      	ldr	r3, [r3, #24]
 800c66e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c672:	2b00      	cmp	r3, #0
 800c674:	d005      	beq.n	800c682 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	4798      	blx	r3
 800c680:	e009      	b.n	800c696 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	f003 0308 	and.w	r3, r3, #8
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d026      	beq.n	800c6f4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	f003 0308 	and.w	r3, r3, #8
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d021      	beq.n	800c6f4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f06f 0208 	mvn.w	r2, #8
 800c6b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2204      	movs	r2, #4
 800c6be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	69db      	ldr	r3, [r3, #28]
 800c6c6:	f003 0303 	and.w	r3, r3, #3
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d005      	beq.n	800c6da <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	4798      	blx	r3
 800c6d8:	e009      	b.n	800c6ee <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	f003 0310 	and.w	r3, r3, #16
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d026      	beq.n	800c74c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f003 0310 	and.w	r3, r3, #16
 800c704:	2b00      	cmp	r3, #0
 800c706:	d021      	beq.n	800c74c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f06f 0210 	mvn.w	r2, #16
 800c710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2208      	movs	r2, #8
 800c716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	69db      	ldr	r3, [r3, #28]
 800c71e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c722:	2b00      	cmp	r3, #0
 800c724:	d005      	beq.n	800c732 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	4798      	blx	r3
 800c730:	e009      	b.n	800c746 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	f003 0301 	and.w	r3, r3, #1
 800c752:	2b00      	cmp	r3, #0
 800c754:	d00e      	beq.n	800c774 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f003 0301 	and.w	r3, r3, #1
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d009      	beq.n	800c774 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f06f 0201 	mvn.w	r2, #1
 800c768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d104      	bne.n	800c788 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c784:	2b00      	cmp	r3, #0
 800c786:	d00e      	beq.n	800c7a6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d009      	beq.n	800c7a6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c79a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d00e      	beq.n	800c7ce <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d009      	beq.n	800c7ce <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c7c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d00e      	beq.n	800c7f6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d009      	beq.n	800c7f6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c7ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	f003 0320 	and.w	r3, r3, #32
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d00e      	beq.n	800c81e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f003 0320 	and.w	r3, r3, #32
 800c806:	2b00      	cmp	r3, #0
 800c808:	d009      	beq.n	800c81e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f06f 0220 	mvn.w	r2, #32
 800c812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00e      	beq.n	800c846 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d009      	beq.n	800c846 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800c83a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d00e      	beq.n	800c86e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c856:	2b00      	cmp	r3, #0
 800c858:	d009      	beq.n	800c86e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800c862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c874:	2b00      	cmp	r3, #0
 800c876:	d00e      	beq.n	800c896 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d009      	beq.n	800c896 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800c88a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d00e      	beq.n	800c8be <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d009      	beq.n	800c8be <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800c8b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8be:	bf00      	nop
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
	...

0800c8c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b086      	sub	sp, #24
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d101      	bne.n	800c8e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c8e2:	2302      	movs	r3, #2
 800c8e4:	e0ff      	b.n	800cae6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2b14      	cmp	r3, #20
 800c8f2:	f200 80f0 	bhi.w	800cad6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c8f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c8fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8fc:	0800c951 	.word	0x0800c951
 800c900:	0800cad7 	.word	0x0800cad7
 800c904:	0800cad7 	.word	0x0800cad7
 800c908:	0800cad7 	.word	0x0800cad7
 800c90c:	0800c991 	.word	0x0800c991
 800c910:	0800cad7 	.word	0x0800cad7
 800c914:	0800cad7 	.word	0x0800cad7
 800c918:	0800cad7 	.word	0x0800cad7
 800c91c:	0800c9d3 	.word	0x0800c9d3
 800c920:	0800cad7 	.word	0x0800cad7
 800c924:	0800cad7 	.word	0x0800cad7
 800c928:	0800cad7 	.word	0x0800cad7
 800c92c:	0800ca13 	.word	0x0800ca13
 800c930:	0800cad7 	.word	0x0800cad7
 800c934:	0800cad7 	.word	0x0800cad7
 800c938:	0800cad7 	.word	0x0800cad7
 800c93c:	0800ca55 	.word	0x0800ca55
 800c940:	0800cad7 	.word	0x0800cad7
 800c944:	0800cad7 	.word	0x0800cad7
 800c948:	0800cad7 	.word	0x0800cad7
 800c94c:	0800ca95 	.word	0x0800ca95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	68b9      	ldr	r1, [r7, #8]
 800c956:	4618      	mov	r0, r3
 800c958:	f000 fc4e 	bl	800d1f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	699a      	ldr	r2, [r3, #24]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f042 0208 	orr.w	r2, r2, #8
 800c96a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	699a      	ldr	r2, [r3, #24]
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f022 0204 	bic.w	r2, r2, #4
 800c97a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	6999      	ldr	r1, [r3, #24]
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	691a      	ldr	r2, [r3, #16]
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	430a      	orrs	r2, r1
 800c98c:	619a      	str	r2, [r3, #24]
      break;
 800c98e:	e0a5      	b.n	800cadc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	68b9      	ldr	r1, [r7, #8]
 800c996:	4618      	mov	r0, r3
 800c998:	f000 fcc8 	bl	800d32c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	699a      	ldr	r2, [r3, #24]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c9aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	699a      	ldr	r2, [r3, #24]
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c9ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	6999      	ldr	r1, [r3, #24]
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	691b      	ldr	r3, [r3, #16]
 800c9c6:	021a      	lsls	r2, r3, #8
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	430a      	orrs	r2, r1
 800c9ce:	619a      	str	r2, [r3, #24]
      break;
 800c9d0:	e084      	b.n	800cadc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	68b9      	ldr	r1, [r7, #8]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f000 fd3b 	bl	800d454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	69da      	ldr	r2, [r3, #28]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f042 0208 	orr.w	r2, r2, #8
 800c9ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	69da      	ldr	r2, [r3, #28]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f022 0204 	bic.w	r2, r2, #4
 800c9fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	69d9      	ldr	r1, [r3, #28]
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	691a      	ldr	r2, [r3, #16]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	430a      	orrs	r2, r1
 800ca0e:	61da      	str	r2, [r3, #28]
      break;
 800ca10:	e064      	b.n	800cadc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	68b9      	ldr	r1, [r7, #8]
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f000 fdad 	bl	800d578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	69da      	ldr	r2, [r3, #28]
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ca2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	69da      	ldr	r2, [r3, #28]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ca3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	69d9      	ldr	r1, [r3, #28]
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	691b      	ldr	r3, [r3, #16]
 800ca48:	021a      	lsls	r2, r3, #8
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	430a      	orrs	r2, r1
 800ca50:	61da      	str	r2, [r3, #28]
      break;
 800ca52:	e043      	b.n	800cadc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	68b9      	ldr	r1, [r7, #8]
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f000 fe20 	bl	800d6a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f042 0208 	orr.w	r2, r2, #8
 800ca6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f022 0204 	bic.w	r2, r2, #4
 800ca7e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	691a      	ldr	r2, [r3, #16]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	430a      	orrs	r2, r1
 800ca90:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ca92:	e023      	b.n	800cadc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	68b9      	ldr	r1, [r7, #8]
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f000 fe6a 	bl	800d774 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800caae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cabe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	021a      	lsls	r2, r3, #8
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	430a      	orrs	r2, r1
 800cad2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800cad4:	e002      	b.n	800cadc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cad6:	2301      	movs	r3, #1
 800cad8:	75fb      	strb	r3, [r7, #23]
      break;
 800cada:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2200      	movs	r2, #0
 800cae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cae4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3718      	adds	r7, #24
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop

0800caf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cafa:	2300      	movs	r3, #0
 800cafc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d101      	bne.n	800cb0c <HAL_TIM_ConfigClockSource+0x1c>
 800cb08:	2302      	movs	r3, #2
 800cb0a:	e0f6      	b.n	800ccfa <HAL_TIM_ConfigClockSource+0x20a>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2202      	movs	r2, #2
 800cb18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	689b      	ldr	r3, [r3, #8]
 800cb22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800cb2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800cb2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cb36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a6f      	ldr	r2, [pc, #444]	@ (800cd04 <HAL_TIM_ConfigClockSource+0x214>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	f000 80c1 	beq.w	800ccce <HAL_TIM_ConfigClockSource+0x1de>
 800cb4c:	4a6d      	ldr	r2, [pc, #436]	@ (800cd04 <HAL_TIM_ConfigClockSource+0x214>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	f200 80c6 	bhi.w	800cce0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cb54:	4a6c      	ldr	r2, [pc, #432]	@ (800cd08 <HAL_TIM_ConfigClockSource+0x218>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	f000 80b9 	beq.w	800ccce <HAL_TIM_ConfigClockSource+0x1de>
 800cb5c:	4a6a      	ldr	r2, [pc, #424]	@ (800cd08 <HAL_TIM_ConfigClockSource+0x218>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	f200 80be 	bhi.w	800cce0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cb64:	4a69      	ldr	r2, [pc, #420]	@ (800cd0c <HAL_TIM_ConfigClockSource+0x21c>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	f000 80b1 	beq.w	800ccce <HAL_TIM_ConfigClockSource+0x1de>
 800cb6c:	4a67      	ldr	r2, [pc, #412]	@ (800cd0c <HAL_TIM_ConfigClockSource+0x21c>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	f200 80b6 	bhi.w	800cce0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cb74:	4a66      	ldr	r2, [pc, #408]	@ (800cd10 <HAL_TIM_ConfigClockSource+0x220>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	f000 80a9 	beq.w	800ccce <HAL_TIM_ConfigClockSource+0x1de>
 800cb7c:	4a64      	ldr	r2, [pc, #400]	@ (800cd10 <HAL_TIM_ConfigClockSource+0x220>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	f200 80ae 	bhi.w	800cce0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cb84:	4a63      	ldr	r2, [pc, #396]	@ (800cd14 <HAL_TIM_ConfigClockSource+0x224>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	f000 80a1 	beq.w	800ccce <HAL_TIM_ConfigClockSource+0x1de>
 800cb8c:	4a61      	ldr	r2, [pc, #388]	@ (800cd14 <HAL_TIM_ConfigClockSource+0x224>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	f200 80a6 	bhi.w	800cce0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cb94:	4a60      	ldr	r2, [pc, #384]	@ (800cd18 <HAL_TIM_ConfigClockSource+0x228>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	f000 8099 	beq.w	800ccce <HAL_TIM_ConfigClockSource+0x1de>
 800cb9c:	4a5e      	ldr	r2, [pc, #376]	@ (800cd18 <HAL_TIM_ConfigClockSource+0x228>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	f200 809e 	bhi.w	800cce0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cba4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cba8:	f000 8091 	beq.w	800ccce <HAL_TIM_ConfigClockSource+0x1de>
 800cbac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cbb0:	f200 8096 	bhi.w	800cce0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cbb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cbb8:	f000 8089 	beq.w	800ccce <HAL_TIM_ConfigClockSource+0x1de>
 800cbbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cbc0:	f200 808e 	bhi.w	800cce0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cbc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbc8:	d03e      	beq.n	800cc48 <HAL_TIM_ConfigClockSource+0x158>
 800cbca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbce:	f200 8087 	bhi.w	800cce0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cbd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbd6:	f000 8086 	beq.w	800cce6 <HAL_TIM_ConfigClockSource+0x1f6>
 800cbda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbde:	d87f      	bhi.n	800cce0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cbe0:	2b70      	cmp	r3, #112	@ 0x70
 800cbe2:	d01a      	beq.n	800cc1a <HAL_TIM_ConfigClockSource+0x12a>
 800cbe4:	2b70      	cmp	r3, #112	@ 0x70
 800cbe6:	d87b      	bhi.n	800cce0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cbe8:	2b60      	cmp	r3, #96	@ 0x60
 800cbea:	d050      	beq.n	800cc8e <HAL_TIM_ConfigClockSource+0x19e>
 800cbec:	2b60      	cmp	r3, #96	@ 0x60
 800cbee:	d877      	bhi.n	800cce0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cbf0:	2b50      	cmp	r3, #80	@ 0x50
 800cbf2:	d03c      	beq.n	800cc6e <HAL_TIM_ConfigClockSource+0x17e>
 800cbf4:	2b50      	cmp	r3, #80	@ 0x50
 800cbf6:	d873      	bhi.n	800cce0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cbf8:	2b40      	cmp	r3, #64	@ 0x40
 800cbfa:	d058      	beq.n	800ccae <HAL_TIM_ConfigClockSource+0x1be>
 800cbfc:	2b40      	cmp	r3, #64	@ 0x40
 800cbfe:	d86f      	bhi.n	800cce0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cc00:	2b30      	cmp	r3, #48	@ 0x30
 800cc02:	d064      	beq.n	800ccce <HAL_TIM_ConfigClockSource+0x1de>
 800cc04:	2b30      	cmp	r3, #48	@ 0x30
 800cc06:	d86b      	bhi.n	800cce0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cc08:	2b20      	cmp	r3, #32
 800cc0a:	d060      	beq.n	800ccce <HAL_TIM_ConfigClockSource+0x1de>
 800cc0c:	2b20      	cmp	r3, #32
 800cc0e:	d867      	bhi.n	800cce0 <HAL_TIM_ConfigClockSource+0x1f0>
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d05c      	beq.n	800ccce <HAL_TIM_ConfigClockSource+0x1de>
 800cc14:	2b10      	cmp	r3, #16
 800cc16:	d05a      	beq.n	800ccce <HAL_TIM_ConfigClockSource+0x1de>
 800cc18:	e062      	b.n	800cce0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc2a:	f000 fe8b 	bl	800d944 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	689b      	ldr	r3, [r3, #8]
 800cc34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cc3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	68ba      	ldr	r2, [r7, #8]
 800cc44:	609a      	str	r2, [r3, #8]
      break;
 800cc46:	e04f      	b.n	800cce8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc58:	f000 fe74 	bl	800d944 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	689a      	ldr	r2, [r3, #8]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cc6a:	609a      	str	r2, [r3, #8]
      break;
 800cc6c:	e03c      	b.n	800cce8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	f000 fde6 	bl	800d84c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2150      	movs	r1, #80	@ 0x50
 800cc86:	4618      	mov	r0, r3
 800cc88:	f000 fe3f 	bl	800d90a <TIM_ITRx_SetConfig>
      break;
 800cc8c:	e02c      	b.n	800cce8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	f000 fe05 	bl	800d8aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2160      	movs	r1, #96	@ 0x60
 800cca6:	4618      	mov	r0, r3
 800cca8:	f000 fe2f 	bl	800d90a <TIM_ITRx_SetConfig>
      break;
 800ccac:	e01c      	b.n	800cce8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccba:	461a      	mov	r2, r3
 800ccbc:	f000 fdc6 	bl	800d84c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	2140      	movs	r1, #64	@ 0x40
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f000 fe1f 	bl	800d90a <TIM_ITRx_SetConfig>
      break;
 800cccc:	e00c      	b.n	800cce8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681a      	ldr	r2, [r3, #0]
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	4610      	mov	r0, r2
 800ccda:	f000 fe16 	bl	800d90a <TIM_ITRx_SetConfig>
      break;
 800ccde:	e003      	b.n	800cce8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800cce0:	2301      	movs	r3, #1
 800cce2:	73fb      	strb	r3, [r7, #15]
      break;
 800cce4:	e000      	b.n	800cce8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800cce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2201      	movs	r2, #1
 800ccec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ccf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	00100070 	.word	0x00100070
 800cd08:	00100060 	.word	0x00100060
 800cd0c:	00100050 	.word	0x00100050
 800cd10:	00100040 	.word	0x00100040
 800cd14:	00100030 	.word	0x00100030
 800cd18:	00100020 	.word	0x00100020

0800cd1c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800cd24:	bf00      	nop
 800cd26:	370c      	adds	r7, #12
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b083      	sub	sp, #12
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cd38:	bf00      	nop
 800cd3a:	370c      	adds	r7, #12
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cd4c:	bf00      	nop
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800cd60:	bf00      	nop
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cd74:	bf00      	nop
 800cd76:	370c      	adds	r7, #12
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr

0800cd80 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800cd88:	bf00      	nop
 800cd8a:	370c      	adds	r7, #12
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cd9c:	bf00      	nop
 800cd9e:	370c      	adds	r7, #12
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr

0800cda8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800cdb0:	bf00      	nop
 800cdb2:	370c      	adds	r7, #12
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr

0800cdbc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800cdc4:	bf00      	nop
 800cdc6:	370c      	adds	r7, #12
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b087      	sub	sp, #28
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	460b      	mov	r3, r1
 800cdda:	607a      	str	r2, [r7, #4]
 800cddc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800cdde:	2300      	movs	r3, #0
 800cde0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d101      	bne.n	800cdec <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800cde8:	2301      	movs	r3, #1
 800cdea:	e14a      	b.n	800d082 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	f040 80dd 	bne.w	800cfb4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800cdfa:	7afb      	ldrb	r3, [r7, #11]
 800cdfc:	2b1f      	cmp	r3, #31
 800cdfe:	f200 80d6 	bhi.w	800cfae <HAL_TIM_RegisterCallback+0x1de>
 800ce02:	a201      	add	r2, pc, #4	@ (adr r2, 800ce08 <HAL_TIM_RegisterCallback+0x38>)
 800ce04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce08:	0800ce89 	.word	0x0800ce89
 800ce0c:	0800ce91 	.word	0x0800ce91
 800ce10:	0800ce99 	.word	0x0800ce99
 800ce14:	0800cea1 	.word	0x0800cea1
 800ce18:	0800cea9 	.word	0x0800cea9
 800ce1c:	0800ceb1 	.word	0x0800ceb1
 800ce20:	0800ceb9 	.word	0x0800ceb9
 800ce24:	0800cec1 	.word	0x0800cec1
 800ce28:	0800cec9 	.word	0x0800cec9
 800ce2c:	0800ced1 	.word	0x0800ced1
 800ce30:	0800ced9 	.word	0x0800ced9
 800ce34:	0800cee1 	.word	0x0800cee1
 800ce38:	0800cee9 	.word	0x0800cee9
 800ce3c:	0800cef1 	.word	0x0800cef1
 800ce40:	0800cefb 	.word	0x0800cefb
 800ce44:	0800cf05 	.word	0x0800cf05
 800ce48:	0800cf0f 	.word	0x0800cf0f
 800ce4c:	0800cf19 	.word	0x0800cf19
 800ce50:	0800cf23 	.word	0x0800cf23
 800ce54:	0800cf2d 	.word	0x0800cf2d
 800ce58:	0800cf37 	.word	0x0800cf37
 800ce5c:	0800cf41 	.word	0x0800cf41
 800ce60:	0800cf4b 	.word	0x0800cf4b
 800ce64:	0800cf55 	.word	0x0800cf55
 800ce68:	0800cf5f 	.word	0x0800cf5f
 800ce6c:	0800cf69 	.word	0x0800cf69
 800ce70:	0800cf73 	.word	0x0800cf73
 800ce74:	0800cf7d 	.word	0x0800cf7d
 800ce78:	0800cf87 	.word	0x0800cf87
 800ce7c:	0800cf91 	.word	0x0800cf91
 800ce80:	0800cf9b 	.word	0x0800cf9b
 800ce84:	0800cfa5 	.word	0x0800cfa5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800ce8e:	e0f7      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800ce96:	e0f3      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800ce9e:	e0ef      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800cea6:	e0eb      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800ceae:	e0e7      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800ceb6:	e0e3      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800cebe:	e0df      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800cec6:	e0db      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800cece:	e0d7      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800ced6:	e0d3      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800cede:	e0cf      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800cee6:	e0cb      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ceee:	e0c7      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800cef8:	e0c2      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800cf02:	e0bd      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800cf0c:	e0b8      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800cf16:	e0b3      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800cf20:	e0ae      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800cf2a:	e0a9      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800cf34:	e0a4      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800cf3e:	e09f      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800cf48:	e09a      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800cf52:	e095      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800cf5c:	e090      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800cf66:	e08b      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800cf70:	e086      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800cf7a:	e081      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800cf84:	e07c      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800cf8e:	e077      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800cf98:	e072      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800cfa2:	e06d      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	687a      	ldr	r2, [r7, #4]
 800cfa8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800cfac:	e068      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	75fb      	strb	r3, [r7, #23]
        break;
 800cfb2:	e065      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d15d      	bne.n	800d07c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800cfc0:	7afb      	ldrb	r3, [r7, #11]
 800cfc2:	2b0d      	cmp	r3, #13
 800cfc4:	d857      	bhi.n	800d076 <HAL_TIM_RegisterCallback+0x2a6>
 800cfc6:	a201      	add	r2, pc, #4	@ (adr r2, 800cfcc <HAL_TIM_RegisterCallback+0x1fc>)
 800cfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfcc:	0800d005 	.word	0x0800d005
 800cfd0:	0800d00d 	.word	0x0800d00d
 800cfd4:	0800d015 	.word	0x0800d015
 800cfd8:	0800d01d 	.word	0x0800d01d
 800cfdc:	0800d025 	.word	0x0800d025
 800cfe0:	0800d02d 	.word	0x0800d02d
 800cfe4:	0800d035 	.word	0x0800d035
 800cfe8:	0800d03d 	.word	0x0800d03d
 800cfec:	0800d045 	.word	0x0800d045
 800cff0:	0800d04d 	.word	0x0800d04d
 800cff4:	0800d055 	.word	0x0800d055
 800cff8:	0800d05d 	.word	0x0800d05d
 800cffc:	0800d065 	.word	0x0800d065
 800d000:	0800d06d 	.word	0x0800d06d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800d00a:	e039      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800d012:	e035      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800d01a:	e031      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800d022:	e02d      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800d02a:	e029      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800d032:	e025      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	687a      	ldr	r2, [r7, #4]
 800d038:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800d03a:	e021      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800d042:	e01d      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800d04a:	e019      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800d052:	e015      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800d05a:	e011      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800d062:	e00d      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800d06a:	e009      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800d074:	e004      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	75fb      	strb	r3, [r7, #23]
        break;
 800d07a:	e001      	b.n	800d080 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800d07c:	2301      	movs	r3, #1
 800d07e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800d080:	7dfb      	ldrb	r3, [r7, #23]
}
 800d082:	4618      	mov	r0, r3
 800d084:	371c      	adds	r7, #28
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop

0800d090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d090:	b480      	push	{r7}
 800d092:	b085      	sub	sp, #20
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a4c      	ldr	r2, [pc, #304]	@ (800d1d4 <TIM_Base_SetConfig+0x144>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d017      	beq.n	800d0d8 <TIM_Base_SetConfig+0x48>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0ae:	d013      	beq.n	800d0d8 <TIM_Base_SetConfig+0x48>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4a49      	ldr	r2, [pc, #292]	@ (800d1d8 <TIM_Base_SetConfig+0x148>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d00f      	beq.n	800d0d8 <TIM_Base_SetConfig+0x48>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4a48      	ldr	r2, [pc, #288]	@ (800d1dc <TIM_Base_SetConfig+0x14c>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d00b      	beq.n	800d0d8 <TIM_Base_SetConfig+0x48>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4a47      	ldr	r2, [pc, #284]	@ (800d1e0 <TIM_Base_SetConfig+0x150>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d007      	beq.n	800d0d8 <TIM_Base_SetConfig+0x48>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	4a46      	ldr	r2, [pc, #280]	@ (800d1e4 <TIM_Base_SetConfig+0x154>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d003      	beq.n	800d0d8 <TIM_Base_SetConfig+0x48>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	4a45      	ldr	r2, [pc, #276]	@ (800d1e8 <TIM_Base_SetConfig+0x158>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d108      	bne.n	800d0ea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4a39      	ldr	r2, [pc, #228]	@ (800d1d4 <TIM_Base_SetConfig+0x144>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d023      	beq.n	800d13a <TIM_Base_SetConfig+0xaa>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0f8:	d01f      	beq.n	800d13a <TIM_Base_SetConfig+0xaa>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4a36      	ldr	r2, [pc, #216]	@ (800d1d8 <TIM_Base_SetConfig+0x148>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d01b      	beq.n	800d13a <TIM_Base_SetConfig+0xaa>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a35      	ldr	r2, [pc, #212]	@ (800d1dc <TIM_Base_SetConfig+0x14c>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d017      	beq.n	800d13a <TIM_Base_SetConfig+0xaa>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4a34      	ldr	r2, [pc, #208]	@ (800d1e0 <TIM_Base_SetConfig+0x150>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d013      	beq.n	800d13a <TIM_Base_SetConfig+0xaa>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4a33      	ldr	r2, [pc, #204]	@ (800d1e4 <TIM_Base_SetConfig+0x154>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d00f      	beq.n	800d13a <TIM_Base_SetConfig+0xaa>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4a33      	ldr	r2, [pc, #204]	@ (800d1ec <TIM_Base_SetConfig+0x15c>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d00b      	beq.n	800d13a <TIM_Base_SetConfig+0xaa>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4a32      	ldr	r2, [pc, #200]	@ (800d1f0 <TIM_Base_SetConfig+0x160>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d007      	beq.n	800d13a <TIM_Base_SetConfig+0xaa>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4a31      	ldr	r2, [pc, #196]	@ (800d1f4 <TIM_Base_SetConfig+0x164>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d003      	beq.n	800d13a <TIM_Base_SetConfig+0xaa>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4a2c      	ldr	r2, [pc, #176]	@ (800d1e8 <TIM_Base_SetConfig+0x158>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d108      	bne.n	800d14c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	68fa      	ldr	r2, [r7, #12]
 800d148:	4313      	orrs	r3, r2
 800d14a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	695b      	ldr	r3, [r3, #20]
 800d156:	4313      	orrs	r3, r2
 800d158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	689a      	ldr	r2, [r3, #8]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	4a18      	ldr	r2, [pc, #96]	@ (800d1d4 <TIM_Base_SetConfig+0x144>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d013      	beq.n	800d1a0 <TIM_Base_SetConfig+0x110>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	4a1a      	ldr	r2, [pc, #104]	@ (800d1e4 <TIM_Base_SetConfig+0x154>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d00f      	beq.n	800d1a0 <TIM_Base_SetConfig+0x110>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	4a1a      	ldr	r2, [pc, #104]	@ (800d1ec <TIM_Base_SetConfig+0x15c>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d00b      	beq.n	800d1a0 <TIM_Base_SetConfig+0x110>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4a19      	ldr	r2, [pc, #100]	@ (800d1f0 <TIM_Base_SetConfig+0x160>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d007      	beq.n	800d1a0 <TIM_Base_SetConfig+0x110>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	4a18      	ldr	r2, [pc, #96]	@ (800d1f4 <TIM_Base_SetConfig+0x164>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d003      	beq.n	800d1a0 <TIM_Base_SetConfig+0x110>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	4a13      	ldr	r2, [pc, #76]	@ (800d1e8 <TIM_Base_SetConfig+0x158>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d103      	bne.n	800d1a8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	691a      	ldr	r2, [r3, #16]
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	691b      	ldr	r3, [r3, #16]
 800d1b2:	f003 0301 	and.w	r3, r3, #1
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d105      	bne.n	800d1c6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	691b      	ldr	r3, [r3, #16]
 800d1be:	f023 0201 	bic.w	r2, r3, #1
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	611a      	str	r2, [r3, #16]
  }
}
 800d1c6:	bf00      	nop
 800d1c8:	3714      	adds	r7, #20
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr
 800d1d2:	bf00      	nop
 800d1d4:	40012c00 	.word	0x40012c00
 800d1d8:	40000400 	.word	0x40000400
 800d1dc:	40000800 	.word	0x40000800
 800d1e0:	40000c00 	.word	0x40000c00
 800d1e4:	40013400 	.word	0x40013400
 800d1e8:	40015000 	.word	0x40015000
 800d1ec:	40014000 	.word	0x40014000
 800d1f0:	40014400 	.word	0x40014400
 800d1f4:	40014800 	.word	0x40014800

0800d1f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b087      	sub	sp, #28
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6a1b      	ldr	r3, [r3, #32]
 800d206:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6a1b      	ldr	r3, [r3, #32]
 800d20c:	f023 0201 	bic.w	r2, r3, #1
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	699b      	ldr	r3, [r3, #24]
 800d21e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d22a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f023 0303 	bic.w	r3, r3, #3
 800d232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	4313      	orrs	r3, r2
 800d23c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	f023 0302 	bic.w	r3, r3, #2
 800d244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	689b      	ldr	r3, [r3, #8]
 800d24a:	697a      	ldr	r2, [r7, #20]
 800d24c:	4313      	orrs	r3, r2
 800d24e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	4a30      	ldr	r2, [pc, #192]	@ (800d314 <TIM_OC1_SetConfig+0x11c>)
 800d254:	4293      	cmp	r3, r2
 800d256:	d013      	beq.n	800d280 <TIM_OC1_SetConfig+0x88>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	4a2f      	ldr	r2, [pc, #188]	@ (800d318 <TIM_OC1_SetConfig+0x120>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d00f      	beq.n	800d280 <TIM_OC1_SetConfig+0x88>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	4a2e      	ldr	r2, [pc, #184]	@ (800d31c <TIM_OC1_SetConfig+0x124>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d00b      	beq.n	800d280 <TIM_OC1_SetConfig+0x88>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	4a2d      	ldr	r2, [pc, #180]	@ (800d320 <TIM_OC1_SetConfig+0x128>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d007      	beq.n	800d280 <TIM_OC1_SetConfig+0x88>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	4a2c      	ldr	r2, [pc, #176]	@ (800d324 <TIM_OC1_SetConfig+0x12c>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d003      	beq.n	800d280 <TIM_OC1_SetConfig+0x88>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	4a2b      	ldr	r2, [pc, #172]	@ (800d328 <TIM_OC1_SetConfig+0x130>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d10c      	bne.n	800d29a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	f023 0308 	bic.w	r3, r3, #8
 800d286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	68db      	ldr	r3, [r3, #12]
 800d28c:	697a      	ldr	r2, [r7, #20]
 800d28e:	4313      	orrs	r3, r2
 800d290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	f023 0304 	bic.w	r3, r3, #4
 800d298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	4a1d      	ldr	r2, [pc, #116]	@ (800d314 <TIM_OC1_SetConfig+0x11c>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d013      	beq.n	800d2ca <TIM_OC1_SetConfig+0xd2>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	4a1c      	ldr	r2, [pc, #112]	@ (800d318 <TIM_OC1_SetConfig+0x120>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d00f      	beq.n	800d2ca <TIM_OC1_SetConfig+0xd2>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4a1b      	ldr	r2, [pc, #108]	@ (800d31c <TIM_OC1_SetConfig+0x124>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d00b      	beq.n	800d2ca <TIM_OC1_SetConfig+0xd2>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	4a1a      	ldr	r2, [pc, #104]	@ (800d320 <TIM_OC1_SetConfig+0x128>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d007      	beq.n	800d2ca <TIM_OC1_SetConfig+0xd2>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	4a19      	ldr	r2, [pc, #100]	@ (800d324 <TIM_OC1_SetConfig+0x12c>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d003      	beq.n	800d2ca <TIM_OC1_SetConfig+0xd2>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	4a18      	ldr	r2, [pc, #96]	@ (800d328 <TIM_OC1_SetConfig+0x130>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d111      	bne.n	800d2ee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d2d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d2d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	695b      	ldr	r3, [r3, #20]
 800d2de:	693a      	ldr	r2, [r7, #16]
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	699b      	ldr	r3, [r3, #24]
 800d2e8:	693a      	ldr	r2, [r7, #16]
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	693a      	ldr	r2, [r7, #16]
 800d2f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	68fa      	ldr	r2, [r7, #12]
 800d2f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	685a      	ldr	r2, [r3, #4]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	697a      	ldr	r2, [r7, #20]
 800d306:	621a      	str	r2, [r3, #32]
}
 800d308:	bf00      	nop
 800d30a:	371c      	adds	r7, #28
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr
 800d314:	40012c00 	.word	0x40012c00
 800d318:	40013400 	.word	0x40013400
 800d31c:	40014000 	.word	0x40014000
 800d320:	40014400 	.word	0x40014400
 800d324:	40014800 	.word	0x40014800
 800d328:	40015000 	.word	0x40015000

0800d32c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b087      	sub	sp, #28
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6a1b      	ldr	r3, [r3, #32]
 800d33a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6a1b      	ldr	r3, [r3, #32]
 800d340:	f023 0210 	bic.w	r2, r3, #16
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	699b      	ldr	r3, [r3, #24]
 800d352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d35a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d35e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	021b      	lsls	r3, r3, #8
 800d36e:	68fa      	ldr	r2, [r7, #12]
 800d370:	4313      	orrs	r3, r2
 800d372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	f023 0320 	bic.w	r3, r3, #32
 800d37a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	689b      	ldr	r3, [r3, #8]
 800d380:	011b      	lsls	r3, r3, #4
 800d382:	697a      	ldr	r2, [r7, #20]
 800d384:	4313      	orrs	r3, r2
 800d386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	4a2c      	ldr	r2, [pc, #176]	@ (800d43c <TIM_OC2_SetConfig+0x110>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d007      	beq.n	800d3a0 <TIM_OC2_SetConfig+0x74>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4a2b      	ldr	r2, [pc, #172]	@ (800d440 <TIM_OC2_SetConfig+0x114>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d003      	beq.n	800d3a0 <TIM_OC2_SetConfig+0x74>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	4a2a      	ldr	r2, [pc, #168]	@ (800d444 <TIM_OC2_SetConfig+0x118>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d10d      	bne.n	800d3bc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d3a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	011b      	lsls	r3, r3, #4
 800d3ae:	697a      	ldr	r2, [r7, #20]
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d3ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	4a1f      	ldr	r2, [pc, #124]	@ (800d43c <TIM_OC2_SetConfig+0x110>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d013      	beq.n	800d3ec <TIM_OC2_SetConfig+0xc0>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	4a1e      	ldr	r2, [pc, #120]	@ (800d440 <TIM_OC2_SetConfig+0x114>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d00f      	beq.n	800d3ec <TIM_OC2_SetConfig+0xc0>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	4a1e      	ldr	r2, [pc, #120]	@ (800d448 <TIM_OC2_SetConfig+0x11c>)
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d00b      	beq.n	800d3ec <TIM_OC2_SetConfig+0xc0>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	4a1d      	ldr	r2, [pc, #116]	@ (800d44c <TIM_OC2_SetConfig+0x120>)
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	d007      	beq.n	800d3ec <TIM_OC2_SetConfig+0xc0>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	4a1c      	ldr	r2, [pc, #112]	@ (800d450 <TIM_OC2_SetConfig+0x124>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d003      	beq.n	800d3ec <TIM_OC2_SetConfig+0xc0>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	4a17      	ldr	r2, [pc, #92]	@ (800d444 <TIM_OC2_SetConfig+0x118>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d113      	bne.n	800d414 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d3f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d3fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	695b      	ldr	r3, [r3, #20]
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	693a      	ldr	r2, [r7, #16]
 800d404:	4313      	orrs	r3, r2
 800d406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	699b      	ldr	r3, [r3, #24]
 800d40c:	009b      	lsls	r3, r3, #2
 800d40e:	693a      	ldr	r2, [r7, #16]
 800d410:	4313      	orrs	r3, r2
 800d412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	693a      	ldr	r2, [r7, #16]
 800d418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	68fa      	ldr	r2, [r7, #12]
 800d41e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	685a      	ldr	r2, [r3, #4]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	697a      	ldr	r2, [r7, #20]
 800d42c:	621a      	str	r2, [r3, #32]
}
 800d42e:	bf00      	nop
 800d430:	371c      	adds	r7, #28
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop
 800d43c:	40012c00 	.word	0x40012c00
 800d440:	40013400 	.word	0x40013400
 800d444:	40015000 	.word	0x40015000
 800d448:	40014000 	.word	0x40014000
 800d44c:	40014400 	.word	0x40014400
 800d450:	40014800 	.word	0x40014800

0800d454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d454:	b480      	push	{r7}
 800d456:	b087      	sub	sp, #28
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6a1b      	ldr	r3, [r3, #32]
 800d462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6a1b      	ldr	r3, [r3, #32]
 800d468:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	69db      	ldr	r3, [r3, #28]
 800d47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f023 0303 	bic.w	r3, r3, #3
 800d48e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	68fa      	ldr	r2, [r7, #12]
 800d496:	4313      	orrs	r3, r2
 800d498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d4a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	689b      	ldr	r3, [r3, #8]
 800d4a6:	021b      	lsls	r3, r3, #8
 800d4a8:	697a      	ldr	r2, [r7, #20]
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	4a2b      	ldr	r2, [pc, #172]	@ (800d560 <TIM_OC3_SetConfig+0x10c>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d007      	beq.n	800d4c6 <TIM_OC3_SetConfig+0x72>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	4a2a      	ldr	r2, [pc, #168]	@ (800d564 <TIM_OC3_SetConfig+0x110>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d003      	beq.n	800d4c6 <TIM_OC3_SetConfig+0x72>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	4a29      	ldr	r2, [pc, #164]	@ (800d568 <TIM_OC3_SetConfig+0x114>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d10d      	bne.n	800d4e2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d4cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	021b      	lsls	r3, r3, #8
 800d4d4:	697a      	ldr	r2, [r7, #20]
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d4e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	4a1e      	ldr	r2, [pc, #120]	@ (800d560 <TIM_OC3_SetConfig+0x10c>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d013      	beq.n	800d512 <TIM_OC3_SetConfig+0xbe>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	4a1d      	ldr	r2, [pc, #116]	@ (800d564 <TIM_OC3_SetConfig+0x110>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d00f      	beq.n	800d512 <TIM_OC3_SetConfig+0xbe>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	4a1d      	ldr	r2, [pc, #116]	@ (800d56c <TIM_OC3_SetConfig+0x118>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d00b      	beq.n	800d512 <TIM_OC3_SetConfig+0xbe>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	4a1c      	ldr	r2, [pc, #112]	@ (800d570 <TIM_OC3_SetConfig+0x11c>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d007      	beq.n	800d512 <TIM_OC3_SetConfig+0xbe>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	4a1b      	ldr	r2, [pc, #108]	@ (800d574 <TIM_OC3_SetConfig+0x120>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d003      	beq.n	800d512 <TIM_OC3_SetConfig+0xbe>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	4a16      	ldr	r2, [pc, #88]	@ (800d568 <TIM_OC3_SetConfig+0x114>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d113      	bne.n	800d53a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	695b      	ldr	r3, [r3, #20]
 800d526:	011b      	lsls	r3, r3, #4
 800d528:	693a      	ldr	r2, [r7, #16]
 800d52a:	4313      	orrs	r3, r2
 800d52c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	699b      	ldr	r3, [r3, #24]
 800d532:	011b      	lsls	r3, r3, #4
 800d534:	693a      	ldr	r2, [r7, #16]
 800d536:	4313      	orrs	r3, r2
 800d538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	693a      	ldr	r2, [r7, #16]
 800d53e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	68fa      	ldr	r2, [r7, #12]
 800d544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	685a      	ldr	r2, [r3, #4]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	697a      	ldr	r2, [r7, #20]
 800d552:	621a      	str	r2, [r3, #32]
}
 800d554:	bf00      	nop
 800d556:	371c      	adds	r7, #28
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr
 800d560:	40012c00 	.word	0x40012c00
 800d564:	40013400 	.word	0x40013400
 800d568:	40015000 	.word	0x40015000
 800d56c:	40014000 	.word	0x40014000
 800d570:	40014400 	.word	0x40014400
 800d574:	40014800 	.word	0x40014800

0800d578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d578:	b480      	push	{r7}
 800d57a:	b087      	sub	sp, #28
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6a1b      	ldr	r3, [r3, #32]
 800d586:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6a1b      	ldr	r3, [r3, #32]
 800d58c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	69db      	ldr	r3, [r3, #28]
 800d59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d5a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d5aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d5b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	021b      	lsls	r3, r3, #8
 800d5ba:	68fa      	ldr	r2, [r7, #12]
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d5c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	689b      	ldr	r3, [r3, #8]
 800d5cc:	031b      	lsls	r3, r3, #12
 800d5ce:	697a      	ldr	r2, [r7, #20]
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	4a2c      	ldr	r2, [pc, #176]	@ (800d688 <TIM_OC4_SetConfig+0x110>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d007      	beq.n	800d5ec <TIM_OC4_SetConfig+0x74>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	4a2b      	ldr	r2, [pc, #172]	@ (800d68c <TIM_OC4_SetConfig+0x114>)
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d003      	beq.n	800d5ec <TIM_OC4_SetConfig+0x74>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	4a2a      	ldr	r2, [pc, #168]	@ (800d690 <TIM_OC4_SetConfig+0x118>)
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d10d      	bne.n	800d608 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d5f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	68db      	ldr	r3, [r3, #12]
 800d5f8:	031b      	lsls	r3, r3, #12
 800d5fa:	697a      	ldr	r2, [r7, #20]
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d606:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	4a1f      	ldr	r2, [pc, #124]	@ (800d688 <TIM_OC4_SetConfig+0x110>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d013      	beq.n	800d638 <TIM_OC4_SetConfig+0xc0>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	4a1e      	ldr	r2, [pc, #120]	@ (800d68c <TIM_OC4_SetConfig+0x114>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d00f      	beq.n	800d638 <TIM_OC4_SetConfig+0xc0>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	4a1e      	ldr	r2, [pc, #120]	@ (800d694 <TIM_OC4_SetConfig+0x11c>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d00b      	beq.n	800d638 <TIM_OC4_SetConfig+0xc0>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4a1d      	ldr	r2, [pc, #116]	@ (800d698 <TIM_OC4_SetConfig+0x120>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d007      	beq.n	800d638 <TIM_OC4_SetConfig+0xc0>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	4a1c      	ldr	r2, [pc, #112]	@ (800d69c <TIM_OC4_SetConfig+0x124>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d003      	beq.n	800d638 <TIM_OC4_SetConfig+0xc0>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	4a17      	ldr	r2, [pc, #92]	@ (800d690 <TIM_OC4_SetConfig+0x118>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d113      	bne.n	800d660 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d63e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d646:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	695b      	ldr	r3, [r3, #20]
 800d64c:	019b      	lsls	r3, r3, #6
 800d64e:	693a      	ldr	r2, [r7, #16]
 800d650:	4313      	orrs	r3, r2
 800d652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	699b      	ldr	r3, [r3, #24]
 800d658:	019b      	lsls	r3, r3, #6
 800d65a:	693a      	ldr	r2, [r7, #16]
 800d65c:	4313      	orrs	r3, r2
 800d65e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	693a      	ldr	r2, [r7, #16]
 800d664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	68fa      	ldr	r2, [r7, #12]
 800d66a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	685a      	ldr	r2, [r3, #4]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	697a      	ldr	r2, [r7, #20]
 800d678:	621a      	str	r2, [r3, #32]
}
 800d67a:	bf00      	nop
 800d67c:	371c      	adds	r7, #28
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr
 800d686:	bf00      	nop
 800d688:	40012c00 	.word	0x40012c00
 800d68c:	40013400 	.word	0x40013400
 800d690:	40015000 	.word	0x40015000
 800d694:	40014000 	.word	0x40014000
 800d698:	40014400 	.word	0x40014400
 800d69c:	40014800 	.word	0x40014800

0800d6a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b087      	sub	sp, #28
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6a1b      	ldr	r3, [r3, #32]
 800d6ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6a1b      	ldr	r3, [r3, #32]
 800d6b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d6ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	68fa      	ldr	r2, [r7, #12]
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d6e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	689b      	ldr	r3, [r3, #8]
 800d6ea:	041b      	lsls	r3, r3, #16
 800d6ec:	693a      	ldr	r2, [r7, #16]
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	4a19      	ldr	r2, [pc, #100]	@ (800d75c <TIM_OC5_SetConfig+0xbc>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d013      	beq.n	800d722 <TIM_OC5_SetConfig+0x82>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	4a18      	ldr	r2, [pc, #96]	@ (800d760 <TIM_OC5_SetConfig+0xc0>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d00f      	beq.n	800d722 <TIM_OC5_SetConfig+0x82>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	4a17      	ldr	r2, [pc, #92]	@ (800d764 <TIM_OC5_SetConfig+0xc4>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d00b      	beq.n	800d722 <TIM_OC5_SetConfig+0x82>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4a16      	ldr	r2, [pc, #88]	@ (800d768 <TIM_OC5_SetConfig+0xc8>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d007      	beq.n	800d722 <TIM_OC5_SetConfig+0x82>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	4a15      	ldr	r2, [pc, #84]	@ (800d76c <TIM_OC5_SetConfig+0xcc>)
 800d716:	4293      	cmp	r3, r2
 800d718:	d003      	beq.n	800d722 <TIM_OC5_SetConfig+0x82>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	4a14      	ldr	r2, [pc, #80]	@ (800d770 <TIM_OC5_SetConfig+0xd0>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d109      	bne.n	800d736 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d728:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	695b      	ldr	r3, [r3, #20]
 800d72e:	021b      	lsls	r3, r3, #8
 800d730:	697a      	ldr	r2, [r7, #20]
 800d732:	4313      	orrs	r3, r2
 800d734:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	697a      	ldr	r2, [r7, #20]
 800d73a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	685a      	ldr	r2, [r3, #4]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	693a      	ldr	r2, [r7, #16]
 800d74e:	621a      	str	r2, [r3, #32]
}
 800d750:	bf00      	nop
 800d752:	371c      	adds	r7, #28
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr
 800d75c:	40012c00 	.word	0x40012c00
 800d760:	40013400 	.word	0x40013400
 800d764:	40014000 	.word	0x40014000
 800d768:	40014400 	.word	0x40014400
 800d76c:	40014800 	.word	0x40014800
 800d770:	40015000 	.word	0x40015000

0800d774 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d774:	b480      	push	{r7}
 800d776:	b087      	sub	sp, #28
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6a1b      	ldr	r3, [r3, #32]
 800d782:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6a1b      	ldr	r3, [r3, #32]
 800d788:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d79a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d7a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	021b      	lsls	r3, r3, #8
 800d7ae:	68fa      	ldr	r2, [r7, #12]
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d7ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	689b      	ldr	r3, [r3, #8]
 800d7c0:	051b      	lsls	r3, r3, #20
 800d7c2:	693a      	ldr	r2, [r7, #16]
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4a1a      	ldr	r2, [pc, #104]	@ (800d834 <TIM_OC6_SetConfig+0xc0>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d013      	beq.n	800d7f8 <TIM_OC6_SetConfig+0x84>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	4a19      	ldr	r2, [pc, #100]	@ (800d838 <TIM_OC6_SetConfig+0xc4>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d00f      	beq.n	800d7f8 <TIM_OC6_SetConfig+0x84>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4a18      	ldr	r2, [pc, #96]	@ (800d83c <TIM_OC6_SetConfig+0xc8>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d00b      	beq.n	800d7f8 <TIM_OC6_SetConfig+0x84>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4a17      	ldr	r2, [pc, #92]	@ (800d840 <TIM_OC6_SetConfig+0xcc>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d007      	beq.n	800d7f8 <TIM_OC6_SetConfig+0x84>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	4a16      	ldr	r2, [pc, #88]	@ (800d844 <TIM_OC6_SetConfig+0xd0>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d003      	beq.n	800d7f8 <TIM_OC6_SetConfig+0x84>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	4a15      	ldr	r2, [pc, #84]	@ (800d848 <TIM_OC6_SetConfig+0xd4>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d109      	bne.n	800d80c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d7fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	695b      	ldr	r3, [r3, #20]
 800d804:	029b      	lsls	r3, r3, #10
 800d806:	697a      	ldr	r2, [r7, #20]
 800d808:	4313      	orrs	r3, r2
 800d80a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	697a      	ldr	r2, [r7, #20]
 800d810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	68fa      	ldr	r2, [r7, #12]
 800d816:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	685a      	ldr	r2, [r3, #4]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	693a      	ldr	r2, [r7, #16]
 800d824:	621a      	str	r2, [r3, #32]
}
 800d826:	bf00      	nop
 800d828:	371c      	adds	r7, #28
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
 800d832:	bf00      	nop
 800d834:	40012c00 	.word	0x40012c00
 800d838:	40013400 	.word	0x40013400
 800d83c:	40014000 	.word	0x40014000
 800d840:	40014400 	.word	0x40014400
 800d844:	40014800 	.word	0x40014800
 800d848:	40015000 	.word	0x40015000

0800d84c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b087      	sub	sp, #28
 800d850:	af00      	add	r7, sp, #0
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	60b9      	str	r1, [r7, #8]
 800d856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6a1b      	ldr	r3, [r3, #32]
 800d85c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	6a1b      	ldr	r3, [r3, #32]
 800d862:	f023 0201 	bic.w	r2, r3, #1
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	699b      	ldr	r3, [r3, #24]
 800d86e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	011b      	lsls	r3, r3, #4
 800d87c:	693a      	ldr	r2, [r7, #16]
 800d87e:	4313      	orrs	r3, r2
 800d880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	f023 030a 	bic.w	r3, r3, #10
 800d888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d88a:	697a      	ldr	r2, [r7, #20]
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	4313      	orrs	r3, r2
 800d890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	693a      	ldr	r2, [r7, #16]
 800d896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	697a      	ldr	r2, [r7, #20]
 800d89c:	621a      	str	r2, [r3, #32]
}
 800d89e:	bf00      	nop
 800d8a0:	371c      	adds	r7, #28
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr

0800d8aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8aa:	b480      	push	{r7}
 800d8ac:	b087      	sub	sp, #28
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	60f8      	str	r0, [r7, #12]
 800d8b2:	60b9      	str	r1, [r7, #8]
 800d8b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	6a1b      	ldr	r3, [r3, #32]
 800d8ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	6a1b      	ldr	r3, [r3, #32]
 800d8c0:	f023 0210 	bic.w	r2, r3, #16
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	699b      	ldr	r3, [r3, #24]
 800d8cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d8d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	031b      	lsls	r3, r3, #12
 800d8da:	693a      	ldr	r2, [r7, #16]
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d8e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	011b      	lsls	r3, r3, #4
 800d8ec:	697a      	ldr	r2, [r7, #20]
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	693a      	ldr	r2, [r7, #16]
 800d8f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	697a      	ldr	r2, [r7, #20]
 800d8fc:	621a      	str	r2, [r3, #32]
}
 800d8fe:	bf00      	nop
 800d900:	371c      	adds	r7, #28
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr

0800d90a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d90a:	b480      	push	{r7}
 800d90c:	b085      	sub	sp, #20
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800d920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d924:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d926:	683a      	ldr	r2, [r7, #0]
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	4313      	orrs	r3, r2
 800d92c:	f043 0307 	orr.w	r3, r3, #7
 800d930:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	68fa      	ldr	r2, [r7, #12]
 800d936:	609a      	str	r2, [r3, #8]
}
 800d938:	bf00      	nop
 800d93a:	3714      	adds	r7, #20
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d944:	b480      	push	{r7}
 800d946:	b087      	sub	sp, #28
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
 800d950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	689b      	ldr	r3, [r3, #8]
 800d956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d95e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	021a      	lsls	r2, r3, #8
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	431a      	orrs	r2, r3
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	4313      	orrs	r3, r2
 800d96c:	697a      	ldr	r2, [r7, #20]
 800d96e:	4313      	orrs	r3, r2
 800d970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	697a      	ldr	r2, [r7, #20]
 800d976:	609a      	str	r2, [r3, #8]
}
 800d978:	bf00      	nop
 800d97a:	371c      	adds	r7, #28
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d984:	b480      	push	{r7}
 800d986:	b087      	sub	sp, #28
 800d988:	af00      	add	r7, sp, #0
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	f003 031f 	and.w	r3, r3, #31
 800d996:	2201      	movs	r2, #1
 800d998:	fa02 f303 	lsl.w	r3, r2, r3
 800d99c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6a1a      	ldr	r2, [r3, #32]
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	43db      	mvns	r3, r3
 800d9a6:	401a      	ands	r2, r3
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	6a1a      	ldr	r2, [r3, #32]
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	f003 031f 	and.w	r3, r3, #31
 800d9b6:	6879      	ldr	r1, [r7, #4]
 800d9b8:	fa01 f303 	lsl.w	r3, r1, r3
 800d9bc:	431a      	orrs	r2, r3
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	621a      	str	r2, [r3, #32]
}
 800d9c2:	bf00      	nop
 800d9c4:	371c      	adds	r7, #28
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr
	...

0800d9d0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b083      	sub	sp, #12
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	4a26      	ldr	r2, [pc, #152]	@ (800da74 <TIM_ResetCallback+0xa4>)
 800d9dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	4a25      	ldr	r2, [pc, #148]	@ (800da78 <TIM_ResetCallback+0xa8>)
 800d9e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	4a24      	ldr	r2, [pc, #144]	@ (800da7c <TIM_ResetCallback+0xac>)
 800d9ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4a23      	ldr	r2, [pc, #140]	@ (800da80 <TIM_ResetCallback+0xb0>)
 800d9f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	4a22      	ldr	r2, [pc, #136]	@ (800da84 <TIM_ResetCallback+0xb4>)
 800d9fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	4a21      	ldr	r2, [pc, #132]	@ (800da88 <TIM_ResetCallback+0xb8>)
 800da04:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	4a20      	ldr	r2, [pc, #128]	@ (800da8c <TIM_ResetCallback+0xbc>)
 800da0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	4a1f      	ldr	r2, [pc, #124]	@ (800da90 <TIM_ResetCallback+0xc0>)
 800da14:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	4a1e      	ldr	r2, [pc, #120]	@ (800da94 <TIM_ResetCallback+0xc4>)
 800da1c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	4a1d      	ldr	r2, [pc, #116]	@ (800da98 <TIM_ResetCallback+0xc8>)
 800da24:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	4a1c      	ldr	r2, [pc, #112]	@ (800da9c <TIM_ResetCallback+0xcc>)
 800da2c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	4a1b      	ldr	r2, [pc, #108]	@ (800daa0 <TIM_ResetCallback+0xd0>)
 800da34:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	4a1a      	ldr	r2, [pc, #104]	@ (800daa4 <TIM_ResetCallback+0xd4>)
 800da3c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	4a19      	ldr	r2, [pc, #100]	@ (800daa8 <TIM_ResetCallback+0xd8>)
 800da44:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	4a18      	ldr	r2, [pc, #96]	@ (800daac <TIM_ResetCallback+0xdc>)
 800da4c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	4a17      	ldr	r2, [pc, #92]	@ (800dab0 <TIM_ResetCallback+0xe0>)
 800da54:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	4a16      	ldr	r2, [pc, #88]	@ (800dab4 <TIM_ResetCallback+0xe4>)
 800da5c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	4a15      	ldr	r2, [pc, #84]	@ (800dab8 <TIM_ResetCallback+0xe8>)
 800da64:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800da68:	bf00      	nop
 800da6a:	370c      	adds	r7, #12
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr
 800da74:	08006a39 	.word	0x08006a39
 800da78:	0800cd1d 	.word	0x0800cd1d
 800da7c:	0800cd95 	.word	0x0800cd95
 800da80:	0800cda9 	.word	0x0800cda9
 800da84:	0800cd45 	.word	0x0800cd45
 800da88:	0800cd59 	.word	0x0800cd59
 800da8c:	0800cd31 	.word	0x0800cd31
 800da90:	0800cd6d 	.word	0x0800cd6d
 800da94:	0800cd81 	.word	0x0800cd81
 800da98:	0800cdbd 	.word	0x0800cdbd
 800da9c:	0800dd11 	.word	0x0800dd11
 800daa0:	0800dd25 	.word	0x0800dd25
 800daa4:	0800dd39 	.word	0x0800dd39
 800daa8:	0800dd4d 	.word	0x0800dd4d
 800daac:	0800dd61 	.word	0x0800dd61
 800dab0:	0800dd75 	.word	0x0800dd75
 800dab4:	0800dd89 	.word	0x0800dd89
 800dab8:	0800dd9d 	.word	0x0800dd9d

0800dabc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b085      	sub	sp, #20
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d101      	bne.n	800dad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dad0:	2302      	movs	r3, #2
 800dad2:	e074      	b.n	800dbbe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2201      	movs	r2, #1
 800dad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2202      	movs	r2, #2
 800dae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	689b      	ldr	r3, [r3, #8]
 800daf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a34      	ldr	r2, [pc, #208]	@ (800dbcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d009      	beq.n	800db12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	4a33      	ldr	r2, [pc, #204]	@ (800dbd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d004      	beq.n	800db12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4a31      	ldr	r2, [pc, #196]	@ (800dbd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d108      	bne.n	800db24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800db18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	4313      	orrs	r3, r2
 800db22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800db2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	68fa      	ldr	r2, [r7, #12]
 800db36:	4313      	orrs	r3, r2
 800db38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	68fa      	ldr	r2, [r7, #12]
 800db40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	4a21      	ldr	r2, [pc, #132]	@ (800dbcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800db48:	4293      	cmp	r3, r2
 800db4a:	d022      	beq.n	800db92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db54:	d01d      	beq.n	800db92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a1f      	ldr	r2, [pc, #124]	@ (800dbd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d018      	beq.n	800db92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4a1d      	ldr	r2, [pc, #116]	@ (800dbdc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d013      	beq.n	800db92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	4a1c      	ldr	r2, [pc, #112]	@ (800dbe0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800db70:	4293      	cmp	r3, r2
 800db72:	d00e      	beq.n	800db92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a15      	ldr	r2, [pc, #84]	@ (800dbd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d009      	beq.n	800db92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4a18      	ldr	r2, [pc, #96]	@ (800dbe4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d004      	beq.n	800db92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a11      	ldr	r2, [pc, #68]	@ (800dbd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d10c      	bne.n	800dbac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800db98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	689b      	ldr	r3, [r3, #8]
 800db9e:	68ba      	ldr	r2, [r7, #8]
 800dba0:	4313      	orrs	r3, r2
 800dba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	68ba      	ldr	r2, [r7, #8]
 800dbaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dbbc:	2300      	movs	r3, #0
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3714      	adds	r7, #20
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr
 800dbca:	bf00      	nop
 800dbcc:	40012c00 	.word	0x40012c00
 800dbd0:	40013400 	.word	0x40013400
 800dbd4:	40015000 	.word	0x40015000
 800dbd8:	40000400 	.word	0x40000400
 800dbdc:	40000800 	.word	0x40000800
 800dbe0:	40000c00 	.word	0x40000c00
 800dbe4:	40014000 	.word	0x40014000

0800dbe8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b085      	sub	sp, #20
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d101      	bne.n	800dc04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dc00:	2302      	movs	r3, #2
 800dc02:	e078      	b.n	800dcf6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2201      	movs	r2, #1
 800dc08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	4313      	orrs	r3, r2
 800dc18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	689b      	ldr	r3, [r3, #8]
 800dc24:	4313      	orrs	r3, r2
 800dc26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	4313      	orrs	r3, r2
 800dc34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4313      	orrs	r3, r2
 800dc42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	691b      	ldr	r3, [r3, #16]
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	695b      	ldr	r3, [r3, #20]
 800dc5c:	4313      	orrs	r3, r2
 800dc5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc6a:	4313      	orrs	r3, r2
 800dc6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	699b      	ldr	r3, [r3, #24]
 800dc78:	041b      	lsls	r3, r3, #16
 800dc7a:	4313      	orrs	r3, r2
 800dc7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	69db      	ldr	r3, [r3, #28]
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4a1c      	ldr	r2, [pc, #112]	@ (800dd04 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d009      	beq.n	800dcaa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a1b      	ldr	r2, [pc, #108]	@ (800dd08 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d004      	beq.n	800dcaa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a19      	ldr	r2, [pc, #100]	@ (800dd0c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d11c      	bne.n	800dce4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcb4:	051b      	lsls	r3, r3, #20
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	6a1b      	ldr	r3, [r3, #32]
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dce0:	4313      	orrs	r3, r2
 800dce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	68fa      	ldr	r2, [r7, #12]
 800dcea:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3714      	adds	r7, #20
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	40012c00 	.word	0x40012c00
 800dd08:	40013400 	.word	0x40013400
 800dd0c:	40015000 	.word	0x40015000

0800dd10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b083      	sub	sp, #12
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dd18:	bf00      	nop
 800dd1a:	370c      	adds	r7, #12
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr

0800dd24 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b083      	sub	sp, #12
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800dd2c:	bf00      	nop
 800dd2e:	370c      	adds	r7, #12
 800dd30:	46bd      	mov	sp, r7
 800dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd36:	4770      	bx	lr

0800dd38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b083      	sub	sp, #12
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd40:	bf00      	nop
 800dd42:	370c      	adds	r7, #12
 800dd44:	46bd      	mov	sp, r7
 800dd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4a:	4770      	bx	lr

0800dd4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dd54:	bf00      	nop
 800dd56:	370c      	adds	r7, #12
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr

0800dd60 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800dd68:	bf00      	nop
 800dd6a:	370c      	adds	r7, #12
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800dd74:	b480      	push	{r7}
 800dd76:	b083      	sub	sp, #12
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800dd7c:	bf00      	nop
 800dd7e:	370c      	adds	r7, #12
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800dd90:	bf00      	nop
 800dd92:	370c      	adds	r7, #12
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b083      	sub	sp, #12
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800dda4:	bf00      	nop
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d101      	bne.n	800ddc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	e050      	b.n	800de64 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d114      	bne.n	800ddf6 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 fd5b 	bl	800e890 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d103      	bne.n	800ddec <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	4a21      	ldr	r2, [pc, #132]	@ (800de6c <HAL_UART_Init+0xbc>)
 800dde8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2224      	movs	r2, #36	@ 0x24
 800ddfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f022 0201 	bic.w	r2, r2, #1
 800de0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de12:	2b00      	cmp	r3, #0
 800de14:	d002      	beq.n	800de1c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f001 f888 	bl	800ef2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 fd89 	bl	800e934 <UART_SetConfig>
 800de22:	4603      	mov	r3, r0
 800de24:	2b01      	cmp	r3, #1
 800de26:	d101      	bne.n	800de2c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800de28:	2301      	movs	r3, #1
 800de2a:	e01b      	b.n	800de64 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	685a      	ldr	r2, [r3, #4]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800de3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	689a      	ldr	r2, [r3, #8]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800de4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	681a      	ldr	r2, [r3, #0]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f042 0201 	orr.w	r2, r2, #1
 800de5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f001 f907 	bl	800f070 <UART_CheckIdleState>
 800de62:	4603      	mov	r3, r0
}
 800de64:	4618      	mov	r0, r3
 800de66:	3708      	adds	r7, #8
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	08008285 	.word	0x08008285

0800de70 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800de70:	b480      	push	{r7}
 800de72:	b087      	sub	sp, #28
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	460b      	mov	r3, r1
 800de7a:	607a      	str	r2, [r7, #4]
 800de7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800de7e:	2300      	movs	r3, #0
 800de80:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d109      	bne.n	800de9c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800de98:	2301      	movs	r3, #1
 800de9a:	e09c      	b.n	800dfd6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dea2:	2b20      	cmp	r3, #32
 800dea4:	d16c      	bne.n	800df80 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800dea6:	7afb      	ldrb	r3, [r7, #11]
 800dea8:	2b0c      	cmp	r3, #12
 800deaa:	d85e      	bhi.n	800df6a <HAL_UART_RegisterCallback+0xfa>
 800deac:	a201      	add	r2, pc, #4	@ (adr r2, 800deb4 <HAL_UART_RegisterCallback+0x44>)
 800deae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb2:	bf00      	nop
 800deb4:	0800dee9 	.word	0x0800dee9
 800deb8:	0800def3 	.word	0x0800def3
 800debc:	0800defd 	.word	0x0800defd
 800dec0:	0800df07 	.word	0x0800df07
 800dec4:	0800df11 	.word	0x0800df11
 800dec8:	0800df1b 	.word	0x0800df1b
 800decc:	0800df25 	.word	0x0800df25
 800ded0:	0800df2f 	.word	0x0800df2f
 800ded4:	0800df39 	.word	0x0800df39
 800ded8:	0800df43 	.word	0x0800df43
 800dedc:	0800df4d 	.word	0x0800df4d
 800dee0:	0800df57 	.word	0x0800df57
 800dee4:	0800df61 	.word	0x0800df61
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800def0:	e070      	b.n	800dfd4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	687a      	ldr	r2, [r7, #4]
 800def6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800defa:	e06b      	b.n	800dfd4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800df04:	e066      	b.n	800dfd4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	687a      	ldr	r2, [r7, #4]
 800df0a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800df0e:	e061      	b.n	800dfd4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800df18:	e05c      	b.n	800dfd4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	687a      	ldr	r2, [r7, #4]
 800df1e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800df22:	e057      	b.n	800dfd4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800df2c:	e052      	b.n	800dfd4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800df36:	e04d      	b.n	800dfd4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800df40:	e048      	b.n	800dfd4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	687a      	ldr	r2, [r7, #4]
 800df46:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800df4a:	e043      	b.n	800dfd4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800df54:	e03e      	b.n	800dfd4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800df5e:	e039      	b.n	800dfd4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800df68:	e034      	b.n	800dfd4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800df7a:	2301      	movs	r3, #1
 800df7c:	75fb      	strb	r3, [r7, #23]
        break;
 800df7e:	e029      	b.n	800dfd4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df86:	2b00      	cmp	r3, #0
 800df88:	d11a      	bne.n	800dfc0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800df8a:	7afb      	ldrb	r3, [r7, #11]
 800df8c:	2b0b      	cmp	r3, #11
 800df8e:	d002      	beq.n	800df96 <HAL_UART_RegisterCallback+0x126>
 800df90:	2b0c      	cmp	r3, #12
 800df92:	d005      	beq.n	800dfa0 <HAL_UART_RegisterCallback+0x130>
 800df94:	e009      	b.n	800dfaa <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	687a      	ldr	r2, [r7, #4]
 800df9a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800df9e:	e019      	b.n	800dfd4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800dfa8:	e014      	b.n	800dfd4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dfb0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800dfba:	2301      	movs	r3, #1
 800dfbc:	75fb      	strb	r3, [r7, #23]
        break;
 800dfbe:	e009      	b.n	800dfd4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dfc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800dfd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	371c      	adds	r7, #28
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop

0800dfe4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b08a      	sub	sp, #40	@ 0x28
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	4613      	mov	r3, r2
 800dff0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dff8:	2b20      	cmp	r3, #32
 800dffa:	d137      	bne.n	800e06c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d002      	beq.n	800e008 <HAL_UART_Receive_DMA+0x24>
 800e002:	88fb      	ldrh	r3, [r7, #6]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d101      	bne.n	800e00c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e008:	2301      	movs	r3, #1
 800e00a:	e030      	b.n	800e06e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2200      	movs	r2, #0
 800e010:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	4a18      	ldr	r2, [pc, #96]	@ (800e078 <HAL_UART_Receive_DMA+0x94>)
 800e018:	4293      	cmp	r3, r2
 800e01a:	d01f      	beq.n	800e05c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e026:	2b00      	cmp	r3, #0
 800e028:	d018      	beq.n	800e05c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	e853 3f00 	ldrex	r3, [r3]
 800e036:	613b      	str	r3, [r7, #16]
   return(result);
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e03e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	461a      	mov	r2, r3
 800e046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e048:	623b      	str	r3, [r7, #32]
 800e04a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e04c:	69f9      	ldr	r1, [r7, #28]
 800e04e:	6a3a      	ldr	r2, [r7, #32]
 800e050:	e841 2300 	strex	r3, r2, [r1]
 800e054:	61bb      	str	r3, [r7, #24]
   return(result);
 800e056:	69bb      	ldr	r3, [r7, #24]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d1e6      	bne.n	800e02a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e05c:	88fb      	ldrh	r3, [r7, #6]
 800e05e:	461a      	mov	r2, r3
 800e060:	68b9      	ldr	r1, [r7, #8]
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	f001 f91c 	bl	800f2a0 <UART_Start_Receive_DMA>
 800e068:	4603      	mov	r3, r0
 800e06a:	e000      	b.n	800e06e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e06c:	2302      	movs	r3, #2
  }
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3728      	adds	r7, #40	@ 0x28
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	40008000 	.word	0x40008000

0800e07c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b0ba      	sub	sp, #232	@ 0xe8
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	69db      	ldr	r3, [r3, #28]
 800e08a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	689b      	ldr	r3, [r3, #8]
 800e09e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e0a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e0a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e0aa:	4013      	ands	r3, r2
 800e0ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e0b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d11b      	bne.n	800e0f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0bc:	f003 0320 	and.w	r3, r3, #32
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d015      	beq.n	800e0f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e0c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e0c8:	f003 0320 	and.w	r3, r3, #32
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d105      	bne.n	800e0dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e0d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e0d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d009      	beq.n	800e0f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	f000 8312 	beq.w	800e70a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	4798      	blx	r3
      }
      return;
 800e0ee:	e30c      	b.n	800e70a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e0f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	f000 8129 	beq.w	800e34c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e0fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e0fe:	4b90      	ldr	r3, [pc, #576]	@ (800e340 <HAL_UART_IRQHandler+0x2c4>)
 800e100:	4013      	ands	r3, r2
 800e102:	2b00      	cmp	r3, #0
 800e104:	d106      	bne.n	800e114 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e106:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e10a:	4b8e      	ldr	r3, [pc, #568]	@ (800e344 <HAL_UART_IRQHandler+0x2c8>)
 800e10c:	4013      	ands	r3, r2
 800e10e:	2b00      	cmp	r3, #0
 800e110:	f000 811c 	beq.w	800e34c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e118:	f003 0301 	and.w	r3, r3, #1
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d011      	beq.n	800e144 <HAL_UART_IRQHandler+0xc8>
 800e120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d00b      	beq.n	800e144 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	2201      	movs	r2, #1
 800e132:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e13a:	f043 0201 	orr.w	r2, r3, #1
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e148:	f003 0302 	and.w	r3, r3, #2
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d011      	beq.n	800e174 <HAL_UART_IRQHandler+0xf8>
 800e150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e154:	f003 0301 	and.w	r3, r3, #1
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d00b      	beq.n	800e174 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2202      	movs	r2, #2
 800e162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e16a:	f043 0204 	orr.w	r2, r3, #4
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e178:	f003 0304 	and.w	r3, r3, #4
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d011      	beq.n	800e1a4 <HAL_UART_IRQHandler+0x128>
 800e180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e184:	f003 0301 	and.w	r3, r3, #1
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d00b      	beq.n	800e1a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	2204      	movs	r2, #4
 800e192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e19a:	f043 0202 	orr.w	r2, r3, #2
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e1a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1a8:	f003 0308 	and.w	r3, r3, #8
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d017      	beq.n	800e1e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e1b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e1b4:	f003 0320 	and.w	r3, r3, #32
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d105      	bne.n	800e1c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e1bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e1c0:	4b5f      	ldr	r3, [pc, #380]	@ (800e340 <HAL_UART_IRQHandler+0x2c4>)
 800e1c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d00b      	beq.n	800e1e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2208      	movs	r2, #8
 800e1ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1d6:	f043 0208 	orr.w	r2, r3, #8
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e1e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d012      	beq.n	800e212 <HAL_UART_IRQHandler+0x196>
 800e1ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e1f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d00c      	beq.n	800e212 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e200:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e208:	f043 0220 	orr.w	r2, r3, #32
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e218:	2b00      	cmp	r3, #0
 800e21a:	f000 8278 	beq.w	800e70e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e21e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e222:	f003 0320 	and.w	r3, r3, #32
 800e226:	2b00      	cmp	r3, #0
 800e228:	d013      	beq.n	800e252 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e22a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e22e:	f003 0320 	and.w	r3, r3, #32
 800e232:	2b00      	cmp	r3, #0
 800e234:	d105      	bne.n	800e242 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e23a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d007      	beq.n	800e252 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e246:	2b00      	cmp	r3, #0
 800e248:	d003      	beq.n	800e252 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e258:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	689b      	ldr	r3, [r3, #8]
 800e262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e266:	2b40      	cmp	r3, #64	@ 0x40
 800e268:	d005      	beq.n	800e276 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e26a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e26e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e272:	2b00      	cmp	r3, #0
 800e274:	d058      	beq.n	800e328 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f001 f8f9 	bl	800f46e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	689b      	ldr	r3, [r3, #8]
 800e282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e286:	2b40      	cmp	r3, #64	@ 0x40
 800e288:	d148      	bne.n	800e31c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	3308      	adds	r3, #8
 800e290:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e294:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e298:	e853 3f00 	ldrex	r3, [r3]
 800e29c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e2a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e2a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e2a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	3308      	adds	r3, #8
 800e2b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e2b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e2ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e2c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e2c6:	e841 2300 	strex	r3, r2, [r1]
 800e2ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e2ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d1d9      	bne.n	800e28a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d017      	beq.n	800e310 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2e6:	4a18      	ldr	r2, [pc, #96]	@ (800e348 <HAL_UART_IRQHandler+0x2cc>)
 800e2e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7fc f8c5 	bl	800a480 <HAL_DMA_Abort_IT>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d01f      	beq.n	800e33c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e30a:	4610      	mov	r0, r2
 800e30c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e30e:	e015      	b.n	800e33c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e31a:	e00f      	b.n	800e33c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e326:	e009      	b.n	800e33c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2200      	movs	r2, #0
 800e336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e33a:	e1e8      	b.n	800e70e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e33c:	bf00      	nop
    return;
 800e33e:	e1e6      	b.n	800e70e <HAL_UART_IRQHandler+0x692>
 800e340:	10000001 	.word	0x10000001
 800e344:	04000120 	.word	0x04000120
 800e348:	0800f739 	.word	0x0800f739

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e350:	2b01      	cmp	r3, #1
 800e352:	f040 8176 	bne.w	800e642 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e35a:	f003 0310 	and.w	r3, r3, #16
 800e35e:	2b00      	cmp	r3, #0
 800e360:	f000 816f 	beq.w	800e642 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e368:	f003 0310 	and.w	r3, r3, #16
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	f000 8168 	beq.w	800e642 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	2210      	movs	r2, #16
 800e378:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	689b      	ldr	r3, [r3, #8]
 800e380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e384:	2b40      	cmp	r3, #64	@ 0x40
 800e386:	f040 80dc 	bne.w	800e542 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e398:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	f000 80b1 	beq.w	800e504 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e3a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	f080 80a9 	bcs.w	800e504 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e3b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f003 0320 	and.w	r3, r3, #32
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	f040 8087 	bne.w	800e4de <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e3dc:	e853 3f00 	ldrex	r3, [r3]
 800e3e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e3e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e3e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e3ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e3fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e3fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e402:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e406:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e40a:	e841 2300 	strex	r3, r2, [r1]
 800e40e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e416:	2b00      	cmp	r3, #0
 800e418:	d1da      	bne.n	800e3d0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	3308      	adds	r3, #8
 800e420:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e422:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e424:	e853 3f00 	ldrex	r3, [r3]
 800e428:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e42a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e42c:	f023 0301 	bic.w	r3, r3, #1
 800e430:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	3308      	adds	r3, #8
 800e43a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e43e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e442:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e444:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e446:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e44a:	e841 2300 	strex	r3, r2, [r1]
 800e44e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e450:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e452:	2b00      	cmp	r3, #0
 800e454:	d1e1      	bne.n	800e41a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	3308      	adds	r3, #8
 800e45c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e45e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e460:	e853 3f00 	ldrex	r3, [r3]
 800e464:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e466:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e468:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e46c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	3308      	adds	r3, #8
 800e476:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e47a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e47c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e47e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e480:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e482:	e841 2300 	strex	r3, r2, [r1]
 800e486:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e488:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d1e3      	bne.n	800e456 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2220      	movs	r2, #32
 800e492:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2200      	movs	r2, #0
 800e49a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4a4:	e853 3f00 	ldrex	r3, [r3]
 800e4a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e4aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4ac:	f023 0310 	bic.w	r3, r3, #16
 800e4b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e4be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e4c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e4c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e4c6:	e841 2300 	strex	r3, r2, [r1]
 800e4ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e4cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1e4      	bne.n	800e49c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7fb ff78 	bl	800a3ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2202      	movs	r2, #2
 800e4e2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800e4f0:	687a      	ldr	r2, [r7, #4]
 800e4f2:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800e4f6:	b292      	uxth	r2, r2
 800e4f8:	1a8a      	subs	r2, r1, r2
 800e4fa:	b292      	uxth	r2, r2
 800e4fc:	4611      	mov	r1, r2
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e502:	e106      	b.n	800e712 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e50a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e50e:	429a      	cmp	r2, r3
 800e510:	f040 80ff 	bne.w	800e712 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f003 0320 	and.w	r3, r3, #32
 800e522:	2b20      	cmp	r3, #32
 800e524:	f040 80f5 	bne.w	800e712 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2202      	movs	r2, #2
 800e52c:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e53a:	4611      	mov	r1, r2
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	4798      	blx	r3
      return;
 800e540:	e0e7      	b.n	800e712 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e54e:	b29b      	uxth	r3, r3
 800e550:	1ad3      	subs	r3, r2, r3
 800e552:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	2b00      	cmp	r3, #0
 800e560:	f000 80d9 	beq.w	800e716 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800e564:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e568:	2b00      	cmp	r3, #0
 800e56a:	f000 80d4 	beq.w	800e716 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e576:	e853 3f00 	ldrex	r3, [r3]
 800e57a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e57c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e57e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e582:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	461a      	mov	r2, r3
 800e58c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e590:	647b      	str	r3, [r7, #68]	@ 0x44
 800e592:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e594:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e596:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e598:	e841 2300 	strex	r3, r2, [r1]
 800e59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e59e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d1e4      	bne.n	800e56e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	3308      	adds	r3, #8
 800e5aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ae:	e853 3f00 	ldrex	r3, [r3]
 800e5b2:	623b      	str	r3, [r7, #32]
   return(result);
 800e5b4:	6a3b      	ldr	r3, [r7, #32]
 800e5b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e5ba:	f023 0301 	bic.w	r3, r3, #1
 800e5be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	3308      	adds	r3, #8
 800e5c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e5cc:	633a      	str	r2, [r7, #48]	@ 0x30
 800e5ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e5d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5d4:	e841 2300 	strex	r3, r2, [r1]
 800e5d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1e1      	bne.n	800e5a4 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2220      	movs	r2, #32
 800e5e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5fa:	693b      	ldr	r3, [r7, #16]
 800e5fc:	e853 3f00 	ldrex	r3, [r3]
 800e600:	60fb      	str	r3, [r7, #12]
   return(result);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	f023 0310 	bic.w	r3, r3, #16
 800e608:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	461a      	mov	r2, r3
 800e612:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e616:	61fb      	str	r3, [r7, #28]
 800e618:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e61a:	69b9      	ldr	r1, [r7, #24]
 800e61c:	69fa      	ldr	r2, [r7, #28]
 800e61e:	e841 2300 	strex	r3, r2, [r1]
 800e622:	617b      	str	r3, [r7, #20]
   return(result);
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d1e4      	bne.n	800e5f4 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2202      	movs	r2, #2
 800e62e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e636:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800e63a:	4611      	mov	r1, r2
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e640:	e069      	b.n	800e716 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e646:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d010      	beq.n	800e670 <HAL_UART_IRQHandler+0x5f4>
 800e64e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e656:	2b00      	cmp	r3, #0
 800e658:	d00a      	beq.n	800e670 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e662:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e66e:	e055      	b.n	800e71c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d014      	beq.n	800e6a6 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e67c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e684:	2b00      	cmp	r3, #0
 800e686:	d105      	bne.n	800e694 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e68c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e690:	2b00      	cmp	r3, #0
 800e692:	d008      	beq.n	800e6a6 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d03e      	beq.n	800e71a <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	4798      	blx	r3
    }
    return;
 800e6a4:	e039      	b.n	800e71a <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e6a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d009      	beq.n	800e6c6 <HAL_UART_IRQHandler+0x64a>
 800e6b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d003      	beq.n	800e6c6 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f001 f84e 	bl	800f760 <UART_EndTransmit_IT>
    return;
 800e6c4:	e02a      	b.n	800e71c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e6c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00b      	beq.n	800e6ea <HAL_UART_IRQHandler+0x66e>
 800e6d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6d6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d005      	beq.n	800e6ea <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6e8:	e018      	b.n	800e71c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d012      	beq.n	800e71c <HAL_UART_IRQHandler+0x6a0>
 800e6f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	da0e      	bge.n	800e71c <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e708:	e008      	b.n	800e71c <HAL_UART_IRQHandler+0x6a0>
      return;
 800e70a:	bf00      	nop
 800e70c:	e006      	b.n	800e71c <HAL_UART_IRQHandler+0x6a0>
    return;
 800e70e:	bf00      	nop
 800e710:	e004      	b.n	800e71c <HAL_UART_IRQHandler+0x6a0>
      return;
 800e712:	bf00      	nop
 800e714:	e002      	b.n	800e71c <HAL_UART_IRQHandler+0x6a0>
      return;
 800e716:	bf00      	nop
 800e718:	e000      	b.n	800e71c <HAL_UART_IRQHandler+0x6a0>
    return;
 800e71a:	bf00      	nop
  }
}
 800e71c:	37e8      	adds	r7, #232	@ 0xe8
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop

0800e724 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e72c:	bf00      	nop
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e740:	bf00      	nop
 800e742:	370c      	adds	r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr

0800e74c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b083      	sub	sp, #12
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e754:	bf00      	nop
 800e756:	370c      	adds	r7, #12
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e760:	b480      	push	{r7}
 800e762:	b083      	sub	sp, #12
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e768:	bf00      	nop
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800e77c:	bf00      	nop
 800e77e:	370c      	adds	r7, #12
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800e788:	b480      	push	{r7}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800e790:	bf00      	nop
 800e792:	370c      	adds	r7, #12
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr

0800e79c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800e7a4:	bf00      	nop
 800e7a6:	370c      	adds	r7, #12
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr

0800e7b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b083      	sub	sp, #12
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e7bc:	bf00      	nop
 800e7be:	370c      	adds	r7, #12
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr

0800e7c8 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b083      	sub	sp, #12
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4a09      	ldr	r2, [pc, #36]	@ (800e7fc <HAL_UART_ReceiverTimeout_Config+0x34>)
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	d009      	beq.n	800e7f0 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	695b      	ldr	r3, [r3, #20]
 800e7e2:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	683a      	ldr	r2, [r7, #0]
 800e7ec:	430a      	orrs	r2, r1
 800e7ee:	615a      	str	r2, [r3, #20]
  }
}
 800e7f0:	bf00      	nop
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr
 800e7fc:	40008000 	.word	0x40008000

0800e800 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800e800:	b480      	push	{r7}
 800e802:	b083      	sub	sp, #12
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4a18      	ldr	r2, [pc, #96]	@ (800e870 <HAL_UART_EnableReceiverTimeout+0x70>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d027      	beq.n	800e862 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e818:	2b20      	cmp	r3, #32
 800e81a:	d120      	bne.n	800e85e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e822:	2b01      	cmp	r3, #1
 800e824:	d101      	bne.n	800e82a <HAL_UART_EnableReceiverTimeout+0x2a>
 800e826:	2302      	movs	r3, #2
 800e828:	e01c      	b.n	800e864 <HAL_UART_EnableReceiverTimeout+0x64>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2201      	movs	r2, #1
 800e82e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2224      	movs	r2, #36	@ 0x24
 800e836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	685a      	ldr	r2, [r3, #4]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800e848:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2220      	movs	r2, #32
 800e84e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800e85a:	2300      	movs	r3, #0
 800e85c:	e002      	b.n	800e864 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800e85e:	2302      	movs	r3, #2
 800e860:	e000      	b.n	800e864 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800e862:	2301      	movs	r3, #1
  }
}
 800e864:	4618      	mov	r0, r3
 800e866:	370c      	adds	r7, #12
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr
 800e870:	40008000 	.word	0x40008000

0800e874 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800e882:	4618      	mov	r0, r3
 800e884:	370c      	adds	r7, #12
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr
	...

0800e890 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800e890:	b480      	push	{r7}
 800e892:	b083      	sub	sp, #12
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	4a1a      	ldr	r2, [pc, #104]	@ (800e904 <UART_InitCallbacksToDefault+0x74>)
 800e89c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	4a19      	ldr	r2, [pc, #100]	@ (800e908 <UART_InitCallbacksToDefault+0x78>)
 800e8a4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	4a18      	ldr	r2, [pc, #96]	@ (800e90c <UART_InitCallbacksToDefault+0x7c>)
 800e8ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	4a17      	ldr	r2, [pc, #92]	@ (800e910 <UART_InitCallbacksToDefault+0x80>)
 800e8b4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	4a16      	ldr	r2, [pc, #88]	@ (800e914 <UART_InitCallbacksToDefault+0x84>)
 800e8bc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	4a15      	ldr	r2, [pc, #84]	@ (800e918 <UART_InitCallbacksToDefault+0x88>)
 800e8c4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	4a14      	ldr	r2, [pc, #80]	@ (800e91c <UART_InitCallbacksToDefault+0x8c>)
 800e8cc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	4a13      	ldr	r2, [pc, #76]	@ (800e920 <UART_InitCallbacksToDefault+0x90>)
 800e8d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	4a12      	ldr	r2, [pc, #72]	@ (800e924 <UART_InitCallbacksToDefault+0x94>)
 800e8dc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	4a11      	ldr	r2, [pc, #68]	@ (800e928 <UART_InitCallbacksToDefault+0x98>)
 800e8e4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	4a10      	ldr	r2, [pc, #64]	@ (800e92c <UART_InitCallbacksToDefault+0x9c>)
 800e8ec:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	4a0f      	ldr	r2, [pc, #60]	@ (800e930 <UART_InitCallbacksToDefault+0xa0>)
 800e8f4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800e8f8:	bf00      	nop
 800e8fa:	370c      	adds	r7, #12
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e902:	4770      	bx	lr
 800e904:	0800e739 	.word	0x0800e739
 800e908:	0800e725 	.word	0x0800e725
 800e90c:	0800e74d 	.word	0x0800e74d
 800e910:	08006a25 	.word	0x08006a25
 800e914:	0800e761 	.word	0x0800e761
 800e918:	0800e775 	.word	0x0800e775
 800e91c:	0800e789 	.word	0x0800e789
 800e920:	0800e79d 	.word	0x0800e79d
 800e924:	0800f7bb 	.word	0x0800f7bb
 800e928:	0800f7cf 	.word	0x0800f7cf
 800e92c:	0800f7e3 	.word	0x0800f7e3
 800e930:	0800e7b1 	.word	0x0800e7b1

0800e934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e938:	b08c      	sub	sp, #48	@ 0x30
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e93e:	2300      	movs	r3, #0
 800e940:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	689a      	ldr	r2, [r3, #8]
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	691b      	ldr	r3, [r3, #16]
 800e94c:	431a      	orrs	r2, r3
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	695b      	ldr	r3, [r3, #20]
 800e952:	431a      	orrs	r2, r3
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	69db      	ldr	r3, [r3, #28]
 800e958:	4313      	orrs	r3, r2
 800e95a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	4baa      	ldr	r3, [pc, #680]	@ (800ec0c <UART_SetConfig+0x2d8>)
 800e964:	4013      	ands	r3, r2
 800e966:	697a      	ldr	r2, [r7, #20]
 800e968:	6812      	ldr	r2, [r2, #0]
 800e96a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e96c:	430b      	orrs	r3, r1
 800e96e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	685b      	ldr	r3, [r3, #4]
 800e976:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	68da      	ldr	r2, [r3, #12]
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	430a      	orrs	r2, r1
 800e984:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	699b      	ldr	r3, [r3, #24]
 800e98a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a9f      	ldr	r2, [pc, #636]	@ (800ec10 <UART_SetConfig+0x2dc>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d004      	beq.n	800e9a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	6a1b      	ldr	r3, [r3, #32]
 800e99a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e99c:	4313      	orrs	r3, r2
 800e99e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	689b      	ldr	r3, [r3, #8]
 800e9a6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800e9aa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800e9ae:	697a      	ldr	r2, [r7, #20]
 800e9b0:	6812      	ldr	r2, [r2, #0]
 800e9b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e9b4:	430b      	orrs	r3, r1
 800e9b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9be:	f023 010f 	bic.w	r1, r3, #15
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	430a      	orrs	r2, r1
 800e9cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4a90      	ldr	r2, [pc, #576]	@ (800ec14 <UART_SetConfig+0x2e0>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d125      	bne.n	800ea24 <UART_SetConfig+0xf0>
 800e9d8:	4b8f      	ldr	r3, [pc, #572]	@ (800ec18 <UART_SetConfig+0x2e4>)
 800e9da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e9de:	f003 0303 	and.w	r3, r3, #3
 800e9e2:	2b03      	cmp	r3, #3
 800e9e4:	d81a      	bhi.n	800ea1c <UART_SetConfig+0xe8>
 800e9e6:	a201      	add	r2, pc, #4	@ (adr r2, 800e9ec <UART_SetConfig+0xb8>)
 800e9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ec:	0800e9fd 	.word	0x0800e9fd
 800e9f0:	0800ea0d 	.word	0x0800ea0d
 800e9f4:	0800ea05 	.word	0x0800ea05
 800e9f8:	0800ea15 	.word	0x0800ea15
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea02:	e116      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800ea04:	2302      	movs	r3, #2
 800ea06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea0a:	e112      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800ea0c:	2304      	movs	r3, #4
 800ea0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea12:	e10e      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800ea14:	2308      	movs	r3, #8
 800ea16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea1a:	e10a      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800ea1c:	2310      	movs	r3, #16
 800ea1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea22:	e106      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4a7c      	ldr	r2, [pc, #496]	@ (800ec1c <UART_SetConfig+0x2e8>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d138      	bne.n	800eaa0 <UART_SetConfig+0x16c>
 800ea2e:	4b7a      	ldr	r3, [pc, #488]	@ (800ec18 <UART_SetConfig+0x2e4>)
 800ea30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ea34:	f003 030c 	and.w	r3, r3, #12
 800ea38:	2b0c      	cmp	r3, #12
 800ea3a:	d82d      	bhi.n	800ea98 <UART_SetConfig+0x164>
 800ea3c:	a201      	add	r2, pc, #4	@ (adr r2, 800ea44 <UART_SetConfig+0x110>)
 800ea3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea42:	bf00      	nop
 800ea44:	0800ea79 	.word	0x0800ea79
 800ea48:	0800ea99 	.word	0x0800ea99
 800ea4c:	0800ea99 	.word	0x0800ea99
 800ea50:	0800ea99 	.word	0x0800ea99
 800ea54:	0800ea89 	.word	0x0800ea89
 800ea58:	0800ea99 	.word	0x0800ea99
 800ea5c:	0800ea99 	.word	0x0800ea99
 800ea60:	0800ea99 	.word	0x0800ea99
 800ea64:	0800ea81 	.word	0x0800ea81
 800ea68:	0800ea99 	.word	0x0800ea99
 800ea6c:	0800ea99 	.word	0x0800ea99
 800ea70:	0800ea99 	.word	0x0800ea99
 800ea74:	0800ea91 	.word	0x0800ea91
 800ea78:	2300      	movs	r3, #0
 800ea7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea7e:	e0d8      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800ea80:	2302      	movs	r3, #2
 800ea82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea86:	e0d4      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800ea88:	2304      	movs	r3, #4
 800ea8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea8e:	e0d0      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800ea90:	2308      	movs	r3, #8
 800ea92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea96:	e0cc      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800ea98:	2310      	movs	r3, #16
 800ea9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ea9e:	e0c8      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4a5e      	ldr	r2, [pc, #376]	@ (800ec20 <UART_SetConfig+0x2ec>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d125      	bne.n	800eaf6 <UART_SetConfig+0x1c2>
 800eaaa:	4b5b      	ldr	r3, [pc, #364]	@ (800ec18 <UART_SetConfig+0x2e4>)
 800eaac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eab0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800eab4:	2b30      	cmp	r3, #48	@ 0x30
 800eab6:	d016      	beq.n	800eae6 <UART_SetConfig+0x1b2>
 800eab8:	2b30      	cmp	r3, #48	@ 0x30
 800eaba:	d818      	bhi.n	800eaee <UART_SetConfig+0x1ba>
 800eabc:	2b20      	cmp	r3, #32
 800eabe:	d00a      	beq.n	800ead6 <UART_SetConfig+0x1a2>
 800eac0:	2b20      	cmp	r3, #32
 800eac2:	d814      	bhi.n	800eaee <UART_SetConfig+0x1ba>
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d002      	beq.n	800eace <UART_SetConfig+0x19a>
 800eac8:	2b10      	cmp	r3, #16
 800eaca:	d008      	beq.n	800eade <UART_SetConfig+0x1aa>
 800eacc:	e00f      	b.n	800eaee <UART_SetConfig+0x1ba>
 800eace:	2300      	movs	r3, #0
 800ead0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ead4:	e0ad      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800ead6:	2302      	movs	r3, #2
 800ead8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eadc:	e0a9      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800eade:	2304      	movs	r3, #4
 800eae0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eae4:	e0a5      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800eae6:	2308      	movs	r3, #8
 800eae8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eaec:	e0a1      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800eaee:	2310      	movs	r3, #16
 800eaf0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eaf4:	e09d      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4a4a      	ldr	r2, [pc, #296]	@ (800ec24 <UART_SetConfig+0x2f0>)
 800eafc:	4293      	cmp	r3, r2
 800eafe:	d125      	bne.n	800eb4c <UART_SetConfig+0x218>
 800eb00:	4b45      	ldr	r3, [pc, #276]	@ (800ec18 <UART_SetConfig+0x2e4>)
 800eb02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800eb0a:	2bc0      	cmp	r3, #192	@ 0xc0
 800eb0c:	d016      	beq.n	800eb3c <UART_SetConfig+0x208>
 800eb0e:	2bc0      	cmp	r3, #192	@ 0xc0
 800eb10:	d818      	bhi.n	800eb44 <UART_SetConfig+0x210>
 800eb12:	2b80      	cmp	r3, #128	@ 0x80
 800eb14:	d00a      	beq.n	800eb2c <UART_SetConfig+0x1f8>
 800eb16:	2b80      	cmp	r3, #128	@ 0x80
 800eb18:	d814      	bhi.n	800eb44 <UART_SetConfig+0x210>
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d002      	beq.n	800eb24 <UART_SetConfig+0x1f0>
 800eb1e:	2b40      	cmp	r3, #64	@ 0x40
 800eb20:	d008      	beq.n	800eb34 <UART_SetConfig+0x200>
 800eb22:	e00f      	b.n	800eb44 <UART_SetConfig+0x210>
 800eb24:	2300      	movs	r3, #0
 800eb26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eb2a:	e082      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800eb2c:	2302      	movs	r3, #2
 800eb2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eb32:	e07e      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800eb34:	2304      	movs	r3, #4
 800eb36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eb3a:	e07a      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800eb3c:	2308      	movs	r3, #8
 800eb3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eb42:	e076      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800eb44:	2310      	movs	r3, #16
 800eb46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eb4a:	e072      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	4a35      	ldr	r2, [pc, #212]	@ (800ec28 <UART_SetConfig+0x2f4>)
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d12a      	bne.n	800ebac <UART_SetConfig+0x278>
 800eb56:	4b30      	ldr	r3, [pc, #192]	@ (800ec18 <UART_SetConfig+0x2e4>)
 800eb58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800eb60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eb64:	d01a      	beq.n	800eb9c <UART_SetConfig+0x268>
 800eb66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eb6a:	d81b      	bhi.n	800eba4 <UART_SetConfig+0x270>
 800eb6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb70:	d00c      	beq.n	800eb8c <UART_SetConfig+0x258>
 800eb72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb76:	d815      	bhi.n	800eba4 <UART_SetConfig+0x270>
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d003      	beq.n	800eb84 <UART_SetConfig+0x250>
 800eb7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eb80:	d008      	beq.n	800eb94 <UART_SetConfig+0x260>
 800eb82:	e00f      	b.n	800eba4 <UART_SetConfig+0x270>
 800eb84:	2300      	movs	r3, #0
 800eb86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eb8a:	e052      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800eb8c:	2302      	movs	r3, #2
 800eb8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eb92:	e04e      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800eb94:	2304      	movs	r3, #4
 800eb96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eb9a:	e04a      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800eb9c:	2308      	movs	r3, #8
 800eb9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800eba2:	e046      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800eba4:	2310      	movs	r3, #16
 800eba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ebaa:	e042      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	4a17      	ldr	r2, [pc, #92]	@ (800ec10 <UART_SetConfig+0x2dc>)
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	d13a      	bne.n	800ec2c <UART_SetConfig+0x2f8>
 800ebb6:	4b18      	ldr	r3, [pc, #96]	@ (800ec18 <UART_SetConfig+0x2e4>)
 800ebb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ebbc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ebc0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ebc4:	d01a      	beq.n	800ebfc <UART_SetConfig+0x2c8>
 800ebc6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ebca:	d81b      	bhi.n	800ec04 <UART_SetConfig+0x2d0>
 800ebcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ebd0:	d00c      	beq.n	800ebec <UART_SetConfig+0x2b8>
 800ebd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ebd6:	d815      	bhi.n	800ec04 <UART_SetConfig+0x2d0>
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d003      	beq.n	800ebe4 <UART_SetConfig+0x2b0>
 800ebdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ebe0:	d008      	beq.n	800ebf4 <UART_SetConfig+0x2c0>
 800ebe2:	e00f      	b.n	800ec04 <UART_SetConfig+0x2d0>
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ebea:	e022      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800ebec:	2302      	movs	r3, #2
 800ebee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ebf2:	e01e      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800ebf4:	2304      	movs	r3, #4
 800ebf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ebfa:	e01a      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800ebfc:	2308      	movs	r3, #8
 800ebfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ec02:	e016      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800ec04:	2310      	movs	r3, #16
 800ec06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ec0a:	e012      	b.n	800ec32 <UART_SetConfig+0x2fe>
 800ec0c:	cfff69f3 	.word	0xcfff69f3
 800ec10:	40008000 	.word	0x40008000
 800ec14:	40013800 	.word	0x40013800
 800ec18:	40021000 	.word	0x40021000
 800ec1c:	40004400 	.word	0x40004400
 800ec20:	40004800 	.word	0x40004800
 800ec24:	40004c00 	.word	0x40004c00
 800ec28:	40005000 	.word	0x40005000
 800ec2c:	2310      	movs	r3, #16
 800ec2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4aae      	ldr	r2, [pc, #696]	@ (800eef0 <UART_SetConfig+0x5bc>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	f040 8097 	bne.w	800ed6c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ec3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ec42:	2b08      	cmp	r3, #8
 800ec44:	d823      	bhi.n	800ec8e <UART_SetConfig+0x35a>
 800ec46:	a201      	add	r2, pc, #4	@ (adr r2, 800ec4c <UART_SetConfig+0x318>)
 800ec48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec4c:	0800ec71 	.word	0x0800ec71
 800ec50:	0800ec8f 	.word	0x0800ec8f
 800ec54:	0800ec79 	.word	0x0800ec79
 800ec58:	0800ec8f 	.word	0x0800ec8f
 800ec5c:	0800ec7f 	.word	0x0800ec7f
 800ec60:	0800ec8f 	.word	0x0800ec8f
 800ec64:	0800ec8f 	.word	0x0800ec8f
 800ec68:	0800ec8f 	.word	0x0800ec8f
 800ec6c:	0800ec87 	.word	0x0800ec87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec70:	f7fc fcf6 	bl	800b660 <HAL_RCC_GetPCLK1Freq>
 800ec74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ec76:	e010      	b.n	800ec9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ec78:	4b9e      	ldr	r3, [pc, #632]	@ (800eef4 <UART_SetConfig+0x5c0>)
 800ec7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ec7c:	e00d      	b.n	800ec9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ec7e:	f7fc fc81 	bl	800b584 <HAL_RCC_GetSysClockFreq>
 800ec82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ec84:	e009      	b.n	800ec9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ec8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ec8c:	e005      	b.n	800ec9a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ec92:	2301      	movs	r3, #1
 800ec94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ec98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ec9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	f000 8130 	beq.w	800ef02 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eca6:	4a94      	ldr	r2, [pc, #592]	@ (800eef8 <UART_SetConfig+0x5c4>)
 800eca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecac:	461a      	mov	r2, r3
 800ecae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecb4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	685a      	ldr	r2, [r3, #4]
 800ecba:	4613      	mov	r3, r2
 800ecbc:	005b      	lsls	r3, r3, #1
 800ecbe:	4413      	add	r3, r2
 800ecc0:	69ba      	ldr	r2, [r7, #24]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d305      	bcc.n	800ecd2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eccc:	69ba      	ldr	r2, [r7, #24]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d903      	bls.n	800ecda <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ecd8:	e113      	b.n	800ef02 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ecda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecdc:	2200      	movs	r2, #0
 800ecde:	60bb      	str	r3, [r7, #8]
 800ece0:	60fa      	str	r2, [r7, #12]
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ece6:	4a84      	ldr	r2, [pc, #528]	@ (800eef8 <UART_SetConfig+0x5c4>)
 800ece8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	2200      	movs	r2, #0
 800ecf0:	603b      	str	r3, [r7, #0]
 800ecf2:	607a      	str	r2, [r7, #4]
 800ecf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecf8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ecfc:	f7f1 ff7a 	bl	8000bf4 <__aeabi_uldivmod>
 800ed00:	4602      	mov	r2, r0
 800ed02:	460b      	mov	r3, r1
 800ed04:	4610      	mov	r0, r2
 800ed06:	4619      	mov	r1, r3
 800ed08:	f04f 0200 	mov.w	r2, #0
 800ed0c:	f04f 0300 	mov.w	r3, #0
 800ed10:	020b      	lsls	r3, r1, #8
 800ed12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ed16:	0202      	lsls	r2, r0, #8
 800ed18:	6979      	ldr	r1, [r7, #20]
 800ed1a:	6849      	ldr	r1, [r1, #4]
 800ed1c:	0849      	lsrs	r1, r1, #1
 800ed1e:	2000      	movs	r0, #0
 800ed20:	460c      	mov	r4, r1
 800ed22:	4605      	mov	r5, r0
 800ed24:	eb12 0804 	adds.w	r8, r2, r4
 800ed28:	eb43 0905 	adc.w	r9, r3, r5
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	2200      	movs	r2, #0
 800ed32:	469a      	mov	sl, r3
 800ed34:	4693      	mov	fp, r2
 800ed36:	4652      	mov	r2, sl
 800ed38:	465b      	mov	r3, fp
 800ed3a:	4640      	mov	r0, r8
 800ed3c:	4649      	mov	r1, r9
 800ed3e:	f7f1 ff59 	bl	8000bf4 <__aeabi_uldivmod>
 800ed42:	4602      	mov	r2, r0
 800ed44:	460b      	mov	r3, r1
 800ed46:	4613      	mov	r3, r2
 800ed48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ed4a:	6a3b      	ldr	r3, [r7, #32]
 800ed4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ed50:	d308      	bcc.n	800ed64 <UART_SetConfig+0x430>
 800ed52:	6a3b      	ldr	r3, [r7, #32]
 800ed54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ed58:	d204      	bcs.n	800ed64 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	6a3a      	ldr	r2, [r7, #32]
 800ed60:	60da      	str	r2, [r3, #12]
 800ed62:	e0ce      	b.n	800ef02 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ed64:	2301      	movs	r3, #1
 800ed66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ed6a:	e0ca      	b.n	800ef02 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	69db      	ldr	r3, [r3, #28]
 800ed70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ed74:	d166      	bne.n	800ee44 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ed76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ed7a:	2b08      	cmp	r3, #8
 800ed7c:	d827      	bhi.n	800edce <UART_SetConfig+0x49a>
 800ed7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ed84 <UART_SetConfig+0x450>)
 800ed80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed84:	0800eda9 	.word	0x0800eda9
 800ed88:	0800edb1 	.word	0x0800edb1
 800ed8c:	0800edb9 	.word	0x0800edb9
 800ed90:	0800edcf 	.word	0x0800edcf
 800ed94:	0800edbf 	.word	0x0800edbf
 800ed98:	0800edcf 	.word	0x0800edcf
 800ed9c:	0800edcf 	.word	0x0800edcf
 800eda0:	0800edcf 	.word	0x0800edcf
 800eda4:	0800edc7 	.word	0x0800edc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eda8:	f7fc fc5a 	bl	800b660 <HAL_RCC_GetPCLK1Freq>
 800edac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800edae:	e014      	b.n	800edda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800edb0:	f7fc fc6c 	bl	800b68c <HAL_RCC_GetPCLK2Freq>
 800edb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800edb6:	e010      	b.n	800edda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800edb8:	4b4e      	ldr	r3, [pc, #312]	@ (800eef4 <UART_SetConfig+0x5c0>)
 800edba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800edbc:	e00d      	b.n	800edda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800edbe:	f7fc fbe1 	bl	800b584 <HAL_RCC_GetSysClockFreq>
 800edc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800edc4:	e009      	b.n	800edda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800edc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800edca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800edcc:	e005      	b.n	800edda <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800edce:	2300      	movs	r3, #0
 800edd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800edd2:	2301      	movs	r3, #1
 800edd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800edd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800edda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eddc:	2b00      	cmp	r3, #0
 800edde:	f000 8090 	beq.w	800ef02 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ede6:	4a44      	ldr	r2, [pc, #272]	@ (800eef8 <UART_SetConfig+0x5c4>)
 800ede8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edec:	461a      	mov	r2, r3
 800edee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edf0:	fbb3 f3f2 	udiv	r3, r3, r2
 800edf4:	005a      	lsls	r2, r3, #1
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	085b      	lsrs	r3, r3, #1
 800edfc:	441a      	add	r2, r3
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ee08:	6a3b      	ldr	r3, [r7, #32]
 800ee0a:	2b0f      	cmp	r3, #15
 800ee0c:	d916      	bls.n	800ee3c <UART_SetConfig+0x508>
 800ee0e:	6a3b      	ldr	r3, [r7, #32]
 800ee10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee14:	d212      	bcs.n	800ee3c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ee16:	6a3b      	ldr	r3, [r7, #32]
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	f023 030f 	bic.w	r3, r3, #15
 800ee1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ee20:	6a3b      	ldr	r3, [r7, #32]
 800ee22:	085b      	lsrs	r3, r3, #1
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	f003 0307 	and.w	r3, r3, #7
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	8bfb      	ldrh	r3, [r7, #30]
 800ee2e:	4313      	orrs	r3, r2
 800ee30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	8bfa      	ldrh	r2, [r7, #30]
 800ee38:	60da      	str	r2, [r3, #12]
 800ee3a:	e062      	b.n	800ef02 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ee42:	e05e      	b.n	800ef02 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ee44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ee48:	2b08      	cmp	r3, #8
 800ee4a:	d828      	bhi.n	800ee9e <UART_SetConfig+0x56a>
 800ee4c:	a201      	add	r2, pc, #4	@ (adr r2, 800ee54 <UART_SetConfig+0x520>)
 800ee4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee52:	bf00      	nop
 800ee54:	0800ee79 	.word	0x0800ee79
 800ee58:	0800ee81 	.word	0x0800ee81
 800ee5c:	0800ee89 	.word	0x0800ee89
 800ee60:	0800ee9f 	.word	0x0800ee9f
 800ee64:	0800ee8f 	.word	0x0800ee8f
 800ee68:	0800ee9f 	.word	0x0800ee9f
 800ee6c:	0800ee9f 	.word	0x0800ee9f
 800ee70:	0800ee9f 	.word	0x0800ee9f
 800ee74:	0800ee97 	.word	0x0800ee97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee78:	f7fc fbf2 	bl	800b660 <HAL_RCC_GetPCLK1Freq>
 800ee7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ee7e:	e014      	b.n	800eeaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ee80:	f7fc fc04 	bl	800b68c <HAL_RCC_GetPCLK2Freq>
 800ee84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ee86:	e010      	b.n	800eeaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ee88:	4b1a      	ldr	r3, [pc, #104]	@ (800eef4 <UART_SetConfig+0x5c0>)
 800ee8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ee8c:	e00d      	b.n	800eeaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ee8e:	f7fc fb79 	bl	800b584 <HAL_RCC_GetSysClockFreq>
 800ee92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ee94:	e009      	b.n	800eeaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ee9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ee9c:	e005      	b.n	800eeaa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800eea2:	2301      	movs	r3, #1
 800eea4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800eea8:	bf00      	nop
    }

    if (pclk != 0U)
 800eeaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d028      	beq.n	800ef02 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeb4:	4a10      	ldr	r2, [pc, #64]	@ (800eef8 <UART_SetConfig+0x5c4>)
 800eeb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eeba:	461a      	mov	r2, r3
 800eebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eebe:	fbb3 f2f2 	udiv	r2, r3, r2
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	085b      	lsrs	r3, r3, #1
 800eec8:	441a      	add	r2, r3
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	fbb2 f3f3 	udiv	r3, r2, r3
 800eed2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eed4:	6a3b      	ldr	r3, [r7, #32]
 800eed6:	2b0f      	cmp	r3, #15
 800eed8:	d910      	bls.n	800eefc <UART_SetConfig+0x5c8>
 800eeda:	6a3b      	ldr	r3, [r7, #32]
 800eedc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eee0:	d20c      	bcs.n	800eefc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eee2:	6a3b      	ldr	r3, [r7, #32]
 800eee4:	b29a      	uxth	r2, r3
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	60da      	str	r2, [r3, #12]
 800eeec:	e009      	b.n	800ef02 <UART_SetConfig+0x5ce>
 800eeee:	bf00      	nop
 800eef0:	40008000 	.word	0x40008000
 800eef4:	00f42400 	.word	0x00f42400
 800eef8:	080124a8 	.word	0x080124a8
      }
      else
      {
        ret = HAL_ERROR;
 800eefc:	2301      	movs	r3, #1
 800eefe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	2201      	movs	r2, #1
 800ef06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	2200      	movs	r2, #0
 800ef16:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ef1e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3730      	adds	r7, #48	@ 0x30
 800ef26:	46bd      	mov	sp, r7
 800ef28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ef2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b083      	sub	sp, #12
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef38:	f003 0308 	and.w	r3, r3, #8
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d00a      	beq.n	800ef56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	685b      	ldr	r3, [r3, #4]
 800ef46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	430a      	orrs	r2, r1
 800ef54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef5a:	f003 0301 	and.w	r3, r3, #1
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d00a      	beq.n	800ef78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	430a      	orrs	r2, r1
 800ef76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef7c:	f003 0302 	and.w	r3, r3, #2
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d00a      	beq.n	800ef9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	430a      	orrs	r2, r1
 800ef98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef9e:	f003 0304 	and.w	r3, r3, #4
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d00a      	beq.n	800efbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	430a      	orrs	r2, r1
 800efba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efc0:	f003 0310 	and.w	r3, r3, #16
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d00a      	beq.n	800efde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	689b      	ldr	r3, [r3, #8]
 800efce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	430a      	orrs	r2, r1
 800efdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efe2:	f003 0320 	and.w	r3, r3, #32
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d00a      	beq.n	800f000 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	689b      	ldr	r3, [r3, #8]
 800eff0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	430a      	orrs	r2, r1
 800effe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d01a      	beq.n	800f042 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	430a      	orrs	r2, r1
 800f020:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f02a:	d10a      	bne.n	800f042 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	430a      	orrs	r2, r1
 800f040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d00a      	beq.n	800f064 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	430a      	orrs	r2, r1
 800f062:	605a      	str	r2, [r3, #4]
  }
}
 800f064:	bf00      	nop
 800f066:	370c      	adds	r7, #12
 800f068:	46bd      	mov	sp, r7
 800f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06e:	4770      	bx	lr

0800f070 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b098      	sub	sp, #96	@ 0x60
 800f074:	af02      	add	r7, sp, #8
 800f076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f080:	f7f9 faee 	bl	8008660 <HAL_GetTick>
 800f084:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f003 0308 	and.w	r3, r3, #8
 800f090:	2b08      	cmp	r3, #8
 800f092:	d12f      	bne.n	800f0f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f094:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f098:	9300      	str	r3, [sp, #0]
 800f09a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f09c:	2200      	movs	r2, #0
 800f09e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f000 f88e 	bl	800f1c4 <UART_WaitOnFlagUntilTimeout>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d022      	beq.n	800f0f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0b6:	e853 3f00 	ldrex	r3, [r3]
 800f0ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f0bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f0c2:	653b      	str	r3, [r7, #80]	@ 0x50
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800f0ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f0d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0d4:	e841 2300 	strex	r3, r2, [r1]
 800f0d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f0da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d1e6      	bne.n	800f0ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2220      	movs	r2, #32
 800f0e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f0f0:	2303      	movs	r3, #3
 800f0f2:	e063      	b.n	800f1bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f003 0304 	and.w	r3, r3, #4
 800f0fe:	2b04      	cmp	r3, #4
 800f100:	d149      	bne.n	800f196 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f102:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f106:	9300      	str	r3, [sp, #0]
 800f108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f10a:	2200      	movs	r2, #0
 800f10c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f000 f857 	bl	800f1c4 <UART_WaitOnFlagUntilTimeout>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d03c      	beq.n	800f196 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f124:	e853 3f00 	ldrex	r3, [r3]
 800f128:	623b      	str	r3, [r7, #32]
   return(result);
 800f12a:	6a3b      	ldr	r3, [r7, #32]
 800f12c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f130:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	461a      	mov	r2, r3
 800f138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f13a:	633b      	str	r3, [r7, #48]	@ 0x30
 800f13c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f13e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f140:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f142:	e841 2300 	strex	r3, r2, [r1]
 800f146:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d1e6      	bne.n	800f11c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	3308      	adds	r3, #8
 800f154:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	e853 3f00 	ldrex	r3, [r3]
 800f15c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f023 0301 	bic.w	r3, r3, #1
 800f164:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	3308      	adds	r3, #8
 800f16c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f16e:	61fa      	str	r2, [r7, #28]
 800f170:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f172:	69b9      	ldr	r1, [r7, #24]
 800f174:	69fa      	ldr	r2, [r7, #28]
 800f176:	e841 2300 	strex	r3, r2, [r1]
 800f17a:	617b      	str	r3, [r7, #20]
   return(result);
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d1e5      	bne.n	800f14e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2220      	movs	r2, #32
 800f186:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2200      	movs	r2, #0
 800f18e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f192:	2303      	movs	r3, #3
 800f194:	e012      	b.n	800f1bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2220      	movs	r2, #32
 800f19a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2220      	movs	r2, #32
 800f1a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f1ba:	2300      	movs	r3, #0
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3758      	adds	r7, #88	@ 0x58
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b084      	sub	sp, #16
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	603b      	str	r3, [r7, #0]
 800f1d0:	4613      	mov	r3, r2
 800f1d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f1d4:	e04f      	b.n	800f276 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f1d6:	69bb      	ldr	r3, [r7, #24]
 800f1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1dc:	d04b      	beq.n	800f276 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f1de:	f7f9 fa3f 	bl	8008660 <HAL_GetTick>
 800f1e2:	4602      	mov	r2, r0
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	1ad3      	subs	r3, r2, r3
 800f1e8:	69ba      	ldr	r2, [r7, #24]
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d302      	bcc.n	800f1f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800f1ee:	69bb      	ldr	r3, [r7, #24]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d101      	bne.n	800f1f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f1f4:	2303      	movs	r3, #3
 800f1f6:	e04e      	b.n	800f296 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f003 0304 	and.w	r3, r3, #4
 800f202:	2b00      	cmp	r3, #0
 800f204:	d037      	beq.n	800f276 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	2b80      	cmp	r3, #128	@ 0x80
 800f20a:	d034      	beq.n	800f276 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	2b40      	cmp	r3, #64	@ 0x40
 800f210:	d031      	beq.n	800f276 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	69db      	ldr	r3, [r3, #28]
 800f218:	f003 0308 	and.w	r3, r3, #8
 800f21c:	2b08      	cmp	r3, #8
 800f21e:	d110      	bne.n	800f242 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	2208      	movs	r2, #8
 800f226:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f228:	68f8      	ldr	r0, [r7, #12]
 800f22a:	f000 f920 	bl	800f46e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	2208      	movs	r2, #8
 800f232:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2200      	movs	r2, #0
 800f23a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f23e:	2301      	movs	r3, #1
 800f240:	e029      	b.n	800f296 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	69db      	ldr	r3, [r3, #28]
 800f248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f24c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f250:	d111      	bne.n	800f276 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f25a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f25c:	68f8      	ldr	r0, [r7, #12]
 800f25e:	f000 f906 	bl	800f46e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2220      	movs	r2, #32
 800f266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2200      	movs	r2, #0
 800f26e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f272:	2303      	movs	r3, #3
 800f274:	e00f      	b.n	800f296 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	69da      	ldr	r2, [r3, #28]
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	4013      	ands	r3, r2
 800f280:	68ba      	ldr	r2, [r7, #8]
 800f282:	429a      	cmp	r2, r3
 800f284:	bf0c      	ite	eq
 800f286:	2301      	moveq	r3, #1
 800f288:	2300      	movne	r3, #0
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	461a      	mov	r2, r3
 800f28e:	79fb      	ldrb	r3, [r7, #7]
 800f290:	429a      	cmp	r2, r3
 800f292:	d0a0      	beq.n	800f1d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f294:	2300      	movs	r3, #0
}
 800f296:	4618      	mov	r0, r3
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
	...

0800f2a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b096      	sub	sp, #88	@ 0x58
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	60f8      	str	r0, [r7, #12]
 800f2a8:	60b9      	str	r1, [r7, #8]
 800f2aa:	4613      	mov	r3, r2
 800f2ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	68ba      	ldr	r2, [r7, #8]
 800f2b2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	88fa      	ldrh	r2, [r7, #6]
 800f2b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	2222      	movs	r2, #34	@ 0x22
 800f2c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d02d      	beq.n	800f332 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2dc:	4a40      	ldr	r2, [pc, #256]	@ (800f3e0 <UART_Start_Receive_DMA+0x140>)
 800f2de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2e6:	4a3f      	ldr	r2, [pc, #252]	@ (800f3e4 <UART_Start_Receive_DMA+0x144>)
 800f2e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2f0:	4a3d      	ldr	r2, [pc, #244]	@ (800f3e8 <UART_Start_Receive_DMA+0x148>)
 800f2f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	3324      	adds	r3, #36	@ 0x24
 800f30a:	4619      	mov	r1, r3
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f310:	461a      	mov	r2, r3
 800f312:	88fb      	ldrh	r3, [r7, #6]
 800f314:	f7fa ffe0 	bl	800a2d8 <HAL_DMA_Start_IT>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d009      	beq.n	800f332 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	2210      	movs	r2, #16
 800f322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	2220      	movs	r2, #32
 800f32a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800f32e:	2301      	movs	r3, #1
 800f330:	e051      	b.n	800f3d6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	691b      	ldr	r3, [r3, #16]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d018      	beq.n	800f36c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f342:	e853 3f00 	ldrex	r3, [r3]
 800f346:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f34a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f34e:	657b      	str	r3, [r7, #84]	@ 0x54
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	461a      	mov	r2, r3
 800f356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f358:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f35a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f35c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f35e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f360:	e841 2300 	strex	r3, r2, [r1]
 800f364:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d1e6      	bne.n	800f33a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	3308      	adds	r3, #8
 800f372:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f376:	e853 3f00 	ldrex	r3, [r3]
 800f37a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f37e:	f043 0301 	orr.w	r3, r3, #1
 800f382:	653b      	str	r3, [r7, #80]	@ 0x50
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	3308      	adds	r3, #8
 800f38a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f38c:	637a      	str	r2, [r7, #52]	@ 0x34
 800f38e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f390:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f394:	e841 2300 	strex	r3, r2, [r1]
 800f398:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f39a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d1e5      	bne.n	800f36c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	3308      	adds	r3, #8
 800f3a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	e853 3f00 	ldrex	r3, [r3]
 800f3ae:	613b      	str	r3, [r7, #16]
   return(result);
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	3308      	adds	r3, #8
 800f3be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f3c0:	623a      	str	r2, [r7, #32]
 800f3c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3c4:	69f9      	ldr	r1, [r7, #28]
 800f3c6:	6a3a      	ldr	r2, [r7, #32]
 800f3c8:	e841 2300 	strex	r3, r2, [r1]
 800f3cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800f3ce:	69bb      	ldr	r3, [r7, #24]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d1e5      	bne.n	800f3a0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800f3d4:	2300      	movs	r3, #0
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3758      	adds	r7, #88	@ 0x58
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	0800f53b 	.word	0x0800f53b
 800f3e4:	0800f66f 	.word	0x0800f66f
 800f3e8:	0800f6b5 	.word	0x0800f6b5

0800f3ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	b08f      	sub	sp, #60	@ 0x3c
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3fa:	6a3b      	ldr	r3, [r7, #32]
 800f3fc:	e853 3f00 	ldrex	r3, [r3]
 800f400:	61fb      	str	r3, [r7, #28]
   return(result);
 800f402:	69fb      	ldr	r3, [r7, #28]
 800f404:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f408:	637b      	str	r3, [r7, #52]	@ 0x34
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	461a      	mov	r2, r3
 800f410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f412:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f414:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f416:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f41a:	e841 2300 	strex	r3, r2, [r1]
 800f41e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f422:	2b00      	cmp	r3, #0
 800f424:	d1e6      	bne.n	800f3f4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	3308      	adds	r3, #8
 800f42c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	e853 3f00 	ldrex	r3, [r3]
 800f434:	60bb      	str	r3, [r7, #8]
   return(result);
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800f43c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	3308      	adds	r3, #8
 800f444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f446:	61ba      	str	r2, [r7, #24]
 800f448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f44a:	6979      	ldr	r1, [r7, #20]
 800f44c:	69ba      	ldr	r2, [r7, #24]
 800f44e:	e841 2300 	strex	r3, r2, [r1]
 800f452:	613b      	str	r3, [r7, #16]
   return(result);
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d1e5      	bne.n	800f426 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2220      	movs	r2, #32
 800f45e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800f462:	bf00      	nop
 800f464:	373c      	adds	r7, #60	@ 0x3c
 800f466:	46bd      	mov	sp, r7
 800f468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46c:	4770      	bx	lr

0800f46e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f46e:	b480      	push	{r7}
 800f470:	b095      	sub	sp, #84	@ 0x54
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f47c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f47e:	e853 3f00 	ldrex	r3, [r3]
 800f482:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f486:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f48a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	461a      	mov	r2, r3
 800f492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f494:	643b      	str	r3, [r7, #64]	@ 0x40
 800f496:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f498:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f49a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f49c:	e841 2300 	strex	r3, r2, [r1]
 800f4a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d1e6      	bne.n	800f476 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	3308      	adds	r3, #8
 800f4ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4b0:	6a3b      	ldr	r3, [r7, #32]
 800f4b2:	e853 3f00 	ldrex	r3, [r3]
 800f4b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f4be:	f023 0301 	bic.w	r3, r3, #1
 800f4c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	3308      	adds	r3, #8
 800f4ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f4cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f4ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f4d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4d4:	e841 2300 	strex	r3, r2, [r1]
 800f4d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d1e3      	bne.n	800f4a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	d118      	bne.n	800f51a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	e853 3f00 	ldrex	r3, [r3]
 800f4f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	f023 0310 	bic.w	r3, r3, #16
 800f4fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	461a      	mov	r2, r3
 800f504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f506:	61bb      	str	r3, [r7, #24]
 800f508:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f50a:	6979      	ldr	r1, [r7, #20]
 800f50c:	69ba      	ldr	r2, [r7, #24]
 800f50e:	e841 2300 	strex	r3, r2, [r1]
 800f512:	613b      	str	r3, [r7, #16]
   return(result);
 800f514:	693b      	ldr	r3, [r7, #16]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d1e6      	bne.n	800f4e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2220      	movs	r2, #32
 800f51e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2200      	movs	r2, #0
 800f526:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2200      	movs	r2, #0
 800f52c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f52e:	bf00      	nop
 800f530:	3754      	adds	r7, #84	@ 0x54
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr

0800f53a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f53a:	b580      	push	{r7, lr}
 800f53c:	b09c      	sub	sp, #112	@ 0x70
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f546:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f003 0320 	and.w	r3, r3, #32
 800f552:	2b00      	cmp	r3, #0
 800f554:	d171      	bne.n	800f63a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800f556:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f558:	2200      	movs	r2, #0
 800f55a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f55e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f566:	e853 3f00 	ldrex	r3, [r3]
 800f56a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f56c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f56e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f572:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f574:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	461a      	mov	r2, r3
 800f57a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f57c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f57e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f580:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f582:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f584:	e841 2300 	strex	r3, r2, [r1]
 800f588:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f58a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d1e6      	bne.n	800f55e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f590:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	3308      	adds	r3, #8
 800f596:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f59a:	e853 3f00 	ldrex	r3, [r3]
 800f59e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f5a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5a2:	f023 0301 	bic.w	r3, r3, #1
 800f5a6:	667b      	str	r3, [r7, #100]	@ 0x64
 800f5a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	3308      	adds	r3, #8
 800f5ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f5b0:	647a      	str	r2, [r7, #68]	@ 0x44
 800f5b2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f5b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f5b8:	e841 2300 	strex	r3, r2, [r1]
 800f5bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f5be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d1e5      	bne.n	800f590 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f5c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	3308      	adds	r3, #8
 800f5ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ce:	e853 3f00 	ldrex	r3, [r3]
 800f5d2:	623b      	str	r3, [r7, #32]
   return(result);
 800f5d4:	6a3b      	ldr	r3, [r7, #32]
 800f5d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f5da:	663b      	str	r3, [r7, #96]	@ 0x60
 800f5dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	3308      	adds	r3, #8
 800f5e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f5e4:	633a      	str	r2, [r7, #48]	@ 0x30
 800f5e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f5ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5ec:	e841 2300 	strex	r3, r2, [r1]
 800f5f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d1e5      	bne.n	800f5c4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f5f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5fa:	2220      	movs	r2, #32
 800f5fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f602:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f604:	2b01      	cmp	r3, #1
 800f606:	d118      	bne.n	800f63a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	e853 3f00 	ldrex	r3, [r3]
 800f614:	60fb      	str	r3, [r7, #12]
   return(result);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	f023 0310 	bic.w	r3, r3, #16
 800f61c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f61e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	461a      	mov	r2, r3
 800f624:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f626:	61fb      	str	r3, [r7, #28]
 800f628:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f62a:	69b9      	ldr	r1, [r7, #24]
 800f62c:	69fa      	ldr	r2, [r7, #28]
 800f62e:	e841 2300 	strex	r3, r2, [r1]
 800f632:	617b      	str	r3, [r7, #20]
   return(result);
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d1e6      	bne.n	800f608 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f63a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f63c:	2200      	movs	r2, #0
 800f63e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f644:	2b01      	cmp	r3, #1
 800f646:	d109      	bne.n	800f65c <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800f648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f64a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f64e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f650:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800f654:	4611      	mov	r1, r2
 800f656:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f658:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f65a:	e004      	b.n	800f666 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800f65c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f65e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f662:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f664:	4798      	blx	r3
}
 800f666:	bf00      	nop
 800f668:	3770      	adds	r7, #112	@ 0x70
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}

0800f66e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f66e:	b580      	push	{r7, lr}
 800f670:	b084      	sub	sp, #16
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f67a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2201      	movs	r2, #1
 800f680:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f686:	2b01      	cmp	r3, #1
 800f688:	d10b      	bne.n	800f6a2 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f690:	68fa      	ldr	r2, [r7, #12]
 800f692:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800f696:	0852      	lsrs	r2, r2, #1
 800f698:	b292      	uxth	r2, r2
 800f69a:	4611      	mov	r1, r2
 800f69c:	68f8      	ldr	r0, [r7, #12]
 800f69e:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f6a0:	e004      	b.n	800f6ac <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f6a8:	68f8      	ldr	r0, [r7, #12]
 800f6aa:	4798      	blx	r3
}
 800f6ac:	bf00      	nop
 800f6ae:	3710      	adds	r7, #16
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b086      	sub	sp, #24
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f6c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f6d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	689b      	ldr	r3, [r3, #8]
 800f6d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f6dc:	2b80      	cmp	r3, #128	@ 0x80
 800f6de:	d109      	bne.n	800f6f4 <UART_DMAError+0x40>
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	2b21      	cmp	r3, #33	@ 0x21
 800f6e4:	d106      	bne.n	800f6f4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800f6ee:	6978      	ldr	r0, [r7, #20]
 800f6f0:	f7ff fe7c 	bl	800f3ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	689b      	ldr	r3, [r3, #8]
 800f6fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6fe:	2b40      	cmp	r3, #64	@ 0x40
 800f700:	d109      	bne.n	800f716 <UART_DMAError+0x62>
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	2b22      	cmp	r3, #34	@ 0x22
 800f706:	d106      	bne.n	800f716 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	2200      	movs	r2, #0
 800f70c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800f710:	6978      	ldr	r0, [r7, #20]
 800f712:	f7ff feac 	bl	800f46e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f71c:	f043 0210 	orr.w	r2, r3, #16
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f72c:	6978      	ldr	r0, [r7, #20]
 800f72e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f730:	bf00      	nop
 800f732:	3718      	adds	r7, #24
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f744:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	2200      	movs	r2, #0
 800f74a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f754:	68f8      	ldr	r0, [r7, #12]
 800f756:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f758:	bf00      	nop
 800f75a:	3710      	adds	r7, #16
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b088      	sub	sp, #32
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	e853 3f00 	ldrex	r3, [r3]
 800f774:	60bb      	str	r3, [r7, #8]
   return(result);
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f77c:	61fb      	str	r3, [r7, #28]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	461a      	mov	r2, r3
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	61bb      	str	r3, [r7, #24]
 800f788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f78a:	6979      	ldr	r1, [r7, #20]
 800f78c:	69ba      	ldr	r2, [r7, #24]
 800f78e:	e841 2300 	strex	r3, r2, [r1]
 800f792:	613b      	str	r3, [r7, #16]
   return(result);
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d1e6      	bne.n	800f768 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2220      	movs	r2, #32
 800f79e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f7b2:	bf00      	nop
 800f7b4:	3720      	adds	r7, #32
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}

0800f7ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f7ba:	b480      	push	{r7}
 800f7bc:	b083      	sub	sp, #12
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f7c2:	bf00      	nop
 800f7c4:	370c      	adds	r7, #12
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr

0800f7ce <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f7ce:	b480      	push	{r7}
 800f7d0:	b083      	sub	sp, #12
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f7d6:	bf00      	nop
 800f7d8:	370c      	adds	r7, #12
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr

0800f7e2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f7e2:	b480      	push	{r7}
 800f7e4:	b083      	sub	sp, #12
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f7ea:	bf00      	nop
 800f7ec:	370c      	adds	r7, #12
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f4:	4770      	bx	lr

0800f7f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f7f6:	b480      	push	{r7}
 800f7f8:	b085      	sub	sp, #20
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f804:	2b01      	cmp	r3, #1
 800f806:	d101      	bne.n	800f80c <HAL_UARTEx_DisableFifoMode+0x16>
 800f808:	2302      	movs	r3, #2
 800f80a:	e027      	b.n	800f85c <HAL_UARTEx_DisableFifoMode+0x66>
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2201      	movs	r2, #1
 800f810:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2224      	movs	r2, #36	@ 0x24
 800f818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	f022 0201 	bic.w	r2, r2, #1
 800f832:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f83a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2200      	movs	r2, #0
 800f840:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	68fa      	ldr	r2, [r7, #12]
 800f848:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2220      	movs	r2, #32
 800f84e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2200      	movs	r2, #0
 800f856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f85a:	2300      	movs	r3, #0
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3714      	adds	r7, #20
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr

0800f868 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d101      	bne.n	800f880 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f87c:	2302      	movs	r3, #2
 800f87e:	e02d      	b.n	800f8dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2201      	movs	r2, #1
 800f884:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2224      	movs	r2, #36	@ 0x24
 800f88c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	681a      	ldr	r2, [r3, #0]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f022 0201 	bic.w	r2, r2, #1
 800f8a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	689b      	ldr	r3, [r3, #8]
 800f8ae:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	683a      	ldr	r2, [r7, #0]
 800f8b8:	430a      	orrs	r2, r1
 800f8ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f000 f84f 	bl	800f960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	68fa      	ldr	r2, [r7, #12]
 800f8c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2220      	movs	r2, #32
 800f8ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f8da:	2300      	movs	r3, #0
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3710      	adds	r7, #16
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b084      	sub	sp, #16
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	d101      	bne.n	800f8fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f8f8:	2302      	movs	r3, #2
 800f8fa:	e02d      	b.n	800f958 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2201      	movs	r2, #1
 800f900:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2224      	movs	r2, #36	@ 0x24
 800f908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f022 0201 	bic.w	r2, r2, #1
 800f922:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	689b      	ldr	r3, [r3, #8]
 800f92a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	683a      	ldr	r2, [r7, #0]
 800f934:	430a      	orrs	r2, r1
 800f936:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f000 f811 	bl	800f960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	68fa      	ldr	r2, [r7, #12]
 800f944:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2220      	movs	r2, #32
 800f94a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2200      	movs	r2, #0
 800f952:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f956:	2300      	movs	r3, #0
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3710      	adds	r7, #16
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f960:	b480      	push	{r7}
 800f962:	b085      	sub	sp, #20
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d108      	bne.n	800f982 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2201      	movs	r2, #1
 800f974:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2201      	movs	r2, #1
 800f97c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f980:	e031      	b.n	800f9e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f982:	2308      	movs	r3, #8
 800f984:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f986:	2308      	movs	r3, #8
 800f988:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	689b      	ldr	r3, [r3, #8]
 800f990:	0e5b      	lsrs	r3, r3, #25
 800f992:	b2db      	uxtb	r3, r3
 800f994:	f003 0307 	and.w	r3, r3, #7
 800f998:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	689b      	ldr	r3, [r3, #8]
 800f9a0:	0f5b      	lsrs	r3, r3, #29
 800f9a2:	b2db      	uxtb	r3, r3
 800f9a4:	f003 0307 	and.w	r3, r3, #7
 800f9a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f9aa:	7bbb      	ldrb	r3, [r7, #14]
 800f9ac:	7b3a      	ldrb	r2, [r7, #12]
 800f9ae:	4911      	ldr	r1, [pc, #68]	@ (800f9f4 <UARTEx_SetNbDataToProcess+0x94>)
 800f9b0:	5c8a      	ldrb	r2, [r1, r2]
 800f9b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f9b6:	7b3a      	ldrb	r2, [r7, #12]
 800f9b8:	490f      	ldr	r1, [pc, #60]	@ (800f9f8 <UARTEx_SetNbDataToProcess+0x98>)
 800f9ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f9bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9c0:	b29a      	uxth	r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f9c8:	7bfb      	ldrb	r3, [r7, #15]
 800f9ca:	7b7a      	ldrb	r2, [r7, #13]
 800f9cc:	4909      	ldr	r1, [pc, #36]	@ (800f9f4 <UARTEx_SetNbDataToProcess+0x94>)
 800f9ce:	5c8a      	ldrb	r2, [r1, r2]
 800f9d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f9d4:	7b7a      	ldrb	r2, [r7, #13]
 800f9d6:	4908      	ldr	r1, [pc, #32]	@ (800f9f8 <UARTEx_SetNbDataToProcess+0x98>)
 800f9d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f9da:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f9e6:	bf00      	nop
 800f9e8:	3714      	adds	r7, #20
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f0:	4770      	bx	lr
 800f9f2:	bf00      	nop
 800f9f4:	080124c0 	.word	0x080124c0
 800f9f8:	080124c8 	.word	0x080124c8

0800f9fc <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b08b      	sub	sp, #44	@ 0x2c
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	60f8      	str	r0, [r7, #12]
 800fa04:	60b9      	str	r1, [r7, #8]
 800fa06:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	685b      	ldr	r3, [r3, #4]
 800fa0c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	685b      	ldr	r3, [r3, #4]
 800fa18:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	881b      	ldrh	r3, [r3, #0]
 800fa1e:	461a      	mov	r2, r3
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	885b      	ldrh	r3, [r3, #2]
 800fa24:	fb02 f303 	mul.w	r3, r2, r3
 800fa28:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800fa2e:	e013      	b.n	800fa58 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800fa30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa32:	1d1a      	adds	r2, r3, #4
 800fa34:	627a      	str	r2, [r7, #36]	@ 0x24
 800fa36:	ed93 7a00 	vldr	s14, [r3]
 800fa3a:	6a3b      	ldr	r3, [r7, #32]
 800fa3c:	1d1a      	adds	r2, r3, #4
 800fa3e:	623a      	str	r2, [r7, #32]
 800fa40:	edd3 7a00 	vldr	s15, [r3]
 800fa44:	69fb      	ldr	r3, [r7, #28]
 800fa46:	1d1a      	adds	r2, r3, #4
 800fa48:	61fa      	str	r2, [r7, #28]
 800fa4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa4e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800fa52:	69bb      	ldr	r3, [r7, #24]
 800fa54:	3b01      	subs	r3, #1
 800fa56:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800fa58:	69bb      	ldr	r3, [r7, #24]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d1e8      	bne.n	800fa30 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800fa62:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	372c      	adds	r7, #44	@ 0x2c
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa70:	4770      	bx	lr

0800fa72 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800fa72:	b480      	push	{r7}
 800fa74:	b085      	sub	sp, #20
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	60f8      	str	r0, [r7, #12]
 800fa7a:	607b      	str	r3, [r7, #4]
 800fa7c:	460b      	mov	r3, r1
 800fa7e:	817b      	strh	r3, [r7, #10]
 800fa80:	4613      	mov	r3, r2
 800fa82:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	897a      	ldrh	r2, [r7, #10]
 800fa88:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	893a      	ldrh	r2, [r7, #8]
 800fa8e:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	687a      	ldr	r2, [r7, #4]
 800fa94:	605a      	str	r2, [r3, #4]
}
 800fa96:	bf00      	nop
 800fa98:	3714      	adds	r7, #20
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr

0800faa2 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800faa2:	b480      	push	{r7}
 800faa4:	b0bb      	sub	sp, #236	@ 0xec
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
 800faaa:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	881b      	ldrh	r3, [r3, #0]
 800fabc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	885b      	ldrh	r3, [r3, #2]
 800fac2:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800fac4:	f04f 0300 	mov.w	r3, #0
 800fac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800facc:	f04f 0300 	mov.w	r3, #0
 800fad0:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800fad2:	2300      	movs	r3, #0
 800fad4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800fad8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fada:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800fade:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fae0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800fae4:	e03b      	b.n	800fb5e <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800fae6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fae8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800faec:	1ad3      	subs	r3, r2, r3
 800faee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800faf2:	e00c      	b.n	800fb0e <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800faf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800faf8:	1d1a      	adds	r2, r3, #4
 800fafa:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800fafe:	f04f 0200 	mov.w	r2, #0
 800fb02:	601a      	str	r2, [r3, #0]
        j--;
 800fb04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fb08:	3b01      	subs	r3, #1
 800fb0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800fb0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d1ee      	bne.n	800faf4 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800fb16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb1a:	1d1a      	adds	r2, r3, #4
 800fb1c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800fb20:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800fb24:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800fb26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800fb2a:	3b01      	subs	r3, #1
 800fb2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800fb30:	e00c      	b.n	800fb4c <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800fb32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb36:	1d1a      	adds	r2, r3, #4
 800fb38:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800fb3c:	f04f 0200 	mov.w	r2, #0
 800fb40:	601a      	str	r2, [r3, #0]
        j--;
 800fb42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fb46:	3b01      	subs	r3, #1
 800fb48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800fb4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d1ee      	bne.n	800fb32 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800fb54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800fb58:	3b01      	subs	r3, #1
 800fb5a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800fb5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d1bf      	bne.n	800fae6 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800fb66:	2300      	movs	r3, #0
 800fb68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fb6c:	e2c7      	b.n	80100fe <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800fb6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fb72:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	685a      	ldr	r2, [r3, #4]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	885b      	ldrh	r3, [r3, #2]
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800fb82:	fb01 f303 	mul.w	r3, r1, r3
 800fb86:	009b      	lsls	r3, r3, #2
 800fb88:	4413      	add	r3, r2
 800fb8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800fb8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800fb98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fb9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800fba0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fba4:	3301      	adds	r3, #1
 800fba6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fbaa:	e02c      	b.n	800fc06 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	685a      	ldr	r2, [r3, #4]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	885b      	ldrh	r3, [r3, #2]
 800fbb4:	4619      	mov	r1, r3
 800fbb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fbba:	fb03 f101 	mul.w	r1, r3, r1
 800fbbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fbc2:	440b      	add	r3, r1
 800fbc4:	009b      	lsls	r3, r3, #2
 800fbc6:	4413      	add	r3, r2
 800fbc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800fbcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800fbd4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800fbd8:	eeb0 7ae7 	vabs.f32	s14, s15
 800fbdc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800fbe0:	eef0 7ae7 	vabs.f32	s15, s15
 800fbe4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbec:	dd06      	ble.n	800fbfc <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800fbee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fbf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800fbf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fbf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800fbfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fc00:	3301      	adds	r3, #1
 800fc02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fc06:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800fc0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d3cd      	bcc.n	800fbac <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800fc10:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800fc14:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fc18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc1c:	f000 809b 	beq.w	800fd56 <arm_mat_inverse_f32+0x2b4>
 800fc20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fc24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	f000 8094 	beq.w	800fd56 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	685b      	ldr	r3, [r3, #4]
 800fc32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	685b      	ldr	r3, [r3, #4]
 800fc3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	885b      	ldrh	r3, [r3, #2]
 800fc42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fc44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fc46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fc4a:	1ad3      	subs	r3, r2, r3
 800fc4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fc4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc50:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fc52:	fb03 f202 	mul.w	r2, r3, r2
 800fc56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fc5a:	4413      	add	r3, r2
 800fc5c:	009b      	lsls	r3, r3, #2
 800fc5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800fc62:	4413      	add	r3, r2
 800fc64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fc68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc6a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fc6e:	fb03 f202 	mul.w	r2, r3, r2
 800fc72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fc76:	4413      	add	r3, r2
 800fc78:	009b      	lsls	r3, r3, #2
 800fc7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fc7e:	4413      	add	r3, r2
 800fc80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fc84:	2300      	movs	r3, #0
 800fc86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800fc8a:	e018      	b.n	800fcbe <arm_mat_inverse_f32+0x21c>
 800fc8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fc94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fc98:	1d1a      	adds	r2, r3, #4
 800fc9a:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800fc9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fca2:	6812      	ldr	r2, [r2, #0]
 800fca4:	601a      	str	r2, [r3, #0]
 800fca6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800fcaa:	1d1a      	adds	r2, r3, #4
 800fcac:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800fcb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fcb2:	601a      	str	r2, [r3, #0]
 800fcb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800fcb8:	3301      	adds	r3, #1
 800fcba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800fcbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800fcc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	dbe1      	blt.n	800fc8c <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	685b      	ldr	r3, [r3, #4]
 800fcd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	885b      	ldrh	r3, [r3, #2]
 800fcdc:	647b      	str	r3, [r7, #68]	@ 0x44
 800fcde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fce0:	643b      	str	r3, [r7, #64]	@ 0x40
 800fce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fce4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fce6:	fb02 f303 	mul.w	r3, r2, r3
 800fcea:	009b      	lsls	r3, r3, #2
 800fcec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800fcf0:	4413      	add	r3, r2
 800fcf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fcf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fcf8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fcfc:	fb02 f303 	mul.w	r3, r2, r3
 800fd00:	009b      	lsls	r3, r3, #2
 800fd02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fd06:	4413      	add	r3, r2
 800fd08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fd12:	e018      	b.n	800fd46 <arm_mat_inverse_f32+0x2a4>
 800fd14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fd1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fd20:	1d1a      	adds	r2, r3, #4
 800fd22:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800fd26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fd2a:	6812      	ldr	r2, [r2, #0]
 800fd2c:	601a      	str	r2, [r3, #0]
 800fd2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fd32:	1d1a      	adds	r2, r3, #4
 800fd34:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fd38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fd3a:	601a      	str	r2, [r3, #0]
 800fd3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800fd40:	3301      	adds	r3, #1
 800fd42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fd46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fd4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	dbe1      	blt.n	800fd14 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800fd50:	2301      	movs	r3, #1
 800fd52:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800fd56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800fd5a:	2b01      	cmp	r3, #1
 800fd5c:	d009      	beq.n	800fd72 <arm_mat_inverse_f32+0x2d0>
 800fd5e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800fd62:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd6a:	d102      	bne.n	800fd72 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800fd6c:	f06f 0304 	mvn.w	r3, #4
 800fd70:	e208      	b.n	8010184 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800fd72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd76:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800fd7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd7e:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	685b      	ldr	r3, [r3, #4]
 800fd86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	885b      	ldrh	r3, [r3, #2]
 800fd8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fd92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fd96:	1ad3      	subs	r3, r2, r3
 800fd98:	633b      	str	r3, [r7, #48]	@ 0x30
 800fd9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd9c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fd9e:	fb03 f202 	mul.w	r2, r3, r2
 800fda2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fda6:	4413      	add	r3, r2
 800fda8:	009b      	lsls	r3, r3, #2
 800fdaa:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800fdae:	4413      	add	r3, r2
 800fdb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800fdba:	e011      	b.n	800fde0 <arm_mat_inverse_f32+0x33e>
 800fdbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fdc0:	1d1a      	adds	r2, r3, #4
 800fdc2:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800fdc6:	ed93 7a00 	vldr	s14, [r3]
 800fdca:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800fdce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdd2:	edc3 7a00 	vstr	s15, [r3]
 800fdd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800fdda:	3301      	adds	r3, #1
 800fddc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800fde0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800fde4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fde6:	429a      	cmp	r2, r3
 800fde8:	dbe8      	blt.n	800fdbc <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	685b      	ldr	r3, [r3, #4]
 800fdee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	885b      	ldrh	r3, [r3, #2]
 800fdf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fdf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fdfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdfe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fe00:	fb02 f303 	mul.w	r3, r2, r3
 800fe04:	009b      	lsls	r3, r3, #2
 800fe06:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800fe0a:	4413      	add	r3, r2
 800fe0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800fe10:	2300      	movs	r3, #0
 800fe12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800fe16:	e011      	b.n	800fe3c <arm_mat_inverse_f32+0x39a>
 800fe18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fe1c:	1d1a      	adds	r2, r3, #4
 800fe1e:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800fe22:	ed93 7a00 	vldr	s14, [r3]
 800fe26:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800fe2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe2e:	edc3 7a00 	vstr	s15, [r3]
 800fe32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fe36:	3301      	adds	r3, #1
 800fe38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800fe3c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800fe40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe42:	429a      	cmp	r2, r3
 800fe44:	dbe8      	blt.n	800fe18 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800fe46:	2300      	movs	r3, #0
 800fe48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800fe4c:	e0ae      	b.n	800ffac <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	685a      	ldr	r2, [r3, #4]
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	885b      	ldrh	r3, [r3, #2]
 800fe56:	4619      	mov	r1, r3
 800fe58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fe5c:	fb03 f101 	mul.w	r1, r3, r1
 800fe60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fe64:	440b      	add	r3, r1
 800fe66:	009b      	lsls	r3, r3, #2
 800fe68:	4413      	add	r3, r2
 800fe6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800fe6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	685b      	ldr	r3, [r3, #4]
 800fe84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	885b      	ldrh	r3, [r3, #2]
 800fe8c:	617b      	str	r3, [r7, #20]
 800fe8e:	697a      	ldr	r2, [r7, #20]
 800fe90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fe94:	1ad3      	subs	r3, r2, r3
 800fe96:	613b      	str	r3, [r7, #16]
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800fe9e:	fb03 f202 	mul.w	r2, r3, r2
 800fea2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fea6:	4413      	add	r3, r2
 800fea8:	009b      	lsls	r3, r3, #2
 800feaa:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800feae:	4413      	add	r3, r2
 800feb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800feb8:	fb03 f202 	mul.w	r2, r3, r2
 800febc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fec0:	4413      	add	r3, r2
 800fec2:	009b      	lsls	r3, r3, #2
 800fec4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800fec8:	4413      	add	r3, r2
 800feca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800fece:	2300      	movs	r3, #0
 800fed0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fed4:	e01a      	b.n	800ff0c <arm_mat_inverse_f32+0x46a>
 800fed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800feda:	1d1a      	adds	r2, r3, #4
 800fedc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800fee0:	ed93 7a00 	vldr	s14, [r3]
 800fee4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800fee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800feec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fef0:	1d1a      	adds	r2, r3, #4
 800fef2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800fef6:	ed93 7a00 	vldr	s14, [r3]
 800fefa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fefe:	edc3 7a00 	vstr	s15, [r3]
 800ff02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ff06:	3301      	adds	r3, #1
 800ff08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ff0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	429a      	cmp	r2, r3
 800ff14:	dbdf      	blt.n	800fed6 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	885b      	ldrh	r3, [r3, #2]
 800ff2a:	60fb      	str	r3, [r7, #12]
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	60bb      	str	r3, [r7, #8]
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ff36:	fb02 f303 	mul.w	r3, r2, r3
 800ff3a:	009b      	lsls	r3, r3, #2
 800ff3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ff40:	4413      	add	r3, r2
 800ff42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ff4a:	fb02 f303 	mul.w	r3, r2, r3
 800ff4e:	009b      	lsls	r3, r3, #2
 800ff50:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ff54:	4413      	add	r3, r2
 800ff56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ff60:	e01a      	b.n	800ff98 <arm_mat_inverse_f32+0x4f6>
 800ff62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ff66:	1d1a      	adds	r2, r3, #4
 800ff68:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ff6c:	ed93 7a00 	vldr	s14, [r3]
 800ff70:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ff74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ff7c:	1d1a      	adds	r2, r3, #4
 800ff7e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800ff82:	ed93 7a00 	vldr	s14, [r3]
 800ff86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff8a:	edc3 7a00 	vstr	s15, [r3]
 800ff8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ff92:	3301      	adds	r3, #1
 800ff94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ff98:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	dbdf      	blt.n	800ff62 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800ffa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ffa6:	3301      	adds	r3, #1
 800ffa8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ffac:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ffb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	f4ff af4b 	bcc.w	800fe4e <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800ffb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ffba:	3301      	adds	r3, #1
 800ffbc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ffc0:	e092      	b.n	80100e8 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	685a      	ldr	r2, [r3, #4]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	885b      	ldrh	r3, [r3, #2]
 800ffca:	4619      	mov	r1, r3
 800ffcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ffd0:	fb03 f101 	mul.w	r1, r3, r1
 800ffd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ffd8:	440b      	add	r3, r1
 800ffda:	009b      	lsls	r3, r3, #2
 800ffdc:	4413      	add	r3, r2
 800ffde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800ffe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	685b      	ldr	r3, [r3, #4]
 800fff0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	677b      	str	r3, [r7, #116]	@ 0x74
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	885b      	ldrh	r3, [r3, #2]
 800fffc:	627b      	str	r3, [r7, #36]	@ 0x24
 800fffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	623b      	str	r3, [r7, #32]
 8010008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801000a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801000e:	fb03 f202 	mul.w	r2, r3, r2
 8010012:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010016:	4413      	add	r3, r2
 8010018:	009b      	lsls	r3, r3, #2
 801001a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801001c:	4413      	add	r3, r2
 801001e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010022:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010024:	fb03 f202 	mul.w	r2, r3, r2
 8010028:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801002c:	4413      	add	r3, r2
 801002e:	009b      	lsls	r3, r3, #2
 8010030:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8010032:	4413      	add	r3, r2
 8010034:	677b      	str	r3, [r7, #116]	@ 0x74
 8010036:	2300      	movs	r3, #0
 8010038:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801003a:	e014      	b.n	8010066 <arm_mat_inverse_f32+0x5c4>
 801003c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801003e:	1d1a      	adds	r2, r3, #4
 8010040:	677a      	str	r2, [r7, #116]	@ 0x74
 8010042:	ed93 7a00 	vldr	s14, [r3]
 8010046:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801004a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801004e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010050:	1d1a      	adds	r2, r3, #4
 8010052:	67ba      	str	r2, [r7, #120]	@ 0x78
 8010054:	ed93 7a00 	vldr	s14, [r3]
 8010058:	ee77 7a67 	vsub.f32	s15, s14, s15
 801005c:	edc3 7a00 	vstr	s15, [r3]
 8010060:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010062:	3301      	adds	r3, #1
 8010064:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010066:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010068:	6a3b      	ldr	r3, [r7, #32]
 801006a:	429a      	cmp	r2, r3
 801006c:	dbe6      	blt.n	801003c <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	685b      	ldr	r3, [r3, #4]
 8010072:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	66bb      	str	r3, [r7, #104]	@ 0x68
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	885b      	ldrh	r3, [r3, #2]
 801007e:	61fb      	str	r3, [r7, #28]
 8010080:	69fb      	ldr	r3, [r7, #28]
 8010082:	61bb      	str	r3, [r7, #24]
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801008a:	fb02 f303 	mul.w	r3, r2, r3
 801008e:	009b      	lsls	r3, r3, #2
 8010090:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010092:	4413      	add	r3, r2
 8010094:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010096:	69fb      	ldr	r3, [r7, #28]
 8010098:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801009a:	fb02 f303 	mul.w	r3, r2, r3
 801009e:	009b      	lsls	r3, r3, #2
 80100a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80100a2:	4413      	add	r3, r2
 80100a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80100a6:	2300      	movs	r3, #0
 80100a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80100aa:	e014      	b.n	80100d6 <arm_mat_inverse_f32+0x634>
 80100ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80100ae:	1d1a      	adds	r2, r3, #4
 80100b0:	66ba      	str	r2, [r7, #104]	@ 0x68
 80100b2:	ed93 7a00 	vldr	s14, [r3]
 80100b6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80100ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80100c0:	1d1a      	adds	r2, r3, #4
 80100c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80100c4:	ed93 7a00 	vldr	s14, [r3]
 80100c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80100cc:	edc3 7a00 	vstr	s15, [r3]
 80100d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80100d2:	3301      	adds	r3, #1
 80100d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80100d6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80100d8:	69bb      	ldr	r3, [r7, #24]
 80100da:	429a      	cmp	r2, r3
 80100dc:	dbe6      	blt.n	80100ac <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 80100de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80100e2:	3301      	adds	r3, #1
 80100e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80100e8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80100ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80100ee:	429a      	cmp	r2, r3
 80100f0:	f4ff af67 	bcc.w	800ffc2 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 80100f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80100f8:	3301      	adds	r3, #1
 80100fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80100fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010102:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010104:	429a      	cmp	r2, r3
 8010106:	f4ff ad32 	bcc.w	800fb6e <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 801010a:	2300      	movs	r3, #0
 801010c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8010110:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010114:	2b01      	cmp	r3, #1
 8010116:	d033      	beq.n	8010180 <arm_mat_inverse_f32+0x6de>
 8010118:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801011c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010124:	d12c      	bne.n	8010180 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 801012c:	2300      	movs	r3, #0
 801012e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8010132:	e010      	b.n	8010156 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8010134:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010138:	009b      	lsls	r3, r3, #2
 801013a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801013c:	4413      	add	r3, r2
 801013e:	edd3 7a00 	vldr	s15, [r3]
 8010142:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801014a:	d10d      	bne.n	8010168 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 801014c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010150:	3301      	adds	r3, #1
 8010152:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8010156:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010158:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801015a:	fb02 f303 	mul.w	r3, r2, r3
 801015e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8010162:	429a      	cmp	r2, r3
 8010164:	d3e6      	bcc.n	8010134 <arm_mat_inverse_f32+0x692>
 8010166:	e000      	b.n	801016a <arm_mat_inverse_f32+0x6c8>
            break;
 8010168:	bf00      	nop
      }

      if (i == numRows * numCols)
 801016a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801016c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801016e:	fb02 f303 	mul.w	r3, r2, r3
 8010172:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8010176:	429a      	cmp	r2, r3
 8010178:	d102      	bne.n	8010180 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 801017a:	23fb      	movs	r3, #251	@ 0xfb
 801017c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 8010180:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 8010184:	4618      	mov	r0, r3
 8010186:	37ec      	adds	r7, #236	@ 0xec
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr

08010190 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8010190:	b480      	push	{r7}
 8010192:	b093      	sub	sp, #76	@ 0x4c
 8010194:	af00      	add	r7, sp, #0
 8010196:	60f8      	str	r0, [r7, #12]
 8010198:	60b9      	str	r1, [r7, #8]
 801019a:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	685b      	ldr	r3, [r3, #4]
 80101b8:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	881b      	ldrh	r3, [r3, #0]
 80101be:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	885b      	ldrh	r3, [r3, #2]
 80101c4:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	885b      	ldrh	r3, [r3, #2]
 80101ca:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 80101cc:	2300      	movs	r3, #0
 80101ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80101d0:	8b7b      	ldrh	r3, [r7, #26]
 80101d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 80101d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	69fa      	ldr	r2, [r7, #28]
 80101da:	4413      	add	r3, r2
 80101dc:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 80101de:	8b3b      	ldrh	r3, [r7, #24]
 80101e0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	685b      	ldr	r3, [r3, #4]
 80101e6:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 80101e8:	f04f 0300 	mov.w	r3, #0
 80101ec:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 80101ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101f0:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 80101f2:	8afb      	ldrh	r3, [r7, #22]
 80101f4:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 80101f6:	e017      	b.n	8010228 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 80101f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101fa:	1d1a      	adds	r2, r3, #4
 80101fc:	647a      	str	r2, [r7, #68]	@ 0x44
 80101fe:	ed93 7a00 	vldr	s14, [r3]
 8010202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010204:	edd3 7a00 	vldr	s15, [r3]
 8010208:	ee67 7a27 	vmul.f32	s15, s14, s15
 801020c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010214:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 8010218:	8b3b      	ldrh	r3, [r7, #24]
 801021a:	009b      	lsls	r3, r3, #2
 801021c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801021e:	4413      	add	r3, r2
 8010220:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 8010222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010224:	3b01      	subs	r3, #1
 8010226:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8010228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801022a:	2b00      	cmp	r3, #0
 801022c:	d1e4      	bne.n	80101f8 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 801022e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010230:	1d1a      	adds	r2, r3, #4
 8010232:	63ba      	str	r2, [r7, #56]	@ 0x38
 8010234:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010236:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8010238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801023a:	3b01      	subs	r3, #1
 801023c:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 801023e:	8b3a      	ldrh	r2, [r7, #24]
 8010240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010242:	1ad3      	subs	r3, r2, r3
 8010244:	009b      	lsls	r3, r3, #2
 8010246:	6a3a      	ldr	r2, [r7, #32]
 8010248:	4413      	add	r3, r2
 801024a:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 801024c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801024e:	2b00      	cmp	r3, #0
 8010250:	d1ca      	bne.n	80101e8 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8010252:	8b3b      	ldrh	r3, [r7, #24]
 8010254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010256:	4413      	add	r3, r2
 8010258:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 801025a:	8afb      	ldrh	r3, [r7, #22]
 801025c:	009b      	lsls	r3, r3, #2
 801025e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010260:	4413      	add	r3, r2
 8010262:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8010264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010266:	3b01      	subs	r3, #1
 8010268:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 801026a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801026c:	2b00      	cmp	r3, #0
 801026e:	d1b1      	bne.n	80101d4 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8010270:	2300      	movs	r3, #0
 8010272:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8010274:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8010278:	4618      	mov	r0, r3
 801027a:	374c      	adds	r7, #76	@ 0x4c
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr

08010284 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8010284:	b480      	push	{r7}
 8010286:	b08b      	sub	sp, #44	@ 0x2c
 8010288:	af00      	add	r7, sp, #0
 801028a:	60f8      	str	r0, [r7, #12]
 801028c:	ed87 0a02 	vstr	s0, [r7, #8]
 8010290:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	685b      	ldr	r3, [r3, #4]
 8010296:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	685b      	ldr	r3, [r3, #4]
 801029c:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	881b      	ldrh	r3, [r3, #0]
 80102a2:	461a      	mov	r2, r3
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	885b      	ldrh	r3, [r3, #2]
 80102a8:	fb02 f303 	mul.w	r3, r2, r3
 80102ac:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80102ae:	69bb      	ldr	r3, [r7, #24]
 80102b0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80102b2:	e010      	b.n	80102d6 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 80102b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102b6:	1d1a      	adds	r2, r3, #4
 80102b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80102ba:	ed93 7a00 	vldr	s14, [r3]
 80102be:	6a3b      	ldr	r3, [r7, #32]
 80102c0:	1d1a      	adds	r2, r3, #4
 80102c2:	623a      	str	r2, [r7, #32]
 80102c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80102c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102cc:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80102d0:	69fb      	ldr	r3, [r7, #28]
 80102d2:	3b01      	subs	r3, #1
 80102d4:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d1eb      	bne.n	80102b4 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80102dc:	2300      	movs	r3, #0
 80102de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 80102e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	372c      	adds	r7, #44	@ 0x2c
 80102e8:	46bd      	mov	sp, r7
 80102ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ee:	4770      	bx	lr

080102f0 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80102f0:	b480      	push	{r7}
 80102f2:	b08b      	sub	sp, #44	@ 0x2c
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	60f8      	str	r0, [r7, #12]
 80102f8:	60b9      	str	r1, [r7, #8]
 80102fa:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	881b      	ldrh	r3, [r3, #0]
 8010312:	461a      	mov	r2, r3
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	885b      	ldrh	r3, [r3, #2]
 8010318:	fb02 f303 	mul.w	r3, r2, r3
 801031c:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8010322:	e013      	b.n	801034c <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8010324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010326:	1d1a      	adds	r2, r3, #4
 8010328:	627a      	str	r2, [r7, #36]	@ 0x24
 801032a:	ed93 7a00 	vldr	s14, [r3]
 801032e:	6a3b      	ldr	r3, [r7, #32]
 8010330:	1d1a      	adds	r2, r3, #4
 8010332:	623a      	str	r2, [r7, #32]
 8010334:	edd3 7a00 	vldr	s15, [r3]
 8010338:	69fb      	ldr	r3, [r7, #28]
 801033a:	1d1a      	adds	r2, r3, #4
 801033c:	61fa      	str	r2, [r7, #28]
 801033e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010342:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8010346:	69bb      	ldr	r3, [r7, #24]
 8010348:	3b01      	subs	r3, #1
 801034a:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 801034c:	69bb      	ldr	r3, [r7, #24]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d1e8      	bne.n	8010324 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8010352:	2300      	movs	r3, #0
 8010354:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8010356:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801035a:	4618      	mov	r0, r3
 801035c:	372c      	adds	r7, #44	@ 0x2c
 801035e:	46bd      	mov	sp, r7
 8010360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010364:	4770      	bx	lr

08010366 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8010366:	b480      	push	{r7}
 8010368:	b08b      	sub	sp, #44	@ 0x2c
 801036a:	af00      	add	r7, sp, #0
 801036c:	6078      	str	r0, [r7, #4]
 801036e:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	685b      	ldr	r3, [r3, #4]
 8010374:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	685b      	ldr	r3, [r3, #4]
 801037a:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	881b      	ldrh	r3, [r3, #0]
 8010380:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	885b      	ldrh	r3, [r3, #2]
 8010386:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8010388:	89fb      	ldrh	r3, [r7, #14]
 801038a:	61bb      	str	r3, [r7, #24]
 801038c:	2300      	movs	r3, #0
 801038e:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	009b      	lsls	r3, r3, #2
 8010394:	693a      	ldr	r2, [r7, #16]
 8010396:	4413      	add	r3, r2
 8010398:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 801039a:	89bb      	ldrh	r3, [r7, #12]
 801039c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 801039e:	e00d      	b.n	80103bc <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 80103a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103a2:	1d1a      	adds	r2, r3, #4
 80103a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80103a6:	681a      	ldr	r2, [r3, #0]
 80103a8:	6a3b      	ldr	r3, [r7, #32]
 80103aa:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 80103ac:	89fb      	ldrh	r3, [r7, #14]
 80103ae:	009b      	lsls	r3, r3, #2
 80103b0:	6a3a      	ldr	r2, [r7, #32]
 80103b2:	4413      	add	r3, r2
 80103b4:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	3b01      	subs	r3, #1
 80103ba:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 80103bc:	69fb      	ldr	r3, [r7, #28]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d1ee      	bne.n	80103a0 <arm_mat_trans_f32+0x3a>
      }

      i++;
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	3301      	adds	r3, #1
 80103c6:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 80103c8:	69bb      	ldr	r3, [r7, #24]
 80103ca:	3b01      	subs	r3, #1
 80103cc:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 80103ce:	69bb      	ldr	r3, [r7, #24]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d1dd      	bne.n	8010390 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80103d4:	2300      	movs	r3, #0
 80103d6:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 80103d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80103dc:	4618      	mov	r0, r3
 80103de:	372c      	adds	r7, #44	@ 0x2c
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <malloc>:
 80103e8:	4b02      	ldr	r3, [pc, #8]	@ (80103f4 <malloc+0xc>)
 80103ea:	4601      	mov	r1, r0
 80103ec:	6818      	ldr	r0, [r3, #0]
 80103ee:	f000 b825 	b.w	801043c <_malloc_r>
 80103f2:	bf00      	nop
 80103f4:	2000013c 	.word	0x2000013c

080103f8 <sbrk_aligned>:
 80103f8:	b570      	push	{r4, r5, r6, lr}
 80103fa:	4e0f      	ldr	r6, [pc, #60]	@ (8010438 <sbrk_aligned+0x40>)
 80103fc:	460c      	mov	r4, r1
 80103fe:	6831      	ldr	r1, [r6, #0]
 8010400:	4605      	mov	r5, r0
 8010402:	b911      	cbnz	r1, 801040a <sbrk_aligned+0x12>
 8010404:	f000 f8ae 	bl	8010564 <_sbrk_r>
 8010408:	6030      	str	r0, [r6, #0]
 801040a:	4621      	mov	r1, r4
 801040c:	4628      	mov	r0, r5
 801040e:	f000 f8a9 	bl	8010564 <_sbrk_r>
 8010412:	1c43      	adds	r3, r0, #1
 8010414:	d103      	bne.n	801041e <sbrk_aligned+0x26>
 8010416:	f04f 34ff 	mov.w	r4, #4294967295
 801041a:	4620      	mov	r0, r4
 801041c:	bd70      	pop	{r4, r5, r6, pc}
 801041e:	1cc4      	adds	r4, r0, #3
 8010420:	f024 0403 	bic.w	r4, r4, #3
 8010424:	42a0      	cmp	r0, r4
 8010426:	d0f8      	beq.n	801041a <sbrk_aligned+0x22>
 8010428:	1a21      	subs	r1, r4, r0
 801042a:	4628      	mov	r0, r5
 801042c:	f000 f89a 	bl	8010564 <_sbrk_r>
 8010430:	3001      	adds	r0, #1
 8010432:	d1f2      	bne.n	801041a <sbrk_aligned+0x22>
 8010434:	e7ef      	b.n	8010416 <sbrk_aligned+0x1e>
 8010436:	bf00      	nop
 8010438:	200021d0 	.word	0x200021d0

0801043c <_malloc_r>:
 801043c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010440:	1ccd      	adds	r5, r1, #3
 8010442:	f025 0503 	bic.w	r5, r5, #3
 8010446:	3508      	adds	r5, #8
 8010448:	2d0c      	cmp	r5, #12
 801044a:	bf38      	it	cc
 801044c:	250c      	movcc	r5, #12
 801044e:	2d00      	cmp	r5, #0
 8010450:	4606      	mov	r6, r0
 8010452:	db01      	blt.n	8010458 <_malloc_r+0x1c>
 8010454:	42a9      	cmp	r1, r5
 8010456:	d904      	bls.n	8010462 <_malloc_r+0x26>
 8010458:	230c      	movs	r3, #12
 801045a:	6033      	str	r3, [r6, #0]
 801045c:	2000      	movs	r0, #0
 801045e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010462:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010538 <_malloc_r+0xfc>
 8010466:	f000 f869 	bl	801053c <__malloc_lock>
 801046a:	f8d8 3000 	ldr.w	r3, [r8]
 801046e:	461c      	mov	r4, r3
 8010470:	bb44      	cbnz	r4, 80104c4 <_malloc_r+0x88>
 8010472:	4629      	mov	r1, r5
 8010474:	4630      	mov	r0, r6
 8010476:	f7ff ffbf 	bl	80103f8 <sbrk_aligned>
 801047a:	1c43      	adds	r3, r0, #1
 801047c:	4604      	mov	r4, r0
 801047e:	d158      	bne.n	8010532 <_malloc_r+0xf6>
 8010480:	f8d8 4000 	ldr.w	r4, [r8]
 8010484:	4627      	mov	r7, r4
 8010486:	2f00      	cmp	r7, #0
 8010488:	d143      	bne.n	8010512 <_malloc_r+0xd6>
 801048a:	2c00      	cmp	r4, #0
 801048c:	d04b      	beq.n	8010526 <_malloc_r+0xea>
 801048e:	6823      	ldr	r3, [r4, #0]
 8010490:	4639      	mov	r1, r7
 8010492:	4630      	mov	r0, r6
 8010494:	eb04 0903 	add.w	r9, r4, r3
 8010498:	f000 f864 	bl	8010564 <_sbrk_r>
 801049c:	4581      	cmp	r9, r0
 801049e:	d142      	bne.n	8010526 <_malloc_r+0xea>
 80104a0:	6821      	ldr	r1, [r4, #0]
 80104a2:	1a6d      	subs	r5, r5, r1
 80104a4:	4629      	mov	r1, r5
 80104a6:	4630      	mov	r0, r6
 80104a8:	f7ff ffa6 	bl	80103f8 <sbrk_aligned>
 80104ac:	3001      	adds	r0, #1
 80104ae:	d03a      	beq.n	8010526 <_malloc_r+0xea>
 80104b0:	6823      	ldr	r3, [r4, #0]
 80104b2:	442b      	add	r3, r5
 80104b4:	6023      	str	r3, [r4, #0]
 80104b6:	f8d8 3000 	ldr.w	r3, [r8]
 80104ba:	685a      	ldr	r2, [r3, #4]
 80104bc:	bb62      	cbnz	r2, 8010518 <_malloc_r+0xdc>
 80104be:	f8c8 7000 	str.w	r7, [r8]
 80104c2:	e00f      	b.n	80104e4 <_malloc_r+0xa8>
 80104c4:	6822      	ldr	r2, [r4, #0]
 80104c6:	1b52      	subs	r2, r2, r5
 80104c8:	d420      	bmi.n	801050c <_malloc_r+0xd0>
 80104ca:	2a0b      	cmp	r2, #11
 80104cc:	d917      	bls.n	80104fe <_malloc_r+0xc2>
 80104ce:	1961      	adds	r1, r4, r5
 80104d0:	42a3      	cmp	r3, r4
 80104d2:	6025      	str	r5, [r4, #0]
 80104d4:	bf18      	it	ne
 80104d6:	6059      	strne	r1, [r3, #4]
 80104d8:	6863      	ldr	r3, [r4, #4]
 80104da:	bf08      	it	eq
 80104dc:	f8c8 1000 	streq.w	r1, [r8]
 80104e0:	5162      	str	r2, [r4, r5]
 80104e2:	604b      	str	r3, [r1, #4]
 80104e4:	4630      	mov	r0, r6
 80104e6:	f000 f82f 	bl	8010548 <__malloc_unlock>
 80104ea:	f104 000b 	add.w	r0, r4, #11
 80104ee:	1d23      	adds	r3, r4, #4
 80104f0:	f020 0007 	bic.w	r0, r0, #7
 80104f4:	1ac2      	subs	r2, r0, r3
 80104f6:	bf1c      	itt	ne
 80104f8:	1a1b      	subne	r3, r3, r0
 80104fa:	50a3      	strne	r3, [r4, r2]
 80104fc:	e7af      	b.n	801045e <_malloc_r+0x22>
 80104fe:	6862      	ldr	r2, [r4, #4]
 8010500:	42a3      	cmp	r3, r4
 8010502:	bf0c      	ite	eq
 8010504:	f8c8 2000 	streq.w	r2, [r8]
 8010508:	605a      	strne	r2, [r3, #4]
 801050a:	e7eb      	b.n	80104e4 <_malloc_r+0xa8>
 801050c:	4623      	mov	r3, r4
 801050e:	6864      	ldr	r4, [r4, #4]
 8010510:	e7ae      	b.n	8010470 <_malloc_r+0x34>
 8010512:	463c      	mov	r4, r7
 8010514:	687f      	ldr	r7, [r7, #4]
 8010516:	e7b6      	b.n	8010486 <_malloc_r+0x4a>
 8010518:	461a      	mov	r2, r3
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	42a3      	cmp	r3, r4
 801051e:	d1fb      	bne.n	8010518 <_malloc_r+0xdc>
 8010520:	2300      	movs	r3, #0
 8010522:	6053      	str	r3, [r2, #4]
 8010524:	e7de      	b.n	80104e4 <_malloc_r+0xa8>
 8010526:	230c      	movs	r3, #12
 8010528:	6033      	str	r3, [r6, #0]
 801052a:	4630      	mov	r0, r6
 801052c:	f000 f80c 	bl	8010548 <__malloc_unlock>
 8010530:	e794      	b.n	801045c <_malloc_r+0x20>
 8010532:	6005      	str	r5, [r0, #0]
 8010534:	e7d6      	b.n	80104e4 <_malloc_r+0xa8>
 8010536:	bf00      	nop
 8010538:	200021d4 	.word	0x200021d4

0801053c <__malloc_lock>:
 801053c:	4801      	ldr	r0, [pc, #4]	@ (8010544 <__malloc_lock+0x8>)
 801053e:	f000 b84b 	b.w	80105d8 <__retarget_lock_acquire_recursive>
 8010542:	bf00      	nop
 8010544:	20002314 	.word	0x20002314

08010548 <__malloc_unlock>:
 8010548:	4801      	ldr	r0, [pc, #4]	@ (8010550 <__malloc_unlock+0x8>)
 801054a:	f000 b846 	b.w	80105da <__retarget_lock_release_recursive>
 801054e:	bf00      	nop
 8010550:	20002314 	.word	0x20002314

08010554 <memset>:
 8010554:	4402      	add	r2, r0
 8010556:	4603      	mov	r3, r0
 8010558:	4293      	cmp	r3, r2
 801055a:	d100      	bne.n	801055e <memset+0xa>
 801055c:	4770      	bx	lr
 801055e:	f803 1b01 	strb.w	r1, [r3], #1
 8010562:	e7f9      	b.n	8010558 <memset+0x4>

08010564 <_sbrk_r>:
 8010564:	b538      	push	{r3, r4, r5, lr}
 8010566:	4d06      	ldr	r5, [pc, #24]	@ (8010580 <_sbrk_r+0x1c>)
 8010568:	2300      	movs	r3, #0
 801056a:	4604      	mov	r4, r0
 801056c:	4608      	mov	r0, r1
 801056e:	602b      	str	r3, [r5, #0]
 8010570:	f7f7 f94a 	bl	8007808 <_sbrk>
 8010574:	1c43      	adds	r3, r0, #1
 8010576:	d102      	bne.n	801057e <_sbrk_r+0x1a>
 8010578:	682b      	ldr	r3, [r5, #0]
 801057a:	b103      	cbz	r3, 801057e <_sbrk_r+0x1a>
 801057c:	6023      	str	r3, [r4, #0]
 801057e:	bd38      	pop	{r3, r4, r5, pc}
 8010580:	20002310 	.word	0x20002310

08010584 <__errno>:
 8010584:	4b01      	ldr	r3, [pc, #4]	@ (801058c <__errno+0x8>)
 8010586:	6818      	ldr	r0, [r3, #0]
 8010588:	4770      	bx	lr
 801058a:	bf00      	nop
 801058c:	2000013c 	.word	0x2000013c

08010590 <__libc_init_array>:
 8010590:	b570      	push	{r4, r5, r6, lr}
 8010592:	4d0d      	ldr	r5, [pc, #52]	@ (80105c8 <__libc_init_array+0x38>)
 8010594:	4c0d      	ldr	r4, [pc, #52]	@ (80105cc <__libc_init_array+0x3c>)
 8010596:	1b64      	subs	r4, r4, r5
 8010598:	10a4      	asrs	r4, r4, #2
 801059a:	2600      	movs	r6, #0
 801059c:	42a6      	cmp	r6, r4
 801059e:	d109      	bne.n	80105b4 <__libc_init_array+0x24>
 80105a0:	4d0b      	ldr	r5, [pc, #44]	@ (80105d0 <__libc_init_array+0x40>)
 80105a2:	4c0c      	ldr	r4, [pc, #48]	@ (80105d4 <__libc_init_array+0x44>)
 80105a4:	f001 ff30 	bl	8012408 <_init>
 80105a8:	1b64      	subs	r4, r4, r5
 80105aa:	10a4      	asrs	r4, r4, #2
 80105ac:	2600      	movs	r6, #0
 80105ae:	42a6      	cmp	r6, r4
 80105b0:	d105      	bne.n	80105be <__libc_init_array+0x2e>
 80105b2:	bd70      	pop	{r4, r5, r6, pc}
 80105b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80105b8:	4798      	blx	r3
 80105ba:	3601      	adds	r6, #1
 80105bc:	e7ee      	b.n	801059c <__libc_init_array+0xc>
 80105be:	f855 3b04 	ldr.w	r3, [r5], #4
 80105c2:	4798      	blx	r3
 80105c4:	3601      	adds	r6, #1
 80105c6:	e7f2      	b.n	80105ae <__libc_init_array+0x1e>
 80105c8:	08012a88 	.word	0x08012a88
 80105cc:	08012a88 	.word	0x08012a88
 80105d0:	08012a88 	.word	0x08012a88
 80105d4:	08012a8c 	.word	0x08012a8c

080105d8 <__retarget_lock_acquire_recursive>:
 80105d8:	4770      	bx	lr

080105da <__retarget_lock_release_recursive>:
 80105da:	4770      	bx	lr

080105dc <memcpy>:
 80105dc:	440a      	add	r2, r1
 80105de:	4291      	cmp	r1, r2
 80105e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80105e4:	d100      	bne.n	80105e8 <memcpy+0xc>
 80105e6:	4770      	bx	lr
 80105e8:	b510      	push	{r4, lr}
 80105ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105f2:	4291      	cmp	r1, r2
 80105f4:	d1f9      	bne.n	80105ea <memcpy+0xe>
 80105f6:	bd10      	pop	{r4, pc}

080105f8 <cos>:
 80105f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105fa:	ec53 2b10 	vmov	r2, r3, d0
 80105fe:	4826      	ldr	r0, [pc, #152]	@ (8010698 <cos+0xa0>)
 8010600:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010604:	4281      	cmp	r1, r0
 8010606:	d806      	bhi.n	8010616 <cos+0x1e>
 8010608:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010690 <cos+0x98>
 801060c:	b005      	add	sp, #20
 801060e:	f85d eb04 	ldr.w	lr, [sp], #4
 8010612:	f000 b9bd 	b.w	8010990 <__kernel_cos>
 8010616:	4821      	ldr	r0, [pc, #132]	@ (801069c <cos+0xa4>)
 8010618:	4281      	cmp	r1, r0
 801061a:	d908      	bls.n	801062e <cos+0x36>
 801061c:	4610      	mov	r0, r2
 801061e:	4619      	mov	r1, r3
 8010620:	f7ef fdfe 	bl	8000220 <__aeabi_dsub>
 8010624:	ec41 0b10 	vmov	d0, r0, r1
 8010628:	b005      	add	sp, #20
 801062a:	f85d fb04 	ldr.w	pc, [sp], #4
 801062e:	4668      	mov	r0, sp
 8010630:	f000 fb32 	bl	8010c98 <__ieee754_rem_pio2>
 8010634:	f000 0003 	and.w	r0, r0, #3
 8010638:	2801      	cmp	r0, #1
 801063a:	d00b      	beq.n	8010654 <cos+0x5c>
 801063c:	2802      	cmp	r0, #2
 801063e:	d015      	beq.n	801066c <cos+0x74>
 8010640:	b9d8      	cbnz	r0, 801067a <cos+0x82>
 8010642:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010646:	ed9d 0b00 	vldr	d0, [sp]
 801064a:	f000 f9a1 	bl	8010990 <__kernel_cos>
 801064e:	ec51 0b10 	vmov	r0, r1, d0
 8010652:	e7e7      	b.n	8010624 <cos+0x2c>
 8010654:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010658:	ed9d 0b00 	vldr	d0, [sp]
 801065c:	f000 fa60 	bl	8010b20 <__kernel_sin>
 8010660:	ec53 2b10 	vmov	r2, r3, d0
 8010664:	4610      	mov	r0, r2
 8010666:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801066a:	e7db      	b.n	8010624 <cos+0x2c>
 801066c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010670:	ed9d 0b00 	vldr	d0, [sp]
 8010674:	f000 f98c 	bl	8010990 <__kernel_cos>
 8010678:	e7f2      	b.n	8010660 <cos+0x68>
 801067a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801067e:	ed9d 0b00 	vldr	d0, [sp]
 8010682:	2001      	movs	r0, #1
 8010684:	f000 fa4c 	bl	8010b20 <__kernel_sin>
 8010688:	e7e1      	b.n	801064e <cos+0x56>
 801068a:	bf00      	nop
 801068c:	f3af 8000 	nop.w
	...
 8010698:	3fe921fb 	.word	0x3fe921fb
 801069c:	7fefffff 	.word	0x7fefffff

080106a0 <sin>:
 80106a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80106a2:	ec53 2b10 	vmov	r2, r3, d0
 80106a6:	4826      	ldr	r0, [pc, #152]	@ (8010740 <sin+0xa0>)
 80106a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80106ac:	4281      	cmp	r1, r0
 80106ae:	d807      	bhi.n	80106c0 <sin+0x20>
 80106b0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010738 <sin+0x98>
 80106b4:	2000      	movs	r0, #0
 80106b6:	b005      	add	sp, #20
 80106b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80106bc:	f000 ba30 	b.w	8010b20 <__kernel_sin>
 80106c0:	4820      	ldr	r0, [pc, #128]	@ (8010744 <sin+0xa4>)
 80106c2:	4281      	cmp	r1, r0
 80106c4:	d908      	bls.n	80106d8 <sin+0x38>
 80106c6:	4610      	mov	r0, r2
 80106c8:	4619      	mov	r1, r3
 80106ca:	f7ef fda9 	bl	8000220 <__aeabi_dsub>
 80106ce:	ec41 0b10 	vmov	d0, r0, r1
 80106d2:	b005      	add	sp, #20
 80106d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80106d8:	4668      	mov	r0, sp
 80106da:	f000 fadd 	bl	8010c98 <__ieee754_rem_pio2>
 80106de:	f000 0003 	and.w	r0, r0, #3
 80106e2:	2801      	cmp	r0, #1
 80106e4:	d00c      	beq.n	8010700 <sin+0x60>
 80106e6:	2802      	cmp	r0, #2
 80106e8:	d011      	beq.n	801070e <sin+0x6e>
 80106ea:	b9e8      	cbnz	r0, 8010728 <sin+0x88>
 80106ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106f0:	ed9d 0b00 	vldr	d0, [sp]
 80106f4:	2001      	movs	r0, #1
 80106f6:	f000 fa13 	bl	8010b20 <__kernel_sin>
 80106fa:	ec51 0b10 	vmov	r0, r1, d0
 80106fe:	e7e6      	b.n	80106ce <sin+0x2e>
 8010700:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010704:	ed9d 0b00 	vldr	d0, [sp]
 8010708:	f000 f942 	bl	8010990 <__kernel_cos>
 801070c:	e7f5      	b.n	80106fa <sin+0x5a>
 801070e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010712:	ed9d 0b00 	vldr	d0, [sp]
 8010716:	2001      	movs	r0, #1
 8010718:	f000 fa02 	bl	8010b20 <__kernel_sin>
 801071c:	ec53 2b10 	vmov	r2, r3, d0
 8010720:	4610      	mov	r0, r2
 8010722:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010726:	e7d2      	b.n	80106ce <sin+0x2e>
 8010728:	ed9d 1b02 	vldr	d1, [sp, #8]
 801072c:	ed9d 0b00 	vldr	d0, [sp]
 8010730:	f000 f92e 	bl	8010990 <__kernel_cos>
 8010734:	e7f2      	b.n	801071c <sin+0x7c>
 8010736:	bf00      	nop
	...
 8010740:	3fe921fb 	.word	0x3fe921fb
 8010744:	7fefffff 	.word	0x7fefffff

08010748 <fmodf>:
 8010748:	b508      	push	{r3, lr}
 801074a:	ed2d 8b02 	vpush	{d8}
 801074e:	eef0 8a40 	vmov.f32	s17, s0
 8010752:	eeb0 8a60 	vmov.f32	s16, s1
 8010756:	f000 fd43 	bl	80111e0 <__ieee754_fmodf>
 801075a:	eef4 8a48 	vcmp.f32	s17, s16
 801075e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010762:	d60c      	bvs.n	801077e <fmodf+0x36>
 8010764:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010784 <fmodf+0x3c>
 8010768:	eeb4 8a68 	vcmp.f32	s16, s17
 801076c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010770:	d105      	bne.n	801077e <fmodf+0x36>
 8010772:	f7ff ff07 	bl	8010584 <__errno>
 8010776:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801077a:	2321      	movs	r3, #33	@ 0x21
 801077c:	6003      	str	r3, [r0, #0]
 801077e:	ecbd 8b02 	vpop	{d8}
 8010782:	bd08      	pop	{r3, pc}
 8010784:	00000000 	.word	0x00000000

08010788 <sqrtf>:
 8010788:	b508      	push	{r3, lr}
 801078a:	ed2d 8b02 	vpush	{d8}
 801078e:	eeb0 8a40 	vmov.f32	s16, s0
 8010792:	f000 f8f7 	bl	8010984 <__ieee754_sqrtf>
 8010796:	eeb4 8a48 	vcmp.f32	s16, s16
 801079a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801079e:	d60c      	bvs.n	80107ba <sqrtf+0x32>
 80107a0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80107c0 <sqrtf+0x38>
 80107a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80107a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ac:	d505      	bpl.n	80107ba <sqrtf+0x32>
 80107ae:	f7ff fee9 	bl	8010584 <__errno>
 80107b2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80107b6:	2321      	movs	r3, #33	@ 0x21
 80107b8:	6003      	str	r3, [r0, #0]
 80107ba:	ecbd 8b02 	vpop	{d8}
 80107be:	bd08      	pop	{r3, pc}
 80107c0:	00000000 	.word	0x00000000

080107c4 <cosf>:
 80107c4:	ee10 3a10 	vmov	r3, s0
 80107c8:	b507      	push	{r0, r1, r2, lr}
 80107ca:	4a1e      	ldr	r2, [pc, #120]	@ (8010844 <cosf+0x80>)
 80107cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80107d0:	4293      	cmp	r3, r2
 80107d2:	d806      	bhi.n	80107e2 <cosf+0x1e>
 80107d4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8010848 <cosf+0x84>
 80107d8:	b003      	add	sp, #12
 80107da:	f85d eb04 	ldr.w	lr, [sp], #4
 80107de:	f000 bc5f 	b.w	80110a0 <__kernel_cosf>
 80107e2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80107e6:	d304      	bcc.n	80107f2 <cosf+0x2e>
 80107e8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80107ec:	b003      	add	sp, #12
 80107ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80107f2:	4668      	mov	r0, sp
 80107f4:	f000 fd76 	bl	80112e4 <__ieee754_rem_pio2f>
 80107f8:	f000 0003 	and.w	r0, r0, #3
 80107fc:	2801      	cmp	r0, #1
 80107fe:	d009      	beq.n	8010814 <cosf+0x50>
 8010800:	2802      	cmp	r0, #2
 8010802:	d010      	beq.n	8010826 <cosf+0x62>
 8010804:	b9b0      	cbnz	r0, 8010834 <cosf+0x70>
 8010806:	eddd 0a01 	vldr	s1, [sp, #4]
 801080a:	ed9d 0a00 	vldr	s0, [sp]
 801080e:	f000 fc47 	bl	80110a0 <__kernel_cosf>
 8010812:	e7eb      	b.n	80107ec <cosf+0x28>
 8010814:	eddd 0a01 	vldr	s1, [sp, #4]
 8010818:	ed9d 0a00 	vldr	s0, [sp]
 801081c:	f000 fc98 	bl	8011150 <__kernel_sinf>
 8010820:	eeb1 0a40 	vneg.f32	s0, s0
 8010824:	e7e2      	b.n	80107ec <cosf+0x28>
 8010826:	eddd 0a01 	vldr	s1, [sp, #4]
 801082a:	ed9d 0a00 	vldr	s0, [sp]
 801082e:	f000 fc37 	bl	80110a0 <__kernel_cosf>
 8010832:	e7f5      	b.n	8010820 <cosf+0x5c>
 8010834:	eddd 0a01 	vldr	s1, [sp, #4]
 8010838:	ed9d 0a00 	vldr	s0, [sp]
 801083c:	2001      	movs	r0, #1
 801083e:	f000 fc87 	bl	8011150 <__kernel_sinf>
 8010842:	e7d3      	b.n	80107ec <cosf+0x28>
 8010844:	3f490fd8 	.word	0x3f490fd8
 8010848:	00000000 	.word	0x00000000

0801084c <sinf>:
 801084c:	ee10 3a10 	vmov	r3, s0
 8010850:	b507      	push	{r0, r1, r2, lr}
 8010852:	4a1f      	ldr	r2, [pc, #124]	@ (80108d0 <sinf+0x84>)
 8010854:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010858:	4293      	cmp	r3, r2
 801085a:	d807      	bhi.n	801086c <sinf+0x20>
 801085c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80108d4 <sinf+0x88>
 8010860:	2000      	movs	r0, #0
 8010862:	b003      	add	sp, #12
 8010864:	f85d eb04 	ldr.w	lr, [sp], #4
 8010868:	f000 bc72 	b.w	8011150 <__kernel_sinf>
 801086c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010870:	d304      	bcc.n	801087c <sinf+0x30>
 8010872:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010876:	b003      	add	sp, #12
 8010878:	f85d fb04 	ldr.w	pc, [sp], #4
 801087c:	4668      	mov	r0, sp
 801087e:	f000 fd31 	bl	80112e4 <__ieee754_rem_pio2f>
 8010882:	f000 0003 	and.w	r0, r0, #3
 8010886:	2801      	cmp	r0, #1
 8010888:	d00a      	beq.n	80108a0 <sinf+0x54>
 801088a:	2802      	cmp	r0, #2
 801088c:	d00f      	beq.n	80108ae <sinf+0x62>
 801088e:	b9c0      	cbnz	r0, 80108c2 <sinf+0x76>
 8010890:	eddd 0a01 	vldr	s1, [sp, #4]
 8010894:	ed9d 0a00 	vldr	s0, [sp]
 8010898:	2001      	movs	r0, #1
 801089a:	f000 fc59 	bl	8011150 <__kernel_sinf>
 801089e:	e7ea      	b.n	8010876 <sinf+0x2a>
 80108a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80108a4:	ed9d 0a00 	vldr	s0, [sp]
 80108a8:	f000 fbfa 	bl	80110a0 <__kernel_cosf>
 80108ac:	e7e3      	b.n	8010876 <sinf+0x2a>
 80108ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80108b2:	ed9d 0a00 	vldr	s0, [sp]
 80108b6:	2001      	movs	r0, #1
 80108b8:	f000 fc4a 	bl	8011150 <__kernel_sinf>
 80108bc:	eeb1 0a40 	vneg.f32	s0, s0
 80108c0:	e7d9      	b.n	8010876 <sinf+0x2a>
 80108c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80108c6:	ed9d 0a00 	vldr	s0, [sp]
 80108ca:	f000 fbe9 	bl	80110a0 <__kernel_cosf>
 80108ce:	e7f5      	b.n	80108bc <sinf+0x70>
 80108d0:	3f490fd8 	.word	0x3f490fd8
 80108d4:	00000000 	.word	0x00000000

080108d8 <fmaxf>:
 80108d8:	b508      	push	{r3, lr}
 80108da:	ed2d 8b02 	vpush	{d8}
 80108de:	eeb0 8a40 	vmov.f32	s16, s0
 80108e2:	eef0 8a60 	vmov.f32	s17, s1
 80108e6:	f000 f831 	bl	801094c <__fpclassifyf>
 80108ea:	b930      	cbnz	r0, 80108fa <fmaxf+0x22>
 80108ec:	eeb0 8a68 	vmov.f32	s16, s17
 80108f0:	eeb0 0a48 	vmov.f32	s0, s16
 80108f4:	ecbd 8b02 	vpop	{d8}
 80108f8:	bd08      	pop	{r3, pc}
 80108fa:	eeb0 0a68 	vmov.f32	s0, s17
 80108fe:	f000 f825 	bl	801094c <__fpclassifyf>
 8010902:	2800      	cmp	r0, #0
 8010904:	d0f4      	beq.n	80108f0 <fmaxf+0x18>
 8010906:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801090a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801090e:	dded      	ble.n	80108ec <fmaxf+0x14>
 8010910:	e7ee      	b.n	80108f0 <fmaxf+0x18>

08010912 <fminf>:
 8010912:	b508      	push	{r3, lr}
 8010914:	ed2d 8b02 	vpush	{d8}
 8010918:	eeb0 8a40 	vmov.f32	s16, s0
 801091c:	eef0 8a60 	vmov.f32	s17, s1
 8010920:	f000 f814 	bl	801094c <__fpclassifyf>
 8010924:	b930      	cbnz	r0, 8010934 <fminf+0x22>
 8010926:	eeb0 8a68 	vmov.f32	s16, s17
 801092a:	eeb0 0a48 	vmov.f32	s0, s16
 801092e:	ecbd 8b02 	vpop	{d8}
 8010932:	bd08      	pop	{r3, pc}
 8010934:	eeb0 0a68 	vmov.f32	s0, s17
 8010938:	f000 f808 	bl	801094c <__fpclassifyf>
 801093c:	2800      	cmp	r0, #0
 801093e:	d0f4      	beq.n	801092a <fminf+0x18>
 8010940:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010948:	d5ed      	bpl.n	8010926 <fminf+0x14>
 801094a:	e7ee      	b.n	801092a <fminf+0x18>

0801094c <__fpclassifyf>:
 801094c:	ee10 3a10 	vmov	r3, s0
 8010950:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8010954:	d00d      	beq.n	8010972 <__fpclassifyf+0x26>
 8010956:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 801095a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 801095e:	d30a      	bcc.n	8010976 <__fpclassifyf+0x2a>
 8010960:	4b07      	ldr	r3, [pc, #28]	@ (8010980 <__fpclassifyf+0x34>)
 8010962:	1e42      	subs	r2, r0, #1
 8010964:	429a      	cmp	r2, r3
 8010966:	d908      	bls.n	801097a <__fpclassifyf+0x2e>
 8010968:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 801096c:	4258      	negs	r0, r3
 801096e:	4158      	adcs	r0, r3
 8010970:	4770      	bx	lr
 8010972:	2002      	movs	r0, #2
 8010974:	4770      	bx	lr
 8010976:	2004      	movs	r0, #4
 8010978:	4770      	bx	lr
 801097a:	2003      	movs	r0, #3
 801097c:	4770      	bx	lr
 801097e:	bf00      	nop
 8010980:	007ffffe 	.word	0x007ffffe

08010984 <__ieee754_sqrtf>:
 8010984:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010988:	4770      	bx	lr
 801098a:	0000      	movs	r0, r0
 801098c:	0000      	movs	r0, r0
	...

08010990 <__kernel_cos>:
 8010990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010994:	ec57 6b10 	vmov	r6, r7, d0
 8010998:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801099c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80109a0:	ed8d 1b00 	vstr	d1, [sp]
 80109a4:	d206      	bcs.n	80109b4 <__kernel_cos+0x24>
 80109a6:	4630      	mov	r0, r6
 80109a8:	4639      	mov	r1, r7
 80109aa:	f7f0 f88b 	bl	8000ac4 <__aeabi_d2iz>
 80109ae:	2800      	cmp	r0, #0
 80109b0:	f000 8088 	beq.w	8010ac4 <__kernel_cos+0x134>
 80109b4:	4632      	mov	r2, r6
 80109b6:	463b      	mov	r3, r7
 80109b8:	4630      	mov	r0, r6
 80109ba:	4639      	mov	r1, r7
 80109bc:	f7ef fde8 	bl	8000590 <__aeabi_dmul>
 80109c0:	4b51      	ldr	r3, [pc, #324]	@ (8010b08 <__kernel_cos+0x178>)
 80109c2:	2200      	movs	r2, #0
 80109c4:	4604      	mov	r4, r0
 80109c6:	460d      	mov	r5, r1
 80109c8:	f7ef fde2 	bl	8000590 <__aeabi_dmul>
 80109cc:	a340      	add	r3, pc, #256	@ (adr r3, 8010ad0 <__kernel_cos+0x140>)
 80109ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d2:	4682      	mov	sl, r0
 80109d4:	468b      	mov	fp, r1
 80109d6:	4620      	mov	r0, r4
 80109d8:	4629      	mov	r1, r5
 80109da:	f7ef fdd9 	bl	8000590 <__aeabi_dmul>
 80109de:	a33e      	add	r3, pc, #248	@ (adr r3, 8010ad8 <__kernel_cos+0x148>)
 80109e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e4:	f7ef fc1e 	bl	8000224 <__adddf3>
 80109e8:	4622      	mov	r2, r4
 80109ea:	462b      	mov	r3, r5
 80109ec:	f7ef fdd0 	bl	8000590 <__aeabi_dmul>
 80109f0:	a33b      	add	r3, pc, #236	@ (adr r3, 8010ae0 <__kernel_cos+0x150>)
 80109f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f6:	f7ef fc13 	bl	8000220 <__aeabi_dsub>
 80109fa:	4622      	mov	r2, r4
 80109fc:	462b      	mov	r3, r5
 80109fe:	f7ef fdc7 	bl	8000590 <__aeabi_dmul>
 8010a02:	a339      	add	r3, pc, #228	@ (adr r3, 8010ae8 <__kernel_cos+0x158>)
 8010a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a08:	f7ef fc0c 	bl	8000224 <__adddf3>
 8010a0c:	4622      	mov	r2, r4
 8010a0e:	462b      	mov	r3, r5
 8010a10:	f7ef fdbe 	bl	8000590 <__aeabi_dmul>
 8010a14:	a336      	add	r3, pc, #216	@ (adr r3, 8010af0 <__kernel_cos+0x160>)
 8010a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a1a:	f7ef fc01 	bl	8000220 <__aeabi_dsub>
 8010a1e:	4622      	mov	r2, r4
 8010a20:	462b      	mov	r3, r5
 8010a22:	f7ef fdb5 	bl	8000590 <__aeabi_dmul>
 8010a26:	a334      	add	r3, pc, #208	@ (adr r3, 8010af8 <__kernel_cos+0x168>)
 8010a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a2c:	f7ef fbfa 	bl	8000224 <__adddf3>
 8010a30:	4622      	mov	r2, r4
 8010a32:	462b      	mov	r3, r5
 8010a34:	f7ef fdac 	bl	8000590 <__aeabi_dmul>
 8010a38:	4622      	mov	r2, r4
 8010a3a:	462b      	mov	r3, r5
 8010a3c:	f7ef fda8 	bl	8000590 <__aeabi_dmul>
 8010a40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a44:	4604      	mov	r4, r0
 8010a46:	460d      	mov	r5, r1
 8010a48:	4630      	mov	r0, r6
 8010a4a:	4639      	mov	r1, r7
 8010a4c:	f7ef fda0 	bl	8000590 <__aeabi_dmul>
 8010a50:	460b      	mov	r3, r1
 8010a52:	4602      	mov	r2, r0
 8010a54:	4629      	mov	r1, r5
 8010a56:	4620      	mov	r0, r4
 8010a58:	f7ef fbe2 	bl	8000220 <__aeabi_dsub>
 8010a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8010b0c <__kernel_cos+0x17c>)
 8010a5e:	4598      	cmp	r8, r3
 8010a60:	4606      	mov	r6, r0
 8010a62:	460f      	mov	r7, r1
 8010a64:	d810      	bhi.n	8010a88 <__kernel_cos+0xf8>
 8010a66:	4602      	mov	r2, r0
 8010a68:	460b      	mov	r3, r1
 8010a6a:	4650      	mov	r0, sl
 8010a6c:	4659      	mov	r1, fp
 8010a6e:	f7ef fbd7 	bl	8000220 <__aeabi_dsub>
 8010a72:	460b      	mov	r3, r1
 8010a74:	4926      	ldr	r1, [pc, #152]	@ (8010b10 <__kernel_cos+0x180>)
 8010a76:	4602      	mov	r2, r0
 8010a78:	2000      	movs	r0, #0
 8010a7a:	f7ef fbd1 	bl	8000220 <__aeabi_dsub>
 8010a7e:	ec41 0b10 	vmov	d0, r0, r1
 8010a82:	b003      	add	sp, #12
 8010a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a88:	4b22      	ldr	r3, [pc, #136]	@ (8010b14 <__kernel_cos+0x184>)
 8010a8a:	4921      	ldr	r1, [pc, #132]	@ (8010b10 <__kernel_cos+0x180>)
 8010a8c:	4598      	cmp	r8, r3
 8010a8e:	bf8c      	ite	hi
 8010a90:	4d21      	ldrhi	r5, [pc, #132]	@ (8010b18 <__kernel_cos+0x188>)
 8010a92:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8010a96:	2400      	movs	r4, #0
 8010a98:	4622      	mov	r2, r4
 8010a9a:	462b      	mov	r3, r5
 8010a9c:	2000      	movs	r0, #0
 8010a9e:	f7ef fbbf 	bl	8000220 <__aeabi_dsub>
 8010aa2:	4622      	mov	r2, r4
 8010aa4:	4680      	mov	r8, r0
 8010aa6:	4689      	mov	r9, r1
 8010aa8:	462b      	mov	r3, r5
 8010aaa:	4650      	mov	r0, sl
 8010aac:	4659      	mov	r1, fp
 8010aae:	f7ef fbb7 	bl	8000220 <__aeabi_dsub>
 8010ab2:	4632      	mov	r2, r6
 8010ab4:	463b      	mov	r3, r7
 8010ab6:	f7ef fbb3 	bl	8000220 <__aeabi_dsub>
 8010aba:	4602      	mov	r2, r0
 8010abc:	460b      	mov	r3, r1
 8010abe:	4640      	mov	r0, r8
 8010ac0:	4649      	mov	r1, r9
 8010ac2:	e7da      	b.n	8010a7a <__kernel_cos+0xea>
 8010ac4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8010b00 <__kernel_cos+0x170>
 8010ac8:	e7db      	b.n	8010a82 <__kernel_cos+0xf2>
 8010aca:	bf00      	nop
 8010acc:	f3af 8000 	nop.w
 8010ad0:	be8838d4 	.word	0xbe8838d4
 8010ad4:	bda8fae9 	.word	0xbda8fae9
 8010ad8:	bdb4b1c4 	.word	0xbdb4b1c4
 8010adc:	3e21ee9e 	.word	0x3e21ee9e
 8010ae0:	809c52ad 	.word	0x809c52ad
 8010ae4:	3e927e4f 	.word	0x3e927e4f
 8010ae8:	19cb1590 	.word	0x19cb1590
 8010aec:	3efa01a0 	.word	0x3efa01a0
 8010af0:	16c15177 	.word	0x16c15177
 8010af4:	3f56c16c 	.word	0x3f56c16c
 8010af8:	5555554c 	.word	0x5555554c
 8010afc:	3fa55555 	.word	0x3fa55555
 8010b00:	00000000 	.word	0x00000000
 8010b04:	3ff00000 	.word	0x3ff00000
 8010b08:	3fe00000 	.word	0x3fe00000
 8010b0c:	3fd33332 	.word	0x3fd33332
 8010b10:	3ff00000 	.word	0x3ff00000
 8010b14:	3fe90000 	.word	0x3fe90000
 8010b18:	3fd20000 	.word	0x3fd20000
 8010b1c:	00000000 	.word	0x00000000

08010b20 <__kernel_sin>:
 8010b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b24:	ec55 4b10 	vmov	r4, r5, d0
 8010b28:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010b2c:	b085      	sub	sp, #20
 8010b2e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8010b32:	ed8d 1b02 	vstr	d1, [sp, #8]
 8010b36:	4680      	mov	r8, r0
 8010b38:	d205      	bcs.n	8010b46 <__kernel_sin+0x26>
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	4629      	mov	r1, r5
 8010b3e:	f7ef ffc1 	bl	8000ac4 <__aeabi_d2iz>
 8010b42:	2800      	cmp	r0, #0
 8010b44:	d052      	beq.n	8010bec <__kernel_sin+0xcc>
 8010b46:	4622      	mov	r2, r4
 8010b48:	462b      	mov	r3, r5
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	4629      	mov	r1, r5
 8010b4e:	f7ef fd1f 	bl	8000590 <__aeabi_dmul>
 8010b52:	4682      	mov	sl, r0
 8010b54:	468b      	mov	fp, r1
 8010b56:	4602      	mov	r2, r0
 8010b58:	460b      	mov	r3, r1
 8010b5a:	4620      	mov	r0, r4
 8010b5c:	4629      	mov	r1, r5
 8010b5e:	f7ef fd17 	bl	8000590 <__aeabi_dmul>
 8010b62:	a342      	add	r3, pc, #264	@ (adr r3, 8010c6c <__kernel_sin+0x14c>)
 8010b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b68:	e9cd 0100 	strd	r0, r1, [sp]
 8010b6c:	4650      	mov	r0, sl
 8010b6e:	4659      	mov	r1, fp
 8010b70:	f7ef fd0e 	bl	8000590 <__aeabi_dmul>
 8010b74:	a33f      	add	r3, pc, #252	@ (adr r3, 8010c74 <__kernel_sin+0x154>)
 8010b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b7a:	f7ef fb51 	bl	8000220 <__aeabi_dsub>
 8010b7e:	4652      	mov	r2, sl
 8010b80:	465b      	mov	r3, fp
 8010b82:	f7ef fd05 	bl	8000590 <__aeabi_dmul>
 8010b86:	a33d      	add	r3, pc, #244	@ (adr r3, 8010c7c <__kernel_sin+0x15c>)
 8010b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8c:	f7ef fb4a 	bl	8000224 <__adddf3>
 8010b90:	4652      	mov	r2, sl
 8010b92:	465b      	mov	r3, fp
 8010b94:	f7ef fcfc 	bl	8000590 <__aeabi_dmul>
 8010b98:	a33a      	add	r3, pc, #232	@ (adr r3, 8010c84 <__kernel_sin+0x164>)
 8010b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b9e:	f7ef fb3f 	bl	8000220 <__aeabi_dsub>
 8010ba2:	4652      	mov	r2, sl
 8010ba4:	465b      	mov	r3, fp
 8010ba6:	f7ef fcf3 	bl	8000590 <__aeabi_dmul>
 8010baa:	a338      	add	r3, pc, #224	@ (adr r3, 8010c8c <__kernel_sin+0x16c>)
 8010bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb0:	f7ef fb38 	bl	8000224 <__adddf3>
 8010bb4:	4606      	mov	r6, r0
 8010bb6:	460f      	mov	r7, r1
 8010bb8:	f1b8 0f00 	cmp.w	r8, #0
 8010bbc:	d11b      	bne.n	8010bf6 <__kernel_sin+0xd6>
 8010bbe:	4602      	mov	r2, r0
 8010bc0:	460b      	mov	r3, r1
 8010bc2:	4650      	mov	r0, sl
 8010bc4:	4659      	mov	r1, fp
 8010bc6:	f7ef fce3 	bl	8000590 <__aeabi_dmul>
 8010bca:	a325      	add	r3, pc, #148	@ (adr r3, 8010c60 <__kernel_sin+0x140>)
 8010bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd0:	f7ef fb26 	bl	8000220 <__aeabi_dsub>
 8010bd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bd8:	f7ef fcda 	bl	8000590 <__aeabi_dmul>
 8010bdc:	4602      	mov	r2, r0
 8010bde:	460b      	mov	r3, r1
 8010be0:	4620      	mov	r0, r4
 8010be2:	4629      	mov	r1, r5
 8010be4:	f7ef fb1e 	bl	8000224 <__adddf3>
 8010be8:	4604      	mov	r4, r0
 8010bea:	460d      	mov	r5, r1
 8010bec:	ec45 4b10 	vmov	d0, r4, r5
 8010bf0:	b005      	add	sp, #20
 8010bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8010c68 <__kernel_sin+0x148>)
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	f7ef fcc7 	bl	8000590 <__aeabi_dmul>
 8010c02:	4632      	mov	r2, r6
 8010c04:	4680      	mov	r8, r0
 8010c06:	4689      	mov	r9, r1
 8010c08:	463b      	mov	r3, r7
 8010c0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c0e:	f7ef fcbf 	bl	8000590 <__aeabi_dmul>
 8010c12:	4602      	mov	r2, r0
 8010c14:	460b      	mov	r3, r1
 8010c16:	4640      	mov	r0, r8
 8010c18:	4649      	mov	r1, r9
 8010c1a:	f7ef fb01 	bl	8000220 <__aeabi_dsub>
 8010c1e:	4652      	mov	r2, sl
 8010c20:	465b      	mov	r3, fp
 8010c22:	f7ef fcb5 	bl	8000590 <__aeabi_dmul>
 8010c26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010c2a:	f7ef faf9 	bl	8000220 <__aeabi_dsub>
 8010c2e:	a30c      	add	r3, pc, #48	@ (adr r3, 8010c60 <__kernel_sin+0x140>)
 8010c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c34:	4606      	mov	r6, r0
 8010c36:	460f      	mov	r7, r1
 8010c38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c3c:	f7ef fca8 	bl	8000590 <__aeabi_dmul>
 8010c40:	4602      	mov	r2, r0
 8010c42:	460b      	mov	r3, r1
 8010c44:	4630      	mov	r0, r6
 8010c46:	4639      	mov	r1, r7
 8010c48:	f7ef faec 	bl	8000224 <__adddf3>
 8010c4c:	4602      	mov	r2, r0
 8010c4e:	460b      	mov	r3, r1
 8010c50:	4620      	mov	r0, r4
 8010c52:	4629      	mov	r1, r5
 8010c54:	f7ef fae4 	bl	8000220 <__aeabi_dsub>
 8010c58:	e7c6      	b.n	8010be8 <__kernel_sin+0xc8>
 8010c5a:	bf00      	nop
 8010c5c:	f3af 8000 	nop.w
 8010c60:	55555549 	.word	0x55555549
 8010c64:	3fc55555 	.word	0x3fc55555
 8010c68:	3fe00000 	.word	0x3fe00000
 8010c6c:	5acfd57c 	.word	0x5acfd57c
 8010c70:	3de5d93a 	.word	0x3de5d93a
 8010c74:	8a2b9ceb 	.word	0x8a2b9ceb
 8010c78:	3e5ae5e6 	.word	0x3e5ae5e6
 8010c7c:	57b1fe7d 	.word	0x57b1fe7d
 8010c80:	3ec71de3 	.word	0x3ec71de3
 8010c84:	19c161d5 	.word	0x19c161d5
 8010c88:	3f2a01a0 	.word	0x3f2a01a0
 8010c8c:	1110f8a6 	.word	0x1110f8a6
 8010c90:	3f811111 	.word	0x3f811111
 8010c94:	00000000 	.word	0x00000000

08010c98 <__ieee754_rem_pio2>:
 8010c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c9c:	ec57 6b10 	vmov	r6, r7, d0
 8010ca0:	4bc5      	ldr	r3, [pc, #788]	@ (8010fb8 <__ieee754_rem_pio2+0x320>)
 8010ca2:	b08d      	sub	sp, #52	@ 0x34
 8010ca4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010ca8:	4598      	cmp	r8, r3
 8010caa:	4604      	mov	r4, r0
 8010cac:	9704      	str	r7, [sp, #16]
 8010cae:	d807      	bhi.n	8010cc0 <__ieee754_rem_pio2+0x28>
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	ed80 0b00 	vstr	d0, [r0]
 8010cb8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010cbc:	2500      	movs	r5, #0
 8010cbe:	e028      	b.n	8010d12 <__ieee754_rem_pio2+0x7a>
 8010cc0:	4bbe      	ldr	r3, [pc, #760]	@ (8010fbc <__ieee754_rem_pio2+0x324>)
 8010cc2:	4598      	cmp	r8, r3
 8010cc4:	d878      	bhi.n	8010db8 <__ieee754_rem_pio2+0x120>
 8010cc6:	9b04      	ldr	r3, [sp, #16]
 8010cc8:	4dbd      	ldr	r5, [pc, #756]	@ (8010fc0 <__ieee754_rem_pio2+0x328>)
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	4630      	mov	r0, r6
 8010cce:	a3ac      	add	r3, pc, #688	@ (adr r3, 8010f80 <__ieee754_rem_pio2+0x2e8>)
 8010cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd4:	4639      	mov	r1, r7
 8010cd6:	dd38      	ble.n	8010d4a <__ieee754_rem_pio2+0xb2>
 8010cd8:	f7ef faa2 	bl	8000220 <__aeabi_dsub>
 8010cdc:	45a8      	cmp	r8, r5
 8010cde:	4606      	mov	r6, r0
 8010ce0:	460f      	mov	r7, r1
 8010ce2:	d01a      	beq.n	8010d1a <__ieee754_rem_pio2+0x82>
 8010ce4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8010f88 <__ieee754_rem_pio2+0x2f0>)
 8010ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cea:	f7ef fa99 	bl	8000220 <__aeabi_dsub>
 8010cee:	4602      	mov	r2, r0
 8010cf0:	460b      	mov	r3, r1
 8010cf2:	4680      	mov	r8, r0
 8010cf4:	4689      	mov	r9, r1
 8010cf6:	4630      	mov	r0, r6
 8010cf8:	4639      	mov	r1, r7
 8010cfa:	f7ef fa91 	bl	8000220 <__aeabi_dsub>
 8010cfe:	a3a2      	add	r3, pc, #648	@ (adr r3, 8010f88 <__ieee754_rem_pio2+0x2f0>)
 8010d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d04:	f7ef fa8c 	bl	8000220 <__aeabi_dsub>
 8010d08:	e9c4 8900 	strd	r8, r9, [r4]
 8010d0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010d10:	2501      	movs	r5, #1
 8010d12:	4628      	mov	r0, r5
 8010d14:	b00d      	add	sp, #52	@ 0x34
 8010d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d1a:	a39d      	add	r3, pc, #628	@ (adr r3, 8010f90 <__ieee754_rem_pio2+0x2f8>)
 8010d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d20:	f7ef fa7e 	bl	8000220 <__aeabi_dsub>
 8010d24:	a39c      	add	r3, pc, #624	@ (adr r3, 8010f98 <__ieee754_rem_pio2+0x300>)
 8010d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d2a:	4606      	mov	r6, r0
 8010d2c:	460f      	mov	r7, r1
 8010d2e:	f7ef fa77 	bl	8000220 <__aeabi_dsub>
 8010d32:	4602      	mov	r2, r0
 8010d34:	460b      	mov	r3, r1
 8010d36:	4680      	mov	r8, r0
 8010d38:	4689      	mov	r9, r1
 8010d3a:	4630      	mov	r0, r6
 8010d3c:	4639      	mov	r1, r7
 8010d3e:	f7ef fa6f 	bl	8000220 <__aeabi_dsub>
 8010d42:	a395      	add	r3, pc, #596	@ (adr r3, 8010f98 <__ieee754_rem_pio2+0x300>)
 8010d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d48:	e7dc      	b.n	8010d04 <__ieee754_rem_pio2+0x6c>
 8010d4a:	f7ef fa6b 	bl	8000224 <__adddf3>
 8010d4e:	45a8      	cmp	r8, r5
 8010d50:	4606      	mov	r6, r0
 8010d52:	460f      	mov	r7, r1
 8010d54:	d018      	beq.n	8010d88 <__ieee754_rem_pio2+0xf0>
 8010d56:	a38c      	add	r3, pc, #560	@ (adr r3, 8010f88 <__ieee754_rem_pio2+0x2f0>)
 8010d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d5c:	f7ef fa62 	bl	8000224 <__adddf3>
 8010d60:	4602      	mov	r2, r0
 8010d62:	460b      	mov	r3, r1
 8010d64:	4680      	mov	r8, r0
 8010d66:	4689      	mov	r9, r1
 8010d68:	4630      	mov	r0, r6
 8010d6a:	4639      	mov	r1, r7
 8010d6c:	f7ef fa58 	bl	8000220 <__aeabi_dsub>
 8010d70:	a385      	add	r3, pc, #532	@ (adr r3, 8010f88 <__ieee754_rem_pio2+0x2f0>)
 8010d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d76:	f7ef fa55 	bl	8000224 <__adddf3>
 8010d7a:	f04f 35ff 	mov.w	r5, #4294967295
 8010d7e:	e9c4 8900 	strd	r8, r9, [r4]
 8010d82:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010d86:	e7c4      	b.n	8010d12 <__ieee754_rem_pio2+0x7a>
 8010d88:	a381      	add	r3, pc, #516	@ (adr r3, 8010f90 <__ieee754_rem_pio2+0x2f8>)
 8010d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d8e:	f7ef fa49 	bl	8000224 <__adddf3>
 8010d92:	a381      	add	r3, pc, #516	@ (adr r3, 8010f98 <__ieee754_rem_pio2+0x300>)
 8010d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d98:	4606      	mov	r6, r0
 8010d9a:	460f      	mov	r7, r1
 8010d9c:	f7ef fa42 	bl	8000224 <__adddf3>
 8010da0:	4602      	mov	r2, r0
 8010da2:	460b      	mov	r3, r1
 8010da4:	4680      	mov	r8, r0
 8010da6:	4689      	mov	r9, r1
 8010da8:	4630      	mov	r0, r6
 8010daa:	4639      	mov	r1, r7
 8010dac:	f7ef fa38 	bl	8000220 <__aeabi_dsub>
 8010db0:	a379      	add	r3, pc, #484	@ (adr r3, 8010f98 <__ieee754_rem_pio2+0x300>)
 8010db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db6:	e7de      	b.n	8010d76 <__ieee754_rem_pio2+0xde>
 8010db8:	4b82      	ldr	r3, [pc, #520]	@ (8010fc4 <__ieee754_rem_pio2+0x32c>)
 8010dba:	4598      	cmp	r8, r3
 8010dbc:	f200 80d1 	bhi.w	8010f62 <__ieee754_rem_pio2+0x2ca>
 8010dc0:	f000 f966 	bl	8011090 <fabs>
 8010dc4:	ec57 6b10 	vmov	r6, r7, d0
 8010dc8:	a375      	add	r3, pc, #468	@ (adr r3, 8010fa0 <__ieee754_rem_pio2+0x308>)
 8010dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dce:	4630      	mov	r0, r6
 8010dd0:	4639      	mov	r1, r7
 8010dd2:	f7ef fbdd 	bl	8000590 <__aeabi_dmul>
 8010dd6:	4b7c      	ldr	r3, [pc, #496]	@ (8010fc8 <__ieee754_rem_pio2+0x330>)
 8010dd8:	2200      	movs	r2, #0
 8010dda:	f7ef fa23 	bl	8000224 <__adddf3>
 8010dde:	f7ef fe71 	bl	8000ac4 <__aeabi_d2iz>
 8010de2:	4605      	mov	r5, r0
 8010de4:	f7ef fb6a 	bl	80004bc <__aeabi_i2d>
 8010de8:	4602      	mov	r2, r0
 8010dea:	460b      	mov	r3, r1
 8010dec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010df0:	a363      	add	r3, pc, #396	@ (adr r3, 8010f80 <__ieee754_rem_pio2+0x2e8>)
 8010df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df6:	f7ef fbcb 	bl	8000590 <__aeabi_dmul>
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	460b      	mov	r3, r1
 8010dfe:	4630      	mov	r0, r6
 8010e00:	4639      	mov	r1, r7
 8010e02:	f7ef fa0d 	bl	8000220 <__aeabi_dsub>
 8010e06:	a360      	add	r3, pc, #384	@ (adr r3, 8010f88 <__ieee754_rem_pio2+0x2f0>)
 8010e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0c:	4682      	mov	sl, r0
 8010e0e:	468b      	mov	fp, r1
 8010e10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e14:	f7ef fbbc 	bl	8000590 <__aeabi_dmul>
 8010e18:	2d1f      	cmp	r5, #31
 8010e1a:	4606      	mov	r6, r0
 8010e1c:	460f      	mov	r7, r1
 8010e1e:	dc0c      	bgt.n	8010e3a <__ieee754_rem_pio2+0x1a2>
 8010e20:	4b6a      	ldr	r3, [pc, #424]	@ (8010fcc <__ieee754_rem_pio2+0x334>)
 8010e22:	1e6a      	subs	r2, r5, #1
 8010e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e28:	4543      	cmp	r3, r8
 8010e2a:	d006      	beq.n	8010e3a <__ieee754_rem_pio2+0x1a2>
 8010e2c:	4632      	mov	r2, r6
 8010e2e:	463b      	mov	r3, r7
 8010e30:	4650      	mov	r0, sl
 8010e32:	4659      	mov	r1, fp
 8010e34:	f7ef f9f4 	bl	8000220 <__aeabi_dsub>
 8010e38:	e00e      	b.n	8010e58 <__ieee754_rem_pio2+0x1c0>
 8010e3a:	463b      	mov	r3, r7
 8010e3c:	4632      	mov	r2, r6
 8010e3e:	4650      	mov	r0, sl
 8010e40:	4659      	mov	r1, fp
 8010e42:	f7ef f9ed 	bl	8000220 <__aeabi_dsub>
 8010e46:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010e4a:	9305      	str	r3, [sp, #20]
 8010e4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010e50:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010e54:	2b10      	cmp	r3, #16
 8010e56:	dc02      	bgt.n	8010e5e <__ieee754_rem_pio2+0x1c6>
 8010e58:	e9c4 0100 	strd	r0, r1, [r4]
 8010e5c:	e039      	b.n	8010ed2 <__ieee754_rem_pio2+0x23a>
 8010e5e:	a34c      	add	r3, pc, #304	@ (adr r3, 8010f90 <__ieee754_rem_pio2+0x2f8>)
 8010e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e68:	f7ef fb92 	bl	8000590 <__aeabi_dmul>
 8010e6c:	4606      	mov	r6, r0
 8010e6e:	460f      	mov	r7, r1
 8010e70:	4602      	mov	r2, r0
 8010e72:	460b      	mov	r3, r1
 8010e74:	4650      	mov	r0, sl
 8010e76:	4659      	mov	r1, fp
 8010e78:	f7ef f9d2 	bl	8000220 <__aeabi_dsub>
 8010e7c:	4602      	mov	r2, r0
 8010e7e:	460b      	mov	r3, r1
 8010e80:	4680      	mov	r8, r0
 8010e82:	4689      	mov	r9, r1
 8010e84:	4650      	mov	r0, sl
 8010e86:	4659      	mov	r1, fp
 8010e88:	f7ef f9ca 	bl	8000220 <__aeabi_dsub>
 8010e8c:	4632      	mov	r2, r6
 8010e8e:	463b      	mov	r3, r7
 8010e90:	f7ef f9c6 	bl	8000220 <__aeabi_dsub>
 8010e94:	a340      	add	r3, pc, #256	@ (adr r3, 8010f98 <__ieee754_rem_pio2+0x300>)
 8010e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e9a:	4606      	mov	r6, r0
 8010e9c:	460f      	mov	r7, r1
 8010e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ea2:	f7ef fb75 	bl	8000590 <__aeabi_dmul>
 8010ea6:	4632      	mov	r2, r6
 8010ea8:	463b      	mov	r3, r7
 8010eaa:	f7ef f9b9 	bl	8000220 <__aeabi_dsub>
 8010eae:	4602      	mov	r2, r0
 8010eb0:	460b      	mov	r3, r1
 8010eb2:	4606      	mov	r6, r0
 8010eb4:	460f      	mov	r7, r1
 8010eb6:	4640      	mov	r0, r8
 8010eb8:	4649      	mov	r1, r9
 8010eba:	f7ef f9b1 	bl	8000220 <__aeabi_dsub>
 8010ebe:	9a05      	ldr	r2, [sp, #20]
 8010ec0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010ec4:	1ad3      	subs	r3, r2, r3
 8010ec6:	2b31      	cmp	r3, #49	@ 0x31
 8010ec8:	dc20      	bgt.n	8010f0c <__ieee754_rem_pio2+0x274>
 8010eca:	e9c4 0100 	strd	r0, r1, [r4]
 8010ece:	46c2      	mov	sl, r8
 8010ed0:	46cb      	mov	fp, r9
 8010ed2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010ed6:	4650      	mov	r0, sl
 8010ed8:	4642      	mov	r2, r8
 8010eda:	464b      	mov	r3, r9
 8010edc:	4659      	mov	r1, fp
 8010ede:	f7ef f99f 	bl	8000220 <__aeabi_dsub>
 8010ee2:	463b      	mov	r3, r7
 8010ee4:	4632      	mov	r2, r6
 8010ee6:	f7ef f99b 	bl	8000220 <__aeabi_dsub>
 8010eea:	9b04      	ldr	r3, [sp, #16]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010ef2:	f6bf af0e 	bge.w	8010d12 <__ieee754_rem_pio2+0x7a>
 8010ef6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8010efa:	6063      	str	r3, [r4, #4]
 8010efc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010f00:	f8c4 8000 	str.w	r8, [r4]
 8010f04:	60a0      	str	r0, [r4, #8]
 8010f06:	60e3      	str	r3, [r4, #12]
 8010f08:	426d      	negs	r5, r5
 8010f0a:	e702      	b.n	8010d12 <__ieee754_rem_pio2+0x7a>
 8010f0c:	a326      	add	r3, pc, #152	@ (adr r3, 8010fa8 <__ieee754_rem_pio2+0x310>)
 8010f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f16:	f7ef fb3b 	bl	8000590 <__aeabi_dmul>
 8010f1a:	4606      	mov	r6, r0
 8010f1c:	460f      	mov	r7, r1
 8010f1e:	4602      	mov	r2, r0
 8010f20:	460b      	mov	r3, r1
 8010f22:	4640      	mov	r0, r8
 8010f24:	4649      	mov	r1, r9
 8010f26:	f7ef f97b 	bl	8000220 <__aeabi_dsub>
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	460b      	mov	r3, r1
 8010f2e:	4682      	mov	sl, r0
 8010f30:	468b      	mov	fp, r1
 8010f32:	4640      	mov	r0, r8
 8010f34:	4649      	mov	r1, r9
 8010f36:	f7ef f973 	bl	8000220 <__aeabi_dsub>
 8010f3a:	4632      	mov	r2, r6
 8010f3c:	463b      	mov	r3, r7
 8010f3e:	f7ef f96f 	bl	8000220 <__aeabi_dsub>
 8010f42:	a31b      	add	r3, pc, #108	@ (adr r3, 8010fb0 <__ieee754_rem_pio2+0x318>)
 8010f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f48:	4606      	mov	r6, r0
 8010f4a:	460f      	mov	r7, r1
 8010f4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f50:	f7ef fb1e 	bl	8000590 <__aeabi_dmul>
 8010f54:	4632      	mov	r2, r6
 8010f56:	463b      	mov	r3, r7
 8010f58:	f7ef f962 	bl	8000220 <__aeabi_dsub>
 8010f5c:	4606      	mov	r6, r0
 8010f5e:	460f      	mov	r7, r1
 8010f60:	e764      	b.n	8010e2c <__ieee754_rem_pio2+0x194>
 8010f62:	4b1b      	ldr	r3, [pc, #108]	@ (8010fd0 <__ieee754_rem_pio2+0x338>)
 8010f64:	4598      	cmp	r8, r3
 8010f66:	d935      	bls.n	8010fd4 <__ieee754_rem_pio2+0x33c>
 8010f68:	4632      	mov	r2, r6
 8010f6a:	463b      	mov	r3, r7
 8010f6c:	4630      	mov	r0, r6
 8010f6e:	4639      	mov	r1, r7
 8010f70:	f7ef f956 	bl	8000220 <__aeabi_dsub>
 8010f74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010f78:	e9c4 0100 	strd	r0, r1, [r4]
 8010f7c:	e69e      	b.n	8010cbc <__ieee754_rem_pio2+0x24>
 8010f7e:	bf00      	nop
 8010f80:	54400000 	.word	0x54400000
 8010f84:	3ff921fb 	.word	0x3ff921fb
 8010f88:	1a626331 	.word	0x1a626331
 8010f8c:	3dd0b461 	.word	0x3dd0b461
 8010f90:	1a600000 	.word	0x1a600000
 8010f94:	3dd0b461 	.word	0x3dd0b461
 8010f98:	2e037073 	.word	0x2e037073
 8010f9c:	3ba3198a 	.word	0x3ba3198a
 8010fa0:	6dc9c883 	.word	0x6dc9c883
 8010fa4:	3fe45f30 	.word	0x3fe45f30
 8010fa8:	2e000000 	.word	0x2e000000
 8010fac:	3ba3198a 	.word	0x3ba3198a
 8010fb0:	252049c1 	.word	0x252049c1
 8010fb4:	397b839a 	.word	0x397b839a
 8010fb8:	3fe921fb 	.word	0x3fe921fb
 8010fbc:	4002d97b 	.word	0x4002d97b
 8010fc0:	3ff921fb 	.word	0x3ff921fb
 8010fc4:	413921fb 	.word	0x413921fb
 8010fc8:	3fe00000 	.word	0x3fe00000
 8010fcc:	080124d0 	.word	0x080124d0
 8010fd0:	7fefffff 	.word	0x7fefffff
 8010fd4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010fd8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8010fdc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	460f      	mov	r7, r1
 8010fe4:	f7ef fd6e 	bl	8000ac4 <__aeabi_d2iz>
 8010fe8:	f7ef fa68 	bl	80004bc <__aeabi_i2d>
 8010fec:	4602      	mov	r2, r0
 8010fee:	460b      	mov	r3, r1
 8010ff0:	4630      	mov	r0, r6
 8010ff2:	4639      	mov	r1, r7
 8010ff4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010ff8:	f7ef f912 	bl	8000220 <__aeabi_dsub>
 8010ffc:	4b22      	ldr	r3, [pc, #136]	@ (8011088 <__ieee754_rem_pio2+0x3f0>)
 8010ffe:	2200      	movs	r2, #0
 8011000:	f7ef fac6 	bl	8000590 <__aeabi_dmul>
 8011004:	460f      	mov	r7, r1
 8011006:	4606      	mov	r6, r0
 8011008:	f7ef fd5c 	bl	8000ac4 <__aeabi_d2iz>
 801100c:	f7ef fa56 	bl	80004bc <__aeabi_i2d>
 8011010:	4602      	mov	r2, r0
 8011012:	460b      	mov	r3, r1
 8011014:	4630      	mov	r0, r6
 8011016:	4639      	mov	r1, r7
 8011018:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801101c:	f7ef f900 	bl	8000220 <__aeabi_dsub>
 8011020:	4b19      	ldr	r3, [pc, #100]	@ (8011088 <__ieee754_rem_pio2+0x3f0>)
 8011022:	2200      	movs	r2, #0
 8011024:	f7ef fab4 	bl	8000590 <__aeabi_dmul>
 8011028:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801102c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8011030:	f04f 0803 	mov.w	r8, #3
 8011034:	2600      	movs	r6, #0
 8011036:	2700      	movs	r7, #0
 8011038:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801103c:	4632      	mov	r2, r6
 801103e:	463b      	mov	r3, r7
 8011040:	46c2      	mov	sl, r8
 8011042:	f108 38ff 	add.w	r8, r8, #4294967295
 8011046:	f7ef fd0b 	bl	8000a60 <__aeabi_dcmpeq>
 801104a:	2800      	cmp	r0, #0
 801104c:	d1f4      	bne.n	8011038 <__ieee754_rem_pio2+0x3a0>
 801104e:	4b0f      	ldr	r3, [pc, #60]	@ (801108c <__ieee754_rem_pio2+0x3f4>)
 8011050:	9301      	str	r3, [sp, #4]
 8011052:	2302      	movs	r3, #2
 8011054:	9300      	str	r3, [sp, #0]
 8011056:	462a      	mov	r2, r5
 8011058:	4653      	mov	r3, sl
 801105a:	4621      	mov	r1, r4
 801105c:	a806      	add	r0, sp, #24
 801105e:	f000 fb5b 	bl	8011718 <__kernel_rem_pio2>
 8011062:	9b04      	ldr	r3, [sp, #16]
 8011064:	2b00      	cmp	r3, #0
 8011066:	4605      	mov	r5, r0
 8011068:	f6bf ae53 	bge.w	8010d12 <__ieee754_rem_pio2+0x7a>
 801106c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8011070:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011074:	e9c4 2300 	strd	r2, r3, [r4]
 8011078:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801107c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011080:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8011084:	e740      	b.n	8010f08 <__ieee754_rem_pio2+0x270>
 8011086:	bf00      	nop
 8011088:	41700000 	.word	0x41700000
 801108c:	08012550 	.word	0x08012550

08011090 <fabs>:
 8011090:	ec51 0b10 	vmov	r0, r1, d0
 8011094:	4602      	mov	r2, r0
 8011096:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801109a:	ec43 2b10 	vmov	d0, r2, r3
 801109e:	4770      	bx	lr

080110a0 <__kernel_cosf>:
 80110a0:	ee10 3a10 	vmov	r3, s0
 80110a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80110a8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80110ac:	eef0 6a40 	vmov.f32	s13, s0
 80110b0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80110b4:	d204      	bcs.n	80110c0 <__kernel_cosf+0x20>
 80110b6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80110ba:	ee17 2a90 	vmov	r2, s15
 80110be:	b342      	cbz	r2, 8011112 <__kernel_cosf+0x72>
 80110c0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80110c4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8011130 <__kernel_cosf+0x90>
 80110c8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8011134 <__kernel_cosf+0x94>
 80110cc:	4a1a      	ldr	r2, [pc, #104]	@ (8011138 <__kernel_cosf+0x98>)
 80110ce:	eea7 6a27 	vfma.f32	s12, s14, s15
 80110d2:	4293      	cmp	r3, r2
 80110d4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801113c <__kernel_cosf+0x9c>
 80110d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80110dc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8011140 <__kernel_cosf+0xa0>
 80110e0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80110e4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8011144 <__kernel_cosf+0xa4>
 80110e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80110ec:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8011148 <__kernel_cosf+0xa8>
 80110f0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80110f4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80110f8:	ee26 6a07 	vmul.f32	s12, s12, s14
 80110fc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011100:	eee7 0a06 	vfma.f32	s1, s14, s12
 8011104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011108:	d804      	bhi.n	8011114 <__kernel_cosf+0x74>
 801110a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801110e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011112:	4770      	bx	lr
 8011114:	4a0d      	ldr	r2, [pc, #52]	@ (801114c <__kernel_cosf+0xac>)
 8011116:	4293      	cmp	r3, r2
 8011118:	bf9a      	itte	ls
 801111a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801111e:	ee07 3a10 	vmovls	s14, r3
 8011122:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8011126:	ee30 0a47 	vsub.f32	s0, s0, s14
 801112a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801112e:	e7ec      	b.n	801110a <__kernel_cosf+0x6a>
 8011130:	ad47d74e 	.word	0xad47d74e
 8011134:	310f74f6 	.word	0x310f74f6
 8011138:	3e999999 	.word	0x3e999999
 801113c:	b493f27c 	.word	0xb493f27c
 8011140:	37d00d01 	.word	0x37d00d01
 8011144:	bab60b61 	.word	0xbab60b61
 8011148:	3d2aaaab 	.word	0x3d2aaaab
 801114c:	3f480000 	.word	0x3f480000

08011150 <__kernel_sinf>:
 8011150:	ee10 3a10 	vmov	r3, s0
 8011154:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011158:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801115c:	d204      	bcs.n	8011168 <__kernel_sinf+0x18>
 801115e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011162:	ee17 3a90 	vmov	r3, s15
 8011166:	b35b      	cbz	r3, 80111c0 <__kernel_sinf+0x70>
 8011168:	ee20 7a00 	vmul.f32	s14, s0, s0
 801116c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80111c4 <__kernel_sinf+0x74>
 8011170:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80111c8 <__kernel_sinf+0x78>
 8011174:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011178:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80111cc <__kernel_sinf+0x7c>
 801117c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011180:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80111d0 <__kernel_sinf+0x80>
 8011184:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011188:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80111d4 <__kernel_sinf+0x84>
 801118c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8011190:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011194:	b930      	cbnz	r0, 80111a4 <__kernel_sinf+0x54>
 8011196:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80111d8 <__kernel_sinf+0x88>
 801119a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801119e:	eea6 0a26 	vfma.f32	s0, s12, s13
 80111a2:	4770      	bx	lr
 80111a4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80111a8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80111ac:	eee0 7a86 	vfma.f32	s15, s1, s12
 80111b0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80111b4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80111dc <__kernel_sinf+0x8c>
 80111b8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80111bc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80111c0:	4770      	bx	lr
 80111c2:	bf00      	nop
 80111c4:	2f2ec9d3 	.word	0x2f2ec9d3
 80111c8:	b2d72f34 	.word	0xb2d72f34
 80111cc:	3638ef1b 	.word	0x3638ef1b
 80111d0:	b9500d01 	.word	0xb9500d01
 80111d4:	3c088889 	.word	0x3c088889
 80111d8:	be2aaaab 	.word	0xbe2aaaab
 80111dc:	3e2aaaab 	.word	0x3e2aaaab

080111e0 <__ieee754_fmodf>:
 80111e0:	b570      	push	{r4, r5, r6, lr}
 80111e2:	ee10 6a90 	vmov	r6, s1
 80111e6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80111ea:	1e5a      	subs	r2, r3, #1
 80111ec:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80111f0:	d206      	bcs.n	8011200 <__ieee754_fmodf+0x20>
 80111f2:	ee10 4a10 	vmov	r4, s0
 80111f6:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 80111fa:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80111fe:	d304      	bcc.n	801120a <__ieee754_fmodf+0x2a>
 8011200:	ee60 0a20 	vmul.f32	s1, s0, s1
 8011204:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8011208:	bd70      	pop	{r4, r5, r6, pc}
 801120a:	4299      	cmp	r1, r3
 801120c:	dbfc      	blt.n	8011208 <__ieee754_fmodf+0x28>
 801120e:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 8011212:	d105      	bne.n	8011220 <__ieee754_fmodf+0x40>
 8011214:	4b32      	ldr	r3, [pc, #200]	@ (80112e0 <__ieee754_fmodf+0x100>)
 8011216:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 801121a:	ed93 0a00 	vldr	s0, [r3]
 801121e:	e7f3      	b.n	8011208 <__ieee754_fmodf+0x28>
 8011220:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8011224:	d146      	bne.n	80112b4 <__ieee754_fmodf+0xd4>
 8011226:	020a      	lsls	r2, r1, #8
 8011228:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 801122c:	2a00      	cmp	r2, #0
 801122e:	dc3e      	bgt.n	80112ae <__ieee754_fmodf+0xce>
 8011230:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8011234:	bf01      	itttt	eq
 8011236:	021a      	lsleq	r2, r3, #8
 8011238:	fab2 f282 	clzeq	r2, r2
 801123c:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8011240:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 8011244:	bf16      	itet	ne
 8011246:	15da      	asrne	r2, r3, #23
 8011248:	3282      	addeq	r2, #130	@ 0x82
 801124a:	3a7f      	subne	r2, #127	@ 0x7f
 801124c:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8011250:	bfbb      	ittet	lt
 8011252:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8011256:	1a24      	sublt	r4, r4, r0
 8011258:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 801125c:	40a1      	lsllt	r1, r4
 801125e:	bfa8      	it	ge
 8011260:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 8011264:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8011268:	bfb5      	itete	lt
 801126a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 801126e:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 8011272:	1aa4      	sublt	r4, r4, r2
 8011274:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8011278:	bfb8      	it	lt
 801127a:	fa03 f404 	lsllt.w	r4, r3, r4
 801127e:	1a80      	subs	r0, r0, r2
 8011280:	1b0b      	subs	r3, r1, r4
 8011282:	b9d0      	cbnz	r0, 80112ba <__ieee754_fmodf+0xda>
 8011284:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8011288:	bf28      	it	cs
 801128a:	460b      	movcs	r3, r1
 801128c:	2b00      	cmp	r3, #0
 801128e:	d0c1      	beq.n	8011214 <__ieee754_fmodf+0x34>
 8011290:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011294:	db19      	blt.n	80112ca <__ieee754_fmodf+0xea>
 8011296:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 801129a:	db19      	blt.n	80112d0 <__ieee754_fmodf+0xf0>
 801129c:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80112a0:	327f      	adds	r2, #127	@ 0x7f
 80112a2:	432b      	orrs	r3, r5
 80112a4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80112a8:	ee00 3a10 	vmov	s0, r3
 80112ac:	e7ac      	b.n	8011208 <__ieee754_fmodf+0x28>
 80112ae:	3801      	subs	r0, #1
 80112b0:	0052      	lsls	r2, r2, #1
 80112b2:	e7bb      	b.n	801122c <__ieee754_fmodf+0x4c>
 80112b4:	15c8      	asrs	r0, r1, #23
 80112b6:	387f      	subs	r0, #127	@ 0x7f
 80112b8:	e7ba      	b.n	8011230 <__ieee754_fmodf+0x50>
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	da02      	bge.n	80112c4 <__ieee754_fmodf+0xe4>
 80112be:	0049      	lsls	r1, r1, #1
 80112c0:	3801      	subs	r0, #1
 80112c2:	e7dd      	b.n	8011280 <__ieee754_fmodf+0xa0>
 80112c4:	d0a6      	beq.n	8011214 <__ieee754_fmodf+0x34>
 80112c6:	0059      	lsls	r1, r3, #1
 80112c8:	e7fa      	b.n	80112c0 <__ieee754_fmodf+0xe0>
 80112ca:	005b      	lsls	r3, r3, #1
 80112cc:	3a01      	subs	r2, #1
 80112ce:	e7df      	b.n	8011290 <__ieee754_fmodf+0xb0>
 80112d0:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 80112d4:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80112d8:	3282      	adds	r2, #130	@ 0x82
 80112da:	4113      	asrs	r3, r2
 80112dc:	432b      	orrs	r3, r5
 80112de:	e7e3      	b.n	80112a8 <__ieee754_fmodf+0xc8>
 80112e0:	08012658 	.word	0x08012658

080112e4 <__ieee754_rem_pio2f>:
 80112e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112e6:	ee10 6a10 	vmov	r6, s0
 80112ea:	4b88      	ldr	r3, [pc, #544]	@ (801150c <__ieee754_rem_pio2f+0x228>)
 80112ec:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80112f0:	429d      	cmp	r5, r3
 80112f2:	b087      	sub	sp, #28
 80112f4:	4604      	mov	r4, r0
 80112f6:	d805      	bhi.n	8011304 <__ieee754_rem_pio2f+0x20>
 80112f8:	2300      	movs	r3, #0
 80112fa:	ed80 0a00 	vstr	s0, [r0]
 80112fe:	6043      	str	r3, [r0, #4]
 8011300:	2000      	movs	r0, #0
 8011302:	e022      	b.n	801134a <__ieee754_rem_pio2f+0x66>
 8011304:	4b82      	ldr	r3, [pc, #520]	@ (8011510 <__ieee754_rem_pio2f+0x22c>)
 8011306:	429d      	cmp	r5, r3
 8011308:	d83a      	bhi.n	8011380 <__ieee754_rem_pio2f+0x9c>
 801130a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801130e:	2e00      	cmp	r6, #0
 8011310:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8011514 <__ieee754_rem_pio2f+0x230>
 8011314:	4a80      	ldr	r2, [pc, #512]	@ (8011518 <__ieee754_rem_pio2f+0x234>)
 8011316:	f023 030f 	bic.w	r3, r3, #15
 801131a:	dd18      	ble.n	801134e <__ieee754_rem_pio2f+0x6a>
 801131c:	4293      	cmp	r3, r2
 801131e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8011322:	bf09      	itett	eq
 8011324:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801151c <__ieee754_rem_pio2f+0x238>
 8011328:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8011520 <__ieee754_rem_pio2f+0x23c>
 801132c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8011524 <__ieee754_rem_pio2f+0x240>
 8011330:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8011334:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8011338:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801133c:	ed80 7a00 	vstr	s14, [r0]
 8011340:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011344:	edc0 7a01 	vstr	s15, [r0, #4]
 8011348:	2001      	movs	r0, #1
 801134a:	b007      	add	sp, #28
 801134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801134e:	4293      	cmp	r3, r2
 8011350:	ee70 7a07 	vadd.f32	s15, s0, s14
 8011354:	bf09      	itett	eq
 8011356:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801151c <__ieee754_rem_pio2f+0x238>
 801135a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8011520 <__ieee754_rem_pio2f+0x23c>
 801135e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8011524 <__ieee754_rem_pio2f+0x240>
 8011362:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8011366:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801136a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801136e:	ed80 7a00 	vstr	s14, [r0]
 8011372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011376:	edc0 7a01 	vstr	s15, [r0, #4]
 801137a:	f04f 30ff 	mov.w	r0, #4294967295
 801137e:	e7e4      	b.n	801134a <__ieee754_rem_pio2f+0x66>
 8011380:	4b69      	ldr	r3, [pc, #420]	@ (8011528 <__ieee754_rem_pio2f+0x244>)
 8011382:	429d      	cmp	r5, r3
 8011384:	d873      	bhi.n	801146e <__ieee754_rem_pio2f+0x18a>
 8011386:	f000 f8dd 	bl	8011544 <fabsf>
 801138a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801152c <__ieee754_rem_pio2f+0x248>
 801138e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011392:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801139a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801139e:	ee17 0a90 	vmov	r0, s15
 80113a2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011514 <__ieee754_rem_pio2f+0x230>
 80113a6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80113aa:	281f      	cmp	r0, #31
 80113ac:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011520 <__ieee754_rem_pio2f+0x23c>
 80113b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113b4:	eeb1 6a47 	vneg.f32	s12, s14
 80113b8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80113bc:	ee16 1a90 	vmov	r1, s13
 80113c0:	dc09      	bgt.n	80113d6 <__ieee754_rem_pio2f+0xf2>
 80113c2:	4a5b      	ldr	r2, [pc, #364]	@ (8011530 <__ieee754_rem_pio2f+0x24c>)
 80113c4:	1e47      	subs	r7, r0, #1
 80113c6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80113ca:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80113ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80113d2:	4293      	cmp	r3, r2
 80113d4:	d107      	bne.n	80113e6 <__ieee754_rem_pio2f+0x102>
 80113d6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80113da:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80113de:	2a08      	cmp	r2, #8
 80113e0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80113e4:	dc14      	bgt.n	8011410 <__ieee754_rem_pio2f+0x12c>
 80113e6:	6021      	str	r1, [r4, #0]
 80113e8:	ed94 7a00 	vldr	s14, [r4]
 80113ec:	ee30 0a47 	vsub.f32	s0, s0, s14
 80113f0:	2e00      	cmp	r6, #0
 80113f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80113f6:	ed84 0a01 	vstr	s0, [r4, #4]
 80113fa:	daa6      	bge.n	801134a <__ieee754_rem_pio2f+0x66>
 80113fc:	eeb1 7a47 	vneg.f32	s14, s14
 8011400:	eeb1 0a40 	vneg.f32	s0, s0
 8011404:	ed84 7a00 	vstr	s14, [r4]
 8011408:	ed84 0a01 	vstr	s0, [r4, #4]
 801140c:	4240      	negs	r0, r0
 801140e:	e79c      	b.n	801134a <__ieee754_rem_pio2f+0x66>
 8011410:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801151c <__ieee754_rem_pio2f+0x238>
 8011414:	eef0 6a40 	vmov.f32	s13, s0
 8011418:	eee6 6a25 	vfma.f32	s13, s12, s11
 801141c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011420:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011424:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011524 <__ieee754_rem_pio2f+0x240>
 8011428:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801142c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011430:	ee15 2a90 	vmov	r2, s11
 8011434:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011438:	1a5b      	subs	r3, r3, r1
 801143a:	2b19      	cmp	r3, #25
 801143c:	dc04      	bgt.n	8011448 <__ieee754_rem_pio2f+0x164>
 801143e:	edc4 5a00 	vstr	s11, [r4]
 8011442:	eeb0 0a66 	vmov.f32	s0, s13
 8011446:	e7cf      	b.n	80113e8 <__ieee754_rem_pio2f+0x104>
 8011448:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8011534 <__ieee754_rem_pio2f+0x250>
 801144c:	eeb0 0a66 	vmov.f32	s0, s13
 8011450:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011454:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011458:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8011538 <__ieee754_rem_pio2f+0x254>
 801145c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011460:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011464:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011468:	ed84 7a00 	vstr	s14, [r4]
 801146c:	e7bc      	b.n	80113e8 <__ieee754_rem_pio2f+0x104>
 801146e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8011472:	d306      	bcc.n	8011482 <__ieee754_rem_pio2f+0x19e>
 8011474:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011478:	edc0 7a01 	vstr	s15, [r0, #4]
 801147c:	edc0 7a00 	vstr	s15, [r0]
 8011480:	e73e      	b.n	8011300 <__ieee754_rem_pio2f+0x1c>
 8011482:	15ea      	asrs	r2, r5, #23
 8011484:	3a86      	subs	r2, #134	@ 0x86
 8011486:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801148a:	ee07 3a90 	vmov	s15, r3
 801148e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011492:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801153c <__ieee754_rem_pio2f+0x258>
 8011496:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801149a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801149e:	ed8d 7a03 	vstr	s14, [sp, #12]
 80114a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80114a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80114aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80114ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80114b2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80114b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80114ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80114be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114c2:	edcd 7a05 	vstr	s15, [sp, #20]
 80114c6:	d11e      	bne.n	8011506 <__ieee754_rem_pio2f+0x222>
 80114c8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80114cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114d0:	bf0c      	ite	eq
 80114d2:	2301      	moveq	r3, #1
 80114d4:	2302      	movne	r3, #2
 80114d6:	491a      	ldr	r1, [pc, #104]	@ (8011540 <__ieee754_rem_pio2f+0x25c>)
 80114d8:	9101      	str	r1, [sp, #4]
 80114da:	2102      	movs	r1, #2
 80114dc:	9100      	str	r1, [sp, #0]
 80114de:	a803      	add	r0, sp, #12
 80114e0:	4621      	mov	r1, r4
 80114e2:	f000 fc69 	bl	8011db8 <__kernel_rem_pio2f>
 80114e6:	2e00      	cmp	r6, #0
 80114e8:	f6bf af2f 	bge.w	801134a <__ieee754_rem_pio2f+0x66>
 80114ec:	edd4 7a00 	vldr	s15, [r4]
 80114f0:	eef1 7a67 	vneg.f32	s15, s15
 80114f4:	edc4 7a00 	vstr	s15, [r4]
 80114f8:	edd4 7a01 	vldr	s15, [r4, #4]
 80114fc:	eef1 7a67 	vneg.f32	s15, s15
 8011500:	edc4 7a01 	vstr	s15, [r4, #4]
 8011504:	e782      	b.n	801140c <__ieee754_rem_pio2f+0x128>
 8011506:	2303      	movs	r3, #3
 8011508:	e7e5      	b.n	80114d6 <__ieee754_rem_pio2f+0x1f2>
 801150a:	bf00      	nop
 801150c:	3f490fd8 	.word	0x3f490fd8
 8011510:	4016cbe3 	.word	0x4016cbe3
 8011514:	3fc90f80 	.word	0x3fc90f80
 8011518:	3fc90fd0 	.word	0x3fc90fd0
 801151c:	37354400 	.word	0x37354400
 8011520:	37354443 	.word	0x37354443
 8011524:	2e85a308 	.word	0x2e85a308
 8011528:	43490f80 	.word	0x43490f80
 801152c:	3f22f984 	.word	0x3f22f984
 8011530:	08012660 	.word	0x08012660
 8011534:	2e85a300 	.word	0x2e85a300
 8011538:	248d3132 	.word	0x248d3132
 801153c:	43800000 	.word	0x43800000
 8011540:	080126e0 	.word	0x080126e0

08011544 <fabsf>:
 8011544:	ee10 3a10 	vmov	r3, s0
 8011548:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801154c:	ee00 3a10 	vmov	s0, r3
 8011550:	4770      	bx	lr
 8011552:	0000      	movs	r0, r0
 8011554:	0000      	movs	r0, r0
	...

08011558 <scalbn>:
 8011558:	b570      	push	{r4, r5, r6, lr}
 801155a:	ec55 4b10 	vmov	r4, r5, d0
 801155e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011562:	4606      	mov	r6, r0
 8011564:	462b      	mov	r3, r5
 8011566:	b991      	cbnz	r1, 801158e <scalbn+0x36>
 8011568:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801156c:	4323      	orrs	r3, r4
 801156e:	d03b      	beq.n	80115e8 <scalbn+0x90>
 8011570:	4b33      	ldr	r3, [pc, #204]	@ (8011640 <scalbn+0xe8>)
 8011572:	4620      	mov	r0, r4
 8011574:	4629      	mov	r1, r5
 8011576:	2200      	movs	r2, #0
 8011578:	f7ef f80a 	bl	8000590 <__aeabi_dmul>
 801157c:	4b31      	ldr	r3, [pc, #196]	@ (8011644 <scalbn+0xec>)
 801157e:	429e      	cmp	r6, r3
 8011580:	4604      	mov	r4, r0
 8011582:	460d      	mov	r5, r1
 8011584:	da0f      	bge.n	80115a6 <scalbn+0x4e>
 8011586:	a326      	add	r3, pc, #152	@ (adr r3, 8011620 <scalbn+0xc8>)
 8011588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801158c:	e01e      	b.n	80115cc <scalbn+0x74>
 801158e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011592:	4291      	cmp	r1, r2
 8011594:	d10b      	bne.n	80115ae <scalbn+0x56>
 8011596:	4622      	mov	r2, r4
 8011598:	4620      	mov	r0, r4
 801159a:	4629      	mov	r1, r5
 801159c:	f7ee fe42 	bl	8000224 <__adddf3>
 80115a0:	4604      	mov	r4, r0
 80115a2:	460d      	mov	r5, r1
 80115a4:	e020      	b.n	80115e8 <scalbn+0x90>
 80115a6:	460b      	mov	r3, r1
 80115a8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80115ac:	3936      	subs	r1, #54	@ 0x36
 80115ae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80115b2:	4296      	cmp	r6, r2
 80115b4:	dd0d      	ble.n	80115d2 <scalbn+0x7a>
 80115b6:	2d00      	cmp	r5, #0
 80115b8:	a11b      	add	r1, pc, #108	@ (adr r1, 8011628 <scalbn+0xd0>)
 80115ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115be:	da02      	bge.n	80115c6 <scalbn+0x6e>
 80115c0:	a11b      	add	r1, pc, #108	@ (adr r1, 8011630 <scalbn+0xd8>)
 80115c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115c6:	a318      	add	r3, pc, #96	@ (adr r3, 8011628 <scalbn+0xd0>)
 80115c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115cc:	f7ee ffe0 	bl	8000590 <__aeabi_dmul>
 80115d0:	e7e6      	b.n	80115a0 <scalbn+0x48>
 80115d2:	1872      	adds	r2, r6, r1
 80115d4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80115d8:	428a      	cmp	r2, r1
 80115da:	dcec      	bgt.n	80115b6 <scalbn+0x5e>
 80115dc:	2a00      	cmp	r2, #0
 80115de:	dd06      	ble.n	80115ee <scalbn+0x96>
 80115e0:	f36f 531e 	bfc	r3, #20, #11
 80115e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80115e8:	ec45 4b10 	vmov	d0, r4, r5
 80115ec:	bd70      	pop	{r4, r5, r6, pc}
 80115ee:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80115f2:	da08      	bge.n	8011606 <scalbn+0xae>
 80115f4:	2d00      	cmp	r5, #0
 80115f6:	a10a      	add	r1, pc, #40	@ (adr r1, 8011620 <scalbn+0xc8>)
 80115f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115fc:	dac3      	bge.n	8011586 <scalbn+0x2e>
 80115fe:	a10e      	add	r1, pc, #56	@ (adr r1, 8011638 <scalbn+0xe0>)
 8011600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011604:	e7bf      	b.n	8011586 <scalbn+0x2e>
 8011606:	3236      	adds	r2, #54	@ 0x36
 8011608:	f36f 531e 	bfc	r3, #20, #11
 801160c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011610:	4620      	mov	r0, r4
 8011612:	4b0d      	ldr	r3, [pc, #52]	@ (8011648 <scalbn+0xf0>)
 8011614:	4629      	mov	r1, r5
 8011616:	2200      	movs	r2, #0
 8011618:	e7d8      	b.n	80115cc <scalbn+0x74>
 801161a:	bf00      	nop
 801161c:	f3af 8000 	nop.w
 8011620:	c2f8f359 	.word	0xc2f8f359
 8011624:	01a56e1f 	.word	0x01a56e1f
 8011628:	8800759c 	.word	0x8800759c
 801162c:	7e37e43c 	.word	0x7e37e43c
 8011630:	8800759c 	.word	0x8800759c
 8011634:	fe37e43c 	.word	0xfe37e43c
 8011638:	c2f8f359 	.word	0xc2f8f359
 801163c:	81a56e1f 	.word	0x81a56e1f
 8011640:	43500000 	.word	0x43500000
 8011644:	ffff3cb0 	.word	0xffff3cb0
 8011648:	3c900000 	.word	0x3c900000

0801164c <scalbnf>:
 801164c:	ee10 3a10 	vmov	r3, s0
 8011650:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8011654:	d02b      	beq.n	80116ae <scalbnf+0x62>
 8011656:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801165a:	d302      	bcc.n	8011662 <scalbnf+0x16>
 801165c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011660:	4770      	bx	lr
 8011662:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8011666:	d123      	bne.n	80116b0 <scalbnf+0x64>
 8011668:	4b24      	ldr	r3, [pc, #144]	@ (80116fc <scalbnf+0xb0>)
 801166a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011700 <scalbnf+0xb4>
 801166e:	4298      	cmp	r0, r3
 8011670:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011674:	db17      	blt.n	80116a6 <scalbnf+0x5a>
 8011676:	ee10 3a10 	vmov	r3, s0
 801167a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801167e:	3a19      	subs	r2, #25
 8011680:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011684:	4288      	cmp	r0, r1
 8011686:	dd15      	ble.n	80116b4 <scalbnf+0x68>
 8011688:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011704 <scalbnf+0xb8>
 801168c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011708 <scalbnf+0xbc>
 8011690:	ee10 3a10 	vmov	r3, s0
 8011694:	eeb0 7a67 	vmov.f32	s14, s15
 8011698:	2b00      	cmp	r3, #0
 801169a:	bfb8      	it	lt
 801169c:	eef0 7a66 	vmovlt.f32	s15, s13
 80116a0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80116a4:	4770      	bx	lr
 80116a6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801170c <scalbnf+0xc0>
 80116aa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80116ae:	4770      	bx	lr
 80116b0:	0dd2      	lsrs	r2, r2, #23
 80116b2:	e7e5      	b.n	8011680 <scalbnf+0x34>
 80116b4:	4410      	add	r0, r2
 80116b6:	28fe      	cmp	r0, #254	@ 0xfe
 80116b8:	dce6      	bgt.n	8011688 <scalbnf+0x3c>
 80116ba:	2800      	cmp	r0, #0
 80116bc:	dd06      	ble.n	80116cc <scalbnf+0x80>
 80116be:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80116c2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80116c6:	ee00 3a10 	vmov	s0, r3
 80116ca:	4770      	bx	lr
 80116cc:	f110 0f16 	cmn.w	r0, #22
 80116d0:	da09      	bge.n	80116e6 <scalbnf+0x9a>
 80116d2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801170c <scalbnf+0xc0>
 80116d6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011710 <scalbnf+0xc4>
 80116da:	ee10 3a10 	vmov	r3, s0
 80116de:	eeb0 7a67 	vmov.f32	s14, s15
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	e7d9      	b.n	801169a <scalbnf+0x4e>
 80116e6:	3019      	adds	r0, #25
 80116e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80116ec:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80116f0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011714 <scalbnf+0xc8>
 80116f4:	ee07 3a90 	vmov	s15, r3
 80116f8:	e7d7      	b.n	80116aa <scalbnf+0x5e>
 80116fa:	bf00      	nop
 80116fc:	ffff3cb0 	.word	0xffff3cb0
 8011700:	4c000000 	.word	0x4c000000
 8011704:	7149f2ca 	.word	0x7149f2ca
 8011708:	f149f2ca 	.word	0xf149f2ca
 801170c:	0da24260 	.word	0x0da24260
 8011710:	8da24260 	.word	0x8da24260
 8011714:	33000000 	.word	0x33000000

08011718 <__kernel_rem_pio2>:
 8011718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801171c:	ed2d 8b02 	vpush	{d8}
 8011720:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8011724:	f112 0f14 	cmn.w	r2, #20
 8011728:	9306      	str	r3, [sp, #24]
 801172a:	9104      	str	r1, [sp, #16]
 801172c:	4bc2      	ldr	r3, [pc, #776]	@ (8011a38 <__kernel_rem_pio2+0x320>)
 801172e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8011730:	9008      	str	r0, [sp, #32]
 8011732:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011736:	9300      	str	r3, [sp, #0]
 8011738:	9b06      	ldr	r3, [sp, #24]
 801173a:	f103 33ff 	add.w	r3, r3, #4294967295
 801173e:	bfa8      	it	ge
 8011740:	1ed4      	subge	r4, r2, #3
 8011742:	9305      	str	r3, [sp, #20]
 8011744:	bfb2      	itee	lt
 8011746:	2400      	movlt	r4, #0
 8011748:	2318      	movge	r3, #24
 801174a:	fb94 f4f3 	sdivge	r4, r4, r3
 801174e:	f06f 0317 	mvn.w	r3, #23
 8011752:	fb04 3303 	mla	r3, r4, r3, r3
 8011756:	eb03 0b02 	add.w	fp, r3, r2
 801175a:	9b00      	ldr	r3, [sp, #0]
 801175c:	9a05      	ldr	r2, [sp, #20]
 801175e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8011a28 <__kernel_rem_pio2+0x310>
 8011762:	eb03 0802 	add.w	r8, r3, r2
 8011766:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011768:	1aa7      	subs	r7, r4, r2
 801176a:	ae20      	add	r6, sp, #128	@ 0x80
 801176c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011770:	2500      	movs	r5, #0
 8011772:	4545      	cmp	r5, r8
 8011774:	dd12      	ble.n	801179c <__kernel_rem_pio2+0x84>
 8011776:	9b06      	ldr	r3, [sp, #24]
 8011778:	aa20      	add	r2, sp, #128	@ 0x80
 801177a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801177e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8011782:	2700      	movs	r7, #0
 8011784:	9b00      	ldr	r3, [sp, #0]
 8011786:	429f      	cmp	r7, r3
 8011788:	dc2e      	bgt.n	80117e8 <__kernel_rem_pio2+0xd0>
 801178a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8011a28 <__kernel_rem_pio2+0x310>
 801178e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011792:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011796:	46a8      	mov	r8, r5
 8011798:	2600      	movs	r6, #0
 801179a:	e01b      	b.n	80117d4 <__kernel_rem_pio2+0xbc>
 801179c:	42ef      	cmn	r7, r5
 801179e:	d407      	bmi.n	80117b0 <__kernel_rem_pio2+0x98>
 80117a0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80117a4:	f7ee fe8a 	bl	80004bc <__aeabi_i2d>
 80117a8:	e8e6 0102 	strd	r0, r1, [r6], #8
 80117ac:	3501      	adds	r5, #1
 80117ae:	e7e0      	b.n	8011772 <__kernel_rem_pio2+0x5a>
 80117b0:	ec51 0b18 	vmov	r0, r1, d8
 80117b4:	e7f8      	b.n	80117a8 <__kernel_rem_pio2+0x90>
 80117b6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80117ba:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80117be:	f7ee fee7 	bl	8000590 <__aeabi_dmul>
 80117c2:	4602      	mov	r2, r0
 80117c4:	460b      	mov	r3, r1
 80117c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80117ca:	f7ee fd2b 	bl	8000224 <__adddf3>
 80117ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117d2:	3601      	adds	r6, #1
 80117d4:	9b05      	ldr	r3, [sp, #20]
 80117d6:	429e      	cmp	r6, r3
 80117d8:	dded      	ble.n	80117b6 <__kernel_rem_pio2+0x9e>
 80117da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80117de:	3701      	adds	r7, #1
 80117e0:	ecaa 7b02 	vstmia	sl!, {d7}
 80117e4:	3508      	adds	r5, #8
 80117e6:	e7cd      	b.n	8011784 <__kernel_rem_pio2+0x6c>
 80117e8:	9b00      	ldr	r3, [sp, #0]
 80117ea:	f8dd 8000 	ldr.w	r8, [sp]
 80117ee:	aa0c      	add	r2, sp, #48	@ 0x30
 80117f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80117f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80117f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80117f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80117fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80117fe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8011802:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011804:	ab98      	add	r3, sp, #608	@ 0x260
 8011806:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801180a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801180e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011812:	ac0c      	add	r4, sp, #48	@ 0x30
 8011814:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011816:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801181a:	46a1      	mov	r9, r4
 801181c:	46c2      	mov	sl, r8
 801181e:	f1ba 0f00 	cmp.w	sl, #0
 8011822:	dc77      	bgt.n	8011914 <__kernel_rem_pio2+0x1fc>
 8011824:	4658      	mov	r0, fp
 8011826:	ed9d 0b02 	vldr	d0, [sp, #8]
 801182a:	f7ff fe95 	bl	8011558 <scalbn>
 801182e:	ec57 6b10 	vmov	r6, r7, d0
 8011832:	2200      	movs	r2, #0
 8011834:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8011838:	4630      	mov	r0, r6
 801183a:	4639      	mov	r1, r7
 801183c:	f7ee fea8 	bl	8000590 <__aeabi_dmul>
 8011840:	ec41 0b10 	vmov	d0, r0, r1
 8011844:	f000 fd20 	bl	8012288 <floor>
 8011848:	4b7c      	ldr	r3, [pc, #496]	@ (8011a3c <__kernel_rem_pio2+0x324>)
 801184a:	ec51 0b10 	vmov	r0, r1, d0
 801184e:	2200      	movs	r2, #0
 8011850:	f7ee fe9e 	bl	8000590 <__aeabi_dmul>
 8011854:	4602      	mov	r2, r0
 8011856:	460b      	mov	r3, r1
 8011858:	4630      	mov	r0, r6
 801185a:	4639      	mov	r1, r7
 801185c:	f7ee fce0 	bl	8000220 <__aeabi_dsub>
 8011860:	460f      	mov	r7, r1
 8011862:	4606      	mov	r6, r0
 8011864:	f7ef f92e 	bl	8000ac4 <__aeabi_d2iz>
 8011868:	9002      	str	r0, [sp, #8]
 801186a:	f7ee fe27 	bl	80004bc <__aeabi_i2d>
 801186e:	4602      	mov	r2, r0
 8011870:	460b      	mov	r3, r1
 8011872:	4630      	mov	r0, r6
 8011874:	4639      	mov	r1, r7
 8011876:	f7ee fcd3 	bl	8000220 <__aeabi_dsub>
 801187a:	f1bb 0f00 	cmp.w	fp, #0
 801187e:	4606      	mov	r6, r0
 8011880:	460f      	mov	r7, r1
 8011882:	dd6c      	ble.n	801195e <__kernel_rem_pio2+0x246>
 8011884:	f108 31ff 	add.w	r1, r8, #4294967295
 8011888:	ab0c      	add	r3, sp, #48	@ 0x30
 801188a:	9d02      	ldr	r5, [sp, #8]
 801188c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011890:	f1cb 0018 	rsb	r0, fp, #24
 8011894:	fa43 f200 	asr.w	r2, r3, r0
 8011898:	4415      	add	r5, r2
 801189a:	4082      	lsls	r2, r0
 801189c:	1a9b      	subs	r3, r3, r2
 801189e:	aa0c      	add	r2, sp, #48	@ 0x30
 80118a0:	9502      	str	r5, [sp, #8]
 80118a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80118a6:	f1cb 0217 	rsb	r2, fp, #23
 80118aa:	fa43 f902 	asr.w	r9, r3, r2
 80118ae:	f1b9 0f00 	cmp.w	r9, #0
 80118b2:	dd64      	ble.n	801197e <__kernel_rem_pio2+0x266>
 80118b4:	9b02      	ldr	r3, [sp, #8]
 80118b6:	2200      	movs	r2, #0
 80118b8:	3301      	adds	r3, #1
 80118ba:	9302      	str	r3, [sp, #8]
 80118bc:	4615      	mov	r5, r2
 80118be:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80118c2:	4590      	cmp	r8, r2
 80118c4:	f300 80a1 	bgt.w	8011a0a <__kernel_rem_pio2+0x2f2>
 80118c8:	f1bb 0f00 	cmp.w	fp, #0
 80118cc:	dd07      	ble.n	80118de <__kernel_rem_pio2+0x1c6>
 80118ce:	f1bb 0f01 	cmp.w	fp, #1
 80118d2:	f000 80c1 	beq.w	8011a58 <__kernel_rem_pio2+0x340>
 80118d6:	f1bb 0f02 	cmp.w	fp, #2
 80118da:	f000 80c8 	beq.w	8011a6e <__kernel_rem_pio2+0x356>
 80118de:	f1b9 0f02 	cmp.w	r9, #2
 80118e2:	d14c      	bne.n	801197e <__kernel_rem_pio2+0x266>
 80118e4:	4632      	mov	r2, r6
 80118e6:	463b      	mov	r3, r7
 80118e8:	4955      	ldr	r1, [pc, #340]	@ (8011a40 <__kernel_rem_pio2+0x328>)
 80118ea:	2000      	movs	r0, #0
 80118ec:	f7ee fc98 	bl	8000220 <__aeabi_dsub>
 80118f0:	4606      	mov	r6, r0
 80118f2:	460f      	mov	r7, r1
 80118f4:	2d00      	cmp	r5, #0
 80118f6:	d042      	beq.n	801197e <__kernel_rem_pio2+0x266>
 80118f8:	4658      	mov	r0, fp
 80118fa:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8011a30 <__kernel_rem_pio2+0x318>
 80118fe:	f7ff fe2b 	bl	8011558 <scalbn>
 8011902:	4630      	mov	r0, r6
 8011904:	4639      	mov	r1, r7
 8011906:	ec53 2b10 	vmov	r2, r3, d0
 801190a:	f7ee fc89 	bl	8000220 <__aeabi_dsub>
 801190e:	4606      	mov	r6, r0
 8011910:	460f      	mov	r7, r1
 8011912:	e034      	b.n	801197e <__kernel_rem_pio2+0x266>
 8011914:	4b4b      	ldr	r3, [pc, #300]	@ (8011a44 <__kernel_rem_pio2+0x32c>)
 8011916:	2200      	movs	r2, #0
 8011918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801191c:	f7ee fe38 	bl	8000590 <__aeabi_dmul>
 8011920:	f7ef f8d0 	bl	8000ac4 <__aeabi_d2iz>
 8011924:	f7ee fdca 	bl	80004bc <__aeabi_i2d>
 8011928:	4b47      	ldr	r3, [pc, #284]	@ (8011a48 <__kernel_rem_pio2+0x330>)
 801192a:	2200      	movs	r2, #0
 801192c:	4606      	mov	r6, r0
 801192e:	460f      	mov	r7, r1
 8011930:	f7ee fe2e 	bl	8000590 <__aeabi_dmul>
 8011934:	4602      	mov	r2, r0
 8011936:	460b      	mov	r3, r1
 8011938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801193c:	f7ee fc70 	bl	8000220 <__aeabi_dsub>
 8011940:	f7ef f8c0 	bl	8000ac4 <__aeabi_d2iz>
 8011944:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8011948:	f849 0b04 	str.w	r0, [r9], #4
 801194c:	4639      	mov	r1, r7
 801194e:	4630      	mov	r0, r6
 8011950:	f7ee fc68 	bl	8000224 <__adddf3>
 8011954:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801195c:	e75f      	b.n	801181e <__kernel_rem_pio2+0x106>
 801195e:	d107      	bne.n	8011970 <__kernel_rem_pio2+0x258>
 8011960:	f108 33ff 	add.w	r3, r8, #4294967295
 8011964:	aa0c      	add	r2, sp, #48	@ 0x30
 8011966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801196a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801196e:	e79e      	b.n	80118ae <__kernel_rem_pio2+0x196>
 8011970:	4b36      	ldr	r3, [pc, #216]	@ (8011a4c <__kernel_rem_pio2+0x334>)
 8011972:	2200      	movs	r2, #0
 8011974:	f7ef f892 	bl	8000a9c <__aeabi_dcmpge>
 8011978:	2800      	cmp	r0, #0
 801197a:	d143      	bne.n	8011a04 <__kernel_rem_pio2+0x2ec>
 801197c:	4681      	mov	r9, r0
 801197e:	2200      	movs	r2, #0
 8011980:	2300      	movs	r3, #0
 8011982:	4630      	mov	r0, r6
 8011984:	4639      	mov	r1, r7
 8011986:	f7ef f86b 	bl	8000a60 <__aeabi_dcmpeq>
 801198a:	2800      	cmp	r0, #0
 801198c:	f000 80c1 	beq.w	8011b12 <__kernel_rem_pio2+0x3fa>
 8011990:	f108 33ff 	add.w	r3, r8, #4294967295
 8011994:	2200      	movs	r2, #0
 8011996:	9900      	ldr	r1, [sp, #0]
 8011998:	428b      	cmp	r3, r1
 801199a:	da70      	bge.n	8011a7e <__kernel_rem_pio2+0x366>
 801199c:	2a00      	cmp	r2, #0
 801199e:	f000 808b 	beq.w	8011ab8 <__kernel_rem_pio2+0x3a0>
 80119a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80119a6:	ab0c      	add	r3, sp, #48	@ 0x30
 80119a8:	f1ab 0b18 	sub.w	fp, fp, #24
 80119ac:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d0f6      	beq.n	80119a2 <__kernel_rem_pio2+0x28a>
 80119b4:	4658      	mov	r0, fp
 80119b6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8011a30 <__kernel_rem_pio2+0x318>
 80119ba:	f7ff fdcd 	bl	8011558 <scalbn>
 80119be:	f108 0301 	add.w	r3, r8, #1
 80119c2:	00da      	lsls	r2, r3, #3
 80119c4:	9205      	str	r2, [sp, #20]
 80119c6:	ec55 4b10 	vmov	r4, r5, d0
 80119ca:	aa70      	add	r2, sp, #448	@ 0x1c0
 80119cc:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8011a44 <__kernel_rem_pio2+0x32c>
 80119d0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80119d4:	4646      	mov	r6, r8
 80119d6:	f04f 0a00 	mov.w	sl, #0
 80119da:	2e00      	cmp	r6, #0
 80119dc:	f280 80d1 	bge.w	8011b82 <__kernel_rem_pio2+0x46a>
 80119e0:	4644      	mov	r4, r8
 80119e2:	2c00      	cmp	r4, #0
 80119e4:	f2c0 80ff 	blt.w	8011be6 <__kernel_rem_pio2+0x4ce>
 80119e8:	4b19      	ldr	r3, [pc, #100]	@ (8011a50 <__kernel_rem_pio2+0x338>)
 80119ea:	461f      	mov	r7, r3
 80119ec:	ab70      	add	r3, sp, #448	@ 0x1c0
 80119ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80119f2:	9306      	str	r3, [sp, #24]
 80119f4:	f04f 0a00 	mov.w	sl, #0
 80119f8:	f04f 0b00 	mov.w	fp, #0
 80119fc:	2600      	movs	r6, #0
 80119fe:	eba8 0504 	sub.w	r5, r8, r4
 8011a02:	e0e4      	b.n	8011bce <__kernel_rem_pio2+0x4b6>
 8011a04:	f04f 0902 	mov.w	r9, #2
 8011a08:	e754      	b.n	80118b4 <__kernel_rem_pio2+0x19c>
 8011a0a:	f854 3b04 	ldr.w	r3, [r4], #4
 8011a0e:	bb0d      	cbnz	r5, 8011a54 <__kernel_rem_pio2+0x33c>
 8011a10:	b123      	cbz	r3, 8011a1c <__kernel_rem_pio2+0x304>
 8011a12:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8011a16:	f844 3c04 	str.w	r3, [r4, #-4]
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	3201      	adds	r2, #1
 8011a1e:	461d      	mov	r5, r3
 8011a20:	e74f      	b.n	80118c2 <__kernel_rem_pio2+0x1aa>
 8011a22:	bf00      	nop
 8011a24:	f3af 8000 	nop.w
	...
 8011a34:	3ff00000 	.word	0x3ff00000
 8011a38:	08012a38 	.word	0x08012a38
 8011a3c:	40200000 	.word	0x40200000
 8011a40:	3ff00000 	.word	0x3ff00000
 8011a44:	3e700000 	.word	0x3e700000
 8011a48:	41700000 	.word	0x41700000
 8011a4c:	3fe00000 	.word	0x3fe00000
 8011a50:	080129f8 	.word	0x080129f8
 8011a54:	1acb      	subs	r3, r1, r3
 8011a56:	e7de      	b.n	8011a16 <__kernel_rem_pio2+0x2fe>
 8011a58:	f108 32ff 	add.w	r2, r8, #4294967295
 8011a5c:	ab0c      	add	r3, sp, #48	@ 0x30
 8011a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a62:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011a66:	a90c      	add	r1, sp, #48	@ 0x30
 8011a68:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011a6c:	e737      	b.n	80118de <__kernel_rem_pio2+0x1c6>
 8011a6e:	f108 32ff 	add.w	r2, r8, #4294967295
 8011a72:	ab0c      	add	r3, sp, #48	@ 0x30
 8011a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a78:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011a7c:	e7f3      	b.n	8011a66 <__kernel_rem_pio2+0x34e>
 8011a7e:	a90c      	add	r1, sp, #48	@ 0x30
 8011a80:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011a84:	3b01      	subs	r3, #1
 8011a86:	430a      	orrs	r2, r1
 8011a88:	e785      	b.n	8011996 <__kernel_rem_pio2+0x27e>
 8011a8a:	3401      	adds	r4, #1
 8011a8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011a90:	2a00      	cmp	r2, #0
 8011a92:	d0fa      	beq.n	8011a8a <__kernel_rem_pio2+0x372>
 8011a94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a96:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011a9a:	eb0d 0503 	add.w	r5, sp, r3
 8011a9e:	9b06      	ldr	r3, [sp, #24]
 8011aa0:	aa20      	add	r2, sp, #128	@ 0x80
 8011aa2:	4443      	add	r3, r8
 8011aa4:	f108 0701 	add.w	r7, r8, #1
 8011aa8:	3d98      	subs	r5, #152	@ 0x98
 8011aaa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8011aae:	4444      	add	r4, r8
 8011ab0:	42bc      	cmp	r4, r7
 8011ab2:	da04      	bge.n	8011abe <__kernel_rem_pio2+0x3a6>
 8011ab4:	46a0      	mov	r8, r4
 8011ab6:	e6a2      	b.n	80117fe <__kernel_rem_pio2+0xe6>
 8011ab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011aba:	2401      	movs	r4, #1
 8011abc:	e7e6      	b.n	8011a8c <__kernel_rem_pio2+0x374>
 8011abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ac0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011ac4:	f7ee fcfa 	bl	80004bc <__aeabi_i2d>
 8011ac8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8011d88 <__kernel_rem_pio2+0x670>
 8011acc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011ad0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011ad4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011ad8:	46b2      	mov	sl, r6
 8011ada:	f04f 0800 	mov.w	r8, #0
 8011ade:	9b05      	ldr	r3, [sp, #20]
 8011ae0:	4598      	cmp	r8, r3
 8011ae2:	dd05      	ble.n	8011af0 <__kernel_rem_pio2+0x3d8>
 8011ae4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011ae8:	3701      	adds	r7, #1
 8011aea:	eca5 7b02 	vstmia	r5!, {d7}
 8011aee:	e7df      	b.n	8011ab0 <__kernel_rem_pio2+0x398>
 8011af0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8011af4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011af8:	f7ee fd4a 	bl	8000590 <__aeabi_dmul>
 8011afc:	4602      	mov	r2, r0
 8011afe:	460b      	mov	r3, r1
 8011b00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b04:	f7ee fb8e 	bl	8000224 <__adddf3>
 8011b08:	f108 0801 	add.w	r8, r8, #1
 8011b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b10:	e7e5      	b.n	8011ade <__kernel_rem_pio2+0x3c6>
 8011b12:	f1cb 0000 	rsb	r0, fp, #0
 8011b16:	ec47 6b10 	vmov	d0, r6, r7
 8011b1a:	f7ff fd1d 	bl	8011558 <scalbn>
 8011b1e:	ec55 4b10 	vmov	r4, r5, d0
 8011b22:	4b9b      	ldr	r3, [pc, #620]	@ (8011d90 <__kernel_rem_pio2+0x678>)
 8011b24:	2200      	movs	r2, #0
 8011b26:	4620      	mov	r0, r4
 8011b28:	4629      	mov	r1, r5
 8011b2a:	f7ee ffb7 	bl	8000a9c <__aeabi_dcmpge>
 8011b2e:	b300      	cbz	r0, 8011b72 <__kernel_rem_pio2+0x45a>
 8011b30:	4b98      	ldr	r3, [pc, #608]	@ (8011d94 <__kernel_rem_pio2+0x67c>)
 8011b32:	2200      	movs	r2, #0
 8011b34:	4620      	mov	r0, r4
 8011b36:	4629      	mov	r1, r5
 8011b38:	f7ee fd2a 	bl	8000590 <__aeabi_dmul>
 8011b3c:	f7ee ffc2 	bl	8000ac4 <__aeabi_d2iz>
 8011b40:	4606      	mov	r6, r0
 8011b42:	f7ee fcbb 	bl	80004bc <__aeabi_i2d>
 8011b46:	4b92      	ldr	r3, [pc, #584]	@ (8011d90 <__kernel_rem_pio2+0x678>)
 8011b48:	2200      	movs	r2, #0
 8011b4a:	f7ee fd21 	bl	8000590 <__aeabi_dmul>
 8011b4e:	460b      	mov	r3, r1
 8011b50:	4602      	mov	r2, r0
 8011b52:	4629      	mov	r1, r5
 8011b54:	4620      	mov	r0, r4
 8011b56:	f7ee fb63 	bl	8000220 <__aeabi_dsub>
 8011b5a:	f7ee ffb3 	bl	8000ac4 <__aeabi_d2iz>
 8011b5e:	ab0c      	add	r3, sp, #48	@ 0x30
 8011b60:	f10b 0b18 	add.w	fp, fp, #24
 8011b64:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011b68:	f108 0801 	add.w	r8, r8, #1
 8011b6c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8011b70:	e720      	b.n	80119b4 <__kernel_rem_pio2+0x29c>
 8011b72:	4620      	mov	r0, r4
 8011b74:	4629      	mov	r1, r5
 8011b76:	f7ee ffa5 	bl	8000ac4 <__aeabi_d2iz>
 8011b7a:	ab0c      	add	r3, sp, #48	@ 0x30
 8011b7c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011b80:	e718      	b.n	80119b4 <__kernel_rem_pio2+0x29c>
 8011b82:	ab0c      	add	r3, sp, #48	@ 0x30
 8011b84:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011b88:	f7ee fc98 	bl	80004bc <__aeabi_i2d>
 8011b8c:	4622      	mov	r2, r4
 8011b8e:	462b      	mov	r3, r5
 8011b90:	f7ee fcfe 	bl	8000590 <__aeabi_dmul>
 8011b94:	4652      	mov	r2, sl
 8011b96:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8011b9a:	465b      	mov	r3, fp
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	4629      	mov	r1, r5
 8011ba0:	f7ee fcf6 	bl	8000590 <__aeabi_dmul>
 8011ba4:	3e01      	subs	r6, #1
 8011ba6:	4604      	mov	r4, r0
 8011ba8:	460d      	mov	r5, r1
 8011baa:	e716      	b.n	80119da <__kernel_rem_pio2+0x2c2>
 8011bac:	9906      	ldr	r1, [sp, #24]
 8011bae:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8011bb2:	9106      	str	r1, [sp, #24]
 8011bb4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8011bb8:	f7ee fcea 	bl	8000590 <__aeabi_dmul>
 8011bbc:	4602      	mov	r2, r0
 8011bbe:	460b      	mov	r3, r1
 8011bc0:	4650      	mov	r0, sl
 8011bc2:	4659      	mov	r1, fp
 8011bc4:	f7ee fb2e 	bl	8000224 <__adddf3>
 8011bc8:	3601      	adds	r6, #1
 8011bca:	4682      	mov	sl, r0
 8011bcc:	468b      	mov	fp, r1
 8011bce:	9b00      	ldr	r3, [sp, #0]
 8011bd0:	429e      	cmp	r6, r3
 8011bd2:	dc01      	bgt.n	8011bd8 <__kernel_rem_pio2+0x4c0>
 8011bd4:	42ae      	cmp	r6, r5
 8011bd6:	dde9      	ble.n	8011bac <__kernel_rem_pio2+0x494>
 8011bd8:	ab48      	add	r3, sp, #288	@ 0x120
 8011bda:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011bde:	e9c5 ab00 	strd	sl, fp, [r5]
 8011be2:	3c01      	subs	r4, #1
 8011be4:	e6fd      	b.n	80119e2 <__kernel_rem_pio2+0x2ca>
 8011be6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011be8:	2b02      	cmp	r3, #2
 8011bea:	dc0b      	bgt.n	8011c04 <__kernel_rem_pio2+0x4ec>
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	dc35      	bgt.n	8011c5c <__kernel_rem_pio2+0x544>
 8011bf0:	d059      	beq.n	8011ca6 <__kernel_rem_pio2+0x58e>
 8011bf2:	9b02      	ldr	r3, [sp, #8]
 8011bf4:	f003 0007 	and.w	r0, r3, #7
 8011bf8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8011bfc:	ecbd 8b02 	vpop	{d8}
 8011c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c04:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011c06:	2b03      	cmp	r3, #3
 8011c08:	d1f3      	bne.n	8011bf2 <__kernel_rem_pio2+0x4da>
 8011c0a:	9b05      	ldr	r3, [sp, #20]
 8011c0c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011c10:	eb0d 0403 	add.w	r4, sp, r3
 8011c14:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8011c18:	4625      	mov	r5, r4
 8011c1a:	46c2      	mov	sl, r8
 8011c1c:	f1ba 0f00 	cmp.w	sl, #0
 8011c20:	dc69      	bgt.n	8011cf6 <__kernel_rem_pio2+0x5de>
 8011c22:	4645      	mov	r5, r8
 8011c24:	2d01      	cmp	r5, #1
 8011c26:	f300 8087 	bgt.w	8011d38 <__kernel_rem_pio2+0x620>
 8011c2a:	9c05      	ldr	r4, [sp, #20]
 8011c2c:	ab48      	add	r3, sp, #288	@ 0x120
 8011c2e:	441c      	add	r4, r3
 8011c30:	2000      	movs	r0, #0
 8011c32:	2100      	movs	r1, #0
 8011c34:	f1b8 0f01 	cmp.w	r8, #1
 8011c38:	f300 809c 	bgt.w	8011d74 <__kernel_rem_pio2+0x65c>
 8011c3c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8011c40:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8011c44:	f1b9 0f00 	cmp.w	r9, #0
 8011c48:	f040 80a6 	bne.w	8011d98 <__kernel_rem_pio2+0x680>
 8011c4c:	9b04      	ldr	r3, [sp, #16]
 8011c4e:	e9c3 5600 	strd	r5, r6, [r3]
 8011c52:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8011c56:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011c5a:	e7ca      	b.n	8011bf2 <__kernel_rem_pio2+0x4da>
 8011c5c:	9d05      	ldr	r5, [sp, #20]
 8011c5e:	ab48      	add	r3, sp, #288	@ 0x120
 8011c60:	441d      	add	r5, r3
 8011c62:	4644      	mov	r4, r8
 8011c64:	2000      	movs	r0, #0
 8011c66:	2100      	movs	r1, #0
 8011c68:	2c00      	cmp	r4, #0
 8011c6a:	da35      	bge.n	8011cd8 <__kernel_rem_pio2+0x5c0>
 8011c6c:	f1b9 0f00 	cmp.w	r9, #0
 8011c70:	d038      	beq.n	8011ce4 <__kernel_rem_pio2+0x5cc>
 8011c72:	4602      	mov	r2, r0
 8011c74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011c78:	9c04      	ldr	r4, [sp, #16]
 8011c7a:	e9c4 2300 	strd	r2, r3, [r4]
 8011c7e:	4602      	mov	r2, r0
 8011c80:	460b      	mov	r3, r1
 8011c82:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8011c86:	f7ee facb 	bl	8000220 <__aeabi_dsub>
 8011c8a:	ad4a      	add	r5, sp, #296	@ 0x128
 8011c8c:	2401      	movs	r4, #1
 8011c8e:	45a0      	cmp	r8, r4
 8011c90:	da2b      	bge.n	8011cea <__kernel_rem_pio2+0x5d2>
 8011c92:	f1b9 0f00 	cmp.w	r9, #0
 8011c96:	d002      	beq.n	8011c9e <__kernel_rem_pio2+0x586>
 8011c98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011c9c:	4619      	mov	r1, r3
 8011c9e:	9b04      	ldr	r3, [sp, #16]
 8011ca0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011ca4:	e7a5      	b.n	8011bf2 <__kernel_rem_pio2+0x4da>
 8011ca6:	9c05      	ldr	r4, [sp, #20]
 8011ca8:	ab48      	add	r3, sp, #288	@ 0x120
 8011caa:	441c      	add	r4, r3
 8011cac:	2000      	movs	r0, #0
 8011cae:	2100      	movs	r1, #0
 8011cb0:	f1b8 0f00 	cmp.w	r8, #0
 8011cb4:	da09      	bge.n	8011cca <__kernel_rem_pio2+0x5b2>
 8011cb6:	f1b9 0f00 	cmp.w	r9, #0
 8011cba:	d002      	beq.n	8011cc2 <__kernel_rem_pio2+0x5aa>
 8011cbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011cc0:	4619      	mov	r1, r3
 8011cc2:	9b04      	ldr	r3, [sp, #16]
 8011cc4:	e9c3 0100 	strd	r0, r1, [r3]
 8011cc8:	e793      	b.n	8011bf2 <__kernel_rem_pio2+0x4da>
 8011cca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011cce:	f7ee faa9 	bl	8000224 <__adddf3>
 8011cd2:	f108 38ff 	add.w	r8, r8, #4294967295
 8011cd6:	e7eb      	b.n	8011cb0 <__kernel_rem_pio2+0x598>
 8011cd8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8011cdc:	f7ee faa2 	bl	8000224 <__adddf3>
 8011ce0:	3c01      	subs	r4, #1
 8011ce2:	e7c1      	b.n	8011c68 <__kernel_rem_pio2+0x550>
 8011ce4:	4602      	mov	r2, r0
 8011ce6:	460b      	mov	r3, r1
 8011ce8:	e7c6      	b.n	8011c78 <__kernel_rem_pio2+0x560>
 8011cea:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8011cee:	f7ee fa99 	bl	8000224 <__adddf3>
 8011cf2:	3401      	adds	r4, #1
 8011cf4:	e7cb      	b.n	8011c8e <__kernel_rem_pio2+0x576>
 8011cf6:	ed35 7b02 	vldmdb	r5!, {d7}
 8011cfa:	ed8d 7b00 	vstr	d7, [sp]
 8011cfe:	ed95 7b02 	vldr	d7, [r5, #8]
 8011d02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d06:	ec53 2b17 	vmov	r2, r3, d7
 8011d0a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011d0e:	f7ee fa89 	bl	8000224 <__adddf3>
 8011d12:	4602      	mov	r2, r0
 8011d14:	460b      	mov	r3, r1
 8011d16:	4606      	mov	r6, r0
 8011d18:	460f      	mov	r7, r1
 8011d1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d1e:	f7ee fa7f 	bl	8000220 <__aeabi_dsub>
 8011d22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011d26:	f7ee fa7d 	bl	8000224 <__adddf3>
 8011d2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011d2e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8011d32:	e9c5 6700 	strd	r6, r7, [r5]
 8011d36:	e771      	b.n	8011c1c <__kernel_rem_pio2+0x504>
 8011d38:	ed34 7b02 	vldmdb	r4!, {d7}
 8011d3c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8011d40:	ec51 0b17 	vmov	r0, r1, d7
 8011d44:	4652      	mov	r2, sl
 8011d46:	465b      	mov	r3, fp
 8011d48:	ed8d 7b00 	vstr	d7, [sp]
 8011d4c:	f7ee fa6a 	bl	8000224 <__adddf3>
 8011d50:	4602      	mov	r2, r0
 8011d52:	460b      	mov	r3, r1
 8011d54:	4606      	mov	r6, r0
 8011d56:	460f      	mov	r7, r1
 8011d58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d5c:	f7ee fa60 	bl	8000220 <__aeabi_dsub>
 8011d60:	4652      	mov	r2, sl
 8011d62:	465b      	mov	r3, fp
 8011d64:	f7ee fa5e 	bl	8000224 <__adddf3>
 8011d68:	3d01      	subs	r5, #1
 8011d6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011d6e:	e9c4 6700 	strd	r6, r7, [r4]
 8011d72:	e757      	b.n	8011c24 <__kernel_rem_pio2+0x50c>
 8011d74:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011d78:	f7ee fa54 	bl	8000224 <__adddf3>
 8011d7c:	f108 38ff 	add.w	r8, r8, #4294967295
 8011d80:	e758      	b.n	8011c34 <__kernel_rem_pio2+0x51c>
 8011d82:	bf00      	nop
 8011d84:	f3af 8000 	nop.w
	...
 8011d90:	41700000 	.word	0x41700000
 8011d94:	3e700000 	.word	0x3e700000
 8011d98:	9b04      	ldr	r3, [sp, #16]
 8011d9a:	9a04      	ldr	r2, [sp, #16]
 8011d9c:	601d      	str	r5, [r3, #0]
 8011d9e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8011da2:	605c      	str	r4, [r3, #4]
 8011da4:	609f      	str	r7, [r3, #8]
 8011da6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8011daa:	60d3      	str	r3, [r2, #12]
 8011dac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011db0:	6110      	str	r0, [r2, #16]
 8011db2:	6153      	str	r3, [r2, #20]
 8011db4:	e71d      	b.n	8011bf2 <__kernel_rem_pio2+0x4da>
 8011db6:	bf00      	nop

08011db8 <__kernel_rem_pio2f>:
 8011db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dbc:	ed2d 8b04 	vpush	{d8-d9}
 8011dc0:	b0d9      	sub	sp, #356	@ 0x164
 8011dc2:	4690      	mov	r8, r2
 8011dc4:	9001      	str	r0, [sp, #4]
 8011dc6:	4ab6      	ldr	r2, [pc, #728]	@ (80120a0 <__kernel_rem_pio2f+0x2e8>)
 8011dc8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8011dca:	f118 0f04 	cmn.w	r8, #4
 8011dce:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8011dd2:	460f      	mov	r7, r1
 8011dd4:	f103 3bff 	add.w	fp, r3, #4294967295
 8011dd8:	db26      	blt.n	8011e28 <__kernel_rem_pio2f+0x70>
 8011dda:	f1b8 0203 	subs.w	r2, r8, #3
 8011dde:	bf48      	it	mi
 8011de0:	f108 0204 	addmi.w	r2, r8, #4
 8011de4:	10d2      	asrs	r2, r2, #3
 8011de6:	1c55      	adds	r5, r2, #1
 8011de8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8011dea:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80120b0 <__kernel_rem_pio2f+0x2f8>
 8011dee:	00e8      	lsls	r0, r5, #3
 8011df0:	eba2 060b 	sub.w	r6, r2, fp
 8011df4:	9002      	str	r0, [sp, #8]
 8011df6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8011dfa:	eb0a 0c0b 	add.w	ip, sl, fp
 8011dfe:	ac1c      	add	r4, sp, #112	@ 0x70
 8011e00:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8011e04:	2000      	movs	r0, #0
 8011e06:	4560      	cmp	r0, ip
 8011e08:	dd10      	ble.n	8011e2c <__kernel_rem_pio2f+0x74>
 8011e0a:	a91c      	add	r1, sp, #112	@ 0x70
 8011e0c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8011e10:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8011e14:	2600      	movs	r6, #0
 8011e16:	4556      	cmp	r6, sl
 8011e18:	dc24      	bgt.n	8011e64 <__kernel_rem_pio2f+0xac>
 8011e1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011e1e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80120b0 <__kernel_rem_pio2f+0x2f8>
 8011e22:	4684      	mov	ip, r0
 8011e24:	2400      	movs	r4, #0
 8011e26:	e016      	b.n	8011e56 <__kernel_rem_pio2f+0x9e>
 8011e28:	2200      	movs	r2, #0
 8011e2a:	e7dc      	b.n	8011de6 <__kernel_rem_pio2f+0x2e>
 8011e2c:	42c6      	cmn	r6, r0
 8011e2e:	bf5d      	ittte	pl
 8011e30:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8011e34:	ee07 1a90 	vmovpl	s15, r1
 8011e38:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8011e3c:	eef0 7a47 	vmovmi.f32	s15, s14
 8011e40:	ece4 7a01 	vstmia	r4!, {s15}
 8011e44:	3001      	adds	r0, #1
 8011e46:	e7de      	b.n	8011e06 <__kernel_rem_pio2f+0x4e>
 8011e48:	ecfe 6a01 	vldmia	lr!, {s13}
 8011e4c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8011e50:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011e54:	3401      	adds	r4, #1
 8011e56:	455c      	cmp	r4, fp
 8011e58:	ddf6      	ble.n	8011e48 <__kernel_rem_pio2f+0x90>
 8011e5a:	ece9 7a01 	vstmia	r9!, {s15}
 8011e5e:	3601      	adds	r6, #1
 8011e60:	3004      	adds	r0, #4
 8011e62:	e7d8      	b.n	8011e16 <__kernel_rem_pio2f+0x5e>
 8011e64:	a908      	add	r1, sp, #32
 8011e66:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011e6a:	9104      	str	r1, [sp, #16]
 8011e6c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8011e6e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80120ac <__kernel_rem_pio2f+0x2f4>
 8011e72:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80120a8 <__kernel_rem_pio2f+0x2f0>
 8011e76:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8011e7a:	9203      	str	r2, [sp, #12]
 8011e7c:	4654      	mov	r4, sl
 8011e7e:	00a2      	lsls	r2, r4, #2
 8011e80:	9205      	str	r2, [sp, #20]
 8011e82:	aa58      	add	r2, sp, #352	@ 0x160
 8011e84:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8011e88:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8011e8c:	a944      	add	r1, sp, #272	@ 0x110
 8011e8e:	aa08      	add	r2, sp, #32
 8011e90:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8011e94:	4694      	mov	ip, r2
 8011e96:	4626      	mov	r6, r4
 8011e98:	2e00      	cmp	r6, #0
 8011e9a:	dc4c      	bgt.n	8011f36 <__kernel_rem_pio2f+0x17e>
 8011e9c:	4628      	mov	r0, r5
 8011e9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011ea2:	f7ff fbd3 	bl	801164c <scalbnf>
 8011ea6:	eeb0 8a40 	vmov.f32	s16, s0
 8011eaa:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8011eae:	ee28 0a00 	vmul.f32	s0, s16, s0
 8011eb2:	f000 fa65 	bl	8012380 <floorf>
 8011eb6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8011eba:	eea0 8a67 	vfms.f32	s16, s0, s15
 8011ebe:	2d00      	cmp	r5, #0
 8011ec0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011ec4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011ec8:	ee17 9a90 	vmov	r9, s15
 8011ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ed0:	ee38 8a67 	vsub.f32	s16, s16, s15
 8011ed4:	dd41      	ble.n	8011f5a <__kernel_rem_pio2f+0x1a2>
 8011ed6:	f104 3cff 	add.w	ip, r4, #4294967295
 8011eda:	a908      	add	r1, sp, #32
 8011edc:	f1c5 0e08 	rsb	lr, r5, #8
 8011ee0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8011ee4:	fa46 f00e 	asr.w	r0, r6, lr
 8011ee8:	4481      	add	r9, r0
 8011eea:	fa00 f00e 	lsl.w	r0, r0, lr
 8011eee:	1a36      	subs	r6, r6, r0
 8011ef0:	f1c5 0007 	rsb	r0, r5, #7
 8011ef4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8011ef8:	4106      	asrs	r6, r0
 8011efa:	2e00      	cmp	r6, #0
 8011efc:	dd3c      	ble.n	8011f78 <__kernel_rem_pio2f+0x1c0>
 8011efe:	f04f 0e00 	mov.w	lr, #0
 8011f02:	f109 0901 	add.w	r9, r9, #1
 8011f06:	4670      	mov	r0, lr
 8011f08:	4574      	cmp	r4, lr
 8011f0a:	dc68      	bgt.n	8011fde <__kernel_rem_pio2f+0x226>
 8011f0c:	2d00      	cmp	r5, #0
 8011f0e:	dd03      	ble.n	8011f18 <__kernel_rem_pio2f+0x160>
 8011f10:	2d01      	cmp	r5, #1
 8011f12:	d074      	beq.n	8011ffe <__kernel_rem_pio2f+0x246>
 8011f14:	2d02      	cmp	r5, #2
 8011f16:	d07d      	beq.n	8012014 <__kernel_rem_pio2f+0x25c>
 8011f18:	2e02      	cmp	r6, #2
 8011f1a:	d12d      	bne.n	8011f78 <__kernel_rem_pio2f+0x1c0>
 8011f1c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011f20:	ee30 8a48 	vsub.f32	s16, s0, s16
 8011f24:	b340      	cbz	r0, 8011f78 <__kernel_rem_pio2f+0x1c0>
 8011f26:	4628      	mov	r0, r5
 8011f28:	9306      	str	r3, [sp, #24]
 8011f2a:	f7ff fb8f 	bl	801164c <scalbnf>
 8011f2e:	9b06      	ldr	r3, [sp, #24]
 8011f30:	ee38 8a40 	vsub.f32	s16, s16, s0
 8011f34:	e020      	b.n	8011f78 <__kernel_rem_pio2f+0x1c0>
 8011f36:	ee60 7a28 	vmul.f32	s15, s0, s17
 8011f3a:	3e01      	subs	r6, #1
 8011f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f44:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8011f48:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011f4c:	ecac 0a01 	vstmia	ip!, {s0}
 8011f50:	ed30 0a01 	vldmdb	r0!, {s0}
 8011f54:	ee37 0a80 	vadd.f32	s0, s15, s0
 8011f58:	e79e      	b.n	8011e98 <__kernel_rem_pio2f+0xe0>
 8011f5a:	d105      	bne.n	8011f68 <__kernel_rem_pio2f+0x1b0>
 8011f5c:	1e60      	subs	r0, r4, #1
 8011f5e:	a908      	add	r1, sp, #32
 8011f60:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8011f64:	11f6      	asrs	r6, r6, #7
 8011f66:	e7c8      	b.n	8011efa <__kernel_rem_pio2f+0x142>
 8011f68:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011f6c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f74:	da31      	bge.n	8011fda <__kernel_rem_pio2f+0x222>
 8011f76:	2600      	movs	r6, #0
 8011f78:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f80:	f040 8098 	bne.w	80120b4 <__kernel_rem_pio2f+0x2fc>
 8011f84:	1e60      	subs	r0, r4, #1
 8011f86:	2200      	movs	r2, #0
 8011f88:	4550      	cmp	r0, sl
 8011f8a:	da4b      	bge.n	8012024 <__kernel_rem_pio2f+0x26c>
 8011f8c:	2a00      	cmp	r2, #0
 8011f8e:	d065      	beq.n	801205c <__kernel_rem_pio2f+0x2a4>
 8011f90:	3c01      	subs	r4, #1
 8011f92:	ab08      	add	r3, sp, #32
 8011f94:	3d08      	subs	r5, #8
 8011f96:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d0f8      	beq.n	8011f90 <__kernel_rem_pio2f+0x1d8>
 8011f9e:	4628      	mov	r0, r5
 8011fa0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011fa4:	f7ff fb52 	bl	801164c <scalbnf>
 8011fa8:	1c63      	adds	r3, r4, #1
 8011faa:	aa44      	add	r2, sp, #272	@ 0x110
 8011fac:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80120ac <__kernel_rem_pio2f+0x2f4>
 8011fb0:	0099      	lsls	r1, r3, #2
 8011fb2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011fb6:	4623      	mov	r3, r4
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	f280 80a9 	bge.w	8012110 <__kernel_rem_pio2f+0x358>
 8011fbe:	4623      	mov	r3, r4
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	f2c0 80c7 	blt.w	8012154 <__kernel_rem_pio2f+0x39c>
 8011fc6:	aa44      	add	r2, sp, #272	@ 0x110
 8011fc8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8011fcc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80120a4 <__kernel_rem_pio2f+0x2ec>
 8011fd0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80120b0 <__kernel_rem_pio2f+0x2f8>
 8011fd4:	2000      	movs	r0, #0
 8011fd6:	1ae2      	subs	r2, r4, r3
 8011fd8:	e0b1      	b.n	801213e <__kernel_rem_pio2f+0x386>
 8011fda:	2602      	movs	r6, #2
 8011fdc:	e78f      	b.n	8011efe <__kernel_rem_pio2f+0x146>
 8011fde:	f852 1b04 	ldr.w	r1, [r2], #4
 8011fe2:	b948      	cbnz	r0, 8011ff8 <__kernel_rem_pio2f+0x240>
 8011fe4:	b121      	cbz	r1, 8011ff0 <__kernel_rem_pio2f+0x238>
 8011fe6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8011fea:	f842 1c04 	str.w	r1, [r2, #-4]
 8011fee:	2101      	movs	r1, #1
 8011ff0:	f10e 0e01 	add.w	lr, lr, #1
 8011ff4:	4608      	mov	r0, r1
 8011ff6:	e787      	b.n	8011f08 <__kernel_rem_pio2f+0x150>
 8011ff8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8011ffc:	e7f5      	b.n	8011fea <__kernel_rem_pio2f+0x232>
 8011ffe:	f104 3cff 	add.w	ip, r4, #4294967295
 8012002:	aa08      	add	r2, sp, #32
 8012004:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012008:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801200c:	a908      	add	r1, sp, #32
 801200e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8012012:	e781      	b.n	8011f18 <__kernel_rem_pio2f+0x160>
 8012014:	f104 3cff 	add.w	ip, r4, #4294967295
 8012018:	aa08      	add	r2, sp, #32
 801201a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801201e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8012022:	e7f3      	b.n	801200c <__kernel_rem_pio2f+0x254>
 8012024:	a908      	add	r1, sp, #32
 8012026:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801202a:	3801      	subs	r0, #1
 801202c:	430a      	orrs	r2, r1
 801202e:	e7ab      	b.n	8011f88 <__kernel_rem_pio2f+0x1d0>
 8012030:	3201      	adds	r2, #1
 8012032:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8012036:	2e00      	cmp	r6, #0
 8012038:	d0fa      	beq.n	8012030 <__kernel_rem_pio2f+0x278>
 801203a:	9905      	ldr	r1, [sp, #20]
 801203c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8012040:	eb0d 0001 	add.w	r0, sp, r1
 8012044:	18e6      	adds	r6, r4, r3
 8012046:	a91c      	add	r1, sp, #112	@ 0x70
 8012048:	f104 0c01 	add.w	ip, r4, #1
 801204c:	384c      	subs	r0, #76	@ 0x4c
 801204e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8012052:	4422      	add	r2, r4
 8012054:	4562      	cmp	r2, ip
 8012056:	da04      	bge.n	8012062 <__kernel_rem_pio2f+0x2aa>
 8012058:	4614      	mov	r4, r2
 801205a:	e710      	b.n	8011e7e <__kernel_rem_pio2f+0xc6>
 801205c:	9804      	ldr	r0, [sp, #16]
 801205e:	2201      	movs	r2, #1
 8012060:	e7e7      	b.n	8012032 <__kernel_rem_pio2f+0x27a>
 8012062:	9903      	ldr	r1, [sp, #12]
 8012064:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012068:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801206c:	9105      	str	r1, [sp, #20]
 801206e:	ee07 1a90 	vmov	s15, r1
 8012072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012076:	2400      	movs	r4, #0
 8012078:	ece6 7a01 	vstmia	r6!, {s15}
 801207c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80120b0 <__kernel_rem_pio2f+0x2f8>
 8012080:	46b1      	mov	r9, r6
 8012082:	455c      	cmp	r4, fp
 8012084:	dd04      	ble.n	8012090 <__kernel_rem_pio2f+0x2d8>
 8012086:	ece0 7a01 	vstmia	r0!, {s15}
 801208a:	f10c 0c01 	add.w	ip, ip, #1
 801208e:	e7e1      	b.n	8012054 <__kernel_rem_pio2f+0x29c>
 8012090:	ecfe 6a01 	vldmia	lr!, {s13}
 8012094:	ed39 7a01 	vldmdb	r9!, {s14}
 8012098:	3401      	adds	r4, #1
 801209a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801209e:	e7f0      	b.n	8012082 <__kernel_rem_pio2f+0x2ca>
 80120a0:	08012a74 	.word	0x08012a74
 80120a4:	08012a48 	.word	0x08012a48
 80120a8:	43800000 	.word	0x43800000
 80120ac:	3b800000 	.word	0x3b800000
 80120b0:	00000000 	.word	0x00000000
 80120b4:	9b02      	ldr	r3, [sp, #8]
 80120b6:	eeb0 0a48 	vmov.f32	s0, s16
 80120ba:	eba3 0008 	sub.w	r0, r3, r8
 80120be:	f7ff fac5 	bl	801164c <scalbnf>
 80120c2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80120a8 <__kernel_rem_pio2f+0x2f0>
 80120c6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80120ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ce:	db19      	blt.n	8012104 <__kernel_rem_pio2f+0x34c>
 80120d0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80120ac <__kernel_rem_pio2f+0x2f4>
 80120d4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80120d8:	aa08      	add	r2, sp, #32
 80120da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120de:	3508      	adds	r5, #8
 80120e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120e4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80120e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80120f0:	ee10 3a10 	vmov	r3, s0
 80120f4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80120f8:	ee17 3a90 	vmov	r3, s15
 80120fc:	3401      	adds	r4, #1
 80120fe:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012102:	e74c      	b.n	8011f9e <__kernel_rem_pio2f+0x1e6>
 8012104:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012108:	aa08      	add	r2, sp, #32
 801210a:	ee10 3a10 	vmov	r3, s0
 801210e:	e7f6      	b.n	80120fe <__kernel_rem_pio2f+0x346>
 8012110:	a808      	add	r0, sp, #32
 8012112:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8012116:	9001      	str	r0, [sp, #4]
 8012118:	ee07 0a90 	vmov	s15, r0
 801211c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012120:	3b01      	subs	r3, #1
 8012122:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012126:	ee20 0a07 	vmul.f32	s0, s0, s14
 801212a:	ed62 7a01 	vstmdb	r2!, {s15}
 801212e:	e743      	b.n	8011fb8 <__kernel_rem_pio2f+0x200>
 8012130:	ecfc 6a01 	vldmia	ip!, {s13}
 8012134:	ecb5 7a01 	vldmia	r5!, {s14}
 8012138:	eee6 7a87 	vfma.f32	s15, s13, s14
 801213c:	3001      	adds	r0, #1
 801213e:	4550      	cmp	r0, sl
 8012140:	dc01      	bgt.n	8012146 <__kernel_rem_pio2f+0x38e>
 8012142:	4290      	cmp	r0, r2
 8012144:	ddf4      	ble.n	8012130 <__kernel_rem_pio2f+0x378>
 8012146:	a858      	add	r0, sp, #352	@ 0x160
 8012148:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801214c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8012150:	3b01      	subs	r3, #1
 8012152:	e735      	b.n	8011fc0 <__kernel_rem_pio2f+0x208>
 8012154:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012156:	2b02      	cmp	r3, #2
 8012158:	dc09      	bgt.n	801216e <__kernel_rem_pio2f+0x3b6>
 801215a:	2b00      	cmp	r3, #0
 801215c:	dc27      	bgt.n	80121ae <__kernel_rem_pio2f+0x3f6>
 801215e:	d040      	beq.n	80121e2 <__kernel_rem_pio2f+0x42a>
 8012160:	f009 0007 	and.w	r0, r9, #7
 8012164:	b059      	add	sp, #356	@ 0x164
 8012166:	ecbd 8b04 	vpop	{d8-d9}
 801216a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801216e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012170:	2b03      	cmp	r3, #3
 8012172:	d1f5      	bne.n	8012160 <__kernel_rem_pio2f+0x3a8>
 8012174:	aa30      	add	r2, sp, #192	@ 0xc0
 8012176:	1f0b      	subs	r3, r1, #4
 8012178:	4413      	add	r3, r2
 801217a:	461a      	mov	r2, r3
 801217c:	4620      	mov	r0, r4
 801217e:	2800      	cmp	r0, #0
 8012180:	dc50      	bgt.n	8012224 <__kernel_rem_pio2f+0x46c>
 8012182:	4622      	mov	r2, r4
 8012184:	2a01      	cmp	r2, #1
 8012186:	dc5d      	bgt.n	8012244 <__kernel_rem_pio2f+0x48c>
 8012188:	ab30      	add	r3, sp, #192	@ 0xc0
 801218a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80120b0 <__kernel_rem_pio2f+0x2f8>
 801218e:	440b      	add	r3, r1
 8012190:	2c01      	cmp	r4, #1
 8012192:	dc67      	bgt.n	8012264 <__kernel_rem_pio2f+0x4ac>
 8012194:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8012198:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801219c:	2e00      	cmp	r6, #0
 801219e:	d167      	bne.n	8012270 <__kernel_rem_pio2f+0x4b8>
 80121a0:	edc7 6a00 	vstr	s13, [r7]
 80121a4:	ed87 7a01 	vstr	s14, [r7, #4]
 80121a8:	edc7 7a02 	vstr	s15, [r7, #8]
 80121ac:	e7d8      	b.n	8012160 <__kernel_rem_pio2f+0x3a8>
 80121ae:	ab30      	add	r3, sp, #192	@ 0xc0
 80121b0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80120b0 <__kernel_rem_pio2f+0x2f8>
 80121b4:	440b      	add	r3, r1
 80121b6:	4622      	mov	r2, r4
 80121b8:	2a00      	cmp	r2, #0
 80121ba:	da24      	bge.n	8012206 <__kernel_rem_pio2f+0x44e>
 80121bc:	b34e      	cbz	r6, 8012212 <__kernel_rem_pio2f+0x45a>
 80121be:	eef1 7a47 	vneg.f32	s15, s14
 80121c2:	edc7 7a00 	vstr	s15, [r7]
 80121c6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80121ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80121ce:	aa31      	add	r2, sp, #196	@ 0xc4
 80121d0:	2301      	movs	r3, #1
 80121d2:	429c      	cmp	r4, r3
 80121d4:	da20      	bge.n	8012218 <__kernel_rem_pio2f+0x460>
 80121d6:	b10e      	cbz	r6, 80121dc <__kernel_rem_pio2f+0x424>
 80121d8:	eef1 7a67 	vneg.f32	s15, s15
 80121dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80121e0:	e7be      	b.n	8012160 <__kernel_rem_pio2f+0x3a8>
 80121e2:	ab30      	add	r3, sp, #192	@ 0xc0
 80121e4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80120b0 <__kernel_rem_pio2f+0x2f8>
 80121e8:	440b      	add	r3, r1
 80121ea:	2c00      	cmp	r4, #0
 80121ec:	da05      	bge.n	80121fa <__kernel_rem_pio2f+0x442>
 80121ee:	b10e      	cbz	r6, 80121f4 <__kernel_rem_pio2f+0x43c>
 80121f0:	eef1 7a67 	vneg.f32	s15, s15
 80121f4:	edc7 7a00 	vstr	s15, [r7]
 80121f8:	e7b2      	b.n	8012160 <__kernel_rem_pio2f+0x3a8>
 80121fa:	ed33 7a01 	vldmdb	r3!, {s14}
 80121fe:	3c01      	subs	r4, #1
 8012200:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012204:	e7f1      	b.n	80121ea <__kernel_rem_pio2f+0x432>
 8012206:	ed73 7a01 	vldmdb	r3!, {s15}
 801220a:	3a01      	subs	r2, #1
 801220c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012210:	e7d2      	b.n	80121b8 <__kernel_rem_pio2f+0x400>
 8012212:	eef0 7a47 	vmov.f32	s15, s14
 8012216:	e7d4      	b.n	80121c2 <__kernel_rem_pio2f+0x40a>
 8012218:	ecb2 7a01 	vldmia	r2!, {s14}
 801221c:	3301      	adds	r3, #1
 801221e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012222:	e7d6      	b.n	80121d2 <__kernel_rem_pio2f+0x41a>
 8012224:	ed72 7a01 	vldmdb	r2!, {s15}
 8012228:	edd2 6a01 	vldr	s13, [r2, #4]
 801222c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012230:	3801      	subs	r0, #1
 8012232:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012236:	ed82 7a00 	vstr	s14, [r2]
 801223a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801223e:	edc2 7a01 	vstr	s15, [r2, #4]
 8012242:	e79c      	b.n	801217e <__kernel_rem_pio2f+0x3c6>
 8012244:	ed73 7a01 	vldmdb	r3!, {s15}
 8012248:	edd3 6a01 	vldr	s13, [r3, #4]
 801224c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012250:	3a01      	subs	r2, #1
 8012252:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012256:	ed83 7a00 	vstr	s14, [r3]
 801225a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801225e:	edc3 7a01 	vstr	s15, [r3, #4]
 8012262:	e78f      	b.n	8012184 <__kernel_rem_pio2f+0x3cc>
 8012264:	ed33 7a01 	vldmdb	r3!, {s14}
 8012268:	3c01      	subs	r4, #1
 801226a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801226e:	e78f      	b.n	8012190 <__kernel_rem_pio2f+0x3d8>
 8012270:	eef1 6a66 	vneg.f32	s13, s13
 8012274:	eeb1 7a47 	vneg.f32	s14, s14
 8012278:	edc7 6a00 	vstr	s13, [r7]
 801227c:	ed87 7a01 	vstr	s14, [r7, #4]
 8012280:	eef1 7a67 	vneg.f32	s15, s15
 8012284:	e790      	b.n	80121a8 <__kernel_rem_pio2f+0x3f0>
 8012286:	bf00      	nop

08012288 <floor>:
 8012288:	ec51 0b10 	vmov	r0, r1, d0
 801228c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012294:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8012298:	2e13      	cmp	r6, #19
 801229a:	460c      	mov	r4, r1
 801229c:	4605      	mov	r5, r0
 801229e:	4680      	mov	r8, r0
 80122a0:	dc34      	bgt.n	801230c <floor+0x84>
 80122a2:	2e00      	cmp	r6, #0
 80122a4:	da17      	bge.n	80122d6 <floor+0x4e>
 80122a6:	a332      	add	r3, pc, #200	@ (adr r3, 8012370 <floor+0xe8>)
 80122a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ac:	f7ed ffba 	bl	8000224 <__adddf3>
 80122b0:	2200      	movs	r2, #0
 80122b2:	2300      	movs	r3, #0
 80122b4:	f7ee fbfc 	bl	8000ab0 <__aeabi_dcmpgt>
 80122b8:	b150      	cbz	r0, 80122d0 <floor+0x48>
 80122ba:	2c00      	cmp	r4, #0
 80122bc:	da55      	bge.n	801236a <floor+0xe2>
 80122be:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80122c2:	432c      	orrs	r4, r5
 80122c4:	2500      	movs	r5, #0
 80122c6:	42ac      	cmp	r4, r5
 80122c8:	4c2b      	ldr	r4, [pc, #172]	@ (8012378 <floor+0xf0>)
 80122ca:	bf08      	it	eq
 80122cc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80122d0:	4621      	mov	r1, r4
 80122d2:	4628      	mov	r0, r5
 80122d4:	e023      	b.n	801231e <floor+0x96>
 80122d6:	4f29      	ldr	r7, [pc, #164]	@ (801237c <floor+0xf4>)
 80122d8:	4137      	asrs	r7, r6
 80122da:	ea01 0307 	and.w	r3, r1, r7
 80122de:	4303      	orrs	r3, r0
 80122e0:	d01d      	beq.n	801231e <floor+0x96>
 80122e2:	a323      	add	r3, pc, #140	@ (adr r3, 8012370 <floor+0xe8>)
 80122e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e8:	f7ed ff9c 	bl	8000224 <__adddf3>
 80122ec:	2200      	movs	r2, #0
 80122ee:	2300      	movs	r3, #0
 80122f0:	f7ee fbde 	bl	8000ab0 <__aeabi_dcmpgt>
 80122f4:	2800      	cmp	r0, #0
 80122f6:	d0eb      	beq.n	80122d0 <floor+0x48>
 80122f8:	2c00      	cmp	r4, #0
 80122fa:	bfbe      	ittt	lt
 80122fc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8012300:	4133      	asrlt	r3, r6
 8012302:	18e4      	addlt	r4, r4, r3
 8012304:	ea24 0407 	bic.w	r4, r4, r7
 8012308:	2500      	movs	r5, #0
 801230a:	e7e1      	b.n	80122d0 <floor+0x48>
 801230c:	2e33      	cmp	r6, #51	@ 0x33
 801230e:	dd0a      	ble.n	8012326 <floor+0x9e>
 8012310:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8012314:	d103      	bne.n	801231e <floor+0x96>
 8012316:	4602      	mov	r2, r0
 8012318:	460b      	mov	r3, r1
 801231a:	f7ed ff83 	bl	8000224 <__adddf3>
 801231e:	ec41 0b10 	vmov	d0, r0, r1
 8012322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012326:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801232a:	f04f 37ff 	mov.w	r7, #4294967295
 801232e:	40df      	lsrs	r7, r3
 8012330:	4207      	tst	r7, r0
 8012332:	d0f4      	beq.n	801231e <floor+0x96>
 8012334:	a30e      	add	r3, pc, #56	@ (adr r3, 8012370 <floor+0xe8>)
 8012336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801233a:	f7ed ff73 	bl	8000224 <__adddf3>
 801233e:	2200      	movs	r2, #0
 8012340:	2300      	movs	r3, #0
 8012342:	f7ee fbb5 	bl	8000ab0 <__aeabi_dcmpgt>
 8012346:	2800      	cmp	r0, #0
 8012348:	d0c2      	beq.n	80122d0 <floor+0x48>
 801234a:	2c00      	cmp	r4, #0
 801234c:	da0a      	bge.n	8012364 <floor+0xdc>
 801234e:	2e14      	cmp	r6, #20
 8012350:	d101      	bne.n	8012356 <floor+0xce>
 8012352:	3401      	adds	r4, #1
 8012354:	e006      	b.n	8012364 <floor+0xdc>
 8012356:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801235a:	2301      	movs	r3, #1
 801235c:	40b3      	lsls	r3, r6
 801235e:	441d      	add	r5, r3
 8012360:	4545      	cmp	r5, r8
 8012362:	d3f6      	bcc.n	8012352 <floor+0xca>
 8012364:	ea25 0507 	bic.w	r5, r5, r7
 8012368:	e7b2      	b.n	80122d0 <floor+0x48>
 801236a:	2500      	movs	r5, #0
 801236c:	462c      	mov	r4, r5
 801236e:	e7af      	b.n	80122d0 <floor+0x48>
 8012370:	8800759c 	.word	0x8800759c
 8012374:	7e37e43c 	.word	0x7e37e43c
 8012378:	bff00000 	.word	0xbff00000
 801237c:	000fffff 	.word	0x000fffff

08012380 <floorf>:
 8012380:	ee10 3a10 	vmov	r3, s0
 8012384:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012388:	3a7f      	subs	r2, #127	@ 0x7f
 801238a:	2a16      	cmp	r2, #22
 801238c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012390:	dc2b      	bgt.n	80123ea <floorf+0x6a>
 8012392:	2a00      	cmp	r2, #0
 8012394:	da12      	bge.n	80123bc <floorf+0x3c>
 8012396:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80123fc <floorf+0x7c>
 801239a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801239e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80123a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123a6:	dd06      	ble.n	80123b6 <floorf+0x36>
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	da24      	bge.n	80123f6 <floorf+0x76>
 80123ac:	2900      	cmp	r1, #0
 80123ae:	4b14      	ldr	r3, [pc, #80]	@ (8012400 <floorf+0x80>)
 80123b0:	bf08      	it	eq
 80123b2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80123b6:	ee00 3a10 	vmov	s0, r3
 80123ba:	4770      	bx	lr
 80123bc:	4911      	ldr	r1, [pc, #68]	@ (8012404 <floorf+0x84>)
 80123be:	4111      	asrs	r1, r2
 80123c0:	420b      	tst	r3, r1
 80123c2:	d0fa      	beq.n	80123ba <floorf+0x3a>
 80123c4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80123fc <floorf+0x7c>
 80123c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80123cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80123d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123d4:	ddef      	ble.n	80123b6 <floorf+0x36>
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	bfbe      	ittt	lt
 80123da:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80123de:	fa40 f202 	asrlt.w	r2, r0, r2
 80123e2:	189b      	addlt	r3, r3, r2
 80123e4:	ea23 0301 	bic.w	r3, r3, r1
 80123e8:	e7e5      	b.n	80123b6 <floorf+0x36>
 80123ea:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80123ee:	d3e4      	bcc.n	80123ba <floorf+0x3a>
 80123f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80123f4:	4770      	bx	lr
 80123f6:	2300      	movs	r3, #0
 80123f8:	e7dd      	b.n	80123b6 <floorf+0x36>
 80123fa:	bf00      	nop
 80123fc:	7149f2ca 	.word	0x7149f2ca
 8012400:	bf800000 	.word	0xbf800000
 8012404:	007fffff 	.word	0x007fffff

08012408 <_init>:
 8012408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801240a:	bf00      	nop
 801240c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801240e:	bc08      	pop	{r3}
 8012410:	469e      	mov	lr, r3
 8012412:	4770      	bx	lr

08012414 <_fini>:
 8012414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012416:	bf00      	nop
 8012418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801241a:	bc08      	pop	{r3}
 801241c:	469e      	mov	lr, r3
 801241e:	4770      	bx	lr
