
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011220  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  080113f8  080113f8  000123f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a58  08011a58  00013190  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011a58  08011a58  00012a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a60  08011a60  00013190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a60  08011a60  00012a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011a64  08011a64  00012a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  08011a68  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002150  20000190  08011bf8  00013190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022e0  08011bf8  000132e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c189  00000000  00000000  000131c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005581  00000000  00000000  0003f349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c60  00000000  00000000  000448d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015fc  00000000  00000000  00046530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db5d  00000000  00000000  00047b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002accf  00000000  00000000  00075689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119b90  00000000  00000000  000a0358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b9ee8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000817c  00000000  00000000  001b9f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c20a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000190 	.word	0x20000190
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080113e0 	.word	0x080113e0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000194 	.word	0x20000194
 8000214:	080113e0 	.word	0x080113e0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f007 fe44 	bl	8008c6c <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f006 ff2d 	bl	8007e50 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fdf0 	bl	8001d20 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3328      	adds	r3, #40	@ 0x28
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f001 ffd1 	bl	8003308 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8b3a      	ldrh	r2, [r7, #24]
 8001370:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001390:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800139a:	2b00      	cmp	r3, #0
 800139c:	d15f      	bne.n	800145e <MDXX_set_range+0xda>
		if (duty == 0) {
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d115      	bne.n	80013d8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3310      	adds	r3, #16
 80013b0:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001530 <MDXX_set_range+0x1ac>
 80013b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 ffc9 	bl	8003350 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3328      	adds	r3, #40	@ 0x28
 80013c2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001530 <MDXX_set_range+0x1ac>
 80013c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 ffc0 	bl	8003350 <PWM_write_range>
			mdxx->cmd = 0;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80013d6:	e0a6      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80013d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	dd1a      	ble.n	800141c <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3310      	adds	r3, #16
 80013ea:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001530 <MDXX_set_range+0x1ac>
 80013ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 ffac 	bl	8003350 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3328      	adds	r3, #40	@ 0x28
 80013fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8001400:	ed97 0a02 	vldr	s0, [r7, #8]
 8001404:	4618      	mov	r0, r3
 8001406:	f001 ffa3 	bl	8003350 <PWM_write_range>
			mdxx->cmd = duty;
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001412:	ee17 2a90 	vmov	r2, s15
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800141a:	e084      	b.n	8001526 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3310      	adds	r3, #16
 8001420:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001534 <MDXX_set_range+0x1b0>
 8001424:	ed97 0a02 	vldr	s0, [r7, #8]
 8001428:	4618      	mov	r0, r3
 800142a:	f001 ff91 	bl	8003350 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3328      	adds	r3, #40	@ 0x28
 8001432:	edd7 7a01 	vldr	s15, [r7, #4]
 8001436:	eef0 7ae7 	vabs.f32	s15, s15
 800143a:	eef0 0a67 	vmov.f32	s1, s15
 800143e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001442:	4618      	mov	r0, r3
 8001444:	f001 ff84 	bl	8003350 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	eef0 7ae7 	vabs.f32	s15, s15
 8001450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001454:	ee17 2a90 	vmov	r2, s15
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145c:	e063      	b.n	8001526 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001464:	2b01      	cmp	r3, #1
 8001466:	d15e      	bne.n	8001526 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001468:	edd7 7a01 	vldr	s15, [r7, #4]
 800146c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d115      	bne.n	80014a2 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	f008 fb38 	bl	8009af8 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3328      	adds	r3, #40	@ 0x28
 800148c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001530 <MDXX_set_range+0x1ac>
 8001490:	ed97 0a02 	vldr	s0, [r7, #8]
 8001494:	4618      	mov	r0, r3
 8001496:	f001 ff5b 	bl	8003350 <PWM_write_range>
			mdxx->cmd = 0;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e041      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd1a      	ble.n	80014e6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	f008 fb1b 	bl	8009af8 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3328      	adds	r3, #40	@ 0x28
 80014c6:	edd7 0a01 	vldr	s1, [r7, #4]
 80014ca:	ed97 0a02 	vldr	s0, [r7, #8]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 ff3e 	bl	8003350 <PWM_write_range>
			mdxx->cmd = duty;
 80014d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 2a90 	vmov	r2, s15
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e01f      	b.n	8001526 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	f008 fb00 	bl	8009af8 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3328      	adds	r3, #40	@ 0x28
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	eef0 7ae7 	vabs.f32	s15, s15
 8001504:	eef0 0a67 	vmov.f32	s1, s15
 8001508:	ed97 0a02 	vldr	s0, [r7, #8]
 800150c:	4618      	mov	r0, r3
 800150e:	f001 ff1f 	bl	8003350 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001512:	edd7 7a01 	vldr	s15, [r7, #4]
 8001516:	eef0 7ae7 	vabs.f32	s15, s15
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 2a90 	vmov	r2, s15
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00000000 	.word	0x00000000
 8001534:	42c80000 	.word	0x42c80000

08001538 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	ed2d 8b02 	vpush	{d8}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001574:	f7ff f80c 	bl	8000590 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001590:	f7fe fffe 	bl	8000590 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4620      	mov	r0, r4
 800159a:	4629      	mov	r1, r5
 800159c:	f7fe fe42 	bl	8000224 <__adddf3>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015b0:	f7ff f918 	bl	80007e4 <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff faca 	bl	8000b54 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 80015c4:	ed97 7a00 	vldr	s14, [r7]
 80015c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d0:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fab8 	bl	8000b54 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb1 8a67 	vneg.f32	s16, s15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff faab 	bl	8000b54 <__aeabi_d2f>
 80015fe:	4604      	mov	r4, r0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff faa2 	bl	8000b54 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef1 8a67 	vneg.f32	s17, s15
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fa95 	bl	8000b54 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	ee02 3a10 	vmov	s4, r3
 8001630:	eef0 1a68 	vmov.f32	s3, s17
 8001634:	ee01 4a10 	vmov	s2, r4
 8001638:	eef0 0a48 	vmov.f32	s1, s16
 800163c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001640:	f000 fb6e 	bl	8001d20 <mapf>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
}
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	ecbd 8b02 	vpop	{d8}
 8001654:	bdb0      	pop	{r4, r5, r7, pc}

08001656 <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	605a      	str	r2, [r3, #4]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qdd, float s){
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	ed2d 8b02 	vpush	{d8}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	ed87 0a02 	vstr	s0, [r7, #8]
 800168c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001690:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * s;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	ed93 7a01 	vldr	s14, [r3, #4]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a8:	ee17 0a90 	vmov	r0, s15
 80016ac:	f7fe ff18 	bl	80004e0 <__aeabi_f2d>
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	68b8      	ldr	r0, [r7, #8]
 80016b6:	f7fe ff13 	bl	80004e0 <__aeabi_f2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	ec43 2b10 	vmov	d0, r2, r3
 80016c2:	f00d ffd9 	bl	800f678 <sin>
 80016c6:	ec53 2b10 	vmov	r2, r3, d0
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe ff5f 	bl	8000590 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4614      	mov	r4, r2
 80016d8:	461d      	mov	r5, r3
 80016da:	6838      	ldr	r0, [r7, #0]
 80016dc:	f7fe ff00 	bl	80004e0 <__aeabi_f2d>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4620      	mov	r0, r4
 80016e6:	4629      	mov	r1, r5
 80016e8:	f7fe ff52 	bl	8000590 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fa2e 	bl	8000b54 <__aeabi_d2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->plotter_mass * motor->En->g * sin(q) * motor->En->c;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	ed93 7a01 	vldr	s14, [r3, #4]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001710:	ee17 0a90 	vmov	r0, s15
 8001714:	f7fe fee4 	bl	80004e0 <__aeabi_f2d>
 8001718:	4604      	mov	r4, r0
 800171a:	460d      	mov	r5, r1
 800171c:	68b8      	ldr	r0, [r7, #8]
 800171e:	f7fe fedf 	bl	80004e0 <__aeabi_f2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	ec43 2b10 	vmov	d0, r2, r3
 800172a:	f00d ffa5 	bl	800f678 <sin>
 800172e:	ec53 2b10 	vmov	r2, r3, d0
 8001732:	4620      	mov	r0, r4
 8001734:	4629      	mov	r1, r5
 8001736:	f7fe ff2b 	bl	8000590 <__aeabi_dmul>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4614      	mov	r4, r2
 8001740:	461d      	mov	r5, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fec9 	bl	80004e0 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f7fe ff1b 	bl	8000590 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff f9f7 	bl	8000b54 <__aeabi_d2f>
 8001766:	4603      	mov	r3, r0
 8001768:	61bb      	str	r3, [r7, #24]
//    float mass_torque = motor->En->plotter_mass * s*s * qdd;

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800177a:	f7ff f833 	bl	80007e4 <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff f9e5 	bl	8000b54 <__aeabi_d2f>
 800178a:	4603      	mov	r3, r0
 800178c:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + gravity_compensate_rail + 0) * transfer_function;
 800178e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001792:	edd7 7a06 	vldr	s15, [r7, #24]
 8001796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001830 <REVOLUTE_MOTOR_DFD_Compute+0x1b4>
 800179e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80017a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017aa:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff f9cb 	bl	8000b54 <__aeabi_d2f>
 80017be:	4603      	mov	r3, r0
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eeb1 8a67 	vneg.f32	s16, s15
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f9be 	bl	8000b54 <__aeabi_d2f>
 80017d8:	4604      	mov	r4, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff f9b5 	bl	8000b54 <__aeabi_d2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eef1 8a67 	vneg.f32	s17, s15
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f9a8 	bl	8000b54 <__aeabi_d2f>
 8001804:	4603      	mov	r3, r0
 8001806:	ee02 3a10 	vmov	s4, r3
 800180a:	eef0 1a68 	vmov.f32	s3, s17
 800180e:	ee01 4a10 	vmov	s2, r4
 8001812:	eef0 0a48 	vmov.f32	s1, s16
 8001816:	ed97 0a04 	vldr	s0, [r7, #16]
 800181a:	f000 fa81 	bl	8001d20 <mapf>
 800181e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001822:	eeb0 0a67 	vmov.f32	s0, s15
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	ecbd 8b02 	vpop	{d8}
 800182e:	bdb0      	pop	{r4, r5, r7, pc}
 8001830:	00000000 	.word	0x00000000

08001834 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	ed2d 8b02 	vpush	{d8}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001870:	f7fe fe8e 	bl	8000590 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4614      	mov	r4, r2
 800187a:	461d      	mov	r5, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800188c:	f7fe fe80 	bl	8000590 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7fe fcc4 	bl	8000224 <__adddf3>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018ac:	f7fe ff9a 	bl	80007e4 <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f94c 	bl	8000b54 <__aeabi_d2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 80018c0:	ed97 7a00 	vldr	s14, [r7]
 80018c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f7ff f93a 	bl	8000b54 <__aeabi_d2f>
 80018e0:	4603      	mov	r3, r0
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eeb1 8a67 	vneg.f32	s16, s15
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f92d 	bl	8000b54 <__aeabi_d2f>
 80018fa:	4604      	mov	r4, r0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f924 	bl	8000b54 <__aeabi_d2f>
 800190c:	4603      	mov	r3, r0
 800190e:	ee07 3a90 	vmov	s15, r3
 8001912:	eef1 8a67 	vneg.f32	s17, s15
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f917 	bl	8000b54 <__aeabi_d2f>
 8001926:	4603      	mov	r3, r0
 8001928:	ee02 3a10 	vmov	s4, r3
 800192c:	eef0 1a68 	vmov.f32	s3, s17
 8001930:	ee01 4a10 	vmov	s2, r4
 8001934:	eef0 0a48 	vmov.f32	s1, s16
 8001938:	ed97 0a02 	vldr	s0, [r7, #8]
 800193c:	f000 f9f0 	bl	8001d20 <mapf>
 8001940:	eef0 7a40 	vmov.f32	s15, s0
}
 8001944:	eeb0 0a67 	vmov.f32	s0, s15
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	ecbd 8b02 	vpop	{d8}
 8001950:	bdb0      	pop	{r4, r5, r7, pc}

08001952 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	605a      	str	r2, [r3, #4]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 8001976:	b5b0      	push	{r4, r5, r7, lr}
 8001978:	ed2d 8b02 	vpush	{d8}
 800197c:	b088      	sub	sp, #32
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	ed87 0a02 	vstr	s0, [r7, #8]
 8001986:	edc7 0a01 	vstr	s1, [r7, #4]
 800198a:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	ed93 7a01 	vldr	s14, [r3, #4]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a2:	ee17 0a90 	vmov	r0, s15
 80019a6:	f7fe fd9b 	bl	80004e0 <__aeabi_f2d>
 80019aa:	4604      	mov	r4, r0
 80019ac:	460d      	mov	r5, r1
 80019ae:	68b8      	ldr	r0, [r7, #8]
 80019b0:	f7fe fd96 	bl	80004e0 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	ec43 2b10 	vmov	d0, r2, r3
 80019bc:	f00d fe08 	bl	800f5d0 <cos>
 80019c0:	ec53 2b10 	vmov	r2, r3, d0
 80019c4:	4620      	mov	r0, r4
 80019c6:	4629      	mov	r1, r5
 80019c8:	f7fe fde2 	bl	8000590 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f8be 	bl	8000b54 <__aeabi_d2f>
 80019d8:	4603      	mov	r3, r0
 80019da:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80019e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f4:	ed97 7a00 	vldr	s14, [r7]
 80019f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fc:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd66 	bl	80004e0 <__aeabi_f2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4620      	mov	r0, r4
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f7fe fdb8 	bl	8000590 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a30:	f7fe fed8 	bl	80007e4 <__aeabi_ddiv>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff f88a 	bl	8000b54 <__aeabi_d2f>
 8001a40:	4603      	mov	r3, r0
 8001a42:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a44:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a48:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a50:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a58:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f874 	bl	8000b54 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eeb1 8a67 	vneg.f32	s16, s15
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7ff f867 	bl	8000b54 <__aeabi_d2f>
 8001a86:	4604      	mov	r4, r0
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f85e 	bl	8000b54 <__aeabi_d2f>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef1 8a67 	vneg.f32	s17, s15
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f851 	bl	8000b54 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	ee02 3a10 	vmov	s4, r3
 8001ab8:	eef0 1a68 	vmov.f32	s3, s17
 8001abc:	ee01 4a10 	vmov	s2, r4
 8001ac0:	eef0 0a48 	vmov.f32	s1, s16
 8001ac4:	ed97 0a04 	vldr	s0, [r7, #16]
 8001ac8:	f000 f92a 	bl	8001d20 <mapf>
 8001acc:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	ecbd 8b02 	vpop	{d8}
 8001adc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ae0 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	ed2d 8b02 	vpush	{d8}
 8001ae6:	b08a      	sub	sp, #40	@ 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	460b      	mov	r3, r1
 8001aee:	ed87 0a01 	vstr	s0, [r7, #4]
 8001af2:	edc7 0a00 	vstr	s1, [r7]
 8001af6:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001af8:	897b      	ldrh	r3, [r7, #10]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <FIR_init+0x2a>
        numTaps += 1;
 8001b04:	897b      	ldrh	r3, [r7, #10]
 8001b06:	3301      	adds	r3, #1
 8001b08:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	897a      	ldrh	r2, [r7, #10]
 8001b0e:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b16:	897b      	ldrh	r3, [r7, #10]
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f00d fc50 	bl	800f3c0 <malloc>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b28:	897b      	ldrh	r3, [r7, #10]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00d fc47 	bl	800f3c0 <malloc>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80e0 	beq.w	8001d04 <FIR_init+0x224>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80db 	beq.w	8001d04 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b4e:	2300      	movs	r3, #0
 8001b50:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b52:	e00a      	b.n	8001b6a <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b66:	3301      	adds	r3, #1
 8001b68:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b6a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001b6c:	897b      	ldrh	r3, [r7, #10]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d3f0      	bcc.n	8001b54 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001b72:	edd7 6a01 	vldr	s13, [r7, #4]
 8001b76:	ed97 7a00 	vldr	s14, [r7]
 8001b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7e:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001b82:	897b      	ldrh	r3, [r7, #10]
 8001b84:	085b      	lsrs	r3, r3, #1
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001b8e:	e077      	b.n	8001c80 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001b90:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001b94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d10c      	bne.n	8001bb6 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
 8001bb4:	e02c      	b.n	8001c10 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001bb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bb8:	8afb      	ldrh	r3, [r7, #22]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001bc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bc4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d10 <FIR_init+0x230>
 8001bc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bcc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bd0:	ee07 3a90 	vmov	s15, r3
 8001bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001be0:	f00d fe20 	bl	800f824 <sinf>
 8001be4:	eef0 6a40 	vmov.f32	s13, s0
 8001be8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d14 <FIR_init+0x234>
 8001bf8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c0c:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	ed93 8a00 	vldr	s16, [r3]
 8001c20:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c24:	ee07 3a90 	vmov	s15, r3
 8001c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d10 <FIR_init+0x230>
 8001c30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c34:	897b      	ldrh	r3, [r7, #10]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	ee07 3a90 	vmov	s15, r3
 8001c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c40:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c44:	eeb0 0a66 	vmov.f32	s0, s13
 8001c48:	f00d fda8 	bl	800f79c <cosf>
 8001c4c:	eef0 7a40 	vmov.f32	s15, s0
 8001c50:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d18 <FIR_init+0x238>
 8001c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c58:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d1c <FIR_init+0x23c>
 8001c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001c70:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001c74:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001c80:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001c84:	897b      	ldrh	r3, [r7, #10]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	db82      	blt.n	8001b90 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001c90:	2300      	movs	r3, #0
 8001c92:	83fb      	strh	r3, [r7, #30]
 8001c94:	e00f      	b.n	8001cb6 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	8bfb      	ldrh	r3, [r7, #30]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cac:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001cb0:	8bfb      	ldrh	r3, [r7, #30]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	83fb      	strh	r3, [r7, #30]
 8001cb6:	8bfa      	ldrh	r2, [r7, #30]
 8001cb8:	897b      	ldrh	r3, [r7, #10]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d3eb      	bcc.n	8001c96 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001cbe:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cca:	d01b      	beq.n	8001d04 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	83bb      	strh	r3, [r7, #28]
 8001cd0:	e014      	b.n	8001cfc <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	8bbb      	ldrh	r3, [r7, #28]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	edd3 6a00 	vldr	s13, [r3]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	8bbb      	ldrh	r3, [r7, #28]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf2:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001cf6:	8bbb      	ldrh	r3, [r7, #28]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	83bb      	strh	r3, [r7, #28]
 8001cfc:	8bba      	ldrh	r2, [r7, #28]
 8001cfe:	897b      	ldrh	r3, [r7, #10]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d3e6      	bcc.n	8001cd2 <FIR_init+0x1f2>
            }
        }
    }
}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	@ 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	ecbd 8b02 	vpop	{d8}
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40c90fdb 	.word	0x40c90fdb
 8001d14:	40490fdb 	.word	0x40490fdb
 8001d18:	3eeb851f 	.word	0x3eeb851f
 8001d1c:	3f0a3d71 	.word	0x3f0a3d71

08001d20 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	@ 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d2a:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d2e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d32:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d36:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001d3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d42:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d46:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d56:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001d5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d66:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d76:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	ee07 3a90 	vmov	s15, r3
}
 8001d80:	eeb0 0a67 	vmov.f32	s0, s15
 8001d84:	3724      	adds	r7, #36	@ 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001d94:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <modbus_1t5_Timeout+0x3c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <modbus_1t5_Timeout+0x3c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2200      	movs	r2, #0
 8001da6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001da8:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <modbus_1t5_Timeout+0x3c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <modbus_1t5_Timeout+0x3c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	200001ac 	.word	0x200001ac

08001dd0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001dd8:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <modbus_3t5_Timeout+0x1c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	755a      	strb	r2, [r3, #21]

}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	200001ac 	.word	0x200001ac

08001df0 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f00b fd27 	bl	800d84c <HAL_UART_GetError>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d101      	bne.n	8001e08 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001e04:	f7ff ffc4 	bl	8001d90 <modbus_1t5_Timeout>

	}
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001e24:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001e2c:	4b29      	ldr	r3, [pc, #164]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001e34:	4b27      	ldr	r3, [pc, #156]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001e3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	7e3a      	ldrb	r2, [r7, #24]
 8001e42:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001e44:	4b23      	ldr	r3, [pc, #140]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	4a21      	ldr	r2, [pc, #132]	@ (8001ed8 <Modbus_init+0xc8>)
 8001e52:	210e      	movs	r1, #14
 8001e54:	4618      	mov	r0, r3
 8001e56:	f009 ffa7 	bl	800bda8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2110      	movs	r1, #16
 8001e60:	4618      	mov	r0, r3
 8001e62:	f00b fc9d 	bl	800d7a0 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f00b fcb4 	bl	800d7d8 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a19      	ldr	r2, [pc, #100]	@ (8001edc <Modbus_init+0xcc>)
 8001e76:	2104      	movs	r1, #4
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f00a ffe5 	bl	800ce48 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001e84:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <Modbus_init+0xc4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001e90:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001e94:	4413      	add	r3, r2
 8001e96:	3302      	adds	r3, #2
 8001e98:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f00b f88d 	bl	800cfbc <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <Modbus_init+0xc4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d10c      	bne.n	8001ecc <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001eb2:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <Modbus_init+0xc4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f008 ff51 	bl	800ad60 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001ebe:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <Modbus_init+0xc4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f009 f9a0 	bl	800b20c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	200001ac 	.word	0x200001ac
 8001ed8:	08001dd1 	.word	0x08001dd1
 8001edc:	08001df1 	.word	0x08001df1

08001ee0 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	@ 0x30
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6278      	str	r0, [r7, #36]	@ 0x24
 8001ee8:	ed87 0a08 	vstr	s0, [r7, #32]
 8001eec:	edc7 0a07 	vstr	s1, [r7, #28]
 8001ef0:	ed87 1a06 	vstr	s2, [r7, #24]
 8001ef4:	edc7 1a05 	vstr	s3, [r7, #20]
 8001ef8:	ed87 2a04 	vstr	s4, [r7, #16]
 8001efc:	edc7 2a03 	vstr	s5, [r7, #12]
 8001f00:	ed87 3a02 	vstr	s6, [r7, #8]
 8001f04:	edc7 3a01 	vstr	s7, [r7, #4]
 8001f08:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0e:	6a3a      	ldr	r2, [r7, #32]
 8001f10:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	2210      	movs	r2, #16
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f00d faee 	bl	800f52c <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	3310      	adds	r3, #16
 8001f54:	2240      	movs	r2, #64	@ 0x40
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f00d fae7 	bl	800f52c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f62:	e00c      	b.n	8001f7e <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8001f64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f6e:	3304      	adds	r3, #4
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	4a79      	ldr	r2, [pc, #484]	@ (800215c <MotorKalman_Init+0x27c>)
 8001f76:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	ddef      	ble.n	8001f64 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001f8a:	2240      	movs	r2, #64	@ 0x40
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f00d facc 	bl	800f52c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f94:	2300      	movs	r3, #0
 8001f96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f98:	e00d      	b.n	8001fb6 <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001f9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa4:	33be      	adds	r3, #190	@ 0xbe
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fae:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	ddee      	ble.n	8001f9a <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	33f0      	adds	r3, #240	@ 0xf0
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f00d fab1 	bl	800f52c <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fd0:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001fda:	2210      	movs	r2, #16
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f00d faa4 	bl	800f52c <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fea:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8001fee:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ff2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ff4:	f000 f922 	bl	800223c <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8001ff8:	ed97 0a00 	vldr	s0, [r7]
 8001ffc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ffe:	f000 f94d 	bl	800229c <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	2201      	movs	r2, #1
 800200c:	2104      	movs	r1, #4
 800200e:	f00c fd1c 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	3310      	adds	r3, #16
 800201c:	2204      	movs	r2, #4
 800201e:	2104      	movs	r1, #4
 8002020:	f00c fd13 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002030:	2204      	movs	r2, #4
 8002032:	2104      	movs	r1, #4
 8002034:	f00c fd09 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002044:	2201      	movs	r2, #1
 8002046:	2101      	movs	r1, #1
 8002048:	f00c fcff 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8002058:	2201      	movs	r2, #1
 800205a:	2101      	movs	r1, #1
 800205c:	f00c fcf5 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 800206c:	2201      	movs	r2, #1
 800206e:	2101      	movs	r1, #1
 8002070:	f00c fceb 	bl	800ea4a <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8002080:	2204      	movs	r2, #4
 8002082:	2104      	movs	r1, #4
 8002084:	f00c fce1 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 8002088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208a:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8002094:	2201      	movs	r2, #1
 8002096:	2104      	movs	r1, #4
 8002098:	f00c fcd7 	bl	800ea4a <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020a8:	2201      	movs	r2, #1
 80020aa:	2104      	movs	r1, #4
 80020ac:	f00c fccd 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 80020bc:	2204      	movs	r2, #4
 80020be:	2104      	movs	r1, #4
 80020c0:	f00c fcc3 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 80020d0:	2204      	movs	r2, #4
 80020d2:	2101      	movs	r1, #1
 80020d4:	f00c fcb9 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80020e4:	2201      	movs	r2, #1
 80020e6:	2101      	movs	r1, #1
 80020e8:	f00c fcaf 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 80020f8:	2201      	movs	r2, #1
 80020fa:	2104      	movs	r1, #4
 80020fc:	f00c fca5 	bl	800ea4a <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002100:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002102:	f000 f82d 	bl	8002160 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	3390      	adds	r3, #144	@ 0x90
 8002110:	2204      	movs	r2, #4
 8002112:	2104      	movs	r1, #4
 8002114:	f00c fc99 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	33e0      	adds	r3, #224	@ 0xe0
 8002122:	2201      	movs	r2, #1
 8002124:	2104      	movs	r1, #4
 8002126:	f00c fc90 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002136:	2204      	movs	r2, #4
 8002138:	2104      	movs	r1, #4
 800213a:	f00c fc86 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800214a:	2201      	movs	r2, #1
 800214c:	2104      	movs	r1, #4
 800214e:	f00c fc7c 	bl	800ea4a <arm_mat_init_f32>
}
 8002152:	bf00      	nop
 8002154:	3730      	adds	r7, #48	@ 0x30
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	42c80000 	.word	0x42c80000

08002160 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	eeb0 3a64 	vmov.f32	s6, s9
 80021a4:	eef0 2a45 	vmov.f32	s5, s10
 80021a8:	eeb0 2a65 	vmov.f32	s4, s11
 80021ac:	eef0 1a46 	vmov.f32	s3, s12
 80021b0:	eeb0 1a66 	vmov.f32	s2, s13
 80021b4:	eef0 0a47 	vmov.f32	s1, s14
 80021b8:	eeb0 0a67 	vmov.f32	s0, s15
 80021bc:	f001 f83c 	bl	8003238 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021c6:	2240      	movs	r2, #64	@ 0x40
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f00d f9ae 	bl	800f52c <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80021d6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002234 <MotorKalman_DiscretizeModel+0xd4>
 80021da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80021e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80021fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800220a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002238 <MotorKalman_DiscretizeModel+0xd8>
 800220e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800221e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002234 <MotorKalman_DiscretizeModel+0xd4>
 8002222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	3c23d70a 	.word	0x3c23d70a
 8002238:	3dcccccd 	.word	0x3dcccccd

0800223c <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800224e:	2240      	movs	r2, #64	@ 0x40
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f00d f96a 	bl	800f52c <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8002258:	edd7 7a00 	vldr	s15, [r7]
 800225c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8002274:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227c:	d107      	bne.n	800228e <MotorKalman_SetProcessNoise+0x52>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8002284:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228c:	d002      	beq.n	8002294 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff66 	bl	8002160 <MotorKalman_DiscretizeModel>
    }
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 80022a8:	ed97 0a00 	vldr	s0, [r7]
 80022ac:	f00d fa58 	bl	800f760 <sqrtf>
 80022b0:	eef0 7a40 	vmov.f32	s15, s0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b0b2      	sub	sp, #200	@ 0xc8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 80022de:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80022f2:	e041      	b.n	8002378 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 80022f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	33c8      	adds	r3, #200	@ 0xc8
 80022fc:	443b      	add	r3, r7
 80022fe:	3b3c      	subs	r3, #60	@ 0x3c
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800230c:	e02b      	b.n	8002366 <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 800230e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	33c8      	adds	r3, #200	@ 0xc8
 8002316:	443b      	add	r3, r7
 8002318:	3b3c      	subs	r3, #60	@ 0x3c
 800231a:	ed93 7a00 	vldr	s14, [r3]
 800231e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002322:	009a      	lsls	r2, r3, #2
 8002324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002328:	4413      	add	r3, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	3324      	adds	r3, #36	@ 0x24
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	edd3 6a00 	vldr	s13, [r3]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800234c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	33c8      	adds	r3, #200	@ 0xc8
 8002354:	443b      	add	r3, r7
 8002356:	3b3c      	subs	r3, #60	@ 0x3c
 8002358:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800235c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002360:	3301      	adds	r3, #1
 8002362:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002366:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800236a:	2b03      	cmp	r3, #3
 800236c:	ddcf      	ble.n	800230e <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800236e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002372:	3301      	adds	r3, #1
 8002374:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800237c:	2b03      	cmp	r3, #3
 800237e:	ddb9      	ble.n	80022f4 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002386:	e021      	b.n	80023cc <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 8002388:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	33c8      	adds	r3, #200	@ 0xc8
 8002390:	443b      	add	r3, r7
 8002392:	3b3c      	subs	r3, #60	@ 0x3c
 8002394:	ed93 7a00 	vldr	s14, [r3]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800239e:	3338      	adds	r3, #56	@ 0x38
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	edd3 6a00 	vldr	s13, [r3]
 80023a8:	edd7 7a00 	vldr	s15, [r7]
 80023ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023c6:	3301      	adds	r3, #1
 80023c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80023cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	ddd9      	ble.n	8002388 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80023d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80023d8:	2240      	movs	r2, #64	@ 0x40
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f00d f8a5 	bl	800f52c <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	2240      	movs	r2, #64	@ 0x40
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f00d f89e 	bl	800f52c <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80023f6:	e05f      	b.n	80024b8 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023fe:	e052      	b.n	80024a6 <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002400:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002404:	009a      	lsls	r2, r3, #2
 8002406:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	33c8      	adds	r3, #200	@ 0xc8
 8002410:	443b      	add	r3, r7
 8002412:	3b7c      	subs	r3, #124	@ 0x7c
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002420:	e038      	b.n	8002494 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002422:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002426:	009a      	lsls	r2, r3, #2
 8002428:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	33c8      	adds	r3, #200	@ 0xc8
 8002432:	443b      	add	r3, r7
 8002434:	3b7c      	subs	r3, #124	@ 0x7c
 8002436:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 800243a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800243e:	009a      	lsls	r2, r3, #2
 8002440:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002444:	4413      	add	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	3324      	adds	r3, #36	@ 0x24
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	edd3 6a00 	vldr	s13, [r3]
 8002452:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002456:	009a      	lsls	r2, r3, #2
 8002458:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800245c:	4413      	add	r3, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	3304      	adds	r3, #4
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800246e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002472:	009a      	lsls	r2, r3, #2
 8002474:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002478:	4413      	add	r3, r2
 800247a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	33c8      	adds	r3, #200	@ 0xc8
 8002482:	443b      	add	r3, r7
 8002484:	3b7c      	subs	r3, #124	@ 0x7c
 8002486:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800248a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800248e:	3301      	adds	r3, #1
 8002490:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002494:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002498:	2b03      	cmp	r3, #3
 800249a:	ddc2      	ble.n	8002422 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800249c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024a0:	3301      	adds	r3, #1
 80024a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	dda8      	ble.n	8002400 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024b2:	3301      	adds	r3, #1
 80024b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024bc:	2b03      	cmp	r3, #3
 80024be:	dd9b      	ble.n	80023f8 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80024c6:	e05f      	b.n	8002588 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024ce:	e052      	b.n	8002576 <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80024d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024d4:	009a      	lsls	r2, r3, #2
 80024d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	33c8      	adds	r3, #200	@ 0xc8
 80024e0:	443b      	add	r3, r7
 80024e2:	3bbc      	subs	r3, #188	@ 0xbc
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80024f0:	e038      	b.n	8002564 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80024f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024f6:	009a      	lsls	r2, r3, #2
 80024f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	33c8      	adds	r3, #200	@ 0xc8
 8002502:	443b      	add	r3, r7
 8002504:	3bbc      	subs	r3, #188	@ 0xbc
 8002506:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 800250a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800250e:	009a      	lsls	r2, r3, #2
 8002510:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	33c8      	adds	r3, #200	@ 0xc8
 800251a:	443b      	add	r3, r7
 800251c:	3b7c      	subs	r3, #124	@ 0x7c
 800251e:	edd3 6a00 	vldr	s13, [r3]
 8002522:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002526:	009a      	lsls	r2, r3, #2
 8002528:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800252c:	4413      	add	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	3324      	adds	r3, #36	@ 0x24
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800253e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002542:	009a      	lsls	r2, r3, #2
 8002544:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002548:	4413      	add	r3, r2
 800254a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	33c8      	adds	r3, #200	@ 0xc8
 8002552:	443b      	add	r3, r7
 8002554:	3bbc      	subs	r3, #188	@ 0xbc
 8002556:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800255a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800255e:	3301      	adds	r3, #1
 8002560:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002564:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002568:	2b03      	cmp	r3, #3
 800256a:	ddc2      	ble.n	80024f2 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800256c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002570:	3301      	adds	r3, #1
 8002572:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002576:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800257a:	2b03      	cmp	r3, #3
 800257c:	dda8      	ble.n	80024d0 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800257e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002582:	3301      	adds	r3, #1
 8002584:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002588:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800258c:	2b03      	cmp	r3, #3
 800258e:	dd9b      	ble.n	80024c8 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002590:	2300      	movs	r3, #0
 8002592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002596:	e037      	b.n	8002608 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800259e:	e02a      	b.n	80025f6 <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80025a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025a4:	009a      	lsls	r2, r3, #2
 80025a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	33c8      	adds	r3, #200	@ 0xc8
 80025b0:	443b      	add	r3, r7
 80025b2:	3bbc      	subs	r3, #188	@ 0xbc
 80025b4:	ed93 7a00 	vldr	s14, [r3]
 80025b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025bc:	009a      	lsls	r2, r3, #2
 80025be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025c2:	4413      	add	r3, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	3354      	adds	r3, #84	@ 0x54
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 80025d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025d4:	009a      	lsls	r2, r3, #2
 80025d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025da:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80025dc:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	3304      	adds	r3, #4
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025f0:	3301      	adds	r3, #1
 80025f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	ddd0      	ble.n	80025a0 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002602:	3301      	adds	r3, #1
 8002604:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002608:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800260c:	2b03      	cmp	r3, #3
 800260e:	ddc3      	ble.n	8002598 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	2104      	movs	r1, #4
 8002644:	f00c fa01 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3310      	adds	r3, #16
 8002652:	2204      	movs	r2, #4
 8002654:	2104      	movs	r1, #4
 8002656:	f00c f9f8 	bl	800ea4a <arm_mat_init_f32>
}
 800265a:	bf00      	nop
 800265c:	37c8      	adds	r7, #200	@ 0xc8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b0d0      	sub	sp, #320	@ 0x140
 8002668:	af00      	add	r7, sp, #0
 800266a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800266e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002672:	6018      	str	r0, [r3, #0]
 8002674:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002678:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800267c:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002680:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002684:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800268e:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002698:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800269c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 80026a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026aa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 80026c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026ca:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80026d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d8:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 80026dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 80026ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026ee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80026f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80026fc:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002700:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002704:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 800270e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002712:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	edd3 7a03 	vldr	s15, [r3, #12]
 800271c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002724:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8002728:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800272c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002730:	ed93 7a00 	vldr	s14, [r3]
 8002734:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800273c:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002740:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800274e:	2300      	movs	r3, #0
 8002750:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002754:	e04d      	b.n	80027f2 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 8002756:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002760:	443b      	add	r3, r7
 8002762:	3b58      	subs	r3, #88	@ 0x58
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002770:	e036      	b.n	80027e0 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002772:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800277c:	443b      	add	r3, r7
 800277e:	3b58      	subs	r3, #88	@ 0x58
 8002780:	ed93 7a00 	vldr	s14, [r3]
 8002784:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002788:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002792:	333c      	adds	r3, #60	@ 0x3c
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	edd3 6a00 	vldr	s13, [r3]
 800279c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027a0:	009a      	lsls	r2, r3, #2
 80027a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027a6:	4413      	add	r3, r2
 80027a8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80027ac:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	3304      	adds	r3, #4
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80027ce:	443b      	add	r3, r7
 80027d0:	3b58      	subs	r3, #88	@ 0x58
 80027d2:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80027d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027da:	3301      	adds	r3, #1
 80027dc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80027e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	ddc4      	ble.n	8002772 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80027e8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027ec:	3301      	adds	r3, #1
 80027ee:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80027f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	ddad      	ble.n	8002756 <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002808:	e021      	b.n	800284e <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 800280a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002814:	443b      	add	r3, r7
 8002816:	3b58      	subs	r3, #88	@ 0x58
 8002818:	ed93 7a00 	vldr	s14, [r3]
 800281c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002820:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800282a:	333c      	adds	r3, #60	@ 0x3c
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002838:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 800283c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002840:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002844:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002848:	3301      	adds	r3, #1
 800284a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800284e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002852:	2b03      	cmp	r3, #3
 8002854:	ddd9      	ble.n	800280a <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 8002856:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800285a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002864:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286c:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002870:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800287e:	2300      	movs	r3, #0
 8002880:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002884:	e04d      	b.n	8002922 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 8002886:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002890:	443b      	add	r3, r7
 8002892:	3b68      	subs	r3, #104	@ 0x68
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80028a0:	e036      	b.n	8002910 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 80028a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028ac:	443b      	add	r3, r7
 80028ae:	3b68      	subs	r3, #104	@ 0x68
 80028b0:	ed93 7a00 	vldr	s14, [r3]
 80028b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028b8:	009a      	lsls	r2, r3, #2
 80028ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80028be:	4413      	add	r3, r2
 80028c0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80028c4:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	3304      	adds	r3, #4
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	edd3 6a00 	vldr	s13, [r3]
 80028d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80028e2:	333c      	adds	r3, #60	@ 0x3c
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028fe:	443b      	add	r3, r7
 8002900:	3b68      	subs	r3, #104	@ 0x68
 8002902:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002906:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800290a:	3301      	adds	r3, #1
 800290c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002910:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002914:	2b03      	cmp	r3, #3
 8002916:	ddc4      	ble.n	80028a2 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002918:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800291c:	3301      	adds	r3, #1
 800291e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002922:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002926:	2b03      	cmp	r3, #3
 8002928:	ddad      	ble.n	8002886 <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 800292a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800293e:	e01a      	b.n	8002976 <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002940:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800294a:	443b      	add	r3, r7
 800294c:	3b68      	subs	r3, #104	@ 0x68
 800294e:	edd3 6a00 	vldr	s13, [r3]
 8002952:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800295a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002964:	443b      	add	r3, r7
 8002966:	3b78      	subs	r3, #120	@ 0x78
 8002968:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800296c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002970:	3301      	adds	r3, #1
 8002972:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002976:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800297a:	2b03      	cmp	r3, #3
 800297c:	dde0      	ble.n	8002940 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800297e:	2300      	movs	r3, #0
 8002980:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002984:	e029      	b.n	80029da <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 8002986:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800298a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	ed93 7a00 	vldr	s14, [r3]
 800299c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029a6:	443b      	add	r3, r7
 80029a8:	3b78      	subs	r3, #120	@ 0x78
 80029aa:	edd3 6a00 	vldr	s13, [r3]
 80029ae:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 80029b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80029be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029d4:	3301      	adds	r3, #1
 80029d6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80029da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029de:	2b03      	cmp	r3, #3
 80029e0:	ddd1      	ble.n	8002986 <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80029e2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80029e6:	2240      	movs	r2, #64	@ 0x40
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f00c fd9e 	bl	800f52c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029f0:	2300      	movs	r3, #0
 80029f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80029f6:	e035      	b.n	8002a64 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80029fe:	e028      	b.n	8002a52 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8002a00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a0a:	443b      	add	r3, r7
 8002a0c:	3b78      	subs	r3, #120	@ 0x78
 8002a0e:	ed93 7a00 	vldr	s14, [r3]
 8002a12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a16:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a20:	333c      	adds	r3, #60	@ 0x3c
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a2e:	009a      	lsls	r2, r3, #2
 8002a30:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a34:	4413      	add	r3, r2
 8002a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a40:	443b      	add	r3, r7
 8002a42:	3bb8      	subs	r3, #184	@ 0xb8
 8002a44:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a48:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002a52:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	ddd2      	ble.n	8002a00 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002a64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	ddc5      	ble.n	80029f8 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a6c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a70:	2240      	movs	r2, #64	@ 0x40
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f00c fd59 	bl	800f52c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002a80:	e038      	b.n	8002af4 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002a88:	e02b      	b.n	8002ae2 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8002a8a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002a8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d102      	bne.n	8002a9c <MotorKalman_Update+0x438>
 8002a96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002a9a:	e001      	b.n	8002aa0 <MotorKalman_Update+0x43c>
 8002a9c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002cb8 <MotorKalman_Update+0x654>
 8002aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aa4:	009a      	lsls	r2, r3, #2
 8002aa6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ab2:	443b      	add	r3, r7
 8002ab4:	3bb8      	subs	r3, #184	@ 0xb8
 8002ab6:	edd3 7a00 	vldr	s15, [r3]
 8002aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002abe:	009a      	lsls	r2, r3, #2
 8002ac0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ac4:	4413      	add	r3, r2
 8002ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ad0:	443b      	add	r3, r7
 8002ad2:	3bf8      	subs	r3, #248	@ 0xf8
 8002ad4:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002ad8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002adc:	3301      	adds	r3, #1
 8002ade:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002ae2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	ddcf      	ble.n	8002a8a <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aee:	3301      	adds	r3, #1
 8002af0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	ddc2      	ble.n	8002a82 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8002afc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b00:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f103 0110 	add.w	r1, r3, #16
 8002b0a:	f107 0308 	add.w	r3, r7, #8
 8002b0e:	2240      	movs	r2, #64	@ 0x40
 8002b10:	4618      	mov	r0, r3
 8002b12:	f00c fd4f 	bl	800f5b4 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b1c:	e06e      	b.n	8002bfc <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b24:	e061      	b.n	8002bea <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b2a:	009a      	lsls	r2, r3, #2
 8002b2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b30:	4413      	add	r3, r2
 8002b32:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b36:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b4e:	e043      	b.n	8002bd8 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b54:	009a      	lsls	r2, r3, #2
 8002b56:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b60:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	3304      	adds	r3, #4
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b74:	009a      	lsls	r2, r3, #2
 8002b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b82:	443b      	add	r3, r7
 8002b84:	3bf8      	subs	r3, #248	@ 0xf8
 8002b86:	edd3 6a00 	vldr	s13, [r3]
 8002b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b8e:	009a      	lsls	r2, r3, #2
 8002b90:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b94:	4413      	add	r3, r2
 8002b96:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b9a:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	edd3 7a00 	vldr	s15, [r3]
 8002ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bae:	009a      	lsls	r2, r3, #2
 8002bb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bb4:	4413      	add	r3, r2
 8002bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bba:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002bbe:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	ddb7      	ble.n	8002b50 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002be0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002be4:	3301      	adds	r3, #1
 8002be6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002bea:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	dd99      	ble.n	8002b26 <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	dd8c      	ble.n	8002b1e <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002c04:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c08:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c14:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002c1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c22:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002c38:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002c52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c56:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c62:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002c6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002c7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c7e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	2104      	movs	r1, #4
 8002c88:	f00b fedf 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002c8c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c90:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002c9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c9e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3310      	adds	r3, #16
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	2104      	movs	r1, #4
 8002caa:	f00b fece 	bl	800ea4a <arm_mat_init_f32>
}
 8002cae:	bf00      	nop
 8002cb0:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	00000000 	.word	0x00000000

08002cbc <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002cc8:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8002ccc:	ed97 0a02 	vldr	s0, [r7, #8]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7ff fafa 	bl	80022ca <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8002cd6:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f7ff fcc2 	bl	8002664 <MotorKalman_Update>

    return filter->velocity;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8002ce6:	ee07 3a90 	vmov	s15, r3
}
 8002cea:	eeb0 0a67 	vmov.f32	s0, s15
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e00c      	b.n	8002d20 <matrix_copy+0x2c>
        dst[i] = src[i];
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	441a      	add	r2, r3
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	68b9      	ldr	r1, [r7, #8]
 8002d14:	440b      	add	r3, r1
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	dbee      	blt.n	8002d06 <matrix_copy+0x12>
    }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8002d44:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8002d48:	6020      	str	r0, [r4, #0]
 8002d4a:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002d4e:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8002d52:	6001      	str	r1, [r0, #0]
 8002d54:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002d58:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002d5c:	ed81 0a00 	vstr	s0, [r1]
 8002d60:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002d64:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002d68:	600a      	str	r2, [r1, #0]
 8002d6a:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002d6e:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8002d72:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002d74:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002d78:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002d7c:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2204      	movs	r2, #4
 8002d84:	2104      	movs	r1, #4
 8002d86:	f00b fe60 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002d8a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002d8e:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002d92:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2204      	movs	r2, #4
 8002d9a:	2104      	movs	r1, #4
 8002d9c:	f00b fe55 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002da0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002da4:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002da8:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2201      	movs	r2, #1
 8002db0:	2104      	movs	r1, #4
 8002db2:	f00b fe4a 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002db6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dba:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002dbe:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2104      	movs	r1, #4
 8002dc8:	f00b fe3f 	bl	800ea4a <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002dcc:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002dd0:	2240      	movs	r2, #64	@ 0x40
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f00c fba9 	bl	800f52c <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002dda:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002dde:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8002de2:	2204      	movs	r2, #4
 8002de4:	2104      	movs	r1, #4
 8002de6:	f00b fe30 	bl	800ea4a <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002dea:	2300      	movs	r3, #0
 8002dec:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002df0:	e011      	b.n	8002e16 <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8002df2:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8002e02:	443b      	add	r3, r7
 8002e04:	3b6c      	subs	r3, #108	@ 0x6c
 8002e06:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e0a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8002e0c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e10:	3301      	adds	r3, #1
 8002e12:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002e16:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	dde9      	ble.n	8002df2 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8002e1e:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002e22:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8002e26:	2204      	movs	r2, #4
 8002e28:	2104      	movs	r1, #4
 8002e2a:	f00b fe0e 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002e2e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002e32:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e36:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002e3a:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002e3e:	ed93 0a00 	vldr	s0, [r3]
 8002e42:	4610      	mov	r0, r2
 8002e44:	f00c fa0a 	bl	800f25c <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002e48:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e4c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002e50:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002e54:	2210      	movs	r2, #16
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	f7ff ff4c 	bl	8002cf4 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002e5c:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002e60:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002e64:	2204      	movs	r2, #4
 8002e66:	2104      	movs	r1, #4
 8002e68:	f00b fdef 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002e6c:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002e70:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002e74:	2204      	movs	r2, #4
 8002e76:	2104      	movs	r1, #4
 8002e78:	f00b fde7 	bl	800ea4a <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002e7c:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002e80:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002e84:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f00b fda3 	bl	800e9d4 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002e8e:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002e92:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002e96:	2210      	movs	r2, #16
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff2b 	bl	8002cf4 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002e9e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002ea2:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002eac:	e03a      	b.n	8002f24 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002eae:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eba:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8002ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec2:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8002ec6:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002eca:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002ece:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f00c f948 	bl	800f168 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8002ed8:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002edc:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002ee0:	2210      	movs	r2, #16
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff ff06 	bl	8002cf4 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8002ee8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eec:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8002ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ef4:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002ef8:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002efc:	4611      	mov	r1, r2
 8002efe:	eeb0 0a47 	vmov.f32	s0, s14
 8002f02:	4618      	mov	r0, r3
 8002f04:	f00c f9aa 	bl	800f25c <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8002f08:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002f0c:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8002f10:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8002f14:	4618      	mov	r0, r3
 8002f16:	f00b fd5d 	bl	800e9d4 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002f1a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002f24:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f28:	2b0a      	cmp	r3, #10
 8002f2a:	ddc0      	ble.n	8002eae <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8002f2c:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8002f30:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f34:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f38:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8002f3c:	ed93 0a00 	vldr	s0, [r3]
 8002f40:	4610      	mov	r0, r2
 8002f42:	f00c f98b 	bl	800f25c <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8002f46:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f4a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2300      	movs	r3, #0
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	6053      	str	r3, [r2, #4]
 8002f56:	6093      	str	r3, [r2, #8]
 8002f58:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8002f5a:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8002f5e:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8002f62:	2201      	movs	r2, #1
 8002f64:	2104      	movs	r1, #4
 8002f66:	f00b fd70 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8002f6a:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8002f6e:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002f72:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002f76:	4618      	mov	r0, r3
 8002f78:	f00c f8f6 	bl	800f168 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8002f7c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002f80:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8002f84:	2201      	movs	r2, #1
 8002f86:	2104      	movs	r1, #4
 8002f88:	f00b fd5f 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8002f8c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f90:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f94:	edd3 7a00 	vldr	s15, [r3]
 8002f98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f9c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002fa0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fa4:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002fa8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002fac:	4611      	mov	r1, r2
 8002fae:	eeb0 0a47 	vmov.f32	s0, s14
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f00c f952 	bl	800f25c <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002fb8:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002fbc:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002fc0:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f00b fd05 	bl	800e9d4 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8002fca:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002fce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	2340      	movs	r3, #64	@ 0x40
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2100      	movs	r1, #0
 8002fda:	f00c faa7 	bl	800f52c <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8002fde:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002fe2:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	2104      	movs	r1, #4
 8002fea:	f00b fd2e 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8002fee:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8002ff2:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002ff6:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f00c f8b4 	bl	800f168 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003000:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003004:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003008:	461a      	mov	r2, r3
 800300a:	2300      	movs	r3, #0
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	6053      	str	r3, [r2, #4]
 8003010:	6093      	str	r3, [r2, #8]
 8003012:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8003014:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003018:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 800301c:	2201      	movs	r2, #1
 800301e:	2104      	movs	r1, #4
 8003020:	f00b fd13 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8003024:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8003028:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800302c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003030:	4618      	mov	r0, r3
 8003032:	f00c f899 	bl	800f168 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 8003036:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800303a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003046:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800304a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800304e:	edd3 7a00 	vldr	s15, [r3]
 8003052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003056:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800305a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800305e:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003062:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003066:	4611      	mov	r1, r2
 8003068:	eeb0 0a47 	vmov.f32	s0, s14
 800306c:	4618      	mov	r0, r3
 800306e:	f00c f8f5 	bl	800f25c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003072:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003076:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800307a:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800307e:	4618      	mov	r0, r3
 8003080:	f00b fca8 	bl	800e9d4 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8003084:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003088:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800308c:	4618      	mov	r0, r3
 800308e:	2340      	movs	r3, #64	@ 0x40
 8003090:	461a      	mov	r2, r3
 8003092:	2100      	movs	r1, #0
 8003094:	f00c fa4a 	bl	800f52c <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 8003098:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800309c:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80030a0:	2204      	movs	r2, #4
 80030a2:	2104      	movs	r1, #4
 80030a4:	f00b fcd1 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 80030a8:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80030ac:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80030b0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80030b4:	4618      	mov	r0, r3
 80030b6:	f00c f857 	bl	800f168 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 80030ba:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030be:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80030c2:	461a      	mov	r2, r3
 80030c4:	2300      	movs	r3, #0
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	6053      	str	r3, [r2, #4]
 80030ca:	6093      	str	r3, [r2, #8]
 80030cc:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 80030ce:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80030d2:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80030d6:	2201      	movs	r2, #1
 80030d8:	2104      	movs	r1, #4
 80030da:	f00b fcb6 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 80030de:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80030e2:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80030e6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80030ea:	4618      	mov	r0, r3
 80030ec:	f00c f83c 	bl	800f168 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 80030f0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030f4:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80030f8:	edd3 7a00 	vldr	s15, [r3]
 80030fc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003100:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003104:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003110:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003114:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003118:	edd3 7a00 	vldr	s15, [r3]
 800311c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003120:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8003124:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003128:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800312c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003130:	4611      	mov	r1, r2
 8003132:	eeb0 0a47 	vmov.f32	s0, s14
 8003136:	4618      	mov	r0, r3
 8003138:	f00c f890 	bl	800f25c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800313c:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003140:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003144:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003148:	4618      	mov	r0, r3
 800314a:	f00b fc43 	bl	800e9d4 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 800314e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003152:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8003156:	4618      	mov	r0, r3
 8003158:	2340      	movs	r3, #64	@ 0x40
 800315a:	461a      	mov	r2, r3
 800315c:	2100      	movs	r1, #0
 800315e:	f00c f9e5 	bl	800f52c <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 8003162:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003166:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800316a:	2204      	movs	r2, #4
 800316c:	2104      	movs	r1, #4
 800316e:	f00b fc6c 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 8003172:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003176:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800317a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800317e:	4618      	mov	r0, r3
 8003180:	f00b fff2 	bl	800f168 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8003184:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003188:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 800318c:	461a      	mov	r2, r3
 800318e:	2300      	movs	r3, #0
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	6053      	str	r3, [r2, #4]
 8003194:	6093      	str	r3, [r2, #8]
 8003196:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 8003198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800319c:	f107 001c 	add.w	r0, r7, #28
 80031a0:	2201      	movs	r2, #1
 80031a2:	2104      	movs	r1, #4
 80031a4:	f00b fc51 	bl	800ea4a <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 80031a8:	f107 021c 	add.w	r2, r7, #28
 80031ac:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80031b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031b4:	4618      	mov	r0, r3
 80031b6:	f00b ffd7 	bl	800f168 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 80031ba:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031be:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031c2:	edd3 7a00 	vldr	s15, [r3]
 80031c6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80031ca:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031ce:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031d2:	edd3 7a00 	vldr	s15, [r3]
 80031d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031da:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031de:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ea:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031ee:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031f2:	edd3 7a00 	vldr	s15, [r3]
 80031f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003234 <discretize_system_with_arm+0x4fc>
 80031fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003202:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003206:	f107 031c 	add.w	r3, r7, #28
 800320a:	4611      	mov	r1, r2
 800320c:	eeb0 0a47 	vmov.f32	s0, s14
 8003210:	4618      	mov	r0, r3
 8003212:	f00c f823 	bl	800f25c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003216:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800321a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800321e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003222:	4618      	mov	r0, r3
 8003224:	f00b fbd6 	bl	800e9d4 <arm_mat_add_f32>
}
 8003228:	bf00      	nop
 800322a:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 800322e:	46bd      	mov	sp, r7
 8003230:	bd90      	pop	{r4, r7, pc}
 8003232:	bf00      	nop
 8003234:	42f00000 	.word	0x42f00000

08003238 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b09e      	sub	sp, #120	@ 0x78
 800323c:	af00      	add	r7, sp, #0
 800323e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003242:	edc7 0a08 	vstr	s1, [r7, #32]
 8003246:	ed87 1a07 	vstr	s2, [r7, #28]
 800324a:	edc7 1a06 	vstr	s3, [r7, #24]
 800324e:	ed87 2a05 	vstr	s4, [r7, #20]
 8003252:	edc7 2a04 	vstr	s5, [r7, #16]
 8003256:	ed87 3a03 	vstr	s6, [r7, #12]
 800325a:	60b8      	str	r0, [r7, #8]
 800325c:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 800325e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003262:	2240      	movs	r2, #64	@ 0x40
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f00c f960 	bl	800f52c <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 800326c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 800327a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800327e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8003280:	edd7 7a06 	vldr	s15, [r7, #24]
 8003284:	eef1 6a67 	vneg.f32	s13, s15
 8003288:	ed97 7a07 	vldr	s14, [r7, #28]
 800328c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003290:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8003294:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8003298:	ed97 7a07 	vldr	s14, [r7, #28]
 800329c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032a0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 80032a4:	edd7 6a04 	vldr	s13, [r7, #16]
 80032a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80032ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032b0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 80032b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80032b8:	eef1 6a67 	vneg.f32	s13, s15
 80032bc:	ed97 7a08 	vldr	s14, [r7, #32]
 80032c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032c4:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 80032c8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80032cc:	eef1 6a67 	vneg.f32	s13, s15
 80032d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80032d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d8:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 80032dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80032e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032e8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 80032ec:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80032f0:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	ed97 0a03 	vldr	s0, [r7, #12]
 80032fc:	f7ff fd1c 	bl	8002d38 <discretize_system_with_arm>
}
 8003300:	bf00      	nop
 8003302:	3778      	adds	r7, #120	@ 0x78
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	4613      	mov	r3, r2
 8003314:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a0b      	ldr	r2, [pc, #44]	@ (8003348 <PWM_init+0x40>)
 800331a:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	88fa      	ldrh	r2, [r7, #6]
 8003326:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 800332e:	68b8      	ldr	r0, [r7, #8]
 8003330:	f007 fca6 	bl	800ac80 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	4619      	mov	r1, r3
 8003338:	68b8      	ldr	r0, [r7, #8]
 800333a:	f007 fded 	bl	800af18 <HAL_TIM_PWM_Start>
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	0a21fe80 	.word	0x0a21fe80
 800334c:	00000000 	.word	0x00000000

08003350 <PWM_write_range>:
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003350:	b5b0      	push	{r4, r5, r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	ed87 0a02 	vstr	s0, [r7, #8]
 800335c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003360:	edd7 7a02 	vldr	s15, [r7, #8]
 8003364:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336c:	d137      	bne.n	80033de <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	889b      	ldrh	r3, [r3, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d105      	bne.n	8003382 <PWM_write_range+0x32>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2200      	movs	r2, #0
 800337e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003380:	e0e1      	b.n	8003546 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	889b      	ldrh	r3, [r3, #4]
 8003386:	2b04      	cmp	r3, #4
 8003388:	d105      	bne.n	8003396 <PWM_write_range+0x46>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	2300      	movs	r3, #0
 8003392:	6393      	str	r3, [r2, #56]	@ 0x38
 8003394:	e0d7      	b.n	8003546 <PWM_write_range+0x1f6>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	889b      	ldrh	r3, [r3, #4]
 800339a:	2b08      	cmp	r3, #8
 800339c:	d105      	bne.n	80033aa <PWM_write_range+0x5a>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	2300      	movs	r3, #0
 80033a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80033a8:	e0cd      	b.n	8003546 <PWM_write_range+0x1f6>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	889b      	ldrh	r3, [r3, #4]
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	d105      	bne.n	80033be <PWM_write_range+0x6e>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	2300      	movs	r3, #0
 80033ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80033bc:	e0c3      	b.n	8003546 <PWM_write_range+0x1f6>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	889b      	ldrh	r3, [r3, #4]
 80033c2:	2b10      	cmp	r3, #16
 80033c4:	d105      	bne.n	80033d2 <PWM_write_range+0x82>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	2300      	movs	r3, #0
 80033ce:	6493      	str	r3, [r2, #72]	@ 0x48
 80033d0:	e0b9      	b.n	8003546 <PWM_write_range+0x1f6>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	2300      	movs	r3, #0
 80033da:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80033dc:	e0b3      	b.n	8003546 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80033ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033f6:	ee17 2a90 	vmov	r2, s15
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003406:	33fe      	adds	r3, #254	@ 0xfe
 8003408:	4a53      	ldr	r2, [pc, #332]	@ (8003558 <PWM_write_range+0x208>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	0bdb      	lsrs	r3, r3, #15
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	899b      	ldrh	r3, [r3, #12]
 800342a:	3301      	adds	r3, #1
 800342c:	ee07 3a90 	vmov	s15, r3
 8003430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003434:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003438:	ed97 7a02 	vldr	s14, [r7, #8]
 800343c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003440:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003444:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800344c:	ee17 3a90 	vmov	r3, s15
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	89db      	ldrh	r3, [r3, #14]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd f82e 	bl	80004bc <__aeabi_i2d>
 8003460:	4604      	mov	r4, r0
 8003462:	460d      	mov	r5, r1
 8003464:	edd7 7a01 	vldr	s15, [r7, #4]
 8003468:	eef0 7ae7 	vabs.f32	s15, s15
 800346c:	ee17 0a90 	vmov	r0, s15
 8003470:	f7fd f836 	bl	80004e0 <__aeabi_f2d>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4620      	mov	r0, r4
 800347a:	4629      	mov	r1, r5
 800347c:	f7fd f888 	bl	8000590 <__aeabi_dmul>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	a331      	add	r3, pc, #196	@ (adr r3, 8003550 <PWM_write_range+0x200>)
 800348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348e:	f7fd f9a9 	bl	80007e4 <__aeabi_ddiv>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4610      	mov	r0, r2
 8003498:	4619      	mov	r1, r3
 800349a:	f7fd fb3b 	bl	8000b14 <__aeabi_d2uiz>
 800349e:	4603      	mov	r3, r0
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	899a      	ldrh	r2, [r3, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	89da      	ldrh	r2, [r3, #14]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	89da      	ldrh	r2, [r3, #14]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	889b      	ldrh	r3, [r3, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <PWM_write_range+0x190>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	6952      	ldr	r2, [r2, #20]
 80034dc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80034de:	e032      	b.n	8003546 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	889b      	ldrh	r3, [r3, #4]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d106      	bne.n	80034f6 <PWM_write_range+0x1a6>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80034f4:	e027      	b.n	8003546 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	889b      	ldrh	r3, [r3, #4]
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d106      	bne.n	800350c <PWM_write_range+0x1bc>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800350a:	e01c      	b.n	8003546 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	889b      	ldrh	r3, [r3, #4]
 8003510:	2b0c      	cmp	r3, #12
 8003512:	d106      	bne.n	8003522 <PWM_write_range+0x1d2>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003520:	e011      	b.n	8003546 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	889b      	ldrh	r3, [r3, #4]
 8003526:	2b10      	cmp	r3, #16
 8003528:	d106      	bne.n	8003538 <PWM_write_range+0x1e8>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003536:	e006      	b.n	8003546 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003544:	e7ff      	b.n	8003546 <PWM_write_range+0x1f6>
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bdb0      	pop	{r4, r5, r7, pc}
 800354e:	bf00      	nop
 8003550:	00000000 	.word	0x00000000
 8003554:	40efffe0 	.word	0x40efffe0
 8003558:	80008001 	.word	0x80008001

0800355c <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6178      	str	r0, [r7, #20]
 8003564:	6139      	str	r1, [r7, #16]
 8003566:	60fa      	str	r2, [r7, #12]
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	ed87 0a01 	vstr	s0, [r7, #4]
 800356e:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2200      	movs	r2, #0
 800359a:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 80035bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	fb93 f2f2 	sdiv	r2, r3, r2
 80035c6:	68f9      	ldr	r1, [r7, #12]
 80035c8:	fb01 f202 	mul.w	r2, r1, r2
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2200      	movs	r2, #0
 80035da:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2200      	movs	r2, #0
 80035e0:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 800362a:	213c      	movs	r1, #60	@ 0x3c
 800362c:	6938      	ldr	r0, [r7, #16]
 800362e:	f007 ff2f 	bl	800b490 <HAL_TIM_Encoder_Start>
}
 8003632:	bf00      	nop
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	0000      	movs	r0, r0
 800363c:	0000      	movs	r0, r0
	...

08003640 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003640:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003644:	b084      	sub	sp, #16
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	0fda      	lsrs	r2, r3, #31
 8003668:	4413      	add	r3, r2
 800366a:	105b      	asrs	r3, r3, #1
 800366c:	461a      	mov	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4293      	cmp	r3, r2
 8003672:	dd05      	ble.n	8003680 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	e00e      	b.n	800369e <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	0fda      	lsrs	r2, r3, #31
 8003686:	4413      	add	r3, r2
 8003688:	105b      	asrs	r3, r3, #1
 800368a:	425b      	negs	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4293      	cmp	r3, r2
 8003692:	da04      	bge.n	800369e <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ac:	441a      	add	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	ee07 3a90 	vmov	s15, r3
 80036c0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	ee07 3a90 	vmov	s15, r3
 80036cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80036da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fc fef7 	bl	80004e0 <__aeabi_f2d>
 80036f2:	4604      	mov	r4, r0
 80036f4:	460d      	mov	r5, r1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800370e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003712:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003716:	ee17 0a90 	vmov	r0, s15
 800371a:	f7fc fee1 	bl	80004e0 <__aeabi_f2d>
 800371e:	a33c      	add	r3, pc, #240	@ (adr r3, 8003810 <QEI_get_diff_count+0x1d0>)
 8003720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003724:	f7fc ff34 	bl	8000590 <__aeabi_dmul>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4690      	mov	r8, r2
 800372e:	4699      	mov	r9, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003734:	4618      	mov	r0, r3
 8003736:	f7fc fed3 	bl	80004e0 <__aeabi_f2d>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4640      	mov	r0, r8
 8003740:	4649      	mov	r1, r9
 8003742:	f7fc ff25 	bl	8000590 <__aeabi_dmul>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4620      	mov	r0, r4
 800374c:	4629      	mov	r1, r5
 800374e:	f7fc fd69 	bl	8000224 <__adddf3>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4610      	mov	r0, r2
 8003758:	4619      	mov	r1, r3
 800375a:	f7fd f9fb 	bl	8000b54 <__aeabi_d2f>
 800375e:	4602      	mov	r2, r0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003768:	4618      	mov	r0, r3
 800376a:	f7fc feb9 	bl	80004e0 <__aeabi_f2d>
 800376e:	4604      	mov	r4, r0
 8003770:	460d      	mov	r5, r1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800378a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800378e:	ee16 0a90 	vmov	r0, s13
 8003792:	f7fc fea5 	bl	80004e0 <__aeabi_f2d>
 8003796:	a31e      	add	r3, pc, #120	@ (adr r3, 8003810 <QEI_get_diff_count+0x1d0>)
 8003798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379c:	f7fc fef8 	bl	8000590 <__aeabi_dmul>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4690      	mov	r8, r2
 80037a6:	4699      	mov	r9, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fc fe97 	bl	80004e0 <__aeabi_f2d>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4640      	mov	r0, r8
 80037b8:	4649      	mov	r1, r9
 80037ba:	f7fc fee9 	bl	8000590 <__aeabi_dmul>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4690      	mov	r8, r2
 80037c4:	4699      	mov	r9, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fc fe88 	bl	80004e0 <__aeabi_f2d>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4640      	mov	r0, r8
 80037d6:	4649      	mov	r1, r9
 80037d8:	f7fc feda 	bl	8000590 <__aeabi_dmul>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4620      	mov	r0, r4
 80037e2:	4629      	mov	r1, r5
 80037e4:	f7fc fd1e 	bl	8000224 <__adddf3>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4610      	mov	r0, r2
 80037ee:	4619      	mov	r1, r3
 80037f0:	f7fd f9b0 	bl	8000b54 <__aeabi_d2f>
 80037f4:	4602      	mov	r2, r0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	605a      	str	r2, [r3, #4]
}
 8003802:	bf00      	nop
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800380c:	f3af 8000 	nop.w
 8003810:	54442d18 	.word	0x54442d18
 8003814:	400921fb 	.word	0x400921fb

08003818 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8003818:	b5b0      	push	{r4, r5, r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003828:	fb02 f303 	mul.w	r3, r2, r3
 800382c:	ee07 3a90 	vmov	s15, r3
 8003830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383e:	4618      	mov	r0, r3
 8003840:	f7fc fe4e 	bl	80004e0 <__aeabi_f2d>
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	4b83      	ldr	r3, [pc, #524]	@ (8003a58 <QEI_compute_data+0x240>)
 800384a:	f7fc fea1 	bl	8000590 <__aeabi_dmul>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4614      	mov	r4, r2
 8003854:	461d      	mov	r5, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003862:	ee17 0a90 	vmov	r0, s15
 8003866:	f7fc fe3b 	bl	80004e0 <__aeabi_f2d>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4620      	mov	r0, r4
 8003870:	4629      	mov	r1, r5
 8003872:	f7fc ffb7 	bl	80007e4 <__aeabi_ddiv>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4614      	mov	r4, r2
 800387c:	461d      	mov	r5, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003882:	4618      	mov	r0, r3
 8003884:	f7fc fe2c 	bl	80004e0 <__aeabi_f2d>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4620      	mov	r0, r4
 800388e:	4629      	mov	r1, r5
 8003890:	f7fc fe7e 	bl	8000590 <__aeabi_dmul>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	f7fd f95a 	bl	8000b54 <__aeabi_d2f>
 80038a0:	4602      	mov	r2, r0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80038ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80038b0:	ee17 0a90 	vmov	r0, s15
 80038b4:	f7fc fe14 	bl	80004e0 <__aeabi_f2d>
 80038b8:	a365      	add	r3, pc, #404	@ (adr r3, 8003a50 <QEI_compute_data+0x238>)
 80038ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038be:	f7fc fe67 	bl	8000590 <__aeabi_dmul>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4614      	mov	r4, r2
 80038c8:	461d      	mov	r5, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038d6:	ee17 0a90 	vmov	r0, s15
 80038da:	f7fc fe01 	bl	80004e0 <__aeabi_f2d>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4620      	mov	r0, r4
 80038e4:	4629      	mov	r1, r5
 80038e6:	f7fc ff7d 	bl	80007e4 <__aeabi_ddiv>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4614      	mov	r4, r2
 80038f0:	461d      	mov	r5, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fc fdf2 	bl	80004e0 <__aeabi_f2d>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4620      	mov	r0, r4
 8003902:	4629      	mov	r1, r5
 8003904:	f7fc fe44 	bl	8000590 <__aeabi_dmul>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	f7fd f920 	bl	8000b54 <__aeabi_d2f>
 8003914:	4602      	mov	r2, r0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391e:	4618      	mov	r0, r3
 8003920:	f7fc fdde 	bl	80004e0 <__aeabi_f2d>
 8003924:	a34a      	add	r3, pc, #296	@ (adr r3, 8003a50 <QEI_compute_data+0x238>)
 8003926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392a:	f7fc fe31 	bl	8000590 <__aeabi_dmul>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4614      	mov	r4, r2
 8003934:	461d      	mov	r5, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393a:	4618      	mov	r0, r3
 800393c:	f7fc fdd0 	bl	80004e0 <__aeabi_f2d>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4620      	mov	r0, r4
 8003946:	4629      	mov	r1, r5
 8003948:	f7fc fe22 	bl	8000590 <__aeabi_dmul>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4614      	mov	r4, r2
 8003952:	461d      	mov	r5, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	ee07 3a90 	vmov	s15, r3
 800395c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003960:	ee17 0a90 	vmov	r0, s15
 8003964:	f7fc fdbc 	bl	80004e0 <__aeabi_f2d>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4620      	mov	r0, r4
 800396e:	4629      	mov	r1, r5
 8003970:	f7fc ff38 	bl	80007e4 <__aeabi_ddiv>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4614      	mov	r4, r2
 800397a:	461d      	mov	r5, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003980:	4618      	mov	r0, r3
 8003982:	f7fc fdad 	bl	80004e0 <__aeabi_f2d>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4620      	mov	r0, r4
 800398c:	4629      	mov	r1, r5
 800398e:	f7fc fdff 	bl	8000590 <__aeabi_dmul>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4610      	mov	r0, r2
 8003998:	4619      	mov	r1, r3
 800399a:	f7fd f8db 	bl	8000b54 <__aeabi_d2f>
 800399e:	4602      	mov	r2, r0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80039c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039c4:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 80039c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80039cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d4:	d00a      	beq.n	80039ec <QEI_compute_data+0x1d4>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80039e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ea:	e001      	b.n	80039f0 <QEI_compute_data+0x1d8>
 80039ec:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003a5c <QEI_compute_data+0x244>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	ed93 7a04 	vldr	s14, [r3, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8003a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a06:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8003a0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a16:	d00a      	beq.n	8003a2e <QEI_compute_data+0x216>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1c:	ee07 3a90 	vmov	s15, r3
 8003a20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a24:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2c:	e001      	b.n	8003a32 <QEI_compute_data+0x21a>
 8003a2e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8003a5c <QEI_compute_data+0x244>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	615a      	str	r2, [r3, #20]
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a50:	54442d18 	.word	0x54442d18
 8003a54:	400921fb 	.word	0x400921fb
 8003a58:	404e0000 	.word	0x404e0000
 8003a5c:	00000000 	.word	0x00000000

08003a60 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08e      	sub	sp, #56	@ 0x38
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6178      	str	r0, [r7, #20]
 8003a68:	ed87 0a04 	vstr	s0, [r7, #16]
 8003a6c:	edc7 0a03 	vstr	s1, [r7, #12]
 8003a70:	ed87 1a02 	vstr	s2, [r7, #8]
 8003a74:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8003a9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003aa2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aaa:	eef0 7ae7 	vabs.f32	s15, s15
 8003aae:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8003ab2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ab6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac6:	d503      	bpl.n	8003ad0 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	22ff      	movs	r2, #255	@ 0xff
 8003acc:	741a      	strb	r2, [r3, #16]
 8003ace:	e002      	b.n	8003ad6 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8003ad6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003ada:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae2:	d006      	beq.n	8003af2 <Trapezoidal_Generator+0x92>
 8003ae4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ae8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af0:	d104      	bne.n	8003afc <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	60da      	str	r2, [r3, #12]
        return;
 8003afa:	e06f      	b.n	8003bdc <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8003afc:	edd7 6a02 	vldr	s13, [r7, #8]
 8003b00:	ed97 7a01 	vldr	s14, [r7, #4]
 8003b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b08:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8003b0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b10:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003b14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b18:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b20:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b28:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8003b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003b30:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003b34:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b3c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003b40:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003b44:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003b48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b50:	db27      	blt.n	8003ba2 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003b52:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003b56:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003b62:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b66:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b6e:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b76:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003b78:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003b7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8003b8a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003b8e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003b92:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	edc3 7a02 	vstr	s15, [r3, #8]
 8003ba0:	e018      	b.n	8003bd4 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003ba2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003ba6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003baa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003bae:	eeb0 0a66 	vmov.f32	s0, s13
 8003bb2:	f00b fdd5 	bl	800f760 <sqrtf>
 8003bb6:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	6a3a      	ldr	r2, [r7, #32]
 8003bbe:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	6a3a      	ldr	r2, [r7, #32]
 8003bc4:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8003bc6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003bca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	60da      	str	r2, [r3, #12]
}
 8003bdc:	3738      	adds	r7, #56	@ 0x38
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8003be4:	b480      	push	{r7}
 8003be6:	b08d      	sub	sp, #52	@ 0x34
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6178      	str	r0, [r7, #20]
 8003bec:	6139      	str	r1, [r7, #16]
 8003bee:	ed87 0a03 	vstr	s0, [r7, #12]
 8003bf2:	edc7 0a02 	vstr	s1, [r7, #8]
 8003bf6:	ed87 1a01 	vstr	s2, [r7, #4]
 8003bfa:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c04:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8003e88 <Trapezoidal_Evaluated+0x2a4>
 8003c08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c26:	f200 811b 	bhi.w	8003e60 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	7c1b      	ldrb	r3, [r3, #16]
 8003c34:	b25b      	sxtb	r3, r3
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c3e:	ed97 7a00 	vldr	s14, [r7]
 8003c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c46:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	ed93 7a00 	vldr	s14, [r3]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c56:	eeb4 7a67 	vcmp.f32	s14, s15
 8003c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c5e:	d109      	bne.n	8003c74 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	edd3 7a00 	vldr	s15, [r3]
 8003c66:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003c72:	e00c      	b.n	8003c8e <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	7c1b      	ldrb	r3, [r3, #16]
 8003c78:	b25b      	sxtb	r3, r3
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c82:	ed97 7a01 	vldr	s14, [r7, #4]
 8003c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	edd3 7a00 	vldr	s15, [r3]
 8003c9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca2:	d824      	bhi.n	8003cee <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8003ca4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ca8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003cac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8003cb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	edd3 7a03 	vldr	s15, [r3, #12]
 8003cc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	ed93 7a03 	vldr	s14, [r3, #12]
 8003cd8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cea:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8003cec:	e0c6      	b.n	8003e7c <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	ed93 7a03 	vldr	s14, [r3, #12]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d02:	d830      	bhi.n	8003d66 <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003d04:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003d08:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003d0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	edd3 7a00 	vldr	s15, [r3]
 8003d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	edd3 7a00 	vldr	s15, [r3]
 8003d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d24:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d2c:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	edd3 7a00 	vldr	s15, [r3]
 8003d3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d40:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003d44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d48:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d5a:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	e08a      	b.n	8003e7c <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7a:	d900      	bls.n	8003d7e <Trapezoidal_Evaluated+0x19a>
}
 8003d7c:	e07e      	b.n	8003e7c <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003d7e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003d82:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003d86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	edd3 7a00 	vldr	s15, [r3]
 8003d90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	edd3 7a00 	vldr	s15, [r3]
 8003d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003da6:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	ed93 7a01 	vldr	s14, [r3, #4]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	edd3 7a00 	vldr	s15, [r3]
 8003dba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc2:	dd11      	ble.n	8003de8 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	ed93 7a01 	vldr	s14, [r3, #4]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	edd3 7a00 	vldr	s15, [r3]
 8003dd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dd4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ddc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003de4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	ed93 7a03 	vldr	s14, [r3, #12]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	edd3 7a01 	vldr	s15, [r3, #4]
 8003df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003df8:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 8003dfc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003e00:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e08:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003e0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e10:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003e14:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003e18:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003e1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e24:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 8003e36:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003e3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e42:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8003e50:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003e54:	eef1 7a67 	vneg.f32	s15, s15
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003e5e:	e00d      	b.n	8003e7c <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2201      	movs	r2, #1
 8003e64:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
}
 8003e7c:	bf00      	nop
 8003e7e:	3734      	adds	r7, #52	@ 0x34
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	3a83126f 	.word	0x3a83126f

08003e8c <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	ed87 0a01 	vstr	s0, [r7, #4]
 8003e96:	4603      	mov	r3, r0
 8003e98:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 8003e9a:	78fb      	ldrb	r3, [r7, #3]
 8003e9c:	2b1a      	cmp	r3, #26
 8003e9e:	d018      	beq.n	8003ed2 <temperature_to_base+0x46>
 8003ea0:	2b1a      	cmp	r3, #26
 8003ea2:	dc1d      	bgt.n	8003ee0 <temperature_to_base+0x54>
 8003ea4:	2b18      	cmp	r3, #24
 8003ea6:	d002      	beq.n	8003eae <temperature_to_base+0x22>
 8003ea8:	2b19      	cmp	r3, #25
 8003eaa:	d003      	beq.n	8003eb4 <temperature_to_base+0x28>
 8003eac:	e018      	b.n	8003ee0 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8003eae:	edd7 7a01 	vldr	s15, [r7, #4]
 8003eb2:	e017      	b.n	8003ee4 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8003eb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003eb8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8003ef4 <temperature_to_base+0x68>
 8003ebc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ec0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003ec4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ec8:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8003ecc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ed0:	e008      	b.n	8003ee4 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 8003ed2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ed6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8003ef8 <temperature_to_base+0x6c>
 8003eda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ede:	e001      	b.n	8003ee4 <temperature_to_base+0x58>
        default:
            return value;
 8003ee0:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8003ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	42000000 	.word	0x42000000
 8003ef8:	43889333 	.word	0x43889333

08003efc <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	ed87 0a01 	vstr	s0, [r7, #4]
 8003f06:	4603      	mov	r3, r0
 8003f08:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	2b1a      	cmp	r3, #26
 8003f0e:	d018      	beq.n	8003f42 <temperature_from_base+0x46>
 8003f10:	2b1a      	cmp	r3, #26
 8003f12:	dc1d      	bgt.n	8003f50 <temperature_from_base+0x54>
 8003f14:	2b18      	cmp	r3, #24
 8003f16:	d002      	beq.n	8003f1e <temperature_from_base+0x22>
 8003f18:	2b19      	cmp	r3, #25
 8003f1a:	d003      	beq.n	8003f24 <temperature_from_base+0x28>
 8003f1c:	e018      	b.n	8003f50 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8003f1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f22:	e017      	b.n	8003f54 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 8003f24:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f28:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8003f2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f30:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8003f34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f38:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003f64 <temperature_from_base+0x68>
 8003f3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f40:	e008      	b.n	8003f54 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 8003f42:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f46:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8003f68 <temperature_from_base+0x6c>
 8003f4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f4e:	e001      	b.n	8003f54 <temperature_from_base+0x58>
        default:
            return value;
 8003f50:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8003f54:	eeb0 0a67 	vmov.f32	s0, s15
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	42000000 	.word	0x42000000
 8003f68:	43889333 	.word	0x43889333

08003f6c <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8003f80:	2300      	movs	r3, #0
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	e00a      	b.n	8003f9c <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	3304      	adds	r3, #4
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b1a      	cmp	r3, #26
 8003fa0:	ddf1      	ble.n	8003f86 <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a11      	ldr	r2, [pc, #68]	@ (8003fec <init_length_converter+0x80>)
 8003fa6:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a11      	ldr	r2, [pc, #68]	@ (8003ff0 <init_length_converter+0x84>)
 8003fac:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003fb4:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8003ff4 <init_length_converter+0x88>)
 8003fba:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8003ff8 <init_length_converter+0x8c>)
 8003fc0:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8003ffc <init_length_converter+0x90>)
 8003fc6:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a0d      	ldr	r2, [pc, #52]	@ (8004000 <init_length_converter+0x94>)
 8003fcc:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8004004 <init_length_converter+0x98>)
 8003fd2:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003fe0:	bf00      	nop
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	3a83126f 	.word	0x3a83126f
 8003ff0:	3c23d70a 	.word	0x3c23d70a
 8003ff4:	447a0000 	.word	0x447a0000
 8003ff8:	3cd013a9 	.word	0x3cd013a9
 8003ffc:	3e9c0ebf 	.word	0x3e9c0ebf
 8004000:	3f6a161e 	.word	0x3f6a161e
 8004004:	44c92b02 	.word	0x44c92b02

08004008 <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	220a      	movs	r2, #10
 800401a:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 800401c:	2300      	movs	r3, #0
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	e00a      	b.n	8004038 <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	3304      	adds	r3, #4
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3301      	adds	r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b1a      	cmp	r3, #26
 800403c:	ddf1      	ble.n	8004022 <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a0e      	ldr	r2, [pc, #56]	@ (800407c <init_mass_converter+0x74>)
 8004042:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a0e      	ldr	r2, [pc, #56]	@ (8004080 <init_mass_converter+0x78>)
 8004048:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004050:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a0b      	ldr	r2, [pc, #44]	@ (8004084 <init_mass_converter+0x7c>)
 8004056:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a0b      	ldr	r2, [pc, #44]	@ (8004088 <init_mass_converter+0x80>)
 800405c:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a0a      	ldr	r2, [pc, #40]	@ (800408c <init_mass_converter+0x84>)
 8004062:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004070:	bf00      	nop
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	358637bd 	.word	0x358637bd
 8004080:	3a83126f 	.word	0x3a83126f
 8004084:	447a0000 	.word	0x447a0000
 8004088:	3ce83d36 	.word	0x3ce83d36
 800408c:	3ee83d36 	.word	0x3ee83d36

08004090 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	220f      	movs	r2, #15
 80040a2:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	e00a      	b.n	80040c0 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	3304      	adds	r3, #4
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3301      	adds	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b1a      	cmp	r3, #26
 80040c4:	ddf1      	ble.n	80040aa <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a0a      	ldr	r2, [pc, #40]	@ (80040f4 <init_angle_converter+0x64>)
 80040ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80040d2:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a08      	ldr	r2, [pc, #32]	@ (80040f8 <init_angle_converter+0x68>)
 80040d8:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80040e6:	bf00      	nop
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	3c8efa35 	.word	0x3c8efa35
 80040f8:	3c80adfd 	.word	0x3c80adfd

080040fc <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2203      	movs	r2, #3
 8004108:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2214      	movs	r2, #20
 800410e:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	e00a      	b.n	800412c <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	3304      	adds	r3, #4
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3301      	adds	r3, #1
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b1a      	cmp	r3, #26
 8004130:	ddf1      	ble.n	8004116 <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a10      	ldr	r2, [pc, #64]	@ (8004178 <init_time_converter+0x7c>)
 8004136:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a10      	ldr	r2, [pc, #64]	@ (800417c <init_time_converter+0x80>)
 800413c:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a0f      	ldr	r2, [pc, #60]	@ (8004180 <init_time_converter+0x84>)
 8004142:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800414a:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a0d      	ldr	r2, [pc, #52]	@ (8004184 <init_time_converter+0x88>)
 8004150:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a0c      	ldr	r2, [pc, #48]	@ (8004188 <init_time_converter+0x8c>)
 8004156:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a0c      	ldr	r2, [pc, #48]	@ (800418c <init_time_converter+0x90>)
 800415c:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	3089705f 	.word	0x3089705f
 800417c:	358637bd 	.word	0x358637bd
 8004180:	3a83126f 	.word	0x3a83126f
 8004184:	42700000 	.word	0x42700000
 8004188:	45610000 	.word	0x45610000
 800418c:	47a8c000 	.word	0x47a8c000

08004190 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2204      	movs	r2, #4
 800419c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2218      	movs	r2, #24
 80041a2:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	e00a      	b.n	80041c0 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	3304      	adds	r3, #4
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3301      	adds	r3, #1
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b1a      	cmp	r3, #26
 80041c4:	ddf1      	ble.n	80041aa <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a05      	ldr	r2, [pc, #20]	@ (80041e0 <init_temperature_converter+0x50>)
 80041ca:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a05      	ldr	r2, [pc, #20]	@ (80041e4 <init_temperature_converter+0x54>)
 80041d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	08003e8d 	.word	0x08003e8d
 80041e4:	08003efd 	.word	0x08003efd

080041e8 <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff feba 	bl	8003f6c <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3378      	adds	r3, #120	@ 0x78
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ff03 	bl	8004008 <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	33f0      	adds	r3, #240	@ 0xf0
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff ff42 	bl	8004090 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff ff72 	bl	80040fc <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff ffb6 	bl	8004190 <init_temperature_converter>
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	2b1a      	cmp	r3, #26
 800423a:	d803      	bhi.n	8004244 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	4a05      	ldr	r2, [pc, #20]	@ (8004254 <UnitConverter_get_unit_type+0x28>)
 8004240:	5cd3      	ldrb	r3, [r2, r3]
 8004242:	e000      	b.n	8004246 <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000114 	.word	0x20000114

08004258 <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	ed87 0a02 	vstr	s0, [r7, #8]
 8004264:	460b      	mov	r3, r1
 8004266:	71fb      	strb	r3, [r7, #7]
 8004268:	4613      	mov	r3, r2
 800426a:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ffdc 	bl	800422c <UnitConverter_get_unit_type>
 8004274:	4603      	mov	r3, r0
 8004276:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 8004278:	79bb      	ldrb	r3, [r7, #6]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff ffd6 	bl	800422c <UnitConverter_get_unit_type>
 8004280:	4603      	mov	r3, r0
 8004282:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 8004284:	7efa      	ldrb	r2, [r7, #27]
 8004286:	7ebb      	ldrb	r3, [r7, #26]
 8004288:	429a      	cmp	r2, r3
 800428a:	d002      	beq.n	8004292 <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 800428c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004290:	e03b      	b.n	800430a <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 8004292:	7efa      	ldrb	r2, [r7, #27]
 8004294:	4613      	mov	r3, r2
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	1a9b      	subs	r3, r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ae:	79fa      	ldrb	r2, [r7, #7]
 80042b0:	4610      	mov	r0, r2
 80042b2:	ed97 0a02 	vldr	s0, [r7, #8]
 80042b6:	4798      	blx	r3
 80042b8:	ed87 0a07 	vstr	s0, [r7, #28]
 80042bc:	e00c      	b.n	80042d8 <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	3304      	adds	r3, #4
 80042c8:	edd3 7a00 	vldr	s15, [r3]
 80042cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80042d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d4:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d009      	beq.n	80042f4 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e4:	79ba      	ldrb	r2, [r7, #6]
 80042e6:	4610      	mov	r0, r2
 80042e8:	ed97 0a07 	vldr	s0, [r7, #28]
 80042ec:	4798      	blx	r3
 80042ee:	eef0 7a40 	vmov.f32	s15, s0
 80042f2:	e00a      	b.n	800430a <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 80042f4:	79bb      	ldrb	r3, [r7, #6]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	3304      	adds	r3, #4
 80042fe:	ed93 7a00 	vldr	s14, [r3]
 8004302:	edd7 6a07 	vldr	s13, [r7, #28]
 8004306:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 800430a:	eeb0 0a67 	vmov.f32	s0, s15
 800430e:	3720      	adds	r7, #32
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004320:	460b      	mov	r3, r1
 8004322:	71fb      	strb	r3, [r7, #7]
 8004324:	4613      	mov	r3, r2
 8004326:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff ff7e 	bl	800422c <UnitConverter_get_unit_type>
 8004330:	4603      	mov	r3, r0
 8004332:	2b02      	cmp	r3, #2
 8004334:	d111      	bne.n	800435a <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 8004336:	79bb      	ldrb	r3, [r7, #6]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff ff77 	bl	800422c <UnitConverter_get_unit_type>
 800433e:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004340:	2b02      	cmp	r3, #2
 8004342:	d10a      	bne.n	800435a <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 8004344:	79ba      	ldrb	r2, [r7, #6]
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	4619      	mov	r1, r3
 800434a:	ed97 0a02 	vldr	s0, [r7, #8]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f7ff ff82 	bl	8004258 <UnitConverter_convert>
 8004354:	eef0 7a40 	vmov.f32	s15, s0
 8004358:	e001      	b.n	800435e <UnitConverter_angle+0x4a>
    }
    return value;
 800435a:	edd7 7a02 	vldr	s15, [r7, #8]
}
 800435e:	eeb0 0a67 	vmov.f32	s0, s15
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08c      	sub	sp, #48	@ 0x30
 800436c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800436e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	605a      	str	r2, [r3, #4]
 8004378:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800437a:	1d3b      	adds	r3, r7, #4
 800437c:	2220      	movs	r2, #32
 800437e:	2100      	movs	r1, #0
 8004380:	4618      	mov	r0, r3
 8004382:	f00b f8d3 	bl	800f52c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004386:	4b39      	ldr	r3, [pc, #228]	@ (800446c <MX_ADC1_Init+0x104>)
 8004388:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800438c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800438e:	4b37      	ldr	r3, [pc, #220]	@ (800446c <MX_ADC1_Init+0x104>)
 8004390:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004394:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004396:	4b35      	ldr	r3, [pc, #212]	@ (800446c <MX_ADC1_Init+0x104>)
 8004398:	2200      	movs	r2, #0
 800439a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800439c:	4b33      	ldr	r3, [pc, #204]	@ (800446c <MX_ADC1_Init+0x104>)
 800439e:	2200      	movs	r2, #0
 80043a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80043a2:	4b32      	ldr	r3, [pc, #200]	@ (800446c <MX_ADC1_Init+0x104>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80043a8:	4b30      	ldr	r3, [pc, #192]	@ (800446c <MX_ADC1_Init+0x104>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80043ae:	4b2f      	ldr	r3, [pc, #188]	@ (800446c <MX_ADC1_Init+0x104>)
 80043b0:	2204      	movs	r2, #4
 80043b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80043b4:	4b2d      	ldr	r3, [pc, #180]	@ (800446c <MX_ADC1_Init+0x104>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80043ba:	4b2c      	ldr	r3, [pc, #176]	@ (800446c <MX_ADC1_Init+0x104>)
 80043bc:	2201      	movs	r2, #1
 80043be:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80043c0:	4b2a      	ldr	r3, [pc, #168]	@ (800446c <MX_ADC1_Init+0x104>)
 80043c2:	2202      	movs	r2, #2
 80043c4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80043c6:	4b29      	ldr	r3, [pc, #164]	@ (800446c <MX_ADC1_Init+0x104>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80043ce:	4b27      	ldr	r3, [pc, #156]	@ (800446c <MX_ADC1_Init+0x104>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80043d4:	4b25      	ldr	r3, [pc, #148]	@ (800446c <MX_ADC1_Init+0x104>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80043da:	4b24      	ldr	r3, [pc, #144]	@ (800446c <MX_ADC1_Init+0x104>)
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80043e2:	4b22      	ldr	r3, [pc, #136]	@ (800446c <MX_ADC1_Init+0x104>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80043e8:	4b20      	ldr	r3, [pc, #128]	@ (800446c <MX_ADC1_Init+0x104>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80043f0:	481e      	ldr	r0, [pc, #120]	@ (800446c <MX_ADC1_Init+0x104>)
 80043f2:	f003 fb71 	bl	8007ad8 <HAL_ADC_Init>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80043fc:	f001 fbd8 	bl	8005bb0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004400:	2300      	movs	r3, #0
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004404:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004408:	4619      	mov	r1, r3
 800440a:	4818      	ldr	r0, [pc, #96]	@ (800446c <MX_ADC1_Init+0x104>)
 800440c:	f004 fc90 	bl	8008d30 <HAL_ADCEx_MultiModeConfigChannel>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004416:	f001 fbcb 	bl	8005bb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800441a:	4b15      	ldr	r3, [pc, #84]	@ (8004470 <MX_ADC1_Init+0x108>)
 800441c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800441e:	2306      	movs	r3, #6
 8004420:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004422:	2307      	movs	r3, #7
 8004424:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004426:	237f      	movs	r3, #127	@ 0x7f
 8004428:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800442a:	2304      	movs	r3, #4
 800442c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004432:	1d3b      	adds	r3, r7, #4
 8004434:	4619      	mov	r1, r3
 8004436:	480d      	ldr	r0, [pc, #52]	@ (800446c <MX_ADC1_Init+0x104>)
 8004438:	f003 fdfc 	bl	8008034 <HAL_ADC_ConfigChannel>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8004442:	f001 fbb5 	bl	8005bb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004446:	4b0b      	ldr	r3, [pc, #44]	@ (8004474 <MX_ADC1_Init+0x10c>)
 8004448:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800444a:	230c      	movs	r3, #12
 800444c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800444e:	1d3b      	adds	r3, r7, #4
 8004450:	4619      	mov	r1, r3
 8004452:	4806      	ldr	r0, [pc, #24]	@ (800446c <MX_ADC1_Init+0x104>)
 8004454:	f003 fdee 	bl	8008034 <HAL_ADC_ConfigChannel>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800445e:	f001 fba7 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004462:	bf00      	nop
 8004464:	3730      	adds	r7, #48	@ 0x30
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	200001b0 	.word	0x200001b0
 8004470:	19200040 	.word	0x19200040
 8004474:	1d500080 	.word	0x1d500080

08004478 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b09e      	sub	sp, #120	@ 0x78
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004480:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	609a      	str	r2, [r3, #8]
 800448c:	60da      	str	r2, [r3, #12]
 800448e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004490:	f107 0310 	add.w	r3, r7, #16
 8004494:	2254      	movs	r2, #84	@ 0x54
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f00b f847 	bl	800f52c <memset>
  if(adcHandle->Instance==ADC1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044a6:	d15e      	bne.n	8004566 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80044a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80044ae:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80044b2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044b4:	f107 0310 	add.w	r3, r7, #16
 80044b8:	4618      	mov	r0, r3
 80044ba:	f006 f92f 	bl	800a71c <HAL_RCCEx_PeriphCLKConfig>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80044c4:	f001 fb74 	bl	8005bb0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80044c8:	4b29      	ldr	r3, [pc, #164]	@ (8004570 <HAL_ADC_MspInit+0xf8>)
 80044ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044cc:	4a28      	ldr	r2, [pc, #160]	@ (8004570 <HAL_ADC_MspInit+0xf8>)
 80044ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044d4:	4b26      	ldr	r3, [pc, #152]	@ (8004570 <HAL_ADC_MspInit+0xf8>)
 80044d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044e0:	4b23      	ldr	r3, [pc, #140]	@ (8004570 <HAL_ADC_MspInit+0xf8>)
 80044e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e4:	4a22      	ldr	r2, [pc, #136]	@ (8004570 <HAL_ADC_MspInit+0xf8>)
 80044e6:	f043 0304 	orr.w	r3, r3, #4
 80044ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044ec:	4b20      	ldr	r3, [pc, #128]	@ (8004570 <HAL_ADC_MspInit+0xf8>)
 80044ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80044f8:	2303      	movs	r3, #3
 80044fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044fc:	2303      	movs	r3, #3
 80044fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004500:	2300      	movs	r3, #0
 8004502:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004504:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004508:	4619      	mov	r1, r3
 800450a:	481a      	ldr	r0, [pc, #104]	@ (8004574 <HAL_ADC_MspInit+0xfc>)
 800450c:	f005 f95a 	bl	80097c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004510:	4b19      	ldr	r3, [pc, #100]	@ (8004578 <HAL_ADC_MspInit+0x100>)
 8004512:	4a1a      	ldr	r2, [pc, #104]	@ (800457c <HAL_ADC_MspInit+0x104>)
 8004514:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004516:	4b18      	ldr	r3, [pc, #96]	@ (8004578 <HAL_ADC_MspInit+0x100>)
 8004518:	2205      	movs	r2, #5
 800451a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800451c:	4b16      	ldr	r3, [pc, #88]	@ (8004578 <HAL_ADC_MspInit+0x100>)
 800451e:	2200      	movs	r2, #0
 8004520:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004522:	4b15      	ldr	r3, [pc, #84]	@ (8004578 <HAL_ADC_MspInit+0x100>)
 8004524:	2200      	movs	r2, #0
 8004526:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004528:	4b13      	ldr	r3, [pc, #76]	@ (8004578 <HAL_ADC_MspInit+0x100>)
 800452a:	2280      	movs	r2, #128	@ 0x80
 800452c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800452e:	4b12      	ldr	r3, [pc, #72]	@ (8004578 <HAL_ADC_MspInit+0x100>)
 8004530:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004534:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004536:	4b10      	ldr	r3, [pc, #64]	@ (8004578 <HAL_ADC_MspInit+0x100>)
 8004538:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800453c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800453e:	4b0e      	ldr	r3, [pc, #56]	@ (8004578 <HAL_ADC_MspInit+0x100>)
 8004540:	2220      	movs	r2, #32
 8004542:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004544:	4b0c      	ldr	r3, [pc, #48]	@ (8004578 <HAL_ADC_MspInit+0x100>)
 8004546:	2200      	movs	r2, #0
 8004548:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800454a:	480b      	ldr	r0, [pc, #44]	@ (8004578 <HAL_ADC_MspInit+0x100>)
 800454c:	f004 fe08 	bl	8009160 <HAL_DMA_Init>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8004556:	f001 fb2b 	bl	8005bb0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a06      	ldr	r2, [pc, #24]	@ (8004578 <HAL_ADC_MspInit+0x100>)
 800455e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004560:	4a05      	ldr	r2, [pc, #20]	@ (8004578 <HAL_ADC_MspInit+0x100>)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004566:	bf00      	nop
 8004568:	3778      	adds	r7, #120	@ 0x78
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40021000 	.word	0x40021000
 8004574:	48000800 	.word	0x48000800
 8004578:	2000021c 	.word	0x2000021c
 800457c:	40020008 	.word	0x40020008

08004580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004586:	4b22      	ldr	r3, [pc, #136]	@ (8004610 <MX_DMA_Init+0x90>)
 8004588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800458a:	4a21      	ldr	r2, [pc, #132]	@ (8004610 <MX_DMA_Init+0x90>)
 800458c:	f043 0304 	orr.w	r3, r3, #4
 8004590:	6493      	str	r3, [r2, #72]	@ 0x48
 8004592:	4b1f      	ldr	r3, [pc, #124]	@ (8004610 <MX_DMA_Init+0x90>)
 8004594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	607b      	str	r3, [r7, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800459e:	4b1c      	ldr	r3, [pc, #112]	@ (8004610 <MX_DMA_Init+0x90>)
 80045a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004610 <MX_DMA_Init+0x90>)
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80045aa:	4b19      	ldr	r3, [pc, #100]	@ (8004610 <MX_DMA_Init+0x90>)
 80045ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80045b6:	2200      	movs	r2, #0
 80045b8:	2100      	movs	r1, #0
 80045ba:	200b      	movs	r0, #11
 80045bc:	f004 fd9b 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80045c0:	200b      	movs	r0, #11
 80045c2:	f004 fdb2 	bl	800912a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80045c6:	2200      	movs	r2, #0
 80045c8:	2100      	movs	r1, #0
 80045ca:	200c      	movs	r0, #12
 80045cc:	f004 fd93 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80045d0:	200c      	movs	r0, #12
 80045d2:	f004 fdaa 	bl	800912a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80045d6:	2200      	movs	r2, #0
 80045d8:	2100      	movs	r1, #0
 80045da:	200d      	movs	r0, #13
 80045dc:	f004 fd8b 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80045e0:	200d      	movs	r0, #13
 80045e2:	f004 fda2 	bl	800912a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80045e6:	2200      	movs	r2, #0
 80045e8:	2100      	movs	r1, #0
 80045ea:	200e      	movs	r0, #14
 80045ec:	f004 fd83 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80045f0:	200e      	movs	r0, #14
 80045f2:	f004 fd9a 	bl	800912a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80045f6:	2200      	movs	r2, #0
 80045f8:	2100      	movs	r1, #0
 80045fa:	200f      	movs	r0, #15
 80045fc:	f004 fd7b 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004600:	200f      	movs	r0, #15
 8004602:	f004 fd92 	bl	800912a <HAL_NVIC_EnableIRQ>

}
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40021000 	.word	0x40021000

08004614 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	@ 0x28
 8004618:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800461a:	f107 0314 	add.w	r3, r7, #20
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	605a      	str	r2, [r3, #4]
 8004624:	609a      	str	r2, [r3, #8]
 8004626:	60da      	str	r2, [r3, #12]
 8004628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800462a:	4b67      	ldr	r3, [pc, #412]	@ (80047c8 <MX_GPIO_Init+0x1b4>)
 800462c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800462e:	4a66      	ldr	r2, [pc, #408]	@ (80047c8 <MX_GPIO_Init+0x1b4>)
 8004630:	f043 0304 	orr.w	r3, r3, #4
 8004634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004636:	4b64      	ldr	r3, [pc, #400]	@ (80047c8 <MX_GPIO_Init+0x1b4>)
 8004638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004642:	4b61      	ldr	r3, [pc, #388]	@ (80047c8 <MX_GPIO_Init+0x1b4>)
 8004644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004646:	4a60      	ldr	r2, [pc, #384]	@ (80047c8 <MX_GPIO_Init+0x1b4>)
 8004648:	f043 0320 	orr.w	r3, r3, #32
 800464c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800464e:	4b5e      	ldr	r3, [pc, #376]	@ (80047c8 <MX_GPIO_Init+0x1b4>)
 8004650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800465a:	4b5b      	ldr	r3, [pc, #364]	@ (80047c8 <MX_GPIO_Init+0x1b4>)
 800465c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465e:	4a5a      	ldr	r2, [pc, #360]	@ (80047c8 <MX_GPIO_Init+0x1b4>)
 8004660:	f043 0301 	orr.w	r3, r3, #1
 8004664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004666:	4b58      	ldr	r3, [pc, #352]	@ (80047c8 <MX_GPIO_Init+0x1b4>)
 8004668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004672:	4b55      	ldr	r3, [pc, #340]	@ (80047c8 <MX_GPIO_Init+0x1b4>)
 8004674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004676:	4a54      	ldr	r2, [pc, #336]	@ (80047c8 <MX_GPIO_Init+0x1b4>)
 8004678:	f043 0302 	orr.w	r3, r3, #2
 800467c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800467e:	4b52      	ldr	r3, [pc, #328]	@ (80047c8 <MX_GPIO_Init+0x1b4>)
 8004680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	607b      	str	r3, [r7, #4]
 8004688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 800468a:	2200      	movs	r2, #0
 800468c:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004694:	f005 fa30 	bl	8009af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8004698:	2200      	movs	r2, #0
 800469a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800469e:	484b      	ldr	r0, [pc, #300]	@ (80047cc <MX_GPIO_Init+0x1b8>)
 80046a0:	f005 fa2a 	bl	8009af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80046a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80046aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80046ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80046b4:	f107 0314 	add.w	r3, r7, #20
 80046b8:	4619      	mov	r1, r3
 80046ba:	4844      	ldr	r0, [pc, #272]	@ (80047cc <MX_GPIO_Init+0x1b8>)
 80046bc:	f005 f882 	bl	80097c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 80046c0:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 80046c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046c6:	2301      	movs	r3, #1
 80046c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ce:	2300      	movs	r3, #0
 80046d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046d2:	f107 0314 	add.w	r3, r7, #20
 80046d6:	4619      	mov	r1, r3
 80046d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80046dc:	f005 f872 	bl	80097c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin EMER_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin|EMER_Pin;
 80046e0:	f241 0311 	movw	r3, #4113	@ 0x1011
 80046e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80046e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80046ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046f0:	f107 0314 	add.w	r3, r7, #20
 80046f4:	4619      	mov	r1, r3
 80046f6:	4836      	ldr	r0, [pc, #216]	@ (80047d0 <MX_GPIO_Init+0x1bc>)
 80046f8:	f005 f864 	bl	80097c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 80046fc:	2306      	movs	r3, #6
 80046fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004700:	2300      	movs	r3, #0
 8004702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004704:	2302      	movs	r3, #2
 8004706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004708:	f107 0314 	add.w	r3, r7, #20
 800470c:	4619      	mov	r1, r3
 800470e:	4830      	ldr	r0, [pc, #192]	@ (80047d0 <MX_GPIO_Init+0x1bc>)
 8004710:	f005 f858 	bl	80097c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004714:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800471a:	2301      	movs	r3, #1
 800471c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004722:	2300      	movs	r3, #0
 8004724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004726:	f107 0314 	add.w	r3, r7, #20
 800472a:	4619      	mov	r1, r3
 800472c:	4827      	ldr	r0, [pc, #156]	@ (80047cc <MX_GPIO_Init+0x1b8>)
 800472e:	f005 f849 	bl	80097c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin J2_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin|J2_Pin;
 8004732:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004738:	2300      	movs	r3, #0
 800473a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473c:	2300      	movs	r3, #0
 800473e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004740:	f107 0314 	add.w	r3, r7, #20
 8004744:	4619      	mov	r1, r3
 8004746:	4821      	ldr	r0, [pc, #132]	@ (80047cc <MX_GPIO_Init+0x1b8>)
 8004748:	f005 f83c 	bl	80097c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 800474c:	2340      	movs	r3, #64	@ 0x40
 800474e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004750:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004756:	2301      	movs	r3, #1
 8004758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 800475a:	f107 0314 	add.w	r3, r7, #20
 800475e:	4619      	mov	r1, r3
 8004760:	481b      	ldr	r0, [pc, #108]	@ (80047d0 <MX_GPIO_Init+0x1bc>)
 8004762:	f005 f82f 	bl	80097c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 8004766:	2380      	movs	r3, #128	@ 0x80
 8004768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800476a:	2300      	movs	r3, #0
 800476c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 8004772:	f107 0314 	add.w	r3, r7, #20
 8004776:	4619      	mov	r1, r3
 8004778:	4815      	ldr	r0, [pc, #84]	@ (80047d0 <MX_GPIO_Init+0x1bc>)
 800477a:	f005 f823 	bl	80097c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800477e:	2200      	movs	r2, #0
 8004780:	2100      	movs	r1, #0
 8004782:	2006      	movs	r0, #6
 8004784:	f004 fcb7 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004788:	2006      	movs	r0, #6
 800478a:	f004 fcce 	bl	800912a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800478e:	2200      	movs	r2, #0
 8004790:	2100      	movs	r1, #0
 8004792:	200a      	movs	r0, #10
 8004794:	f004 fcaf 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004798:	200a      	movs	r0, #10
 800479a:	f004 fcc6 	bl	800912a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800479e:	2200      	movs	r2, #0
 80047a0:	2100      	movs	r1, #0
 80047a2:	2017      	movs	r0, #23
 80047a4:	f004 fca7 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80047a8:	2017      	movs	r0, #23
 80047aa:	f004 fcbe 	bl	800912a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80047ae:	2200      	movs	r2, #0
 80047b0:	2100      	movs	r1, #0
 80047b2:	2028      	movs	r0, #40	@ 0x28
 80047b4:	f004 fc9f 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80047b8:	2028      	movs	r0, #40	@ 0x28
 80047ba:	f004 fcb6 	bl	800912a <HAL_NVIC_EnableIRQ>

}
 80047be:	bf00      	nop
 80047c0:	3728      	adds	r7, #40	@ 0x28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40021000 	.word	0x40021000
 80047cc:	48000800 	.word	0x48000800
 80047d0:	48000400 	.word	0x48000400

080047d4 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b096      	sub	sp, #88	@ 0x58
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80047e0:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80047ea:	1d3b      	adds	r3, r7, #4
 80047ec:	2201      	movs	r2, #1
 80047ee:	2101      	movs	r1, #1
 80047f0:	f00a f92b 	bl	800ea4a <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8004800:	4619      	mov	r1, r3
 8004802:	4610      	mov	r0, r2
 8004804:	f00a fd9b 	bl	800f33e <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f00a fd91 	bl	800f33e <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8004828:	4619      	mov	r1, r3
 800482a:	4610      	mov	r0, r2
 800482c:	f00a fd87 	bl	800f33e <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 800483c:	4619      	mov	r1, r3
 800483e:	ed97 0a02 	vldr	s0, [r7, #8]
 8004842:	4610      	mov	r0, r2
 8004844:	f00a fd0a 	bl	800f25c <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 800485a:	461a      	mov	r2, r3
 800485c:	f00a fc84 	bl	800f168 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004872:	461a      	mov	r2, r3
 8004874:	f00a f8ae 	bl	800e9d4 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 800488a:	461a      	mov	r2, r3
 800488c:	f00a fc6c 	bl	800f168 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80048a2:	461a      	mov	r2, r3
 80048a4:	f00a fc60 	bl	800f168 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80048ba:	461a      	mov	r2, r3
 80048bc:	f00a fc54 	bl	800f168 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80048d2:	4619      	mov	r1, r3
 80048d4:	eeb0 0a67 	vmov.f32	s0, s15
 80048d8:	4610      	mov	r0, r2
 80048da:	f00a fcbf 	bl	800f25c <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80048f0:	461a      	mov	r2, r3
 80048f2:	f00a f86f 	bl	800e9d4 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8004908:	461a      	mov	r2, r3
 800490a:	f00a fc2d 	bl	800f168 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8004920:	461a      	mov	r2, r3
 8004922:	f00a fc21 	bl	800f168 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8004938:	461a      	mov	r2, r3
 800493a:	f00a f84b 	bl	800e9d4 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f00a f894 	bl	800ea7a <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8004964:	461a      	mov	r2, r3
 8004966:	f00a fbff 	bl	800f168 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800497c:	461a      	mov	r2, r3
 800497e:	f00a fbf3 	bl	800f168 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8004994:	461a      	mov	r2, r3
 8004996:	f00a fbe7 	bl	800f168 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 80049ac:	461a      	mov	r2, r3
 80049ae:	f00a fc8b 	bl	800f2c8 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 80049c4:	461a      	mov	r2, r3
 80049c6:	f00a fbcf 	bl	800f168 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80049dc:	461a      	mov	r2, r3
 80049de:	f009 fff9 	bl	800e9d4 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80049f4:	461a      	mov	r2, r3
 80049f6:	f00a fbb7 	bl	800f168 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 80049fa:	f107 0310 	add.w	r3, r7, #16
 80049fe:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8004a02:	2204      	movs	r2, #4
 8004a04:	2104      	movs	r1, #4
 8004a06:	f00a f820 	bl	800ea4a <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8004a16:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	f00a fba4 	bl	800f168 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8004a26:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004a2a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f00a fc4a 	bl	800f2c8 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8004a40:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004a44:	4618      	mov	r0, r3
 8004a46:	f00a fb8f 	bl	800f168 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004a5a:	ee07 3a90 	vmov	s15, r3
}
 8004a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a62:	3758      	adds	r7, #88	@ 0x58
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8004a68:	b5b0      	push	{r4, r5, r7, lr}
 8004a6a:	b0a4      	sub	sp, #144	@ 0x90
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6178      	str	r0, [r7, #20]
 8004a70:	6139      	str	r1, [r7, #16]
 8004a72:	60fa      	str	r2, [r7, #12]
 8004a74:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a78:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8004a8c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004a90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ab0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004ab4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	677b      	str	r3, [r7, #116]	@ 0x74
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8004ac2:	4bc6      	ldr	r3, [pc, #792]	@ (8004ddc <Kalman_Start+0x374>)
 8004ac4:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8004ac8:	461d      	mov	r5, r3
 8004aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ad6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004ada:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8004ade:	f107 031c 	add.w	r3, r7, #28
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	605a      	str	r2, [r3, #4]
 8004ae8:	609a      	str	r2, [r3, #8]
 8004aea:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8004af6:	2300      	movs	r3, #0
 8004af8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004afc:	e028      	b.n	8004b50 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8004afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4413      	add	r3, r2
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	6979      	ldr	r1, [r7, #20]
 8004b0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b10:	3314      	adds	r3, #20
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8004b18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	3390      	adds	r3, #144	@ 0x90
 8004b20:	443b      	add	r3, r7
 8004b22:	3b64      	subs	r3, #100	@ 0x64
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	6979      	ldr	r1, [r7, #20]
 8004b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b2c:	3398      	adds	r3, #152	@ 0x98
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8004b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b54:	2b0f      	cmp	r3, #15
 8004b56:	ddd2      	ble.n	8004afe <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b5e:	e03a      	b.n	8004bd6 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8004b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	3390      	adds	r3, #144	@ 0x90
 8004b68:	443b      	add	r3, r7
 8004b6a:	3b74      	subs	r3, #116	@ 0x74
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	6979      	ldr	r1, [r7, #20]
 8004b70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8004b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4413      	add	r3, r2
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	6979      	ldr	r1, [r7, #20]
 8004b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b8c:	3324      	adds	r3, #36	@ 0x24
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8004b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	3390      	adds	r3, #144	@ 0x90
 8004b9c:	443b      	add	r3, r7
 8004b9e:	3b14      	subs	r3, #20
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	6979      	ldr	r1, [r7, #20]
 8004ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ba8:	3328      	adds	r3, #40	@ 0x28
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8004bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	3390      	adds	r3, #144	@ 0x90
 8004bb8:	443b      	add	r3, r7
 8004bba:	3b24      	subs	r3, #36	@ 0x24
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	6979      	ldr	r1, [r7, #20]
 8004bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bc4:	332c      	adds	r3, #44	@ 0x2c
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8004bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	ddc0      	ble.n	8004b60 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2201      	movs	r2, #1
 8004be8:	2104      	movs	r1, #4
 8004bea:	f009 ff2e 	bl	800ea4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	3310      	adds	r3, #16
 8004bf8:	2204      	movs	r2, #4
 8004bfa:	2104      	movs	r1, #4
 8004bfc:	f009 ff25 	bl	800ea4a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	3350      	adds	r3, #80	@ 0x50
 8004c0a:	2204      	movs	r2, #4
 8004c0c:	2104      	movs	r1, #4
 8004c0e:	f009 ff1c 	bl	800ea4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	3390      	adds	r3, #144	@ 0x90
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	2104      	movs	r1, #4
 8004c20:	f009 ff13 	bl	800ea4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	33a0      	adds	r3, #160	@ 0xa0
 8004c2e:	2204      	movs	r2, #4
 8004c30:	2101      	movs	r1, #1
 8004c32:	f009 ff0a 	bl	800ea4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	33b0      	adds	r3, #176	@ 0xb0
 8004c40:	2201      	movs	r2, #1
 8004c42:	2104      	movs	r1, #4
 8004c44:	f009 ff01 	bl	800ea4a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	33c8      	adds	r3, #200	@ 0xc8
 8004c52:	2204      	movs	r2, #4
 8004c54:	2104      	movs	r1, #4
 8004c56:	f009 fef8 	bl	800ea4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004c66:	2201      	movs	r2, #1
 8004c68:	2104      	movs	r1, #4
 8004c6a:	f009 feee 	bl	800ea4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	f009 fee4 	bl	800ea4a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004c8e:	2204      	movs	r2, #4
 8004c90:	2104      	movs	r1, #4
 8004c92:	f009 feda 	bl	800ea4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	2104      	movs	r1, #4
 8004ca6:	f009 fed0 	bl	800ea4a <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	2104      	movs	r1, #4
 8004cba:	f009 fec6 	bl	800ea4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8004cca:	2201      	movs	r2, #1
 8004ccc:	2104      	movs	r1, #4
 8004cce:	f009 febc 	bl	800ea4a <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004cde:	2204      	movs	r2, #4
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	f009 feb2 	bl	800ea4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	f009 fea8 	bl	800ea4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8004d06:	2201      	movs	r2, #1
 8004d08:	2101      	movs	r1, #1
 8004d0a:	f009 fe9e 	bl	800ea4a <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	2104      	movs	r1, #4
 8004d1e:	f009 fe94 	bl	800ea4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004d2e:	2201      	movs	r2, #1
 8004d30:	2104      	movs	r1, #4
 8004d32:	f009 fe8a 	bl	800ea4a <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8004d42:	2201      	movs	r2, #1
 8004d44:	2101      	movs	r1, #1
 8004d46:	f009 fe80 	bl	800ea4a <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8004d56:	2201      	movs	r2, #1
 8004d58:	2101      	movs	r1, #1
 8004d5a:	f009 fe76 	bl	800ea4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	f009 fe6c 	bl	800ea4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004d7e:	2201      	movs	r2, #1
 8004d80:	2104      	movs	r1, #4
 8004d82:	f009 fe62 	bl	800ea4a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004d92:	2201      	movs	r2, #1
 8004d94:	2101      	movs	r1, #1
 8004d96:	f009 fe58 	bl	800ea4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004da6:	2204      	movs	r2, #4
 8004da8:	2104      	movs	r1, #4
 8004daa:	f009 fe4e 	bl	800ea4a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	33c4      	adds	r3, #196	@ 0xc4
 8004db8:	2201      	movs	r2, #1
 8004dba:	2101      	movs	r1, #1
 8004dbc:	f009 fe45 	bl	800ea4a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8004dcc:	2201      	movs	r2, #1
 8004dce:	2101      	movs	r1, #1
 8004dd0:	f009 fe3b 	bl	800ea4a <arm_mat_init_f32>
}
 8004dd4:	bf00      	nop
 8004dd6:	3790      	adds	r7, #144	@ 0x90
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bdb0      	pop	{r4, r5, r7, pc}
 8004ddc:	080113f8 	.word	0x080113f8

08004de0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004de4:	f002 fbc3 	bl	800756e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004de8:	f000 f890 	bl	8004f0c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004dec:	f7ff fc12 	bl	8004614 <MX_GPIO_Init>
	MX_DMA_Init();
 8004df0:	f7ff fbc6 	bl	8004580 <MX_DMA_Init>
	MX_ADC1_Init();
 8004df4:	f7ff fab8 	bl	8004368 <MX_ADC1_Init>
	MX_TIM2_Init();
 8004df8:	f001 fdce 	bl	8006998 <MX_TIM2_Init>
	MX_TIM3_Init();
 8004dfc:	f001 fe1a 	bl	8006a34 <MX_TIM3_Init>
	MX_TIM4_Init();
 8004e00:	f001 fe6e 	bl	8006ae0 <MX_TIM4_Init>
	MX_TIM5_Init();
 8004e04:	f001 fec2 	bl	8006b8c <MX_TIM5_Init>
	MX_TIM8_Init();
 8004e08:	f001 ff16 	bl	8006c38 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8004e0c:	f002 f9d8 	bl	80071c0 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8004e10:	f001 ffd0 	bl	8006db4 <MX_TIM16_Init>
	MX_TIM1_Init();
 8004e14:	f001 fd2c 	bl	8006870 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 8004e18:	f002 f988 	bl	800712c <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8004e1c:	f000 fed0 	bl	8005bc0 <plotter_begin>

	// Initialize position setpoints to current position to prevent startup errors
	prismatic_axis.position = prismatic_encoder.mm;
 8004e20:	4b30      	ldr	r3, [pc, #192]	@ (8004ee4 <main+0x104>)
 8004e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e24:	4a30      	ldr	r2, [pc, #192]	@ (8004ee8 <main+0x108>)
 8004e26:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8004e28:	4b30      	ldr	r3, [pc, #192]	@ (8004eec <main+0x10c>)
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2c:	4a30      	ldr	r2, [pc, #192]	@ (8004ef0 <main+0x110>)
 8004e2e:	6013      	str	r3, [r2, #0]

	// Reset all error terms and flags
	prismatic_axis.pos_error = 0.0f;
 8004e30:	4b2d      	ldr	r3, [pc, #180]	@ (8004ee8 <main+0x108>)
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	615a      	str	r2, [r3, #20]
	prismatic_axis.vel_error = 0.0f;
 8004e38:	4b2b      	ldr	r3, [pc, #172]	@ (8004ee8 <main+0x108>)
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	619a      	str	r2, [r3, #24]
	revolute_axis.pos_error = 0.0f;
 8004e40:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef0 <main+0x110>)
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	615a      	str	r2, [r3, #20]
	revolute_axis.vel_error = 0.0f;
 8004e48:	4b29      	ldr	r3, [pc, #164]	@ (8004ef0 <main+0x110>)
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	619a      	str	r2, [r3, #24]
	prismatic_axis.trajectory_active = false;
 8004e50:	4b25      	ldr	r3, [pc, #148]	@ (8004ee8 <main+0x108>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8004e58:	4b25      	ldr	r3, [pc, #148]	@ (8004ef0 <main+0x110>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		static uint8_t button_pressed_previous = 0;

		if (b1 && !button_pressed_previous && !revolute_axis.trajectory_active
 8004e60:	4b24      	ldr	r3, [pc, #144]	@ (8004ef4 <main+0x114>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d037      	beq.n	8004ed8 <main+0xf8>
 8004e68:	4b23      	ldr	r3, [pc, #140]	@ (8004ef8 <main+0x118>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d133      	bne.n	8004ed8 <main+0xf8>
 8004e70:	4b1f      	ldr	r3, [pc, #124]	@ (8004ef0 <main+0x110>)
 8004e72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004e76:	f083 0301 	eor.w	r3, r3, #1
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d02b      	beq.n	8004ed8 <main+0xf8>
				&& !prismatic_axis.trajectory_active) {
 8004e80:	4b19      	ldr	r3, [pc, #100]	@ (8004ee8 <main+0x108>)
 8004e82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004e86:	f083 0301 	eor.w	r3, r3, #1
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d023      	beq.n	8004ed8 <main+0xf8>
			start_combined_trajectory(
 8004e90:	4b1a      	ldr	r3, [pc, #104]	@ (8004efc <main+0x11c>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
					sequence_pris_points[trajectory_sequence_index],
 8004e94:	4a1a      	ldr	r2, [pc, #104]	@ (8004f00 <main+0x120>)
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	edd3 7a00 	vldr	s15, [r3]
			start_combined_trajectory(
 8004e9e:	4b17      	ldr	r3, [pc, #92]	@ (8004efc <main+0x11c>)
 8004ea0:	781b      	ldrb	r3, [r3, #0]
					sequence_rev_points[trajectory_sequence_index]);
 8004ea2:	4a18      	ldr	r2, [pc, #96]	@ (8004f04 <main+0x124>)
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	ed93 7a00 	vldr	s14, [r3]
			start_combined_trajectory(
 8004eac:	eef0 0a47 	vmov.f32	s1, s14
 8004eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8004eb4:	f000 f960 	bl	8005178 <start_combined_trajectory>
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8004eb8:	4b10      	ldr	r3, [pc, #64]	@ (8004efc <main+0x11c>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	1c5a      	adds	r2, r3, #1
					% SEQUENCE_MAX_POINTS;
 8004ebe:	4b12      	ldr	r3, [pc, #72]	@ (8004f08 <main+0x128>)
 8004ec0:	fb83 3102 	smull	r3, r1, r3, r2
 8004ec4:	17d3      	asrs	r3, r2, #31
 8004ec6:	1ac9      	subs	r1, r1, r3
 8004ec8:	460b      	mov	r3, r1
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	440b      	add	r3, r1
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	1ad1      	subs	r1, r2, r3
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8004ed2:	b2ca      	uxtb	r2, r1
 8004ed4:	4b09      	ldr	r3, [pc, #36]	@ (8004efc <main+0x11c>)
 8004ed6:	701a      	strb	r2, [r3, #0]
		}
		button_pressed_previous = b1;
 8004ed8:	4b06      	ldr	r3, [pc, #24]	@ (8004ef4 <main+0x114>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	4b06      	ldr	r3, [pc, #24]	@ (8004ef8 <main+0x118>)
 8004ee0:	701a      	strb	r2, [r3, #0]
	while (1) {
 8004ee2:	e7bd      	b.n	8004e60 <main+0x80>
 8004ee4:	20000404 	.word	0x20000404
 8004ee8:	2000027c 	.word	0x2000027c
 8004eec:	20000460 	.word	0x20000460
 8004ef0:	200002c0 	.word	0x200002c0
 8004ef4:	200018d4 	.word	0x200018d4
 8004ef8:	2000036a 	.word	0x2000036a
 8004efc:	20000354 	.word	0x20000354
 8004f00:	08011438 	.word	0x08011438
 8004f04:	08011450 	.word	0x08011450
 8004f08:	2aaaaaab 	.word	0x2aaaaaab

08004f0c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b094      	sub	sp, #80	@ 0x50
 8004f10:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004f12:	f107 0318 	add.w	r3, r7, #24
 8004f16:	2238      	movs	r2, #56	@ 0x38
 8004f18:	2100      	movs	r1, #0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f00a fb06 	bl	800f52c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004f20:	1d3b      	adds	r3, r7, #4
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	605a      	str	r2, [r3, #4]
 8004f28:	609a      	str	r2, [r3, #8]
 8004f2a:	60da      	str	r2, [r3, #12]
 8004f2c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004f2e:	2000      	movs	r0, #0
 8004f30:	f004 fe12 	bl	8009b58 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004f34:	2302      	movs	r3, #2
 8004f36:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f3c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004f3e:	2340      	movs	r3, #64	@ 0x40
 8004f40:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f42:	2302      	movs	r3, #2
 8004f44:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004f46:	2302      	movs	r3, #2
 8004f48:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004f4a:	2304      	movs	r3, #4
 8004f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8004f4e:	2355      	movs	r3, #85	@ 0x55
 8004f50:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004f52:	2302      	movs	r3, #2
 8004f54:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004f56:	2302      	movs	r3, #2
 8004f58:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004f5e:	f107 0318 	add.w	r3, r7, #24
 8004f62:	4618      	mov	r0, r3
 8004f64:	f004 feac 	bl	8009cc0 <HAL_RCC_OscConfig>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <SystemClock_Config+0x66>
		Error_Handler();
 8004f6e:	f000 fe1f 	bl	8005bb0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004f72:	230f      	movs	r3, #15
 8004f74:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f76:	2303      	movs	r3, #3
 8004f78:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8004f86:	1d3b      	adds	r3, r7, #4
 8004f88:	2104      	movs	r1, #4
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f005 f9aa 	bl	800a2e4 <HAL_RCC_ClockConfig>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <SystemClock_Config+0x8e>
		Error_Handler();
 8004f96:	f000 fe0b 	bl	8005bb0 <Error_Handler>
	}
}
 8004f9a:	bf00      	nop
 8004f9c:	3750      	adds	r7, #80	@ 0x50
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <normalize_angle>:

/* USER CODE BEGIN 4 */
float normalize_angle(float angle_rad) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8004fae:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8004fec <normalize_angle+0x48>
 8004fb2:	ed97 0a01 	vldr	s0, [r7, #4]
 8004fb6:	f00a fbb3 	bl	800f720 <fmodf>
 8004fba:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 8004fbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fca:	d507      	bpl.n	8004fdc <normalize_angle+0x38>
		result += 2.0f * PI;
 8004fcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fd0:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004fec <normalize_angle+0x48>
 8004fd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fd8:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	ee07 3a90 	vmov	s15, r3
}
 8004fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40c90fdb 	.word	0x40c90fdb

08004ff0 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	ed87 0a01 	vstr	s0, [r7, #4]
 8004ffa:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 8004ffe:	f04f 0300 	mov.w	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 8005004:	edd7 7a01 	vldr	s15, [r7, #4]
 8005008:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800516c <calculate_movement_deg+0x17c>
 800500c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005014:	d508      	bpl.n	8005028 <calculate_movement_deg+0x38>
 8005016:	edd7 7a00 	vldr	s15, [r7]
 800501a:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800516c <calculate_movement_deg+0x17c>
 800501e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005026:	d411      	bmi.n	800504c <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 8005028:	edd7 7a01 	vldr	s15, [r7, #4]
 800502c:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800516c <calculate_movement_deg+0x17c>
 8005030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005038:	db33      	blt.n	80050a2 <calculate_movement_deg+0xb2>
 800503a:	edd7 7a00 	vldr	s15, [r7]
 800503e:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800516c <calculate_movement_deg+0x17c>
 8005042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800504a:	db2a      	blt.n	80050a2 <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 800504c:	ed97 7a00 	vldr	s14, [r7]
 8005050:	edd7 7a01 	vldr	s15, [r7, #4]
 8005054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005058:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 800505c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005060:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800516c <calculate_movement_deg+0x17c>
 8005064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506c:	dd07      	ble.n	800507e <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 800506e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005072:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8005170 <calculate_movement_deg+0x180>
 8005076:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800507a:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 800507e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005082:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8005174 <calculate_movement_deg+0x184>
 8005086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800508a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508e:	d562      	bpl.n	8005156 <calculate_movement_deg+0x166>
			movement += 360.0f;
 8005090:	edd7 7a03 	vldr	s15, [r7, #12]
 8005094:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005170 <calculate_movement_deg+0x180>
 8005098:	ee77 7a87 	vadd.f32	s15, s15, s14
 800509c:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 80050a0:	e059      	b.n	8005156 <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 80050a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80050a6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800516c <calculate_movement_deg+0x17c>
 80050aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b2:	d52a      	bpl.n	800510a <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 80050b4:	edd7 7a00 	vldr	s15, [r7]
 80050b8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800516c <calculate_movement_deg+0x17c>
 80050bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80050c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050cc:	d50e      	bpl.n	80050ec <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 80050ce:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005170 <calculate_movement_deg+0x180>
 80050d2:	edd7 7a00 	vldr	s15, [r7]
 80050d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050da:	edd7 7a01 	vldr	s15, [r7, #4]
 80050de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050e2:	eef1 7a67 	vneg.f32	s15, s15
 80050e6:	edc7 7a03 	vstr	s15, [r7, #12]
 80050ea:	e034      	b.n	8005156 <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 80050ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80050f0:	edd7 7a00 	vldr	s15, [r7]
 80050f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050f8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005170 <calculate_movement_deg+0x180>
 80050fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005100:	eef1 7a67 	vneg.f32	s15, s15
 8005104:	edc7 7a03 	vstr	s15, [r7, #12]
 8005108:	e025      	b.n	8005156 <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 800510a:	edd7 7a01 	vldr	s15, [r7, #4]
 800510e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800516c <calculate_movement_deg+0x17c>
 8005112:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005116:	ed97 7a00 	vldr	s14, [r7]
 800511a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800511e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005122:	d50c      	bpl.n	800513e <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 8005124:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8005170 <calculate_movement_deg+0x180>
 8005128:	edd7 7a01 	vldr	s15, [r7, #4]
 800512c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005130:	ed97 7a00 	vldr	s14, [r7]
 8005134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005138:	edc7 7a03 	vstr	s15, [r7, #12]
 800513c:	e00b      	b.n	8005156 <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 800513e:	ed97 7a00 	vldr	s14, [r7]
 8005142:	edd7 7a01 	vldr	s15, [r7, #4]
 8005146:	ee77 7a67 	vsub.f32	s15, s14, s15
 800514a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8005170 <calculate_movement_deg+0x180>
 800514e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005152:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	ee07 3a90 	vmov	s15, r3
}
 800515c:	eeb0 0a67 	vmov.f32	s0, s15
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	43340000 	.word	0x43340000
 8005170:	43b40000 	.word	0x43b40000
 8005174:	c3340000 	.word	0xc3340000

08005178 <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	ed2d 8b02 	vpush	{d8}
 800517e:	b089      	sub	sp, #36	@ 0x24
 8005180:	af00      	add	r7, sp, #0
 8005182:	ed87 0a01 	vstr	s0, [r7, #4]
 8005186:	edc7 0a00 	vstr	s1, [r7]
	// Get current positions
	float pris_current = prismatic_encoder.mm;
 800518a:	4b58      	ldr	r3, [pc, #352]	@ (80052ec <start_combined_trajectory+0x174>)
 800518c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800518e:	61fb      	str	r3, [r7, #28]
	float rev_current = revolute_encoder.rads;
 8005190:	4b57      	ldr	r3, [pc, #348]	@ (80052f0 <start_combined_trajectory+0x178>)
 8005192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005194:	61bb      	str	r3, [r7, #24]

	// Reset trajectory evaluation structs
	prisEva.t = 0.0f;
 8005196:	4b57      	ldr	r3, [pc, #348]	@ (80052f4 <start_combined_trajectory+0x17c>)
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 800519e:	4b55      	ldr	r3, [pc, #340]	@ (80052f4 <start_combined_trajectory+0x17c>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 80051a4:	4b54      	ldr	r3, [pc, #336]	@ (80052f8 <start_combined_trajectory+0x180>)
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 80051ac:	4b52      	ldr	r3, [pc, #328]	@ (80052f8 <start_combined_trajectory+0x180>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	741a      	strb	r2, [r3, #16]

	// Save initial positions
	prismatic_axis.initial_pos = pris_current;
 80051b2:	4a52      	ldr	r2, [pc, #328]	@ (80052fc <start_combined_trajectory+0x184>)
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 80051b8:	4a51      	ldr	r2, [pc, #324]	@ (8005300 <start_combined_trajectory+0x188>)
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	60d3      	str	r3, [r2, #12]

	// For prismatic axis - direct target with bounds checking
	prismatic_axis.target_pos = fminf(
 80051be:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8005304 <start_combined_trajectory+0x18c>
 80051c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80051c6:	f00a fb73 	bl	800f8b0 <fmaxf>
 80051ca:	eef0 7a40 	vmov.f32	s15, s0
 80051ce:	eddf 0a4e 	vldr	s1, [pc, #312]	@ 8005308 <start_combined_trajectory+0x190>
 80051d2:	eeb0 0a67 	vmov.f32	s0, s15
 80051d6:	f00a fb88 	bl	800f8ea <fminf>
 80051da:	eef0 7a40 	vmov.f32	s15, s0
 80051de:	4b47      	ldr	r3, [pc, #284]	@ (80052fc <start_combined_trajectory+0x184>)
 80051e0:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS), PRISMATIC_MAX_POS);

	// For revolute axis - handle path planning
	// Normalize current position to [0, 2π]
	float normalized_current = normalize_angle(rev_current);
 80051e4:	ed97 0a06 	vldr	s0, [r7, #24]
 80051e8:	f7ff fedc 	bl	8004fa4 <normalize_angle>
 80051ec:	ed87 0a05 	vstr	s0, [r7, #20]

	// Convert to degrees for movement calculation
	float current_deg = normalized_current * 180.0f / PI;
 80051f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80051f4:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800530c <start_combined_trajectory+0x194>
 80051f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80051fc:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8005310 <start_combined_trajectory+0x198>
 8005200:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005204:	edc7 7a04 	vstr	s15, [r7, #16]

	// Calculate movement in degrees
	movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 8005208:	edd7 0a00 	vldr	s1, [r7]
 800520c:	ed97 0a04 	vldr	s0, [r7, #16]
 8005210:	f7ff feee 	bl	8004ff0 <calculate_movement_deg>
 8005214:	eef0 7a40 	vmov.f32	s15, s0
 8005218:	4b3e      	ldr	r3, [pc, #248]	@ (8005314 <start_combined_trajectory+0x19c>)
 800521a:	edc3 7a00 	vstr	s15, [r3]

	// Convert to radians and apply to absolute position
	float movement_rad = movement_deg * PI / 180.0f;
 800521e:	4b3d      	ldr	r3, [pc, #244]	@ (8005314 <start_combined_trajectory+0x19c>)
 8005220:	edd3 7a00 	vldr	s15, [r3]
 8005224:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8005310 <start_combined_trajectory+0x198>
 8005228:	ee27 7a87 	vmul.f32	s14, s15, s14
 800522c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800530c <start_combined_trajectory+0x194>
 8005230:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005234:	edc7 7a03 	vstr	s15, [r7, #12]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 8005238:	4b31      	ldr	r3, [pc, #196]	@ (8005300 <start_combined_trajectory+0x188>)
 800523a:	ed93 7a03 	vldr	s14, [r3, #12]
 800523e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005246:	4b2e      	ldr	r3, [pc, #184]	@ (8005300 <start_combined_trajectory+0x188>)
 8005248:	edc3 7a04 	vstr	s15, [r3, #16]

	// Generate trajectories
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 800524c:	4b2b      	ldr	r3, [pc, #172]	@ (80052fc <start_combined_trajectory+0x184>)
 800524e:	ed93 8a03 	vldr	s16, [r3, #12]
 8005252:	4b2a      	ldr	r3, [pc, #168]	@ (80052fc <start_combined_trajectory+0x184>)
 8005254:	edd3 8a04 	vldr	s17, [r3, #16]
			prismatic_axis.target_pos, ZGX45RGG_400RPM_Constant.traject_sd_max,
 8005258:	4b2f      	ldr	r3, [pc, #188]	@ (8005318 <start_combined_trajectory+0x1a0>)
 800525a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 800525e:	4610      	mov	r0, r2
 8005260:	4619      	mov	r1, r3
 8005262:	f7fb fc77 	bl	8000b54 <__aeabi_d2f>
 8005266:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8005268:	4b2b      	ldr	r3, [pc, #172]	@ (8005318 <start_combined_trajectory+0x1a0>)
 800526a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 800526e:	4610      	mov	r0, r2
 8005270:	4619      	mov	r1, r3
 8005272:	f7fb fc6f 	bl	8000b54 <__aeabi_d2f>
 8005276:	4603      	mov	r3, r0
 8005278:	ee01 3a90 	vmov	s3, r3
 800527c:	ee01 4a10 	vmov	s2, r4
 8005280:	eef0 0a68 	vmov.f32	s1, s17
 8005284:	eeb0 0a48 	vmov.f32	s0, s16
 8005288:	4824      	ldr	r0, [pc, #144]	@ (800531c <start_combined_trajectory+0x1a4>)
 800528a:	f7fe fbe9 	bl	8003a60 <Trapezoidal_Generator>

	Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800528e:	4b1c      	ldr	r3, [pc, #112]	@ (8005300 <start_combined_trajectory+0x188>)
 8005290:	ed93 8a03 	vldr	s16, [r3, #12]
 8005294:	4b1a      	ldr	r3, [pc, #104]	@ (8005300 <start_combined_trajectory+0x188>)
 8005296:	edd3 8a04 	vldr	s17, [r3, #16]
			revolute_axis.target_pos, ZGX45RGG_150RPM_Constant.traject_qd_max,
 800529a:	4b21      	ldr	r3, [pc, #132]	@ (8005320 <start_combined_trajectory+0x1a8>)
 800529c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
	Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80052a0:	4610      	mov	r0, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	f7fb fc56 	bl	8000b54 <__aeabi_d2f>
 80052a8:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80052aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005320 <start_combined_trajectory+0x1a8>)
 80052ac:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
	Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80052b0:	4610      	mov	r0, r2
 80052b2:	4619      	mov	r1, r3
 80052b4:	f7fb fc4e 	bl	8000b54 <__aeabi_d2f>
 80052b8:	4603      	mov	r3, r0
 80052ba:	ee01 3a90 	vmov	s3, r3
 80052be:	ee01 4a10 	vmov	s2, r4
 80052c2:	eef0 0a68 	vmov.f32	s1, s17
 80052c6:	eeb0 0a48 	vmov.f32	s0, s16
 80052ca:	4816      	ldr	r0, [pc, #88]	@ (8005324 <start_combined_trajectory+0x1ac>)
 80052cc:	f7fe fbc8 	bl	8003a60 <Trapezoidal_Generator>

	// Set trajectory active flags
	prismatic_axis.trajectory_active = true;
 80052d0:	4b0a      	ldr	r3, [pc, #40]	@ (80052fc <start_combined_trajectory+0x184>)
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = true;
 80052d8:	4b09      	ldr	r3, [pc, #36]	@ (8005300 <start_combined_trajectory+0x188>)
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 80052e0:	bf00      	nop
 80052e2:	3724      	adds	r7, #36	@ 0x24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	ecbd 8b02 	vpop	{d8}
 80052ea:	bd90      	pop	{r4, r7, pc}
 80052ec:	20000404 	.word	0x20000404
 80052f0:	20000460 	.word	0x20000460
 80052f4:	2000032c 	.word	0x2000032c
 80052f8:	20000340 	.word	0x20000340
 80052fc:	2000027c 	.word	0x2000027c
 8005300:	200002c0 	.word	0x200002c0
 8005304:	00000000 	.word	0x00000000
 8005308:	43960000 	.word	0x43960000
 800530c:	43340000 	.word	0x43340000
 8005310:	40490fdb 	.word	0x40490fdb
 8005314:	2000035c 	.word	0x2000035c
 8005318:	20000080 	.word	0x20000080
 800531c:	20000304 	.word	0x20000304
 8005320:	20000000 	.word	0x20000000
 8005324:	20000318 	.word	0x20000318

08005328 <update_control_loops>:

void update_control_loops(void) {
 8005328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532c:	ed2d 8b02 	vpush	{d8}
 8005330:	b087      	sub	sp, #28
 8005332:	af00      	add	r7, sp, #0
	// Normalize revolute position
	normalized_position = normalize_angle(revolute_encoder.rads);
 8005334:	4b8f      	ldr	r3, [pc, #572]	@ (8005574 <update_control_loops+0x24c>)
 8005336:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800533a:	eeb0 0a67 	vmov.f32	s0, s15
 800533e:	f7ff fe31 	bl	8004fa4 <normalize_angle>
 8005342:	eef0 7a40 	vmov.f32	s15, s0
 8005346:	4b8c      	ldr	r3, [pc, #560]	@ (8005578 <update_control_loops+0x250>)
 8005348:	edc3 7a00 	vstr	s15, [r3]
	angle_deg = normalize_angle(revolute_axis.target_pos);
 800534c:	4b8b      	ldr	r3, [pc, #556]	@ (800557c <update_control_loops+0x254>)
 800534e:	edd3 7a04 	vldr	s15, [r3, #16]
 8005352:	eeb0 0a67 	vmov.f32	s0, s15
 8005356:	f7ff fe25 	bl	8004fa4 <normalize_angle>
 800535a:	eef0 7a40 	vmov.f32	s15, s0
 800535e:	4b88      	ldr	r3, [pc, #544]	@ (8005580 <update_control_loops+0x258>)
 8005360:	edc3 7a00 	vstr	s15, [r3]

	// Update prismatic trajectory if active
	if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8005364:	4b87      	ldr	r3, [pc, #540]	@ (8005584 <update_control_loops+0x25c>)
 8005366:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800536a:	2b00      	cmp	r3, #0
 800536c:	d058      	beq.n	8005420 <update_control_loops+0xf8>
 800536e:	4b86      	ldr	r3, [pc, #536]	@ (8005588 <update_control_loops+0x260>)
 8005370:	7c1b      	ldrb	r3, [r3, #16]
 8005372:	f083 0301 	eor.w	r3, r3, #1
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d051      	beq.n	8005420 <update_control_loops+0xf8>
		Trapezoidal_Evaluated(&prisGen, &prisEva, prismatic_axis.initial_pos,
 800537c:	4b81      	ldr	r3, [pc, #516]	@ (8005584 <update_control_loops+0x25c>)
 800537e:	ed93 8a03 	vldr	s16, [r3, #12]
 8005382:	4b80      	ldr	r3, [pc, #512]	@ (8005584 <update_control_loops+0x25c>)
 8005384:	edd3 8a04 	vldr	s17, [r3, #16]
				prismatic_axis.target_pos,
				ZGX45RGG_400RPM_Constant.traject_sd_max,
 8005388:	4b80      	ldr	r3, [pc, #512]	@ (800558c <update_control_loops+0x264>)
 800538a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
		Trapezoidal_Evaluated(&prisGen, &prisEva, prismatic_axis.initial_pos,
 800538e:	4610      	mov	r0, r2
 8005390:	4619      	mov	r1, r3
 8005392:	f7fb fbdf 	bl	8000b54 <__aeabi_d2f>
 8005396:	4604      	mov	r4, r0
				ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8005398:	4b7c      	ldr	r3, [pc, #496]	@ (800558c <update_control_loops+0x264>)
 800539a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
		Trapezoidal_Evaluated(&prisGen, &prisEva, prismatic_axis.initial_pos,
 800539e:	4610      	mov	r0, r2
 80053a0:	4619      	mov	r1, r3
 80053a2:	f7fb fbd7 	bl	8000b54 <__aeabi_d2f>
 80053a6:	4603      	mov	r3, r0
 80053a8:	ee01 3a90 	vmov	s3, r3
 80053ac:	ee01 4a10 	vmov	s2, r4
 80053b0:	eef0 0a68 	vmov.f32	s1, s17
 80053b4:	eeb0 0a48 	vmov.f32	s0, s16
 80053b8:	4973      	ldr	r1, [pc, #460]	@ (8005588 <update_control_loops+0x260>)
 80053ba:	4875      	ldr	r0, [pc, #468]	@ (8005590 <update_control_loops+0x268>)
 80053bc:	f7fe fc12 	bl	8003be4 <Trapezoidal_Evaluated>

		prismatic_axis.position = prisEva.setposition;
 80053c0:	4b71      	ldr	r3, [pc, #452]	@ (8005588 <update_control_loops+0x260>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a6f      	ldr	r2, [pc, #444]	@ (8005584 <update_control_loops+0x25c>)
 80053c6:	6013      	str	r3, [r2, #0]
		prismatic_axis.velocity = prisEva.setvelocity;
 80053c8:	4b6f      	ldr	r3, [pc, #444]	@ (8005588 <update_control_loops+0x260>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	4a6d      	ldr	r2, [pc, #436]	@ (8005584 <update_control_loops+0x25c>)
 80053ce:	6053      	str	r3, [r2, #4]

		if (prisEva.isFinised) {
 80053d0:	4b6d      	ldr	r3, [pc, #436]	@ (8005588 <update_control_loops+0x260>)
 80053d2:	7c1b      	ldrb	r3, [r3, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d023      	beq.n	8005420 <update_control_loops+0xf8>
			prismatic_axis.trajectory_active = false;
 80053d8:	4a6a      	ldr	r2, [pc, #424]	@ (8005584 <update_control_loops+0x25c>)
 80053da:	2300      	movs	r3, #0
 80053dc:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			prismatic_axis.position = prisEva.setposition;
 80053e0:	4b69      	ldr	r3, [pc, #420]	@ (8005588 <update_control_loops+0x260>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a67      	ldr	r2, [pc, #412]	@ (8005584 <update_control_loops+0x25c>)
 80053e6:	6013      	str	r3, [r2, #0]
			prismatic_axis.velocity = 0.0f;
 80053e8:	4b66      	ldr	r3, [pc, #408]	@ (8005584 <update_control_loops+0x25c>)
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	605a      	str	r2, [r3, #4]
			prismatic_axis.dfd = 0.0f;
 80053f0:	4b64      	ldr	r3, [pc, #400]	@ (8005584 <update_control_loops+0x25c>)
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	62da      	str	r2, [r3, #44]	@ 0x2c
			prismatic_axis.ffd = 0.0f;
 80053f8:	4b62      	ldr	r3, [pc, #392]	@ (8005584 <update_control_loops+0x25c>)
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	631a      	str	r2, [r3, #48]	@ 0x30

			// Reset prismatic control variables
			prismatic_axis.pos_error = 0.0f;
 8005400:	4b60      	ldr	r3, [pc, #384]	@ (8005584 <update_control_loops+0x25c>)
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	615a      	str	r2, [r3, #20]
			prismatic_axis.vel_error = 0.0f;
 8005408:	4b5e      	ldr	r3, [pc, #376]	@ (8005584 <update_control_loops+0x25c>)
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	619a      	str	r2, [r3, #24]
			prismatic_axis.command_vel = 0.0f;
 8005410:	4b5c      	ldr	r3, [pc, #368]	@ (8005584 <update_control_loops+0x25c>)
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	629a      	str	r2, [r3, #40]	@ 0x28
			prismatic_axis.command_pos = 0.0f;
 8005418:	4b5a      	ldr	r3, [pc, #360]	@ (8005584 <update_control_loops+0x25c>)
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	625a      	str	r2, [r3, #36]	@ 0x24
		}
	}

	// Update revolute trajectory if active
	if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8005420:	4b56      	ldr	r3, [pc, #344]	@ (800557c <update_control_loops+0x254>)
 8005422:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005426:	2b00      	cmp	r3, #0
 8005428:	d058      	beq.n	80054dc <update_control_loops+0x1b4>
 800542a:	4b5a      	ldr	r3, [pc, #360]	@ (8005594 <update_control_loops+0x26c>)
 800542c:	7c1b      	ldrb	r3, [r3, #16]
 800542e:	f083 0301 	eor.w	r3, r3, #1
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d051      	beq.n	80054dc <update_control_loops+0x1b4>
		Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8005438:	4b50      	ldr	r3, [pc, #320]	@ (800557c <update_control_loops+0x254>)
 800543a:	ed93 8a03 	vldr	s16, [r3, #12]
 800543e:	4b4f      	ldr	r3, [pc, #316]	@ (800557c <update_control_loops+0x254>)
 8005440:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos,
				ZGX45RGG_150RPM_Constant.traject_qd_max,
 8005444:	4b54      	ldr	r3, [pc, #336]	@ (8005598 <update_control_loops+0x270>)
 8005446:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
		Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 800544a:	4610      	mov	r0, r2
 800544c:	4619      	mov	r1, r3
 800544e:	f7fb fb81 	bl	8000b54 <__aeabi_d2f>
 8005452:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8005454:	4b50      	ldr	r3, [pc, #320]	@ (8005598 <update_control_loops+0x270>)
 8005456:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
		Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 800545a:	4610      	mov	r0, r2
 800545c:	4619      	mov	r1, r3
 800545e:	f7fb fb79 	bl	8000b54 <__aeabi_d2f>
 8005462:	4603      	mov	r3, r0
 8005464:	ee01 3a90 	vmov	s3, r3
 8005468:	ee01 4a10 	vmov	s2, r4
 800546c:	eef0 0a68 	vmov.f32	s1, s17
 8005470:	eeb0 0a48 	vmov.f32	s0, s16
 8005474:	4947      	ldr	r1, [pc, #284]	@ (8005594 <update_control_loops+0x26c>)
 8005476:	4849      	ldr	r0, [pc, #292]	@ (800559c <update_control_loops+0x274>)
 8005478:	f7fe fbb4 	bl	8003be4 <Trapezoidal_Evaluated>

		revolute_axis.position = revEva.setposition;
 800547c:	4b45      	ldr	r3, [pc, #276]	@ (8005594 <update_control_loops+0x26c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a3e      	ldr	r2, [pc, #248]	@ (800557c <update_control_loops+0x254>)
 8005482:	6013      	str	r3, [r2, #0]
		revolute_axis.velocity = revEva.setvelocity;
 8005484:	4b43      	ldr	r3, [pc, #268]	@ (8005594 <update_control_loops+0x26c>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	4a3c      	ldr	r2, [pc, #240]	@ (800557c <update_control_loops+0x254>)
 800548a:	6053      	str	r3, [r2, #4]

		if (revEva.isFinised) {
 800548c:	4b41      	ldr	r3, [pc, #260]	@ (8005594 <update_control_loops+0x26c>)
 800548e:	7c1b      	ldrb	r3, [r3, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d023      	beq.n	80054dc <update_control_loops+0x1b4>
			revolute_axis.trajectory_active = false;
 8005494:	4a39      	ldr	r2, [pc, #228]	@ (800557c <update_control_loops+0x254>)
 8005496:	2300      	movs	r3, #0
 8005498:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			revolute_axis.position = revEva.setposition;
 800549c:	4b3d      	ldr	r3, [pc, #244]	@ (8005594 <update_control_loops+0x26c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a36      	ldr	r2, [pc, #216]	@ (800557c <update_control_loops+0x254>)
 80054a2:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = 0.0f;
 80054a4:	4b35      	ldr	r3, [pc, #212]	@ (800557c <update_control_loops+0x254>)
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	605a      	str	r2, [r3, #4]
			revolute_axis.dfd = 0.0f;
 80054ac:	4b33      	ldr	r3, [pc, #204]	@ (800557c <update_control_loops+0x254>)
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	62da      	str	r2, [r3, #44]	@ 0x2c
			revolute_axis.ffd = 0.0f;
 80054b4:	4b31      	ldr	r3, [pc, #196]	@ (800557c <update_control_loops+0x254>)
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	631a      	str	r2, [r3, #48]	@ 0x30

			// Reset revolute control variables
			revolute_axis.pos_error = 0.0f;
 80054bc:	4b2f      	ldr	r3, [pc, #188]	@ (800557c <update_control_loops+0x254>)
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	615a      	str	r2, [r3, #20]
			revolute_axis.vel_error = 0.0f;
 80054c4:	4b2d      	ldr	r3, [pc, #180]	@ (800557c <update_control_loops+0x254>)
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	619a      	str	r2, [r3, #24]
			revolute_axis.command_vel = 0.0f;
 80054cc:	4b2b      	ldr	r3, [pc, #172]	@ (800557c <update_control_loops+0x254>)
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	629a      	str	r2, [r3, #40]	@ 0x28
			revolute_axis.command_pos = 0.0f;
 80054d4:	4b29      	ldr	r3, [pc, #164]	@ (800557c <update_control_loops+0x254>)
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	625a      	str	r2, [r3, #36]	@ 0x24
		}
	}

	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 80054dc:	4b29      	ldr	r3, [pc, #164]	@ (8005584 <update_control_loops+0x25c>)
 80054de:	ed93 7a00 	vldr	s14, [r3]
 80054e2:	4b2f      	ldr	r3, [pc, #188]	@ (80055a0 <update_control_loops+0x278>)
 80054e4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80054e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054ec:	4b25      	ldr	r3, [pc, #148]	@ (8005584 <update_control_loops+0x25c>)
 80054ee:	edc3 7a05 	vstr	s15, [r3, #20]

	prismatic_axis.command_vel = PWM_Satuation(
 80054f2:	4b24      	ldr	r3, [pc, #144]	@ (8005584 <update_control_loops+0x25c>)
 80054f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80054f8:	eeb0 0a67 	vmov.f32	s0, s15
 80054fc:	4829      	ldr	r0, [pc, #164]	@ (80055a4 <update_control_loops+0x27c>)
 80054fe:	f7fb fe8b 	bl	8001218 <PID_CONTROLLER_Compute>
 8005502:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 8005506:	4b21      	ldr	r3, [pc, #132]	@ (800558c <update_control_loops+0x264>)
 8005508:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 800550c:	4610      	mov	r0, r2
 800550e:	4619      	mov	r1, r3
 8005510:	f7fb fad8 	bl	8000ac4 <__aeabi_d2iz>
 8005514:	4604      	mov	r4, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 8005516:	4b1d      	ldr	r3, [pc, #116]	@ (800558c <update_control_loops+0x264>)
 8005518:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800551c:	4690      	mov	r8, r2
 800551e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 8005522:	4640      	mov	r0, r8
 8005524:	4649      	mov	r1, r9
 8005526:	f7fb facd 	bl	8000ac4 <__aeabi_d2iz>
 800552a:	4603      	mov	r3, r0
 800552c:	4619      	mov	r1, r3
 800552e:	4620      	mov	r0, r4
 8005530:	eeb0 0a48 	vmov.f32	s0, s16
 8005534:	f7fb fe0e 	bl	8001154 <PWM_Satuation>
 8005538:	ee07 0a90 	vmov	s15, r0
 800553c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005540:	4b10      	ldr	r3, [pc, #64]	@ (8005584 <update_control_loops+0x25c>)
 8005542:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Add velocity feedforward for trajectory
	if (prismatic_axis.trajectory_active) {
 8005546:	4b0f      	ldr	r3, [pc, #60]	@ (8005584 <update_control_loops+0x25c>)
 8005548:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800554c:	2b00      	cmp	r3, #0
 800554e:	d02b      	beq.n	80055a8 <update_control_loops+0x280>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8005550:	4b0c      	ldr	r3, [pc, #48]	@ (8005584 <update_control_loops+0x25c>)
 8005552:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 8005556:	4b0b      	ldr	r3, [pc, #44]	@ (8005584 <update_control_loops+0x25c>)
 8005558:	edd3 7a01 	vldr	s15, [r3, #4]
 800555c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005560:	4b08      	ldr	r3, [pc, #32]	@ (8005584 <update_control_loops+0x25c>)
 8005562:	edd3 7a07 	vldr	s15, [r3, #28]
 8005566:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 800556a:	4b06      	ldr	r3, [pc, #24]	@ (8005584 <update_control_loops+0x25c>)
 800556c:	edc3 7a06 	vstr	s15, [r3, #24]
 8005570:	e025      	b.n	80055be <update_control_loops+0x296>
 8005572:	bf00      	nop
 8005574:	20000460 	.word	0x20000460
 8005578:	20000358 	.word	0x20000358
 800557c:	200002c0 	.word	0x200002c0
 8005580:	20000360 	.word	0x20000360
 8005584:	2000027c 	.word	0x2000027c
 8005588:	2000032c 	.word	0x2000032c
 800558c:	20000080 	.word	0x20000080
 8005590:	20000304 	.word	0x20000304
 8005594:	20000340 	.word	0x20000340
 8005598:	20000000 	.word	0x20000000
 800559c:	20000318 	.word	0x20000318
 80055a0:	20000404 	.word	0x20000404
 80055a4:	200004bc 	.word	0x200004bc
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80055a8:	4b88      	ldr	r3, [pc, #544]	@ (80057cc <update_control_loops+0x4a4>)
 80055aa:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 80055ae:	4b87      	ldr	r3, [pc, #540]	@ (80057cc <update_control_loops+0x4a4>)
 80055b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80055b4:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80055b8:	4b84      	ldr	r3, [pc, #528]	@ (80057cc <update_control_loops+0x4a4>)
 80055ba:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 80055be:	4b83      	ldr	r3, [pc, #524]	@ (80057cc <update_control_loops+0x4a4>)
 80055c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80055c4:	eeb0 0a67 	vmov.f32	s0, s15
 80055c8:	4881      	ldr	r0, [pc, #516]	@ (80057d0 <update_control_loops+0x4a8>)
 80055ca:	f7fb fe25 	bl	8001218 <PID_CONTROLLER_Compute>
 80055ce:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 80055d2:	4b80      	ldr	r3, [pc, #512]	@ (80057d4 <update_control_loops+0x4ac>)
 80055d4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 80055d8:	4610      	mov	r0, r2
 80055da:	4619      	mov	r1, r3
 80055dc:	f7fb fa72 	bl	8000ac4 <__aeabi_d2iz>
 80055e0:	4604      	mov	r4, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 80055e2:	4b7c      	ldr	r3, [pc, #496]	@ (80057d4 <update_control_loops+0x4ac>)
 80055e4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80055e8:	613a      	str	r2, [r7, #16]
 80055ea:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80055ee:	617b      	str	r3, [r7, #20]
	prismatic_axis.command_pos = PWM_Satuation(
 80055f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80055f4:	f7fb fa66 	bl	8000ac4 <__aeabi_d2iz>
 80055f8:	4603      	mov	r3, r0
 80055fa:	4619      	mov	r1, r3
 80055fc:	4620      	mov	r0, r4
 80055fe:	eeb0 0a48 	vmov.f32	s0, s16
 8005602:	f7fb fda7 	bl	8001154 <PWM_Satuation>
 8005606:	ee07 0a90 	vmov	s15, r0
 800560a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800560e:	4b6f      	ldr	r3, [pc, #444]	@ (80057cc <update_control_loops+0x4a4>)
 8005610:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 8005614:	4b70      	ldr	r3, [pc, #448]	@ (80057d8 <update_control_loops+0x4b0>)
 8005616:	ed93 7a00 	vldr	s14, [r3]
 800561a:	4b70      	ldr	r3, [pc, #448]	@ (80057dc <update_control_loops+0x4b4>)
 800561c:	edd3 7a00 	vldr	s15, [r3]
 8005620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005624:	4b6c      	ldr	r3, [pc, #432]	@ (80057d8 <update_control_loops+0x4b0>)
 8005626:	edc3 7a05 	vstr	s15, [r3, #20]

	// Ensure error uses the shortest path for control
	if (revolute_axis.pos_error > PI) {
 800562a:	4b6b      	ldr	r3, [pc, #428]	@ (80057d8 <update_control_loops+0x4b0>)
 800562c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005630:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80057e0 <update_control_loops+0x4b8>
 8005634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563c:	dd09      	ble.n	8005652 <update_control_loops+0x32a>
		revolute_axis.pos_error -= 2.0f * PI;
 800563e:	4b66      	ldr	r3, [pc, #408]	@ (80057d8 <update_control_loops+0x4b0>)
 8005640:	edd3 7a05 	vldr	s15, [r3, #20]
 8005644:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80057e4 <update_control_loops+0x4bc>
 8005648:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800564c:	4b62      	ldr	r3, [pc, #392]	@ (80057d8 <update_control_loops+0x4b0>)
 800564e:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	if (revolute_axis.pos_error < -PI) {
 8005652:	4b61      	ldr	r3, [pc, #388]	@ (80057d8 <update_control_loops+0x4b0>)
 8005654:	edd3 7a05 	vldr	s15, [r3, #20]
 8005658:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 80057e8 <update_control_loops+0x4c0>
 800565c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005664:	d509      	bpl.n	800567a <update_control_loops+0x352>
		revolute_axis.pos_error += 2.0f * PI;
 8005666:	4b5c      	ldr	r3, [pc, #368]	@ (80057d8 <update_control_loops+0x4b0>)
 8005668:	edd3 7a05 	vldr	s15, [r3, #20]
 800566c:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80057e4 <update_control_loops+0x4bc>
 8005670:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005674:	4b58      	ldr	r3, [pc, #352]	@ (80057d8 <update_control_loops+0x4b0>)
 8005676:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	revolute_axis.command_vel = PWM_Satuation(
 800567a:	4b57      	ldr	r3, [pc, #348]	@ (80057d8 <update_control_loops+0x4b0>)
 800567c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005680:	eeb0 0a67 	vmov.f32	s0, s15
 8005684:	4859      	ldr	r0, [pc, #356]	@ (80057ec <update_control_loops+0x4c4>)
 8005686:	f7fb fdc7 	bl	8001218 <PID_CONTROLLER_Compute>
 800568a:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 800568e:	4b58      	ldr	r3, [pc, #352]	@ (80057f0 <update_control_loops+0x4c8>)
 8005690:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 8005694:	4610      	mov	r0, r2
 8005696:	4619      	mov	r1, r3
 8005698:	f7fb fa14 	bl	8000ac4 <__aeabi_d2iz>
 800569c:	4604      	mov	r4, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 800569e:	4b54      	ldr	r3, [pc, #336]	@ (80057f0 <update_control_loops+0x4c8>)
 80056a0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80056a4:	60ba      	str	r2, [r7, #8]
 80056a6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80056aa:	60fb      	str	r3, [r7, #12]
	revolute_axis.command_vel = PWM_Satuation(
 80056ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056b0:	f7fb fa08 	bl	8000ac4 <__aeabi_d2iz>
 80056b4:	4603      	mov	r3, r0
 80056b6:	4619      	mov	r1, r3
 80056b8:	4620      	mov	r0, r4
 80056ba:	eeb0 0a48 	vmov.f32	s0, s16
 80056be:	f7fb fd49 	bl	8001154 <PWM_Satuation>
 80056c2:	ee07 0a90 	vmov	s15, r0
 80056c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056ca:	4b43      	ldr	r3, [pc, #268]	@ (80057d8 <update_control_loops+0x4b0>)
 80056cc:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Add velocity feedforward for trajectory
	if (revolute_axis.trajectory_active) {
 80056d0:	4b41      	ldr	r3, [pc, #260]	@ (80057d8 <update_control_loops+0x4b0>)
 80056d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d010      	beq.n	80056fc <update_control_loops+0x3d4>
		revolute_axis.vel_error = revolute_axis.command_vel
 80056da:	4b3f      	ldr	r3, [pc, #252]	@ (80057d8 <update_control_loops+0x4b0>)
 80056dc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 80056e0:	4b3d      	ldr	r3, [pc, #244]	@ (80057d8 <update_control_loops+0x4b0>)
 80056e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80056e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056ea:	4b3b      	ldr	r3, [pc, #236]	@ (80057d8 <update_control_loops+0x4b0>)
 80056ec:	edd3 7a07 	vldr	s15, [r3, #28]
 80056f0:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 80056f4:	4b38      	ldr	r3, [pc, #224]	@ (80057d8 <update_control_loops+0x4b0>)
 80056f6:	edc3 7a06 	vstr	s15, [r3, #24]
 80056fa:	e00a      	b.n	8005712 <update_control_loops+0x3ea>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 80056fc:	4b36      	ldr	r3, [pc, #216]	@ (80057d8 <update_control_loops+0x4b0>)
 80056fe:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8005702:	4b35      	ldr	r3, [pc, #212]	@ (80057d8 <update_control_loops+0x4b0>)
 8005704:	edd3 7a07 	vldr	s15, [r3, #28]
 8005708:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 800570c:	4b32      	ldr	r3, [pc, #200]	@ (80057d8 <update_control_loops+0x4b0>)
 800570e:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8005712:	4b31      	ldr	r3, [pc, #196]	@ (80057d8 <update_control_loops+0x4b0>)
 8005714:	edd3 7a06 	vldr	s15, [r3, #24]
 8005718:	eeb0 0a67 	vmov.f32	s0, s15
 800571c:	4835      	ldr	r0, [pc, #212]	@ (80057f4 <update_control_loops+0x4cc>)
 800571e:	f7fb fd7b 	bl	8001218 <PID_CONTROLLER_Compute>
 8005722:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 8005726:	4b32      	ldr	r3, [pc, #200]	@ (80057f0 <update_control_loops+0x4c8>)
 8005728:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 800572c:	4610      	mov	r0, r2
 800572e:	4619      	mov	r1, r3
 8005730:	f7fb f9c8 	bl	8000ac4 <__aeabi_d2iz>
 8005734:	4604      	mov	r4, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 8005736:	4b2e      	ldr	r3, [pc, #184]	@ (80057f0 <update_control_loops+0x4c8>)
 8005738:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800573c:	603a      	str	r2, [r7, #0]
 800573e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005742:	607b      	str	r3, [r7, #4]
	revolute_axis.command_pos = PWM_Satuation(
 8005744:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005748:	f7fb f9bc 	bl	8000ac4 <__aeabi_d2iz>
 800574c:	4603      	mov	r3, r0
 800574e:	4619      	mov	r1, r3
 8005750:	4620      	mov	r0, r4
 8005752:	eeb0 0a48 	vmov.f32	s0, s16
 8005756:	f7fb fcfd 	bl	8001154 <PWM_Satuation>
 800575a:	ee07 0a90 	vmov	s15, r0
 800575e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005762:	4b1d      	ldr	r3, [pc, #116]	@ (80057d8 <update_control_loops+0x4b0>)
 8005764:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Add feed-forward compensation for prismatic axis
	if (prismatic_axis.trajectory_active) {
 8005768:	4b18      	ldr	r3, [pc, #96]	@ (80057cc <update_control_loops+0x4a4>)
 800576a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800576e:	2b00      	cmp	r3, #0
 8005770:	d04c      	beq.n	800580c <update_control_loops+0x4e4>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 8005772:	4b16      	ldr	r3, [pc, #88]	@ (80057cc <update_control_loops+0x4a4>)
 8005774:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005778:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80057f8 <update_control_loops+0x4d0>
 800577c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005780:	eeb0 0a47 	vmov.f32	s0, s14
 8005784:	481d      	ldr	r0, [pc, #116]	@ (80057fc <update_control_loops+0x4d4>)
 8005786:	f7fc f863 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 800578a:	eef0 7a40 	vmov.f32	s15, s0
 800578e:	4b0f      	ldr	r3, [pc, #60]	@ (80057cc <update_control_loops+0x4a4>)
 8005790:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005794:	4b1a      	ldr	r3, [pc, #104]	@ (8005800 <update_control_loops+0x4d8>)
 8005796:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800579a:	4b0f      	ldr	r3, [pc, #60]	@ (80057d8 <update_control_loops+0x4b0>)
 800579c:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 80057a0:	4b18      	ldr	r3, [pc, #96]	@ (8005804 <update_control_loops+0x4dc>)
 80057a2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80057a6:	eddf 5a14 	vldr	s11, [pc, #80]	@ 80057f8 <update_control_loops+0x4d0>
 80057aa:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80057ae:	eeb0 1a46 	vmov.f32	s2, s12
 80057b2:	eef0 0a66 	vmov.f32	s1, s13
 80057b6:	eeb0 0a47 	vmov.f32	s0, s14
 80057ba:	4813      	ldr	r0, [pc, #76]	@ (8005808 <update_control_loops+0x4e0>)
 80057bc:	f7fc f8db 	bl	8001976 <PRISMATIC_MOTOR_DFD_Compute>
 80057c0:	eef0 7a40 	vmov.f32	s15, s0
 80057c4:	4b01      	ldr	r3, [pc, #4]	@ (80057cc <update_control_loops+0x4a4>)
 80057c6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 80057ca:	e027      	b.n	800581c <update_control_loops+0x4f4>
 80057cc:	2000027c 	.word	0x2000027c
 80057d0:	200004e4 	.word	0x200004e4
 80057d4:	20000080 	.word	0x20000080
 80057d8:	200002c0 	.word	0x200002c0
 80057dc:	20000358 	.word	0x20000358
 80057e0:	40490fdb 	.word	0x40490fdb
 80057e4:	40c90fdb 	.word	0x40c90fdb
 80057e8:	c0490fdb 	.word	0xc0490fdb
 80057ec:	2000050c 	.word	0x2000050c
 80057f0:	20000000 	.word	0x20000000
 80057f4:	20000534 	.word	0x20000534
 80057f8:	447a0000 	.word	0x447a0000
 80057fc:	2000055c 	.word	0x2000055c
 8005800:	20000460 	.word	0x20000460
 8005804:	20000404 	.word	0x20000404
 8005808:	20000560 	.word	0x20000560
	} else {
		prismatic_axis.ffd = 0.0f;
 800580c:	4b69      	ldr	r3, [pc, #420]	@ (80059b4 <update_control_loops+0x68c>)
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8005814:	4b67      	ldr	r3, [pc, #412]	@ (80059b4 <update_control_loops+0x68c>)
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	// Add feed-forward compensation for revolute axis
	revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 800581c:	4b66      	ldr	r3, [pc, #408]	@ (80059b8 <update_control_loops+0x690>)
 800581e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005822:	eeb0 0a67 	vmov.f32	s0, s15
 8005826:	4865      	ldr	r0, [pc, #404]	@ (80059bc <update_control_loops+0x694>)
 8005828:	f7fb fe94 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 800582c:	eef0 7a40 	vmov.f32	s15, s0
 8005830:	4b61      	ldr	r3, [pc, #388]	@ (80059b8 <update_control_loops+0x690>)
 8005832:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			revolute_axis.velocity);
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005836:	4b62      	ldr	r3, [pc, #392]	@ (80059c0 <update_control_loops+0x698>)
 8005838:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 800583c:	4b61      	ldr	r3, [pc, #388]	@ (80059c4 <update_control_loops+0x69c>)
 800583e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005842:	ed9f 6a61 	vldr	s12, [pc, #388]	@ 80059c8 <update_control_loops+0x6a0>
 8005846:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800584a:	eeb0 1a66 	vmov.f32	s2, s13
 800584e:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 80059cc <update_control_loops+0x6a4>
 8005852:	eeb0 0a47 	vmov.f32	s0, s14
 8005856:	485e      	ldr	r0, [pc, #376]	@ (80059d0 <update_control_loops+0x6a8>)
 8005858:	f7fb ff10 	bl	800167c <REVOLUTE_MOTOR_DFD_Compute>
 800585c:	eef0 7a40 	vmov.f32	s15, s0
 8005860:	4b55      	ldr	r3, [pc, #340]	@ (80059b8 <update_control_loops+0x690>)
 8005862:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Add feedforward and backlash terms to commands
	prismatic_axis.command_pos += +prismatic_axis.dfd + prismatic_axis.ffd;
 8005866:	4b53      	ldr	r3, [pc, #332]	@ (80059b4 <update_control_loops+0x68c>)
 8005868:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800586c:	4b51      	ldr	r3, [pc, #324]	@ (80059b4 <update_control_loops+0x68c>)
 800586e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8005872:	4b50      	ldr	r3, [pc, #320]	@ (80059b4 <update_control_loops+0x68c>)
 8005874:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800587c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005880:	4b4c      	ldr	r3, [pc, #304]	@ (80059b4 <update_control_loops+0x68c>)
 8005882:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	revolute_axis.command_pos += revolute_axis.dfd + revolute_axis.ffd;
 8005886:	4b4c      	ldr	r3, [pc, #304]	@ (80059b8 <update_control_loops+0x690>)
 8005888:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800588c:	4b4a      	ldr	r3, [pc, #296]	@ (80059b8 <update_control_loops+0x690>)
 800588e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8005892:	4b49      	ldr	r3, [pc, #292]	@ (80059b8 <update_control_loops+0x690>)
 8005894:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800589c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058a0:	4b45      	ldr	r3, [pc, #276]	@ (80059b8 <update_control_loops+0x690>)
 80058a2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Final saturation
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80058a6:	4b43      	ldr	r3, [pc, #268]	@ (80059b4 <update_control_loops+0x68c>)
 80058a8:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80058ac:	4b49      	ldr	r3, [pc, #292]	@ (80059d4 <update_control_loops+0x6ac>)
 80058ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	f7fb f905 	bl	8000ac4 <__aeabi_d2iz>
 80058ba:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80058bc:	4b45      	ldr	r3, [pc, #276]	@ (80059d4 <update_control_loops+0x6ac>)
 80058be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80058c2:	4615      	mov	r5, r2
 80058c4:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80058c8:	4628      	mov	r0, r5
 80058ca:	4631      	mov	r1, r6
 80058cc:	f7fb f8fa 	bl	8000ac4 <__aeabi_d2iz>
 80058d0:	4603      	mov	r3, r0
 80058d2:	4619      	mov	r1, r3
 80058d4:	4620      	mov	r0, r4
 80058d6:	eeb0 0a48 	vmov.f32	s0, s16
 80058da:	f7fb fc3b 	bl	8001154 <PWM_Satuation>
 80058de:	ee07 0a90 	vmov	s15, r0
 80058e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058e6:	4b33      	ldr	r3, [pc, #204]	@ (80059b4 <update_control_loops+0x68c>)
 80058e8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80058ec:	4b32      	ldr	r3, [pc, #200]	@ (80059b8 <update_control_loops+0x690>)
 80058ee:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80058f2:	4b39      	ldr	r3, [pc, #228]	@ (80059d8 <update_control_loops+0x6b0>)
 80058f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80058f8:	4610      	mov	r0, r2
 80058fa:	4619      	mov	r1, r3
 80058fc:	f7fb f8e2 	bl	8000ac4 <__aeabi_d2iz>
 8005900:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8005902:	4b35      	ldr	r3, [pc, #212]	@ (80059d8 <update_control_loops+0x6b0>)
 8005904:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005908:	4692      	mov	sl, r2
 800590a:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800590e:	4650      	mov	r0, sl
 8005910:	4659      	mov	r1, fp
 8005912:	f7fb f8d7 	bl	8000ac4 <__aeabi_d2iz>
 8005916:	4603      	mov	r3, r0
 8005918:	4619      	mov	r1, r3
 800591a:	4620      	mov	r0, r4
 800591c:	eeb0 0a48 	vmov.f32	s0, s16
 8005920:	f7fb fc18 	bl	8001154 <PWM_Satuation>
 8005924:	ee07 0a90 	vmov	s15, r0
 8005928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800592c:	4b22      	ldr	r3, [pc, #136]	@ (80059b8 <update_control_loops+0x690>)
 800592e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply commands to motors
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8005932:	4b20      	ldr	r3, [pc, #128]	@ (80059b4 <update_control_loops+0x68c>)
 8005934:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005938:	eef0 0a67 	vmov.f32	s1, s15
 800593c:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80059dc <update_control_loops+0x6b4>
 8005940:	4827      	ldr	r0, [pc, #156]	@ (80059e0 <update_control_loops+0x6b8>)
 8005942:	f7fb fd1f 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8005946:	4b1c      	ldr	r3, [pc, #112]	@ (80059b8 <update_control_loops+0x690>)
 8005948:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800594c:	eef0 0a67 	vmov.f32	s1, s15
 8005950:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80059dc <update_control_loops+0x6b4>
 8005954:	4823      	ldr	r0, [pc, #140]	@ (80059e4 <update_control_loops+0x6bc>)
 8005956:	f7fb fd15 	bl	8001384 <MDXX_set_range>

	// Update display values
	prismatic_axis.mm = prismatic_encoder.mm;
 800595a:	4b1a      	ldr	r3, [pc, #104]	@ (80059c4 <update_control_loops+0x69c>)
 800595c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800595e:	4a15      	ldr	r2, [pc, #84]	@ (80059b4 <update_control_loops+0x68c>)
 8005960:	63d3      	str	r3, [r2, #60]	@ 0x3c
	prismatic_axis.target = prismatic_axis.target_pos;
 8005962:	4b14      	ldr	r3, [pc, #80]	@ (80059b4 <update_control_loops+0x68c>)
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	4a13      	ldr	r2, [pc, #76]	@ (80059b4 <update_control_loops+0x68c>)
 8005968:	6393      	str	r3, [r2, #56]	@ 0x38

	revolute_axis.deg = UnitConverter_angle(&converter_system,
 800596a:	4b1f      	ldr	r3, [pc, #124]	@ (80059e8 <update_control_loops+0x6c0>)
 800596c:	edd3 7a00 	vldr	s15, [r3]
 8005970:	220e      	movs	r2, #14
 8005972:	210f      	movs	r1, #15
 8005974:	eeb0 0a67 	vmov.f32	s0, s15
 8005978:	481c      	ldr	r0, [pc, #112]	@ (80059ec <update_control_loops+0x6c4>)
 800597a:	f7fe fccb 	bl	8004314 <UnitConverter_angle>
 800597e:	eef0 7a40 	vmov.f32	s15, s0
 8005982:	4b0d      	ldr	r3, [pc, #52]	@ (80059b8 <update_control_loops+0x690>)
 8005984:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
	revolute_axis.target = UnitConverter_angle(&converter_system, angle_deg,
 8005988:	4b19      	ldr	r3, [pc, #100]	@ (80059f0 <update_control_loops+0x6c8>)
 800598a:	edd3 7a00 	vldr	s15, [r3]
 800598e:	220e      	movs	r2, #14
 8005990:	210f      	movs	r1, #15
 8005992:	eeb0 0a67 	vmov.f32	s0, s15
 8005996:	4815      	ldr	r0, [pc, #84]	@ (80059ec <update_control_loops+0x6c4>)
 8005998:	f7fe fcbc 	bl	8004314 <UnitConverter_angle>
 800599c:	eef0 7a40 	vmov.f32	s15, s0
 80059a0:	4b05      	ldr	r3, [pc, #20]	@ (80059b8 <update_control_loops+0x690>)
 80059a2:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			UNIT_RADIAN, UNIT_DEGREE);
}
 80059a6:	bf00      	nop
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	ecbd 8b02 	vpop	{d8}
 80059b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b4:	2000027c 	.word	0x2000027c
 80059b8:	200002c0 	.word	0x200002c0
 80059bc:	20000568 	.word	0x20000568
 80059c0:	20000460 	.word	0x20000460
 80059c4:	20000404 	.word	0x20000404
 80059c8:	447a0000 	.word	0x447a0000
 80059cc:	00000000 	.word	0x00000000
 80059d0:	2000056c 	.word	0x2000056c
 80059d4:	20000080 	.word	0x20000080
 80059d8:	20000000 	.word	0x20000000
 80059dc:	44fa0000 	.word	0x44fa0000
 80059e0:	2000036c 	.word	0x2000036c
 80059e4:	200003b8 	.word	0x200003b8
 80059e8:	20000358 	.word	0x20000358
 80059ec:	200007d0 	.word	0x200007d0
 80059f0:	20000360 	.word	0x20000360

080059f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	4603      	mov	r3, r0
 80059fc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EMER_Pin) {
 80059fe:	88fb      	ldrh	r3, [r7, #6]
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d105      	bne.n	8005a10 <HAL_GPIO_EXTI_Callback+0x1c>
		rs_current_state = RS_EMERGENCY_TRIGGED;
 8005a04:	4b10      	ldr	r3, [pc, #64]	@ (8005a48 <HAL_GPIO_EXTI_Callback+0x54>)
 8005a06:	2205      	movs	r2, #5
 8005a08:	701a      	strb	r2, [r3, #0]
		emer_state = PUSHED;
 8005a0a:	4b10      	ldr	r3, [pc, #64]	@ (8005a4c <HAL_GPIO_EXTI_Callback+0x58>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PROX_Pin) {
 8005a10:	88fb      	ldrh	r3, [r7, #6]
 8005a12:	2b40      	cmp	r3, #64	@ 0x40
 8005a14:	d104      	bne.n	8005a20 <HAL_GPIO_EXTI_Callback+0x2c>
		prox_count++;
 8005a16:	4b0e      	ldr	r3, [pc, #56]	@ (8005a50 <HAL_GPIO_EXTI_Callback+0x5c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8005a50 <HAL_GPIO_EXTI_Callback+0x5c>)
 8005a1e:	6013      	str	r3, [r2, #0]
	}

	if (GPIO_Pin == UPPER_PHOTO_Pin) {
 8005a20:	88fb      	ldrh	r3, [r7, #6]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d102      	bne.n	8005a2c <HAL_GPIO_EXTI_Callback+0x38>
		up_photo = true;
 8005a26:	4b0b      	ldr	r3, [pc, #44]	@ (8005a54 <HAL_GPIO_EXTI_Callback+0x60>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 8005a2c:	88fb      	ldrh	r3, [r7, #6]
 8005a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a32:	d102      	bne.n	8005a3a <HAL_GPIO_EXTI_Callback+0x46>
		low_photo = true;
 8005a34:	4b08      	ldr	r3, [pc, #32]	@ (8005a58 <HAL_GPIO_EXTI_Callback+0x64>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	701a      	strb	r2, [r3, #0]
	}
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	2000012f 	.word	0x2000012f
 8005a4c:	20000130 	.word	0x20000130
 8005a50:	20000364 	.word	0x20000364
 8005a54:	20000368 	.word	0x20000368
 8005a58:	20000369 	.word	0x20000369

08005a5c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
	// Handle UART reception if needed
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a42      	ldr	r2, [pc, #264]	@ (8005b84 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d17c      	bne.n	8005b7a <HAL_TIM_PeriodElapsedCallback+0x10a>
		// Update sensor readings
		plotter_update_sensors();
 8005a80:	f000 fc78 	bl	8006374 <plotter_update_sensors>

		QEI_get_diff_count(&prismatic_encoder);
 8005a84:	4840      	ldr	r0, [pc, #256]	@ (8005b88 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8005a86:	f7fd fddb 	bl	8003640 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8005a8a:	483f      	ldr	r0, [pc, #252]	@ (8005b88 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8005a8c:	f7fd fec4 	bl	8003818 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 8005a90:	483e      	ldr	r0, [pc, #248]	@ (8005b8c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005a92:	f7fd fdd5 	bl	8003640 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8005a96:	483d      	ldr	r0, [pc, #244]	@ (8005b8c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005a98:	f7fd febe 	bl	8003818 <QEI_compute_data>

		// Calculate control signals for revolute axis
		revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 8005a9c:	4b3c      	ldr	r3, [pc, #240]	@ (8005b90 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005a9e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005aa2:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8005aa6:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8005aaa:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 8005b94 <HAL_TIM_PeriodElapsedCallback+0x124>
 8005aae:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8005b98 <HAL_TIM_PeriodElapsedCallback+0x128>
 8005ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ab6:	f7fc f933 	bl	8001d20 <mapf>
 8005aba:	eef0 7a40 	vmov.f32	s15, s0
 8005abe:	4b34      	ldr	r3, [pc, #208]	@ (8005b90 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005ac0:	edc3 7a08 	vstr	s15, [r3, #32]
				65535.0f, -12.0f, 12.0f);

		revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 8005ac4:	4b32      	ldr	r3, [pc, #200]	@ (8005b90 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005ac6:	edd3 7a08 	vldr	s15, [r3, #32]
 8005aca:	4b30      	ldr	r3, [pc, #192]	@ (8005b8c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005acc:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8005ad0:	eef0 0a47 	vmov.f32	s1, s14
 8005ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ad8:	4830      	ldr	r0, [pc, #192]	@ (8005b9c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8005ada:	f7fe fe7b 	bl	80047d4 <SteadyStateKalmanFilter>
 8005ade:	eef0 7a40 	vmov.f32	s15, s0
 8005ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8005b90 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005ae4:	edc3 7a07 	vstr	s15, [r3, #28]
				&revolute_kalman, revolute_axis.input_voltage,
				revolute_encoder.rads);

		if (isnan(revolute_axis.kalman_velocity)) {
 8005ae8:	4b29      	ldr	r3, [pc, #164]	@ (8005b90 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005aea:	edd3 7a07 	vldr	s15, [r3, #28]
 8005aee:	eef4 7a67 	vcmp.f32	s15, s15
 8005af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af6:	d703      	bvc.n	8005b00 <HAL_TIM_PeriodElapsedCallback+0x90>
			revolute_axis.kalman_velocity = 0.0f;
 8005af8:	4b25      	ldr	r3, [pc, #148]	@ (8005b90 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	61da      	str	r2, [r3, #28]
		}

		// Calculate control signals for prismatic axis
		prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 8005b00:	4b27      	ldr	r3, [pc, #156]	@ (8005ba0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005b02:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005b06:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8005b0a:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8005b0e:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 8005b94 <HAL_TIM_PeriodElapsedCallback+0x124>
 8005b12:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8005b98 <HAL_TIM_PeriodElapsedCallback+0x128>
 8005b16:	eeb0 0a67 	vmov.f32	s0, s15
 8005b1a:	f7fc f901 	bl	8001d20 <mapf>
 8005b1e:	eef0 7a40 	vmov.f32	s15, s0
 8005b22:	4b1f      	ldr	r3, [pc, #124]	@ (8005ba0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005b24:	edc3 7a08 	vstr	s15, [r3, #32]
				-65535.0f, 65535.0f, -12.0f, 12.0f);

		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8005b28:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005b2a:	edd3 7a08 	vldr	s15, [r3, #32]
 8005b2e:	4b16      	ldr	r3, [pc, #88]	@ (8005b88 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8005b30:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8005b34:	eef0 0a47 	vmov.f32	s1, s14
 8005b38:	eeb0 0a67 	vmov.f32	s0, s15
 8005b3c:	4819      	ldr	r0, [pc, #100]	@ (8005ba4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005b3e:	f7fd f8bd 	bl	8002cbc <MotorKalman_Estimate>
 8005b42:	eeb0 7a40 	vmov.f32	s14, s0
				prismatic_axis.input_voltage, prismatic_encoder.rads)
				* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8005b46:	4b18      	ldr	r3, [pc, #96]	@ (8005ba8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005b48:	edd3 7a04 	vldr	s15, [r3, #16]
 8005b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b50:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8005bac <HAL_TIM_PeriodElapsedCallback+0x13c>
 8005b54:	ee67 7a87 	vmul.f32	s15, s15, s14
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8005b58:	4b11      	ldr	r3, [pc, #68]	@ (8005ba0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005b5a:	edc3 7a07 	vstr	s15, [r3, #28]

		if (isnan(prismatic_axis.kalman_velocity)) {
 8005b5e:	4b10      	ldr	r3, [pc, #64]	@ (8005ba0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005b60:	edd3 7a07 	vldr	s15, [r3, #28]
 8005b64:	eef4 7a67 	vcmp.f32	s15, s15
 8005b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b6c:	d703      	bvc.n	8005b76 <HAL_TIM_PeriodElapsedCallback+0x106>
			prismatic_axis.kalman_velocity = 0.0f;
 8005b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	61da      	str	r2, [r3, #28]
		}

		update_control_loops();
 8005b76:	f7ff fbd7 	bl	8005328 <update_control_loops>
	}
}
 8005b7a:	bf00      	nop
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	200019b4 	.word	0x200019b4
 8005b88:	20000404 	.word	0x20000404
 8005b8c:	20000460 	.word	0x20000460
 8005b90:	200002c0 	.word	0x200002c0
 8005b94:	477fff00 	.word	0x477fff00
 8005b98:	c77fff00 	.word	0xc77fff00
 8005b9c:	200014f4 	.word	0x200014f4
 8005ba0:	2000027c 	.word	0x2000027c
 8005ba4:	20001188 	.word	0x20001188
 8005ba8:	20000100 	.word	0x20000100
 8005bac:	447a0000 	.word	0x447a0000

08005bb0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005bb4:	b672      	cpsid	i
}
 8005bb6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005bb8:	bf00      	nop
 8005bba:	e7fd      	b.n	8005bb8 <Error_Handler+0x8>
 8005bbc:	0000      	movs	r0, r0
	...

08005bc0 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8005bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bc4:	ed2d 8b02 	vpush	{d8}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = 500;
 8005bcc:	49c4      	ldr	r1, [pc, #784]	@ (8005ee0 <plotter_begin+0x320>)
 8005bce:	f04f 0200 	mov.w	r2, #0
 8005bd2:	4bc4      	ldr	r3, [pc, #784]	@ (8005ee4 <plotter_begin+0x324>)
 8005bd4:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 8005bd8:	4bc1      	ldr	r3, [pc, #772]	@ (8005ee0 <plotter_begin+0x320>)
 8005bda:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	f7fa fb1f 	bl	8000224 <__adddf3>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	49bd      	ldr	r1, [pc, #756]	@ (8005ee0 <plotter_begin+0x320>)
 8005bec:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500;
 8005bf0:	49bb      	ldr	r1, [pc, #748]	@ (8005ee0 <plotter_begin+0x320>)
 8005bf2:	f04f 0200 	mov.w	r2, #0
 8005bf6:	4bbb      	ldr	r3, [pc, #748]	@ (8005ee4 <plotter_begin+0x324>)
 8005bf8:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = ZGX45RGG_400RPM_Constant.sdd_max;
 8005bfc:	4bb8      	ldr	r3, [pc, #736]	@ (8005ee0 <plotter_begin+0x320>)
 8005bfe:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8005c02:	49b7      	ldr	r1, [pc, #732]	@ (8005ee0 <plotter_begin+0x320>)
 8005c04:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8005c08:	4bb7      	ldr	r3, [pc, #732]	@ (8005ee8 <plotter_begin+0x328>)
 8005c0a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0) - 2.0;
 8005c0e:	a3b0      	add	r3, pc, #704	@ (adr r3, 8005ed0 <plotter_begin+0x310>)
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	f7fa fcbc 	bl	8000590 <__aeabi_dmul>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	4619      	mov	r1, r3
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005c28:	f7fa fafa 	bl	8000220 <__aeabi_dsub>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8005c30:	49ad      	ldr	r1, [pc, #692]	@ (8005ee8 <plotter_begin+0x328>)
 8005c32:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	ZGX45RGG_150RPM_Constant.qdd_max = ZGX45RGG_150RPM_Constant.qd_max * 0.4;
 8005c36:	4bac      	ldr	r3, [pc, #688]	@ (8005ee8 <plotter_begin+0x328>)
 8005c38:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8005c3c:	a3a6      	add	r3, pc, #664	@ (adr r3, 8005ed8 <plotter_begin+0x318>)
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f7fa fca5 	bl	8000590 <__aeabi_dmul>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	49a7      	ldr	r1, [pc, #668]	@ (8005ee8 <plotter_begin+0x328>)
 8005c4c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	ZGX45RGG_150RPM_Constant.traject_qd_max = ZGX45RGG_150RPM_Constant.qd_max;
 8005c50:	4ba5      	ldr	r3, [pc, #660]	@ (8005ee8 <plotter_begin+0x328>)
 8005c52:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005c56:	49a4      	ldr	r1, [pc, #656]	@ (8005ee8 <plotter_begin+0x328>)
 8005c58:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = ZGX45RGG_150RPM_Constant.qdd_max;
 8005c5c:	4ba2      	ldr	r3, [pc, #648]	@ (8005ee8 <plotter_begin+0x328>)
 8005c5e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8005c62:	49a1      	ldr	r1, [pc, #644]	@ (8005ee8 <plotter_begin+0x328>)
 8005c64:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8005c68:	2100      	movs	r1, #0
 8005c6a:	48a0      	ldr	r0, [pc, #640]	@ (8005eec <plotter_begin+0x32c>)
 8005c6c:	f000 fc16 	bl	800649c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8005c70:	eddf 2a9f 	vldr	s5, [pc, #636]	@ 8005ef0 <plotter_begin+0x330>
 8005c74:	ed9f 2a9f 	vldr	s4, [pc, #636]	@ 8005ef4 <plotter_begin+0x334>
 8005c78:	eddf 1a9f 	vldr	s3, [pc, #636]	@ 8005ef8 <plotter_begin+0x338>
 8005c7c:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 8005ef8 <plotter_begin+0x338>
 8005c80:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 8005efc <plotter_begin+0x33c>
 8005c84:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8005ef0 <plotter_begin+0x330>
 8005c88:	4898      	ldr	r0, [pc, #608]	@ (8005eec <plotter_begin+0x32c>)
 8005c8a:	f000 fc65 	bl	8006558 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8005c8e:	2102      	movs	r1, #2
 8005c90:	489b      	ldr	r0, [pc, #620]	@ (8005f00 <plotter_begin+0x340>)
 8005c92:	f000 fc03 	bl	800649c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8005c96:	ed9f 3a96 	vldr	s6, [pc, #600]	@ 8005ef0 <plotter_begin+0x330>
 8005c9a:	eddf 2a96 	vldr	s5, [pc, #600]	@ 8005ef4 <plotter_begin+0x334>
 8005c9e:	ed9f 2a96 	vldr	s4, [pc, #600]	@ 8005ef8 <plotter_begin+0x338>
 8005ca2:	eddf 1a95 	vldr	s3, [pc, #596]	@ 8005ef8 <plotter_begin+0x338>
 8005ca6:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005caa:	eddf 0a94 	vldr	s1, [pc, #592]	@ 8005efc <plotter_begin+0x33c>
 8005cae:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8005ef0 <plotter_begin+0x330>
 8005cb2:	4893      	ldr	r0, [pc, #588]	@ (8005f00 <plotter_begin+0x340>)
 8005cb4:	f000 fc7b 	bl	80065ae <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8005cb8:	2100      	movs	r1, #0
 8005cba:	4892      	ldr	r0, [pc, #584]	@ (8005f04 <plotter_begin+0x344>)
 8005cbc:	f000 fbee 	bl	800649c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8005cc0:	eddf 2a91 	vldr	s5, [pc, #580]	@ 8005f08 <plotter_begin+0x348>
 8005cc4:	ed9f 2a91 	vldr	s4, [pc, #580]	@ 8005f0c <plotter_begin+0x34c>
 8005cc8:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 8005ef8 <plotter_begin+0x338>
 8005ccc:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 8005ef8 <plotter_begin+0x338>
 8005cd0:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 8005efc <plotter_begin+0x33c>
 8005cd4:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 8005f08 <plotter_begin+0x348>
 8005cd8:	488a      	ldr	r0, [pc, #552]	@ (8005f04 <plotter_begin+0x344>)
 8005cda:	f000 fc3d 	bl	8006558 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8005cde:	2102      	movs	r1, #2
 8005ce0:	488b      	ldr	r0, [pc, #556]	@ (8005f10 <plotter_begin+0x350>)
 8005ce2:	f000 fbdb 	bl	800649c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8005ce6:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8005cea:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8005cee:	ed9f 2a82 	vldr	s4, [pc, #520]	@ 8005ef8 <plotter_begin+0x338>
 8005cf2:	eddf 1a81 	vldr	s3, [pc, #516]	@ 8005ef8 <plotter_begin+0x338>
 8005cf6:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005cfa:	eddf 0a80 	vldr	s1, [pc, #512]	@ 8005efc <plotter_begin+0x33c>
 8005cfe:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005d02:	4883      	ldr	r0, [pc, #524]	@ (8005f10 <plotter_begin+0x350>)
 8005d04:	f000 fc53 	bl	80065ae <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8005d08:	2100      	movs	r1, #0
 8005d0a:	4882      	ldr	r0, [pc, #520]	@ (8005f14 <plotter_begin+0x354>)
 8005d0c:	f000 fbc6 	bl	800649c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005d10:	4b73      	ldr	r3, [pc, #460]	@ (8005ee0 <plotter_begin+0x320>)
 8005d12:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005d16:	4610      	mov	r0, r2
 8005d18:	4619      	mov	r1, r3
 8005d1a:	f7fa ff1b 	bl	8000b54 <__aeabi_d2f>
 8005d1e:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8005d20:	4b6f      	ldr	r3, [pc, #444]	@ (8005ee0 <plotter_begin+0x320>)
 8005d22:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005d26:	4610      	mov	r0, r2
 8005d28:	4619      	mov	r1, r3
 8005d2a:	f7fa ff13 	bl	8000b54 <__aeabi_d2f>
 8005d2e:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005d30:	ee07 3a90 	vmov	s15, r3
 8005d34:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8005d38:	4b69      	ldr	r3, [pc, #420]	@ (8005ee0 <plotter_begin+0x320>)
 8005d3a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005d3e:	4610      	mov	r0, r2
 8005d40:	4619      	mov	r1, r3
 8005d42:	f7fa ff07 	bl	8000b54 <__aeabi_d2f>
 8005d46:	4603      	mov	r3, r0
 8005d48:	ee02 3a90 	vmov	s5, r3
 8005d4c:	eeb0 2a48 	vmov.f32	s4, s16
 8005d50:	eddf 1a69 	vldr	s3, [pc, #420]	@ 8005ef8 <plotter_begin+0x338>
 8005d54:	ed9f 1a68 	vldr	s2, [pc, #416]	@ 8005ef8 <plotter_begin+0x338>
 8005d58:	eddf 0a68 	vldr	s1, [pc, #416]	@ 8005efc <plotter_begin+0x33c>
 8005d5c:	ee00 4a10 	vmov	s0, r4
 8005d60:	486c      	ldr	r0, [pc, #432]	@ (8005f14 <plotter_begin+0x354>)
 8005d62:	f000 fbf9 	bl	8006558 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8005d66:	2102      	movs	r1, #2
 8005d68:	486b      	ldr	r0, [pc, #428]	@ (8005f18 <plotter_begin+0x358>)
 8005d6a:	f000 fb97 	bl	800649c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005d6e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ee0 <plotter_begin+0x320>)
 8005d70:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005d74:	4610      	mov	r0, r2
 8005d76:	4619      	mov	r1, r3
 8005d78:	f7fa feec 	bl	8000b54 <__aeabi_d2f>
 8005d7c:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8005d7e:	4b58      	ldr	r3, [pc, #352]	@ (8005ee0 <plotter_begin+0x320>)
 8005d80:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005d84:	4610      	mov	r0, r2
 8005d86:	4619      	mov	r1, r3
 8005d88:	f7fa fee4 	bl	8000b54 <__aeabi_d2f>
 8005d8c:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8005d96:	4b52      	ldr	r3, [pc, #328]	@ (8005ee0 <plotter_begin+0x320>)
 8005d98:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	4619      	mov	r1, r3
 8005da0:	f7fa fed8 	bl	8000b54 <__aeabi_d2f>
 8005da4:	4603      	mov	r3, r0
 8005da6:	ee03 3a10 	vmov	s6, r3
 8005daa:	eef0 2a48 	vmov.f32	s5, s16
 8005dae:	ed9f 2a52 	vldr	s4, [pc, #328]	@ 8005ef8 <plotter_begin+0x338>
 8005db2:	eddf 1a51 	vldr	s3, [pc, #324]	@ 8005ef8 <plotter_begin+0x338>
 8005db6:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005dba:	eddf 0a50 	vldr	s1, [pc, #320]	@ 8005efc <plotter_begin+0x33c>
 8005dbe:	ee00 4a10 	vmov	s0, r4
 8005dc2:	4855      	ldr	r0, [pc, #340]	@ (8005f18 <plotter_begin+0x358>)
 8005dc4:	f000 fbf3 	bl	80065ae <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8005dc8:	2100      	movs	r1, #0
 8005dca:	4854      	ldr	r0, [pc, #336]	@ (8005f1c <plotter_begin+0x35c>)
 8005dcc:	f000 fb66 	bl	800649c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005dd0:	4b45      	ldr	r3, [pc, #276]	@ (8005ee8 <plotter_begin+0x328>)
 8005dd2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	4619      	mov	r1, r3
 8005dda:	f7fa febb 	bl	8000b54 <__aeabi_d2f>
 8005dde:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8005de0:	4b41      	ldr	r3, [pc, #260]	@ (8005ee8 <plotter_begin+0x328>)
 8005de2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005de6:	4610      	mov	r0, r2
 8005de8:	4619      	mov	r1, r3
 8005dea:	f7fa feb3 	bl	8000b54 <__aeabi_d2f>
 8005dee:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005df0:	ee07 3a90 	vmov	s15, r3
 8005df4:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 8005df8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ee8 <plotter_begin+0x328>)
 8005dfa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005dfe:	4610      	mov	r0, r2
 8005e00:	4619      	mov	r1, r3
 8005e02:	f7fa fea7 	bl	8000b54 <__aeabi_d2f>
 8005e06:	4603      	mov	r3, r0
 8005e08:	ee02 3a90 	vmov	s5, r3
 8005e0c:	eeb0 2a48 	vmov.f32	s4, s16
 8005e10:	eddf 1a39 	vldr	s3, [pc, #228]	@ 8005ef8 <plotter_begin+0x338>
 8005e14:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 8005ef8 <plotter_begin+0x338>
 8005e18:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8005efc <plotter_begin+0x33c>
 8005e1c:	ee00 4a10 	vmov	s0, r4
 8005e20:	483e      	ldr	r0, [pc, #248]	@ (8005f1c <plotter_begin+0x35c>)
 8005e22:	f000 fb99 	bl	8006558 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 8005e26:	2102      	movs	r1, #2
 8005e28:	483d      	ldr	r0, [pc, #244]	@ (8005f20 <plotter_begin+0x360>)
 8005e2a:	f000 fb37 	bl	800649c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005e2e:	4b2e      	ldr	r3, [pc, #184]	@ (8005ee8 <plotter_begin+0x328>)
 8005e30:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005e34:	4610      	mov	r0, r2
 8005e36:	4619      	mov	r1, r3
 8005e38:	f7fa fe8c 	bl	8000b54 <__aeabi_d2f>
 8005e3c:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8005e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8005ee8 <plotter_begin+0x328>)
 8005e40:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005e44:	4610      	mov	r0, r2
 8005e46:	4619      	mov	r1, r3
 8005e48:	f7fa fe84 	bl	8000b54 <__aeabi_d2f>
 8005e4c:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8005e56:	4b24      	ldr	r3, [pc, #144]	@ (8005ee8 <plotter_begin+0x328>)
 8005e58:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	4619      	mov	r1, r3
 8005e60:	f7fa fe78 	bl	8000b54 <__aeabi_d2f>
 8005e64:	4603      	mov	r3, r0
 8005e66:	ee03 3a10 	vmov	s6, r3
 8005e6a:	eef0 2a48 	vmov.f32	s5, s16
 8005e6e:	ed9f 2a22 	vldr	s4, [pc, #136]	@ 8005ef8 <plotter_begin+0x338>
 8005e72:	eddf 1a21 	vldr	s3, [pc, #132]	@ 8005ef8 <plotter_begin+0x338>
 8005e76:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005e7a:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8005efc <plotter_begin+0x33c>
 8005e7e:	ee00 4a10 	vmov	s0, r4
 8005e82:	4827      	ldr	r0, [pc, #156]	@ (8005f20 <plotter_begin+0x360>)
 8005e84:	f000 fb93 	bl	80065ae <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 8005e88:	4826      	ldr	r0, [pc, #152]	@ (8005f24 <plotter_begin+0x364>)
 8005e8a:	f7fe f9ad 	bl	80041e8 <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 8005e8e:	4b26      	ldr	r3, [pc, #152]	@ (8005f28 <plotter_begin+0x368>)
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fa fb24 	bl	80004e0 <__aeabi_f2d>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	f7fa f9c2 	bl	8000224 <__adddf3>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	f04f 0200 	mov.w	r2, #0
 8005eac:	4b1f      	ldr	r3, [pc, #124]	@ (8005f2c <plotter_begin+0x36c>)
 8005eae:	f7fa fb6f 	bl	8000590 <__aeabi_dmul>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	4619      	mov	r1, r3
 8005eba:	f7fa fe4b 	bl	8000b54 <__aeabi_d2f>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	ee00 3a90 	vmov	s1, r3
 8005ec4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005ec8:	e032      	b.n	8005f30 <plotter_begin+0x370>
 8005eca:	bf00      	nop
 8005ecc:	f3af 8000 	nop.w
 8005ed0:	55555555 	.word	0x55555555
 8005ed4:	3fe55555 	.word	0x3fe55555
 8005ed8:	9999999a 	.word	0x9999999a
 8005edc:	3fd99999 	.word	0x3fd99999
 8005ee0:	20000080 	.word	0x20000080
 8005ee4:	407f4000 	.word	0x407f4000
 8005ee8:	20000000 	.word	0x20000000
 8005eec:	200005b0 	.word	0x200005b0
 8005ef0:	477fff00 	.word	0x477fff00
 8005ef4:	c77fff00 	.word	0xc77fff00
 8005ef8:	00000000 	.word	0x00000000
 8005efc:	3dcccccd 	.word	0x3dcccccd
 8005f00:	200005f4 	.word	0x200005f4
 8005f04:	20000638 	.word	0x20000638
 8005f08:	43480000 	.word	0x43480000
 8005f0c:	c3480000 	.word	0xc3480000
 8005f10:	2000067c 	.word	0x2000067c
 8005f14:	200006c0 	.word	0x200006c0
 8005f18:	20000704 	.word	0x20000704
 8005f1c:	20000748 	.word	0x20000748
 8005f20:	2000078c 	.word	0x2000078c
 8005f24:	200007d0 	.word	0x200007d0
 8005f28:	20000100 	.word	0x20000100
 8005f2c:	408f4000 	.word	0x408f4000
 8005f30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005f38:	49bd      	ldr	r1, [pc, #756]	@ (8006230 <plotter_begin+0x670>)
 8005f3a:	48be      	ldr	r0, [pc, #760]	@ (8006234 <plotter_begin+0x674>)
 8005f3c:	f7fd fb0e 	bl	800355c <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8005f40:	eddf 0abd 	vldr	s1, [pc, #756]	@ 8006238 <plotter_begin+0x678>
 8005f44:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005f48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005f50:	49ba      	ldr	r1, [pc, #744]	@ (800623c <plotter_begin+0x67c>)
 8005f52:	48bb      	ldr	r0, [pc, #748]	@ (8006240 <plotter_begin+0x680>)
 8005f54:	f7fd fb02 	bl	800355c <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8005f58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f62:	2204      	movs	r2, #4
 8005f64:	49b7      	ldr	r1, [pc, #732]	@ (8006244 <plotter_begin+0x684>)
 8005f66:	48b8      	ldr	r0, [pc, #736]	@ (8006248 <plotter_begin+0x688>)
 8005f68:	f7fb f9e8 	bl	800133c <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8005f6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	4bb6      	ldr	r3, [pc, #728]	@ (800624c <plotter_begin+0x68c>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	49b3      	ldr	r1, [pc, #716]	@ (8006244 <plotter_begin+0x684>)
 8005f78:	48b5      	ldr	r0, [pc, #724]	@ (8006250 <plotter_begin+0x690>)
 8005f7a:	f7fb f9df 	bl	800133c <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8005f7e:	220c      	movs	r2, #12
 8005f80:	49b4      	ldr	r1, [pc, #720]	@ (8006254 <plotter_begin+0x694>)
 8005f82:	48b5      	ldr	r0, [pc, #724]	@ (8006258 <plotter_begin+0x698>)
 8005f84:	f7fd f9c0 	bl	8003308 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8005f88:	eddf 0aab 	vldr	s1, [pc, #684]	@ 8006238 <plotter_begin+0x678>
 8005f8c:	ed9f 0ab3 	vldr	s0, [pc, #716]	@ 800625c <plotter_begin+0x69c>
 8005f90:	48ad      	ldr	r0, [pc, #692]	@ (8006248 <plotter_begin+0x688>)
 8005f92:	f7fb f9f7 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8005f96:	eddf 0aa8 	vldr	s1, [pc, #672]	@ 8006238 <plotter_begin+0x678>
 8005f9a:	ed9f 0ab0 	vldr	s0, [pc, #704]	@ 800625c <plotter_begin+0x69c>
 8005f9e:	48ac      	ldr	r0, [pc, #688]	@ (8006250 <plotter_begin+0x690>)
 8005fa0:	f7fb f9f0 	bl	8001384 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
			ZGX45RGG_400RPM_Constant.sd_max);
 8005fa4:	4bae      	ldr	r3, [pc, #696]	@ (8006260 <plotter_begin+0x6a0>)
 8005fa6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
 8005faa:	4610      	mov	r0, r2
 8005fac:	4619      	mov	r1, r3
 8005fae:	f7fa fdd1 	bl	8000b54 <__aeabi_d2f>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	ee01 3a90 	vmov	s3, r3
 8005fb8:	ed9f 1aaa 	vldr	s2, [pc, #680]	@ 8006264 <plotter_begin+0x6a4>
 8005fbc:	eddf 0aaa 	vldr	s1, [pc, #680]	@ 8006268 <plotter_begin+0x6a8>
 8005fc0:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 800626c <plotter_begin+0x6ac>
 8005fc4:	48aa      	ldr	r0, [pc, #680]	@ (8006270 <plotter_begin+0x6b0>)
 8005fc6:	f7fb f8f4 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8005fca:	4ba5      	ldr	r3, [pc, #660]	@ (8006260 <plotter_begin+0x6a0>)
 8005fcc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	f7fa fdbe 	bl	8000b54 <__aeabi_d2f>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	ee01 3a90 	vmov	s3, r3
 8005fde:	ed9f 1a96 	vldr	s2, [pc, #600]	@ 8006238 <plotter_begin+0x678>
 8005fe2:	eddf 0aa4 	vldr	s1, [pc, #656]	@ 8006274 <plotter_begin+0x6b4>
 8005fe6:	ed9f 0aa4 	vldr	s0, [pc, #656]	@ 8006278 <plotter_begin+0x6b8>
 8005fea:	48a4      	ldr	r0, [pc, #656]	@ (800627c <plotter_begin+0x6bc>)
 8005fec:	f7fb f8e1 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 150, 5e-1, 3000,
			ZGX45RGG_150RPM_Constant.qd_max);
 8005ff0:	4ba3      	ldr	r3, [pc, #652]	@ (8006280 <plotter_begin+0x6c0>)
 8005ff2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 150, 5e-1, 3000,
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	f7fa fdab 	bl	8000b54 <__aeabi_d2f>
 8005ffe:	4603      	mov	r3, r0
 8006000:	ee01 3a90 	vmov	s3, r3
 8006004:	ed9f 1a9f 	vldr	s2, [pc, #636]	@ 8006284 <plotter_begin+0x6c4>
 8006008:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800600c:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8006278 <plotter_begin+0x6b8>
 8006010:	489d      	ldr	r0, [pc, #628]	@ (8006288 <plotter_begin+0x6c8>)
 8006012:	f7fb f8ce 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_velocity_pid, 4500, 50, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 8006016:	4b9a      	ldr	r3, [pc, #616]	@ (8006280 <plotter_begin+0x6c0>)
 8006018:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 4500, 50, 0,
 800601c:	4610      	mov	r0, r2
 800601e:	4619      	mov	r1, r3
 8006020:	f7fa fd98 	bl	8000b54 <__aeabi_d2f>
 8006024:	4603      	mov	r3, r0
 8006026:	ee01 3a90 	vmov	s3, r3
 800602a:	ed9f 1a83 	vldr	s2, [pc, #524]	@ 8006238 <plotter_begin+0x678>
 800602e:	eddf 0a97 	vldr	s1, [pc, #604]	@ 800628c <plotter_begin+0x6cc>
 8006032:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8006290 <plotter_begin+0x6d0>
 8006036:	4897      	ldr	r0, [pc, #604]	@ (8006294 <plotter_begin+0x6d4>)
 8006038:	f7fb f8bb 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 800603c:	4990      	ldr	r1, [pc, #576]	@ (8006280 <plotter_begin+0x6c0>)
 800603e:	4896      	ldr	r0, [pc, #600]	@ (8006298 <plotter_begin+0x6d8>)
 8006040:	f7fb fa7a 	bl	8001538 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8006044:	4986      	ldr	r1, [pc, #536]	@ (8006260 <plotter_begin+0x6a0>)
 8006046:	4895      	ldr	r0, [pc, #596]	@ (800629c <plotter_begin+0x6dc>)
 8006048:	f7fb fbf4 	bl	8001834 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 800604c:	4a94      	ldr	r2, [pc, #592]	@ (80062a0 <plotter_begin+0x6e0>)
 800604e:	498c      	ldr	r1, [pc, #560]	@ (8006280 <plotter_begin+0x6c0>)
 8006050:	4894      	ldr	r0, [pc, #592]	@ (80062a4 <plotter_begin+0x6e4>)
 8006052:	f7fb fb00 	bl	8001656 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8006056:	4a92      	ldr	r2, [pc, #584]	@ (80062a0 <plotter_begin+0x6e0>)
 8006058:	4981      	ldr	r1, [pc, #516]	@ (8006260 <plotter_begin+0x6a0>)
 800605a:	4893      	ldr	r0, [pc, #588]	@ (80062a8 <plotter_begin+0x6e8>)
 800605c:	f7fb fc79 	bl	8001952 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 8006060:	2302      	movs	r3, #2
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	eddf 0a91 	vldr	s1, [pc, #580]	@ 80062ac <plotter_begin+0x6ec>
 8006068:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 80062b0 <plotter_begin+0x6f0>
 800606c:	2364      	movs	r3, #100	@ 0x64
 800606e:	4a91      	ldr	r2, [pc, #580]	@ (80062b4 <plotter_begin+0x6f4>)
 8006070:	4991      	ldr	r1, [pc, #580]	@ (80062b8 <plotter_begin+0x6f8>)
 8006072:	4892      	ldr	r0, [pc, #584]	@ (80062bc <plotter_begin+0x6fc>)
 8006074:	f7fa ff54 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 8006078:	2105      	movs	r1, #5
 800607a:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 80062c0 <plotter_begin+0x700>
 800607e:	488f      	ldr	r0, [pc, #572]	@ (80062bc <plotter_begin+0x6fc>)
 8006080:	f7fb f800 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 8006084:	488d      	ldr	r0, [pc, #564]	@ (80062bc <plotter_begin+0x6fc>)
 8006086:	f7fa ffa3 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800608a:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 80062c4 <plotter_begin+0x704>
 800608e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8006092:	211f      	movs	r1, #31
 8006094:	488c      	ldr	r0, [pc, #560]	@ (80062c8 <plotter_begin+0x708>)
 8006096:	f7fb fd23 	bl	8001ae0 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800609a:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 80062c4 <plotter_begin+0x704>
 800609e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80060a2:	211f      	movs	r1, #31
 80060a4:	4889      	ldr	r0, [pc, #548]	@ (80062cc <plotter_begin+0x70c>)
 80060a6:	f7fb fd1b 	bl	8001ae0 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80060aa:	eddf 0a86 	vldr	s1, [pc, #536]	@ 80062c4 <plotter_begin+0x704>
 80060ae:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80060b2:	211f      	movs	r1, #31
 80060b4:	4886      	ldr	r0, [pc, #536]	@ (80062d0 <plotter_begin+0x710>)
 80060b6:	f7fb fd13 	bl	8001ae0 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80060ba:	eddf 0a82 	vldr	s1, [pc, #520]	@ 80062c4 <plotter_begin+0x704>
 80060be:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80060c2:	211f      	movs	r1, #31
 80060c4:	4883      	ldr	r0, [pc, #524]	@ (80062d4 <plotter_begin+0x714>)
 80060c6:	f7fb fd0b 	bl	8001ae0 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80060ca:	4b65      	ldr	r3, [pc, #404]	@ (8006260 <plotter_begin+0x6a0>)
 80060cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060d0:	4610      	mov	r0, r2
 80060d2:	4619      	mov	r1, r3
 80060d4:	f7fa fd3e 	bl	8000b54 <__aeabi_d2f>
 80060d8:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80060da:	4b61      	ldr	r3, [pc, #388]	@ (8006260 <plotter_begin+0x6a0>)
 80060dc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80060e0:	4610      	mov	r0, r2
 80060e2:	4619      	mov	r1, r3
 80060e4:	f7fa fd36 	bl	8000b54 <__aeabi_d2f>
 80060e8:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80060ea:	4b5d      	ldr	r3, [pc, #372]	@ (8006260 <plotter_begin+0x6a0>)
 80060ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80060f0:	4610      	mov	r0, r2
 80060f2:	4619      	mov	r1, r3
 80060f4:	f7fa fd2e 	bl	8000b54 <__aeabi_d2f>
 80060f8:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 80060fa:	4b59      	ldr	r3, [pc, #356]	@ (8006260 <plotter_begin+0x6a0>)
 80060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8006100:	4610      	mov	r0, r2
 8006102:	4619      	mov	r1, r3
 8006104:	f7fa fd26 	bl	8000b54 <__aeabi_d2f>
 8006108:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 800610a:	4b55      	ldr	r3, [pc, #340]	@ (8006260 <plotter_begin+0x6a0>)
 800610c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8006110:	4610      	mov	r0, r2
 8006112:	4619      	mov	r1, r3
 8006114:	f7fa fd1e 	bl	8000b54 <__aeabi_d2f>
 8006118:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 800611a:	4b51      	ldr	r3, [pc, #324]	@ (8006260 <plotter_begin+0x6a0>)
 800611c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8006120:	4610      	mov	r0, r2
 8006122:	4619      	mov	r1, r3
 8006124:	f7fa fd16 	bl	8000b54 <__aeabi_d2f>
 8006128:	4603      	mov	r3, r0
 800612a:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 800612e:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8006132:	ee03 3a10 	vmov	s6, r3
 8006136:	ee02 9a90 	vmov	s5, r9
 800613a:	ee02 8a10 	vmov	s4, r8
 800613e:	ee01 6a90 	vmov	s3, r6
 8006142:	ee01 5a10 	vmov	s2, r5
 8006146:	ee00 4a90 	vmov	s1, r4
 800614a:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 80062d8 <plotter_begin+0x718>
 800614e:	4863      	ldr	r0, [pc, #396]	@ (80062dc <plotter_begin+0x71c>)
 8006150:	f7fb fec6 	bl	8001ee0 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8006154:	4b4a      	ldr	r3, [pc, #296]	@ (8006280 <plotter_begin+0x6c0>)
 8006156:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800615a:	4610      	mov	r0, r2
 800615c:	4619      	mov	r1, r3
 800615e:	f7fa fcf9 	bl	8000b54 <__aeabi_d2f>
 8006162:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L,
 8006164:	4b46      	ldr	r3, [pc, #280]	@ (8006280 <plotter_begin+0x6c0>)
 8006166:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800616a:	4610      	mov	r0, r2
 800616c:	4619      	mov	r1, r3
 800616e:	f7fa fcf1 	bl	8000b54 <__aeabi_d2f>
 8006172:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.J,
 8006174:	4b42      	ldr	r3, [pc, #264]	@ (8006280 <plotter_begin+0x6c0>)
 8006176:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800617a:	4610      	mov	r0, r2
 800617c:	4619      	mov	r1, r3
 800617e:	f7fa fce9 	bl	8000b54 <__aeabi_d2f>
 8006182:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2,
 8006184:	4b3e      	ldr	r3, [pc, #248]	@ (8006280 <plotter_begin+0x6c0>)
 8006186:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800618a:	a327      	add	r3, pc, #156	@ (adr r3, 8006228 <plotter_begin+0x668>)
 800618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006190:	f7fa f9fe 	bl	8000590 <__aeabi_dmul>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8006198:	4610      	mov	r0, r2
 800619a:	4619      	mov	r1, r3
 800619c:	f7fa fcda 	bl	8000b54 <__aeabi_d2f>
 80061a0:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.Ke,
 80061a2:	4b37      	ldr	r3, [pc, #220]	@ (8006280 <plotter_begin+0x6c0>)
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80061a8:	4610      	mov	r0, r2
 80061aa:	4619      	mov	r1, r3
 80061ac:	f7fa fcd2 	bl	8000b54 <__aeabi_d2f>
 80061b0:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt,
 80061b2:	4b33      	ldr	r3, [pc, #204]	@ (8006280 <plotter_begin+0x6c0>)
 80061b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80061b8:	4610      	mov	r0, r2
 80061ba:	4619      	mov	r1, r3
 80061bc:	f7fa fcca 	bl	8000b54 <__aeabi_d2f>
 80061c0:	4603      	mov	r3, r0
 80061c2:	4947      	ldr	r1, [pc, #284]	@ (80062e0 <plotter_begin+0x720>)
 80061c4:	4847      	ldr	r0, [pc, #284]	@ (80062e4 <plotter_begin+0x724>)
 80061c6:	ed9f 3a44 	vldr	s6, [pc, #272]	@ 80062d8 <plotter_begin+0x718>
 80061ca:	ee02 3a90 	vmov	s5, r3
 80061ce:	ee02 9a10 	vmov	s4, r9
 80061d2:	ee01 8a90 	vmov	s3, r8
 80061d6:	ee01 6a10 	vmov	s2, r6
 80061da:	ee00 5a90 	vmov	s1, r5
 80061de:	ee00 4a10 	vmov	s0, r4
 80061e2:	f7fd f829 	bl	8003238 <GenerateMotorMatrices>
			0.001,
			&revolute_A,
			&revolute_B
			);

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 80061e6:	eddf 0a40 	vldr	s1, [pc, #256]	@ 80062e8 <plotter_begin+0x728>
 80061ea:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80061ee:	4a3c      	ldr	r2, [pc, #240]	@ (80062e0 <plotter_begin+0x720>)
 80061f0:	493c      	ldr	r1, [pc, #240]	@ (80062e4 <plotter_begin+0x724>)
 80061f2:	483e      	ldr	r0, [pc, #248]	@ (80062ec <plotter_begin+0x72c>)
 80061f4:	f7fe fc38 	bl	8004a68 <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 80061f8:	23c8      	movs	r3, #200	@ 0xc8
 80061fa:	9301      	str	r3, [sp, #4]
 80061fc:	2315      	movs	r3, #21
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	4b3b      	ldr	r3, [pc, #236]	@ (80062f0 <plotter_begin+0x730>)
 8006202:	4a3c      	ldr	r2, [pc, #240]	@ (80062f4 <plotter_begin+0x734>)
 8006204:	493c      	ldr	r1, [pc, #240]	@ (80062f8 <plotter_begin+0x738>)
 8006206:	483d      	ldr	r0, [pc, #244]	@ (80062fc <plotter_begin+0x73c>)
 8006208:	f7fb fe02 	bl	8001e10 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 800620c:	483c      	ldr	r0, [pc, #240]	@ (8006300 <plotter_begin+0x740>)
 800620e:	f004 fda7 	bl	800ad60 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 8006212:	f000 f877 	bl	8006304 <plotter_reset>
}
 8006216:	bf00      	nop
 8006218:	3704      	adds	r7, #4
 800621a:	46bd      	mov	sp, r7
 800621c:	ecbd 8b02 	vpop	{d8}
 8006220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006224:	f3af 8000 	nop.w
 8006228:	9999999a 	.word	0x9999999a
 800622c:	40019999 	.word	0x40019999
 8006230:	20001c18 	.word	0x20001c18
 8006234:	20000404 	.word	0x20000404
 8006238:	00000000 	.word	0x00000000
 800623c:	20001b4c 	.word	0x20001b4c
 8006240:	20000460 	.word	0x20000460
 8006244:	20001ce4 	.word	0x20001ce4
 8006248:	2000036c 	.word	0x2000036c
 800624c:	48000800 	.word	0x48000800
 8006250:	200003b8 	.word	0x200003b8
 8006254:	200018e8 	.word	0x200018e8
 8006258:	20000574 	.word	0x20000574
 800625c:	44fa0000 	.word	0x44fa0000
 8006260:	20000080 	.word	0x20000080
 8006264:	42f00000 	.word	0x42f00000
 8006268:	2edbe6ff 	.word	0x2edbe6ff
 800626c:	42960000 	.word	0x42960000
 8006270:	200004bc 	.word	0x200004bc
 8006274:	3727c5ac 	.word	0x3727c5ac
 8006278:	43160000 	.word	0x43160000
 800627c:	200004e4 	.word	0x200004e4
 8006280:	20000000 	.word	0x20000000
 8006284:	453b8000 	.word	0x453b8000
 8006288:	2000050c 	.word	0x2000050c
 800628c:	42480000 	.word	0x42480000
 8006290:	458ca000 	.word	0x458ca000
 8006294:	20000534 	.word	0x20000534
 8006298:	20000568 	.word	0x20000568
 800629c:	2000055c 	.word	0x2000055c
 80062a0:	20000100 	.word	0x20000100
 80062a4:	2000056c 	.word	0x2000056c
 80062a8:	20000560 	.word	0x20000560
 80062ac:	457ff000 	.word	0x457ff000
 80062b0:	40533333 	.word	0x40533333
 80062b4:	20000a58 	.word	0x20000a58
 80062b8:	200001b0 	.word	0x200001b0
 80062bc:	2000058c 	.word	0x2000058c
 80062c0:	45000000 	.word	0x45000000
 80062c4:	447a0000 	.word	0x447a0000
 80062c8:	20000a34 	.word	0x20000a34
 80062cc:	20000a28 	.word	0x20000a28
 80062d0:	20000a4c 	.word	0x20000a4c
 80062d4:	20000a40 	.word	0x20000a40
 80062d8:	3a83126f 	.word	0x3a83126f
 80062dc:	20001188 	.word	0x20001188
 80062e0:	200018b4 	.word	0x200018b4
 80062e4:	20001874 	.word	0x20001874
 80062e8:	3d4ccccd 	.word	0x3d4ccccd
 80062ec:	200014f4 	.word	0x200014f4
 80062f0:	20000ff8 	.word	0x20000ff8
 80062f4:	20001db0 	.word	0x20001db0
 80062f8:	20001f48 	.word	0x20001f48
 80062fc:	20000b20 	.word	0x20000b20
 8006300:	200019b4 	.word	0x200019b4

08006304 <plotter_reset>:

void plotter_reset() {
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
	prismatic_encoder.diff_counts = 0;
 8006308:	4b18      	ldr	r3, [pc, #96]	@ (800636c <plotter_reset+0x68>)
 800630a:	2200      	movs	r2, #0
 800630c:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 800630e:	4b17      	ldr	r3, [pc, #92]	@ (800636c <plotter_reset+0x68>)
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 8006316:	4b15      	ldr	r3, [pc, #84]	@ (800636c <plotter_reset+0x68>)
 8006318:	2200      	movs	r2, #0
 800631a:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 800631c:	4b13      	ldr	r3, [pc, #76]	@ (800636c <plotter_reset+0x68>)
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 8006324:	4b11      	ldr	r3, [pc, #68]	@ (800636c <plotter_reset+0x68>)
 8006326:	f04f 0200 	mov.w	r2, #0
 800632a:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 800632c:	4b0f      	ldr	r3, [pc, #60]	@ (800636c <plotter_reset+0x68>)
 800632e:	f04f 0200 	mov.w	r2, #0
 8006332:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 8006334:	4b0e      	ldr	r3, [pc, #56]	@ (8006370 <plotter_reset+0x6c>)
 8006336:	2200      	movs	r2, #0
 8006338:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 800633a:	4b0d      	ldr	r3, [pc, #52]	@ (8006370 <plotter_reset+0x6c>)
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 8006342:	4b0b      	ldr	r3, [pc, #44]	@ (8006370 <plotter_reset+0x6c>)
 8006344:	2200      	movs	r2, #0
 8006346:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 8006348:	4b09      	ldr	r3, [pc, #36]	@ (8006370 <plotter_reset+0x6c>)
 800634a:	f04f 0200 	mov.w	r2, #0
 800634e:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 8006350:	4b07      	ldr	r3, [pc, #28]	@ (8006370 <plotter_reset+0x6c>)
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 8006358:	4b05      	ldr	r3, [pc, #20]	@ (8006370 <plotter_reset+0x6c>)
 800635a:	f04f 0200 	mov.w	r2, #0
 800635e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006360:	bf00      	nop
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	20000404 	.word	0x20000404
 8006370:	20000460 	.word	0x20000460

08006374 <plotter_update_sensors>:

void plotter_update_sensors() {
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 8006378:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8006464 <plotter_update_sensors+0xf0>
 800637c:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8006468 <plotter_update_sensors+0xf4>
 8006380:	2106      	movs	r1, #6
 8006382:	483a      	ldr	r0, [pc, #232]	@ (800646c <plotter_update_sensors+0xf8>)
 8006384:	f7fa fea8 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8006388:	eef0 7a40 	vmov.f32	s15, s0
 800638c:	4b38      	ldr	r3, [pc, #224]	@ (8006470 <plotter_update_sensors+0xfc>)
 800638e:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 8006392:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8006464 <plotter_update_sensors+0xf0>
 8006396:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8006468 <plotter_update_sensors+0xf4>
 800639a:	2107      	movs	r1, #7
 800639c:	4833      	ldr	r0, [pc, #204]	@ (800646c <plotter_update_sensors+0xf8>)
 800639e:	f7fa fe9b 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 80063a2:	eef0 7a40 	vmov.f32	s15, s0
 80063a6:	4b33      	ldr	r3, [pc, #204]	@ (8006474 <plotter_update_sensors+0x100>)
 80063a8:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 80063ac:	2180      	movs	r1, #128	@ 0x80
 80063ae:	4832      	ldr	r0, [pc, #200]	@ (8006478 <plotter_update_sensors+0x104>)
 80063b0:	f003 fb8a 	bl	8009ac8 <HAL_GPIO_ReadPin>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bf0c      	ite	eq
 80063ba:	2301      	moveq	r3, #1
 80063bc:	2300      	movne	r3, #0
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	461a      	mov	r2, r3
 80063c2:	4b2e      	ldr	r3, [pc, #184]	@ (800647c <plotter_update_sensors+0x108>)
 80063c4:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 80063c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80063ca:	482d      	ldr	r0, [pc, #180]	@ (8006480 <plotter_update_sensors+0x10c>)
 80063cc:	f003 fb7c 	bl	8009ac8 <HAL_GPIO_ReadPin>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	bf0c      	ite	eq
 80063d6:	2301      	moveq	r3, #1
 80063d8:	2300      	movne	r3, #0
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	461a      	mov	r2, r3
 80063de:	4b29      	ldr	r3, [pc, #164]	@ (8006484 <plotter_update_sensors+0x110>)
 80063e0:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 80063e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80063e6:	4826      	ldr	r0, [pc, #152]	@ (8006480 <plotter_update_sensors+0x10c>)
 80063e8:	f003 fb6e 	bl	8009ac8 <HAL_GPIO_ReadPin>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	bf0c      	ite	eq
 80063f2:	2301      	moveq	r3, #1
 80063f4:	2300      	movne	r3, #0
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	461a      	mov	r2, r3
 80063fa:	4b23      	ldr	r3, [pc, #140]	@ (8006488 <plotter_update_sensors+0x114>)
 80063fc:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 80063fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006402:	481f      	ldr	r0, [pc, #124]	@ (8006480 <plotter_update_sensors+0x10c>)
 8006404:	f003 fb60 	bl	8009ac8 <HAL_GPIO_ReadPin>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	bf0c      	ite	eq
 800640e:	2301      	moveq	r3, #1
 8006410:	2300      	movne	r3, #0
 8006412:	b2db      	uxtb	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	4b1d      	ldr	r3, [pc, #116]	@ (800648c <plotter_update_sensors+0x118>)
 8006418:	601a      	str	r2, [r3, #0]

	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 800641a:	2104      	movs	r1, #4
 800641c:	4816      	ldr	r0, [pc, #88]	@ (8006478 <plotter_update_sensors+0x104>)
 800641e:	f003 fb53 	bl	8009ac8 <HAL_GPIO_ReadPin>
 8006422:	4603      	mov	r3, r0
 8006424:	461a      	mov	r2, r3
 8006426:	4b1a      	ldr	r3, [pc, #104]	@ (8006490 <plotter_update_sensors+0x11c>)
 8006428:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 800642a:	2102      	movs	r1, #2
 800642c:	4812      	ldr	r0, [pc, #72]	@ (8006478 <plotter_update_sensors+0x104>)
 800642e:	f003 fb4b 	bl	8009ac8 <HAL_GPIO_ReadPin>
 8006432:	4603      	mov	r3, r0
 8006434:	461a      	mov	r2, r3
 8006436:	4b17      	ldr	r3, [pc, #92]	@ (8006494 <plotter_update_sensors+0x120>)
 8006438:	601a      	str	r2, [r3, #0]

	if (up_lim) {
 800643a:	4b15      	ldr	r3, [pc, #84]	@ (8006490 <plotter_update_sensors+0x11c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <plotter_update_sensors+0xd6>
		servo_state = PEN_UP;
 8006442:	4b15      	ldr	r3, [pc, #84]	@ (8006498 <plotter_update_sensors+0x124>)
 8006444:	2202      	movs	r2, #2
 8006446:	701a      	strb	r2, [r3, #0]
//	}
//
//	if (prox) {
//		revolute_state = RP_AT_HOME_POSITION;
//	}
}
 8006448:	e00a      	b.n	8006460 <plotter_update_sensors+0xec>
	} else if (low_lim) {
 800644a:	4b12      	ldr	r3, [pc, #72]	@ (8006494 <plotter_update_sensors+0x120>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <plotter_update_sensors+0xe6>
		servo_state = PEN_DOWN;
 8006452:	4b11      	ldr	r3, [pc, #68]	@ (8006498 <plotter_update_sensors+0x124>)
 8006454:	2201      	movs	r2, #1
 8006456:	701a      	strb	r2, [r3, #0]
}
 8006458:	e002      	b.n	8006460 <plotter_update_sensors+0xec>
		servo_state = PEN_IDLE;
 800645a:	4b0f      	ldr	r3, [pc, #60]	@ (8006498 <plotter_update_sensors+0x124>)
 800645c:	2200      	movs	r2, #0
 800645e:	701a      	strb	r2, [r3, #0]
}
 8006460:	bf00      	nop
 8006462:	bd80      	pop	{r7, pc}
 8006464:	42480000 	.word	0x42480000
 8006468:	c2480000 	.word	0xc2480000
 800646c:	2000058c 	.word	0x2000058c
 8006470:	200018c4 	.word	0x200018c4
 8006474:	200018c8 	.word	0x200018c8
 8006478:	48000400 	.word	0x48000400
 800647c:	200018d4 	.word	0x200018d4
 8006480:	48000800 	.word	0x48000800
 8006484:	200018d8 	.word	0x200018d8
 8006488:	200018dc 	.word	0x200018dc
 800648c:	200018e0 	.word	0x200018e0
 8006490:	200018cc 	.word	0x200018cc
 8006494:	200018d0 	.word	0x200018d0
 8006498:	2000036b 	.word	0x2000036b

0800649c <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	78fa      	ldrb	r2, [r7, #3]
 80064ac:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80064b4:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80064bc:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f04f 0200 	mov.w	r2, #0
 80064c4:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f04f 0200 	mov.w	r2, #0
 80064d4:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f04f 0200 	mov.w	r2, #0
 80064dc:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006550 <SIGNAL_init+0xb4>)
 80064e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80064ea:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d828      	bhi.n	8006544 <SIGNAL_init+0xa8>
 80064f2:	a201      	add	r2, pc, #4	@ (adr r2, 80064f8 <SIGNAL_init+0x5c>)
 80064f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f8:	08006543 	.word	0x08006543
 80064fc:	08006509 	.word	0x08006509
 8006500:	08006527 	.word	0x08006527
 8006504:	08006531 	.word	0x08006531
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006514:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a0e      	ldr	r2, [pc, #56]	@ (8006554 <SIGNAL_init+0xb8>)
 800651a:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006522:	621a      	str	r2, [r3, #32]
            break;
 8006524:	e00e      	b.n	8006544 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800652c:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 800652e:	e009      	b.n	8006544 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800653e:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8006540:	e000      	b.n	8006544 <SIGNAL_init+0xa8>
            break;
 8006542:	bf00      	nop
    }
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	bf800000 	.word	0xbf800000
 8006554:	41200000 	.word	0x41200000

08006558 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8006558:	b480      	push	{r7}
 800655a:	b089      	sub	sp, #36	@ 0x24
 800655c:	af00      	add	r7, sp, #0
 800655e:	61f8      	str	r0, [r7, #28]
 8006560:	ed87 0a06 	vstr	s0, [r7, #24]
 8006564:	edc7 0a05 	vstr	s1, [r7, #20]
 8006568:	ed87 1a04 	vstr	s2, [r7, #16]
 800656c:	edc7 1a03 	vstr	s3, [r7, #12]
 8006570:	ed87 2a02 	vstr	s4, [r7, #8]
 8006574:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	2200      	movs	r2, #0
 800657c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80065a2:	bf00      	nop
 80065a4:	3724      	adds	r7, #36	@ 0x24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 80065ae:	b480      	push	{r7}
 80065b0:	b089      	sub	sp, #36	@ 0x24
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	61f8      	str	r0, [r7, #28]
 80065b6:	ed87 0a06 	vstr	s0, [r7, #24]
 80065ba:	edc7 0a05 	vstr	s1, [r7, #20]
 80065be:	ed87 1a04 	vstr	s2, [r7, #16]
 80065c2:	edc7 1a03 	vstr	s3, [r7, #12]
 80065c6:	ed87 2a02 	vstr	s4, [r7, #8]
 80065ca:	edc7 2a01 	vstr	s5, [r7, #4]
 80065ce:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	2202      	movs	r2, #2
 80065d6:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006602:	bf00      	nop
 8006604:	3724      	adds	r7, #36	@ 0x24
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
	...

08006610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006616:	4b0f      	ldr	r3, [pc, #60]	@ (8006654 <HAL_MspInit+0x44>)
 8006618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800661a:	4a0e      	ldr	r2, [pc, #56]	@ (8006654 <HAL_MspInit+0x44>)
 800661c:	f043 0301 	orr.w	r3, r3, #1
 8006620:	6613      	str	r3, [r2, #96]	@ 0x60
 8006622:	4b0c      	ldr	r3, [pc, #48]	@ (8006654 <HAL_MspInit+0x44>)
 8006624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	607b      	str	r3, [r7, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800662e:	4b09      	ldr	r3, [pc, #36]	@ (8006654 <HAL_MspInit+0x44>)
 8006630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006632:	4a08      	ldr	r2, [pc, #32]	@ (8006654 <HAL_MspInit+0x44>)
 8006634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006638:	6593      	str	r3, [r2, #88]	@ 0x58
 800663a:	4b06      	ldr	r3, [pc, #24]	@ (8006654 <HAL_MspInit+0x44>)
 800663c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800663e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8006646:	f003 fb2b 	bl	8009ca0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800664a:	bf00      	nop
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	40021000 	.word	0x40021000

08006658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800665c:	bf00      	nop
 800665e:	e7fd      	b.n	800665c <NMI_Handler+0x4>

08006660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006664:	bf00      	nop
 8006666:	e7fd      	b.n	8006664 <HardFault_Handler+0x4>

08006668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800666c:	bf00      	nop
 800666e:	e7fd      	b.n	800666c <MemManage_Handler+0x4>

08006670 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006670:	b480      	push	{r7}
 8006672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006674:	bf00      	nop
 8006676:	e7fd      	b.n	8006674 <BusFault_Handler+0x4>

08006678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800667c:	bf00      	nop
 800667e:	e7fd      	b.n	800667c <UsageFault_Handler+0x4>

08006680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006684:	bf00      	nop
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800668e:	b480      	push	{r7}
 8006690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006692:	bf00      	nop
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80066a0:	bf00      	nop
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80066ae:	f000 ffb1 	bl	8007614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80066b2:	bf00      	nop
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 80066ba:	2001      	movs	r0, #1
 80066bc:	f003 fa34 	bl	8009b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80066c0:	bf00      	nop
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 80066c8:	2010      	movs	r0, #16
 80066ca:	f003 fa2d 	bl	8009b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80066ce:	bf00      	nop
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80066d8:	4802      	ldr	r0, [pc, #8]	@ (80066e4 <DMA1_Channel1_IRQHandler+0x10>)
 80066da:	f002 ff24 	bl	8009526 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80066de:	bf00      	nop
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	2000021c 	.word	0x2000021c

080066e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80066ec:	4802      	ldr	r0, [pc, #8]	@ (80066f8 <DMA1_Channel2_IRQHandler+0x10>)
 80066ee:	f002 ff1a 	bl	8009526 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80066f2:	bf00      	nop
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	200020d4 	.word	0x200020d4

080066fc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006700:	4802      	ldr	r0, [pc, #8]	@ (800670c <DMA1_Channel3_IRQHandler+0x10>)
 8006702:	f002 ff10 	bl	8009526 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006706:	bf00      	nop
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20002134 	.word	0x20002134

08006710 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8006714:	4802      	ldr	r0, [pc, #8]	@ (8006720 <DMA1_Channel4_IRQHandler+0x10>)
 8006716:	f002 ff06 	bl	8009526 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800671a:	bf00      	nop
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20002014 	.word	0x20002014

08006724 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8006728:	4802      	ldr	r0, [pc, #8]	@ (8006734 <DMA1_Channel5_IRQHandler+0x10>)
 800672a:	f002 fefc 	bl	8009526 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800672e:	bf00      	nop
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	20002074 	.word	0x20002074

08006738 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 800673c:	2040      	movs	r0, #64	@ 0x40
 800673e:	f003 f9f3 	bl	8009b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006742:	bf00      	nop
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800674c:	4803      	ldr	r0, [pc, #12]	@ (800675c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800674e:	f004 ff2d 	bl	800b5ac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8006752:	4803      	ldr	r0, [pc, #12]	@ (8006760 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8006754:	f004 ff2a 	bl	800b5ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006758:	bf00      	nop
 800675a:	bd80      	pop	{r7, pc}
 800675c:	200018e8 	.word	0x200018e8
 8006760:	20001db0 	.word	0x20001db0

08006764 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006768:	4802      	ldr	r0, [pc, #8]	@ (8006774 <TIM2_IRQHandler+0x10>)
 800676a:	f004 ff1f 	bl	800b5ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800676e:	bf00      	nop
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	200019b4 	.word	0x200019b4

08006778 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800677c:	4802      	ldr	r0, [pc, #8]	@ (8006788 <TIM3_IRQHandler+0x10>)
 800677e:	f004 ff15 	bl	800b5ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006782:	bf00      	nop
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20001a80 	.word	0x20001a80

0800678c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006790:	4802      	ldr	r0, [pc, #8]	@ (800679c <TIM4_IRQHandler+0x10>)
 8006792:	f004 ff0b 	bl	800b5ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006796:	bf00      	nop
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20001b4c 	.word	0x20001b4c

080067a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80067a4:	4802      	ldr	r0, [pc, #8]	@ (80067b0 <USART2_IRQHandler+0x10>)
 80067a6:	f006 fc55 	bl	800d054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80067aa:	bf00      	nop
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20001f48 	.word	0x20001f48

080067b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 80067b8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80067bc:	f003 f9b4 	bl	8009b28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80067c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80067c4:	f003 f9b0 	bl	8009b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80067c8:	bf00      	nop
 80067ca:	bd80      	pop	{r7, pc}

080067cc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80067d0:	4802      	ldr	r0, [pc, #8]	@ (80067dc <LPUART1_IRQHandler+0x10>)
 80067d2:	f006 fc3f 	bl	800d054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80067d6:	bf00      	nop
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20001e7c 	.word	0x20001e7c

080067e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80067e8:	4a14      	ldr	r2, [pc, #80]	@ (800683c <_sbrk+0x5c>)
 80067ea:	4b15      	ldr	r3, [pc, #84]	@ (8006840 <_sbrk+0x60>)
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80067f4:	4b13      	ldr	r3, [pc, #76]	@ (8006844 <_sbrk+0x64>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d102      	bne.n	8006802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80067fc:	4b11      	ldr	r3, [pc, #68]	@ (8006844 <_sbrk+0x64>)
 80067fe:	4a12      	ldr	r2, [pc, #72]	@ (8006848 <_sbrk+0x68>)
 8006800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006802:	4b10      	ldr	r3, [pc, #64]	@ (8006844 <_sbrk+0x64>)
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4413      	add	r3, r2
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	429a      	cmp	r2, r3
 800680e:	d207      	bcs.n	8006820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006810:	f008 fea4 	bl	800f55c <__errno>
 8006814:	4603      	mov	r3, r0
 8006816:	220c      	movs	r2, #12
 8006818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800681a:	f04f 33ff 	mov.w	r3, #4294967295
 800681e:	e009      	b.n	8006834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006820:	4b08      	ldr	r3, [pc, #32]	@ (8006844 <_sbrk+0x64>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006826:	4b07      	ldr	r3, [pc, #28]	@ (8006844 <_sbrk+0x64>)
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	4a05      	ldr	r2, [pc, #20]	@ (8006844 <_sbrk+0x64>)
 8006830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006832:	68fb      	ldr	r3, [r7, #12]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	20020000 	.word	0x20020000
 8006840:	00000400 	.word	0x00000400
 8006844:	200018e4 	.word	0x200018e4
 8006848:	200022e0 	.word	0x200022e0

0800684c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006850:	4b06      	ldr	r3, [pc, #24]	@ (800686c <SystemInit+0x20>)
 8006852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006856:	4a05      	ldr	r2, [pc, #20]	@ (800686c <SystemInit+0x20>)
 8006858:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800685c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006860:	bf00      	nop
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	e000ed00 	.word	0xe000ed00

08006870 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b098      	sub	sp, #96	@ 0x60
 8006874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006876:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	605a      	str	r2, [r3, #4]
 8006880:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006882:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]
 800688a:	605a      	str	r2, [r3, #4]
 800688c:	609a      	str	r2, [r3, #8]
 800688e:	60da      	str	r2, [r3, #12]
 8006890:	611a      	str	r2, [r3, #16]
 8006892:	615a      	str	r2, [r3, #20]
 8006894:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006896:	1d3b      	adds	r3, r7, #4
 8006898:	2234      	movs	r2, #52	@ 0x34
 800689a:	2100      	movs	r1, #0
 800689c:	4618      	mov	r0, r3
 800689e:	f008 fe45 	bl	800f52c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80068a2:	4b3b      	ldr	r3, [pc, #236]	@ (8006990 <MX_TIM1_Init+0x120>)
 80068a4:	4a3b      	ldr	r2, [pc, #236]	@ (8006994 <MX_TIM1_Init+0x124>)
 80068a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80068a8:	4b39      	ldr	r3, [pc, #228]	@ (8006990 <MX_TIM1_Init+0x120>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068ae:	4b38      	ldr	r3, [pc, #224]	@ (8006990 <MX_TIM1_Init+0x120>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80068b4:	4b36      	ldr	r3, [pc, #216]	@ (8006990 <MX_TIM1_Init+0x120>)
 80068b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80068ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068bc:	4b34      	ldr	r3, [pc, #208]	@ (8006990 <MX_TIM1_Init+0x120>)
 80068be:	2200      	movs	r2, #0
 80068c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80068c2:	4b33      	ldr	r3, [pc, #204]	@ (8006990 <MX_TIM1_Init+0x120>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068c8:	4b31      	ldr	r3, [pc, #196]	@ (8006990 <MX_TIM1_Init+0x120>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80068ce:	4830      	ldr	r0, [pc, #192]	@ (8006990 <MX_TIM1_Init+0x120>)
 80068d0:	f004 fabe 	bl	800ae50 <HAL_TIM_PWM_Init>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80068da:	f7ff f969 	bl	8005bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068de:	2300      	movs	r3, #0
 80068e0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80068e2:	2300      	movs	r3, #0
 80068e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068e6:	2300      	movs	r3, #0
 80068e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80068ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80068ee:	4619      	mov	r1, r3
 80068f0:	4827      	ldr	r0, [pc, #156]	@ (8006990 <MX_TIM1_Init+0x120>)
 80068f2:	f006 f8cf 	bl	800ca94 <HAL_TIMEx_MasterConfigSynchronization>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80068fc:	f7ff f958 	bl	8005bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006900:	2360      	movs	r3, #96	@ 0x60
 8006902:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8006904:	2300      	movs	r3, #0
 8006906:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006908:	2300      	movs	r3, #0
 800690a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800690c:	2300      	movs	r3, #0
 800690e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006910:	2300      	movs	r3, #0
 8006912:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006914:	2300      	movs	r3, #0
 8006916:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006918:	2300      	movs	r3, #0
 800691a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800691c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006920:	220c      	movs	r2, #12
 8006922:	4619      	mov	r1, r3
 8006924:	481a      	ldr	r0, [pc, #104]	@ (8006990 <MX_TIM1_Init+0x120>)
 8006926:	f004 ffbb 	bl	800b8a0 <HAL_TIM_PWM_ConfigChannel>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8006930:	f7ff f93e 	bl	8005bb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006934:	2300      	movs	r3, #0
 8006936:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006938:	2300      	movs	r3, #0
 800693a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800693c:	2300      	movs	r3, #0
 800693e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006944:	2300      	movs	r3, #0
 8006946:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006948:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800694c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8006952:	2300      	movs	r3, #0
 8006954:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006956:	2300      	movs	r3, #0
 8006958:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800695a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800695e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006964:	2300      	movs	r3, #0
 8006966:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006968:	2300      	movs	r3, #0
 800696a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800696c:	1d3b      	adds	r3, r7, #4
 800696e:	4619      	mov	r1, r3
 8006970:	4807      	ldr	r0, [pc, #28]	@ (8006990 <MX_TIM1_Init+0x120>)
 8006972:	f006 f925 	bl	800cbc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800697c:	f7ff f918 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006980:	4803      	ldr	r0, [pc, #12]	@ (8006990 <MX_TIM1_Init+0x120>)
 8006982:	f000 fb77 	bl	8007074 <HAL_TIM_MspPostInit>

}
 8006986:	bf00      	nop
 8006988:	3760      	adds	r7, #96	@ 0x60
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	200018e8 	.word	0x200018e8
 8006994:	40012c00 	.word	0x40012c00

08006998 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800699e:	f107 0310 	add.w	r3, r7, #16
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	605a      	str	r2, [r3, #4]
 80069a8:	609a      	str	r2, [r3, #8]
 80069aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069ac:	1d3b      	adds	r3, r7, #4
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	605a      	str	r2, [r3, #4]
 80069b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80069b6:	4b1e      	ldr	r3, [pc, #120]	@ (8006a30 <MX_TIM2_Init+0x98>)
 80069b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80069bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80069be:	4b1c      	ldr	r3, [pc, #112]	@ (8006a30 <MX_TIM2_Init+0x98>)
 80069c0:	22a9      	movs	r2, #169	@ 0xa9
 80069c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006a30 <MX_TIM2_Init+0x98>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80069ca:	4b19      	ldr	r3, [pc, #100]	@ (8006a30 <MX_TIM2_Init+0x98>)
 80069cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80069d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069d2:	4b17      	ldr	r3, [pc, #92]	@ (8006a30 <MX_TIM2_Init+0x98>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069d8:	4b15      	ldr	r3, [pc, #84]	@ (8006a30 <MX_TIM2_Init+0x98>)
 80069da:	2200      	movs	r2, #0
 80069dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80069de:	4814      	ldr	r0, [pc, #80]	@ (8006a30 <MX_TIM2_Init+0x98>)
 80069e0:	f004 f8ea 	bl	800abb8 <HAL_TIM_Base_Init>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80069ea:	f7ff f8e1 	bl	8005bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80069ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80069f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80069f4:	f107 0310 	add.w	r3, r7, #16
 80069f8:	4619      	mov	r1, r3
 80069fa:	480d      	ldr	r0, [pc, #52]	@ (8006a30 <MX_TIM2_Init+0x98>)
 80069fc:	f005 f864 	bl	800bac8 <HAL_TIM_ConfigClockSource>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006a06:	f7ff f8d3 	bl	8005bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006a12:	1d3b      	adds	r3, r7, #4
 8006a14:	4619      	mov	r1, r3
 8006a16:	4806      	ldr	r0, [pc, #24]	@ (8006a30 <MX_TIM2_Init+0x98>)
 8006a18:	f006 f83c 	bl	800ca94 <HAL_TIMEx_MasterConfigSynchronization>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006a22:	f7ff f8c5 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006a26:	bf00      	nop
 8006a28:	3720      	adds	r7, #32
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	200019b4 	.word	0x200019b4

08006a34 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08c      	sub	sp, #48	@ 0x30
 8006a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006a3a:	f107 030c 	add.w	r3, r7, #12
 8006a3e:	2224      	movs	r2, #36	@ 0x24
 8006a40:	2100      	movs	r1, #0
 8006a42:	4618      	mov	r0, r3
 8006a44:	f008 fd72 	bl	800f52c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a48:	463b      	mov	r3, r7
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	605a      	str	r2, [r3, #4]
 8006a50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006a52:	4b21      	ldr	r3, [pc, #132]	@ (8006ad8 <MX_TIM3_Init+0xa4>)
 8006a54:	4a21      	ldr	r2, [pc, #132]	@ (8006adc <MX_TIM3_Init+0xa8>)
 8006a56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006a58:	4b1f      	ldr	r3, [pc, #124]	@ (8006ad8 <MX_TIM3_Init+0xa4>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ad8 <MX_TIM3_Init+0xa4>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006a64:	4b1c      	ldr	r3, [pc, #112]	@ (8006ad8 <MX_TIM3_Init+0xa4>)
 8006a66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ad8 <MX_TIM3_Init+0xa4>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a72:	4b19      	ldr	r3, [pc, #100]	@ (8006ad8 <MX_TIM3_Init+0xa4>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006a80:	2301      	movs	r3, #1
 8006a82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006a84:	2300      	movs	r3, #0
 8006a86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006a90:	2301      	movs	r3, #1
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006a94:	2300      	movs	r3, #0
 8006a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8006a9c:	f107 030c 	add.w	r3, r7, #12
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	480d      	ldr	r0, [pc, #52]	@ (8006ad8 <MX_TIM3_Init+0xa4>)
 8006aa4:	f004 fc40 	bl	800b328 <HAL_TIM_Encoder_Init>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8006aae:	f7ff f87f 	bl	8005bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006aba:	463b      	mov	r3, r7
 8006abc:	4619      	mov	r1, r3
 8006abe:	4806      	ldr	r0, [pc, #24]	@ (8006ad8 <MX_TIM3_Init+0xa4>)
 8006ac0:	f005 ffe8 	bl	800ca94 <HAL_TIMEx_MasterConfigSynchronization>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8006aca:	f7ff f871 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006ace:	bf00      	nop
 8006ad0:	3730      	adds	r7, #48	@ 0x30
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20001a80 	.word	0x20001a80
 8006adc:	40000400 	.word	0x40000400

08006ae0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08c      	sub	sp, #48	@ 0x30
 8006ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006ae6:	f107 030c 	add.w	r3, r7, #12
 8006aea:	2224      	movs	r2, #36	@ 0x24
 8006aec:	2100      	movs	r1, #0
 8006aee:	4618      	mov	r0, r3
 8006af0:	f008 fd1c 	bl	800f52c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006af4:	463b      	mov	r3, r7
 8006af6:	2200      	movs	r2, #0
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	605a      	str	r2, [r3, #4]
 8006afc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006afe:	4b21      	ldr	r3, [pc, #132]	@ (8006b84 <MX_TIM4_Init+0xa4>)
 8006b00:	4a21      	ldr	r2, [pc, #132]	@ (8006b88 <MX_TIM4_Init+0xa8>)
 8006b02:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006b04:	4b1f      	ldr	r3, [pc, #124]	@ (8006b84 <MX_TIM4_Init+0xa4>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006b84 <MX_TIM4_Init+0xa4>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8006b10:	4b1c      	ldr	r3, [pc, #112]	@ (8006b84 <MX_TIM4_Init+0xa4>)
 8006b12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b16:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b18:	4b1a      	ldr	r3, [pc, #104]	@ (8006b84 <MX_TIM4_Init+0xa4>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b1e:	4b19      	ldr	r3, [pc, #100]	@ (8006b84 <MX_TIM4_Init+0xa4>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006b24:	2303      	movs	r3, #3
 8006b26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006b30:	2300      	movs	r3, #0
 8006b32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006b40:	2300      	movs	r3, #0
 8006b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006b48:	f107 030c 	add.w	r3, r7, #12
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	480d      	ldr	r0, [pc, #52]	@ (8006b84 <MX_TIM4_Init+0xa4>)
 8006b50:	f004 fbea 	bl	800b328 <HAL_TIM_Encoder_Init>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8006b5a:	f7ff f829 	bl	8005bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006b66:	463b      	mov	r3, r7
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4806      	ldr	r0, [pc, #24]	@ (8006b84 <MX_TIM4_Init+0xa4>)
 8006b6c:	f005 ff92 	bl	800ca94 <HAL_TIMEx_MasterConfigSynchronization>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8006b76:	f7ff f81b 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006b7a:	bf00      	nop
 8006b7c:	3730      	adds	r7, #48	@ 0x30
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20001b4c 	.word	0x20001b4c
 8006b88:	40000800 	.word	0x40000800

08006b8c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08c      	sub	sp, #48	@ 0x30
 8006b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006b92:	f107 030c 	add.w	r3, r7, #12
 8006b96:	2224      	movs	r2, #36	@ 0x24
 8006b98:	2100      	movs	r1, #0
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f008 fcc6 	bl	800f52c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ba0:	463b      	mov	r3, r7
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	605a      	str	r2, [r3, #4]
 8006ba8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8006baa:	4b21      	ldr	r3, [pc, #132]	@ (8006c30 <MX_TIM5_Init+0xa4>)
 8006bac:	4a21      	ldr	r2, [pc, #132]	@ (8006c34 <MX_TIM5_Init+0xa8>)
 8006bae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8006bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8006c30 <MX_TIM5_Init+0xa4>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8006c30 <MX_TIM5_Init+0xa4>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8006bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8006c30 <MX_TIM5_Init+0xa4>)
 8006bbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006bc2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8006c30 <MX_TIM5_Init+0xa4>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006bca:	4b19      	ldr	r3, [pc, #100]	@ (8006c30 <MX_TIM5_Init+0xa4>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006be4:	2300      	movs	r3, #0
 8006be6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006be8:	2301      	movs	r3, #1
 8006bea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006bec:	2300      	movs	r3, #0
 8006bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8006bf4:	f107 030c 	add.w	r3, r7, #12
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	480d      	ldr	r0, [pc, #52]	@ (8006c30 <MX_TIM5_Init+0xa4>)
 8006bfc:	f004 fb94 	bl	800b328 <HAL_TIM_Encoder_Init>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8006c06:	f7fe ffd3 	bl	8005bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006c12:	463b      	mov	r3, r7
 8006c14:	4619      	mov	r1, r3
 8006c16:	4806      	ldr	r0, [pc, #24]	@ (8006c30 <MX_TIM5_Init+0xa4>)
 8006c18:	f005 ff3c 	bl	800ca94 <HAL_TIMEx_MasterConfigSynchronization>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8006c22:	f7fe ffc5 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8006c26:	bf00      	nop
 8006c28:	3730      	adds	r7, #48	@ 0x30
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20001c18 	.word	0x20001c18
 8006c34:	40000c00 	.word	0x40000c00

08006c38 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b09c      	sub	sp, #112	@ 0x70
 8006c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006c3e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	605a      	str	r2, [r3, #4]
 8006c48:	609a      	str	r2, [r3, #8]
 8006c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c4c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	605a      	str	r2, [r3, #4]
 8006c56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006c58:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	605a      	str	r2, [r3, #4]
 8006c62:	609a      	str	r2, [r3, #8]
 8006c64:	60da      	str	r2, [r3, #12]
 8006c66:	611a      	str	r2, [r3, #16]
 8006c68:	615a      	str	r2, [r3, #20]
 8006c6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006c6c:	1d3b      	adds	r3, r7, #4
 8006c6e:	2234      	movs	r2, #52	@ 0x34
 8006c70:	2100      	movs	r1, #0
 8006c72:	4618      	mov	r0, r3
 8006c74:	f008 fc5a 	bl	800f52c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006c78:	4b4c      	ldr	r3, [pc, #304]	@ (8006dac <MX_TIM8_Init+0x174>)
 8006c7a:	4a4d      	ldr	r2, [pc, #308]	@ (8006db0 <MX_TIM8_Init+0x178>)
 8006c7c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006c7e:	4b4b      	ldr	r3, [pc, #300]	@ (8006dac <MX_TIM8_Init+0x174>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c84:	4b49      	ldr	r3, [pc, #292]	@ (8006dac <MX_TIM8_Init+0x174>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006c8a:	4b48      	ldr	r3, [pc, #288]	@ (8006dac <MX_TIM8_Init+0x174>)
 8006c8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006c90:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8006c92:	4b46      	ldr	r3, [pc, #280]	@ (8006dac <MX_TIM8_Init+0x174>)
 8006c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c98:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006c9a:	4b44      	ldr	r3, [pc, #272]	@ (8006dac <MX_TIM8_Init+0x174>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ca0:	4b42      	ldr	r3, [pc, #264]	@ (8006dac <MX_TIM8_Init+0x174>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8006ca6:	4841      	ldr	r0, [pc, #260]	@ (8006dac <MX_TIM8_Init+0x174>)
 8006ca8:	f003 ff86 	bl	800abb8 <HAL_TIM_Base_Init>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8006cb2:	f7fe ff7d 	bl	8005bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006cb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006cba:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8006cbc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	483a      	ldr	r0, [pc, #232]	@ (8006dac <MX_TIM8_Init+0x174>)
 8006cc4:	f004 ff00 	bl	800bac8 <HAL_TIM_ConfigClockSource>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8006cce:	f7fe ff6f 	bl	8005bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8006cd2:	4836      	ldr	r0, [pc, #216]	@ (8006dac <MX_TIM8_Init+0x174>)
 8006cd4:	f004 f8bc 	bl	800ae50 <HAL_TIM_PWM_Init>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8006cde:	f7fe ff67 	bl	8005bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006cea:	2300      	movs	r3, #0
 8006cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006cee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	482d      	ldr	r0, [pc, #180]	@ (8006dac <MX_TIM8_Init+0x174>)
 8006cf6:	f005 fecd 	bl	800ca94 <HAL_TIMEx_MasterConfigSynchronization>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8006d00:	f7fe ff56 	bl	8005bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d04:	2360      	movs	r3, #96	@ 0x60
 8006d06:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006d10:	2300      	movs	r3, #0
 8006d12:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006d14:	2300      	movs	r3, #0
 8006d16:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006d20:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006d24:	2200      	movs	r2, #0
 8006d26:	4619      	mov	r1, r3
 8006d28:	4820      	ldr	r0, [pc, #128]	@ (8006dac <MX_TIM8_Init+0x174>)
 8006d2a:	f004 fdb9 	bl	800b8a0 <HAL_TIM_PWM_ConfigChannel>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8006d34:	f7fe ff3c 	bl	8005bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006d38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006d3c:	2204      	movs	r2, #4
 8006d3e:	4619      	mov	r1, r3
 8006d40:	481a      	ldr	r0, [pc, #104]	@ (8006dac <MX_TIM8_Init+0x174>)
 8006d42:	f004 fdad 	bl	800b8a0 <HAL_TIM_PWM_ConfigChannel>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8006d4c:	f7fe ff30 	bl	8005bb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006d50:	2300      	movs	r3, #0
 8006d52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006d54:	2300      	movs	r3, #0
 8006d56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006d60:	2300      	movs	r3, #0
 8006d62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006d64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006d68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006d72:	2300      	movs	r3, #0
 8006d74:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006d76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006d80:	2300      	movs	r3, #0
 8006d82:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006d84:	2300      	movs	r3, #0
 8006d86:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8006d88:	1d3b      	adds	r3, r7, #4
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4807      	ldr	r0, [pc, #28]	@ (8006dac <MX_TIM8_Init+0x174>)
 8006d8e:	f005 ff17 	bl	800cbc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8006d98:	f7fe ff0a 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8006d9c:	4803      	ldr	r0, [pc, #12]	@ (8006dac <MX_TIM8_Init+0x174>)
 8006d9e:	f000 f969 	bl	8007074 <HAL_TIM_MspPostInit>

}
 8006da2:	bf00      	nop
 8006da4:	3770      	adds	r7, #112	@ 0x70
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20001ce4 	.word	0x20001ce4
 8006db0:	40013400 	.word	0x40013400

08006db4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006db8:	4b14      	ldr	r3, [pc, #80]	@ (8006e0c <MX_TIM16_Init+0x58>)
 8006dba:	4a15      	ldr	r2, [pc, #84]	@ (8006e10 <MX_TIM16_Init+0x5c>)
 8006dbc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8006dbe:	4b13      	ldr	r3, [pc, #76]	@ (8006e0c <MX_TIM16_Init+0x58>)
 8006dc0:	22a9      	movs	r2, #169	@ 0xa9
 8006dc2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006dc4:	4b11      	ldr	r3, [pc, #68]	@ (8006e0c <MX_TIM16_Init+0x58>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8006dca:	4b10      	ldr	r3, [pc, #64]	@ (8006e0c <MX_TIM16_Init+0x58>)
 8006dcc:	f240 4279 	movw	r2, #1145	@ 0x479
 8006dd0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8006e0c <MX_TIM16_Init+0x58>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8006e0c <MX_TIM16_Init+0x58>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006dde:	4b0b      	ldr	r3, [pc, #44]	@ (8006e0c <MX_TIM16_Init+0x58>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006de4:	4809      	ldr	r0, [pc, #36]	@ (8006e0c <MX_TIM16_Init+0x58>)
 8006de6:	f003 fee7 	bl	800abb8 <HAL_TIM_Base_Init>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8006df0:	f7fe fede 	bl	8005bb0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8006df4:	2108      	movs	r1, #8
 8006df6:	4805      	ldr	r0, [pc, #20]	@ (8006e0c <MX_TIM16_Init+0x58>)
 8006df8:	f004 f9a0 	bl	800b13c <HAL_TIM_OnePulse_Init>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8006e02:	f7fe fed5 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8006e06:	bf00      	nop
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20001db0 	.word	0x20001db0
 8006e10:	40014400 	.word	0x40014400

08006e14 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a0d      	ldr	r2, [pc, #52]	@ (8006e58 <HAL_TIM_PWM_MspInit+0x44>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d113      	bne.n	8006e4e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006e26:	4b0d      	ldr	r3, [pc, #52]	@ (8006e5c <HAL_TIM_PWM_MspInit+0x48>)
 8006e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e5c <HAL_TIM_PWM_MspInit+0x48>)
 8006e2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006e30:	6613      	str	r3, [r2, #96]	@ 0x60
 8006e32:	4b0a      	ldr	r3, [pc, #40]	@ (8006e5c <HAL_TIM_PWM_MspInit+0x48>)
 8006e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2100      	movs	r1, #0
 8006e42:	2019      	movs	r0, #25
 8006e44:	f002 f957 	bl	80090f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006e48:	2019      	movs	r0, #25
 8006e4a:	f002 f96e 	bl	800912a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8006e4e:	bf00      	nop
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	40012c00 	.word	0x40012c00
 8006e5c:	40021000 	.word	0x40021000

08006e60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e70:	d114      	bne.n	8006e9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006e72:	4b22      	ldr	r3, [pc, #136]	@ (8006efc <HAL_TIM_Base_MspInit+0x9c>)
 8006e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e76:	4a21      	ldr	r2, [pc, #132]	@ (8006efc <HAL_TIM_Base_MspInit+0x9c>)
 8006e78:	f043 0301 	orr.w	r3, r3, #1
 8006e7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8006efc <HAL_TIM_Base_MspInit+0x9c>)
 8006e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	201c      	movs	r0, #28
 8006e90:	f002 f931 	bl	80090f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006e94:	201c      	movs	r0, #28
 8006e96:	f002 f948 	bl	800912a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8006e9a:	e02a      	b.n	8006ef2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a17      	ldr	r2, [pc, #92]	@ (8006f00 <HAL_TIM_Base_MspInit+0xa0>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d10c      	bne.n	8006ec0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006ea6:	4b15      	ldr	r3, [pc, #84]	@ (8006efc <HAL_TIM_Base_MspInit+0x9c>)
 8006ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eaa:	4a14      	ldr	r2, [pc, #80]	@ (8006efc <HAL_TIM_Base_MspInit+0x9c>)
 8006eac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006eb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8006eb2:	4b12      	ldr	r3, [pc, #72]	@ (8006efc <HAL_TIM_Base_MspInit+0x9c>)
 8006eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006eba:	613b      	str	r3, [r7, #16]
 8006ebc:	693b      	ldr	r3, [r7, #16]
}
 8006ebe:	e018      	b.n	8006ef2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8006f04 <HAL_TIM_Base_MspInit+0xa4>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d113      	bne.n	8006ef2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006eca:	4b0c      	ldr	r3, [pc, #48]	@ (8006efc <HAL_TIM_Base_MspInit+0x9c>)
 8006ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ece:	4a0b      	ldr	r2, [pc, #44]	@ (8006efc <HAL_TIM_Base_MspInit+0x9c>)
 8006ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ed4:	6613      	str	r3, [r2, #96]	@ 0x60
 8006ed6:	4b09      	ldr	r3, [pc, #36]	@ (8006efc <HAL_TIM_Base_MspInit+0x9c>)
 8006ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	2019      	movs	r0, #25
 8006ee8:	f002 f905 	bl	80090f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006eec:	2019      	movs	r0, #25
 8006eee:	f002 f91c 	bl	800912a <HAL_NVIC_EnableIRQ>
}
 8006ef2:	bf00      	nop
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	40021000 	.word	0x40021000
 8006f00:	40013400 	.word	0x40013400
 8006f04:	40014400 	.word	0x40014400

08006f08 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08e      	sub	sp, #56	@ 0x38
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	605a      	str	r2, [r3, #4]
 8006f1a:	609a      	str	r2, [r3, #8]
 8006f1c:	60da      	str	r2, [r3, #12]
 8006f1e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a4f      	ldr	r2, [pc, #316]	@ (8007064 <HAL_TIM_Encoder_MspInit+0x15c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d131      	bne.n	8006f8e <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006f2a:	4b4f      	ldr	r3, [pc, #316]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 8006f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f2e:	4a4e      	ldr	r2, [pc, #312]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 8006f30:	f043 0302 	orr.w	r3, r3, #2
 8006f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f36:	4b4c      	ldr	r3, [pc, #304]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 8006f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	623b      	str	r3, [r7, #32]
 8006f40:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f42:	4b49      	ldr	r3, [pc, #292]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 8006f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f46:	4a48      	ldr	r2, [pc, #288]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 8006f48:	f043 0301 	orr.w	r3, r3, #1
 8006f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f4e:	4b46      	ldr	r3, [pc, #280]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 8006f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006f5a:	23c0      	movs	r3, #192	@ 0xc0
 8006f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f5e:	2302      	movs	r3, #2
 8006f60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f66:	2300      	movs	r3, #0
 8006f68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f72:	4619      	mov	r1, r3
 8006f74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006f78:	f002 fc24 	bl	80097c4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2100      	movs	r1, #0
 8006f80:	201d      	movs	r0, #29
 8006f82:	f002 f8b8 	bl	80090f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006f86:	201d      	movs	r0, #29
 8006f88:	f002 f8cf 	bl	800912a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8006f8c:	e065      	b.n	800705a <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a36      	ldr	r2, [pc, #216]	@ (800706c <HAL_TIM_Encoder_MspInit+0x164>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d132      	bne.n	8006ffe <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006f98:	4b33      	ldr	r3, [pc, #204]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 8006f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f9c:	4a32      	ldr	r2, [pc, #200]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 8006f9e:	f043 0304 	orr.w	r3, r3, #4
 8006fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fa4:	4b30      	ldr	r3, [pc, #192]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 8006fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	61bb      	str	r3, [r7, #24]
 8006fae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 8006fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 8006fb6:	f043 0301 	orr.w	r3, r3, #1
 8006fba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 8006fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	617b      	str	r3, [r7, #20]
 8006fc6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006fc8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fce:	2302      	movs	r3, #2
 8006fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8006fda:	230a      	movs	r3, #10
 8006fdc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006fe8:	f002 fbec 	bl	80097c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006fec:	2200      	movs	r2, #0
 8006fee:	2100      	movs	r1, #0
 8006ff0:	201e      	movs	r0, #30
 8006ff2:	f002 f880 	bl	80090f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006ff6:	201e      	movs	r0, #30
 8006ff8:	f002 f897 	bl	800912a <HAL_NVIC_EnableIRQ>
}
 8006ffc:	e02d      	b.n	800705a <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a1b      	ldr	r2, [pc, #108]	@ (8007070 <HAL_TIM_Encoder_MspInit+0x168>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d128      	bne.n	800705a <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007008:	4b17      	ldr	r3, [pc, #92]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 800700a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700c:	4a16      	ldr	r2, [pc, #88]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 800700e:	f043 0308 	orr.w	r3, r3, #8
 8007012:	6593      	str	r3, [r2, #88]	@ 0x58
 8007014:	4b14      	ldr	r3, [pc, #80]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 8007016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007018:	f003 0308 	and.w	r3, r3, #8
 800701c:	613b      	str	r3, [r7, #16]
 800701e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007020:	4b11      	ldr	r3, [pc, #68]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 8007022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007024:	4a10      	ldr	r2, [pc, #64]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 8007026:	f043 0301 	orr.w	r3, r3, #1
 800702a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800702c:	4b0e      	ldr	r3, [pc, #56]	@ (8007068 <HAL_TIM_Encoder_MspInit+0x160>)
 800702e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007038:	2303      	movs	r3, #3
 800703a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800703c:	2302      	movs	r3, #2
 800703e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007040:	2300      	movs	r3, #0
 8007042:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007044:	2300      	movs	r3, #0
 8007046:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8007048:	2302      	movs	r3, #2
 800704a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800704c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007050:	4619      	mov	r1, r3
 8007052:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007056:	f002 fbb5 	bl	80097c4 <HAL_GPIO_Init>
}
 800705a:	bf00      	nop
 800705c:	3738      	adds	r7, #56	@ 0x38
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	40000400 	.word	0x40000400
 8007068:	40021000 	.word	0x40021000
 800706c:	40000800 	.word	0x40000800
 8007070:	40000c00 	.word	0x40000c00

08007074 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b08a      	sub	sp, #40	@ 0x28
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800707c:	f107 0314 	add.w	r3, r7, #20
 8007080:	2200      	movs	r2, #0
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	605a      	str	r2, [r3, #4]
 8007086:	609a      	str	r2, [r3, #8]
 8007088:	60da      	str	r2, [r3, #12]
 800708a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a22      	ldr	r2, [pc, #136]	@ (800711c <HAL_TIM_MspPostInit+0xa8>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d11c      	bne.n	80070d0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007096:	4b22      	ldr	r3, [pc, #136]	@ (8007120 <HAL_TIM_MspPostInit+0xac>)
 8007098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800709a:	4a21      	ldr	r2, [pc, #132]	@ (8007120 <HAL_TIM_MspPostInit+0xac>)
 800709c:	f043 0304 	orr.w	r3, r3, #4
 80070a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80070a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007120 <HAL_TIM_MspPostInit+0xac>)
 80070a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070a6:	f003 0304 	and.w	r3, r3, #4
 80070aa:	613b      	str	r3, [r7, #16]
 80070ac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80070ae:	2308      	movs	r3, #8
 80070b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b2:	2302      	movs	r3, #2
 80070b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070ba:	2300      	movs	r3, #0
 80070bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80070be:	2302      	movs	r3, #2
 80070c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070c2:	f107 0314 	add.w	r3, r7, #20
 80070c6:	4619      	mov	r1, r3
 80070c8:	4816      	ldr	r0, [pc, #88]	@ (8007124 <HAL_TIM_MspPostInit+0xb0>)
 80070ca:	f002 fb7b 	bl	80097c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80070ce:	e020      	b.n	8007112 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a14      	ldr	r2, [pc, #80]	@ (8007128 <HAL_TIM_MspPostInit+0xb4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d11b      	bne.n	8007112 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070da:	4b11      	ldr	r3, [pc, #68]	@ (8007120 <HAL_TIM_MspPostInit+0xac>)
 80070dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070de:	4a10      	ldr	r2, [pc, #64]	@ (8007120 <HAL_TIM_MspPostInit+0xac>)
 80070e0:	f043 0304 	orr.w	r3, r3, #4
 80070e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80070e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007120 <HAL_TIM_MspPostInit+0xac>)
 80070e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ea:	f003 0304 	and.w	r3, r3, #4
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80070f2:	23c0      	movs	r3, #192	@ 0xc0
 80070f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070f6:	2302      	movs	r3, #2
 80070f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070fe:	2300      	movs	r3, #0
 8007100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8007102:	2304      	movs	r3, #4
 8007104:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007106:	f107 0314 	add.w	r3, r7, #20
 800710a:	4619      	mov	r1, r3
 800710c:	4805      	ldr	r0, [pc, #20]	@ (8007124 <HAL_TIM_MspPostInit+0xb0>)
 800710e:	f002 fb59 	bl	80097c4 <HAL_GPIO_Init>
}
 8007112:	bf00      	nop
 8007114:	3728      	adds	r7, #40	@ 0x28
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	40012c00 	.word	0x40012c00
 8007120:	40021000 	.word	0x40021000
 8007124:	48000800 	.word	0x48000800
 8007128:	40013400 	.word	0x40013400

0800712c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8007130:	4b20      	ldr	r3, [pc, #128]	@ (80071b4 <MX_LPUART1_UART_Init+0x88>)
 8007132:	4a21      	ldr	r2, [pc, #132]	@ (80071b8 <MX_LPUART1_UART_Init+0x8c>)
 8007134:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8007136:	4b1f      	ldr	r3, [pc, #124]	@ (80071b4 <MX_LPUART1_UART_Init+0x88>)
 8007138:	4a20      	ldr	r2, [pc, #128]	@ (80071bc <MX_LPUART1_UART_Init+0x90>)
 800713a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800713c:	4b1d      	ldr	r3, [pc, #116]	@ (80071b4 <MX_LPUART1_UART_Init+0x88>)
 800713e:	2200      	movs	r2, #0
 8007140:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8007142:	4b1c      	ldr	r3, [pc, #112]	@ (80071b4 <MX_LPUART1_UART_Init+0x88>)
 8007144:	2200      	movs	r2, #0
 8007146:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8007148:	4b1a      	ldr	r3, [pc, #104]	@ (80071b4 <MX_LPUART1_UART_Init+0x88>)
 800714a:	2200      	movs	r2, #0
 800714c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800714e:	4b19      	ldr	r3, [pc, #100]	@ (80071b4 <MX_LPUART1_UART_Init+0x88>)
 8007150:	220c      	movs	r2, #12
 8007152:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007154:	4b17      	ldr	r3, [pc, #92]	@ (80071b4 <MX_LPUART1_UART_Init+0x88>)
 8007156:	2200      	movs	r2, #0
 8007158:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800715a:	4b16      	ldr	r3, [pc, #88]	@ (80071b4 <MX_LPUART1_UART_Init+0x88>)
 800715c:	2200      	movs	r2, #0
 800715e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007160:	4b14      	ldr	r3, [pc, #80]	@ (80071b4 <MX_LPUART1_UART_Init+0x88>)
 8007162:	2200      	movs	r2, #0
 8007164:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007166:	4b13      	ldr	r3, [pc, #76]	@ (80071b4 <MX_LPUART1_UART_Init+0x88>)
 8007168:	2200      	movs	r2, #0
 800716a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800716c:	4811      	ldr	r0, [pc, #68]	@ (80071b4 <MX_LPUART1_UART_Init+0x88>)
 800716e:	f005 fe0b 	bl	800cd88 <HAL_UART_Init>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8007178:	f7fe fd1a 	bl	8005bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800717c:	2100      	movs	r1, #0
 800717e:	480d      	ldr	r0, [pc, #52]	@ (80071b4 <MX_LPUART1_UART_Init+0x88>)
 8007180:	f007 fb5e 	bl	800e840 <HAL_UARTEx_SetTxFifoThreshold>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800718a:	f7fe fd11 	bl	8005bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800718e:	2100      	movs	r1, #0
 8007190:	4808      	ldr	r0, [pc, #32]	@ (80071b4 <MX_LPUART1_UART_Init+0x88>)
 8007192:	f007 fb93 	bl	800e8bc <HAL_UARTEx_SetRxFifoThreshold>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800719c:	f7fe fd08 	bl	8005bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80071a0:	4804      	ldr	r0, [pc, #16]	@ (80071b4 <MX_LPUART1_UART_Init+0x88>)
 80071a2:	f007 fb14 	bl	800e7ce <HAL_UARTEx_DisableFifoMode>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80071ac:	f7fe fd00 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80071b0:	bf00      	nop
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20001e7c 	.word	0x20001e7c
 80071b8:	40008000 	.word	0x40008000
 80071bc:	001e8480 	.word	0x001e8480

080071c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80071c4:	4b23      	ldr	r3, [pc, #140]	@ (8007254 <MX_USART2_UART_Init+0x94>)
 80071c6:	4a24      	ldr	r2, [pc, #144]	@ (8007258 <MX_USART2_UART_Init+0x98>)
 80071c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80071ca:	4b22      	ldr	r3, [pc, #136]	@ (8007254 <MX_USART2_UART_Init+0x94>)
 80071cc:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80071d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80071d2:	4b20      	ldr	r3, [pc, #128]	@ (8007254 <MX_USART2_UART_Init+0x94>)
 80071d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80071d8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80071da:	4b1e      	ldr	r3, [pc, #120]	@ (8007254 <MX_USART2_UART_Init+0x94>)
 80071dc:	2200      	movs	r2, #0
 80071de:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80071e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007254 <MX_USART2_UART_Init+0x94>)
 80071e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80071e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80071e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007254 <MX_USART2_UART_Init+0x94>)
 80071ea:	220c      	movs	r2, #12
 80071ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80071ee:	4b19      	ldr	r3, [pc, #100]	@ (8007254 <MX_USART2_UART_Init+0x94>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80071f4:	4b17      	ldr	r3, [pc, #92]	@ (8007254 <MX_USART2_UART_Init+0x94>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80071fa:	4b16      	ldr	r3, [pc, #88]	@ (8007254 <MX_USART2_UART_Init+0x94>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007200:	4b14      	ldr	r3, [pc, #80]	@ (8007254 <MX_USART2_UART_Init+0x94>)
 8007202:	2200      	movs	r2, #0
 8007204:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007206:	4b13      	ldr	r3, [pc, #76]	@ (8007254 <MX_USART2_UART_Init+0x94>)
 8007208:	2200      	movs	r2, #0
 800720a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800720c:	4811      	ldr	r0, [pc, #68]	@ (8007254 <MX_USART2_UART_Init+0x94>)
 800720e:	f005 fdbb 	bl	800cd88 <HAL_UART_Init>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d001      	beq.n	800721c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8007218:	f7fe fcca 	bl	8005bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800721c:	2100      	movs	r1, #0
 800721e:	480d      	ldr	r0, [pc, #52]	@ (8007254 <MX_USART2_UART_Init+0x94>)
 8007220:	f007 fb0e 	bl	800e840 <HAL_UARTEx_SetTxFifoThreshold>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800722a:	f7fe fcc1 	bl	8005bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800722e:	2100      	movs	r1, #0
 8007230:	4808      	ldr	r0, [pc, #32]	@ (8007254 <MX_USART2_UART_Init+0x94>)
 8007232:	f007 fb43 	bl	800e8bc <HAL_UARTEx_SetRxFifoThreshold>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800723c:	f7fe fcb8 	bl	8005bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8007240:	4804      	ldr	r0, [pc, #16]	@ (8007254 <MX_USART2_UART_Init+0x94>)
 8007242:	f007 fac4 	bl	800e7ce <HAL_UARTEx_DisableFifoMode>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800724c:	f7fe fcb0 	bl	8005bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007250:	bf00      	nop
 8007252:	bd80      	pop	{r7, pc}
 8007254:	20001f48 	.word	0x20001f48
 8007258:	40004400 	.word	0x40004400

0800725c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b0a0      	sub	sp, #128	@ 0x80
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007264:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007268:	2200      	movs	r2, #0
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	605a      	str	r2, [r3, #4]
 800726e:	609a      	str	r2, [r3, #8]
 8007270:	60da      	str	r2, [r3, #12]
 8007272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007274:	f107 0318 	add.w	r3, r7, #24
 8007278:	2254      	movs	r2, #84	@ 0x54
 800727a:	2100      	movs	r1, #0
 800727c:	4618      	mov	r0, r3
 800727e:	f008 f955 	bl	800f52c <memset>
  if(uartHandle->Instance==LPUART1)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a99      	ldr	r2, [pc, #612]	@ (80074ec <HAL_UART_MspInit+0x290>)
 8007288:	4293      	cmp	r3, r2
 800728a:	f040 8093 	bne.w	80073b4 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800728e:	2320      	movs	r3, #32
 8007290:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007292:	2300      	movs	r3, #0
 8007294:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007296:	f107 0318 	add.w	r3, r7, #24
 800729a:	4618      	mov	r0, r3
 800729c:	f003 fa3e 	bl	800a71c <HAL_RCCEx_PeriphCLKConfig>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80072a6:	f7fe fc83 	bl	8005bb0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80072aa:	4b91      	ldr	r3, [pc, #580]	@ (80074f0 <HAL_UART_MspInit+0x294>)
 80072ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ae:	4a90      	ldr	r2, [pc, #576]	@ (80074f0 <HAL_UART_MspInit+0x294>)
 80072b0:	f043 0301 	orr.w	r3, r3, #1
 80072b4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80072b6:	4b8e      	ldr	r3, [pc, #568]	@ (80074f0 <HAL_UART_MspInit+0x294>)
 80072b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072c2:	4b8b      	ldr	r3, [pc, #556]	@ (80074f0 <HAL_UART_MspInit+0x294>)
 80072c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072c6:	4a8a      	ldr	r2, [pc, #552]	@ (80074f0 <HAL_UART_MspInit+0x294>)
 80072c8:	f043 0302 	orr.w	r3, r3, #2
 80072cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072ce:	4b88      	ldr	r3, [pc, #544]	@ (80074f0 <HAL_UART_MspInit+0x294>)
 80072d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	613b      	str	r3, [r7, #16]
 80072d8:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80072da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80072de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072e0:	2302      	movs	r3, #2
 80072e2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e4:	2300      	movs	r3, #0
 80072e6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072e8:	2300      	movs	r3, #0
 80072ea:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80072ec:	2308      	movs	r3, #8
 80072ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072f0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80072f4:	4619      	mov	r1, r3
 80072f6:	487f      	ldr	r0, [pc, #508]	@ (80074f4 <HAL_UART_MspInit+0x298>)
 80072f8:	f002 fa64 	bl	80097c4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 80072fc:	4b7e      	ldr	r3, [pc, #504]	@ (80074f8 <HAL_UART_MspInit+0x29c>)
 80072fe:	4a7f      	ldr	r2, [pc, #508]	@ (80074fc <HAL_UART_MspInit+0x2a0>)
 8007300:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8007302:	4b7d      	ldr	r3, [pc, #500]	@ (80074f8 <HAL_UART_MspInit+0x29c>)
 8007304:	2222      	movs	r2, #34	@ 0x22
 8007306:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007308:	4b7b      	ldr	r3, [pc, #492]	@ (80074f8 <HAL_UART_MspInit+0x29c>)
 800730a:	2200      	movs	r2, #0
 800730c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800730e:	4b7a      	ldr	r3, [pc, #488]	@ (80074f8 <HAL_UART_MspInit+0x29c>)
 8007310:	2200      	movs	r2, #0
 8007312:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007314:	4b78      	ldr	r3, [pc, #480]	@ (80074f8 <HAL_UART_MspInit+0x29c>)
 8007316:	2280      	movs	r2, #128	@ 0x80
 8007318:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800731a:	4b77      	ldr	r3, [pc, #476]	@ (80074f8 <HAL_UART_MspInit+0x29c>)
 800731c:	2200      	movs	r2, #0
 800731e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007320:	4b75      	ldr	r3, [pc, #468]	@ (80074f8 <HAL_UART_MspInit+0x29c>)
 8007322:	2200      	movs	r2, #0
 8007324:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8007326:	4b74      	ldr	r3, [pc, #464]	@ (80074f8 <HAL_UART_MspInit+0x29c>)
 8007328:	2200      	movs	r2, #0
 800732a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800732c:	4b72      	ldr	r3, [pc, #456]	@ (80074f8 <HAL_UART_MspInit+0x29c>)
 800732e:	2200      	movs	r2, #0
 8007330:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8007332:	4871      	ldr	r0, [pc, #452]	@ (80074f8 <HAL_UART_MspInit+0x29c>)
 8007334:	f001 ff14 	bl	8009160 <HAL_DMA_Init>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800733e:	f7fe fc37 	bl	8005bb0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a6c      	ldr	r2, [pc, #432]	@ (80074f8 <HAL_UART_MspInit+0x29c>)
 8007346:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800734a:	4a6b      	ldr	r2, [pc, #428]	@ (80074f8 <HAL_UART_MspInit+0x29c>)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8007350:	4b6b      	ldr	r3, [pc, #428]	@ (8007500 <HAL_UART_MspInit+0x2a4>)
 8007352:	4a6c      	ldr	r2, [pc, #432]	@ (8007504 <HAL_UART_MspInit+0x2a8>)
 8007354:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8007356:	4b6a      	ldr	r3, [pc, #424]	@ (8007500 <HAL_UART_MspInit+0x2a4>)
 8007358:	2223      	movs	r2, #35	@ 0x23
 800735a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800735c:	4b68      	ldr	r3, [pc, #416]	@ (8007500 <HAL_UART_MspInit+0x2a4>)
 800735e:	2210      	movs	r2, #16
 8007360:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007362:	4b67      	ldr	r3, [pc, #412]	@ (8007500 <HAL_UART_MspInit+0x2a4>)
 8007364:	2200      	movs	r2, #0
 8007366:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007368:	4b65      	ldr	r3, [pc, #404]	@ (8007500 <HAL_UART_MspInit+0x2a4>)
 800736a:	2280      	movs	r2, #128	@ 0x80
 800736c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800736e:	4b64      	ldr	r3, [pc, #400]	@ (8007500 <HAL_UART_MspInit+0x2a4>)
 8007370:	2200      	movs	r2, #0
 8007372:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007374:	4b62      	ldr	r3, [pc, #392]	@ (8007500 <HAL_UART_MspInit+0x2a4>)
 8007376:	2200      	movs	r2, #0
 8007378:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800737a:	4b61      	ldr	r3, [pc, #388]	@ (8007500 <HAL_UART_MspInit+0x2a4>)
 800737c:	2200      	movs	r2, #0
 800737e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007380:	4b5f      	ldr	r3, [pc, #380]	@ (8007500 <HAL_UART_MspInit+0x2a4>)
 8007382:	2200      	movs	r2, #0
 8007384:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8007386:	485e      	ldr	r0, [pc, #376]	@ (8007500 <HAL_UART_MspInit+0x2a4>)
 8007388:	f001 feea 	bl	8009160 <HAL_DMA_Init>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8007392:	f7fe fc0d 	bl	8005bb0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a59      	ldr	r2, [pc, #356]	@ (8007500 <HAL_UART_MspInit+0x2a4>)
 800739a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800739c:	4a58      	ldr	r2, [pc, #352]	@ (8007500 <HAL_UART_MspInit+0x2a4>)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80073a2:	2200      	movs	r2, #0
 80073a4:	2100      	movs	r1, #0
 80073a6:	205b      	movs	r0, #91	@ 0x5b
 80073a8:	f001 fea5 	bl	80090f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80073ac:	205b      	movs	r0, #91	@ 0x5b
 80073ae:	f001 febc 	bl	800912a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80073b2:	e097      	b.n	80074e4 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a53      	ldr	r2, [pc, #332]	@ (8007508 <HAL_UART_MspInit+0x2ac>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	f040 8092 	bne.w	80074e4 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80073c0:	2302      	movs	r3, #2
 80073c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80073c4:	2300      	movs	r3, #0
 80073c6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80073c8:	f107 0318 	add.w	r3, r7, #24
 80073cc:	4618      	mov	r0, r3
 80073ce:	f003 f9a5 	bl	800a71c <HAL_RCCEx_PeriphCLKConfig>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <HAL_UART_MspInit+0x180>
      Error_Handler();
 80073d8:	f7fe fbea 	bl	8005bb0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80073dc:	4b44      	ldr	r3, [pc, #272]	@ (80074f0 <HAL_UART_MspInit+0x294>)
 80073de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073e0:	4a43      	ldr	r2, [pc, #268]	@ (80074f0 <HAL_UART_MspInit+0x294>)
 80073e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80073e8:	4b41      	ldr	r3, [pc, #260]	@ (80074f0 <HAL_UART_MspInit+0x294>)
 80073ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073f0:	60fb      	str	r3, [r7, #12]
 80073f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073f4:	4b3e      	ldr	r3, [pc, #248]	@ (80074f0 <HAL_UART_MspInit+0x294>)
 80073f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073f8:	4a3d      	ldr	r2, [pc, #244]	@ (80074f0 <HAL_UART_MspInit+0x294>)
 80073fa:	f043 0301 	orr.w	r3, r3, #1
 80073fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007400:	4b3b      	ldr	r3, [pc, #236]	@ (80074f0 <HAL_UART_MspInit+0x294>)
 8007402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	60bb      	str	r3, [r7, #8]
 800740a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800740c:	230c      	movs	r3, #12
 800740e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007410:	2302      	movs	r3, #2
 8007412:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007414:	2300      	movs	r3, #0
 8007416:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007418:	2300      	movs	r3, #0
 800741a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800741c:	2307      	movs	r3, #7
 800741e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007420:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007424:	4619      	mov	r1, r3
 8007426:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800742a:	f002 f9cb 	bl	80097c4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800742e:	4b37      	ldr	r3, [pc, #220]	@ (800750c <HAL_UART_MspInit+0x2b0>)
 8007430:	4a37      	ldr	r2, [pc, #220]	@ (8007510 <HAL_UART_MspInit+0x2b4>)
 8007432:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8007434:	4b35      	ldr	r3, [pc, #212]	@ (800750c <HAL_UART_MspInit+0x2b0>)
 8007436:	221a      	movs	r2, #26
 8007438:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800743a:	4b34      	ldr	r3, [pc, #208]	@ (800750c <HAL_UART_MspInit+0x2b0>)
 800743c:	2200      	movs	r2, #0
 800743e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007440:	4b32      	ldr	r3, [pc, #200]	@ (800750c <HAL_UART_MspInit+0x2b0>)
 8007442:	2200      	movs	r2, #0
 8007444:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007446:	4b31      	ldr	r3, [pc, #196]	@ (800750c <HAL_UART_MspInit+0x2b0>)
 8007448:	2280      	movs	r2, #128	@ 0x80
 800744a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800744c:	4b2f      	ldr	r3, [pc, #188]	@ (800750c <HAL_UART_MspInit+0x2b0>)
 800744e:	2200      	movs	r2, #0
 8007450:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007452:	4b2e      	ldr	r3, [pc, #184]	@ (800750c <HAL_UART_MspInit+0x2b0>)
 8007454:	2200      	movs	r2, #0
 8007456:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8007458:	4b2c      	ldr	r3, [pc, #176]	@ (800750c <HAL_UART_MspInit+0x2b0>)
 800745a:	2200      	movs	r2, #0
 800745c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800745e:	4b2b      	ldr	r3, [pc, #172]	@ (800750c <HAL_UART_MspInit+0x2b0>)
 8007460:	2200      	movs	r2, #0
 8007462:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007464:	4829      	ldr	r0, [pc, #164]	@ (800750c <HAL_UART_MspInit+0x2b0>)
 8007466:	f001 fe7b 	bl	8009160 <HAL_DMA_Init>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8007470:	f7fe fb9e 	bl	8005bb0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a25      	ldr	r2, [pc, #148]	@ (800750c <HAL_UART_MspInit+0x2b0>)
 8007478:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800747c:	4a23      	ldr	r2, [pc, #140]	@ (800750c <HAL_UART_MspInit+0x2b0>)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8007482:	4b24      	ldr	r3, [pc, #144]	@ (8007514 <HAL_UART_MspInit+0x2b8>)
 8007484:	4a24      	ldr	r2, [pc, #144]	@ (8007518 <HAL_UART_MspInit+0x2bc>)
 8007486:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8007488:	4b22      	ldr	r3, [pc, #136]	@ (8007514 <HAL_UART_MspInit+0x2b8>)
 800748a:	221b      	movs	r2, #27
 800748c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800748e:	4b21      	ldr	r3, [pc, #132]	@ (8007514 <HAL_UART_MspInit+0x2b8>)
 8007490:	2210      	movs	r2, #16
 8007492:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007494:	4b1f      	ldr	r3, [pc, #124]	@ (8007514 <HAL_UART_MspInit+0x2b8>)
 8007496:	2200      	movs	r2, #0
 8007498:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800749a:	4b1e      	ldr	r3, [pc, #120]	@ (8007514 <HAL_UART_MspInit+0x2b8>)
 800749c:	2280      	movs	r2, #128	@ 0x80
 800749e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80074a0:	4b1c      	ldr	r3, [pc, #112]	@ (8007514 <HAL_UART_MspInit+0x2b8>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80074a6:	4b1b      	ldr	r3, [pc, #108]	@ (8007514 <HAL_UART_MspInit+0x2b8>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80074ac:	4b19      	ldr	r3, [pc, #100]	@ (8007514 <HAL_UART_MspInit+0x2b8>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80074b2:	4b18      	ldr	r3, [pc, #96]	@ (8007514 <HAL_UART_MspInit+0x2b8>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80074b8:	4816      	ldr	r0, [pc, #88]	@ (8007514 <HAL_UART_MspInit+0x2b8>)
 80074ba:	f001 fe51 	bl	8009160 <HAL_DMA_Init>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 80074c4:	f7fe fb74 	bl	8005bb0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a12      	ldr	r2, [pc, #72]	@ (8007514 <HAL_UART_MspInit+0x2b8>)
 80074cc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80074ce:	4a11      	ldr	r2, [pc, #68]	@ (8007514 <HAL_UART_MspInit+0x2b8>)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80074d4:	2200      	movs	r2, #0
 80074d6:	2100      	movs	r1, #0
 80074d8:	2026      	movs	r0, #38	@ 0x26
 80074da:	f001 fe0c 	bl	80090f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80074de:	2026      	movs	r0, #38	@ 0x26
 80074e0:	f001 fe23 	bl	800912a <HAL_NVIC_EnableIRQ>
}
 80074e4:	bf00      	nop
 80074e6:	3780      	adds	r7, #128	@ 0x80
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	40008000 	.word	0x40008000
 80074f0:	40021000 	.word	0x40021000
 80074f4:	48000400 	.word	0x48000400
 80074f8:	20002014 	.word	0x20002014
 80074fc:	40020044 	.word	0x40020044
 8007500:	20002074 	.word	0x20002074
 8007504:	40020058 	.word	0x40020058
 8007508:	40004400 	.word	0x40004400
 800750c:	200020d4 	.word	0x200020d4
 8007510:	4002001c 	.word	0x4002001c
 8007514:	20002134 	.word	0x20002134
 8007518:	40020030 	.word	0x40020030

0800751c <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 800751c:	480d      	ldr	r0, [pc, #52]	@ (8007554 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800751e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007520:	f7ff f994 	bl	800684c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007524:	480c      	ldr	r0, [pc, #48]	@ (8007558 <LoopForever+0x6>)
  ldr r1, =_edata
 8007526:	490d      	ldr	r1, [pc, #52]	@ (800755c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007528:	4a0d      	ldr	r2, [pc, #52]	@ (8007560 <LoopForever+0xe>)
  movs r3, #0
 800752a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800752c:	e002      	b.n	8007534 <LoopCopyDataInit>

0800752e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800752e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007532:	3304      	adds	r3, #4

08007534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007538:	d3f9      	bcc.n	800752e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800753a:	4a0a      	ldr	r2, [pc, #40]	@ (8007564 <LoopForever+0x12>)
  ldr r4, =_ebss
 800753c:	4c0a      	ldr	r4, [pc, #40]	@ (8007568 <LoopForever+0x16>)
  movs r3, #0
 800753e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007540:	e001      	b.n	8007546 <LoopFillZerobss>

08007542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007544:	3204      	adds	r2, #4

08007546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007548:	d3fb      	bcc.n	8007542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800754a:	f008 f80d 	bl	800f568 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800754e:	f7fd fc47 	bl	8004de0 <main>

08007552 <LoopForever>:

LoopForever:
    b LoopForever
 8007552:	e7fe      	b.n	8007552 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8007554:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800755c:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8007560:	08011a68 	.word	0x08011a68
  ldr r2, =_sbss
 8007564:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8007568:	200022e0 	.word	0x200022e0

0800756c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800756c:	e7fe      	b.n	800756c <ADC1_2_IRQHandler>

0800756e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b082      	sub	sp, #8
 8007572:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007578:	2003      	movs	r0, #3
 800757a:	f001 fdb1 	bl	80090e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800757e:	2000      	movs	r0, #0
 8007580:	f000 f80e 	bl	80075a0 <HAL_InitTick>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	71fb      	strb	r3, [r7, #7]
 800758e:	e001      	b.n	8007594 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007590:	f7ff f83e 	bl	8006610 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007594:	79fb      	ldrb	r3, [r7, #7]

}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
	...

080075a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80075ac:	4b16      	ldr	r3, [pc, #88]	@ (8007608 <HAL_InitTick+0x68>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d022      	beq.n	80075fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80075b4:	4b15      	ldr	r3, [pc, #84]	@ (800760c <HAL_InitTick+0x6c>)
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	4b13      	ldr	r3, [pc, #76]	@ (8007608 <HAL_InitTick+0x68>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80075c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80075c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 fdbc 	bl	8009146 <HAL_SYSTICK_Config>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10f      	bne.n	80075f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b0f      	cmp	r3, #15
 80075d8:	d809      	bhi.n	80075ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80075da:	2200      	movs	r2, #0
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	f04f 30ff 	mov.w	r0, #4294967295
 80075e2:	f001 fd88 	bl	80090f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80075e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007610 <HAL_InitTick+0x70>)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	e007      	b.n	80075fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	73fb      	strb	r3, [r7, #15]
 80075f2:	e004      	b.n	80075fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	73fb      	strb	r3, [r7, #15]
 80075f8:	e001      	b.n	80075fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	2000013c 	.word	0x2000013c
 800760c:	20000134 	.word	0x20000134
 8007610:	20000138 	.word	0x20000138

08007614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007614:	b480      	push	{r7}
 8007616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007618:	4b05      	ldr	r3, [pc, #20]	@ (8007630 <HAL_IncTick+0x1c>)
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	4b05      	ldr	r3, [pc, #20]	@ (8007634 <HAL_IncTick+0x20>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4413      	add	r3, r2
 8007622:	4a03      	ldr	r2, [pc, #12]	@ (8007630 <HAL_IncTick+0x1c>)
 8007624:	6013      	str	r3, [r2, #0]
}
 8007626:	bf00      	nop
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	20002194 	.word	0x20002194
 8007634:	2000013c 	.word	0x2000013c

08007638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007638:	b480      	push	{r7}
 800763a:	af00      	add	r7, sp, #0
  return uwTick;
 800763c:	4b03      	ldr	r3, [pc, #12]	@ (800764c <HAL_GetTick+0x14>)
 800763e:	681b      	ldr	r3, [r3, #0]
}
 8007640:	4618      	mov	r0, r3
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20002194 	.word	0x20002194

08007650 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	431a      	orrs	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	609a      	str	r2, [r3, #8]
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	431a      	orrs	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	609a      	str	r2, [r3, #8]
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
 80076c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3360      	adds	r3, #96	@ 0x60
 80076ca:	461a      	mov	r2, r3
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	4b08      	ldr	r3, [pc, #32]	@ (80076fc <LL_ADC_SetOffset+0x44>)
 80076da:	4013      	ands	r3, r2
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	430a      	orrs	r2, r1
 80076e6:	4313      	orrs	r3, r2
 80076e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80076f0:	bf00      	nop
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	03fff000 	.word	0x03fff000

08007700 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3360      	adds	r3, #96	@ 0x60
 800770e:	461a      	mov	r2, r3
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8007720:	4618      	mov	r0, r3
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800772c:	b480      	push	{r7}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3360      	adds	r3, #96	@ 0x60
 800773c:	461a      	mov	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	431a      	orrs	r2, r3
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007756:	bf00      	nop
 8007758:	371c      	adds	r7, #28
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007762:	b480      	push	{r7}
 8007764:	b087      	sub	sp, #28
 8007766:	af00      	add	r7, sp, #0
 8007768:	60f8      	str	r0, [r7, #12]
 800776a:	60b9      	str	r1, [r7, #8]
 800776c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3360      	adds	r3, #96	@ 0x60
 8007772:	461a      	mov	r2, r3
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	431a      	orrs	r2, r3
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800778c:	bf00      	nop
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3360      	adds	r3, #96	@ 0x60
 80077a8:	461a      	mov	r2, r3
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	431a      	orrs	r2, r3
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80077c2:	bf00      	nop
 80077c4:	371c      	adds	r7, #28
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	615a      	str	r2, [r3, #20]
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007808:	2301      	movs	r3, #1
 800780a:	e000      	b.n	800780e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800781a:	b480      	push	{r7}
 800781c:	b087      	sub	sp, #28
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3330      	adds	r3, #48	@ 0x30
 800782a:	461a      	mov	r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	0a1b      	lsrs	r3, r3, #8
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	f003 030c 	and.w	r3, r3, #12
 8007836:	4413      	add	r3, r2
 8007838:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	f003 031f 	and.w	r3, r3, #31
 8007844:	211f      	movs	r1, #31
 8007846:	fa01 f303 	lsl.w	r3, r1, r3
 800784a:	43db      	mvns	r3, r3
 800784c:	401a      	ands	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	0e9b      	lsrs	r3, r3, #26
 8007852:	f003 011f 	and.w	r1, r3, #31
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	f003 031f 	and.w	r3, r3, #31
 800785c:	fa01 f303 	lsl.w	r3, r1, r3
 8007860:	431a      	orrs	r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007866:	bf00      	nop
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007872:	b480      	push	{r7}
 8007874:	b087      	sub	sp, #28
 8007876:	af00      	add	r7, sp, #0
 8007878:	60f8      	str	r0, [r7, #12]
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3314      	adds	r3, #20
 8007882:	461a      	mov	r2, r3
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	0e5b      	lsrs	r3, r3, #25
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	4413      	add	r3, r2
 8007890:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	0d1b      	lsrs	r3, r3, #20
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	2107      	movs	r1, #7
 80078a0:	fa01 f303 	lsl.w	r3, r1, r3
 80078a4:	43db      	mvns	r3, r3
 80078a6:	401a      	ands	r2, r3
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	0d1b      	lsrs	r3, r3, #20
 80078ac:	f003 031f 	and.w	r3, r3, #31
 80078b0:	6879      	ldr	r1, [r7, #4]
 80078b2:	fa01 f303 	lsl.w	r3, r1, r3
 80078b6:	431a      	orrs	r2, r3
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80078bc:	bf00      	nop
 80078be:	371c      	adds	r7, #28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078e0:	43db      	mvns	r3, r3
 80078e2:	401a      	ands	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f003 0318 	and.w	r3, r3, #24
 80078ea:	4908      	ldr	r1, [pc, #32]	@ (800790c <LL_ADC_SetChannelSingleDiff+0x44>)
 80078ec:	40d9      	lsrs	r1, r3
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	400b      	ands	r3, r1
 80078f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078f6:	431a      	orrs	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80078fe:	bf00      	nop
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	0007ffff 	.word	0x0007ffff

08007910 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f003 031f 	and.w	r3, r3, #31
}
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800793c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	6093      	str	r3, [r2, #8]
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007964:	d101      	bne.n	800796a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007966:	2301      	movs	r3, #1
 8007968:	e000      	b.n	800796c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8007988:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800798c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079b4:	d101      	bne.n	80079ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e000      	b.n	80079bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80079dc:	f043 0201 	orr.w	r2, r3, #1
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007a04:	f043 0202 	orr.w	r2, r3, #2
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d101      	bne.n	8007a30 <LL_ADC_IsEnabled+0x18>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e000      	b.n	8007a32 <LL_ADC_IsEnabled+0x1a>
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b083      	sub	sp, #12
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d101      	bne.n	8007a56 <LL_ADC_IsDisableOngoing+0x18>
 8007a52:	2301      	movs	r3, #1
 8007a54:	e000      	b.n	8007a58 <LL_ADC_IsDisableOngoing+0x1a>
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007a78:	f043 0204 	orr.w	r2, r3, #4
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f003 0304 	and.w	r3, r3, #4
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	d101      	bne.n	8007aa4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e000      	b.n	8007aa6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b083      	sub	sp, #12
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f003 0308 	and.w	r3, r3, #8
 8007ac2:	2b08      	cmp	r3, #8
 8007ac4:	d101      	bne.n	8007aca <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e000      	b.n	8007acc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007ad8:	b590      	push	{r4, r7, lr}
 8007ada:	b089      	sub	sp, #36	@ 0x24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e1a9      	b.n	8007e46 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d109      	bne.n	8007b14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7fc fcb9 	bl	8004478 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7ff ff19 	bl	8007950 <LL_ADC_IsDeepPowerDownEnabled>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d004      	beq.n	8007b2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7ff feff 	bl	800792c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7ff ff34 	bl	80079a0 <LL_ADC_IsInternalRegulatorEnabled>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d115      	bne.n	8007b6a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff ff18 	bl	8007978 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007b48:	4b9c      	ldr	r3, [pc, #624]	@ (8007dbc <HAL_ADC_Init+0x2e4>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	099b      	lsrs	r3, r3, #6
 8007b4e:	4a9c      	ldr	r2, [pc, #624]	@ (8007dc0 <HAL_ADC_Init+0x2e8>)
 8007b50:	fba2 2303 	umull	r2, r3, r2, r3
 8007b54:	099b      	lsrs	r3, r3, #6
 8007b56:	3301      	adds	r3, #1
 8007b58:	005b      	lsls	r3, r3, #1
 8007b5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007b5c:	e002      	b.n	8007b64 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3b01      	subs	r3, #1
 8007b62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1f9      	bne.n	8007b5e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7ff ff16 	bl	80079a0 <LL_ADC_IsInternalRegulatorEnabled>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10d      	bne.n	8007b96 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b7e:	f043 0210 	orr.w	r2, r3, #16
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b8a:	f043 0201 	orr.w	r2, r3, #1
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7ff ff76 	bl	8007a8c <LL_ADC_REG_IsConversionOngoing>
 8007ba0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ba6:	f003 0310 	and.w	r3, r3, #16
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f040 8142 	bne.w	8007e34 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f040 813e 	bne.w	8007e34 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bbc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007bc0:	f043 0202 	orr.w	r2, r3, #2
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff ff23 	bl	8007a18 <LL_ADC_IsEnabled>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d141      	bne.n	8007c5c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007be0:	d004      	beq.n	8007bec <HAL_ADC_Init+0x114>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a77      	ldr	r2, [pc, #476]	@ (8007dc4 <HAL_ADC_Init+0x2ec>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d10f      	bne.n	8007c0c <HAL_ADC_Init+0x134>
 8007bec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007bf0:	f7ff ff12 	bl	8007a18 <LL_ADC_IsEnabled>
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	4873      	ldr	r0, [pc, #460]	@ (8007dc4 <HAL_ADC_Init+0x2ec>)
 8007bf8:	f7ff ff0e 	bl	8007a18 <LL_ADC_IsEnabled>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	4323      	orrs	r3, r4
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	bf0c      	ite	eq
 8007c04:	2301      	moveq	r3, #1
 8007c06:	2300      	movne	r3, #0
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	e012      	b.n	8007c32 <HAL_ADC_Init+0x15a>
 8007c0c:	486e      	ldr	r0, [pc, #440]	@ (8007dc8 <HAL_ADC_Init+0x2f0>)
 8007c0e:	f7ff ff03 	bl	8007a18 <LL_ADC_IsEnabled>
 8007c12:	4604      	mov	r4, r0
 8007c14:	486d      	ldr	r0, [pc, #436]	@ (8007dcc <HAL_ADC_Init+0x2f4>)
 8007c16:	f7ff feff 	bl	8007a18 <LL_ADC_IsEnabled>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	431c      	orrs	r4, r3
 8007c1e:	486c      	ldr	r0, [pc, #432]	@ (8007dd0 <HAL_ADC_Init+0x2f8>)
 8007c20:	f7ff fefa 	bl	8007a18 <LL_ADC_IsEnabled>
 8007c24:	4603      	mov	r3, r0
 8007c26:	4323      	orrs	r3, r4
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	bf0c      	ite	eq
 8007c2c:	2301      	moveq	r3, #1
 8007c2e:	2300      	movne	r3, #0
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d012      	beq.n	8007c5c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c3e:	d004      	beq.n	8007c4a <HAL_ADC_Init+0x172>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a5f      	ldr	r2, [pc, #380]	@ (8007dc4 <HAL_ADC_Init+0x2ec>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d101      	bne.n	8007c4e <HAL_ADC_Init+0x176>
 8007c4a:	4a62      	ldr	r2, [pc, #392]	@ (8007dd4 <HAL_ADC_Init+0x2fc>)
 8007c4c:	e000      	b.n	8007c50 <HAL_ADC_Init+0x178>
 8007c4e:	4a62      	ldr	r2, [pc, #392]	@ (8007dd8 <HAL_ADC_Init+0x300>)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	4619      	mov	r1, r3
 8007c56:	4610      	mov	r0, r2
 8007c58:	f7ff fcfa 	bl	8007650 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	7f5b      	ldrb	r3, [r3, #29]
 8007c60:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007c66:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8007c6c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8007c72:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007c7a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d106      	bne.n	8007c98 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	045b      	lsls	r3, r3, #17
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d009      	beq.n	8007cb4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cac:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	4b48      	ldr	r3, [pc, #288]	@ (8007ddc <HAL_ADC_Init+0x304>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	6812      	ldr	r2, [r2, #0]
 8007cc2:	69b9      	ldr	r1, [r7, #24]
 8007cc4:	430b      	orrs	r3, r1
 8007cc6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff fee5 	bl	8007ab2 <LL_ADC_INJ_IsConversionOngoing>
 8007ce8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d17f      	bne.n	8007df0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d17c      	bne.n	8007df0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007cfa:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007d02:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007d04:	4313      	orrs	r3, r2
 8007d06:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d12:	f023 0302 	bic.w	r3, r3, #2
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	6812      	ldr	r2, [r2, #0]
 8007d1a:	69b9      	ldr	r1, [r7, #24]
 8007d1c:	430b      	orrs	r3, r1
 8007d1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d017      	beq.n	8007d58 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	691a      	ldr	r2, [r3, #16]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007d36:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d40:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007d44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	6911      	ldr	r1, [r2, #16]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	6812      	ldr	r2, [r2, #0]
 8007d50:	430b      	orrs	r3, r1
 8007d52:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8007d56:	e013      	b.n	8007d80 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	691a      	ldr	r2, [r3, #16]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007d66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	6812      	ldr	r2, [r2, #0]
 8007d74:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007d78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007d7c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d12a      	bne.n	8007de0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007d94:	f023 0304 	bic.w	r3, r3, #4
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007da0:	4311      	orrs	r1, r2
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007da6:	4311      	orrs	r1, r2
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007dac:	430a      	orrs	r2, r1
 8007dae:	431a      	orrs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f042 0201 	orr.w	r2, r2, #1
 8007db8:	611a      	str	r2, [r3, #16]
 8007dba:	e019      	b.n	8007df0 <HAL_ADC_Init+0x318>
 8007dbc:	20000134 	.word	0x20000134
 8007dc0:	053e2d63 	.word	0x053e2d63
 8007dc4:	50000100 	.word	0x50000100
 8007dc8:	50000400 	.word	0x50000400
 8007dcc:	50000500 	.word	0x50000500
 8007dd0:	50000600 	.word	0x50000600
 8007dd4:	50000300 	.word	0x50000300
 8007dd8:	50000700 	.word	0x50000700
 8007ddc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	691a      	ldr	r2, [r3, #16]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f022 0201 	bic.w	r2, r2, #1
 8007dee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d10c      	bne.n	8007e12 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dfe:	f023 010f 	bic.w	r1, r3, #15
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	1e5a      	subs	r2, r3, #1
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e10:	e007      	b.n	8007e22 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 020f 	bic.w	r2, r2, #15
 8007e20:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e26:	f023 0303 	bic.w	r3, r3, #3
 8007e2a:	f043 0201 	orr.w	r2, r3, #1
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007e32:	e007      	b.n	8007e44 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e38:	f043 0210 	orr.w	r2, r3, #16
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007e44:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3724      	adds	r7, #36	@ 0x24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd90      	pop	{r4, r7, pc}
 8007e4e:	bf00      	nop

08007e50 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e64:	d004      	beq.n	8007e70 <HAL_ADC_Start_DMA+0x20>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a5a      	ldr	r2, [pc, #360]	@ (8007fd4 <HAL_ADC_Start_DMA+0x184>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d101      	bne.n	8007e74 <HAL_ADC_Start_DMA+0x24>
 8007e70:	4b59      	ldr	r3, [pc, #356]	@ (8007fd8 <HAL_ADC_Start_DMA+0x188>)
 8007e72:	e000      	b.n	8007e76 <HAL_ADC_Start_DMA+0x26>
 8007e74:	4b59      	ldr	r3, [pc, #356]	@ (8007fdc <HAL_ADC_Start_DMA+0x18c>)
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff fd4a 	bl	8007910 <LL_ADC_GetMultimode>
 8007e7c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7ff fe02 	bl	8007a8c <LL_ADC_REG_IsConversionOngoing>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f040 809b 	bne.w	8007fc6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d101      	bne.n	8007e9e <HAL_ADC_Start_DMA+0x4e>
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	e096      	b.n	8007fcc <HAL_ADC_Start_DMA+0x17c>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a4d      	ldr	r2, [pc, #308]	@ (8007fe0 <HAL_ADC_Start_DMA+0x190>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d008      	beq.n	8007ec2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d005      	beq.n	8007ec2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	2b05      	cmp	r3, #5
 8007eba:	d002      	beq.n	8007ec2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	2b09      	cmp	r3, #9
 8007ec0:	d17a      	bne.n	8007fb8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 fcf6 	bl	80088b4 <ADC_Enable>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007ecc:	7dfb      	ldrb	r3, [r7, #23]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d16d      	bne.n	8007fae <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ed6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007eda:	f023 0301 	bic.w	r3, r3, #1
 8007ede:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a3a      	ldr	r2, [pc, #232]	@ (8007fd4 <HAL_ADC_Start_DMA+0x184>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d009      	beq.n	8007f04 <HAL_ADC_Start_DMA+0xb4>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a3b      	ldr	r2, [pc, #236]	@ (8007fe4 <HAL_ADC_Start_DMA+0x194>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d002      	beq.n	8007f00 <HAL_ADC_Start_DMA+0xb0>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	e003      	b.n	8007f08 <HAL_ADC_Start_DMA+0xb8>
 8007f00:	4b39      	ldr	r3, [pc, #228]	@ (8007fe8 <HAL_ADC_Start_DMA+0x198>)
 8007f02:	e001      	b.n	8007f08 <HAL_ADC_Start_DMA+0xb8>
 8007f04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	6812      	ldr	r2, [r2, #0]
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d002      	beq.n	8007f16 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d105      	bne.n	8007f22 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f1a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d006      	beq.n	8007f3c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f32:	f023 0206 	bic.w	r2, r3, #6
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	661a      	str	r2, [r3, #96]	@ 0x60
 8007f3a:	e002      	b.n	8007f42 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f46:	4a29      	ldr	r2, [pc, #164]	@ (8007fec <HAL_ADC_Start_DMA+0x19c>)
 8007f48:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f4e:	4a28      	ldr	r2, [pc, #160]	@ (8007ff0 <HAL_ADC_Start_DMA+0x1a0>)
 8007f50:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f56:	4a27      	ldr	r2, [pc, #156]	@ (8007ff4 <HAL_ADC_Start_DMA+0x1a4>)
 8007f58:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	221c      	movs	r2, #28
 8007f60:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f042 0210 	orr.w	r2, r2, #16
 8007f78:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68da      	ldr	r2, [r3, #12]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f042 0201 	orr.w	r2, r2, #1
 8007f88:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3340      	adds	r3, #64	@ 0x40
 8007f94:	4619      	mov	r1, r3
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f001 f989 	bl	80092b0 <HAL_DMA_Start_IT>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7ff fd5c 	bl	8007a64 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007fac:	e00d      	b.n	8007fca <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8007fb6:	e008      	b.n	8007fca <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8007fc4:	e001      	b.n	8007fca <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	50000100 	.word	0x50000100
 8007fd8:	50000300 	.word	0x50000300
 8007fdc:	50000700 	.word	0x50000700
 8007fe0:	50000600 	.word	0x50000600
 8007fe4:	50000500 	.word	0x50000500
 8007fe8:	50000400 	.word	0x50000400
 8007fec:	08008a9f 	.word	0x08008a9f
 8007ff0:	08008b77 	.word	0x08008b77
 8007ff4:	08008b93 	.word	0x08008b93

08007ff8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b0b6      	sub	sp, #216	@ 0xd8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008044:	2300      	movs	r3, #0
 8008046:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800804e:	2b01      	cmp	r3, #1
 8008050:	d102      	bne.n	8008058 <HAL_ADC_ConfigChannel+0x24>
 8008052:	2302      	movs	r3, #2
 8008054:	f000 bc13 	b.w	800887e <HAL_ADC_ConfigChannel+0x84a>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4618      	mov	r0, r3
 8008066:	f7ff fd11 	bl	8007a8c <LL_ADC_REG_IsConversionOngoing>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	f040 83f3 	bne.w	8008858 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6818      	ldr	r0, [r3, #0]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	6859      	ldr	r1, [r3, #4]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	f7ff fbcb 	bl	800781a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4618      	mov	r0, r3
 800808a:	f7ff fcff 	bl	8007a8c <LL_ADC_REG_IsConversionOngoing>
 800808e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4618      	mov	r0, r3
 8008098:	f7ff fd0b 	bl	8007ab2 <LL_ADC_INJ_IsConversionOngoing>
 800809c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80080a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f040 81d9 	bne.w	800845c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80080aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f040 81d4 	bne.w	800845c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080bc:	d10f      	bne.n	80080de <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6818      	ldr	r0, [r3, #0]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2200      	movs	r2, #0
 80080c8:	4619      	mov	r1, r3
 80080ca:	f7ff fbd2 	bl	8007872 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff fb79 	bl	80077ce <LL_ADC_SetSamplingTimeCommonConfig>
 80080dc:	e00e      	b.n	80080fc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6818      	ldr	r0, [r3, #0]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	6819      	ldr	r1, [r3, #0]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	461a      	mov	r2, r3
 80080ec:	f7ff fbc1 	bl	8007872 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2100      	movs	r1, #0
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff fb69 	bl	80077ce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	695a      	ldr	r2, [r3, #20]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	08db      	lsrs	r3, r3, #3
 8008108:	f003 0303 	and.w	r3, r3, #3
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	fa02 f303 	lsl.w	r3, r2, r3
 8008112:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	2b04      	cmp	r3, #4
 800811c:	d022      	beq.n	8008164 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6818      	ldr	r0, [r3, #0]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	6919      	ldr	r1, [r3, #16]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800812e:	f7ff fac3 	bl	80076b8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6818      	ldr	r0, [r3, #0]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	6919      	ldr	r1, [r3, #16]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	461a      	mov	r2, r3
 8008140:	f7ff fb0f 	bl	8007762 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8008150:	2b01      	cmp	r3, #1
 8008152:	d102      	bne.n	800815a <HAL_ADC_ConfigChannel+0x126>
 8008154:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008158:	e000      	b.n	800815c <HAL_ADC_ConfigChannel+0x128>
 800815a:	2300      	movs	r3, #0
 800815c:	461a      	mov	r2, r3
 800815e:	f7ff fb1b 	bl	8007798 <LL_ADC_SetOffsetSaturation>
 8008162:	e17b      	b.n	800845c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2100      	movs	r1, #0
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff fac8 	bl	8007700 <LL_ADC_GetOffsetChannel>
 8008170:	4603      	mov	r3, r0
 8008172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10a      	bne.n	8008190 <HAL_ADC_ConfigChannel+0x15c>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2100      	movs	r1, #0
 8008180:	4618      	mov	r0, r3
 8008182:	f7ff fabd 	bl	8007700 <LL_ADC_GetOffsetChannel>
 8008186:	4603      	mov	r3, r0
 8008188:	0e9b      	lsrs	r3, r3, #26
 800818a:	f003 021f 	and.w	r2, r3, #31
 800818e:	e01e      	b.n	80081ce <HAL_ADC_ConfigChannel+0x19a>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2100      	movs	r1, #0
 8008196:	4618      	mov	r0, r3
 8008198:	f7ff fab2 	bl	8007700 <LL_ADC_GetOffsetChannel>
 800819c:	4603      	mov	r3, r0
 800819e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80081a6:	fa93 f3a3 	rbit	r3, r3
 80081aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80081ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80081b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80081b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80081be:	2320      	movs	r3, #32
 80081c0:	e004      	b.n	80081cc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80081c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081c6:	fab3 f383 	clz	r3, r3
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d105      	bne.n	80081e6 <HAL_ADC_ConfigChannel+0x1b2>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	0e9b      	lsrs	r3, r3, #26
 80081e0:	f003 031f 	and.w	r3, r3, #31
 80081e4:	e018      	b.n	8008218 <HAL_ADC_ConfigChannel+0x1e4>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80081f2:	fa93 f3a3 	rbit	r3, r3
 80081f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80081fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80081fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8008202:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800820a:	2320      	movs	r3, #32
 800820c:	e004      	b.n	8008218 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800820e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008212:	fab3 f383 	clz	r3, r3
 8008216:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008218:	429a      	cmp	r2, r3
 800821a:	d106      	bne.n	800822a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2200      	movs	r2, #0
 8008222:	2100      	movs	r1, #0
 8008224:	4618      	mov	r0, r3
 8008226:	f7ff fa81 	bl	800772c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2101      	movs	r1, #1
 8008230:	4618      	mov	r0, r3
 8008232:	f7ff fa65 	bl	8007700 <LL_ADC_GetOffsetChannel>
 8008236:	4603      	mov	r3, r0
 8008238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <HAL_ADC_ConfigChannel+0x222>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2101      	movs	r1, #1
 8008246:	4618      	mov	r0, r3
 8008248:	f7ff fa5a 	bl	8007700 <LL_ADC_GetOffsetChannel>
 800824c:	4603      	mov	r3, r0
 800824e:	0e9b      	lsrs	r3, r3, #26
 8008250:	f003 021f 	and.w	r2, r3, #31
 8008254:	e01e      	b.n	8008294 <HAL_ADC_ConfigChannel+0x260>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2101      	movs	r1, #1
 800825c:	4618      	mov	r0, r3
 800825e:	f7ff fa4f 	bl	8007700 <LL_ADC_GetOffsetChannel>
 8008262:	4603      	mov	r3, r0
 8008264:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008268:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800826c:	fa93 f3a3 	rbit	r3, r3
 8008270:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8008274:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008278:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800827c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8008284:	2320      	movs	r3, #32
 8008286:	e004      	b.n	8008292 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8008288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800828c:	fab3 f383 	clz	r3, r3
 8008290:	b2db      	uxtb	r3, r3
 8008292:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800829c:	2b00      	cmp	r3, #0
 800829e:	d105      	bne.n	80082ac <HAL_ADC_ConfigChannel+0x278>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	0e9b      	lsrs	r3, r3, #26
 80082a6:	f003 031f 	and.w	r3, r3, #31
 80082aa:	e018      	b.n	80082de <HAL_ADC_ConfigChannel+0x2aa>
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082b8:	fa93 f3a3 	rbit	r3, r3
 80082bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80082c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80082c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d101      	bne.n	80082d4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80082d0:	2320      	movs	r3, #32
 80082d2:	e004      	b.n	80082de <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80082d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082d8:	fab3 f383 	clz	r3, r3
 80082dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80082de:	429a      	cmp	r2, r3
 80082e0:	d106      	bne.n	80082f0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2200      	movs	r2, #0
 80082e8:	2101      	movs	r1, #1
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7ff fa1e 	bl	800772c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2102      	movs	r1, #2
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7ff fa02 	bl	8007700 <LL_ADC_GetOffsetChannel>
 80082fc:	4603      	mov	r3, r0
 80082fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10a      	bne.n	800831c <HAL_ADC_ConfigChannel+0x2e8>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2102      	movs	r1, #2
 800830c:	4618      	mov	r0, r3
 800830e:	f7ff f9f7 	bl	8007700 <LL_ADC_GetOffsetChannel>
 8008312:	4603      	mov	r3, r0
 8008314:	0e9b      	lsrs	r3, r3, #26
 8008316:	f003 021f 	and.w	r2, r3, #31
 800831a:	e01e      	b.n	800835a <HAL_ADC_ConfigChannel+0x326>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2102      	movs	r1, #2
 8008322:	4618      	mov	r0, r3
 8008324:	f7ff f9ec 	bl	8007700 <LL_ADC_GetOffsetChannel>
 8008328:	4603      	mov	r3, r0
 800832a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800832e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008332:	fa93 f3a3 	rbit	r3, r3
 8008336:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800833a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800833e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8008342:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800834a:	2320      	movs	r3, #32
 800834c:	e004      	b.n	8008358 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800834e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008352:	fab3 f383 	clz	r3, r3
 8008356:	b2db      	uxtb	r3, r3
 8008358:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008362:	2b00      	cmp	r3, #0
 8008364:	d105      	bne.n	8008372 <HAL_ADC_ConfigChannel+0x33e>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	0e9b      	lsrs	r3, r3, #26
 800836c:	f003 031f 	and.w	r3, r3, #31
 8008370:	e016      	b.n	80083a0 <HAL_ADC_ConfigChannel+0x36c>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800837a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800837e:	fa93 f3a3 	rbit	r3, r3
 8008382:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8008384:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008386:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800838a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8008392:	2320      	movs	r3, #32
 8008394:	e004      	b.n	80083a0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8008396:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800839a:	fab3 f383 	clz	r3, r3
 800839e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d106      	bne.n	80083b2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2200      	movs	r2, #0
 80083aa:	2102      	movs	r1, #2
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7ff f9bd 	bl	800772c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2103      	movs	r1, #3
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7ff f9a1 	bl	8007700 <LL_ADC_GetOffsetChannel>
 80083be:	4603      	mov	r3, r0
 80083c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10a      	bne.n	80083de <HAL_ADC_ConfigChannel+0x3aa>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2103      	movs	r1, #3
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff f996 	bl	8007700 <LL_ADC_GetOffsetChannel>
 80083d4:	4603      	mov	r3, r0
 80083d6:	0e9b      	lsrs	r3, r3, #26
 80083d8:	f003 021f 	and.w	r2, r3, #31
 80083dc:	e017      	b.n	800840e <HAL_ADC_ConfigChannel+0x3da>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2103      	movs	r1, #3
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7ff f98b 	bl	8007700 <LL_ADC_GetOffsetChannel>
 80083ea:	4603      	mov	r3, r0
 80083ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083f0:	fa93 f3a3 	rbit	r3, r3
 80083f4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80083f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80083f8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80083fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8008400:	2320      	movs	r3, #32
 8008402:	e003      	b.n	800840c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8008404:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008406:	fab3 f383 	clz	r3, r3
 800840a:	b2db      	uxtb	r3, r3
 800840c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008416:	2b00      	cmp	r3, #0
 8008418:	d105      	bne.n	8008426 <HAL_ADC_ConfigChannel+0x3f2>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	0e9b      	lsrs	r3, r3, #26
 8008420:	f003 031f 	and.w	r3, r3, #31
 8008424:	e011      	b.n	800844a <HAL_ADC_ConfigChannel+0x416>
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800842c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800842e:	fa93 f3a3 	rbit	r3, r3
 8008432:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8008434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008436:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8008438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800843e:	2320      	movs	r3, #32
 8008440:	e003      	b.n	800844a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8008442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008444:	fab3 f383 	clz	r3, r3
 8008448:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800844a:	429a      	cmp	r2, r3
 800844c:	d106      	bne.n	800845c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2200      	movs	r2, #0
 8008454:	2103      	movs	r1, #3
 8008456:	4618      	mov	r0, r3
 8008458:	f7ff f968 	bl	800772c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff fad9 	bl	8007a18 <LL_ADC_IsEnabled>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	f040 813d 	bne.w	80086e8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6818      	ldr	r0, [r3, #0]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	6819      	ldr	r1, [r3, #0]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	461a      	mov	r2, r3
 800847c:	f7ff fa24 	bl	80078c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	4aa2      	ldr	r2, [pc, #648]	@ (8008710 <HAL_ADC_ConfigChannel+0x6dc>)
 8008486:	4293      	cmp	r3, r2
 8008488:	f040 812e 	bne.w	80086e8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10b      	bne.n	80084b4 <HAL_ADC_ConfigChannel+0x480>
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	0e9b      	lsrs	r3, r3, #26
 80084a2:	3301      	adds	r3, #1
 80084a4:	f003 031f 	and.w	r3, r3, #31
 80084a8:	2b09      	cmp	r3, #9
 80084aa:	bf94      	ite	ls
 80084ac:	2301      	movls	r3, #1
 80084ae:	2300      	movhi	r3, #0
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	e019      	b.n	80084e8 <HAL_ADC_ConfigChannel+0x4b4>
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084bc:	fa93 f3a3 	rbit	r3, r3
 80084c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80084c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084c4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80084c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80084cc:	2320      	movs	r3, #32
 80084ce:	e003      	b.n	80084d8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80084d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084d2:	fab3 f383 	clz	r3, r3
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	3301      	adds	r3, #1
 80084da:	f003 031f 	and.w	r3, r3, #31
 80084de:	2b09      	cmp	r3, #9
 80084e0:	bf94      	ite	ls
 80084e2:	2301      	movls	r3, #1
 80084e4:	2300      	movhi	r3, #0
 80084e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d079      	beq.n	80085e0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d107      	bne.n	8008508 <HAL_ADC_ConfigChannel+0x4d4>
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	0e9b      	lsrs	r3, r3, #26
 80084fe:	3301      	adds	r3, #1
 8008500:	069b      	lsls	r3, r3, #26
 8008502:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008506:	e015      	b.n	8008534 <HAL_ADC_ConfigChannel+0x500>
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800850e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008510:	fa93 f3a3 	rbit	r3, r3
 8008514:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8008516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008518:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800851a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8008520:	2320      	movs	r3, #32
 8008522:	e003      	b.n	800852c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8008524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008526:	fab3 f383 	clz	r3, r3
 800852a:	b2db      	uxtb	r3, r3
 800852c:	3301      	adds	r3, #1
 800852e:	069b      	lsls	r3, r3, #26
 8008530:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800853c:	2b00      	cmp	r3, #0
 800853e:	d109      	bne.n	8008554 <HAL_ADC_ConfigChannel+0x520>
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	0e9b      	lsrs	r3, r3, #26
 8008546:	3301      	adds	r3, #1
 8008548:	f003 031f 	and.w	r3, r3, #31
 800854c:	2101      	movs	r1, #1
 800854e:	fa01 f303 	lsl.w	r3, r1, r3
 8008552:	e017      	b.n	8008584 <HAL_ADC_ConfigChannel+0x550>
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800855a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800855c:	fa93 f3a3 	rbit	r3, r3
 8008560:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8008562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008564:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8008566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008568:	2b00      	cmp	r3, #0
 800856a:	d101      	bne.n	8008570 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800856c:	2320      	movs	r3, #32
 800856e:	e003      	b.n	8008578 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8008570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008572:	fab3 f383 	clz	r3, r3
 8008576:	b2db      	uxtb	r3, r3
 8008578:	3301      	adds	r3, #1
 800857a:	f003 031f 	and.w	r3, r3, #31
 800857e:	2101      	movs	r1, #1
 8008580:	fa01 f303 	lsl.w	r3, r1, r3
 8008584:	ea42 0103 	orr.w	r1, r2, r3
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <HAL_ADC_ConfigChannel+0x576>
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	0e9b      	lsrs	r3, r3, #26
 800859a:	3301      	adds	r3, #1
 800859c:	f003 021f 	and.w	r2, r3, #31
 80085a0:	4613      	mov	r3, r2
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	4413      	add	r3, r2
 80085a6:	051b      	lsls	r3, r3, #20
 80085a8:	e018      	b.n	80085dc <HAL_ADC_ConfigChannel+0x5a8>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b2:	fa93 f3a3 	rbit	r3, r3
 80085b6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80085b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80085bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80085c2:	2320      	movs	r3, #32
 80085c4:	e003      	b.n	80085ce <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80085c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085c8:	fab3 f383 	clz	r3, r3
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	3301      	adds	r3, #1
 80085d0:	f003 021f 	and.w	r2, r3, #31
 80085d4:	4613      	mov	r3, r2
 80085d6:	005b      	lsls	r3, r3, #1
 80085d8:	4413      	add	r3, r2
 80085da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80085dc:	430b      	orrs	r3, r1
 80085de:	e07e      	b.n	80086de <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d107      	bne.n	80085fc <HAL_ADC_ConfigChannel+0x5c8>
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	0e9b      	lsrs	r3, r3, #26
 80085f2:	3301      	adds	r3, #1
 80085f4:	069b      	lsls	r3, r3, #26
 80085f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80085fa:	e015      	b.n	8008628 <HAL_ADC_ConfigChannel+0x5f4>
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008604:	fa93 f3a3 	rbit	r3, r3
 8008608:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800860a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800860e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8008614:	2320      	movs	r3, #32
 8008616:	e003      	b.n	8008620 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8008618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861a:	fab3 f383 	clz	r3, r3
 800861e:	b2db      	uxtb	r3, r3
 8008620:	3301      	adds	r3, #1
 8008622:	069b      	lsls	r3, r3, #26
 8008624:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008630:	2b00      	cmp	r3, #0
 8008632:	d109      	bne.n	8008648 <HAL_ADC_ConfigChannel+0x614>
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	0e9b      	lsrs	r3, r3, #26
 800863a:	3301      	adds	r3, #1
 800863c:	f003 031f 	and.w	r3, r3, #31
 8008640:	2101      	movs	r1, #1
 8008642:	fa01 f303 	lsl.w	r3, r1, r3
 8008646:	e017      	b.n	8008678 <HAL_ADC_ConfigChannel+0x644>
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	fa93 f3a3 	rbit	r3, r3
 8008654:	61fb      	str	r3, [r7, #28]
  return result;
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800865a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865c:	2b00      	cmp	r3, #0
 800865e:	d101      	bne.n	8008664 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8008660:	2320      	movs	r3, #32
 8008662:	e003      	b.n	800866c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8008664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008666:	fab3 f383 	clz	r3, r3
 800866a:	b2db      	uxtb	r3, r3
 800866c:	3301      	adds	r3, #1
 800866e:	f003 031f 	and.w	r3, r3, #31
 8008672:	2101      	movs	r1, #1
 8008674:	fa01 f303 	lsl.w	r3, r1, r3
 8008678:	ea42 0103 	orr.w	r1, r2, r3
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10d      	bne.n	80086a4 <HAL_ADC_ConfigChannel+0x670>
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	0e9b      	lsrs	r3, r3, #26
 800868e:	3301      	adds	r3, #1
 8008690:	f003 021f 	and.w	r2, r3, #31
 8008694:	4613      	mov	r3, r2
 8008696:	005b      	lsls	r3, r3, #1
 8008698:	4413      	add	r3, r2
 800869a:	3b1e      	subs	r3, #30
 800869c:	051b      	lsls	r3, r3, #20
 800869e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80086a2:	e01b      	b.n	80086dc <HAL_ADC_ConfigChannel+0x6a8>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	fa93 f3a3 	rbit	r3, r3
 80086b0:	613b      	str	r3, [r7, #16]
  return result;
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80086bc:	2320      	movs	r3, #32
 80086be:	e003      	b.n	80086c8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	fab3 f383 	clz	r3, r3
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	3301      	adds	r3, #1
 80086ca:	f003 021f 	and.w	r2, r3, #31
 80086ce:	4613      	mov	r3, r2
 80086d0:	005b      	lsls	r3, r3, #1
 80086d2:	4413      	add	r3, r2
 80086d4:	3b1e      	subs	r3, #30
 80086d6:	051b      	lsls	r3, r3, #20
 80086d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80086dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80086e2:	4619      	mov	r1, r3
 80086e4:	f7ff f8c5 	bl	8007872 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	4b09      	ldr	r3, [pc, #36]	@ (8008714 <HAL_ADC_ConfigChannel+0x6e0>)
 80086ee:	4013      	ands	r3, r2
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 80be 	beq.w	8008872 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086fe:	d004      	beq.n	800870a <HAL_ADC_ConfigChannel+0x6d6>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a04      	ldr	r2, [pc, #16]	@ (8008718 <HAL_ADC_ConfigChannel+0x6e4>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d10a      	bne.n	8008720 <HAL_ADC_ConfigChannel+0x6ec>
 800870a:	4b04      	ldr	r3, [pc, #16]	@ (800871c <HAL_ADC_ConfigChannel+0x6e8>)
 800870c:	e009      	b.n	8008722 <HAL_ADC_ConfigChannel+0x6ee>
 800870e:	bf00      	nop
 8008710:	407f0000 	.word	0x407f0000
 8008714:	80080000 	.word	0x80080000
 8008718:	50000100 	.word	0x50000100
 800871c:	50000300 	.word	0x50000300
 8008720:	4b59      	ldr	r3, [pc, #356]	@ (8008888 <HAL_ADC_ConfigChannel+0x854>)
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe ffba 	bl	800769c <LL_ADC_GetCommonPathInternalCh>
 8008728:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a56      	ldr	r2, [pc, #344]	@ (800888c <HAL_ADC_ConfigChannel+0x858>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d004      	beq.n	8008740 <HAL_ADC_ConfigChannel+0x70c>
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a55      	ldr	r2, [pc, #340]	@ (8008890 <HAL_ADC_ConfigChannel+0x85c>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d13a      	bne.n	80087b6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008740:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008744:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d134      	bne.n	80087b6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008754:	d005      	beq.n	8008762 <HAL_ADC_ConfigChannel+0x72e>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a4e      	ldr	r2, [pc, #312]	@ (8008894 <HAL_ADC_ConfigChannel+0x860>)
 800875c:	4293      	cmp	r3, r2
 800875e:	f040 8085 	bne.w	800886c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800876a:	d004      	beq.n	8008776 <HAL_ADC_ConfigChannel+0x742>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a49      	ldr	r2, [pc, #292]	@ (8008898 <HAL_ADC_ConfigChannel+0x864>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d101      	bne.n	800877a <HAL_ADC_ConfigChannel+0x746>
 8008776:	4a49      	ldr	r2, [pc, #292]	@ (800889c <HAL_ADC_ConfigChannel+0x868>)
 8008778:	e000      	b.n	800877c <HAL_ADC_ConfigChannel+0x748>
 800877a:	4a43      	ldr	r2, [pc, #268]	@ (8008888 <HAL_ADC_ConfigChannel+0x854>)
 800877c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008780:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008784:	4619      	mov	r1, r3
 8008786:	4610      	mov	r0, r2
 8008788:	f7fe ff75 	bl	8007676 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800878c:	4b44      	ldr	r3, [pc, #272]	@ (80088a0 <HAL_ADC_ConfigChannel+0x86c>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	099b      	lsrs	r3, r3, #6
 8008792:	4a44      	ldr	r2, [pc, #272]	@ (80088a4 <HAL_ADC_ConfigChannel+0x870>)
 8008794:	fba2 2303 	umull	r2, r3, r2, r3
 8008798:	099b      	lsrs	r3, r3, #6
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	4613      	mov	r3, r2
 800879e:	005b      	lsls	r3, r3, #1
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80087a6:	e002      	b.n	80087ae <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1f9      	bne.n	80087a8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80087b4:	e05a      	b.n	800886c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a3b      	ldr	r2, [pc, #236]	@ (80088a8 <HAL_ADC_ConfigChannel+0x874>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d125      	bne.n	800880c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80087c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80087c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d11f      	bne.n	800880c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a31      	ldr	r2, [pc, #196]	@ (8008898 <HAL_ADC_ConfigChannel+0x864>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d104      	bne.n	80087e0 <HAL_ADC_ConfigChannel+0x7ac>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a34      	ldr	r2, [pc, #208]	@ (80088ac <HAL_ADC_ConfigChannel+0x878>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d047      	beq.n	8008870 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80087e8:	d004      	beq.n	80087f4 <HAL_ADC_ConfigChannel+0x7c0>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a2a      	ldr	r2, [pc, #168]	@ (8008898 <HAL_ADC_ConfigChannel+0x864>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d101      	bne.n	80087f8 <HAL_ADC_ConfigChannel+0x7c4>
 80087f4:	4a29      	ldr	r2, [pc, #164]	@ (800889c <HAL_ADC_ConfigChannel+0x868>)
 80087f6:	e000      	b.n	80087fa <HAL_ADC_ConfigChannel+0x7c6>
 80087f8:	4a23      	ldr	r2, [pc, #140]	@ (8008888 <HAL_ADC_ConfigChannel+0x854>)
 80087fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80087fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008802:	4619      	mov	r1, r3
 8008804:	4610      	mov	r0, r2
 8008806:	f7fe ff36 	bl	8007676 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800880a:	e031      	b.n	8008870 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a27      	ldr	r2, [pc, #156]	@ (80088b0 <HAL_ADC_ConfigChannel+0x87c>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d12d      	bne.n	8008872 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008816:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800881a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d127      	bne.n	8008872 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a1c      	ldr	r2, [pc, #112]	@ (8008898 <HAL_ADC_ConfigChannel+0x864>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d022      	beq.n	8008872 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008834:	d004      	beq.n	8008840 <HAL_ADC_ConfigChannel+0x80c>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a17      	ldr	r2, [pc, #92]	@ (8008898 <HAL_ADC_ConfigChannel+0x864>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d101      	bne.n	8008844 <HAL_ADC_ConfigChannel+0x810>
 8008840:	4a16      	ldr	r2, [pc, #88]	@ (800889c <HAL_ADC_ConfigChannel+0x868>)
 8008842:	e000      	b.n	8008846 <HAL_ADC_ConfigChannel+0x812>
 8008844:	4a10      	ldr	r2, [pc, #64]	@ (8008888 <HAL_ADC_ConfigChannel+0x854>)
 8008846:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800884a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800884e:	4619      	mov	r1, r3
 8008850:	4610      	mov	r0, r2
 8008852:	f7fe ff10 	bl	8007676 <LL_ADC_SetCommonPathInternalCh>
 8008856:	e00c      	b.n	8008872 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800885c:	f043 0220 	orr.w	r2, r3, #32
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800886a:	e002      	b.n	8008872 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800886c:	bf00      	nop
 800886e:	e000      	b.n	8008872 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008870:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800887a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800887e:	4618      	mov	r0, r3
 8008880:	37d8      	adds	r7, #216	@ 0xd8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	50000700 	.word	0x50000700
 800888c:	c3210000 	.word	0xc3210000
 8008890:	90c00010 	.word	0x90c00010
 8008894:	50000600 	.word	0x50000600
 8008898:	50000100 	.word	0x50000100
 800889c:	50000300 	.word	0x50000300
 80088a0:	20000134 	.word	0x20000134
 80088a4:	053e2d63 	.word	0x053e2d63
 80088a8:	c7520000 	.word	0xc7520000
 80088ac:	50000500 	.word	0x50000500
 80088b0:	cb840000 	.word	0xcb840000

080088b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80088bc:	2300      	movs	r3, #0
 80088be:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7ff f8a7 	bl	8007a18 <LL_ADC_IsEnabled>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d176      	bne.n	80089be <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	689a      	ldr	r2, [r3, #8]
 80088d6:	4b3c      	ldr	r3, [pc, #240]	@ (80089c8 <ADC_Enable+0x114>)
 80088d8:	4013      	ands	r3, r2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00d      	beq.n	80088fa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088e2:	f043 0210 	orr.w	r2, r3, #16
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088ee:	f043 0201 	orr.w	r2, r3, #1
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e062      	b.n	80089c0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff f862 	bl	80079c8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800890c:	d004      	beq.n	8008918 <ADC_Enable+0x64>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a2e      	ldr	r2, [pc, #184]	@ (80089cc <ADC_Enable+0x118>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d101      	bne.n	800891c <ADC_Enable+0x68>
 8008918:	4b2d      	ldr	r3, [pc, #180]	@ (80089d0 <ADC_Enable+0x11c>)
 800891a:	e000      	b.n	800891e <ADC_Enable+0x6a>
 800891c:	4b2d      	ldr	r3, [pc, #180]	@ (80089d4 <ADC_Enable+0x120>)
 800891e:	4618      	mov	r0, r3
 8008920:	f7fe febc 	bl	800769c <LL_ADC_GetCommonPathInternalCh>
 8008924:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8008926:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800892a:	2b00      	cmp	r3, #0
 800892c:	d013      	beq.n	8008956 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800892e:	4b2a      	ldr	r3, [pc, #168]	@ (80089d8 <ADC_Enable+0x124>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	099b      	lsrs	r3, r3, #6
 8008934:	4a29      	ldr	r2, [pc, #164]	@ (80089dc <ADC_Enable+0x128>)
 8008936:	fba2 2303 	umull	r2, r3, r2, r3
 800893a:	099b      	lsrs	r3, r3, #6
 800893c:	1c5a      	adds	r2, r3, #1
 800893e:	4613      	mov	r3, r2
 8008940:	005b      	lsls	r3, r3, #1
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008948:	e002      	b.n	8008950 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	3b01      	subs	r3, #1
 800894e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1f9      	bne.n	800894a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008956:	f7fe fe6f 	bl	8007638 <HAL_GetTick>
 800895a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800895c:	e028      	b.n	80089b0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4618      	mov	r0, r3
 8008964:	f7ff f858 	bl	8007a18 <LL_ADC_IsEnabled>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d104      	bne.n	8008978 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4618      	mov	r0, r3
 8008974:	f7ff f828 	bl	80079c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008978:	f7fe fe5e 	bl	8007638 <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	2b02      	cmp	r3, #2
 8008984:	d914      	bls.n	80089b0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	2b01      	cmp	r3, #1
 8008992:	d00d      	beq.n	80089b0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008998:	f043 0210 	orr.w	r2, r3, #16
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089a4:	f043 0201 	orr.w	r2, r3, #1
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e007      	b.n	80089c0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d1cf      	bne.n	800895e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	8000003f 	.word	0x8000003f
 80089cc:	50000100 	.word	0x50000100
 80089d0:	50000300 	.word	0x50000300
 80089d4:	50000700 	.word	0x50000700
 80089d8:	20000134 	.word	0x20000134
 80089dc:	053e2d63 	.word	0x053e2d63

080089e0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7ff f826 	bl	8007a3e <LL_ADC_IsDisableOngoing>
 80089f2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff f80d 	bl	8007a18 <LL_ADC_IsEnabled>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d047      	beq.n	8008a94 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d144      	bne.n	8008a94 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f003 030d 	and.w	r3, r3, #13
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d10c      	bne.n	8008a32 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fe ffe7 	bl	80079f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2203      	movs	r2, #3
 8008a28:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008a2a:	f7fe fe05 	bl	8007638 <HAL_GetTick>
 8008a2e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008a30:	e029      	b.n	8008a86 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a36:	f043 0210 	orr.w	r2, r3, #16
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a42:	f043 0201 	orr.w	r2, r3, #1
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e023      	b.n	8008a96 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008a4e:	f7fe fdf3 	bl	8007638 <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d914      	bls.n	8008a86 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	f003 0301 	and.w	r3, r3, #1
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00d      	beq.n	8008a86 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a6e:	f043 0210 	orr.w	r2, r3, #16
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a7a:	f043 0201 	orr.w	r2, r3, #1
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e007      	b.n	8008a96 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f003 0301 	and.w	r3, r3, #1
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1dc      	bne.n	8008a4e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ab0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d14b      	bne.n	8008b50 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008abc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0308 	and.w	r3, r3, #8
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d021      	beq.n	8008b16 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe fe8c 	bl	80077f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d032      	beq.n	8008b48 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d12b      	bne.n	8008b48 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008af4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d11f      	bne.n	8008b48 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b0c:	f043 0201 	orr.w	r2, r3, #1
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008b14:	e018      	b.n	8008b48 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d111      	bne.n	8008b48 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d105      	bne.n	8008b48 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b40:	f043 0201 	orr.w	r2, r3, #1
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f7ff fa55 	bl	8007ff8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008b4e:	e00e      	b.n	8008b6e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b54:	f003 0310 	and.w	r3, r3, #16
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d003      	beq.n	8008b64 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f7ff fa5f 	bl	8008020 <HAL_ADC_ErrorCallback>
}
 8008b62:	e004      	b.n	8008b6e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	4798      	blx	r3
}
 8008b6e:	bf00      	nop
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b084      	sub	sp, #16
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f7ff fa41 	bl	800800c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008b8a:	bf00      	nop
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ba4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bb0:	f043 0204 	orr.w	r2, r3, #4
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f7ff fa31 	bl	8008020 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008bbe:	bf00      	nop
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <LL_ADC_IsEnabled>:
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b083      	sub	sp, #12
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d101      	bne.n	8008bde <LL_ADC_IsEnabled+0x18>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e000      	b.n	8008be0 <LL_ADC_IsEnabled+0x1a>
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <LL_ADC_StartCalibration>:
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8008bfe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	609a      	str	r2, [r3, #8]
}
 8008c12:	bf00      	nop
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <LL_ADC_IsCalibrationOnGoing>:
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c32:	d101      	bne.n	8008c38 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008c34:	2301      	movs	r3, #1
 8008c36:	e000      	b.n	8008c3a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <LL_ADC_REG_IsConversionOngoing>:
{
 8008c46:	b480      	push	{r7}
 8008c48:	b083      	sub	sp, #12
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f003 0304 	and.w	r3, r3, #4
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	d101      	bne.n	8008c5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e000      	b.n	8008c60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d101      	bne.n	8008c88 <HAL_ADCEx_Calibration_Start+0x1c>
 8008c84:	2302      	movs	r3, #2
 8008c86:	e04d      	b.n	8008d24 <HAL_ADCEx_Calibration_Start+0xb8>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7ff fea5 	bl	80089e0 <ADC_Disable>
 8008c96:	4603      	mov	r3, r0
 8008c98:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d136      	bne.n	8008d0e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ca4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008ca8:	f023 0302 	bic.w	r3, r3, #2
 8008cac:	f043 0202 	orr.w	r2, r3, #2
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7ff ff96 	bl	8008bec <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008cc0:	e014      	b.n	8008cec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	4a18      	ldr	r2, [pc, #96]	@ (8008d2c <HAL_ADCEx_Calibration_Start+0xc0>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d90d      	bls.n	8008cec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cd4:	f023 0312 	bic.w	r3, r3, #18
 8008cd8:	f043 0210 	orr.w	r2, r3, #16
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e01b      	b.n	8008d24 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7ff ff94 	bl	8008c1e <LL_ADC_IsCalibrationOnGoing>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1e2      	bne.n	8008cc2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d00:	f023 0303 	bic.w	r3, r3, #3
 8008d04:	f043 0201 	orr.w	r2, r3, #1
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008d0c:	e005      	b.n	8008d1a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d12:	f043 0210 	orr.w	r2, r3, #16
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	0004de01 	.word	0x0004de01

08008d30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8008d30:	b590      	push	{r4, r7, lr}
 8008d32:	b0a1      	sub	sp, #132	@ 0x84
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d101      	bne.n	8008d4e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e0e7      	b.n	8008f1e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8008d56:	2300      	movs	r3, #0
 8008d58:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d66:	d102      	bne.n	8008d6e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008d68:	4b6f      	ldr	r3, [pc, #444]	@ (8008f28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008d6a:	60bb      	str	r3, [r7, #8]
 8008d6c:	e009      	b.n	8008d82 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a6e      	ldr	r2, [pc, #440]	@ (8008f2c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d102      	bne.n	8008d7e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8008d78:	4b6d      	ldr	r3, [pc, #436]	@ (8008f30 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008d7a:	60bb      	str	r3, [r7, #8]
 8008d7c:	e001      	b.n	8008d82 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10b      	bne.n	8008da0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d8c:	f043 0220 	orr.w	r2, r3, #32
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e0be      	b.n	8008f1e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7ff ff4f 	bl	8008c46 <LL_ADC_REG_IsConversionOngoing>
 8008da8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7ff ff49 	bl	8008c46 <LL_ADC_REG_IsConversionOngoing>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f040 80a0 	bne.w	8008efc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8008dbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f040 809c 	bne.w	8008efc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008dcc:	d004      	beq.n	8008dd8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a55      	ldr	r2, [pc, #340]	@ (8008f28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d101      	bne.n	8008ddc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8008dd8:	4b56      	ldr	r3, [pc, #344]	@ (8008f34 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008dda:	e000      	b.n	8008dde <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8008ddc:	4b56      	ldr	r3, [pc, #344]	@ (8008f38 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8008dde:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d04b      	beq.n	8008e80 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008de8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	6859      	ldr	r1, [r3, #4]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008dfa:	035b      	lsls	r3, r3, #13
 8008dfc:	430b      	orrs	r3, r1
 8008dfe:	431a      	orrs	r2, r3
 8008e00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e02:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e0c:	d004      	beq.n	8008e18 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a45      	ldr	r2, [pc, #276]	@ (8008f28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d10f      	bne.n	8008e38 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8008e18:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8008e1c:	f7ff fed3 	bl	8008bc6 <LL_ADC_IsEnabled>
 8008e20:	4604      	mov	r4, r0
 8008e22:	4841      	ldr	r0, [pc, #260]	@ (8008f28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008e24:	f7ff fecf 	bl	8008bc6 <LL_ADC_IsEnabled>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	4323      	orrs	r3, r4
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	bf0c      	ite	eq
 8008e30:	2301      	moveq	r3, #1
 8008e32:	2300      	movne	r3, #0
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	e012      	b.n	8008e5e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8008e38:	483c      	ldr	r0, [pc, #240]	@ (8008f2c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008e3a:	f7ff fec4 	bl	8008bc6 <LL_ADC_IsEnabled>
 8008e3e:	4604      	mov	r4, r0
 8008e40:	483b      	ldr	r0, [pc, #236]	@ (8008f30 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008e42:	f7ff fec0 	bl	8008bc6 <LL_ADC_IsEnabled>
 8008e46:	4603      	mov	r3, r0
 8008e48:	431c      	orrs	r4, r3
 8008e4a:	483c      	ldr	r0, [pc, #240]	@ (8008f3c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008e4c:	f7ff febb 	bl	8008bc6 <LL_ADC_IsEnabled>
 8008e50:	4603      	mov	r3, r0
 8008e52:	4323      	orrs	r3, r4
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	bf0c      	ite	eq
 8008e58:	2301      	moveq	r3, #1
 8008e5a:	2300      	movne	r3, #0
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d056      	beq.n	8008f10 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008e62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8008e6a:	f023 030f 	bic.w	r3, r3, #15
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	6811      	ldr	r1, [r2, #0]
 8008e72:	683a      	ldr	r2, [r7, #0]
 8008e74:	6892      	ldr	r2, [r2, #8]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e7c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008e7e:	e047      	b.n	8008f10 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008e80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008e88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e8a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e94:	d004      	beq.n	8008ea0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a23      	ldr	r2, [pc, #140]	@ (8008f28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d10f      	bne.n	8008ec0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8008ea0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8008ea4:	f7ff fe8f 	bl	8008bc6 <LL_ADC_IsEnabled>
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	481f      	ldr	r0, [pc, #124]	@ (8008f28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008eac:	f7ff fe8b 	bl	8008bc6 <LL_ADC_IsEnabled>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	4323      	orrs	r3, r4
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	bf0c      	ite	eq
 8008eb8:	2301      	moveq	r3, #1
 8008eba:	2300      	movne	r3, #0
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	e012      	b.n	8008ee6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8008ec0:	481a      	ldr	r0, [pc, #104]	@ (8008f2c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008ec2:	f7ff fe80 	bl	8008bc6 <LL_ADC_IsEnabled>
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4819      	ldr	r0, [pc, #100]	@ (8008f30 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008eca:	f7ff fe7c 	bl	8008bc6 <LL_ADC_IsEnabled>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	431c      	orrs	r4, r3
 8008ed2:	481a      	ldr	r0, [pc, #104]	@ (8008f3c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008ed4:	f7ff fe77 	bl	8008bc6 <LL_ADC_IsEnabled>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	4323      	orrs	r3, r4
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	bf0c      	ite	eq
 8008ee0:	2301      	moveq	r3, #1
 8008ee2:	2300      	movne	r3, #0
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d012      	beq.n	8008f10 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8008ef2:	f023 030f 	bic.w	r3, r3, #15
 8008ef6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008ef8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008efa:	e009      	b.n	8008f10 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f00:	f043 0220 	orr.w	r2, r3, #32
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8008f0e:	e000      	b.n	8008f12 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008f10:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8008f1a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3784      	adds	r7, #132	@ 0x84
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd90      	pop	{r4, r7, pc}
 8008f26:	bf00      	nop
 8008f28:	50000100 	.word	0x50000100
 8008f2c:	50000400 	.word	0x50000400
 8008f30:	50000500 	.word	0x50000500
 8008f34:	50000300 	.word	0x50000300
 8008f38:	50000700 	.word	0x50000700
 8008f3c:	50000600 	.word	0x50000600

08008f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f003 0307 	and.w	r3, r3, #7
 8008f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f50:	4b0c      	ldr	r3, [pc, #48]	@ (8008f84 <__NVIC_SetPriorityGrouping+0x44>)
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f72:	4a04      	ldr	r2, [pc, #16]	@ (8008f84 <__NVIC_SetPriorityGrouping+0x44>)
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	60d3      	str	r3, [r2, #12]
}
 8008f78:	bf00      	nop
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	e000ed00 	.word	0xe000ed00

08008f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f8c:	4b04      	ldr	r3, [pc, #16]	@ (8008fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	0a1b      	lsrs	r3, r3, #8
 8008f92:	f003 0307 	and.w	r3, r3, #7
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	e000ed00 	.word	0xe000ed00

08008fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	4603      	mov	r3, r0
 8008fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	db0b      	blt.n	8008fce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fb6:	79fb      	ldrb	r3, [r7, #7]
 8008fb8:	f003 021f 	and.w	r2, r3, #31
 8008fbc:	4907      	ldr	r1, [pc, #28]	@ (8008fdc <__NVIC_EnableIRQ+0x38>)
 8008fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fc2:	095b      	lsrs	r3, r3, #5
 8008fc4:	2001      	movs	r0, #1
 8008fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8008fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008fce:	bf00      	nop
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	e000e100 	.word	0xe000e100

08008fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	6039      	str	r1, [r7, #0]
 8008fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	db0a      	blt.n	800900a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	b2da      	uxtb	r2, r3
 8008ff8:	490c      	ldr	r1, [pc, #48]	@ (800902c <__NVIC_SetPriority+0x4c>)
 8008ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ffe:	0112      	lsls	r2, r2, #4
 8009000:	b2d2      	uxtb	r2, r2
 8009002:	440b      	add	r3, r1
 8009004:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009008:	e00a      	b.n	8009020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	b2da      	uxtb	r2, r3
 800900e:	4908      	ldr	r1, [pc, #32]	@ (8009030 <__NVIC_SetPriority+0x50>)
 8009010:	79fb      	ldrb	r3, [r7, #7]
 8009012:	f003 030f 	and.w	r3, r3, #15
 8009016:	3b04      	subs	r3, #4
 8009018:	0112      	lsls	r2, r2, #4
 800901a:	b2d2      	uxtb	r2, r2
 800901c:	440b      	add	r3, r1
 800901e:	761a      	strb	r2, [r3, #24]
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	e000e100 	.word	0xe000e100
 8009030:	e000ed00 	.word	0xe000ed00

08009034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009034:	b480      	push	{r7}
 8009036:	b089      	sub	sp, #36	@ 0x24
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f003 0307 	and.w	r3, r3, #7
 8009046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	f1c3 0307 	rsb	r3, r3, #7
 800904e:	2b04      	cmp	r3, #4
 8009050:	bf28      	it	cs
 8009052:	2304      	movcs	r3, #4
 8009054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	3304      	adds	r3, #4
 800905a:	2b06      	cmp	r3, #6
 800905c:	d902      	bls.n	8009064 <NVIC_EncodePriority+0x30>
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	3b03      	subs	r3, #3
 8009062:	e000      	b.n	8009066 <NVIC_EncodePriority+0x32>
 8009064:	2300      	movs	r3, #0
 8009066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009068:	f04f 32ff 	mov.w	r2, #4294967295
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	fa02 f303 	lsl.w	r3, r2, r3
 8009072:	43da      	mvns	r2, r3
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	401a      	ands	r2, r3
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800907c:	f04f 31ff 	mov.w	r1, #4294967295
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	fa01 f303 	lsl.w	r3, r1, r3
 8009086:	43d9      	mvns	r1, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800908c:	4313      	orrs	r3, r2
         );
}
 800908e:	4618      	mov	r0, r3
 8009090:	3724      	adds	r7, #36	@ 0x24
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
	...

0800909c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090ac:	d301      	bcc.n	80090b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80090ae:	2301      	movs	r3, #1
 80090b0:	e00f      	b.n	80090d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090b2:	4a0a      	ldr	r2, [pc, #40]	@ (80090dc <SysTick_Config+0x40>)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80090ba:	210f      	movs	r1, #15
 80090bc:	f04f 30ff 	mov.w	r0, #4294967295
 80090c0:	f7ff ff8e 	bl	8008fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80090c4:	4b05      	ldr	r3, [pc, #20]	@ (80090dc <SysTick_Config+0x40>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80090ca:	4b04      	ldr	r3, [pc, #16]	@ (80090dc <SysTick_Config+0x40>)
 80090cc:	2207      	movs	r2, #7
 80090ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	e000e010 	.word	0xe000e010

080090e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7ff ff29 	bl	8008f40 <__NVIC_SetPriorityGrouping>
}
 80090ee:	bf00      	nop
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b086      	sub	sp, #24
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	4603      	mov	r3, r0
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	607a      	str	r2, [r7, #4]
 8009102:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009104:	f7ff ff40 	bl	8008f88 <__NVIC_GetPriorityGrouping>
 8009108:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	68b9      	ldr	r1, [r7, #8]
 800910e:	6978      	ldr	r0, [r7, #20]
 8009110:	f7ff ff90 	bl	8009034 <NVIC_EncodePriority>
 8009114:	4602      	mov	r2, r0
 8009116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800911a:	4611      	mov	r1, r2
 800911c:	4618      	mov	r0, r3
 800911e:	f7ff ff5f 	bl	8008fe0 <__NVIC_SetPriority>
}
 8009122:	bf00      	nop
 8009124:	3718      	adds	r7, #24
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b082      	sub	sp, #8
 800912e:	af00      	add	r7, sp, #0
 8009130:	4603      	mov	r3, r0
 8009132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009138:	4618      	mov	r0, r3
 800913a:	f7ff ff33 	bl	8008fa4 <__NVIC_EnableIRQ>
}
 800913e:	bf00      	nop
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b082      	sub	sp, #8
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7ff ffa4 	bl	800909c <SysTick_Config>
 8009154:	4603      	mov	r3, r0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
	...

08009160 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d101      	bne.n	8009172 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e08d      	b.n	800928e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	4b47      	ldr	r3, [pc, #284]	@ (8009298 <HAL_DMA_Init+0x138>)
 800917a:	429a      	cmp	r2, r3
 800917c:	d80f      	bhi.n	800919e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	4b45      	ldr	r3, [pc, #276]	@ (800929c <HAL_DMA_Init+0x13c>)
 8009186:	4413      	add	r3, r2
 8009188:	4a45      	ldr	r2, [pc, #276]	@ (80092a0 <HAL_DMA_Init+0x140>)
 800918a:	fba2 2303 	umull	r2, r3, r2, r3
 800918e:	091b      	lsrs	r3, r3, #4
 8009190:	009a      	lsls	r2, r3, #2
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a42      	ldr	r2, [pc, #264]	@ (80092a4 <HAL_DMA_Init+0x144>)
 800919a:	641a      	str	r2, [r3, #64]	@ 0x40
 800919c:	e00e      	b.n	80091bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	4b40      	ldr	r3, [pc, #256]	@ (80092a8 <HAL_DMA_Init+0x148>)
 80091a6:	4413      	add	r3, r2
 80091a8:	4a3d      	ldr	r2, [pc, #244]	@ (80092a0 <HAL_DMA_Init+0x140>)
 80091aa:	fba2 2303 	umull	r2, r3, r2, r3
 80091ae:	091b      	lsrs	r3, r3, #4
 80091b0:	009a      	lsls	r2, r3, #2
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a3c      	ldr	r2, [pc, #240]	@ (80092ac <HAL_DMA_Init+0x14c>)
 80091ba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2202      	movs	r2, #2
 80091c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80091d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80091e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	4313      	orrs	r3, r2
 8009204:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fa76 	bl	8009700 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800921c:	d102      	bne.n	8009224 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685a      	ldr	r2, [r3, #4]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800922c:	b2d2      	uxtb	r2, r2
 800922e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009238:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d010      	beq.n	8009264 <HAL_DMA_Init+0x104>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	2b04      	cmp	r3, #4
 8009248:	d80c      	bhi.n	8009264 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fa96 	bl	800977c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009254:	2200      	movs	r2, #0
 8009256:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009260:	605a      	str	r2, [r3, #4]
 8009262:	e008      	b.n	8009276 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	40020407 	.word	0x40020407
 800929c:	bffdfff8 	.word	0xbffdfff8
 80092a0:	cccccccd 	.word	0xcccccccd
 80092a4:	40020000 	.word	0x40020000
 80092a8:	bffdfbf8 	.word	0xbffdfbf8
 80092ac:	40020400 	.word	0x40020400

080092b0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
 80092bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d101      	bne.n	80092d0 <HAL_DMA_Start_IT+0x20>
 80092cc:	2302      	movs	r3, #2
 80092ce:	e066      	b.n	800939e <HAL_DMA_Start_IT+0xee>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d155      	bne.n	8009390 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2202      	movs	r2, #2
 80092e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f022 0201 	bic.w	r2, r2, #1
 8009300:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	68b9      	ldr	r1, [r7, #8]
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 f9bb 	bl	8009684 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009312:	2b00      	cmp	r3, #0
 8009314:	d008      	beq.n	8009328 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f042 020e 	orr.w	r2, r2, #14
 8009324:	601a      	str	r2, [r3, #0]
 8009326:	e00f      	b.n	8009348 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 0204 	bic.w	r2, r2, #4
 8009336:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f042 020a 	orr.w	r2, r2, #10
 8009346:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d007      	beq.n	8009366 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009360:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009364:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800936a:	2b00      	cmp	r3, #0
 800936c:	d007      	beq.n	800937e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009378:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800937c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f042 0201 	orr.w	r2, r2, #1
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	e005      	b.n	800939c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009398:	2302      	movs	r3, #2
 800939a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800939c:	7dfb      	ldrb	r3, [r7, #23]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80093a6:	b480      	push	{r7}
 80093a8:	b085      	sub	sp, #20
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d005      	beq.n	80093ca <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2204      	movs	r2, #4
 80093c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	73fb      	strb	r3, [r7, #15]
 80093c8:	e037      	b.n	800943a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f022 020e 	bic.w	r2, r2, #14
 80093d8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80093e8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f022 0201 	bic.w	r2, r2, #1
 80093f8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093fe:	f003 021f 	and.w	r2, r3, #31
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009406:	2101      	movs	r1, #1
 8009408:	fa01 f202 	lsl.w	r2, r1, r2
 800940c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009416:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00c      	beq.n	800943a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800942a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800942e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009438:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800944a:	7bfb      	ldrb	r3, [r7, #15]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b02      	cmp	r3, #2
 800946e:	d00d      	beq.n	800948c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2204      	movs	r2, #4
 8009474:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	73fb      	strb	r3, [r7, #15]
 800948a:	e047      	b.n	800951c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f022 020e 	bic.w	r2, r2, #14
 800949a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0201 	bic.w	r2, r2, #1
 80094aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80094ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094c0:	f003 021f 	and.w	r2, r3, #31
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c8:	2101      	movs	r1, #1
 80094ca:	fa01 f202 	lsl.w	r2, r1, r2
 80094ce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80094d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00c      	beq.n	80094fc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80094f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80094fa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009510:	2b00      	cmp	r3, #0
 8009512:	d003      	beq.n	800951c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	4798      	blx	r3
    }
  }
  return status;
 800951c:	7bfb      	ldrb	r3, [r7, #15]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009542:	f003 031f 	and.w	r3, r3, #31
 8009546:	2204      	movs	r2, #4
 8009548:	409a      	lsls	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4013      	ands	r3, r2
 800954e:	2b00      	cmp	r3, #0
 8009550:	d026      	beq.n	80095a0 <HAL_DMA_IRQHandler+0x7a>
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	f003 0304 	and.w	r3, r3, #4
 8009558:	2b00      	cmp	r3, #0
 800955a:	d021      	beq.n	80095a0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0320 	and.w	r3, r3, #32
 8009566:	2b00      	cmp	r3, #0
 8009568:	d107      	bne.n	800957a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f022 0204 	bic.w	r2, r2, #4
 8009578:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800957e:	f003 021f 	and.w	r2, r3, #31
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009586:	2104      	movs	r1, #4
 8009588:	fa01 f202 	lsl.w	r2, r1, r2
 800958c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009592:	2b00      	cmp	r3, #0
 8009594:	d071      	beq.n	800967a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800959e:	e06c      	b.n	800967a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095a4:	f003 031f 	and.w	r3, r3, #31
 80095a8:	2202      	movs	r2, #2
 80095aa:	409a      	lsls	r2, r3
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4013      	ands	r3, r2
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d02e      	beq.n	8009612 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	f003 0302 	and.w	r3, r3, #2
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d029      	beq.n	8009612 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 0320 	and.w	r3, r3, #32
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10b      	bne.n	80095e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 020a 	bic.w	r2, r2, #10
 80095da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095e8:	f003 021f 	and.w	r2, r3, #31
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095f0:	2102      	movs	r1, #2
 80095f2:	fa01 f202 	lsl.w	r2, r1, r2
 80095f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009604:	2b00      	cmp	r3, #0
 8009606:	d038      	beq.n	800967a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009610:	e033      	b.n	800967a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009616:	f003 031f 	and.w	r3, r3, #31
 800961a:	2208      	movs	r2, #8
 800961c:	409a      	lsls	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	4013      	ands	r3, r2
 8009622:	2b00      	cmp	r3, #0
 8009624:	d02a      	beq.n	800967c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	f003 0308 	and.w	r3, r3, #8
 800962c:	2b00      	cmp	r3, #0
 800962e:	d025      	beq.n	800967c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f022 020e 	bic.w	r2, r2, #14
 800963e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009644:	f003 021f 	and.w	r2, r3, #31
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800964c:	2101      	movs	r1, #1
 800964e:	fa01 f202 	lsl.w	r2, r1, r2
 8009652:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800966e:	2b00      	cmp	r3, #0
 8009670:	d004      	beq.n	800967c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800967a:	bf00      	nop
 800967c:	bf00      	nop
}
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
 8009690:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800969a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d004      	beq.n	80096ae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80096ac:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096b2:	f003 021f 	and.w	r2, r3, #31
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ba:	2101      	movs	r1, #1
 80096bc:	fa01 f202 	lsl.w	r2, r1, r2
 80096c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	2b10      	cmp	r3, #16
 80096d0:	d108      	bne.n	80096e4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80096e2:	e007      	b.n	80096f4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	60da      	str	r2, [r3, #12]
}
 80096f4:	bf00      	nop
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009700:	b480      	push	{r7}
 8009702:	b087      	sub	sp, #28
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	461a      	mov	r2, r3
 800970e:	4b16      	ldr	r3, [pc, #88]	@ (8009768 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009710:	429a      	cmp	r2, r3
 8009712:	d802      	bhi.n	800971a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009714:	4b15      	ldr	r3, [pc, #84]	@ (800976c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009716:	617b      	str	r3, [r7, #20]
 8009718:	e001      	b.n	800971e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800971a:	4b15      	ldr	r3, [pc, #84]	@ (8009770 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800971c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	b2db      	uxtb	r3, r3
 8009728:	3b08      	subs	r3, #8
 800972a:	4a12      	ldr	r2, [pc, #72]	@ (8009774 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800972c:	fba2 2303 	umull	r2, r3, r2, r3
 8009730:	091b      	lsrs	r3, r3, #4
 8009732:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009738:	089b      	lsrs	r3, r3, #2
 800973a:	009a      	lsls	r2, r3, #2
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	4413      	add	r3, r2
 8009740:	461a      	mov	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a0b      	ldr	r2, [pc, #44]	@ (8009778 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800974a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f003 031f 	and.w	r3, r3, #31
 8009752:	2201      	movs	r2, #1
 8009754:	409a      	lsls	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800975a:	bf00      	nop
 800975c:	371c      	adds	r7, #28
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	40020407 	.word	0x40020407
 800976c:	40020800 	.word	0x40020800
 8009770:	40020820 	.word	0x40020820
 8009774:	cccccccd 	.word	0xcccccccd
 8009778:	40020880 	.word	0x40020880

0800977c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	4b0b      	ldr	r3, [pc, #44]	@ (80097bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	461a      	mov	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a08      	ldr	r2, [pc, #32]	@ (80097c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800979e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	3b01      	subs	r3, #1
 80097a4:	f003 031f 	and.w	r3, r3, #31
 80097a8:	2201      	movs	r2, #1
 80097aa:	409a      	lsls	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80097b0:	bf00      	nop
 80097b2:	3714      	adds	r7, #20
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	1000823f 	.word	0x1000823f
 80097c0:	40020940 	.word	0x40020940

080097c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b087      	sub	sp, #28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80097ce:	2300      	movs	r3, #0
 80097d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80097d2:	e15a      	b.n	8009a8a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	2101      	movs	r1, #1
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	fa01 f303 	lsl.w	r3, r1, r3
 80097e0:	4013      	ands	r3, r2
 80097e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f000 814c 	beq.w	8009a84 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	f003 0303 	and.w	r3, r3, #3
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d005      	beq.n	8009804 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009800:	2b02      	cmp	r3, #2
 8009802:	d130      	bne.n	8009866 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	005b      	lsls	r3, r3, #1
 800980e:	2203      	movs	r2, #3
 8009810:	fa02 f303 	lsl.w	r3, r2, r3
 8009814:	43db      	mvns	r3, r3
 8009816:	693a      	ldr	r2, [r7, #16]
 8009818:	4013      	ands	r3, r2
 800981a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	68da      	ldr	r2, [r3, #12]
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	005b      	lsls	r3, r3, #1
 8009824:	fa02 f303 	lsl.w	r3, r2, r3
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	4313      	orrs	r3, r2
 800982c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800983a:	2201      	movs	r2, #1
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	fa02 f303 	lsl.w	r3, r2, r3
 8009842:	43db      	mvns	r3, r3
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	4013      	ands	r3, r2
 8009848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	091b      	lsrs	r3, r3, #4
 8009850:	f003 0201 	and.w	r2, r3, #1
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	fa02 f303 	lsl.w	r3, r2, r3
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	4313      	orrs	r3, r2
 800985e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	f003 0303 	and.w	r3, r3, #3
 800986e:	2b03      	cmp	r3, #3
 8009870:	d017      	beq.n	80098a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	005b      	lsls	r3, r3, #1
 800987c:	2203      	movs	r2, #3
 800987e:	fa02 f303 	lsl.w	r3, r2, r3
 8009882:	43db      	mvns	r3, r3
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	4013      	ands	r3, r2
 8009888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	689a      	ldr	r2, [r3, #8]
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	005b      	lsls	r3, r3, #1
 8009892:	fa02 f303 	lsl.w	r3, r2, r3
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	4313      	orrs	r3, r2
 800989a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	693a      	ldr	r2, [r7, #16]
 80098a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	f003 0303 	and.w	r3, r3, #3
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d123      	bne.n	80098f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	08da      	lsrs	r2, r3, #3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	3208      	adds	r2, #8
 80098b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	f003 0307 	and.w	r3, r3, #7
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	220f      	movs	r2, #15
 80098c6:	fa02 f303 	lsl.w	r3, r2, r3
 80098ca:	43db      	mvns	r3, r3
 80098cc:	693a      	ldr	r2, [r7, #16]
 80098ce:	4013      	ands	r3, r2
 80098d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	691a      	ldr	r2, [r3, #16]
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	f003 0307 	and.w	r3, r3, #7
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	fa02 f303 	lsl.w	r3, r2, r3
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	08da      	lsrs	r2, r3, #3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	3208      	adds	r2, #8
 80098f0:	6939      	ldr	r1, [r7, #16]
 80098f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	005b      	lsls	r3, r3, #1
 8009900:	2203      	movs	r2, #3
 8009902:	fa02 f303 	lsl.w	r3, r2, r3
 8009906:	43db      	mvns	r3, r3
 8009908:	693a      	ldr	r2, [r7, #16]
 800990a:	4013      	ands	r3, r2
 800990c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	f003 0203 	and.w	r2, r3, #3
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	fa02 f303 	lsl.w	r3, r2, r3
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	4313      	orrs	r3, r2
 8009922:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009932:	2b00      	cmp	r3, #0
 8009934:	f000 80a6 	beq.w	8009a84 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009938:	4b5b      	ldr	r3, [pc, #364]	@ (8009aa8 <HAL_GPIO_Init+0x2e4>)
 800993a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800993c:	4a5a      	ldr	r2, [pc, #360]	@ (8009aa8 <HAL_GPIO_Init+0x2e4>)
 800993e:	f043 0301 	orr.w	r3, r3, #1
 8009942:	6613      	str	r3, [r2, #96]	@ 0x60
 8009944:	4b58      	ldr	r3, [pc, #352]	@ (8009aa8 <HAL_GPIO_Init+0x2e4>)
 8009946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009948:	f003 0301 	and.w	r3, r3, #1
 800994c:	60bb      	str	r3, [r7, #8]
 800994e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009950:	4a56      	ldr	r2, [pc, #344]	@ (8009aac <HAL_GPIO_Init+0x2e8>)
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	089b      	lsrs	r3, r3, #2
 8009956:	3302      	adds	r3, #2
 8009958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800995c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	f003 0303 	and.w	r3, r3, #3
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	220f      	movs	r2, #15
 8009968:	fa02 f303 	lsl.w	r3, r2, r3
 800996c:	43db      	mvns	r3, r3
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	4013      	ands	r3, r2
 8009972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800997a:	d01f      	beq.n	80099bc <HAL_GPIO_Init+0x1f8>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a4c      	ldr	r2, [pc, #304]	@ (8009ab0 <HAL_GPIO_Init+0x2ec>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d019      	beq.n	80099b8 <HAL_GPIO_Init+0x1f4>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a4b      	ldr	r2, [pc, #300]	@ (8009ab4 <HAL_GPIO_Init+0x2f0>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d013      	beq.n	80099b4 <HAL_GPIO_Init+0x1f0>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4a4a      	ldr	r2, [pc, #296]	@ (8009ab8 <HAL_GPIO_Init+0x2f4>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d00d      	beq.n	80099b0 <HAL_GPIO_Init+0x1ec>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a49      	ldr	r2, [pc, #292]	@ (8009abc <HAL_GPIO_Init+0x2f8>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d007      	beq.n	80099ac <HAL_GPIO_Init+0x1e8>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a48      	ldr	r2, [pc, #288]	@ (8009ac0 <HAL_GPIO_Init+0x2fc>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d101      	bne.n	80099a8 <HAL_GPIO_Init+0x1e4>
 80099a4:	2305      	movs	r3, #5
 80099a6:	e00a      	b.n	80099be <HAL_GPIO_Init+0x1fa>
 80099a8:	2306      	movs	r3, #6
 80099aa:	e008      	b.n	80099be <HAL_GPIO_Init+0x1fa>
 80099ac:	2304      	movs	r3, #4
 80099ae:	e006      	b.n	80099be <HAL_GPIO_Init+0x1fa>
 80099b0:	2303      	movs	r3, #3
 80099b2:	e004      	b.n	80099be <HAL_GPIO_Init+0x1fa>
 80099b4:	2302      	movs	r3, #2
 80099b6:	e002      	b.n	80099be <HAL_GPIO_Init+0x1fa>
 80099b8:	2301      	movs	r3, #1
 80099ba:	e000      	b.n	80099be <HAL_GPIO_Init+0x1fa>
 80099bc:	2300      	movs	r3, #0
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	f002 0203 	and.w	r2, r2, #3
 80099c4:	0092      	lsls	r2, r2, #2
 80099c6:	4093      	lsls	r3, r2
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80099ce:	4937      	ldr	r1, [pc, #220]	@ (8009aac <HAL_GPIO_Init+0x2e8>)
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	089b      	lsrs	r3, r3, #2
 80099d4:	3302      	adds	r3, #2
 80099d6:	693a      	ldr	r2, [r7, #16]
 80099d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80099dc:	4b39      	ldr	r3, [pc, #228]	@ (8009ac4 <HAL_GPIO_Init+0x300>)
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	43db      	mvns	r3, r3
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	4013      	ands	r3, r2
 80099ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d003      	beq.n	8009a00 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80099f8:	693a      	ldr	r2, [r7, #16]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009a00:	4a30      	ldr	r2, [pc, #192]	@ (8009ac4 <HAL_GPIO_Init+0x300>)
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009a06:	4b2f      	ldr	r3, [pc, #188]	@ (8009ac4 <HAL_GPIO_Init+0x300>)
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	43db      	mvns	r3, r3
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	4013      	ands	r3, r2
 8009a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d003      	beq.n	8009a2a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009a2a:	4a26      	ldr	r2, [pc, #152]	@ (8009ac4 <HAL_GPIO_Init+0x300>)
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009a30:	4b24      	ldr	r3, [pc, #144]	@ (8009ac4 <HAL_GPIO_Init+0x300>)
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	43db      	mvns	r3, r3
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d003      	beq.n	8009a54 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009a54:	4a1b      	ldr	r2, [pc, #108]	@ (8009ac4 <HAL_GPIO_Init+0x300>)
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8009ac4 <HAL_GPIO_Init+0x300>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	43db      	mvns	r3, r3
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	4013      	ands	r3, r2
 8009a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d003      	beq.n	8009a7e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009a7e:	4a11      	ldr	r2, [pc, #68]	@ (8009ac4 <HAL_GPIO_Init+0x300>)
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	3301      	adds	r3, #1
 8009a88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	fa22 f303 	lsr.w	r3, r2, r3
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f47f ae9d 	bne.w	80097d4 <HAL_GPIO_Init+0x10>
  }
}
 8009a9a:	bf00      	nop
 8009a9c:	bf00      	nop
 8009a9e:	371c      	adds	r7, #28
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	40021000 	.word	0x40021000
 8009aac:	40010000 	.word	0x40010000
 8009ab0:	48000400 	.word	0x48000400
 8009ab4:	48000800 	.word	0x48000800
 8009ab8:	48000c00 	.word	0x48000c00
 8009abc:	48001000 	.word	0x48001000
 8009ac0:	48001400 	.word	0x48001400
 8009ac4:	40010400 	.word	0x40010400

08009ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	691a      	ldr	r2, [r3, #16]
 8009ad8:	887b      	ldrh	r3, [r7, #2]
 8009ada:	4013      	ands	r3, r2
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d002      	beq.n	8009ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	73fb      	strb	r3, [r7, #15]
 8009ae4:	e001      	b.n	8009aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	460b      	mov	r3, r1
 8009b02:	807b      	strh	r3, [r7, #2]
 8009b04:	4613      	mov	r3, r2
 8009b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009b08:	787b      	ldrb	r3, [r7, #1]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009b0e:	887a      	ldrh	r2, [r7, #2]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009b14:	e002      	b.n	8009b1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009b16:	887a      	ldrh	r2, [r7, #2]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009b32:	4b08      	ldr	r3, [pc, #32]	@ (8009b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009b34:	695a      	ldr	r2, [r3, #20]
 8009b36:	88fb      	ldrh	r3, [r7, #6]
 8009b38:	4013      	ands	r3, r2
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d006      	beq.n	8009b4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009b3e:	4a05      	ldr	r2, [pc, #20]	@ (8009b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009b40:	88fb      	ldrh	r3, [r7, #6]
 8009b42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009b44:	88fb      	ldrh	r3, [r7, #6]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fb ff54 	bl	80059f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	40010400 	.word	0x40010400

08009b58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d141      	bne.n	8009bea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009b66:	4b4b      	ldr	r3, [pc, #300]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b72:	d131      	bne.n	8009bd8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009b74:	4b47      	ldr	r3, [pc, #284]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b7a:	4a46      	ldr	r2, [pc, #280]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009b84:	4b43      	ldr	r3, [pc, #268]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009b8c:	4a41      	ldr	r2, [pc, #260]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009b92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009b94:	4b40      	ldr	r3, [pc, #256]	@ (8009c98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2232      	movs	r2, #50	@ 0x32
 8009b9a:	fb02 f303 	mul.w	r3, r2, r3
 8009b9e:	4a3f      	ldr	r2, [pc, #252]	@ (8009c9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba4:	0c9b      	lsrs	r3, r3, #18
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009baa:	e002      	b.n	8009bb2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009bb2:	4b38      	ldr	r3, [pc, #224]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bbe:	d102      	bne.n	8009bc6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1f2      	bne.n	8009bac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009bc6:	4b33      	ldr	r3, [pc, #204]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bd2:	d158      	bne.n	8009c86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e057      	b.n	8009c88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bde:	4a2d      	ldr	r2, [pc, #180]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009be0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009be4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009be8:	e04d      	b.n	8009c86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bf0:	d141      	bne.n	8009c76 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009bf2:	4b28      	ldr	r3, [pc, #160]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bfe:	d131      	bne.n	8009c64 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009c00:	4b24      	ldr	r3, [pc, #144]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c06:	4a23      	ldr	r2, [pc, #140]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c10:	4b20      	ldr	r3, [pc, #128]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009c18:	4a1e      	ldr	r2, [pc, #120]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009c1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009c20:	4b1d      	ldr	r3, [pc, #116]	@ (8009c98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2232      	movs	r2, #50	@ 0x32
 8009c26:	fb02 f303 	mul.w	r3, r2, r3
 8009c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8009c9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c30:	0c9b      	lsrs	r3, r3, #18
 8009c32:	3301      	adds	r3, #1
 8009c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009c36:	e002      	b.n	8009c3e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009c3e:	4b15      	ldr	r3, [pc, #84]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c40:	695b      	ldr	r3, [r3, #20]
 8009c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c4a:	d102      	bne.n	8009c52 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1f2      	bne.n	8009c38 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009c52:	4b10      	ldr	r3, [pc, #64]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c5e:	d112      	bne.n	8009c86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009c60:	2303      	movs	r3, #3
 8009c62:	e011      	b.n	8009c88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009c64:	4b0b      	ldr	r3, [pc, #44]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009c74:	e007      	b.n	8009c86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009c76:	4b07      	ldr	r3, [pc, #28]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009c7e:	4a05      	ldr	r2, [pc, #20]	@ (8009c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009c80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009c84:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	40007000 	.word	0x40007000
 8009c98:	20000134 	.word	0x20000134
 8009c9c:	431bde83 	.word	0x431bde83

08009ca0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009ca4:	4b05      	ldr	r3, [pc, #20]	@ (8009cbc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	4a04      	ldr	r2, [pc, #16]	@ (8009cbc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009caa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009cae:	6093      	str	r3, [r2, #8]
}
 8009cb0:	bf00      	nop
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	40007000 	.word	0x40007000

08009cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b088      	sub	sp, #32
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d101      	bne.n	8009cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e2fe      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f003 0301 	and.w	r3, r3, #1
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d075      	beq.n	8009dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cde:	4b97      	ldr	r3, [pc, #604]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	f003 030c 	and.w	r3, r3, #12
 8009ce6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009ce8:	4b94      	ldr	r3, [pc, #592]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	f003 0303 	and.w	r3, r3, #3
 8009cf0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	2b0c      	cmp	r3, #12
 8009cf6:	d102      	bne.n	8009cfe <HAL_RCC_OscConfig+0x3e>
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	2b03      	cmp	r3, #3
 8009cfc:	d002      	beq.n	8009d04 <HAL_RCC_OscConfig+0x44>
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	2b08      	cmp	r3, #8
 8009d02:	d10b      	bne.n	8009d1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d04:	4b8d      	ldr	r3, [pc, #564]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d05b      	beq.n	8009dc8 <HAL_RCC_OscConfig+0x108>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d157      	bne.n	8009dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e2d9      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d24:	d106      	bne.n	8009d34 <HAL_RCC_OscConfig+0x74>
 8009d26:	4b85      	ldr	r3, [pc, #532]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a84      	ldr	r2, [pc, #528]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d30:	6013      	str	r3, [r2, #0]
 8009d32:	e01d      	b.n	8009d70 <HAL_RCC_OscConfig+0xb0>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009d3c:	d10c      	bne.n	8009d58 <HAL_RCC_OscConfig+0x98>
 8009d3e:	4b7f      	ldr	r3, [pc, #508]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a7e      	ldr	r2, [pc, #504]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009d48:	6013      	str	r3, [r2, #0]
 8009d4a:	4b7c      	ldr	r3, [pc, #496]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a7b      	ldr	r2, [pc, #492]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	e00b      	b.n	8009d70 <HAL_RCC_OscConfig+0xb0>
 8009d58:	4b78      	ldr	r3, [pc, #480]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a77      	ldr	r2, [pc, #476]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d62:	6013      	str	r3, [r2, #0]
 8009d64:	4b75      	ldr	r3, [pc, #468]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a74      	ldr	r2, [pc, #464]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009d6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d013      	beq.n	8009da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d78:	f7fd fc5e 	bl	8007638 <HAL_GetTick>
 8009d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d7e:	e008      	b.n	8009d92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d80:	f7fd fc5a 	bl	8007638 <HAL_GetTick>
 8009d84:	4602      	mov	r2, r0
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	1ad3      	subs	r3, r2, r3
 8009d8a:	2b64      	cmp	r3, #100	@ 0x64
 8009d8c:	d901      	bls.n	8009d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e29e      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d92:	4b6a      	ldr	r3, [pc, #424]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d0f0      	beq.n	8009d80 <HAL_RCC_OscConfig+0xc0>
 8009d9e:	e014      	b.n	8009dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009da0:	f7fd fc4a 	bl	8007638 <HAL_GetTick>
 8009da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009da6:	e008      	b.n	8009dba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009da8:	f7fd fc46 	bl	8007638 <HAL_GetTick>
 8009dac:	4602      	mov	r2, r0
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	2b64      	cmp	r3, #100	@ 0x64
 8009db4:	d901      	bls.n	8009dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009db6:	2303      	movs	r3, #3
 8009db8:	e28a      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009dba:	4b60      	ldr	r3, [pc, #384]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1f0      	bne.n	8009da8 <HAL_RCC_OscConfig+0xe8>
 8009dc6:	e000      	b.n	8009dca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f003 0302 	and.w	r3, r3, #2
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d075      	beq.n	8009ec2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dd6:	4b59      	ldr	r3, [pc, #356]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	f003 030c 	and.w	r3, r3, #12
 8009dde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009de0:	4b56      	ldr	r3, [pc, #344]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	f003 0303 	and.w	r3, r3, #3
 8009de8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	2b0c      	cmp	r3, #12
 8009dee:	d102      	bne.n	8009df6 <HAL_RCC_OscConfig+0x136>
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d002      	beq.n	8009dfc <HAL_RCC_OscConfig+0x13c>
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	2b04      	cmp	r3, #4
 8009dfa:	d11f      	bne.n	8009e3c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009dfc:	4b4f      	ldr	r3, [pc, #316]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d005      	beq.n	8009e14 <HAL_RCC_OscConfig+0x154>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	e25d      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e14:	4b49      	ldr	r3, [pc, #292]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	061b      	lsls	r3, r3, #24
 8009e22:	4946      	ldr	r1, [pc, #280]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009e24:	4313      	orrs	r3, r2
 8009e26:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009e28:	4b45      	ldr	r3, [pc, #276]	@ (8009f40 <HAL_RCC_OscConfig+0x280>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7fd fbb7 	bl	80075a0 <HAL_InitTick>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d043      	beq.n	8009ec0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e249      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d023      	beq.n	8009e8c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009e44:	4b3d      	ldr	r3, [pc, #244]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a3c      	ldr	r2, [pc, #240]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e50:	f7fd fbf2 	bl	8007638 <HAL_GetTick>
 8009e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e56:	e008      	b.n	8009e6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e58:	f7fd fbee 	bl	8007638 <HAL_GetTick>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d901      	bls.n	8009e6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009e66:	2303      	movs	r3, #3
 8009e68:	e232      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e6a:	4b34      	ldr	r3, [pc, #208]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d0f0      	beq.n	8009e58 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e76:	4b31      	ldr	r3, [pc, #196]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	061b      	lsls	r3, r3, #24
 8009e84:	492d      	ldr	r1, [pc, #180]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009e86:	4313      	orrs	r3, r2
 8009e88:	604b      	str	r3, [r1, #4]
 8009e8a:	e01a      	b.n	8009ec2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a2a      	ldr	r2, [pc, #168]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009e92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e98:	f7fd fbce 	bl	8007638 <HAL_GetTick>
 8009e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009e9e:	e008      	b.n	8009eb2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ea0:	f7fd fbca 	bl	8007638 <HAL_GetTick>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d901      	bls.n	8009eb2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e20e      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009eb2:	4b22      	ldr	r3, [pc, #136]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1f0      	bne.n	8009ea0 <HAL_RCC_OscConfig+0x1e0>
 8009ebe:	e000      	b.n	8009ec2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ec0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 0308 	and.w	r3, r3, #8
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d041      	beq.n	8009f52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d01c      	beq.n	8009f10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ed6:	4b19      	ldr	r3, [pc, #100]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009edc:	4a17      	ldr	r2, [pc, #92]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009ede:	f043 0301 	orr.w	r3, r3, #1
 8009ee2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ee6:	f7fd fba7 	bl	8007638 <HAL_GetTick>
 8009eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009eec:	e008      	b.n	8009f00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009eee:	f7fd fba3 	bl	8007638 <HAL_GetTick>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d901      	bls.n	8009f00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e1e7      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009f00:	4b0e      	ldr	r3, [pc, #56]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f06:	f003 0302 	and.w	r3, r3, #2
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d0ef      	beq.n	8009eee <HAL_RCC_OscConfig+0x22e>
 8009f0e:	e020      	b.n	8009f52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f10:	4b0a      	ldr	r3, [pc, #40]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f16:	4a09      	ldr	r2, [pc, #36]	@ (8009f3c <HAL_RCC_OscConfig+0x27c>)
 8009f18:	f023 0301 	bic.w	r3, r3, #1
 8009f1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f20:	f7fd fb8a 	bl	8007638 <HAL_GetTick>
 8009f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009f26:	e00d      	b.n	8009f44 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f28:	f7fd fb86 	bl	8007638 <HAL_GetTick>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d906      	bls.n	8009f44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009f36:	2303      	movs	r3, #3
 8009f38:	e1ca      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
 8009f3a:	bf00      	nop
 8009f3c:	40021000 	.word	0x40021000
 8009f40:	20000138 	.word	0x20000138
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009f44:	4b8c      	ldr	r3, [pc, #560]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 8009f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f4a:	f003 0302 	and.w	r3, r3, #2
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1ea      	bne.n	8009f28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0304 	and.w	r3, r3, #4
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 80a6 	beq.w	800a0ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f60:	2300      	movs	r3, #0
 8009f62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009f64:	4b84      	ldr	r3, [pc, #528]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 8009f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <HAL_RCC_OscConfig+0x2b4>
 8009f70:	2301      	movs	r3, #1
 8009f72:	e000      	b.n	8009f76 <HAL_RCC_OscConfig+0x2b6>
 8009f74:	2300      	movs	r3, #0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00d      	beq.n	8009f96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f7a:	4b7f      	ldr	r3, [pc, #508]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 8009f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f7e:	4a7e      	ldr	r2, [pc, #504]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 8009f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f84:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f86:	4b7c      	ldr	r3, [pc, #496]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 8009f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f8e:	60fb      	str	r3, [r7, #12]
 8009f90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009f92:	2301      	movs	r3, #1
 8009f94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009f96:	4b79      	ldr	r3, [pc, #484]	@ (800a17c <HAL_RCC_OscConfig+0x4bc>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d118      	bne.n	8009fd4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009fa2:	4b76      	ldr	r3, [pc, #472]	@ (800a17c <HAL_RCC_OscConfig+0x4bc>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a75      	ldr	r2, [pc, #468]	@ (800a17c <HAL_RCC_OscConfig+0x4bc>)
 8009fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009fae:	f7fd fb43 	bl	8007638 <HAL_GetTick>
 8009fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009fb4:	e008      	b.n	8009fc8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fb6:	f7fd fb3f 	bl	8007638 <HAL_GetTick>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d901      	bls.n	8009fc8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	e183      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009fc8:	4b6c      	ldr	r3, [pc, #432]	@ (800a17c <HAL_RCC_OscConfig+0x4bc>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d0f0      	beq.n	8009fb6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d108      	bne.n	8009fee <HAL_RCC_OscConfig+0x32e>
 8009fdc:	4b66      	ldr	r3, [pc, #408]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 8009fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fe2:	4a65      	ldr	r2, [pc, #404]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 8009fe4:	f043 0301 	orr.w	r3, r3, #1
 8009fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009fec:	e024      	b.n	800a038 <HAL_RCC_OscConfig+0x378>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	2b05      	cmp	r3, #5
 8009ff4:	d110      	bne.n	800a018 <HAL_RCC_OscConfig+0x358>
 8009ff6:	4b60      	ldr	r3, [pc, #384]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 8009ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ffc:	4a5e      	ldr	r2, [pc, #376]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 8009ffe:	f043 0304 	orr.w	r3, r3, #4
 800a002:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a006:	4b5c      	ldr	r3, [pc, #368]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a00c:	4a5a      	ldr	r2, [pc, #360]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a00e:	f043 0301 	orr.w	r3, r3, #1
 800a012:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a016:	e00f      	b.n	800a038 <HAL_RCC_OscConfig+0x378>
 800a018:	4b57      	ldr	r3, [pc, #348]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a01a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a01e:	4a56      	ldr	r2, [pc, #344]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a020:	f023 0301 	bic.w	r3, r3, #1
 800a024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a028:	4b53      	ldr	r3, [pc, #332]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a02a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a02e:	4a52      	ldr	r2, [pc, #328]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a030:	f023 0304 	bic.w	r3, r3, #4
 800a034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d016      	beq.n	800a06e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a040:	f7fd fafa 	bl	8007638 <HAL_GetTick>
 800a044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a046:	e00a      	b.n	800a05e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a048:	f7fd faf6 	bl	8007638 <HAL_GetTick>
 800a04c:	4602      	mov	r2, r0
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a056:	4293      	cmp	r3, r2
 800a058:	d901      	bls.n	800a05e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e138      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a05e:	4b46      	ldr	r3, [pc, #280]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a064:	f003 0302 	and.w	r3, r3, #2
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d0ed      	beq.n	800a048 <HAL_RCC_OscConfig+0x388>
 800a06c:	e015      	b.n	800a09a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a06e:	f7fd fae3 	bl	8007638 <HAL_GetTick>
 800a072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a074:	e00a      	b.n	800a08c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a076:	f7fd fadf 	bl	8007638 <HAL_GetTick>
 800a07a:	4602      	mov	r2, r0
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	1ad3      	subs	r3, r2, r3
 800a080:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a084:	4293      	cmp	r3, r2
 800a086:	d901      	bls.n	800a08c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a088:	2303      	movs	r3, #3
 800a08a:	e121      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a08c:	4b3a      	ldr	r3, [pc, #232]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a08e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a092:	f003 0302 	and.w	r3, r3, #2
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1ed      	bne.n	800a076 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a09a:	7ffb      	ldrb	r3, [r7, #31]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d105      	bne.n	800a0ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0a0:	4b35      	ldr	r3, [pc, #212]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a0a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0a4:	4a34      	ldr	r2, [pc, #208]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a0a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f003 0320 	and.w	r3, r3, #32
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d03c      	beq.n	800a132 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d01c      	beq.n	800a0fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a0c0:	4b2d      	ldr	r3, [pc, #180]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a0c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a0c6:	4a2c      	ldr	r2, [pc, #176]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a0c8:	f043 0301 	orr.w	r3, r3, #1
 800a0cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0d0:	f7fd fab2 	bl	8007638 <HAL_GetTick>
 800a0d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a0d6:	e008      	b.n	800a0ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a0d8:	f7fd faae 	bl	8007638 <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d901      	bls.n	800a0ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e0f2      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a0ea:	4b23      	ldr	r3, [pc, #140]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a0ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a0f0:	f003 0302 	and.w	r3, r3, #2
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d0ef      	beq.n	800a0d8 <HAL_RCC_OscConfig+0x418>
 800a0f8:	e01b      	b.n	800a132 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a0fa:	4b1f      	ldr	r3, [pc, #124]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a0fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a100:	4a1d      	ldr	r2, [pc, #116]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a102:	f023 0301 	bic.w	r3, r3, #1
 800a106:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a10a:	f7fd fa95 	bl	8007638 <HAL_GetTick>
 800a10e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a110:	e008      	b.n	800a124 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a112:	f7fd fa91 	bl	8007638 <HAL_GetTick>
 800a116:	4602      	mov	r2, r0
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d901      	bls.n	800a124 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	e0d5      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a124:	4b14      	ldr	r3, [pc, #80]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a126:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a12a:	f003 0302 	and.w	r3, r3, #2
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1ef      	bne.n	800a112 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	69db      	ldr	r3, [r3, #28]
 800a136:	2b00      	cmp	r3, #0
 800a138:	f000 80c9 	beq.w	800a2ce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a13c:	4b0e      	ldr	r3, [pc, #56]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	f003 030c 	and.w	r3, r3, #12
 800a144:	2b0c      	cmp	r3, #12
 800a146:	f000 8083 	beq.w	800a250 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	69db      	ldr	r3, [r3, #28]
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d15e      	bne.n	800a210 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a152:	4b09      	ldr	r3, [pc, #36]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a08      	ldr	r2, [pc, #32]	@ (800a178 <HAL_RCC_OscConfig+0x4b8>)
 800a158:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a15c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a15e:	f7fd fa6b 	bl	8007638 <HAL_GetTick>
 800a162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a164:	e00c      	b.n	800a180 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a166:	f7fd fa67 	bl	8007638 <HAL_GetTick>
 800a16a:	4602      	mov	r2, r0
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	2b02      	cmp	r3, #2
 800a172:	d905      	bls.n	800a180 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a174:	2303      	movs	r3, #3
 800a176:	e0ab      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
 800a178:	40021000 	.word	0x40021000
 800a17c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a180:	4b55      	ldr	r3, [pc, #340]	@ (800a2d8 <HAL_RCC_OscConfig+0x618>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1ec      	bne.n	800a166 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a18c:	4b52      	ldr	r3, [pc, #328]	@ (800a2d8 <HAL_RCC_OscConfig+0x618>)
 800a18e:	68da      	ldr	r2, [r3, #12]
 800a190:	4b52      	ldr	r3, [pc, #328]	@ (800a2dc <HAL_RCC_OscConfig+0x61c>)
 800a192:	4013      	ands	r3, r2
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	6a11      	ldr	r1, [r2, #32]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a19c:	3a01      	subs	r2, #1
 800a19e:	0112      	lsls	r2, r2, #4
 800a1a0:	4311      	orrs	r1, r2
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800a1a6:	0212      	lsls	r2, r2, #8
 800a1a8:	4311      	orrs	r1, r2
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a1ae:	0852      	lsrs	r2, r2, #1
 800a1b0:	3a01      	subs	r2, #1
 800a1b2:	0552      	lsls	r2, r2, #21
 800a1b4:	4311      	orrs	r1, r2
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a1ba:	0852      	lsrs	r2, r2, #1
 800a1bc:	3a01      	subs	r2, #1
 800a1be:	0652      	lsls	r2, r2, #25
 800a1c0:	4311      	orrs	r1, r2
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a1c6:	06d2      	lsls	r2, r2, #27
 800a1c8:	430a      	orrs	r2, r1
 800a1ca:	4943      	ldr	r1, [pc, #268]	@ (800a2d8 <HAL_RCC_OscConfig+0x618>)
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1d0:	4b41      	ldr	r3, [pc, #260]	@ (800a2d8 <HAL_RCC_OscConfig+0x618>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a40      	ldr	r2, [pc, #256]	@ (800a2d8 <HAL_RCC_OscConfig+0x618>)
 800a1d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a1da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a1dc:	4b3e      	ldr	r3, [pc, #248]	@ (800a2d8 <HAL_RCC_OscConfig+0x618>)
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	4a3d      	ldr	r2, [pc, #244]	@ (800a2d8 <HAL_RCC_OscConfig+0x618>)
 800a1e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a1e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1e8:	f7fd fa26 	bl	8007638 <HAL_GetTick>
 800a1ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1ee:	e008      	b.n	800a202 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1f0:	f7fd fa22 	bl	8007638 <HAL_GetTick>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d901      	bls.n	800a202 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a1fe:	2303      	movs	r3, #3
 800a200:	e066      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a202:	4b35      	ldr	r3, [pc, #212]	@ (800a2d8 <HAL_RCC_OscConfig+0x618>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d0f0      	beq.n	800a1f0 <HAL_RCC_OscConfig+0x530>
 800a20e:	e05e      	b.n	800a2ce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a210:	4b31      	ldr	r3, [pc, #196]	@ (800a2d8 <HAL_RCC_OscConfig+0x618>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a30      	ldr	r2, [pc, #192]	@ (800a2d8 <HAL_RCC_OscConfig+0x618>)
 800a216:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a21a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a21c:	f7fd fa0c 	bl	8007638 <HAL_GetTick>
 800a220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a222:	e008      	b.n	800a236 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a224:	f7fd fa08 	bl	8007638 <HAL_GetTick>
 800a228:	4602      	mov	r2, r0
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d901      	bls.n	800a236 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800a232:	2303      	movs	r3, #3
 800a234:	e04c      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a236:	4b28      	ldr	r3, [pc, #160]	@ (800a2d8 <HAL_RCC_OscConfig+0x618>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1f0      	bne.n	800a224 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a242:	4b25      	ldr	r3, [pc, #148]	@ (800a2d8 <HAL_RCC_OscConfig+0x618>)
 800a244:	68da      	ldr	r2, [r3, #12]
 800a246:	4924      	ldr	r1, [pc, #144]	@ (800a2d8 <HAL_RCC_OscConfig+0x618>)
 800a248:	4b25      	ldr	r3, [pc, #148]	@ (800a2e0 <HAL_RCC_OscConfig+0x620>)
 800a24a:	4013      	ands	r3, r2
 800a24c:	60cb      	str	r3, [r1, #12]
 800a24e:	e03e      	b.n	800a2ce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	69db      	ldr	r3, [r3, #28]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d101      	bne.n	800a25c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800a258:	2301      	movs	r3, #1
 800a25a:	e039      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a25c:	4b1e      	ldr	r3, [pc, #120]	@ (800a2d8 <HAL_RCC_OscConfig+0x618>)
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f003 0203 	and.w	r2, r3, #3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a1b      	ldr	r3, [r3, #32]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d12c      	bne.n	800a2ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a27a:	3b01      	subs	r3, #1
 800a27c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a27e:	429a      	cmp	r2, r3
 800a280:	d123      	bne.n	800a2ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a28c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a28e:	429a      	cmp	r2, r3
 800a290:	d11b      	bne.n	800a2ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a29c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d113      	bne.n	800a2ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ac:	085b      	lsrs	r3, r3, #1
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d109      	bne.n	800a2ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2c0:	085b      	lsrs	r3, r3, #1
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d001      	beq.n	800a2ce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e000      	b.n	800a2d0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3720      	adds	r7, #32
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	40021000 	.word	0x40021000
 800a2dc:	019f800c 	.word	0x019f800c
 800a2e0:	feeefffc 	.word	0xfeeefffc

0800a2e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d101      	bne.n	800a2fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e11e      	b.n	800a53a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a2fc:	4b91      	ldr	r3, [pc, #580]	@ (800a544 <HAL_RCC_ClockConfig+0x260>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 030f 	and.w	r3, r3, #15
 800a304:	683a      	ldr	r2, [r7, #0]
 800a306:	429a      	cmp	r2, r3
 800a308:	d910      	bls.n	800a32c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a30a:	4b8e      	ldr	r3, [pc, #568]	@ (800a544 <HAL_RCC_ClockConfig+0x260>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f023 020f 	bic.w	r2, r3, #15
 800a312:	498c      	ldr	r1, [pc, #560]	@ (800a544 <HAL_RCC_ClockConfig+0x260>)
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	4313      	orrs	r3, r2
 800a318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a31a:	4b8a      	ldr	r3, [pc, #552]	@ (800a544 <HAL_RCC_ClockConfig+0x260>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f003 030f 	and.w	r3, r3, #15
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	429a      	cmp	r2, r3
 800a326:	d001      	beq.n	800a32c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	e106      	b.n	800a53a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0301 	and.w	r3, r3, #1
 800a334:	2b00      	cmp	r3, #0
 800a336:	d073      	beq.n	800a420 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	2b03      	cmp	r3, #3
 800a33e:	d129      	bne.n	800a394 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a340:	4b81      	ldr	r3, [pc, #516]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e0f4      	b.n	800a53a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a350:	f000 f99e 	bl	800a690 <RCC_GetSysClockFreqFromPLLSource>
 800a354:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	4a7c      	ldr	r2, [pc, #496]	@ (800a54c <HAL_RCC_ClockConfig+0x268>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d93f      	bls.n	800a3de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a35e:	4b7a      	ldr	r3, [pc, #488]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d009      	beq.n	800a37e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a372:	2b00      	cmp	r3, #0
 800a374:	d033      	beq.n	800a3de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d12f      	bne.n	800a3de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a37e:	4b72      	ldr	r3, [pc, #456]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a386:	4a70      	ldr	r2, [pc, #448]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a38c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a38e:	2380      	movs	r3, #128	@ 0x80
 800a390:	617b      	str	r3, [r7, #20]
 800a392:	e024      	b.n	800a3de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d107      	bne.n	800a3ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a39c:	4b6a      	ldr	r3, [pc, #424]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d109      	bne.n	800a3bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e0c6      	b.n	800a53a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a3ac:	4b66      	ldr	r3, [pc, #408]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d101      	bne.n	800a3bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e0be      	b.n	800a53a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a3bc:	f000 f8ce 	bl	800a55c <HAL_RCC_GetSysClockFreq>
 800a3c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	4a61      	ldr	r2, [pc, #388]	@ (800a54c <HAL_RCC_ClockConfig+0x268>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d909      	bls.n	800a3de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a3ca:	4b5f      	ldr	r3, [pc, #380]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a3d2:	4a5d      	ldr	r2, [pc, #372]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a3d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a3da:	2380      	movs	r3, #128	@ 0x80
 800a3dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a3de:	4b5a      	ldr	r3, [pc, #360]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	f023 0203 	bic.w	r2, r3, #3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	4957      	ldr	r1, [pc, #348]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3f0:	f7fd f922 	bl	8007638 <HAL_GetTick>
 800a3f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3f6:	e00a      	b.n	800a40e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3f8:	f7fd f91e 	bl	8007638 <HAL_GetTick>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a406:	4293      	cmp	r3, r2
 800a408:	d901      	bls.n	800a40e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a40a:	2303      	movs	r3, #3
 800a40c:	e095      	b.n	800a53a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a40e:	4b4e      	ldr	r3, [pc, #312]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	f003 020c 	and.w	r2, r3, #12
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d1eb      	bne.n	800a3f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 0302 	and.w	r3, r3, #2
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d023      	beq.n	800a474 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 0304 	and.w	r3, r3, #4
 800a434:	2b00      	cmp	r3, #0
 800a436:	d005      	beq.n	800a444 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a438:	4b43      	ldr	r3, [pc, #268]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	4a42      	ldr	r2, [pc, #264]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a43e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a442:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 0308 	and.w	r3, r3, #8
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d007      	beq.n	800a460 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a450:	4b3d      	ldr	r3, [pc, #244]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a458:	4a3b      	ldr	r2, [pc, #236]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a45a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a45e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a460:	4b39      	ldr	r3, [pc, #228]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	4936      	ldr	r1, [pc, #216]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a46e:	4313      	orrs	r3, r2
 800a470:	608b      	str	r3, [r1, #8]
 800a472:	e008      	b.n	800a486 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	2b80      	cmp	r3, #128	@ 0x80
 800a478:	d105      	bne.n	800a486 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a47a:	4b33      	ldr	r3, [pc, #204]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	4a32      	ldr	r2, [pc, #200]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a480:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a484:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a486:	4b2f      	ldr	r3, [pc, #188]	@ (800a544 <HAL_RCC_ClockConfig+0x260>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 030f 	and.w	r3, r3, #15
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	429a      	cmp	r2, r3
 800a492:	d21d      	bcs.n	800a4d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a494:	4b2b      	ldr	r3, [pc, #172]	@ (800a544 <HAL_RCC_ClockConfig+0x260>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f023 020f 	bic.w	r2, r3, #15
 800a49c:	4929      	ldr	r1, [pc, #164]	@ (800a544 <HAL_RCC_ClockConfig+0x260>)
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a4a4:	f7fd f8c8 	bl	8007638 <HAL_GetTick>
 800a4a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4aa:	e00a      	b.n	800a4c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4ac:	f7fd f8c4 	bl	8007638 <HAL_GetTick>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d901      	bls.n	800a4c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a4be:	2303      	movs	r3, #3
 800a4c0:	e03b      	b.n	800a53a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4c2:	4b20      	ldr	r3, [pc, #128]	@ (800a544 <HAL_RCC_ClockConfig+0x260>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f003 030f 	and.w	r3, r3, #15
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d1ed      	bne.n	800a4ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 0304 	and.w	r3, r3, #4
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d008      	beq.n	800a4ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a4dc:	4b1a      	ldr	r3, [pc, #104]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	4917      	ldr	r1, [pc, #92]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f003 0308 	and.w	r3, r3, #8
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d009      	beq.n	800a50e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a4fa:	4b13      	ldr	r3, [pc, #76]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	00db      	lsls	r3, r3, #3
 800a508:	490f      	ldr	r1, [pc, #60]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a50a:	4313      	orrs	r3, r2
 800a50c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a50e:	f000 f825 	bl	800a55c <HAL_RCC_GetSysClockFreq>
 800a512:	4602      	mov	r2, r0
 800a514:	4b0c      	ldr	r3, [pc, #48]	@ (800a548 <HAL_RCC_ClockConfig+0x264>)
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	091b      	lsrs	r3, r3, #4
 800a51a:	f003 030f 	and.w	r3, r3, #15
 800a51e:	490c      	ldr	r1, [pc, #48]	@ (800a550 <HAL_RCC_ClockConfig+0x26c>)
 800a520:	5ccb      	ldrb	r3, [r1, r3]
 800a522:	f003 031f 	and.w	r3, r3, #31
 800a526:	fa22 f303 	lsr.w	r3, r2, r3
 800a52a:	4a0a      	ldr	r2, [pc, #40]	@ (800a554 <HAL_RCC_ClockConfig+0x270>)
 800a52c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a52e:	4b0a      	ldr	r3, [pc, #40]	@ (800a558 <HAL_RCC_ClockConfig+0x274>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4618      	mov	r0, r3
 800a534:	f7fd f834 	bl	80075a0 <HAL_InitTick>
 800a538:	4603      	mov	r3, r0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3718      	adds	r7, #24
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	40022000 	.word	0x40022000
 800a548:	40021000 	.word	0x40021000
 800a54c:	04c4b400 	.word	0x04c4b400
 800a550:	08011468 	.word	0x08011468
 800a554:	20000134 	.word	0x20000134
 800a558:	20000138 	.word	0x20000138

0800a55c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b087      	sub	sp, #28
 800a560:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a562:	4b2c      	ldr	r3, [pc, #176]	@ (800a614 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	f003 030c 	and.w	r3, r3, #12
 800a56a:	2b04      	cmp	r3, #4
 800a56c:	d102      	bne.n	800a574 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a56e:	4b2a      	ldr	r3, [pc, #168]	@ (800a618 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a570:	613b      	str	r3, [r7, #16]
 800a572:	e047      	b.n	800a604 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a574:	4b27      	ldr	r3, [pc, #156]	@ (800a614 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	f003 030c 	and.w	r3, r3, #12
 800a57c:	2b08      	cmp	r3, #8
 800a57e:	d102      	bne.n	800a586 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a580:	4b26      	ldr	r3, [pc, #152]	@ (800a61c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a582:	613b      	str	r3, [r7, #16]
 800a584:	e03e      	b.n	800a604 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a586:	4b23      	ldr	r3, [pc, #140]	@ (800a614 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	f003 030c 	and.w	r3, r3, #12
 800a58e:	2b0c      	cmp	r3, #12
 800a590:	d136      	bne.n	800a600 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a592:	4b20      	ldr	r3, [pc, #128]	@ (800a614 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	f003 0303 	and.w	r3, r3, #3
 800a59a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a59c:	4b1d      	ldr	r3, [pc, #116]	@ (800a614 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	091b      	lsrs	r3, r3, #4
 800a5a2:	f003 030f 	and.w	r3, r3, #15
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2b03      	cmp	r3, #3
 800a5ae:	d10c      	bne.n	800a5ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a5b0:	4a1a      	ldr	r2, [pc, #104]	@ (800a61c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b8:	4a16      	ldr	r2, [pc, #88]	@ (800a614 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a5ba:	68d2      	ldr	r2, [r2, #12]
 800a5bc:	0a12      	lsrs	r2, r2, #8
 800a5be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a5c2:	fb02 f303 	mul.w	r3, r2, r3
 800a5c6:	617b      	str	r3, [r7, #20]
      break;
 800a5c8:	e00c      	b.n	800a5e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a5ca:	4a13      	ldr	r2, [pc, #76]	@ (800a618 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5d2:	4a10      	ldr	r2, [pc, #64]	@ (800a614 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a5d4:	68d2      	ldr	r2, [r2, #12]
 800a5d6:	0a12      	lsrs	r2, r2, #8
 800a5d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a5dc:	fb02 f303 	mul.w	r3, r2, r3
 800a5e0:	617b      	str	r3, [r7, #20]
      break;
 800a5e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a5e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a614 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	0e5b      	lsrs	r3, r3, #25
 800a5ea:	f003 0303 	and.w	r3, r3, #3
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	005b      	lsls	r3, r3, #1
 800a5f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a5f4:	697a      	ldr	r2, [r7, #20]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5fc:	613b      	str	r3, [r7, #16]
 800a5fe:	e001      	b.n	800a604 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a600:	2300      	movs	r3, #0
 800a602:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a604:	693b      	ldr	r3, [r7, #16]
}
 800a606:	4618      	mov	r0, r3
 800a608:	371c      	adds	r7, #28
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	40021000 	.word	0x40021000
 800a618:	00f42400 	.word	0x00f42400
 800a61c:	016e3600 	.word	0x016e3600

0800a620 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a620:	b480      	push	{r7}
 800a622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a624:	4b03      	ldr	r3, [pc, #12]	@ (800a634 <HAL_RCC_GetHCLKFreq+0x14>)
 800a626:	681b      	ldr	r3, [r3, #0]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	20000134 	.word	0x20000134

0800a638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a63c:	f7ff fff0 	bl	800a620 <HAL_RCC_GetHCLKFreq>
 800a640:	4602      	mov	r2, r0
 800a642:	4b06      	ldr	r3, [pc, #24]	@ (800a65c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	0a1b      	lsrs	r3, r3, #8
 800a648:	f003 0307 	and.w	r3, r3, #7
 800a64c:	4904      	ldr	r1, [pc, #16]	@ (800a660 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a64e:	5ccb      	ldrb	r3, [r1, r3]
 800a650:	f003 031f 	and.w	r3, r3, #31
 800a654:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a658:	4618      	mov	r0, r3
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	40021000 	.word	0x40021000
 800a660:	08011478 	.word	0x08011478

0800a664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a668:	f7ff ffda 	bl	800a620 <HAL_RCC_GetHCLKFreq>
 800a66c:	4602      	mov	r2, r0
 800a66e:	4b06      	ldr	r3, [pc, #24]	@ (800a688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	0adb      	lsrs	r3, r3, #11
 800a674:	f003 0307 	and.w	r3, r3, #7
 800a678:	4904      	ldr	r1, [pc, #16]	@ (800a68c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a67a:	5ccb      	ldrb	r3, [r1, r3]
 800a67c:	f003 031f 	and.w	r3, r3, #31
 800a680:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a684:	4618      	mov	r0, r3
 800a686:	bd80      	pop	{r7, pc}
 800a688:	40021000 	.word	0x40021000
 800a68c:	08011478 	.word	0x08011478

0800a690 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a690:	b480      	push	{r7}
 800a692:	b087      	sub	sp, #28
 800a694:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a696:	4b1e      	ldr	r3, [pc, #120]	@ (800a710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	f003 0303 	and.w	r3, r3, #3
 800a69e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a6a0:	4b1b      	ldr	r3, [pc, #108]	@ (800a710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	091b      	lsrs	r3, r3, #4
 800a6a6:	f003 030f 	and.w	r3, r3, #15
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	2b03      	cmp	r3, #3
 800a6b2:	d10c      	bne.n	800a6ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a6b4:	4a17      	ldr	r2, [pc, #92]	@ (800a714 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6bc:	4a14      	ldr	r2, [pc, #80]	@ (800a710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a6be:	68d2      	ldr	r2, [r2, #12]
 800a6c0:	0a12      	lsrs	r2, r2, #8
 800a6c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a6c6:	fb02 f303 	mul.w	r3, r2, r3
 800a6ca:	617b      	str	r3, [r7, #20]
    break;
 800a6cc:	e00c      	b.n	800a6e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a6ce:	4a12      	ldr	r2, [pc, #72]	@ (800a718 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6d6:	4a0e      	ldr	r2, [pc, #56]	@ (800a710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a6d8:	68d2      	ldr	r2, [r2, #12]
 800a6da:	0a12      	lsrs	r2, r2, #8
 800a6dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a6e0:	fb02 f303 	mul.w	r3, r2, r3
 800a6e4:	617b      	str	r3, [r7, #20]
    break;
 800a6e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a6e8:	4b09      	ldr	r3, [pc, #36]	@ (800a710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	0e5b      	lsrs	r3, r3, #25
 800a6ee:	f003 0303 	and.w	r3, r3, #3
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	005b      	lsls	r3, r3, #1
 800a6f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a700:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a702:	687b      	ldr	r3, [r7, #4]
}
 800a704:	4618      	mov	r0, r3
 800a706:	371c      	adds	r7, #28
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr
 800a710:	40021000 	.word	0x40021000
 800a714:	016e3600 	.word	0x016e3600
 800a718:	00f42400 	.word	0x00f42400

0800a71c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a724:	2300      	movs	r3, #0
 800a726:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a728:	2300      	movs	r3, #0
 800a72a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 8098 	beq.w	800a86a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a73a:	2300      	movs	r3, #0
 800a73c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a73e:	4b43      	ldr	r3, [pc, #268]	@ (800a84c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10d      	bne.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a74a:	4b40      	ldr	r3, [pc, #256]	@ (800a84c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a74c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a74e:	4a3f      	ldr	r2, [pc, #252]	@ (800a84c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a754:	6593      	str	r3, [r2, #88]	@ 0x58
 800a756:	4b3d      	ldr	r3, [pc, #244]	@ (800a84c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a75a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a75e:	60bb      	str	r3, [r7, #8]
 800a760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a762:	2301      	movs	r3, #1
 800a764:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a766:	4b3a      	ldr	r3, [pc, #232]	@ (800a850 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a39      	ldr	r2, [pc, #228]	@ (800a850 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a76c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a770:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a772:	f7fc ff61 	bl	8007638 <HAL_GetTick>
 800a776:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a778:	e009      	b.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a77a:	f7fc ff5d 	bl	8007638 <HAL_GetTick>
 800a77e:	4602      	mov	r2, r0
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	2b02      	cmp	r3, #2
 800a786:	d902      	bls.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a788:	2303      	movs	r3, #3
 800a78a:	74fb      	strb	r3, [r7, #19]
        break;
 800a78c:	e005      	b.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a78e:	4b30      	ldr	r3, [pc, #192]	@ (800a850 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a796:	2b00      	cmp	r3, #0
 800a798:	d0ef      	beq.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a79a:	7cfb      	ldrb	r3, [r7, #19]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d159      	bne.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a7a0:	4b2a      	ldr	r3, [pc, #168]	@ (800a84c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a7a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d01e      	beq.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7b6:	697a      	ldr	r2, [r7, #20]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d019      	beq.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a7bc:	4b23      	ldr	r3, [pc, #140]	@ (800a84c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a7be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a7c8:	4b20      	ldr	r3, [pc, #128]	@ (800a84c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a7ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7ce:	4a1f      	ldr	r2, [pc, #124]	@ (800a84c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a7d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a7d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a7d8:	4b1c      	ldr	r3, [pc, #112]	@ (800a84c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a7da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7de:	4a1b      	ldr	r2, [pc, #108]	@ (800a84c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a7e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a7e8:	4a18      	ldr	r2, [pc, #96]	@ (800a84c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d016      	beq.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7fa:	f7fc ff1d 	bl	8007638 <HAL_GetTick>
 800a7fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a800:	e00b      	b.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a802:	f7fc ff19 	bl	8007638 <HAL_GetTick>
 800a806:	4602      	mov	r2, r0
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a810:	4293      	cmp	r3, r2
 800a812:	d902      	bls.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a814:	2303      	movs	r3, #3
 800a816:	74fb      	strb	r3, [r7, #19]
            break;
 800a818:	e006      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a81a:	4b0c      	ldr	r3, [pc, #48]	@ (800a84c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a81c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a820:	f003 0302 	and.w	r3, r3, #2
 800a824:	2b00      	cmp	r3, #0
 800a826:	d0ec      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a828:	7cfb      	ldrb	r3, [r7, #19]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d10b      	bne.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a82e:	4b07      	ldr	r3, [pc, #28]	@ (800a84c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a834:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a83c:	4903      	ldr	r1, [pc, #12]	@ (800a84c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a83e:	4313      	orrs	r3, r2
 800a840:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a844:	e008      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a846:	7cfb      	ldrb	r3, [r7, #19]
 800a848:	74bb      	strb	r3, [r7, #18]
 800a84a:	e005      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a84c:	40021000 	.word	0x40021000
 800a850:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a854:	7cfb      	ldrb	r3, [r7, #19]
 800a856:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a858:	7c7b      	ldrb	r3, [r7, #17]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d105      	bne.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a85e:	4ba7      	ldr	r3, [pc, #668]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a862:	4aa6      	ldr	r2, [pc, #664]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a864:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a868:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00a      	beq.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a876:	4ba1      	ldr	r3, [pc, #644]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a87c:	f023 0203 	bic.w	r2, r3, #3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	499d      	ldr	r1, [pc, #628]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a886:	4313      	orrs	r3, r2
 800a888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 0302 	and.w	r3, r3, #2
 800a894:	2b00      	cmp	r3, #0
 800a896:	d00a      	beq.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a898:	4b98      	ldr	r3, [pc, #608]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a89a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a89e:	f023 020c 	bic.w	r2, r3, #12
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	4995      	ldr	r1, [pc, #596]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0304 	and.w	r3, r3, #4
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00a      	beq.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a8ba:	4b90      	ldr	r3, [pc, #576]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	498c      	ldr	r1, [pc, #560]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 0308 	and.w	r3, r3, #8
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00a      	beq.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a8dc:	4b87      	ldr	r3, [pc, #540]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	4984      	ldr	r1, [pc, #528]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0310 	and.w	r3, r3, #16
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00a      	beq.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a8fe:	4b7f      	ldr	r3, [pc, #508]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a904:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	695b      	ldr	r3, [r3, #20]
 800a90c:	497b      	ldr	r1, [pc, #492]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a90e:	4313      	orrs	r3, r2
 800a910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 0320 	and.w	r3, r3, #32
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00a      	beq.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a920:	4b76      	ldr	r3, [pc, #472]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a926:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	4973      	ldr	r1, [pc, #460]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a930:	4313      	orrs	r3, r2
 800a932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00a      	beq.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a942:	4b6e      	ldr	r3, [pc, #440]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a948:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	69db      	ldr	r3, [r3, #28]
 800a950:	496a      	ldr	r1, [pc, #424]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a952:	4313      	orrs	r3, r2
 800a954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00a      	beq.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a964:	4b65      	ldr	r3, [pc, #404]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a96a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	4962      	ldr	r1, [pc, #392]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a974:	4313      	orrs	r3, r2
 800a976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00a      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a986:	4b5d      	ldr	r3, [pc, #372]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a98c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a994:	4959      	ldr	r1, [pc, #356]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a996:	4313      	orrs	r3, r2
 800a998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00a      	beq.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a9a8:	4b54      	ldr	r3, [pc, #336]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a9aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a9ae:	f023 0203 	bic.w	r2, r3, #3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b6:	4951      	ldr	r1, [pc, #324]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00a      	beq.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a9ca:	4b4c      	ldr	r3, [pc, #304]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a9cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d8:	4948      	ldr	r1, [pc, #288]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d015      	beq.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a9ec:	4b43      	ldr	r3, [pc, #268]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a9ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9fa:	4940      	ldr	r1, [pc, #256]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa0a:	d105      	bne.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aa0c:	4b3b      	ldr	r3, [pc, #236]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	4a3a      	ldr	r2, [pc, #232]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa16:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d015      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800aa24:	4b35      	ldr	r3, [pc, #212]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa2a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa32:	4932      	ldr	r1, [pc, #200]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa34:	4313      	orrs	r3, r2
 800aa36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa42:	d105      	bne.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aa44:	4b2d      	ldr	r3, [pc, #180]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	4a2c      	ldr	r2, [pc, #176]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa4e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d015      	beq.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aa5c:	4b27      	ldr	r3, [pc, #156]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa62:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa6a:	4924      	ldr	r1, [pc, #144]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aa7a:	d105      	bne.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aa7c:	4b1f      	ldr	r3, [pc, #124]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	4a1e      	ldr	r2, [pc, #120]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa86:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d015      	beq.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aa94:	4b19      	ldr	r3, [pc, #100]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aa96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaa2:	4916      	ldr	r1, [pc, #88]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aab2:	d105      	bne.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aab4:	4b11      	ldr	r3, [pc, #68]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	4a10      	ldr	r2, [pc, #64]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aaba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aabe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d019      	beq.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aacc:	4b0b      	ldr	r3, [pc, #44]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aad2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aada:	4908      	ldr	r1, [pc, #32]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aadc:	4313      	orrs	r3, r2
 800aade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aaea:	d109      	bne.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aaec:	4b03      	ldr	r3, [pc, #12]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	4a02      	ldr	r2, [pc, #8]	@ (800aafc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800aaf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aaf6:	60d3      	str	r3, [r2, #12]
 800aaf8:	e002      	b.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800aafa:	bf00      	nop
 800aafc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d015      	beq.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800ab0c:	4b29      	ldr	r3, [pc, #164]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab12:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab1a:	4926      	ldr	r1, [pc, #152]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab2a:	d105      	bne.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ab2c:	4b21      	ldr	r3, [pc, #132]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	4a20      	ldr	r2, [pc, #128]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab36:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d015      	beq.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800ab44:	4b1b      	ldr	r3, [pc, #108]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab4a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab52:	4918      	ldr	r1, [pc, #96]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab54:	4313      	orrs	r3, r2
 800ab56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab62:	d105      	bne.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ab64:	4b13      	ldr	r3, [pc, #76]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	4a12      	ldr	r2, [pc, #72]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab6e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d015      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ab7c:	4b0d      	ldr	r3, [pc, #52]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab8a:	490a      	ldr	r1, [pc, #40]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab9a:	d105      	bne.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ab9c:	4b05      	ldr	r3, [pc, #20]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	4a04      	ldr	r2, [pc, #16]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800aba2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aba6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800aba8:	7cbb      	ldrb	r3, [r7, #18]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3718      	adds	r7, #24
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	40021000 	.word	0x40021000

0800abb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d101      	bne.n	800abca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800abc6:	2301      	movs	r3, #1
 800abc8:	e054      	b.n	800ac74 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d111      	bne.n	800abfa <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f001 fee2 	bl	800c9a8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d102      	bne.n	800abf2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a23      	ldr	r2, [pc, #140]	@ (800ac7c <HAL_TIM_Base_Init+0xc4>)
 800abf0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2202      	movs	r2, #2
 800abfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	3304      	adds	r3, #4
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	f001 fa2b 	bl	800c068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2201      	movs	r2, #1
 800ac16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2201      	movs	r2, #1
 800ac26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2201      	movs	r2, #1
 800ac46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	08006e61 	.word	0x08006e61

0800ac80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d001      	beq.n	800ac98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	e04c      	b.n	800ad32 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2202      	movs	r2, #2
 800ac9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a26      	ldr	r2, [pc, #152]	@ (800ad40 <HAL_TIM_Base_Start+0xc0>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d022      	beq.n	800acf0 <HAL_TIM_Base_Start+0x70>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acb2:	d01d      	beq.n	800acf0 <HAL_TIM_Base_Start+0x70>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a22      	ldr	r2, [pc, #136]	@ (800ad44 <HAL_TIM_Base_Start+0xc4>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d018      	beq.n	800acf0 <HAL_TIM_Base_Start+0x70>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a21      	ldr	r2, [pc, #132]	@ (800ad48 <HAL_TIM_Base_Start+0xc8>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d013      	beq.n	800acf0 <HAL_TIM_Base_Start+0x70>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a1f      	ldr	r2, [pc, #124]	@ (800ad4c <HAL_TIM_Base_Start+0xcc>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d00e      	beq.n	800acf0 <HAL_TIM_Base_Start+0x70>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a1e      	ldr	r2, [pc, #120]	@ (800ad50 <HAL_TIM_Base_Start+0xd0>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d009      	beq.n	800acf0 <HAL_TIM_Base_Start+0x70>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a1c      	ldr	r2, [pc, #112]	@ (800ad54 <HAL_TIM_Base_Start+0xd4>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d004      	beq.n	800acf0 <HAL_TIM_Base_Start+0x70>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a1b      	ldr	r2, [pc, #108]	@ (800ad58 <HAL_TIM_Base_Start+0xd8>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d115      	bne.n	800ad1c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	689a      	ldr	r2, [r3, #8]
 800acf6:	4b19      	ldr	r3, [pc, #100]	@ (800ad5c <HAL_TIM_Base_Start+0xdc>)
 800acf8:	4013      	ands	r3, r2
 800acfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2b06      	cmp	r3, #6
 800ad00:	d015      	beq.n	800ad2e <HAL_TIM_Base_Start+0xae>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad08:	d011      	beq.n	800ad2e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f042 0201 	orr.w	r2, r2, #1
 800ad18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad1a:	e008      	b.n	800ad2e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f042 0201 	orr.w	r2, r2, #1
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	e000      	b.n	800ad30 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad30:	2300      	movs	r3, #0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3714      	adds	r7, #20
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	40012c00 	.word	0x40012c00
 800ad44:	40000400 	.word	0x40000400
 800ad48:	40000800 	.word	0x40000800
 800ad4c:	40000c00 	.word	0x40000c00
 800ad50:	40013400 	.word	0x40013400
 800ad54:	40014000 	.word	0x40014000
 800ad58:	40015000 	.word	0x40015000
 800ad5c:	00010007 	.word	0x00010007

0800ad60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b085      	sub	sp, #20
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d001      	beq.n	800ad78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e054      	b.n	800ae22 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2202      	movs	r2, #2
 800ad7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68da      	ldr	r2, [r3, #12]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f042 0201 	orr.w	r2, r2, #1
 800ad8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a26      	ldr	r2, [pc, #152]	@ (800ae30 <HAL_TIM_Base_Start_IT+0xd0>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d022      	beq.n	800ade0 <HAL_TIM_Base_Start_IT+0x80>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ada2:	d01d      	beq.n	800ade0 <HAL_TIM_Base_Start_IT+0x80>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a22      	ldr	r2, [pc, #136]	@ (800ae34 <HAL_TIM_Base_Start_IT+0xd4>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d018      	beq.n	800ade0 <HAL_TIM_Base_Start_IT+0x80>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a21      	ldr	r2, [pc, #132]	@ (800ae38 <HAL_TIM_Base_Start_IT+0xd8>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d013      	beq.n	800ade0 <HAL_TIM_Base_Start_IT+0x80>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a1f      	ldr	r2, [pc, #124]	@ (800ae3c <HAL_TIM_Base_Start_IT+0xdc>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d00e      	beq.n	800ade0 <HAL_TIM_Base_Start_IT+0x80>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a1e      	ldr	r2, [pc, #120]	@ (800ae40 <HAL_TIM_Base_Start_IT+0xe0>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d009      	beq.n	800ade0 <HAL_TIM_Base_Start_IT+0x80>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a1c      	ldr	r2, [pc, #112]	@ (800ae44 <HAL_TIM_Base_Start_IT+0xe4>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d004      	beq.n	800ade0 <HAL_TIM_Base_Start_IT+0x80>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a1b      	ldr	r2, [pc, #108]	@ (800ae48 <HAL_TIM_Base_Start_IT+0xe8>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d115      	bne.n	800ae0c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	689a      	ldr	r2, [r3, #8]
 800ade6:	4b19      	ldr	r3, [pc, #100]	@ (800ae4c <HAL_TIM_Base_Start_IT+0xec>)
 800ade8:	4013      	ands	r3, r2
 800adea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2b06      	cmp	r3, #6
 800adf0:	d015      	beq.n	800ae1e <HAL_TIM_Base_Start_IT+0xbe>
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adf8:	d011      	beq.n	800ae1e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f042 0201 	orr.w	r2, r2, #1
 800ae08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae0a:	e008      	b.n	800ae1e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f042 0201 	orr.w	r2, r2, #1
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	e000      	b.n	800ae20 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3714      	adds	r7, #20
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	40012c00 	.word	0x40012c00
 800ae34:	40000400 	.word	0x40000400
 800ae38:	40000800 	.word	0x40000800
 800ae3c:	40000c00 	.word	0x40000c00
 800ae40:	40013400 	.word	0x40013400
 800ae44:	40014000 	.word	0x40014000
 800ae48:	40015000 	.word	0x40015000
 800ae4c:	00010007 	.word	0x00010007

0800ae50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d101      	bne.n	800ae62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e054      	b.n	800af0c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d111      	bne.n	800ae92 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f001 fd96 	bl	800c9a8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d102      	bne.n	800ae8a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4a23      	ldr	r2, [pc, #140]	@ (800af14 <HAL_TIM_PWM_Init+0xc4>)
 800ae88:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2202      	movs	r2, #2
 800ae96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	3304      	adds	r3, #4
 800aea2:	4619      	mov	r1, r3
 800aea4:	4610      	mov	r0, r2
 800aea6:	f001 f8df 	bl	800c068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2201      	movs	r2, #1
 800aeae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2201      	movs	r2, #1
 800aec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2201      	movs	r2, #1
 800aed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2201      	movs	r2, #1
 800aede:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2201      	movs	r2, #1
 800aee6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2201      	movs	r2, #1
 800aefe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	08006e15 	.word	0x08006e15

0800af18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d109      	bne.n	800af3c <HAL_TIM_PWM_Start+0x24>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	2b01      	cmp	r3, #1
 800af32:	bf14      	ite	ne
 800af34:	2301      	movne	r3, #1
 800af36:	2300      	moveq	r3, #0
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	e03c      	b.n	800afb6 <HAL_TIM_PWM_Start+0x9e>
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	2b04      	cmp	r3, #4
 800af40:	d109      	bne.n	800af56 <HAL_TIM_PWM_Start+0x3e>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	bf14      	ite	ne
 800af4e:	2301      	movne	r3, #1
 800af50:	2300      	moveq	r3, #0
 800af52:	b2db      	uxtb	r3, r3
 800af54:	e02f      	b.n	800afb6 <HAL_TIM_PWM_Start+0x9e>
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2b08      	cmp	r3, #8
 800af5a:	d109      	bne.n	800af70 <HAL_TIM_PWM_Start+0x58>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2b01      	cmp	r3, #1
 800af66:	bf14      	ite	ne
 800af68:	2301      	movne	r3, #1
 800af6a:	2300      	moveq	r3, #0
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	e022      	b.n	800afb6 <HAL_TIM_PWM_Start+0x9e>
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	2b0c      	cmp	r3, #12
 800af74:	d109      	bne.n	800af8a <HAL_TIM_PWM_Start+0x72>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	2b01      	cmp	r3, #1
 800af80:	bf14      	ite	ne
 800af82:	2301      	movne	r3, #1
 800af84:	2300      	moveq	r3, #0
 800af86:	b2db      	uxtb	r3, r3
 800af88:	e015      	b.n	800afb6 <HAL_TIM_PWM_Start+0x9e>
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2b10      	cmp	r3, #16
 800af8e:	d109      	bne.n	800afa4 <HAL_TIM_PWM_Start+0x8c>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800af96:	b2db      	uxtb	r3, r3
 800af98:	2b01      	cmp	r3, #1
 800af9a:	bf14      	ite	ne
 800af9c:	2301      	movne	r3, #1
 800af9e:	2300      	moveq	r3, #0
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	e008      	b.n	800afb6 <HAL_TIM_PWM_Start+0x9e>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	2b01      	cmp	r3, #1
 800afae:	bf14      	ite	ne
 800afb0:	2301      	movne	r3, #1
 800afb2:	2300      	moveq	r3, #0
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e0a6      	b.n	800b10c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d104      	bne.n	800afce <HAL_TIM_PWM_Start+0xb6>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2202      	movs	r2, #2
 800afc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800afcc:	e023      	b.n	800b016 <HAL_TIM_PWM_Start+0xfe>
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	2b04      	cmp	r3, #4
 800afd2:	d104      	bne.n	800afde <HAL_TIM_PWM_Start+0xc6>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2202      	movs	r2, #2
 800afd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800afdc:	e01b      	b.n	800b016 <HAL_TIM_PWM_Start+0xfe>
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	2b08      	cmp	r3, #8
 800afe2:	d104      	bne.n	800afee <HAL_TIM_PWM_Start+0xd6>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2202      	movs	r2, #2
 800afe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800afec:	e013      	b.n	800b016 <HAL_TIM_PWM_Start+0xfe>
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	2b0c      	cmp	r3, #12
 800aff2:	d104      	bne.n	800affe <HAL_TIM_PWM_Start+0xe6>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2202      	movs	r2, #2
 800aff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800affc:	e00b      	b.n	800b016 <HAL_TIM_PWM_Start+0xfe>
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2b10      	cmp	r3, #16
 800b002:	d104      	bne.n	800b00e <HAL_TIM_PWM_Start+0xf6>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2202      	movs	r2, #2
 800b008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b00c:	e003      	b.n	800b016 <HAL_TIM_PWM_Start+0xfe>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2202      	movs	r2, #2
 800b012:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2201      	movs	r2, #1
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	4618      	mov	r0, r3
 800b020:	f001 fc9c 	bl	800c95c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a3a      	ldr	r2, [pc, #232]	@ (800b114 <HAL_TIM_PWM_Start+0x1fc>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d018      	beq.n	800b060 <HAL_TIM_PWM_Start+0x148>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a39      	ldr	r2, [pc, #228]	@ (800b118 <HAL_TIM_PWM_Start+0x200>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d013      	beq.n	800b060 <HAL_TIM_PWM_Start+0x148>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a37      	ldr	r2, [pc, #220]	@ (800b11c <HAL_TIM_PWM_Start+0x204>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d00e      	beq.n	800b060 <HAL_TIM_PWM_Start+0x148>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a36      	ldr	r2, [pc, #216]	@ (800b120 <HAL_TIM_PWM_Start+0x208>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d009      	beq.n	800b060 <HAL_TIM_PWM_Start+0x148>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a34      	ldr	r2, [pc, #208]	@ (800b124 <HAL_TIM_PWM_Start+0x20c>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d004      	beq.n	800b060 <HAL_TIM_PWM_Start+0x148>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a33      	ldr	r2, [pc, #204]	@ (800b128 <HAL_TIM_PWM_Start+0x210>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d101      	bne.n	800b064 <HAL_TIM_PWM_Start+0x14c>
 800b060:	2301      	movs	r3, #1
 800b062:	e000      	b.n	800b066 <HAL_TIM_PWM_Start+0x14e>
 800b064:	2300      	movs	r3, #0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d007      	beq.n	800b07a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b078:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a25      	ldr	r2, [pc, #148]	@ (800b114 <HAL_TIM_PWM_Start+0x1fc>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d022      	beq.n	800b0ca <HAL_TIM_PWM_Start+0x1b2>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b08c:	d01d      	beq.n	800b0ca <HAL_TIM_PWM_Start+0x1b2>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a26      	ldr	r2, [pc, #152]	@ (800b12c <HAL_TIM_PWM_Start+0x214>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d018      	beq.n	800b0ca <HAL_TIM_PWM_Start+0x1b2>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a24      	ldr	r2, [pc, #144]	@ (800b130 <HAL_TIM_PWM_Start+0x218>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d013      	beq.n	800b0ca <HAL_TIM_PWM_Start+0x1b2>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a23      	ldr	r2, [pc, #140]	@ (800b134 <HAL_TIM_PWM_Start+0x21c>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d00e      	beq.n	800b0ca <HAL_TIM_PWM_Start+0x1b2>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a19      	ldr	r2, [pc, #100]	@ (800b118 <HAL_TIM_PWM_Start+0x200>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d009      	beq.n	800b0ca <HAL_TIM_PWM_Start+0x1b2>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a18      	ldr	r2, [pc, #96]	@ (800b11c <HAL_TIM_PWM_Start+0x204>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d004      	beq.n	800b0ca <HAL_TIM_PWM_Start+0x1b2>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a18      	ldr	r2, [pc, #96]	@ (800b128 <HAL_TIM_PWM_Start+0x210>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d115      	bne.n	800b0f6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	689a      	ldr	r2, [r3, #8]
 800b0d0:	4b19      	ldr	r3, [pc, #100]	@ (800b138 <HAL_TIM_PWM_Start+0x220>)
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2b06      	cmp	r3, #6
 800b0da:	d015      	beq.n	800b108 <HAL_TIM_PWM_Start+0x1f0>
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0e2:	d011      	beq.n	800b108 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f042 0201 	orr.w	r2, r2, #1
 800b0f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0f4:	e008      	b.n	800b108 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f042 0201 	orr.w	r2, r2, #1
 800b104:	601a      	str	r2, [r3, #0]
 800b106:	e000      	b.n	800b10a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b108:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	40012c00 	.word	0x40012c00
 800b118:	40013400 	.word	0x40013400
 800b11c:	40014000 	.word	0x40014000
 800b120:	40014400 	.word	0x40014400
 800b124:	40014800 	.word	0x40014800
 800b128:	40015000 	.word	0x40015000
 800b12c:	40000400 	.word	0x40000400
 800b130:	40000800 	.word	0x40000800
 800b134:	40000c00 	.word	0x40000c00
 800b138:	00010007 	.word	0x00010007

0800b13c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b14c:	2301      	movs	r3, #1
 800b14e:	e04c      	b.n	800b1ea <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b156:	b2db      	uxtb	r3, r3
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d111      	bne.n	800b180 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f001 fc1f 	bl	800c9a8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d102      	bne.n	800b178 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a1f      	ldr	r2, [pc, #124]	@ (800b1f4 <HAL_TIM_OnePulse_Init+0xb8>)
 800b176:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2202      	movs	r2, #2
 800b184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	3304      	adds	r3, #4
 800b190:	4619      	mov	r1, r3
 800b192:	4610      	mov	r0, r2
 800b194:	f000 ff68 	bl	800c068 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f022 0208 	bic.w	r2, r2, #8
 800b1a6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6819      	ldr	r1, [r3, #0]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	430a      	orrs	r2, r1
 800b1b6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	0800b1f9 	.word	0x0800b1f9

0800b1f8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b200:	bf00      	nop
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b21c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b224:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b22c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b234:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b236:	7bfb      	ldrb	r3, [r7, #15]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d108      	bne.n	800b24e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b23c:	7bbb      	ldrb	r3, [r7, #14]
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d105      	bne.n	800b24e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b242:	7b7b      	ldrb	r3, [r7, #13]
 800b244:	2b01      	cmp	r3, #1
 800b246:	d102      	bne.n	800b24e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b248:	7b3b      	ldrb	r3, [r7, #12]
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d001      	beq.n	800b252 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
 800b250:	e059      	b.n	800b306 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2202      	movs	r2, #2
 800b256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2202      	movs	r2, #2
 800b25e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2202      	movs	r2, #2
 800b266:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2202      	movs	r2, #2
 800b26e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68da      	ldr	r2, [r3, #12]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f042 0202 	orr.w	r2, r2, #2
 800b280:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68da      	ldr	r2, [r3, #12]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f042 0204 	orr.w	r2, r2, #4
 800b290:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	2201      	movs	r2, #1
 800b298:	2100      	movs	r1, #0
 800b29a:	4618      	mov	r0, r3
 800b29c:	f001 fb5e 	bl	800c95c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	2104      	movs	r1, #4
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f001 fb57 	bl	800c95c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4a17      	ldr	r2, [pc, #92]	@ (800b310 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d018      	beq.n	800b2ea <HAL_TIM_OnePulse_Start_IT+0xde>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a15      	ldr	r2, [pc, #84]	@ (800b314 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d013      	beq.n	800b2ea <HAL_TIM_OnePulse_Start_IT+0xde>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a14      	ldr	r2, [pc, #80]	@ (800b318 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d00e      	beq.n	800b2ea <HAL_TIM_OnePulse_Start_IT+0xde>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a12      	ldr	r2, [pc, #72]	@ (800b31c <HAL_TIM_OnePulse_Start_IT+0x110>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d009      	beq.n	800b2ea <HAL_TIM_OnePulse_Start_IT+0xde>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a11      	ldr	r2, [pc, #68]	@ (800b320 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d004      	beq.n	800b2ea <HAL_TIM_OnePulse_Start_IT+0xde>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a0f      	ldr	r2, [pc, #60]	@ (800b324 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d101      	bne.n	800b2ee <HAL_TIM_OnePulse_Start_IT+0xe2>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e000      	b.n	800b2f0 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d007      	beq.n	800b304 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b302:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800b304:	2300      	movs	r3, #0
}
 800b306:	4618      	mov	r0, r3
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	40012c00 	.word	0x40012c00
 800b314:	40013400 	.word	0x40013400
 800b318:	40014000 	.word	0x40014000
 800b31c:	40014400 	.word	0x40014400
 800b320:	40014800 	.word	0x40014800
 800b324:	40015000 	.word	0x40015000

0800b328 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d101      	bne.n	800b33c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	e0a2      	b.n	800b482 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b342:	b2db      	uxtb	r3, r3
 800b344:	2b00      	cmp	r3, #0
 800b346:	d111      	bne.n	800b36c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f001 fb29 	bl	800c9a8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d102      	bne.n	800b364 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a4a      	ldr	r2, [pc, #296]	@ (800b48c <HAL_TIM_Encoder_Init+0x164>)
 800b362:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2202      	movs	r2, #2
 800b370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	6812      	ldr	r2, [r2, #0]
 800b37e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800b382:	f023 0307 	bic.w	r3, r3, #7
 800b386:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	3304      	adds	r3, #4
 800b390:	4619      	mov	r1, r3
 800b392:	4610      	mov	r0, r2
 800b394:	f000 fe68 	bl	800c068 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	699b      	ldr	r3, [r3, #24]
 800b3a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	6a1b      	ldr	r3, [r3, #32]
 800b3ae:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	697a      	ldr	r2, [r7, #20]
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3c0:	f023 0303 	bic.w	r3, r3, #3
 800b3c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	689a      	ldr	r2, [r3, #8]
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	699b      	ldr	r3, [r3, #24]
 800b3ce:	021b      	lsls	r3, r3, #8
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	693a      	ldr	r2, [r7, #16]
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800b3de:	f023 030c 	bic.w	r3, r3, #12
 800b3e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b3ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b3ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	68da      	ldr	r2, [r3, #12]
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	69db      	ldr	r3, [r3, #28]
 800b3f8:	021b      	lsls	r3, r3, #8
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	693a      	ldr	r2, [r7, #16]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	011a      	lsls	r2, r3, #4
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	6a1b      	ldr	r3, [r3, #32]
 800b40c:	031b      	lsls	r3, r3, #12
 800b40e:	4313      	orrs	r3, r2
 800b410:	693a      	ldr	r2, [r7, #16]
 800b412:	4313      	orrs	r3, r2
 800b414:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b41c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b424:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	685a      	ldr	r2, [r3, #4]
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	011b      	lsls	r3, r3, #4
 800b430:	4313      	orrs	r3, r2
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	4313      	orrs	r3, r2
 800b436:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	697a      	ldr	r2, [r7, #20]
 800b43e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	693a      	ldr	r2, [r7, #16]
 800b446:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3718      	adds	r7, #24
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	08006f09 	.word	0x08006f09

0800b490 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b4a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b4a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b4b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b4b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d110      	bne.n	800b4e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d102      	bne.n	800b4cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b4c6:	7b7b      	ldrb	r3, [r7, #13]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d001      	beq.n	800b4d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e069      	b.n	800b5a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2202      	movs	r2, #2
 800b4d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2202      	movs	r2, #2
 800b4dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b4e0:	e031      	b.n	800b546 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	2b04      	cmp	r3, #4
 800b4e6:	d110      	bne.n	800b50a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b4e8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d102      	bne.n	800b4f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b4ee:	7b3b      	ldrb	r3, [r7, #12]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d001      	beq.n	800b4f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e055      	b.n	800b5a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2202      	movs	r2, #2
 800b4fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2202      	movs	r2, #2
 800b504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b508:	e01d      	b.n	800b546 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b50a:	7bfb      	ldrb	r3, [r7, #15]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d108      	bne.n	800b522 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b510:	7bbb      	ldrb	r3, [r7, #14]
 800b512:	2b01      	cmp	r3, #1
 800b514:	d105      	bne.n	800b522 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b516:	7b7b      	ldrb	r3, [r7, #13]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d102      	bne.n	800b522 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b51c:	7b3b      	ldrb	r3, [r7, #12]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d001      	beq.n	800b526 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	e03e      	b.n	800b5a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2202      	movs	r2, #2
 800b52a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2202      	movs	r2, #2
 800b532:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2202      	movs	r2, #2
 800b53a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2202      	movs	r2, #2
 800b542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d003      	beq.n	800b554 <HAL_TIM_Encoder_Start+0xc4>
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	2b04      	cmp	r3, #4
 800b550:	d008      	beq.n	800b564 <HAL_TIM_Encoder_Start+0xd4>
 800b552:	e00f      	b.n	800b574 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2201      	movs	r2, #1
 800b55a:	2100      	movs	r1, #0
 800b55c:	4618      	mov	r0, r3
 800b55e:	f001 f9fd 	bl	800c95c <TIM_CCxChannelCmd>
      break;
 800b562:	e016      	b.n	800b592 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2201      	movs	r2, #1
 800b56a:	2104      	movs	r1, #4
 800b56c:	4618      	mov	r0, r3
 800b56e:	f001 f9f5 	bl	800c95c <TIM_CCxChannelCmd>
      break;
 800b572:	e00e      	b.n	800b592 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2201      	movs	r2, #1
 800b57a:	2100      	movs	r1, #0
 800b57c:	4618      	mov	r0, r3
 800b57e:	f001 f9ed 	bl	800c95c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2201      	movs	r2, #1
 800b588:	2104      	movs	r1, #4
 800b58a:	4618      	mov	r0, r3
 800b58c:	f001 f9e6 	bl	800c95c <TIM_CCxChannelCmd>
      break;
 800b590:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f042 0201 	orr.w	r2, r2, #1
 800b5a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3710      	adds	r7, #16
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	691b      	ldr	r3, [r3, #16]
 800b5c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	f003 0302 	and.w	r3, r3, #2
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d026      	beq.n	800b61c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f003 0302 	and.w	r3, r3, #2
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d021      	beq.n	800b61c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f06f 0202 	mvn.w	r2, #2
 800b5e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	699b      	ldr	r3, [r3, #24]
 800b5ee:	f003 0303 	and.w	r3, r3, #3
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d005      	beq.n	800b602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	4798      	blx	r3
 800b600:	e009      	b.n	800b616 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	f003 0304 	and.w	r3, r3, #4
 800b622:	2b00      	cmp	r3, #0
 800b624:	d026      	beq.n	800b674 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f003 0304 	and.w	r3, r3, #4
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d021      	beq.n	800b674 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f06f 0204 	mvn.w	r2, #4
 800b638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2202      	movs	r2, #2
 800b63e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d005      	beq.n	800b65a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	4798      	blx	r3
 800b658:	e009      	b.n	800b66e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	f003 0308 	and.w	r3, r3, #8
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d026      	beq.n	800b6cc <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f003 0308 	and.w	r3, r3, #8
 800b684:	2b00      	cmp	r3, #0
 800b686:	d021      	beq.n	800b6cc <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f06f 0208 	mvn.w	r2, #8
 800b690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2204      	movs	r2, #4
 800b696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	69db      	ldr	r3, [r3, #28]
 800b69e:	f003 0303 	and.w	r3, r3, #3
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d005      	beq.n	800b6b2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	4798      	blx	r3
 800b6b0:	e009      	b.n	800b6c6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	f003 0310 	and.w	r3, r3, #16
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d026      	beq.n	800b724 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f003 0310 	and.w	r3, r3, #16
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d021      	beq.n	800b724 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f06f 0210 	mvn.w	r2, #16
 800b6e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2208      	movs	r2, #8
 800b6ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	69db      	ldr	r3, [r3, #28]
 800b6f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d005      	beq.n	800b70a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	4798      	blx	r3
 800b708:	e009      	b.n	800b71e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	f003 0301 	and.w	r3, r3, #1
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00e      	beq.n	800b74c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f003 0301 	and.w	r3, r3, #1
 800b734:	2b00      	cmp	r3, #0
 800b736:	d009      	beq.n	800b74c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f06f 0201 	mvn.w	r2, #1
 800b740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b752:	2b00      	cmp	r3, #0
 800b754:	d104      	bne.n	800b760 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00e      	beq.n	800b77e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b766:	2b00      	cmp	r3, #0
 800b768:	d009      	beq.n	800b77e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b784:	2b00      	cmp	r3, #0
 800b786:	d00e      	beq.n	800b7a6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d009      	beq.n	800b7a6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b79a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00e      	beq.n	800b7ce <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d009      	beq.n	800b7ce <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b7c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	f003 0320 	and.w	r3, r3, #32
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00e      	beq.n	800b7f6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f003 0320 	and.w	r3, r3, #32
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d009      	beq.n	800b7f6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f06f 0220 	mvn.w	r2, #32
 800b7ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d00e      	beq.n	800b81e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b806:	2b00      	cmp	r3, #0
 800b808:	d009      	beq.n	800b81e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00e      	beq.n	800b846 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d009      	beq.n	800b846 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b83a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00e      	beq.n	800b86e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b856:	2b00      	cmp	r3, #0
 800b858:	d009      	beq.n	800b86e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00e      	beq.n	800b896 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d009      	beq.n	800b896 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b88a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b896:	bf00      	nop
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
	...

0800b8a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b086      	sub	sp, #24
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d101      	bne.n	800b8be <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b8ba:	2302      	movs	r3, #2
 800b8bc:	e0ff      	b.n	800babe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2b14      	cmp	r3, #20
 800b8ca:	f200 80f0 	bhi.w	800baae <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b8ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b8d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d4:	0800b929 	.word	0x0800b929
 800b8d8:	0800baaf 	.word	0x0800baaf
 800b8dc:	0800baaf 	.word	0x0800baaf
 800b8e0:	0800baaf 	.word	0x0800baaf
 800b8e4:	0800b969 	.word	0x0800b969
 800b8e8:	0800baaf 	.word	0x0800baaf
 800b8ec:	0800baaf 	.word	0x0800baaf
 800b8f0:	0800baaf 	.word	0x0800baaf
 800b8f4:	0800b9ab 	.word	0x0800b9ab
 800b8f8:	0800baaf 	.word	0x0800baaf
 800b8fc:	0800baaf 	.word	0x0800baaf
 800b900:	0800baaf 	.word	0x0800baaf
 800b904:	0800b9eb 	.word	0x0800b9eb
 800b908:	0800baaf 	.word	0x0800baaf
 800b90c:	0800baaf 	.word	0x0800baaf
 800b910:	0800baaf 	.word	0x0800baaf
 800b914:	0800ba2d 	.word	0x0800ba2d
 800b918:	0800baaf 	.word	0x0800baaf
 800b91c:	0800baaf 	.word	0x0800baaf
 800b920:	0800baaf 	.word	0x0800baaf
 800b924:	0800ba6d 	.word	0x0800ba6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	68b9      	ldr	r1, [r7, #8]
 800b92e:	4618      	mov	r0, r3
 800b930:	f000 fc4e 	bl	800c1d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	699a      	ldr	r2, [r3, #24]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f042 0208 	orr.w	r2, r2, #8
 800b942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	699a      	ldr	r2, [r3, #24]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f022 0204 	bic.w	r2, r2, #4
 800b952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	6999      	ldr	r1, [r3, #24]
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	691a      	ldr	r2, [r3, #16]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	430a      	orrs	r2, r1
 800b964:	619a      	str	r2, [r3, #24]
      break;
 800b966:	e0a5      	b.n	800bab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	68b9      	ldr	r1, [r7, #8]
 800b96e:	4618      	mov	r0, r3
 800b970:	f000 fcc8 	bl	800c304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	699a      	ldr	r2, [r3, #24]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	699a      	ldr	r2, [r3, #24]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	6999      	ldr	r1, [r3, #24]
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	021a      	lsls	r2, r3, #8
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	430a      	orrs	r2, r1
 800b9a6:	619a      	str	r2, [r3, #24]
      break;
 800b9a8:	e084      	b.n	800bab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	68b9      	ldr	r1, [r7, #8]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f000 fd3b 	bl	800c42c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	69da      	ldr	r2, [r3, #28]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f042 0208 	orr.w	r2, r2, #8
 800b9c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	69da      	ldr	r2, [r3, #28]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f022 0204 	bic.w	r2, r2, #4
 800b9d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	69d9      	ldr	r1, [r3, #28]
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	691a      	ldr	r2, [r3, #16]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	430a      	orrs	r2, r1
 800b9e6:	61da      	str	r2, [r3, #28]
      break;
 800b9e8:	e064      	b.n	800bab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	68b9      	ldr	r1, [r7, #8]
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f000 fdad 	bl	800c550 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	69da      	ldr	r2, [r3, #28]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	69da      	ldr	r2, [r3, #28]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	69d9      	ldr	r1, [r3, #28]
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	691b      	ldr	r3, [r3, #16]
 800ba20:	021a      	lsls	r2, r3, #8
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	430a      	orrs	r2, r1
 800ba28:	61da      	str	r2, [r3, #28]
      break;
 800ba2a:	e043      	b.n	800bab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	68b9      	ldr	r1, [r7, #8]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f000 fe20 	bl	800c678 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f042 0208 	orr.w	r2, r2, #8
 800ba46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f022 0204 	bic.w	r2, r2, #4
 800ba56:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	691a      	ldr	r2, [r3, #16]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	430a      	orrs	r2, r1
 800ba68:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ba6a:	e023      	b.n	800bab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68b9      	ldr	r1, [r7, #8]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 fe6a 	bl	800c74c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba96:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	691b      	ldr	r3, [r3, #16]
 800baa2:	021a      	lsls	r2, r3, #8
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	430a      	orrs	r2, r1
 800baaa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800baac:	e002      	b.n	800bab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	75fb      	strb	r3, [r7, #23]
      break;
 800bab2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800babc:	7dfb      	ldrb	r3, [r7, #23]
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3718      	adds	r7, #24
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop

0800bac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bad2:	2300      	movs	r3, #0
 800bad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800badc:	2b01      	cmp	r3, #1
 800bade:	d101      	bne.n	800bae4 <HAL_TIM_ConfigClockSource+0x1c>
 800bae0:	2302      	movs	r3, #2
 800bae2:	e0f6      	b.n	800bcd2 <HAL_TIM_ConfigClockSource+0x20a>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2202      	movs	r2, #2
 800baf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800bb02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bb06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4a6f      	ldr	r2, [pc, #444]	@ (800bcdc <HAL_TIM_ConfigClockSource+0x214>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	f000 80c1 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1de>
 800bb24:	4a6d      	ldr	r2, [pc, #436]	@ (800bcdc <HAL_TIM_ConfigClockSource+0x214>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	f200 80c6 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bb2c:	4a6c      	ldr	r2, [pc, #432]	@ (800bce0 <HAL_TIM_ConfigClockSource+0x218>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	f000 80b9 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1de>
 800bb34:	4a6a      	ldr	r2, [pc, #424]	@ (800bce0 <HAL_TIM_ConfigClockSource+0x218>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	f200 80be 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bb3c:	4a69      	ldr	r2, [pc, #420]	@ (800bce4 <HAL_TIM_ConfigClockSource+0x21c>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	f000 80b1 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1de>
 800bb44:	4a67      	ldr	r2, [pc, #412]	@ (800bce4 <HAL_TIM_ConfigClockSource+0x21c>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	f200 80b6 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bb4c:	4a66      	ldr	r2, [pc, #408]	@ (800bce8 <HAL_TIM_ConfigClockSource+0x220>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	f000 80a9 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1de>
 800bb54:	4a64      	ldr	r2, [pc, #400]	@ (800bce8 <HAL_TIM_ConfigClockSource+0x220>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	f200 80ae 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bb5c:	4a63      	ldr	r2, [pc, #396]	@ (800bcec <HAL_TIM_ConfigClockSource+0x224>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	f000 80a1 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1de>
 800bb64:	4a61      	ldr	r2, [pc, #388]	@ (800bcec <HAL_TIM_ConfigClockSource+0x224>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	f200 80a6 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bb6c:	4a60      	ldr	r2, [pc, #384]	@ (800bcf0 <HAL_TIM_ConfigClockSource+0x228>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	f000 8099 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1de>
 800bb74:	4a5e      	ldr	r2, [pc, #376]	@ (800bcf0 <HAL_TIM_ConfigClockSource+0x228>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	f200 809e 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bb7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bb80:	f000 8091 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1de>
 800bb84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bb88:	f200 8096 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bb8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb90:	f000 8089 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1de>
 800bb94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb98:	f200 808e 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bb9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bba0:	d03e      	beq.n	800bc20 <HAL_TIM_ConfigClockSource+0x158>
 800bba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bba6:	f200 8087 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bbaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbae:	f000 8086 	beq.w	800bcbe <HAL_TIM_ConfigClockSource+0x1f6>
 800bbb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbb6:	d87f      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bbb8:	2b70      	cmp	r3, #112	@ 0x70
 800bbba:	d01a      	beq.n	800bbf2 <HAL_TIM_ConfigClockSource+0x12a>
 800bbbc:	2b70      	cmp	r3, #112	@ 0x70
 800bbbe:	d87b      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bbc0:	2b60      	cmp	r3, #96	@ 0x60
 800bbc2:	d050      	beq.n	800bc66 <HAL_TIM_ConfigClockSource+0x19e>
 800bbc4:	2b60      	cmp	r3, #96	@ 0x60
 800bbc6:	d877      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bbc8:	2b50      	cmp	r3, #80	@ 0x50
 800bbca:	d03c      	beq.n	800bc46 <HAL_TIM_ConfigClockSource+0x17e>
 800bbcc:	2b50      	cmp	r3, #80	@ 0x50
 800bbce:	d873      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bbd0:	2b40      	cmp	r3, #64	@ 0x40
 800bbd2:	d058      	beq.n	800bc86 <HAL_TIM_ConfigClockSource+0x1be>
 800bbd4:	2b40      	cmp	r3, #64	@ 0x40
 800bbd6:	d86f      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bbd8:	2b30      	cmp	r3, #48	@ 0x30
 800bbda:	d064      	beq.n	800bca6 <HAL_TIM_ConfigClockSource+0x1de>
 800bbdc:	2b30      	cmp	r3, #48	@ 0x30
 800bbde:	d86b      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bbe0:	2b20      	cmp	r3, #32
 800bbe2:	d060      	beq.n	800bca6 <HAL_TIM_ConfigClockSource+0x1de>
 800bbe4:	2b20      	cmp	r3, #32
 800bbe6:	d867      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1f0>
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d05c      	beq.n	800bca6 <HAL_TIM_ConfigClockSource+0x1de>
 800bbec:	2b10      	cmp	r3, #16
 800bbee:	d05a      	beq.n	800bca6 <HAL_TIM_ConfigClockSource+0x1de>
 800bbf0:	e062      	b.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bc02:	f000 fe8b 	bl	800c91c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bc14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	68ba      	ldr	r2, [r7, #8]
 800bc1c:	609a      	str	r2, [r3, #8]
      break;
 800bc1e:	e04f      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bc30:	f000 fe74 	bl	800c91c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	689a      	ldr	r2, [r3, #8]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bc42:	609a      	str	r2, [r3, #8]
      break;
 800bc44:	e03c      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc52:	461a      	mov	r2, r3
 800bc54:	f000 fde6 	bl	800c824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2150      	movs	r1, #80	@ 0x50
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f000 fe3f 	bl	800c8e2 <TIM_ITRx_SetConfig>
      break;
 800bc64:	e02c      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc72:	461a      	mov	r2, r3
 800bc74:	f000 fe05 	bl	800c882 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2160      	movs	r1, #96	@ 0x60
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f000 fe2f 	bl	800c8e2 <TIM_ITRx_SetConfig>
      break;
 800bc84:	e01c      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc92:	461a      	mov	r2, r3
 800bc94:	f000 fdc6 	bl	800c824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2140      	movs	r1, #64	@ 0x40
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f000 fe1f 	bl	800c8e2 <TIM_ITRx_SetConfig>
      break;
 800bca4:	e00c      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4619      	mov	r1, r3
 800bcb0:	4610      	mov	r0, r2
 800bcb2:	f000 fe16 	bl	800c8e2 <TIM_ITRx_SetConfig>
      break;
 800bcb6:	e003      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	73fb      	strb	r3, [r7, #15]
      break;
 800bcbc:	e000      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800bcbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bcd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	00100070 	.word	0x00100070
 800bce0:	00100060 	.word	0x00100060
 800bce4:	00100050 	.word	0x00100050
 800bce8:	00100040 	.word	0x00100040
 800bcec:	00100030 	.word	0x00100030
 800bcf0:	00100020 	.word	0x00100020

0800bcf4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800bcfc:	bf00      	nop
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd10:	bf00      	nop
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd24:	bf00      	nop
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800bd38:	bf00      	nop
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd4c:	bf00      	nop
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800bd60:	bf00      	nop
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd74:	bf00      	nop
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800bd9c:	bf00      	nop
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b087      	sub	sp, #28
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	607a      	str	r2, [r7, #4]
 800bdb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d101      	bne.n	800bdc4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e14a      	b.n	800c05a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	f040 80dd 	bne.w	800bf8c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800bdd2:	7afb      	ldrb	r3, [r7, #11]
 800bdd4:	2b1f      	cmp	r3, #31
 800bdd6:	f200 80d6 	bhi.w	800bf86 <HAL_TIM_RegisterCallback+0x1de>
 800bdda:	a201      	add	r2, pc, #4	@ (adr r2, 800bde0 <HAL_TIM_RegisterCallback+0x38>)
 800bddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde0:	0800be61 	.word	0x0800be61
 800bde4:	0800be69 	.word	0x0800be69
 800bde8:	0800be71 	.word	0x0800be71
 800bdec:	0800be79 	.word	0x0800be79
 800bdf0:	0800be81 	.word	0x0800be81
 800bdf4:	0800be89 	.word	0x0800be89
 800bdf8:	0800be91 	.word	0x0800be91
 800bdfc:	0800be99 	.word	0x0800be99
 800be00:	0800bea1 	.word	0x0800bea1
 800be04:	0800bea9 	.word	0x0800bea9
 800be08:	0800beb1 	.word	0x0800beb1
 800be0c:	0800beb9 	.word	0x0800beb9
 800be10:	0800bec1 	.word	0x0800bec1
 800be14:	0800bec9 	.word	0x0800bec9
 800be18:	0800bed3 	.word	0x0800bed3
 800be1c:	0800bedd 	.word	0x0800bedd
 800be20:	0800bee7 	.word	0x0800bee7
 800be24:	0800bef1 	.word	0x0800bef1
 800be28:	0800befb 	.word	0x0800befb
 800be2c:	0800bf05 	.word	0x0800bf05
 800be30:	0800bf0f 	.word	0x0800bf0f
 800be34:	0800bf19 	.word	0x0800bf19
 800be38:	0800bf23 	.word	0x0800bf23
 800be3c:	0800bf2d 	.word	0x0800bf2d
 800be40:	0800bf37 	.word	0x0800bf37
 800be44:	0800bf41 	.word	0x0800bf41
 800be48:	0800bf4b 	.word	0x0800bf4b
 800be4c:	0800bf55 	.word	0x0800bf55
 800be50:	0800bf5f 	.word	0x0800bf5f
 800be54:	0800bf69 	.word	0x0800bf69
 800be58:	0800bf73 	.word	0x0800bf73
 800be5c:	0800bf7d 	.word	0x0800bf7d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800be66:	e0f7      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800be6e:	e0f3      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800be76:	e0ef      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800be7e:	e0eb      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800be86:	e0e7      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	687a      	ldr	r2, [r7, #4]
 800be8c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800be8e:	e0e3      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800be96:	e0df      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800be9e:	e0db      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800bea6:	e0d7      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800beae:	e0d3      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800beb6:	e0cf      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800bebe:	e0cb      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800bec6:	e0c7      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800bed0:	e0c2      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800beda:	e0bd      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800bee4:	e0b8      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800beee:	e0b3      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800bef8:	e0ae      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800bf02:	e0a9      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800bf0c:	e0a4      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800bf16:	e09f      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800bf20:	e09a      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800bf2a:	e095      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800bf34:	e090      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800bf3e:	e08b      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800bf48:	e086      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800bf52:	e081      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800bf5c:	e07c      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800bf66:	e077      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800bf70:	e072      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800bf7a:	e06d      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800bf84:	e068      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800bf86:	2301      	movs	r3, #1
 800bf88:	75fb      	strb	r3, [r7, #23]
        break;
 800bf8a:	e065      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d15d      	bne.n	800c054 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800bf98:	7afb      	ldrb	r3, [r7, #11]
 800bf9a:	2b0d      	cmp	r3, #13
 800bf9c:	d857      	bhi.n	800c04e <HAL_TIM_RegisterCallback+0x2a6>
 800bf9e:	a201      	add	r2, pc, #4	@ (adr r2, 800bfa4 <HAL_TIM_RegisterCallback+0x1fc>)
 800bfa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa4:	0800bfdd 	.word	0x0800bfdd
 800bfa8:	0800bfe5 	.word	0x0800bfe5
 800bfac:	0800bfed 	.word	0x0800bfed
 800bfb0:	0800bff5 	.word	0x0800bff5
 800bfb4:	0800bffd 	.word	0x0800bffd
 800bfb8:	0800c005 	.word	0x0800c005
 800bfbc:	0800c00d 	.word	0x0800c00d
 800bfc0:	0800c015 	.word	0x0800c015
 800bfc4:	0800c01d 	.word	0x0800c01d
 800bfc8:	0800c025 	.word	0x0800c025
 800bfcc:	0800c02d 	.word	0x0800c02d
 800bfd0:	0800c035 	.word	0x0800c035
 800bfd4:	0800c03d 	.word	0x0800c03d
 800bfd8:	0800c045 	.word	0x0800c045
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800bfe2:	e039      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	687a      	ldr	r2, [r7, #4]
 800bfe8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800bfea:	e035      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800bff2:	e031      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800bffa:	e02d      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800c002:	e029      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800c00a:	e025      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800c012:	e021      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800c01a:	e01d      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800c022:	e019      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800c02a:	e015      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800c032:	e011      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800c03a:	e00d      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800c042:	e009      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800c04c:	e004      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800c04e:	2301      	movs	r3, #1
 800c050:	75fb      	strb	r3, [r7, #23]
        break;
 800c052:	e001      	b.n	800c058 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c058:	7dfb      	ldrb	r3, [r7, #23]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	371c      	adds	r7, #28
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop

0800c068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c068:	b480      	push	{r7}
 800c06a:	b085      	sub	sp, #20
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4a4c      	ldr	r2, [pc, #304]	@ (800c1ac <TIM_Base_SetConfig+0x144>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d017      	beq.n	800c0b0 <TIM_Base_SetConfig+0x48>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c086:	d013      	beq.n	800c0b0 <TIM_Base_SetConfig+0x48>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	4a49      	ldr	r2, [pc, #292]	@ (800c1b0 <TIM_Base_SetConfig+0x148>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d00f      	beq.n	800c0b0 <TIM_Base_SetConfig+0x48>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	4a48      	ldr	r2, [pc, #288]	@ (800c1b4 <TIM_Base_SetConfig+0x14c>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d00b      	beq.n	800c0b0 <TIM_Base_SetConfig+0x48>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4a47      	ldr	r2, [pc, #284]	@ (800c1b8 <TIM_Base_SetConfig+0x150>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d007      	beq.n	800c0b0 <TIM_Base_SetConfig+0x48>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4a46      	ldr	r2, [pc, #280]	@ (800c1bc <TIM_Base_SetConfig+0x154>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d003      	beq.n	800c0b0 <TIM_Base_SetConfig+0x48>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4a45      	ldr	r2, [pc, #276]	@ (800c1c0 <TIM_Base_SetConfig+0x158>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d108      	bne.n	800c0c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	68fa      	ldr	r2, [r7, #12]
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4a39      	ldr	r2, [pc, #228]	@ (800c1ac <TIM_Base_SetConfig+0x144>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d023      	beq.n	800c112 <TIM_Base_SetConfig+0xaa>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0d0:	d01f      	beq.n	800c112 <TIM_Base_SetConfig+0xaa>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	4a36      	ldr	r2, [pc, #216]	@ (800c1b0 <TIM_Base_SetConfig+0x148>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d01b      	beq.n	800c112 <TIM_Base_SetConfig+0xaa>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4a35      	ldr	r2, [pc, #212]	@ (800c1b4 <TIM_Base_SetConfig+0x14c>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d017      	beq.n	800c112 <TIM_Base_SetConfig+0xaa>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	4a34      	ldr	r2, [pc, #208]	@ (800c1b8 <TIM_Base_SetConfig+0x150>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d013      	beq.n	800c112 <TIM_Base_SetConfig+0xaa>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	4a33      	ldr	r2, [pc, #204]	@ (800c1bc <TIM_Base_SetConfig+0x154>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d00f      	beq.n	800c112 <TIM_Base_SetConfig+0xaa>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	4a33      	ldr	r2, [pc, #204]	@ (800c1c4 <TIM_Base_SetConfig+0x15c>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d00b      	beq.n	800c112 <TIM_Base_SetConfig+0xaa>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	4a32      	ldr	r2, [pc, #200]	@ (800c1c8 <TIM_Base_SetConfig+0x160>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d007      	beq.n	800c112 <TIM_Base_SetConfig+0xaa>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	4a31      	ldr	r2, [pc, #196]	@ (800c1cc <TIM_Base_SetConfig+0x164>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d003      	beq.n	800c112 <TIM_Base_SetConfig+0xaa>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	4a2c      	ldr	r2, [pc, #176]	@ (800c1c0 <TIM_Base_SetConfig+0x158>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d108      	bne.n	800c124 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	68fa      	ldr	r2, [r7, #12]
 800c120:	4313      	orrs	r3, r2
 800c122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	695b      	ldr	r3, [r3, #20]
 800c12e:	4313      	orrs	r3, r2
 800c130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	689a      	ldr	r2, [r3, #8]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4a18      	ldr	r2, [pc, #96]	@ (800c1ac <TIM_Base_SetConfig+0x144>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d013      	beq.n	800c178 <TIM_Base_SetConfig+0x110>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4a1a      	ldr	r2, [pc, #104]	@ (800c1bc <TIM_Base_SetConfig+0x154>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d00f      	beq.n	800c178 <TIM_Base_SetConfig+0x110>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4a1a      	ldr	r2, [pc, #104]	@ (800c1c4 <TIM_Base_SetConfig+0x15c>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d00b      	beq.n	800c178 <TIM_Base_SetConfig+0x110>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	4a19      	ldr	r2, [pc, #100]	@ (800c1c8 <TIM_Base_SetConfig+0x160>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d007      	beq.n	800c178 <TIM_Base_SetConfig+0x110>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	4a18      	ldr	r2, [pc, #96]	@ (800c1cc <TIM_Base_SetConfig+0x164>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d003      	beq.n	800c178 <TIM_Base_SetConfig+0x110>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4a13      	ldr	r2, [pc, #76]	@ (800c1c0 <TIM_Base_SetConfig+0x158>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d103      	bne.n	800c180 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	691a      	ldr	r2, [r3, #16]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	f003 0301 	and.w	r3, r3, #1
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d105      	bne.n	800c19e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	f023 0201 	bic.w	r2, r3, #1
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	611a      	str	r2, [r3, #16]
  }
}
 800c19e:	bf00      	nop
 800c1a0:	3714      	adds	r7, #20
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop
 800c1ac:	40012c00 	.word	0x40012c00
 800c1b0:	40000400 	.word	0x40000400
 800c1b4:	40000800 	.word	0x40000800
 800c1b8:	40000c00 	.word	0x40000c00
 800c1bc:	40013400 	.word	0x40013400
 800c1c0:	40015000 	.word	0x40015000
 800c1c4:	40014000 	.word	0x40014000
 800c1c8:	40014400 	.word	0x40014400
 800c1cc:	40014800 	.word	0x40014800

0800c1d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b087      	sub	sp, #28
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a1b      	ldr	r3, [r3, #32]
 800c1de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6a1b      	ldr	r3, [r3, #32]
 800c1e4:	f023 0201 	bic.w	r2, r3, #1
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	699b      	ldr	r3, [r3, #24]
 800c1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c1fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f023 0303 	bic.w	r3, r3, #3
 800c20a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	68fa      	ldr	r2, [r7, #12]
 800c212:	4313      	orrs	r3, r2
 800c214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	f023 0302 	bic.w	r3, r3, #2
 800c21c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	697a      	ldr	r2, [r7, #20]
 800c224:	4313      	orrs	r3, r2
 800c226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a30      	ldr	r2, [pc, #192]	@ (800c2ec <TIM_OC1_SetConfig+0x11c>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d013      	beq.n	800c258 <TIM_OC1_SetConfig+0x88>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a2f      	ldr	r2, [pc, #188]	@ (800c2f0 <TIM_OC1_SetConfig+0x120>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d00f      	beq.n	800c258 <TIM_OC1_SetConfig+0x88>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4a2e      	ldr	r2, [pc, #184]	@ (800c2f4 <TIM_OC1_SetConfig+0x124>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d00b      	beq.n	800c258 <TIM_OC1_SetConfig+0x88>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a2d      	ldr	r2, [pc, #180]	@ (800c2f8 <TIM_OC1_SetConfig+0x128>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d007      	beq.n	800c258 <TIM_OC1_SetConfig+0x88>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4a2c      	ldr	r2, [pc, #176]	@ (800c2fc <TIM_OC1_SetConfig+0x12c>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d003      	beq.n	800c258 <TIM_OC1_SetConfig+0x88>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4a2b      	ldr	r2, [pc, #172]	@ (800c300 <TIM_OC1_SetConfig+0x130>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d10c      	bne.n	800c272 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	f023 0308 	bic.w	r3, r3, #8
 800c25e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	697a      	ldr	r2, [r7, #20]
 800c266:	4313      	orrs	r3, r2
 800c268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	f023 0304 	bic.w	r3, r3, #4
 800c270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a1d      	ldr	r2, [pc, #116]	@ (800c2ec <TIM_OC1_SetConfig+0x11c>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d013      	beq.n	800c2a2 <TIM_OC1_SetConfig+0xd2>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a1c      	ldr	r2, [pc, #112]	@ (800c2f0 <TIM_OC1_SetConfig+0x120>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d00f      	beq.n	800c2a2 <TIM_OC1_SetConfig+0xd2>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a1b      	ldr	r2, [pc, #108]	@ (800c2f4 <TIM_OC1_SetConfig+0x124>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d00b      	beq.n	800c2a2 <TIM_OC1_SetConfig+0xd2>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a1a      	ldr	r2, [pc, #104]	@ (800c2f8 <TIM_OC1_SetConfig+0x128>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d007      	beq.n	800c2a2 <TIM_OC1_SetConfig+0xd2>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a19      	ldr	r2, [pc, #100]	@ (800c2fc <TIM_OC1_SetConfig+0x12c>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d003      	beq.n	800c2a2 <TIM_OC1_SetConfig+0xd2>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a18      	ldr	r2, [pc, #96]	@ (800c300 <TIM_OC1_SetConfig+0x130>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d111      	bne.n	800c2c6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c2a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c2b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	695b      	ldr	r3, [r3, #20]
 800c2b6:	693a      	ldr	r2, [r7, #16]
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	693a      	ldr	r2, [r7, #16]
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	685a      	ldr	r2, [r3, #4]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	697a      	ldr	r2, [r7, #20]
 800c2de:	621a      	str	r2, [r3, #32]
}
 800c2e0:	bf00      	nop
 800c2e2:	371c      	adds	r7, #28
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr
 800c2ec:	40012c00 	.word	0x40012c00
 800c2f0:	40013400 	.word	0x40013400
 800c2f4:	40014000 	.word	0x40014000
 800c2f8:	40014400 	.word	0x40014400
 800c2fc:	40014800 	.word	0x40014800
 800c300:	40015000 	.word	0x40015000

0800c304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c304:	b480      	push	{r7}
 800c306:	b087      	sub	sp, #28
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a1b      	ldr	r3, [r3, #32]
 800c312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6a1b      	ldr	r3, [r3, #32]
 800c318:	f023 0210 	bic.w	r2, r3, #16
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	699b      	ldr	r3, [r3, #24]
 800c32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c332:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c33e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	021b      	lsls	r3, r3, #8
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	4313      	orrs	r3, r2
 800c34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	f023 0320 	bic.w	r3, r3, #32
 800c352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	011b      	lsls	r3, r3, #4
 800c35a:	697a      	ldr	r2, [r7, #20]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4a2c      	ldr	r2, [pc, #176]	@ (800c414 <TIM_OC2_SetConfig+0x110>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d007      	beq.n	800c378 <TIM_OC2_SetConfig+0x74>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4a2b      	ldr	r2, [pc, #172]	@ (800c418 <TIM_OC2_SetConfig+0x114>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d003      	beq.n	800c378 <TIM_OC2_SetConfig+0x74>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4a2a      	ldr	r2, [pc, #168]	@ (800c41c <TIM_OC2_SetConfig+0x118>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d10d      	bne.n	800c394 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c37e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	68db      	ldr	r3, [r3, #12]
 800c384:	011b      	lsls	r3, r3, #4
 800c386:	697a      	ldr	r2, [r7, #20]
 800c388:	4313      	orrs	r3, r2
 800c38a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c392:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	4a1f      	ldr	r2, [pc, #124]	@ (800c414 <TIM_OC2_SetConfig+0x110>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d013      	beq.n	800c3c4 <TIM_OC2_SetConfig+0xc0>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4a1e      	ldr	r2, [pc, #120]	@ (800c418 <TIM_OC2_SetConfig+0x114>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d00f      	beq.n	800c3c4 <TIM_OC2_SetConfig+0xc0>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	4a1e      	ldr	r2, [pc, #120]	@ (800c420 <TIM_OC2_SetConfig+0x11c>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d00b      	beq.n	800c3c4 <TIM_OC2_SetConfig+0xc0>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	4a1d      	ldr	r2, [pc, #116]	@ (800c424 <TIM_OC2_SetConfig+0x120>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d007      	beq.n	800c3c4 <TIM_OC2_SetConfig+0xc0>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	4a1c      	ldr	r2, [pc, #112]	@ (800c428 <TIM_OC2_SetConfig+0x124>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d003      	beq.n	800c3c4 <TIM_OC2_SetConfig+0xc0>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4a17      	ldr	r2, [pc, #92]	@ (800c41c <TIM_OC2_SetConfig+0x118>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d113      	bne.n	800c3ec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c3ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c3d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	695b      	ldr	r3, [r3, #20]
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	693a      	ldr	r2, [r7, #16]
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	699b      	ldr	r3, [r3, #24]
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	693a      	ldr	r2, [r7, #16]
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	693a      	ldr	r2, [r7, #16]
 800c3f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68fa      	ldr	r2, [r7, #12]
 800c3f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	685a      	ldr	r2, [r3, #4]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	697a      	ldr	r2, [r7, #20]
 800c404:	621a      	str	r2, [r3, #32]
}
 800c406:	bf00      	nop
 800c408:	371c      	adds	r7, #28
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	40012c00 	.word	0x40012c00
 800c418:	40013400 	.word	0x40013400
 800c41c:	40015000 	.word	0x40015000
 800c420:	40014000 	.word	0x40014000
 800c424:	40014400 	.word	0x40014400
 800c428:	40014800 	.word	0x40014800

0800c42c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b087      	sub	sp, #28
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6a1b      	ldr	r3, [r3, #32]
 800c43a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a1b      	ldr	r3, [r3, #32]
 800c440:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	69db      	ldr	r3, [r3, #28]
 800c452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c45a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c45e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f023 0303 	bic.w	r3, r3, #3
 800c466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	68fa      	ldr	r2, [r7, #12]
 800c46e:	4313      	orrs	r3, r2
 800c470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	021b      	lsls	r3, r3, #8
 800c480:	697a      	ldr	r2, [r7, #20]
 800c482:	4313      	orrs	r3, r2
 800c484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a2b      	ldr	r2, [pc, #172]	@ (800c538 <TIM_OC3_SetConfig+0x10c>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d007      	beq.n	800c49e <TIM_OC3_SetConfig+0x72>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a2a      	ldr	r2, [pc, #168]	@ (800c53c <TIM_OC3_SetConfig+0x110>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d003      	beq.n	800c49e <TIM_OC3_SetConfig+0x72>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	4a29      	ldr	r2, [pc, #164]	@ (800c540 <TIM_OC3_SetConfig+0x114>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d10d      	bne.n	800c4ba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c4a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	021b      	lsls	r3, r3, #8
 800c4ac:	697a      	ldr	r2, [r7, #20]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c4b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a1e      	ldr	r2, [pc, #120]	@ (800c538 <TIM_OC3_SetConfig+0x10c>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d013      	beq.n	800c4ea <TIM_OC3_SetConfig+0xbe>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4a1d      	ldr	r2, [pc, #116]	@ (800c53c <TIM_OC3_SetConfig+0x110>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d00f      	beq.n	800c4ea <TIM_OC3_SetConfig+0xbe>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c544 <TIM_OC3_SetConfig+0x118>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d00b      	beq.n	800c4ea <TIM_OC3_SetConfig+0xbe>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	4a1c      	ldr	r2, [pc, #112]	@ (800c548 <TIM_OC3_SetConfig+0x11c>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d007      	beq.n	800c4ea <TIM_OC3_SetConfig+0xbe>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	4a1b      	ldr	r2, [pc, #108]	@ (800c54c <TIM_OC3_SetConfig+0x120>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d003      	beq.n	800c4ea <TIM_OC3_SetConfig+0xbe>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	4a16      	ldr	r2, [pc, #88]	@ (800c540 <TIM_OC3_SetConfig+0x114>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d113      	bne.n	800c512 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c4f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c4f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	011b      	lsls	r3, r3, #4
 800c500:	693a      	ldr	r2, [r7, #16]
 800c502:	4313      	orrs	r3, r2
 800c504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	699b      	ldr	r3, [r3, #24]
 800c50a:	011b      	lsls	r3, r3, #4
 800c50c:	693a      	ldr	r2, [r7, #16]
 800c50e:	4313      	orrs	r3, r2
 800c510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	693a      	ldr	r2, [r7, #16]
 800c516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	685a      	ldr	r2, [r3, #4]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	697a      	ldr	r2, [r7, #20]
 800c52a:	621a      	str	r2, [r3, #32]
}
 800c52c:	bf00      	nop
 800c52e:	371c      	adds	r7, #28
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr
 800c538:	40012c00 	.word	0x40012c00
 800c53c:	40013400 	.word	0x40013400
 800c540:	40015000 	.word	0x40015000
 800c544:	40014000 	.word	0x40014000
 800c548:	40014400 	.word	0x40014400
 800c54c:	40014800 	.word	0x40014800

0800c550 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c550:	b480      	push	{r7}
 800c552:	b087      	sub	sp, #28
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6a1b      	ldr	r3, [r3, #32]
 800c55e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6a1b      	ldr	r3, [r3, #32]
 800c564:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	69db      	ldr	r3, [r3, #28]
 800c576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c57e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c58a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	021b      	lsls	r3, r3, #8
 800c592:	68fa      	ldr	r2, [r7, #12]
 800c594:	4313      	orrs	r3, r2
 800c596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c59e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	031b      	lsls	r3, r3, #12
 800c5a6:	697a      	ldr	r2, [r7, #20]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	4a2c      	ldr	r2, [pc, #176]	@ (800c660 <TIM_OC4_SetConfig+0x110>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d007      	beq.n	800c5c4 <TIM_OC4_SetConfig+0x74>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4a2b      	ldr	r2, [pc, #172]	@ (800c664 <TIM_OC4_SetConfig+0x114>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d003      	beq.n	800c5c4 <TIM_OC4_SetConfig+0x74>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a2a      	ldr	r2, [pc, #168]	@ (800c668 <TIM_OC4_SetConfig+0x118>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d10d      	bne.n	800c5e0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c5ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	031b      	lsls	r3, r3, #12
 800c5d2:	697a      	ldr	r2, [r7, #20]
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c5de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a1f      	ldr	r2, [pc, #124]	@ (800c660 <TIM_OC4_SetConfig+0x110>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d013      	beq.n	800c610 <TIM_OC4_SetConfig+0xc0>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a1e      	ldr	r2, [pc, #120]	@ (800c664 <TIM_OC4_SetConfig+0x114>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d00f      	beq.n	800c610 <TIM_OC4_SetConfig+0xc0>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4a1e      	ldr	r2, [pc, #120]	@ (800c66c <TIM_OC4_SetConfig+0x11c>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d00b      	beq.n	800c610 <TIM_OC4_SetConfig+0xc0>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	4a1d      	ldr	r2, [pc, #116]	@ (800c670 <TIM_OC4_SetConfig+0x120>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d007      	beq.n	800c610 <TIM_OC4_SetConfig+0xc0>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4a1c      	ldr	r2, [pc, #112]	@ (800c674 <TIM_OC4_SetConfig+0x124>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d003      	beq.n	800c610 <TIM_OC4_SetConfig+0xc0>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4a17      	ldr	r2, [pc, #92]	@ (800c668 <TIM_OC4_SetConfig+0x118>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d113      	bne.n	800c638 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c616:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c61e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	695b      	ldr	r3, [r3, #20]
 800c624:	019b      	lsls	r3, r3, #6
 800c626:	693a      	ldr	r2, [r7, #16]
 800c628:	4313      	orrs	r3, r2
 800c62a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	699b      	ldr	r3, [r3, #24]
 800c630:	019b      	lsls	r3, r3, #6
 800c632:	693a      	ldr	r2, [r7, #16]
 800c634:	4313      	orrs	r3, r2
 800c636:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	693a      	ldr	r2, [r7, #16]
 800c63c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	685a      	ldr	r2, [r3, #4]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	697a      	ldr	r2, [r7, #20]
 800c650:	621a      	str	r2, [r3, #32]
}
 800c652:	bf00      	nop
 800c654:	371c      	adds	r7, #28
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop
 800c660:	40012c00 	.word	0x40012c00
 800c664:	40013400 	.word	0x40013400
 800c668:	40015000 	.word	0x40015000
 800c66c:	40014000 	.word	0x40014000
 800c670:	40014400 	.word	0x40014400
 800c674:	40014800 	.word	0x40014800

0800c678 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c678:	b480      	push	{r7}
 800c67a:	b087      	sub	sp, #28
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6a1b      	ldr	r3, [r3, #32]
 800c68c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c6a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	68fa      	ldr	r2, [r7, #12]
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c6bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	041b      	lsls	r3, r3, #16
 800c6c4:	693a      	ldr	r2, [r7, #16]
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a19      	ldr	r2, [pc, #100]	@ (800c734 <TIM_OC5_SetConfig+0xbc>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d013      	beq.n	800c6fa <TIM_OC5_SetConfig+0x82>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4a18      	ldr	r2, [pc, #96]	@ (800c738 <TIM_OC5_SetConfig+0xc0>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d00f      	beq.n	800c6fa <TIM_OC5_SetConfig+0x82>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4a17      	ldr	r2, [pc, #92]	@ (800c73c <TIM_OC5_SetConfig+0xc4>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d00b      	beq.n	800c6fa <TIM_OC5_SetConfig+0x82>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4a16      	ldr	r2, [pc, #88]	@ (800c740 <TIM_OC5_SetConfig+0xc8>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d007      	beq.n	800c6fa <TIM_OC5_SetConfig+0x82>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	4a15      	ldr	r2, [pc, #84]	@ (800c744 <TIM_OC5_SetConfig+0xcc>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d003      	beq.n	800c6fa <TIM_OC5_SetConfig+0x82>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4a14      	ldr	r2, [pc, #80]	@ (800c748 <TIM_OC5_SetConfig+0xd0>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d109      	bne.n	800c70e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c700:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	695b      	ldr	r3, [r3, #20]
 800c706:	021b      	lsls	r3, r3, #8
 800c708:	697a      	ldr	r2, [r7, #20]
 800c70a:	4313      	orrs	r3, r2
 800c70c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	697a      	ldr	r2, [r7, #20]
 800c712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	68fa      	ldr	r2, [r7, #12]
 800c718:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	685a      	ldr	r2, [r3, #4]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	693a      	ldr	r2, [r7, #16]
 800c726:	621a      	str	r2, [r3, #32]
}
 800c728:	bf00      	nop
 800c72a:	371c      	adds	r7, #28
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr
 800c734:	40012c00 	.word	0x40012c00
 800c738:	40013400 	.word	0x40013400
 800c73c:	40014000 	.word	0x40014000
 800c740:	40014400 	.word	0x40014400
 800c744:	40014800 	.word	0x40014800
 800c748:	40015000 	.word	0x40015000

0800c74c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b087      	sub	sp, #28
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6a1b      	ldr	r3, [r3, #32]
 800c75a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6a1b      	ldr	r3, [r3, #32]
 800c760:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c77a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c77e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	021b      	lsls	r3, r3, #8
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	4313      	orrs	r3, r2
 800c78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	051b      	lsls	r3, r3, #20
 800c79a:	693a      	ldr	r2, [r7, #16]
 800c79c:	4313      	orrs	r3, r2
 800c79e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a1a      	ldr	r2, [pc, #104]	@ (800c80c <TIM_OC6_SetConfig+0xc0>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d013      	beq.n	800c7d0 <TIM_OC6_SetConfig+0x84>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a19      	ldr	r2, [pc, #100]	@ (800c810 <TIM_OC6_SetConfig+0xc4>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d00f      	beq.n	800c7d0 <TIM_OC6_SetConfig+0x84>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4a18      	ldr	r2, [pc, #96]	@ (800c814 <TIM_OC6_SetConfig+0xc8>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d00b      	beq.n	800c7d0 <TIM_OC6_SetConfig+0x84>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4a17      	ldr	r2, [pc, #92]	@ (800c818 <TIM_OC6_SetConfig+0xcc>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d007      	beq.n	800c7d0 <TIM_OC6_SetConfig+0x84>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a16      	ldr	r2, [pc, #88]	@ (800c81c <TIM_OC6_SetConfig+0xd0>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d003      	beq.n	800c7d0 <TIM_OC6_SetConfig+0x84>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4a15      	ldr	r2, [pc, #84]	@ (800c820 <TIM_OC6_SetConfig+0xd4>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d109      	bne.n	800c7e4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c7d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	695b      	ldr	r3, [r3, #20]
 800c7dc:	029b      	lsls	r3, r3, #10
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	697a      	ldr	r2, [r7, #20]
 800c7e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	685a      	ldr	r2, [r3, #4]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	693a      	ldr	r2, [r7, #16]
 800c7fc:	621a      	str	r2, [r3, #32]
}
 800c7fe:	bf00      	nop
 800c800:	371c      	adds	r7, #28
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	40012c00 	.word	0x40012c00
 800c810:	40013400 	.word	0x40013400
 800c814:	40014000 	.word	0x40014000
 800c818:	40014400 	.word	0x40014400
 800c81c:	40014800 	.word	0x40014800
 800c820:	40015000 	.word	0x40015000

0800c824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c824:	b480      	push	{r7}
 800c826:	b087      	sub	sp, #28
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6a1b      	ldr	r3, [r3, #32]
 800c834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	6a1b      	ldr	r3, [r3, #32]
 800c83a:	f023 0201 	bic.w	r2, r3, #1
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	699b      	ldr	r3, [r3, #24]
 800c846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c84e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	011b      	lsls	r3, r3, #4
 800c854:	693a      	ldr	r2, [r7, #16]
 800c856:	4313      	orrs	r3, r2
 800c858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	f023 030a 	bic.w	r3, r3, #10
 800c860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c862:	697a      	ldr	r2, [r7, #20]
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	4313      	orrs	r3, r2
 800c868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	693a      	ldr	r2, [r7, #16]
 800c86e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	697a      	ldr	r2, [r7, #20]
 800c874:	621a      	str	r2, [r3, #32]
}
 800c876:	bf00      	nop
 800c878:	371c      	adds	r7, #28
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr

0800c882 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c882:	b480      	push	{r7}
 800c884:	b087      	sub	sp, #28
 800c886:	af00      	add	r7, sp, #0
 800c888:	60f8      	str	r0, [r7, #12]
 800c88a:	60b9      	str	r1, [r7, #8]
 800c88c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	6a1b      	ldr	r3, [r3, #32]
 800c892:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6a1b      	ldr	r3, [r3, #32]
 800c898:	f023 0210 	bic.w	r2, r3, #16
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	699b      	ldr	r3, [r3, #24]
 800c8a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c8ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	031b      	lsls	r3, r3, #12
 800c8b2:	693a      	ldr	r2, [r7, #16]
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c8be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	011b      	lsls	r3, r3, #4
 800c8c4:	697a      	ldr	r2, [r7, #20]
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	693a      	ldr	r2, [r7, #16]
 800c8ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	697a      	ldr	r2, [r7, #20]
 800c8d4:	621a      	str	r2, [r3, #32]
}
 800c8d6:	bf00      	nop
 800c8d8:	371c      	adds	r7, #28
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr

0800c8e2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c8e2:	b480      	push	{r7}
 800c8e4:	b085      	sub	sp, #20
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
 800c8ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c8f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c8fe:	683a      	ldr	r2, [r7, #0]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	4313      	orrs	r3, r2
 800c904:	f043 0307 	orr.w	r3, r3, #7
 800c908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	609a      	str	r2, [r3, #8]
}
 800c910:	bf00      	nop
 800c912:	3714      	adds	r7, #20
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr

0800c91c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b087      	sub	sp, #28
 800c920:	af00      	add	r7, sp, #0
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	60b9      	str	r1, [r7, #8]
 800c926:	607a      	str	r2, [r7, #4]
 800c928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	689b      	ldr	r3, [r3, #8]
 800c92e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	021a      	lsls	r2, r3, #8
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	431a      	orrs	r2, r3
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	4313      	orrs	r3, r2
 800c944:	697a      	ldr	r2, [r7, #20]
 800c946:	4313      	orrs	r3, r2
 800c948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	697a      	ldr	r2, [r7, #20]
 800c94e:	609a      	str	r2, [r3, #8]
}
 800c950:	bf00      	nop
 800c952:	371c      	adds	r7, #28
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b087      	sub	sp, #28
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	f003 031f 	and.w	r3, r3, #31
 800c96e:	2201      	movs	r2, #1
 800c970:	fa02 f303 	lsl.w	r3, r2, r3
 800c974:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6a1a      	ldr	r2, [r3, #32]
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	43db      	mvns	r3, r3
 800c97e:	401a      	ands	r2, r3
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6a1a      	ldr	r2, [r3, #32]
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	f003 031f 	and.w	r3, r3, #31
 800c98e:	6879      	ldr	r1, [r7, #4]
 800c990:	fa01 f303 	lsl.w	r3, r1, r3
 800c994:	431a      	orrs	r2, r3
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	621a      	str	r2, [r3, #32]
}
 800c99a:	bf00      	nop
 800c99c:	371c      	adds	r7, #28
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr
	...

0800c9a8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a26      	ldr	r2, [pc, #152]	@ (800ca4c <TIM_ResetCallback+0xa4>)
 800c9b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	4a25      	ldr	r2, [pc, #148]	@ (800ca50 <TIM_ResetCallback+0xa8>)
 800c9bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	4a24      	ldr	r2, [pc, #144]	@ (800ca54 <TIM_ResetCallback+0xac>)
 800c9c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	4a23      	ldr	r2, [pc, #140]	@ (800ca58 <TIM_ResetCallback+0xb0>)
 800c9cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	4a22      	ldr	r2, [pc, #136]	@ (800ca5c <TIM_ResetCallback+0xb4>)
 800c9d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	4a21      	ldr	r2, [pc, #132]	@ (800ca60 <TIM_ResetCallback+0xb8>)
 800c9dc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	4a20      	ldr	r2, [pc, #128]	@ (800ca64 <TIM_ResetCallback+0xbc>)
 800c9e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	4a1f      	ldr	r2, [pc, #124]	@ (800ca68 <TIM_ResetCallback+0xc0>)
 800c9ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	4a1e      	ldr	r2, [pc, #120]	@ (800ca6c <TIM_ResetCallback+0xc4>)
 800c9f4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4a1d      	ldr	r2, [pc, #116]	@ (800ca70 <TIM_ResetCallback+0xc8>)
 800c9fc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4a1c      	ldr	r2, [pc, #112]	@ (800ca74 <TIM_ResetCallback+0xcc>)
 800ca04:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4a1b      	ldr	r2, [pc, #108]	@ (800ca78 <TIM_ResetCallback+0xd0>)
 800ca0c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	4a1a      	ldr	r2, [pc, #104]	@ (800ca7c <TIM_ResetCallback+0xd4>)
 800ca14:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	4a19      	ldr	r2, [pc, #100]	@ (800ca80 <TIM_ResetCallback+0xd8>)
 800ca1c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	4a18      	ldr	r2, [pc, #96]	@ (800ca84 <TIM_ResetCallback+0xdc>)
 800ca24:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4a17      	ldr	r2, [pc, #92]	@ (800ca88 <TIM_ResetCallback+0xe0>)
 800ca2c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	4a16      	ldr	r2, [pc, #88]	@ (800ca8c <TIM_ResetCallback+0xe4>)
 800ca34:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	4a15      	ldr	r2, [pc, #84]	@ (800ca90 <TIM_ResetCallback+0xe8>)
 800ca3c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800ca40:	bf00      	nop
 800ca42:	370c      	adds	r7, #12
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr
 800ca4c:	08005a71 	.word	0x08005a71
 800ca50:	0800bcf5 	.word	0x0800bcf5
 800ca54:	0800bd6d 	.word	0x0800bd6d
 800ca58:	0800bd81 	.word	0x0800bd81
 800ca5c:	0800bd1d 	.word	0x0800bd1d
 800ca60:	0800bd31 	.word	0x0800bd31
 800ca64:	0800bd09 	.word	0x0800bd09
 800ca68:	0800bd45 	.word	0x0800bd45
 800ca6c:	0800bd59 	.word	0x0800bd59
 800ca70:	0800bd95 	.word	0x0800bd95
 800ca74:	0800cce9 	.word	0x0800cce9
 800ca78:	0800ccfd 	.word	0x0800ccfd
 800ca7c:	0800cd11 	.word	0x0800cd11
 800ca80:	0800cd25 	.word	0x0800cd25
 800ca84:	0800cd39 	.word	0x0800cd39
 800ca88:	0800cd4d 	.word	0x0800cd4d
 800ca8c:	0800cd61 	.word	0x0800cd61
 800ca90:	0800cd75 	.word	0x0800cd75

0800ca94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d101      	bne.n	800caac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800caa8:	2302      	movs	r3, #2
 800caaa:	e074      	b.n	800cb96 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2202      	movs	r2, #2
 800cab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a34      	ldr	r2, [pc, #208]	@ (800cba4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d009      	beq.n	800caea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a33      	ldr	r2, [pc, #204]	@ (800cba8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d004      	beq.n	800caea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a31      	ldr	r2, [pc, #196]	@ (800cbac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d108      	bne.n	800cafc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800caf0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	4313      	orrs	r3, r2
 800cafa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800cb02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4a21      	ldr	r2, [pc, #132]	@ (800cba4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d022      	beq.n	800cb6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb2c:	d01d      	beq.n	800cb6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4a1f      	ldr	r2, [pc, #124]	@ (800cbb0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d018      	beq.n	800cb6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a1d      	ldr	r2, [pc, #116]	@ (800cbb4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d013      	beq.n	800cb6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	4a1c      	ldr	r2, [pc, #112]	@ (800cbb8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d00e      	beq.n	800cb6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a15      	ldr	r2, [pc, #84]	@ (800cba8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d009      	beq.n	800cb6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4a18      	ldr	r2, [pc, #96]	@ (800cbbc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d004      	beq.n	800cb6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4a11      	ldr	r2, [pc, #68]	@ (800cbac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d10c      	bne.n	800cb84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	68ba      	ldr	r2, [r7, #8]
 800cb82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2201      	movs	r2, #1
 800cb88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cb94:	2300      	movs	r3, #0
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3714      	adds	r7, #20
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	40012c00 	.word	0x40012c00
 800cba8:	40013400 	.word	0x40013400
 800cbac:	40015000 	.word	0x40015000
 800cbb0:	40000400 	.word	0x40000400
 800cbb4:	40000800 	.word	0x40000800
 800cbb8:	40000c00 	.word	0x40000c00
 800cbbc:	40014000 	.word	0x40014000

0800cbc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b085      	sub	sp, #20
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d101      	bne.n	800cbdc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cbd8:	2302      	movs	r3, #2
 800cbda:	e078      	b.n	800ccce <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	691b      	ldr	r3, [r3, #16]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	695b      	ldr	r3, [r3, #20]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc42:	4313      	orrs	r3, r2
 800cc44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	699b      	ldr	r3, [r3, #24]
 800cc50:	041b      	lsls	r3, r3, #16
 800cc52:	4313      	orrs	r3, r2
 800cc54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	69db      	ldr	r3, [r3, #28]
 800cc60:	4313      	orrs	r3, r2
 800cc62:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a1c      	ldr	r2, [pc, #112]	@ (800ccdc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d009      	beq.n	800cc82 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4a1b      	ldr	r2, [pc, #108]	@ (800cce0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d004      	beq.n	800cc82 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a19      	ldr	r2, [pc, #100]	@ (800cce4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d11c      	bne.n	800ccbc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc8c:	051b      	lsls	r3, r3, #20
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	6a1b      	ldr	r3, [r3, #32]
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccaa:	4313      	orrs	r3, r2
 800ccac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3714      	adds	r7, #20
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	40012c00 	.word	0x40012c00
 800cce0:	40013400 	.word	0x40013400
 800cce4:	40015000 	.word	0x40015000

0800cce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ccf0:	bf00      	nop
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800cd04:	bf00      	nop
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cd18:	bf00      	nop
 800cd1a:	370c      	adds	r7, #12
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cd2c:	bf00      	nop
 800cd2e:	370c      	adds	r7, #12
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cd40:	bf00      	nop
 800cd42:	370c      	adds	r7, #12
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b083      	sub	sp, #12
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cd54:	bf00      	nop
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800cd68:	bf00      	nop
 800cd6a:	370c      	adds	r7, #12
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr

0800cd74 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cd7c:	bf00      	nop
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d101      	bne.n	800cd9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd96:	2301      	movs	r3, #1
 800cd98:	e050      	b.n	800ce3c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d114      	bne.n	800cdce <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 fd5b 	bl	800d868 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d103      	bne.n	800cdc4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	4a21      	ldr	r2, [pc, #132]	@ (800ce44 <HAL_UART_Init+0xbc>)
 800cdc0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2224      	movs	r2, #36	@ 0x24
 800cdd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f022 0201 	bic.w	r2, r2, #1
 800cde4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d002      	beq.n	800cdf4 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f001 f888 	bl	800df04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f000 fd89 	bl	800d90c <UART_SetConfig>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d101      	bne.n	800ce04 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800ce00:	2301      	movs	r3, #1
 800ce02:	e01b      	b.n	800ce3c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	685a      	ldr	r2, [r3, #4]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ce12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	689a      	ldr	r2, [r3, #8]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ce22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f042 0201 	orr.w	r2, r2, #1
 800ce32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f001 f907 	bl	800e048 <UART_CheckIdleState>
 800ce3a:	4603      	mov	r3, r0
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3708      	adds	r7, #8
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	0800725d 	.word	0x0800725d

0800ce48 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b087      	sub	sp, #28
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	460b      	mov	r3, r1
 800ce52:	607a      	str	r2, [r7, #4]
 800ce54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800ce56:	2300      	movs	r3, #0
 800ce58:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d109      	bne.n	800ce74 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800ce70:	2301      	movs	r3, #1
 800ce72:	e09c      	b.n	800cfae <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce7a:	2b20      	cmp	r3, #32
 800ce7c:	d16c      	bne.n	800cf58 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800ce7e:	7afb      	ldrb	r3, [r7, #11]
 800ce80:	2b0c      	cmp	r3, #12
 800ce82:	d85e      	bhi.n	800cf42 <HAL_UART_RegisterCallback+0xfa>
 800ce84:	a201      	add	r2, pc, #4	@ (adr r2, 800ce8c <HAL_UART_RegisterCallback+0x44>)
 800ce86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce8a:	bf00      	nop
 800ce8c:	0800cec1 	.word	0x0800cec1
 800ce90:	0800cecb 	.word	0x0800cecb
 800ce94:	0800ced5 	.word	0x0800ced5
 800ce98:	0800cedf 	.word	0x0800cedf
 800ce9c:	0800cee9 	.word	0x0800cee9
 800cea0:	0800cef3 	.word	0x0800cef3
 800cea4:	0800cefd 	.word	0x0800cefd
 800cea8:	0800cf07 	.word	0x0800cf07
 800ceac:	0800cf11 	.word	0x0800cf11
 800ceb0:	0800cf1b 	.word	0x0800cf1b
 800ceb4:	0800cf25 	.word	0x0800cf25
 800ceb8:	0800cf2f 	.word	0x0800cf2f
 800cebc:	0800cf39 	.word	0x0800cf39
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800cec8:	e070      	b.n	800cfac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800ced2:	e06b      	b.n	800cfac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800cedc:	e066      	b.n	800cfac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800cee6:	e061      	b.n	800cfac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800cef0:	e05c      	b.n	800cfac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800cefa:	e057      	b.n	800cfac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800cf04:	e052      	b.n	800cfac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800cf0e:	e04d      	b.n	800cfac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800cf18:	e048      	b.n	800cfac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800cf22:	e043      	b.n	800cfac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800cf2c:	e03e      	b.n	800cfac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800cf36:	e039      	b.n	800cfac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800cf40:	e034      	b.n	800cfac <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800cf52:	2301      	movs	r3, #1
 800cf54:	75fb      	strb	r3, [r7, #23]
        break;
 800cf56:	e029      	b.n	800cfac <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d11a      	bne.n	800cf98 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800cf62:	7afb      	ldrb	r3, [r7, #11]
 800cf64:	2b0b      	cmp	r3, #11
 800cf66:	d002      	beq.n	800cf6e <HAL_UART_RegisterCallback+0x126>
 800cf68:	2b0c      	cmp	r3, #12
 800cf6a:	d005      	beq.n	800cf78 <HAL_UART_RegisterCallback+0x130>
 800cf6c:	e009      	b.n	800cf82 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800cf76:	e019      	b.n	800cfac <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	687a      	ldr	r2, [r7, #4]
 800cf7c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800cf80:	e014      	b.n	800cfac <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800cf92:	2301      	movs	r3, #1
 800cf94:	75fb      	strb	r3, [r7, #23]
        break;
 800cf96:	e009      	b.n	800cfac <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800cfac:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	371c      	adds	r7, #28
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop

0800cfbc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b08a      	sub	sp, #40	@ 0x28
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cfd0:	2b20      	cmp	r3, #32
 800cfd2:	d137      	bne.n	800d044 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d002      	beq.n	800cfe0 <HAL_UART_Receive_DMA+0x24>
 800cfda:	88fb      	ldrh	r3, [r7, #6]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d101      	bne.n	800cfe4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	e030      	b.n	800d046 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4a18      	ldr	r2, [pc, #96]	@ (800d050 <HAL_UART_Receive_DMA+0x94>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d01f      	beq.n	800d034 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d018      	beq.n	800d034 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	e853 3f00 	ldrex	r3, [r3]
 800d00e:	613b      	str	r3, [r7, #16]
   return(result);
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d016:	627b      	str	r3, [r7, #36]	@ 0x24
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	461a      	mov	r2, r3
 800d01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d020:	623b      	str	r3, [r7, #32]
 800d022:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d024:	69f9      	ldr	r1, [r7, #28]
 800d026:	6a3a      	ldr	r2, [r7, #32]
 800d028:	e841 2300 	strex	r3, r2, [r1]
 800d02c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d1e6      	bne.n	800d002 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d034:	88fb      	ldrh	r3, [r7, #6]
 800d036:	461a      	mov	r2, r3
 800d038:	68b9      	ldr	r1, [r7, #8]
 800d03a:	68f8      	ldr	r0, [r7, #12]
 800d03c:	f001 f91c 	bl	800e278 <UART_Start_Receive_DMA>
 800d040:	4603      	mov	r3, r0
 800d042:	e000      	b.n	800d046 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d044:	2302      	movs	r3, #2
  }
}
 800d046:	4618      	mov	r0, r3
 800d048:	3728      	adds	r7, #40	@ 0x28
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	40008000 	.word	0x40008000

0800d054 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b0ba      	sub	sp, #232	@ 0xe8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	69db      	ldr	r3, [r3, #28]
 800d062:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	689b      	ldr	r3, [r3, #8]
 800d076:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d07a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d07e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d082:	4013      	ands	r3, r2
 800d084:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d11b      	bne.n	800d0c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d094:	f003 0320 	and.w	r3, r3, #32
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d015      	beq.n	800d0c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d09c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0a0:	f003 0320 	and.w	r3, r3, #32
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d105      	bne.n	800d0b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d0a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d009      	beq.n	800d0c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f000 8312 	beq.w	800d6e2 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	4798      	blx	r3
      }
      return;
 800d0c6:	e30c      	b.n	800d6e2 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d0c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f000 8129 	beq.w	800d324 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d0d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d0d6:	4b90      	ldr	r3, [pc, #576]	@ (800d318 <HAL_UART_IRQHandler+0x2c4>)
 800d0d8:	4013      	ands	r3, r2
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d106      	bne.n	800d0ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d0de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d0e2:	4b8e      	ldr	r3, [pc, #568]	@ (800d31c <HAL_UART_IRQHandler+0x2c8>)
 800d0e4:	4013      	ands	r3, r2
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	f000 811c 	beq.w	800d324 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d0ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0f0:	f003 0301 	and.w	r3, r3, #1
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d011      	beq.n	800d11c <HAL_UART_IRQHandler+0xc8>
 800d0f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00b      	beq.n	800d11c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2201      	movs	r2, #1
 800d10a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d112:	f043 0201 	orr.w	r2, r3, #1
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d11c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d120:	f003 0302 	and.w	r3, r3, #2
 800d124:	2b00      	cmp	r3, #0
 800d126:	d011      	beq.n	800d14c <HAL_UART_IRQHandler+0xf8>
 800d128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d12c:	f003 0301 	and.w	r3, r3, #1
 800d130:	2b00      	cmp	r3, #0
 800d132:	d00b      	beq.n	800d14c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	2202      	movs	r2, #2
 800d13a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d142:	f043 0204 	orr.w	r2, r3, #4
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d14c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d150:	f003 0304 	and.w	r3, r3, #4
 800d154:	2b00      	cmp	r3, #0
 800d156:	d011      	beq.n	800d17c <HAL_UART_IRQHandler+0x128>
 800d158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d15c:	f003 0301 	and.w	r3, r3, #1
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00b      	beq.n	800d17c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2204      	movs	r2, #4
 800d16a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d172:	f043 0202 	orr.w	r2, r3, #2
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d17c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d180:	f003 0308 	and.w	r3, r3, #8
 800d184:	2b00      	cmp	r3, #0
 800d186:	d017      	beq.n	800d1b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d18c:	f003 0320 	and.w	r3, r3, #32
 800d190:	2b00      	cmp	r3, #0
 800d192:	d105      	bne.n	800d1a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d194:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d198:	4b5f      	ldr	r3, [pc, #380]	@ (800d318 <HAL_UART_IRQHandler+0x2c4>)
 800d19a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00b      	beq.n	800d1b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2208      	movs	r2, #8
 800d1a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1ae:	f043 0208 	orr.w	r2, r3, #8
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d1b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d012      	beq.n	800d1ea <HAL_UART_IRQHandler+0x196>
 800d1c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00c      	beq.n	800d1ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d1d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1e0:	f043 0220 	orr.w	r2, r3, #32
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	f000 8278 	beq.w	800d6e6 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d1f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1fa:	f003 0320 	and.w	r3, r3, #32
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d013      	beq.n	800d22a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d206:	f003 0320 	and.w	r3, r3, #32
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d105      	bne.n	800d21a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d20e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d216:	2b00      	cmp	r3, #0
 800d218:	d007      	beq.n	800d22a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d003      	beq.n	800d22a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d230:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	689b      	ldr	r3, [r3, #8]
 800d23a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d23e:	2b40      	cmp	r3, #64	@ 0x40
 800d240:	d005      	beq.n	800d24e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d246:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d058      	beq.n	800d300 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f001 f8f9 	bl	800e446 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d25e:	2b40      	cmp	r3, #64	@ 0x40
 800d260:	d148      	bne.n	800d2f4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	3308      	adds	r3, #8
 800d268:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d26c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d270:	e853 3f00 	ldrex	r3, [r3]
 800d274:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d278:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d27c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	3308      	adds	r3, #8
 800d28a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d28e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d292:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d29a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d29e:	e841 2300 	strex	r3, r2, [r1]
 800d2a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d2a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d1d9      	bne.n	800d262 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d017      	beq.n	800d2e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2be:	4a18      	ldr	r2, [pc, #96]	@ (800d320 <HAL_UART_IRQHandler+0x2cc>)
 800d2c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7fc f8c5 	bl	8009458 <HAL_DMA_Abort_IT>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d01f      	beq.n	800d314 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d2e2:	4610      	mov	r0, r2
 800d2e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2e6:	e015      	b.n	800d314 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2f2:	e00f      	b.n	800d314 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2fe:	e009      	b.n	800d314 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d312:	e1e8      	b.n	800d6e6 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d314:	bf00      	nop
    return;
 800d316:	e1e6      	b.n	800d6e6 <HAL_UART_IRQHandler+0x692>
 800d318:	10000001 	.word	0x10000001
 800d31c:	04000120 	.word	0x04000120
 800d320:	0800e711 	.word	0x0800e711

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d328:	2b01      	cmp	r3, #1
 800d32a:	f040 8176 	bne.w	800d61a <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d32e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d332:	f003 0310 	and.w	r3, r3, #16
 800d336:	2b00      	cmp	r3, #0
 800d338:	f000 816f 	beq.w	800d61a <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d33c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d340:	f003 0310 	and.w	r3, r3, #16
 800d344:	2b00      	cmp	r3, #0
 800d346:	f000 8168 	beq.w	800d61a <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2210      	movs	r2, #16
 800d350:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d35c:	2b40      	cmp	r3, #64	@ 0x40
 800d35e:	f040 80dc 	bne.w	800d51a <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d370:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d374:	2b00      	cmp	r3, #0
 800d376:	f000 80b1 	beq.w	800d4dc <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d380:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d384:	429a      	cmp	r2, r3
 800d386:	f080 80a9 	bcs.w	800d4dc <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d390:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f003 0320 	and.w	r3, r3, #32
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	f040 8087 	bne.w	800d4b6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d3b4:	e853 3f00 	ldrex	r3, [r3]
 800d3b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d3bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d3c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d3c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d3d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d3d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d3de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d3e2:	e841 2300 	strex	r3, r2, [r1]
 800d3e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d3ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d1da      	bne.n	800d3a8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	3308      	adds	r3, #8
 800d3f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d3fc:	e853 3f00 	ldrex	r3, [r3]
 800d400:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d402:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d404:	f023 0301 	bic.w	r3, r3, #1
 800d408:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	3308      	adds	r3, #8
 800d412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d416:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d41a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d41e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d422:	e841 2300 	strex	r3, r2, [r1]
 800d426:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d428:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d1e1      	bne.n	800d3f2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	3308      	adds	r3, #8
 800d434:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d436:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d438:	e853 3f00 	ldrex	r3, [r3]
 800d43c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d43e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d444:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	3308      	adds	r3, #8
 800d44e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d452:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d454:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d456:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d458:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d45a:	e841 2300 	strex	r3, r2, [r1]
 800d45e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d460:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d462:	2b00      	cmp	r3, #0
 800d464:	d1e3      	bne.n	800d42e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2220      	movs	r2, #32
 800d46a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2200      	movs	r2, #0
 800d472:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d47c:	e853 3f00 	ldrex	r3, [r3]
 800d480:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d484:	f023 0310 	bic.w	r3, r3, #16
 800d488:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	461a      	mov	r2, r3
 800d492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d496:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d498:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d49a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d49c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d49e:	e841 2300 	strex	r3, r2, [r1]
 800d4a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d4a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d1e4      	bne.n	800d474 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7fb ff78 	bl	80093a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2202      	movs	r2, #2
 800d4ba:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800d4ce:	b292      	uxth	r2, r2
 800d4d0:	1a8a      	subs	r2, r1, r2
 800d4d2:	b292      	uxth	r2, r2
 800d4d4:	4611      	mov	r1, r2
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d4da:	e106      	b.n	800d6ea <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d4e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	f040 80ff 	bne.w	800d6ea <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f003 0320 	and.w	r3, r3, #32
 800d4fa:	2b20      	cmp	r3, #32
 800d4fc:	f040 80f5 	bne.w	800d6ea <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2202      	movs	r2, #2
 800d504:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800d512:	4611      	mov	r1, r2
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	4798      	blx	r3
      return;
 800d518:	e0e7      	b.n	800d6ea <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d526:	b29b      	uxth	r3, r3
 800d528:	1ad3      	subs	r3, r2, r3
 800d52a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d534:	b29b      	uxth	r3, r3
 800d536:	2b00      	cmp	r3, #0
 800d538:	f000 80d9 	beq.w	800d6ee <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800d53c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d540:	2b00      	cmp	r3, #0
 800d542:	f000 80d4 	beq.w	800d6ee <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d54e:	e853 3f00 	ldrex	r3, [r3]
 800d552:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d556:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d55a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	461a      	mov	r2, r3
 800d564:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d568:	647b      	str	r3, [r7, #68]	@ 0x44
 800d56a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d56c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d56e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d570:	e841 2300 	strex	r3, r2, [r1]
 800d574:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1e4      	bne.n	800d546 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	3308      	adds	r3, #8
 800d582:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d586:	e853 3f00 	ldrex	r3, [r3]
 800d58a:	623b      	str	r3, [r7, #32]
   return(result);
 800d58c:	6a3b      	ldr	r3, [r7, #32]
 800d58e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d592:	f023 0301 	bic.w	r3, r3, #1
 800d596:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	3308      	adds	r3, #8
 800d5a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d5a4:	633a      	str	r2, [r7, #48]	@ 0x30
 800d5a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5ac:	e841 2300 	strex	r3, r2, [r1]
 800d5b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d1e1      	bne.n	800d57c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2220      	movs	r2, #32
 800d5bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	e853 3f00 	ldrex	r3, [r3]
 800d5d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	f023 0310 	bic.w	r3, r3, #16
 800d5e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d5ee:	61fb      	str	r3, [r7, #28]
 800d5f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f2:	69b9      	ldr	r1, [r7, #24]
 800d5f4:	69fa      	ldr	r2, [r7, #28]
 800d5f6:	e841 2300 	strex	r3, r2, [r1]
 800d5fa:	617b      	str	r3, [r7, #20]
   return(result);
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d1e4      	bne.n	800d5cc <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2202      	movs	r2, #2
 800d606:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d60e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800d612:	4611      	mov	r1, r2
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d618:	e069      	b.n	800d6ee <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d61a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d61e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d622:	2b00      	cmp	r3, #0
 800d624:	d010      	beq.n	800d648 <HAL_UART_IRQHandler+0x5f4>
 800d626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d62a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00a      	beq.n	800d648 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d63a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d646:	e055      	b.n	800d6f4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d64c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d650:	2b00      	cmp	r3, #0
 800d652:	d014      	beq.n	800d67e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d105      	bne.n	800d66c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d664:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d008      	beq.n	800d67e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d670:	2b00      	cmp	r3, #0
 800d672:	d03e      	beq.n	800d6f2 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	4798      	blx	r3
    }
    return;
 800d67c:	e039      	b.n	800d6f2 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d686:	2b00      	cmp	r3, #0
 800d688:	d009      	beq.n	800d69e <HAL_UART_IRQHandler+0x64a>
 800d68a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d68e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d692:	2b00      	cmp	r3, #0
 800d694:	d003      	beq.n	800d69e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f001 f84e 	bl	800e738 <UART_EndTransmit_IT>
    return;
 800d69c:	e02a      	b.n	800d6f4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d69e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d00b      	beq.n	800d6c2 <HAL_UART_IRQHandler+0x66e>
 800d6aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6ae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d005      	beq.n	800d6c2 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d6c0:	e018      	b.n	800d6f4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d6c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d012      	beq.n	800d6f4 <HAL_UART_IRQHandler+0x6a0>
 800d6ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	da0e      	bge.n	800d6f4 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d6e0:	e008      	b.n	800d6f4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800d6e2:	bf00      	nop
 800d6e4:	e006      	b.n	800d6f4 <HAL_UART_IRQHandler+0x6a0>
    return;
 800d6e6:	bf00      	nop
 800d6e8:	e004      	b.n	800d6f4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800d6ea:	bf00      	nop
 800d6ec:	e002      	b.n	800d6f4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800d6ee:	bf00      	nop
 800d6f0:	e000      	b.n	800d6f4 <HAL_UART_IRQHandler+0x6a0>
    return;
 800d6f2:	bf00      	nop
  }
}
 800d6f4:	37e8      	adds	r7, #232	@ 0xe8
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop

0800d6fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b083      	sub	sp, #12
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d704:	bf00      	nop
 800d706:	370c      	adds	r7, #12
 800d708:	46bd      	mov	sp, r7
 800d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70e:	4770      	bx	lr

0800d710 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d710:	b480      	push	{r7}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d718:	bf00      	nop
 800d71a:	370c      	adds	r7, #12
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr

0800d724 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d724:	b480      	push	{r7}
 800d726:	b083      	sub	sp, #12
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d72c:	bf00      	nop
 800d72e:	370c      	adds	r7, #12
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr

0800d738 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d738:	b480      	push	{r7}
 800d73a:	b083      	sub	sp, #12
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d740:	bf00      	nop
 800d742:	370c      	adds	r7, #12
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr

0800d74c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800d754:	bf00      	nop
 800d756:	370c      	adds	r7, #12
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr

0800d760 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800d768:	bf00      	nop
 800d76a:	370c      	adds	r7, #12
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr

0800d774 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d774:	b480      	push	{r7}
 800d776:	b083      	sub	sp, #12
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d77c:	bf00      	nop
 800d77e:	370c      	adds	r7, #12
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr

0800d788 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	460b      	mov	r3, r1
 800d792:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d794:	bf00      	nop
 800d796:	370c      	adds	r7, #12
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr

0800d7a0 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4a09      	ldr	r2, [pc, #36]	@ (800d7d4 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d009      	beq.n	800d7c8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	695b      	ldr	r3, [r3, #20]
 800d7ba:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	683a      	ldr	r2, [r7, #0]
 800d7c4:	430a      	orrs	r2, r1
 800d7c6:	615a      	str	r2, [r3, #20]
  }
}
 800d7c8:	bf00      	nop
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr
 800d7d4:	40008000 	.word	0x40008000

0800d7d8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b083      	sub	sp, #12
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a18      	ldr	r2, [pc, #96]	@ (800d848 <HAL_UART_EnableReceiverTimeout+0x70>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d027      	beq.n	800d83a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d7f0:	2b20      	cmp	r3, #32
 800d7f2:	d120      	bne.n	800d836 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d101      	bne.n	800d802 <HAL_UART_EnableReceiverTimeout+0x2a>
 800d7fe:	2302      	movs	r3, #2
 800d800:	e01c      	b.n	800d83c <HAL_UART_EnableReceiverTimeout+0x64>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2201      	movs	r2, #1
 800d806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2224      	movs	r2, #36	@ 0x24
 800d80e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	685a      	ldr	r2, [r3, #4]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800d820:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2220      	movs	r2, #32
 800d826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800d832:	2300      	movs	r3, #0
 800d834:	e002      	b.n	800d83c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800d836:	2302      	movs	r3, #2
 800d838:	e000      	b.n	800d83c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800d83a:	2301      	movs	r3, #1
  }
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	370c      	adds	r7, #12
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr
 800d848:	40008000 	.word	0x40008000

0800d84c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	370c      	adds	r7, #12
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr
	...

0800d868 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800d868:	b480      	push	{r7}
 800d86a:	b083      	sub	sp, #12
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	4a1a      	ldr	r2, [pc, #104]	@ (800d8dc <UART_InitCallbacksToDefault+0x74>)
 800d874:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	4a19      	ldr	r2, [pc, #100]	@ (800d8e0 <UART_InitCallbacksToDefault+0x78>)
 800d87c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	4a18      	ldr	r2, [pc, #96]	@ (800d8e4 <UART_InitCallbacksToDefault+0x7c>)
 800d884:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	4a17      	ldr	r2, [pc, #92]	@ (800d8e8 <UART_InitCallbacksToDefault+0x80>)
 800d88c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	4a16      	ldr	r2, [pc, #88]	@ (800d8ec <UART_InitCallbacksToDefault+0x84>)
 800d894:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	4a15      	ldr	r2, [pc, #84]	@ (800d8f0 <UART_InitCallbacksToDefault+0x88>)
 800d89c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	4a14      	ldr	r2, [pc, #80]	@ (800d8f4 <UART_InitCallbacksToDefault+0x8c>)
 800d8a4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	4a13      	ldr	r2, [pc, #76]	@ (800d8f8 <UART_InitCallbacksToDefault+0x90>)
 800d8ac:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	4a12      	ldr	r2, [pc, #72]	@ (800d8fc <UART_InitCallbacksToDefault+0x94>)
 800d8b4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	4a11      	ldr	r2, [pc, #68]	@ (800d900 <UART_InitCallbacksToDefault+0x98>)
 800d8bc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	4a10      	ldr	r2, [pc, #64]	@ (800d904 <UART_InitCallbacksToDefault+0x9c>)
 800d8c4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4a0f      	ldr	r2, [pc, #60]	@ (800d908 <UART_InitCallbacksToDefault+0xa0>)
 800d8cc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800d8d0:	bf00      	nop
 800d8d2:	370c      	adds	r7, #12
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr
 800d8dc:	0800d711 	.word	0x0800d711
 800d8e0:	0800d6fd 	.word	0x0800d6fd
 800d8e4:	0800d725 	.word	0x0800d725
 800d8e8:	08005a5d 	.word	0x08005a5d
 800d8ec:	0800d739 	.word	0x0800d739
 800d8f0:	0800d74d 	.word	0x0800d74d
 800d8f4:	0800d761 	.word	0x0800d761
 800d8f8:	0800d775 	.word	0x0800d775
 800d8fc:	0800e793 	.word	0x0800e793
 800d900:	0800e7a7 	.word	0x0800e7a7
 800d904:	0800e7bb 	.word	0x0800e7bb
 800d908:	0800d789 	.word	0x0800d789

0800d90c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d90c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d910:	b08c      	sub	sp, #48	@ 0x30
 800d912:	af00      	add	r7, sp, #0
 800d914:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d916:	2300      	movs	r3, #0
 800d918:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	689a      	ldr	r2, [r3, #8]
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	691b      	ldr	r3, [r3, #16]
 800d924:	431a      	orrs	r2, r3
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	695b      	ldr	r3, [r3, #20]
 800d92a:	431a      	orrs	r2, r3
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	69db      	ldr	r3, [r3, #28]
 800d930:	4313      	orrs	r3, r2
 800d932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	681a      	ldr	r2, [r3, #0]
 800d93a:	4baa      	ldr	r3, [pc, #680]	@ (800dbe4 <UART_SetConfig+0x2d8>)
 800d93c:	4013      	ands	r3, r2
 800d93e:	697a      	ldr	r2, [r7, #20]
 800d940:	6812      	ldr	r2, [r2, #0]
 800d942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d944:	430b      	orrs	r3, r1
 800d946:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	68da      	ldr	r2, [r3, #12]
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	430a      	orrs	r2, r1
 800d95c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	699b      	ldr	r3, [r3, #24]
 800d962:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a9f      	ldr	r2, [pc, #636]	@ (800dbe8 <UART_SetConfig+0x2dc>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d004      	beq.n	800d978 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	6a1b      	ldr	r3, [r3, #32]
 800d972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d974:	4313      	orrs	r3, r2
 800d976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	689b      	ldr	r3, [r3, #8]
 800d97e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d982:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d986:	697a      	ldr	r2, [r7, #20]
 800d988:	6812      	ldr	r2, [r2, #0]
 800d98a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d98c:	430b      	orrs	r3, r1
 800d98e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d996:	f023 010f 	bic.w	r1, r3, #15
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	430a      	orrs	r2, r1
 800d9a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	4a90      	ldr	r2, [pc, #576]	@ (800dbec <UART_SetConfig+0x2e0>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d125      	bne.n	800d9fc <UART_SetConfig+0xf0>
 800d9b0:	4b8f      	ldr	r3, [pc, #572]	@ (800dbf0 <UART_SetConfig+0x2e4>)
 800d9b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d9b6:	f003 0303 	and.w	r3, r3, #3
 800d9ba:	2b03      	cmp	r3, #3
 800d9bc:	d81a      	bhi.n	800d9f4 <UART_SetConfig+0xe8>
 800d9be:	a201      	add	r2, pc, #4	@ (adr r2, 800d9c4 <UART_SetConfig+0xb8>)
 800d9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9c4:	0800d9d5 	.word	0x0800d9d5
 800d9c8:	0800d9e5 	.word	0x0800d9e5
 800d9cc:	0800d9dd 	.word	0x0800d9dd
 800d9d0:	0800d9ed 	.word	0x0800d9ed
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d9da:	e116      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800d9dc:	2302      	movs	r3, #2
 800d9de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d9e2:	e112      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800d9e4:	2304      	movs	r3, #4
 800d9e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d9ea:	e10e      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800d9ec:	2308      	movs	r3, #8
 800d9ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d9f2:	e10a      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800d9f4:	2310      	movs	r3, #16
 800d9f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d9fa:	e106      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a7c      	ldr	r2, [pc, #496]	@ (800dbf4 <UART_SetConfig+0x2e8>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d138      	bne.n	800da78 <UART_SetConfig+0x16c>
 800da06:	4b7a      	ldr	r3, [pc, #488]	@ (800dbf0 <UART_SetConfig+0x2e4>)
 800da08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da0c:	f003 030c 	and.w	r3, r3, #12
 800da10:	2b0c      	cmp	r3, #12
 800da12:	d82d      	bhi.n	800da70 <UART_SetConfig+0x164>
 800da14:	a201      	add	r2, pc, #4	@ (adr r2, 800da1c <UART_SetConfig+0x110>)
 800da16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da1a:	bf00      	nop
 800da1c:	0800da51 	.word	0x0800da51
 800da20:	0800da71 	.word	0x0800da71
 800da24:	0800da71 	.word	0x0800da71
 800da28:	0800da71 	.word	0x0800da71
 800da2c:	0800da61 	.word	0x0800da61
 800da30:	0800da71 	.word	0x0800da71
 800da34:	0800da71 	.word	0x0800da71
 800da38:	0800da71 	.word	0x0800da71
 800da3c:	0800da59 	.word	0x0800da59
 800da40:	0800da71 	.word	0x0800da71
 800da44:	0800da71 	.word	0x0800da71
 800da48:	0800da71 	.word	0x0800da71
 800da4c:	0800da69 	.word	0x0800da69
 800da50:	2300      	movs	r3, #0
 800da52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da56:	e0d8      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800da58:	2302      	movs	r3, #2
 800da5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da5e:	e0d4      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800da60:	2304      	movs	r3, #4
 800da62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da66:	e0d0      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800da68:	2308      	movs	r3, #8
 800da6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da6e:	e0cc      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800da70:	2310      	movs	r3, #16
 800da72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da76:	e0c8      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a5e      	ldr	r2, [pc, #376]	@ (800dbf8 <UART_SetConfig+0x2ec>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d125      	bne.n	800dace <UART_SetConfig+0x1c2>
 800da82:	4b5b      	ldr	r3, [pc, #364]	@ (800dbf0 <UART_SetConfig+0x2e4>)
 800da84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800da8c:	2b30      	cmp	r3, #48	@ 0x30
 800da8e:	d016      	beq.n	800dabe <UART_SetConfig+0x1b2>
 800da90:	2b30      	cmp	r3, #48	@ 0x30
 800da92:	d818      	bhi.n	800dac6 <UART_SetConfig+0x1ba>
 800da94:	2b20      	cmp	r3, #32
 800da96:	d00a      	beq.n	800daae <UART_SetConfig+0x1a2>
 800da98:	2b20      	cmp	r3, #32
 800da9a:	d814      	bhi.n	800dac6 <UART_SetConfig+0x1ba>
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d002      	beq.n	800daa6 <UART_SetConfig+0x19a>
 800daa0:	2b10      	cmp	r3, #16
 800daa2:	d008      	beq.n	800dab6 <UART_SetConfig+0x1aa>
 800daa4:	e00f      	b.n	800dac6 <UART_SetConfig+0x1ba>
 800daa6:	2300      	movs	r3, #0
 800daa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800daac:	e0ad      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800daae:	2302      	movs	r3, #2
 800dab0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dab4:	e0a9      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800dab6:	2304      	movs	r3, #4
 800dab8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dabc:	e0a5      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800dabe:	2308      	movs	r3, #8
 800dac0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dac4:	e0a1      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800dac6:	2310      	movs	r3, #16
 800dac8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dacc:	e09d      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4a4a      	ldr	r2, [pc, #296]	@ (800dbfc <UART_SetConfig+0x2f0>)
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d125      	bne.n	800db24 <UART_SetConfig+0x218>
 800dad8:	4b45      	ldr	r3, [pc, #276]	@ (800dbf0 <UART_SetConfig+0x2e4>)
 800dada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dade:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800dae2:	2bc0      	cmp	r3, #192	@ 0xc0
 800dae4:	d016      	beq.n	800db14 <UART_SetConfig+0x208>
 800dae6:	2bc0      	cmp	r3, #192	@ 0xc0
 800dae8:	d818      	bhi.n	800db1c <UART_SetConfig+0x210>
 800daea:	2b80      	cmp	r3, #128	@ 0x80
 800daec:	d00a      	beq.n	800db04 <UART_SetConfig+0x1f8>
 800daee:	2b80      	cmp	r3, #128	@ 0x80
 800daf0:	d814      	bhi.n	800db1c <UART_SetConfig+0x210>
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d002      	beq.n	800dafc <UART_SetConfig+0x1f0>
 800daf6:	2b40      	cmp	r3, #64	@ 0x40
 800daf8:	d008      	beq.n	800db0c <UART_SetConfig+0x200>
 800dafa:	e00f      	b.n	800db1c <UART_SetConfig+0x210>
 800dafc:	2300      	movs	r3, #0
 800dafe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db02:	e082      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800db04:	2302      	movs	r3, #2
 800db06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db0a:	e07e      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800db0c:	2304      	movs	r3, #4
 800db0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db12:	e07a      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800db14:	2308      	movs	r3, #8
 800db16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db1a:	e076      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800db1c:	2310      	movs	r3, #16
 800db1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db22:	e072      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4a35      	ldr	r2, [pc, #212]	@ (800dc00 <UART_SetConfig+0x2f4>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d12a      	bne.n	800db84 <UART_SetConfig+0x278>
 800db2e:	4b30      	ldr	r3, [pc, #192]	@ (800dbf0 <UART_SetConfig+0x2e4>)
 800db30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800db38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800db3c:	d01a      	beq.n	800db74 <UART_SetConfig+0x268>
 800db3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800db42:	d81b      	bhi.n	800db7c <UART_SetConfig+0x270>
 800db44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db48:	d00c      	beq.n	800db64 <UART_SetConfig+0x258>
 800db4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db4e:	d815      	bhi.n	800db7c <UART_SetConfig+0x270>
 800db50:	2b00      	cmp	r3, #0
 800db52:	d003      	beq.n	800db5c <UART_SetConfig+0x250>
 800db54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db58:	d008      	beq.n	800db6c <UART_SetConfig+0x260>
 800db5a:	e00f      	b.n	800db7c <UART_SetConfig+0x270>
 800db5c:	2300      	movs	r3, #0
 800db5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db62:	e052      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800db64:	2302      	movs	r3, #2
 800db66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db6a:	e04e      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800db6c:	2304      	movs	r3, #4
 800db6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db72:	e04a      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800db74:	2308      	movs	r3, #8
 800db76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db7a:	e046      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800db7c:	2310      	movs	r3, #16
 800db7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800db82:	e042      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4a17      	ldr	r2, [pc, #92]	@ (800dbe8 <UART_SetConfig+0x2dc>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d13a      	bne.n	800dc04 <UART_SetConfig+0x2f8>
 800db8e:	4b18      	ldr	r3, [pc, #96]	@ (800dbf0 <UART_SetConfig+0x2e4>)
 800db90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800db98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800db9c:	d01a      	beq.n	800dbd4 <UART_SetConfig+0x2c8>
 800db9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dba2:	d81b      	bhi.n	800dbdc <UART_SetConfig+0x2d0>
 800dba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dba8:	d00c      	beq.n	800dbc4 <UART_SetConfig+0x2b8>
 800dbaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dbae:	d815      	bhi.n	800dbdc <UART_SetConfig+0x2d0>
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d003      	beq.n	800dbbc <UART_SetConfig+0x2b0>
 800dbb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dbb8:	d008      	beq.n	800dbcc <UART_SetConfig+0x2c0>
 800dbba:	e00f      	b.n	800dbdc <UART_SetConfig+0x2d0>
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dbc2:	e022      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800dbc4:	2302      	movs	r3, #2
 800dbc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dbca:	e01e      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800dbcc:	2304      	movs	r3, #4
 800dbce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dbd2:	e01a      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800dbd4:	2308      	movs	r3, #8
 800dbd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dbda:	e016      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800dbdc:	2310      	movs	r3, #16
 800dbde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800dbe2:	e012      	b.n	800dc0a <UART_SetConfig+0x2fe>
 800dbe4:	cfff69f3 	.word	0xcfff69f3
 800dbe8:	40008000 	.word	0x40008000
 800dbec:	40013800 	.word	0x40013800
 800dbf0:	40021000 	.word	0x40021000
 800dbf4:	40004400 	.word	0x40004400
 800dbf8:	40004800 	.word	0x40004800
 800dbfc:	40004c00 	.word	0x40004c00
 800dc00:	40005000 	.word	0x40005000
 800dc04:	2310      	movs	r3, #16
 800dc06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	4aae      	ldr	r2, [pc, #696]	@ (800dec8 <UART_SetConfig+0x5bc>)
 800dc10:	4293      	cmp	r3, r2
 800dc12:	f040 8097 	bne.w	800dd44 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dc16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800dc1a:	2b08      	cmp	r3, #8
 800dc1c:	d823      	bhi.n	800dc66 <UART_SetConfig+0x35a>
 800dc1e:	a201      	add	r2, pc, #4	@ (adr r2, 800dc24 <UART_SetConfig+0x318>)
 800dc20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc24:	0800dc49 	.word	0x0800dc49
 800dc28:	0800dc67 	.word	0x0800dc67
 800dc2c:	0800dc51 	.word	0x0800dc51
 800dc30:	0800dc67 	.word	0x0800dc67
 800dc34:	0800dc57 	.word	0x0800dc57
 800dc38:	0800dc67 	.word	0x0800dc67
 800dc3c:	0800dc67 	.word	0x0800dc67
 800dc40:	0800dc67 	.word	0x0800dc67
 800dc44:	0800dc5f 	.word	0x0800dc5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc48:	f7fc fcf6 	bl	800a638 <HAL_RCC_GetPCLK1Freq>
 800dc4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dc4e:	e010      	b.n	800dc72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dc50:	4b9e      	ldr	r3, [pc, #632]	@ (800decc <UART_SetConfig+0x5c0>)
 800dc52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dc54:	e00d      	b.n	800dc72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dc56:	f7fc fc81 	bl	800a55c <HAL_RCC_GetSysClockFreq>
 800dc5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dc5c:	e009      	b.n	800dc72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dc64:	e005      	b.n	800dc72 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800dc66:	2300      	movs	r3, #0
 800dc68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800dc70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	f000 8130 	beq.w	800deda <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc7e:	4a94      	ldr	r2, [pc, #592]	@ (800ded0 <UART_SetConfig+0x5c4>)
 800dc80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc84:	461a      	mov	r2, r3
 800dc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc88:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	685a      	ldr	r2, [r3, #4]
 800dc92:	4613      	mov	r3, r2
 800dc94:	005b      	lsls	r3, r3, #1
 800dc96:	4413      	add	r3, r2
 800dc98:	69ba      	ldr	r2, [r7, #24]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d305      	bcc.n	800dcaa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dca4:	69ba      	ldr	r2, [r7, #24]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d903      	bls.n	800dcb2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800dcb0:	e113      	b.n	800deda <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dcb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	60bb      	str	r3, [r7, #8]
 800dcb8:	60fa      	str	r2, [r7, #12]
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcbe:	4a84      	ldr	r2, [pc, #528]	@ (800ded0 <UART_SetConfig+0x5c4>)
 800dcc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	603b      	str	r3, [r7, #0]
 800dcca:	607a      	str	r2, [r7, #4]
 800dccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dcd4:	f7f2 ff8e 	bl	8000bf4 <__aeabi_uldivmod>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	460b      	mov	r3, r1
 800dcdc:	4610      	mov	r0, r2
 800dcde:	4619      	mov	r1, r3
 800dce0:	f04f 0200 	mov.w	r2, #0
 800dce4:	f04f 0300 	mov.w	r3, #0
 800dce8:	020b      	lsls	r3, r1, #8
 800dcea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dcee:	0202      	lsls	r2, r0, #8
 800dcf0:	6979      	ldr	r1, [r7, #20]
 800dcf2:	6849      	ldr	r1, [r1, #4]
 800dcf4:	0849      	lsrs	r1, r1, #1
 800dcf6:	2000      	movs	r0, #0
 800dcf8:	460c      	mov	r4, r1
 800dcfa:	4605      	mov	r5, r0
 800dcfc:	eb12 0804 	adds.w	r8, r2, r4
 800dd00:	eb43 0905 	adc.w	r9, r3, r5
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	469a      	mov	sl, r3
 800dd0c:	4693      	mov	fp, r2
 800dd0e:	4652      	mov	r2, sl
 800dd10:	465b      	mov	r3, fp
 800dd12:	4640      	mov	r0, r8
 800dd14:	4649      	mov	r1, r9
 800dd16:	f7f2 ff6d 	bl	8000bf4 <__aeabi_uldivmod>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	4613      	mov	r3, r2
 800dd20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dd22:	6a3b      	ldr	r3, [r7, #32]
 800dd24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dd28:	d308      	bcc.n	800dd3c <UART_SetConfig+0x430>
 800dd2a:	6a3b      	ldr	r3, [r7, #32]
 800dd2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd30:	d204      	bcs.n	800dd3c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	6a3a      	ldr	r2, [r7, #32]
 800dd38:	60da      	str	r2, [r3, #12]
 800dd3a:	e0ce      	b.n	800deda <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800dd42:	e0ca      	b.n	800deda <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	69db      	ldr	r3, [r3, #28]
 800dd48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd4c:	d166      	bne.n	800de1c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800dd4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800dd52:	2b08      	cmp	r3, #8
 800dd54:	d827      	bhi.n	800dda6 <UART_SetConfig+0x49a>
 800dd56:	a201      	add	r2, pc, #4	@ (adr r2, 800dd5c <UART_SetConfig+0x450>)
 800dd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd5c:	0800dd81 	.word	0x0800dd81
 800dd60:	0800dd89 	.word	0x0800dd89
 800dd64:	0800dd91 	.word	0x0800dd91
 800dd68:	0800dda7 	.word	0x0800dda7
 800dd6c:	0800dd97 	.word	0x0800dd97
 800dd70:	0800dda7 	.word	0x0800dda7
 800dd74:	0800dda7 	.word	0x0800dda7
 800dd78:	0800dda7 	.word	0x0800dda7
 800dd7c:	0800dd9f 	.word	0x0800dd9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd80:	f7fc fc5a 	bl	800a638 <HAL_RCC_GetPCLK1Freq>
 800dd84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dd86:	e014      	b.n	800ddb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd88:	f7fc fc6c 	bl	800a664 <HAL_RCC_GetPCLK2Freq>
 800dd8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dd8e:	e010      	b.n	800ddb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dd90:	4b4e      	ldr	r3, [pc, #312]	@ (800decc <UART_SetConfig+0x5c0>)
 800dd92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dd94:	e00d      	b.n	800ddb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dd96:	f7fc fbe1 	bl	800a55c <HAL_RCC_GetSysClockFreq>
 800dd9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dd9c:	e009      	b.n	800ddb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dda2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dda4:	e005      	b.n	800ddb2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800dda6:	2300      	movs	r3, #0
 800dda8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ddaa:	2301      	movs	r3, #1
 800ddac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ddb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ddb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	f000 8090 	beq.w	800deda <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddbe:	4a44      	ldr	r2, [pc, #272]	@ (800ded0 <UART_SetConfig+0x5c4>)
 800ddc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddcc:	005a      	lsls	r2, r3, #1
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	085b      	lsrs	r3, r3, #1
 800ddd4:	441a      	add	r2, r3
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dde0:	6a3b      	ldr	r3, [r7, #32]
 800dde2:	2b0f      	cmp	r3, #15
 800dde4:	d916      	bls.n	800de14 <UART_SetConfig+0x508>
 800dde6:	6a3b      	ldr	r3, [r7, #32]
 800dde8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ddec:	d212      	bcs.n	800de14 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ddee:	6a3b      	ldr	r3, [r7, #32]
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	f023 030f 	bic.w	r3, r3, #15
 800ddf6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ddf8:	6a3b      	ldr	r3, [r7, #32]
 800ddfa:	085b      	lsrs	r3, r3, #1
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	f003 0307 	and.w	r3, r3, #7
 800de02:	b29a      	uxth	r2, r3
 800de04:	8bfb      	ldrh	r3, [r7, #30]
 800de06:	4313      	orrs	r3, r2
 800de08:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	8bfa      	ldrh	r2, [r7, #30]
 800de10:	60da      	str	r2, [r3, #12]
 800de12:	e062      	b.n	800deda <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800de14:	2301      	movs	r3, #1
 800de16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800de1a:	e05e      	b.n	800deda <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800de1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800de20:	2b08      	cmp	r3, #8
 800de22:	d828      	bhi.n	800de76 <UART_SetConfig+0x56a>
 800de24:	a201      	add	r2, pc, #4	@ (adr r2, 800de2c <UART_SetConfig+0x520>)
 800de26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de2a:	bf00      	nop
 800de2c:	0800de51 	.word	0x0800de51
 800de30:	0800de59 	.word	0x0800de59
 800de34:	0800de61 	.word	0x0800de61
 800de38:	0800de77 	.word	0x0800de77
 800de3c:	0800de67 	.word	0x0800de67
 800de40:	0800de77 	.word	0x0800de77
 800de44:	0800de77 	.word	0x0800de77
 800de48:	0800de77 	.word	0x0800de77
 800de4c:	0800de6f 	.word	0x0800de6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de50:	f7fc fbf2 	bl	800a638 <HAL_RCC_GetPCLK1Freq>
 800de54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800de56:	e014      	b.n	800de82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de58:	f7fc fc04 	bl	800a664 <HAL_RCC_GetPCLK2Freq>
 800de5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800de5e:	e010      	b.n	800de82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800de60:	4b1a      	ldr	r3, [pc, #104]	@ (800decc <UART_SetConfig+0x5c0>)
 800de62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800de64:	e00d      	b.n	800de82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800de66:	f7fc fb79 	bl	800a55c <HAL_RCC_GetSysClockFreq>
 800de6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800de6c:	e009      	b.n	800de82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800de74:	e005      	b.n	800de82 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800de76:	2300      	movs	r3, #0
 800de78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800de7a:	2301      	movs	r3, #1
 800de7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800de80:	bf00      	nop
    }

    if (pclk != 0U)
 800de82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de84:	2b00      	cmp	r3, #0
 800de86:	d028      	beq.n	800deda <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de8c:	4a10      	ldr	r2, [pc, #64]	@ (800ded0 <UART_SetConfig+0x5c4>)
 800de8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de92:	461a      	mov	r2, r3
 800de94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de96:	fbb3 f2f2 	udiv	r2, r3, r2
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	085b      	lsrs	r3, r3, #1
 800dea0:	441a      	add	r2, r3
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	fbb2 f3f3 	udiv	r3, r2, r3
 800deaa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800deac:	6a3b      	ldr	r3, [r7, #32]
 800deae:	2b0f      	cmp	r3, #15
 800deb0:	d910      	bls.n	800ded4 <UART_SetConfig+0x5c8>
 800deb2:	6a3b      	ldr	r3, [r7, #32]
 800deb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800deb8:	d20c      	bcs.n	800ded4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800deba:	6a3b      	ldr	r3, [r7, #32]
 800debc:	b29a      	uxth	r2, r3
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	60da      	str	r2, [r3, #12]
 800dec4:	e009      	b.n	800deda <UART_SetConfig+0x5ce>
 800dec6:	bf00      	nop
 800dec8:	40008000 	.word	0x40008000
 800decc:	00f42400 	.word	0x00f42400
 800ded0:	08011480 	.word	0x08011480
      }
      else
      {
        ret = HAL_ERROR;
 800ded4:	2301      	movs	r3, #1
 800ded6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	2201      	movs	r2, #1
 800dede:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	2201      	movs	r2, #1
 800dee6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	2200      	movs	r2, #0
 800deee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	2200      	movs	r2, #0
 800def4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800def6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800defa:	4618      	mov	r0, r3
 800defc:	3730      	adds	r7, #48	@ 0x30
 800defe:	46bd      	mov	sp, r7
 800df00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800df04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df10:	f003 0308 	and.w	r3, r3, #8
 800df14:	2b00      	cmp	r3, #0
 800df16:	d00a      	beq.n	800df2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	430a      	orrs	r2, r1
 800df2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df32:	f003 0301 	and.w	r3, r3, #1
 800df36:	2b00      	cmp	r3, #0
 800df38:	d00a      	beq.n	800df50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	685b      	ldr	r3, [r3, #4]
 800df40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	430a      	orrs	r2, r1
 800df4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df54:	f003 0302 	and.w	r3, r3, #2
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d00a      	beq.n	800df72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	430a      	orrs	r2, r1
 800df70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df76:	f003 0304 	and.w	r3, r3, #4
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00a      	beq.n	800df94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	430a      	orrs	r2, r1
 800df92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df98:	f003 0310 	and.w	r3, r3, #16
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d00a      	beq.n	800dfb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	689b      	ldr	r3, [r3, #8]
 800dfa6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	430a      	orrs	r2, r1
 800dfb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfba:	f003 0320 	and.w	r3, r3, #32
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d00a      	beq.n	800dfd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	689b      	ldr	r3, [r3, #8]
 800dfc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	430a      	orrs	r2, r1
 800dfd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d01a      	beq.n	800e01a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	430a      	orrs	r2, r1
 800dff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e002:	d10a      	bne.n	800e01a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	430a      	orrs	r2, r1
 800e018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e01e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e022:	2b00      	cmp	r3, #0
 800e024:	d00a      	beq.n	800e03c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	430a      	orrs	r2, r1
 800e03a:	605a      	str	r2, [r3, #4]
  }
}
 800e03c:	bf00      	nop
 800e03e:	370c      	adds	r7, #12
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b098      	sub	sp, #96	@ 0x60
 800e04c:	af02      	add	r7, sp, #8
 800e04e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e058:	f7f9 faee 	bl	8007638 <HAL_GetTick>
 800e05c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f003 0308 	and.w	r3, r3, #8
 800e068:	2b08      	cmp	r3, #8
 800e06a:	d12f      	bne.n	800e0cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e06c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e070:	9300      	str	r3, [sp, #0]
 800e072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e074:	2200      	movs	r2, #0
 800e076:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 f88e 	bl	800e19c <UART_WaitOnFlagUntilTimeout>
 800e080:	4603      	mov	r3, r0
 800e082:	2b00      	cmp	r3, #0
 800e084:	d022      	beq.n	800e0cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e08e:	e853 3f00 	ldrex	r3, [r3]
 800e092:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e09a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e0a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e0aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e0ac:	e841 2300 	strex	r3, r2, [r1]
 800e0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e0b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d1e6      	bne.n	800e086 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2220      	movs	r2, #32
 800e0bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e0c8:	2303      	movs	r3, #3
 800e0ca:	e063      	b.n	800e194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f003 0304 	and.w	r3, r3, #4
 800e0d6:	2b04      	cmp	r3, #4
 800e0d8:	d149      	bne.n	800e16e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e0da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e0de:	9300      	str	r3, [sp, #0]
 800e0e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f000 f857 	bl	800e19c <UART_WaitOnFlagUntilTimeout>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d03c      	beq.n	800e16e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0fc:	e853 3f00 	ldrex	r3, [r3]
 800e100:	623b      	str	r3, [r7, #32]
   return(result);
 800e102:	6a3b      	ldr	r3, [r7, #32]
 800e104:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	461a      	mov	r2, r3
 800e110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e112:	633b      	str	r3, [r7, #48]	@ 0x30
 800e114:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e11a:	e841 2300 	strex	r3, r2, [r1]
 800e11e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e122:	2b00      	cmp	r3, #0
 800e124:	d1e6      	bne.n	800e0f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	3308      	adds	r3, #8
 800e12c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	e853 3f00 	ldrex	r3, [r3]
 800e134:	60fb      	str	r3, [r7, #12]
   return(result);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f023 0301 	bic.w	r3, r3, #1
 800e13c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	3308      	adds	r3, #8
 800e144:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e146:	61fa      	str	r2, [r7, #28]
 800e148:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e14a:	69b9      	ldr	r1, [r7, #24]
 800e14c:	69fa      	ldr	r2, [r7, #28]
 800e14e:	e841 2300 	strex	r3, r2, [r1]
 800e152:	617b      	str	r3, [r7, #20]
   return(result);
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d1e5      	bne.n	800e126 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2220      	movs	r2, #32
 800e15e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2200      	movs	r2, #0
 800e166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e16a:	2303      	movs	r3, #3
 800e16c:	e012      	b.n	800e194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2220      	movs	r2, #32
 800e172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2220      	movs	r2, #32
 800e17a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2200      	movs	r2, #0
 800e182:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e192:	2300      	movs	r3, #0
}
 800e194:	4618      	mov	r0, r3
 800e196:	3758      	adds	r7, #88	@ 0x58
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	60b9      	str	r1, [r7, #8]
 800e1a6:	603b      	str	r3, [r7, #0]
 800e1a8:	4613      	mov	r3, r2
 800e1aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1ac:	e04f      	b.n	800e24e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e1ae:	69bb      	ldr	r3, [r7, #24]
 800e1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1b4:	d04b      	beq.n	800e24e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e1b6:	f7f9 fa3f 	bl	8007638 <HAL_GetTick>
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	1ad3      	subs	r3, r2, r3
 800e1c0:	69ba      	ldr	r2, [r7, #24]
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d302      	bcc.n	800e1cc <UART_WaitOnFlagUntilTimeout+0x30>
 800e1c6:	69bb      	ldr	r3, [r7, #24]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d101      	bne.n	800e1d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e1cc:	2303      	movs	r3, #3
 800e1ce:	e04e      	b.n	800e26e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f003 0304 	and.w	r3, r3, #4
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d037      	beq.n	800e24e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	2b80      	cmp	r3, #128	@ 0x80
 800e1e2:	d034      	beq.n	800e24e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	2b40      	cmp	r3, #64	@ 0x40
 800e1e8:	d031      	beq.n	800e24e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	69db      	ldr	r3, [r3, #28]
 800e1f0:	f003 0308 	and.w	r3, r3, #8
 800e1f4:	2b08      	cmp	r3, #8
 800e1f6:	d110      	bne.n	800e21a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2208      	movs	r2, #8
 800e1fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e200:	68f8      	ldr	r0, [r7, #12]
 800e202:	f000 f920 	bl	800e446 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2208      	movs	r2, #8
 800e20a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	2200      	movs	r2, #0
 800e212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e216:	2301      	movs	r3, #1
 800e218:	e029      	b.n	800e26e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	69db      	ldr	r3, [r3, #28]
 800e220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e228:	d111      	bne.n	800e24e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e234:	68f8      	ldr	r0, [r7, #12]
 800e236:	f000 f906 	bl	800e446 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2220      	movs	r2, #32
 800e23e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2200      	movs	r2, #0
 800e246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e24a:	2303      	movs	r3, #3
 800e24c:	e00f      	b.n	800e26e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	69da      	ldr	r2, [r3, #28]
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	4013      	ands	r3, r2
 800e258:	68ba      	ldr	r2, [r7, #8]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	bf0c      	ite	eq
 800e25e:	2301      	moveq	r3, #1
 800e260:	2300      	movne	r3, #0
 800e262:	b2db      	uxtb	r3, r3
 800e264:	461a      	mov	r2, r3
 800e266:	79fb      	ldrb	r3, [r7, #7]
 800e268:	429a      	cmp	r2, r3
 800e26a:	d0a0      	beq.n	800e1ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
	...

0800e278 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b096      	sub	sp, #88	@ 0x58
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	4613      	mov	r3, r2
 800e284:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	68ba      	ldr	r2, [r7, #8]
 800e28a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	88fa      	ldrh	r2, [r7, #6]
 800e290:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2200      	movs	r2, #0
 800e298:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2222      	movs	r2, #34	@ 0x22
 800e2a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d02d      	beq.n	800e30a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2b4:	4a40      	ldr	r2, [pc, #256]	@ (800e3b8 <UART_Start_Receive_DMA+0x140>)
 800e2b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2be:	4a3f      	ldr	r2, [pc, #252]	@ (800e3bc <UART_Start_Receive_DMA+0x144>)
 800e2c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2c8:	4a3d      	ldr	r2, [pc, #244]	@ (800e3c0 <UART_Start_Receive_DMA+0x148>)
 800e2ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	3324      	adds	r3, #36	@ 0x24
 800e2e2:	4619      	mov	r1, r3
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	88fb      	ldrh	r3, [r7, #6]
 800e2ec:	f7fa ffe0 	bl	80092b0 <HAL_DMA_Start_IT>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d009      	beq.n	800e30a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2210      	movs	r2, #16
 800e2fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2220      	movs	r2, #32
 800e302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800e306:	2301      	movs	r3, #1
 800e308:	e051      	b.n	800e3ae <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	691b      	ldr	r3, [r3, #16]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d018      	beq.n	800e344 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e31a:	e853 3f00 	ldrex	r3, [r3]
 800e31e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e326:	657b      	str	r3, [r7, #84]	@ 0x54
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	461a      	mov	r2, r3
 800e32e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e330:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e332:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e334:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e336:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e338:	e841 2300 	strex	r3, r2, [r1]
 800e33c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e33e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e340:	2b00      	cmp	r3, #0
 800e342:	d1e6      	bne.n	800e312 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	3308      	adds	r3, #8
 800e34a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e34e:	e853 3f00 	ldrex	r3, [r3]
 800e352:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e356:	f043 0301 	orr.w	r3, r3, #1
 800e35a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	3308      	adds	r3, #8
 800e362:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e364:	637a      	str	r2, [r7, #52]	@ 0x34
 800e366:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e368:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e36a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e36c:	e841 2300 	strex	r3, r2, [r1]
 800e370:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e374:	2b00      	cmp	r3, #0
 800e376:	d1e5      	bne.n	800e344 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	3308      	adds	r3, #8
 800e37e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	e853 3f00 	ldrex	r3, [r3]
 800e386:	613b      	str	r3, [r7, #16]
   return(result);
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e38e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	3308      	adds	r3, #8
 800e396:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e398:	623a      	str	r2, [r7, #32]
 800e39a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e39c:	69f9      	ldr	r1, [r7, #28]
 800e39e:	6a3a      	ldr	r2, [r7, #32]
 800e3a0:	e841 2300 	strex	r3, r2, [r1]
 800e3a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d1e5      	bne.n	800e378 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e3ac:	2300      	movs	r3, #0
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3758      	adds	r7, #88	@ 0x58
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	0800e513 	.word	0x0800e513
 800e3bc:	0800e647 	.word	0x0800e647
 800e3c0:	0800e68d 	.word	0x0800e68d

0800e3c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b08f      	sub	sp, #60	@ 0x3c
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d2:	6a3b      	ldr	r3, [r7, #32]
 800e3d4:	e853 3f00 	ldrex	r3, [r3]
 800e3d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e3e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e3ec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e3f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3f2:	e841 2300 	strex	r3, r2, [r1]
 800e3f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d1e6      	bne.n	800e3cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	3308      	adds	r3, #8
 800e404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	e853 3f00 	ldrex	r3, [r3]
 800e40c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e414:	633b      	str	r3, [r7, #48]	@ 0x30
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	3308      	adds	r3, #8
 800e41c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e41e:	61ba      	str	r2, [r7, #24]
 800e420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e422:	6979      	ldr	r1, [r7, #20]
 800e424:	69ba      	ldr	r2, [r7, #24]
 800e426:	e841 2300 	strex	r3, r2, [r1]
 800e42a:	613b      	str	r3, [r7, #16]
   return(result);
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d1e5      	bne.n	800e3fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2220      	movs	r2, #32
 800e436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e43a:	bf00      	nop
 800e43c:	373c      	adds	r7, #60	@ 0x3c
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr

0800e446 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e446:	b480      	push	{r7}
 800e448:	b095      	sub	sp, #84	@ 0x54
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e456:	e853 3f00 	ldrex	r3, [r3]
 800e45a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e45e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	461a      	mov	r2, r3
 800e46a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e46c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e46e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e470:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e472:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e474:	e841 2300 	strex	r3, r2, [r1]
 800e478:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d1e6      	bne.n	800e44e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	3308      	adds	r3, #8
 800e486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e488:	6a3b      	ldr	r3, [r7, #32]
 800e48a:	e853 3f00 	ldrex	r3, [r3]
 800e48e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e496:	f023 0301 	bic.w	r3, r3, #1
 800e49a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	3308      	adds	r3, #8
 800e4a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e4a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e4a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e4aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e4ac:	e841 2300 	strex	r3, r2, [r1]
 800e4b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d1e3      	bne.n	800e480 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d118      	bne.n	800e4f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	e853 3f00 	ldrex	r3, [r3]
 800e4cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	f023 0310 	bic.w	r3, r3, #16
 800e4d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	461a      	mov	r2, r3
 800e4dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4de:	61bb      	str	r3, [r7, #24]
 800e4e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e2:	6979      	ldr	r1, [r7, #20]
 800e4e4:	69ba      	ldr	r2, [r7, #24]
 800e4e6:	e841 2300 	strex	r3, r2, [r1]
 800e4ea:	613b      	str	r3, [r7, #16]
   return(result);
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d1e6      	bne.n	800e4c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2220      	movs	r2, #32
 800e4f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2200      	movs	r2, #0
 800e504:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e506:	bf00      	nop
 800e508:	3754      	adds	r7, #84	@ 0x54
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr

0800e512 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e512:	b580      	push	{r7, lr}
 800e514:	b09c      	sub	sp, #112	@ 0x70
 800e516:	af00      	add	r7, sp, #0
 800e518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e51e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f003 0320 	and.w	r3, r3, #32
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d171      	bne.n	800e612 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800e52e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e530:	2200      	movs	r2, #0
 800e532:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e53c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e53e:	e853 3f00 	ldrex	r3, [r3]
 800e542:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e546:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e54a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e54c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	461a      	mov	r2, r3
 800e552:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e554:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e556:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e558:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e55a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e55c:	e841 2300 	strex	r3, r2, [r1]
 800e560:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e564:	2b00      	cmp	r3, #0
 800e566:	d1e6      	bne.n	800e536 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	3308      	adds	r3, #8
 800e56e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e572:	e853 3f00 	ldrex	r3, [r3]
 800e576:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e57a:	f023 0301 	bic.w	r3, r3, #1
 800e57e:	667b      	str	r3, [r7, #100]	@ 0x64
 800e580:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	3308      	adds	r3, #8
 800e586:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e588:	647a      	str	r2, [r7, #68]	@ 0x44
 800e58a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e58c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e58e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e590:	e841 2300 	strex	r3, r2, [r1]
 800e594:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d1e5      	bne.n	800e568 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e59c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	3308      	adds	r3, #8
 800e5a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5a6:	e853 3f00 	ldrex	r3, [r3]
 800e5aa:	623b      	str	r3, [r7, #32]
   return(result);
 800e5ac:	6a3b      	ldr	r3, [r7, #32]
 800e5ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e5b2:	663b      	str	r3, [r7, #96]	@ 0x60
 800e5b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	3308      	adds	r3, #8
 800e5ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e5bc:	633a      	str	r2, [r7, #48]	@ 0x30
 800e5be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e5c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5c4:	e841 2300 	strex	r3, r2, [r1]
 800e5c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d1e5      	bne.n	800e59c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e5d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5d2:	2220      	movs	r2, #32
 800e5d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5dc:	2b01      	cmp	r3, #1
 800e5de:	d118      	bne.n	800e612 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	e853 3f00 	ldrex	r3, [r3]
 800e5ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	f023 0310 	bic.w	r3, r3, #16
 800e5f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e5f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5fe:	61fb      	str	r3, [r7, #28]
 800e600:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e602:	69b9      	ldr	r1, [r7, #24]
 800e604:	69fa      	ldr	r2, [r7, #28]
 800e606:	e841 2300 	strex	r3, r2, [r1]
 800e60a:	617b      	str	r3, [r7, #20]
   return(result);
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d1e6      	bne.n	800e5e0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e612:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e614:	2200      	movs	r2, #0
 800e616:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e61a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d109      	bne.n	800e634 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800e620:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e622:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e626:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e628:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e62c:	4611      	mov	r1, r2
 800e62e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e630:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e632:	e004      	b.n	800e63e <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800e634:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e636:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e63a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e63c:	4798      	blx	r3
}
 800e63e:	bf00      	nop
 800e640:	3770      	adds	r7, #112	@ 0x70
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}

0800e646 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e646:	b580      	push	{r7, lr}
 800e648:	b084      	sub	sp, #16
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e652:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2201      	movs	r2, #1
 800e658:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d10b      	bne.n	800e67a <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e668:	68fa      	ldr	r2, [r7, #12]
 800e66a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e66e:	0852      	lsrs	r2, r2, #1
 800e670:	b292      	uxth	r2, r2
 800e672:	4611      	mov	r1, r2
 800e674:	68f8      	ldr	r0, [r7, #12]
 800e676:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e678:	e004      	b.n	800e684 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e680:	68f8      	ldr	r0, [r7, #12]
 800e682:	4798      	blx	r3
}
 800e684:	bf00      	nop
 800e686:	3710      	adds	r7, #16
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b086      	sub	sp, #24
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e698:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e6a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	689b      	ldr	r3, [r3, #8]
 800e6b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6b4:	2b80      	cmp	r3, #128	@ 0x80
 800e6b6:	d109      	bne.n	800e6cc <UART_DMAError+0x40>
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	2b21      	cmp	r3, #33	@ 0x21
 800e6bc:	d106      	bne.n	800e6cc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e6c6:	6978      	ldr	r0, [r7, #20]
 800e6c8:	f7ff fe7c 	bl	800e3c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	689b      	ldr	r3, [r3, #8]
 800e6d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6d6:	2b40      	cmp	r3, #64	@ 0x40
 800e6d8:	d109      	bne.n	800e6ee <UART_DMAError+0x62>
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2b22      	cmp	r3, #34	@ 0x22
 800e6de:	d106      	bne.n	800e6ee <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e6e8:	6978      	ldr	r0, [r7, #20]
 800e6ea:	f7ff feac 	bl	800e446 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6f4:	f043 0210 	orr.w	r2, r3, #16
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e704:	6978      	ldr	r0, [r7, #20]
 800e706:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e708:	bf00      	nop
 800e70a:	3718      	adds	r7, #24
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b084      	sub	sp, #16
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e71c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2200      	movs	r2, #0
 800e722:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e72c:	68f8      	ldr	r0, [r7, #12]
 800e72e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e730:	bf00      	nop
 800e732:	3710      	adds	r7, #16
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}

0800e738 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b088      	sub	sp, #32
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	e853 3f00 	ldrex	r3, [r3]
 800e74c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e754:	61fb      	str	r3, [r7, #28]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	461a      	mov	r2, r3
 800e75c:	69fb      	ldr	r3, [r7, #28]
 800e75e:	61bb      	str	r3, [r7, #24]
 800e760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e762:	6979      	ldr	r1, [r7, #20]
 800e764:	69ba      	ldr	r2, [r7, #24]
 800e766:	e841 2300 	strex	r3, r2, [r1]
 800e76a:	613b      	str	r3, [r7, #16]
   return(result);
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1e6      	bne.n	800e740 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2220      	movs	r2, #32
 800e776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2200      	movs	r2, #0
 800e77e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e78a:	bf00      	nop
 800e78c:	3720      	adds	r7, #32
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}

0800e792 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e792:	b480      	push	{r7}
 800e794:	b083      	sub	sp, #12
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e79a:	bf00      	nop
 800e79c:	370c      	adds	r7, #12
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a4:	4770      	bx	lr

0800e7a6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e7a6:	b480      	push	{r7}
 800e7a8:	b083      	sub	sp, #12
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e7ae:	bf00      	nop
 800e7b0:	370c      	adds	r7, #12
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr

0800e7ba <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e7ba:	b480      	push	{r7}
 800e7bc:	b083      	sub	sp, #12
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e7c2:	bf00      	nop
 800e7c4:	370c      	adds	r7, #12
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr

0800e7ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e7ce:	b480      	push	{r7}
 800e7d0:	b085      	sub	sp, #20
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d101      	bne.n	800e7e4 <HAL_UARTEx_DisableFifoMode+0x16>
 800e7e0:	2302      	movs	r3, #2
 800e7e2:	e027      	b.n	800e834 <HAL_UARTEx_DisableFifoMode+0x66>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2224      	movs	r2, #36	@ 0x24
 800e7f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	681a      	ldr	r2, [r3, #0]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	f022 0201 	bic.w	r2, r2, #1
 800e80a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e812:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2200      	movs	r2, #0
 800e818:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	68fa      	ldr	r2, [r7, #12]
 800e820:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2220      	movs	r2, #32
 800e826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2200      	movs	r2, #0
 800e82e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e832:	2300      	movs	r3, #0
}
 800e834:	4618      	mov	r0, r3
 800e836:	3714      	adds	r7, #20
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr

0800e840 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b084      	sub	sp, #16
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e850:	2b01      	cmp	r3, #1
 800e852:	d101      	bne.n	800e858 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e854:	2302      	movs	r3, #2
 800e856:	e02d      	b.n	800e8b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2201      	movs	r2, #1
 800e85c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2224      	movs	r2, #36	@ 0x24
 800e864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f022 0201 	bic.w	r2, r2, #1
 800e87e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	689b      	ldr	r3, [r3, #8]
 800e886:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	683a      	ldr	r2, [r7, #0]
 800e890:	430a      	orrs	r2, r1
 800e892:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 f84f 	bl	800e938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	68fa      	ldr	r2, [r7, #12]
 800e8a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2220      	movs	r2, #32
 800e8a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e8b2:	2300      	movs	r3, #0
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3710      	adds	r7, #16
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d101      	bne.n	800e8d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e8d0:	2302      	movs	r3, #2
 800e8d2:	e02d      	b.n	800e930 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2224      	movs	r2, #36	@ 0x24
 800e8e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f022 0201 	bic.w	r2, r2, #1
 800e8fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	689b      	ldr	r3, [r3, #8]
 800e902:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	683a      	ldr	r2, [r7, #0]
 800e90c:	430a      	orrs	r2, r1
 800e90e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f000 f811 	bl	800e938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2220      	movs	r2, #32
 800e922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e92e:	2300      	movs	r3, #0
}
 800e930:	4618      	mov	r0, r3
 800e932:	3710      	adds	r7, #16
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}

0800e938 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e938:	b480      	push	{r7}
 800e93a:	b085      	sub	sp, #20
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e944:	2b00      	cmp	r3, #0
 800e946:	d108      	bne.n	800e95a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2201      	movs	r2, #1
 800e94c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2201      	movs	r2, #1
 800e954:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e958:	e031      	b.n	800e9be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e95a:	2308      	movs	r3, #8
 800e95c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e95e:	2308      	movs	r3, #8
 800e960:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	689b      	ldr	r3, [r3, #8]
 800e968:	0e5b      	lsrs	r3, r3, #25
 800e96a:	b2db      	uxtb	r3, r3
 800e96c:	f003 0307 	and.w	r3, r3, #7
 800e970:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	689b      	ldr	r3, [r3, #8]
 800e978:	0f5b      	lsrs	r3, r3, #29
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	f003 0307 	and.w	r3, r3, #7
 800e980:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e982:	7bbb      	ldrb	r3, [r7, #14]
 800e984:	7b3a      	ldrb	r2, [r7, #12]
 800e986:	4911      	ldr	r1, [pc, #68]	@ (800e9cc <UARTEx_SetNbDataToProcess+0x94>)
 800e988:	5c8a      	ldrb	r2, [r1, r2]
 800e98a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e98e:	7b3a      	ldrb	r2, [r7, #12]
 800e990:	490f      	ldr	r1, [pc, #60]	@ (800e9d0 <UARTEx_SetNbDataToProcess+0x98>)
 800e992:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e994:	fb93 f3f2 	sdiv	r3, r3, r2
 800e998:	b29a      	uxth	r2, r3
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9a0:	7bfb      	ldrb	r3, [r7, #15]
 800e9a2:	7b7a      	ldrb	r2, [r7, #13]
 800e9a4:	4909      	ldr	r1, [pc, #36]	@ (800e9cc <UARTEx_SetNbDataToProcess+0x94>)
 800e9a6:	5c8a      	ldrb	r2, [r1, r2]
 800e9a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e9ac:	7b7a      	ldrb	r2, [r7, #13]
 800e9ae:	4908      	ldr	r1, [pc, #32]	@ (800e9d0 <UARTEx_SetNbDataToProcess+0x98>)
 800e9b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9b6:	b29a      	uxth	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e9be:	bf00      	nop
 800e9c0:	3714      	adds	r7, #20
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr
 800e9ca:	bf00      	nop
 800e9cc:	08011498 	.word	0x08011498
 800e9d0:	080114a0 	.word	0x080114a0

0800e9d4 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b08b      	sub	sp, #44	@ 0x2c
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	881b      	ldrh	r3, [r3, #0]
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	885b      	ldrh	r3, [r3, #2]
 800e9fc:	fb02 f303 	mul.w	r3, r2, r3
 800ea00:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800ea06:	e013      	b.n	800ea30 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800ea08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea0a:	1d1a      	adds	r2, r3, #4
 800ea0c:	627a      	str	r2, [r7, #36]	@ 0x24
 800ea0e:	ed93 7a00 	vldr	s14, [r3]
 800ea12:	6a3b      	ldr	r3, [r7, #32]
 800ea14:	1d1a      	adds	r2, r3, #4
 800ea16:	623a      	str	r2, [r7, #32]
 800ea18:	edd3 7a00 	vldr	s15, [r3]
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	1d1a      	adds	r2, r3, #4
 800ea20:	61fa      	str	r2, [r7, #28]
 800ea22:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea26:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800ea2a:	69bb      	ldr	r3, [r7, #24]
 800ea2c:	3b01      	subs	r3, #1
 800ea2e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d1e8      	bne.n	800ea08 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ea36:	2300      	movs	r3, #0
 800ea38:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800ea3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	372c      	adds	r7, #44	@ 0x2c
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr

0800ea4a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800ea4a:	b480      	push	{r7}
 800ea4c:	b085      	sub	sp, #20
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	60f8      	str	r0, [r7, #12]
 800ea52:	607b      	str	r3, [r7, #4]
 800ea54:	460b      	mov	r3, r1
 800ea56:	817b      	strh	r3, [r7, #10]
 800ea58:	4613      	mov	r3, r2
 800ea5a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	897a      	ldrh	r2, [r7, #10]
 800ea60:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	893a      	ldrh	r2, [r7, #8]
 800ea66:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	605a      	str	r2, [r3, #4]
}
 800ea6e:	bf00      	nop
 800ea70:	3714      	adds	r7, #20
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr

0800ea7a <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800ea7a:	b480      	push	{r7}
 800ea7c:	b0bb      	sub	sp, #236	@ 0xec
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	6078      	str	r0, [r7, #4]
 800ea82:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	881b      	ldrh	r3, [r3, #0]
 800ea94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	885b      	ldrh	r3, [r3, #2]
 800ea9a:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800ea9c:	f04f 0300 	mov.w	r3, #0
 800eaa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800eaa4:	f04f 0300 	mov.w	r3, #0
 800eaa8:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800eaaa:	2300      	movs	r3, #0
 800eaac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800eab0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800eab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eab8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800eabc:	e03b      	b.n	800eb36 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800eabe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800eac0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800eac4:	1ad3      	subs	r3, r2, r3
 800eac6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800eaca:	e00c      	b.n	800eae6 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800eacc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ead0:	1d1a      	adds	r2, r3, #4
 800ead2:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ead6:	f04f 0200 	mov.w	r2, #0
 800eada:	601a      	str	r2, [r3, #0]
        j--;
 800eadc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eae0:	3b01      	subs	r3, #1
 800eae2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800eae6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d1ee      	bne.n	800eacc <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800eaee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eaf2:	1d1a      	adds	r2, r3, #4
 800eaf4:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800eaf8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800eafc:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800eafe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800eb02:	3b01      	subs	r3, #1
 800eb04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800eb08:	e00c      	b.n	800eb24 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800eb0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb0e:	1d1a      	adds	r2, r3, #4
 800eb10:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800eb14:	f04f 0200 	mov.w	r2, #0
 800eb18:	601a      	str	r2, [r3, #0]
        j--;
 800eb1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eb1e:	3b01      	subs	r3, #1
 800eb20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800eb24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d1ee      	bne.n	800eb0a <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800eb2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800eb30:	3b01      	subs	r3, #1
 800eb32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800eb36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d1bf      	bne.n	800eabe <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800eb3e:	2300      	movs	r3, #0
 800eb40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800eb44:	e2c7      	b.n	800f0d6 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800eb46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eb4a:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	685a      	ldr	r2, [r3, #4]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	885b      	ldrh	r3, [r3, #2]
 800eb54:	3301      	adds	r3, #1
 800eb56:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800eb5a:	fb01 f303 	mul.w	r3, r1, r3
 800eb5e:	009b      	lsls	r3, r3, #2
 800eb60:	4413      	add	r3, r2
 800eb62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800eb66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800eb70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eb74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800eb78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800eb82:	e02c      	b.n	800ebde <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	685a      	ldr	r2, [r3, #4]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	885b      	ldrh	r3, [r3, #2]
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eb92:	fb03 f101 	mul.w	r1, r3, r1
 800eb96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eb9a:	440b      	add	r3, r1
 800eb9c:	009b      	lsls	r3, r3, #2
 800eb9e:	4413      	add	r3, r2
 800eba0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800eba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800ebac:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800ebb0:	eeb0 7ae7 	vabs.f32	s14, s15
 800ebb4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ebb8:	eef0 7ae7 	vabs.f32	s15, s15
 800ebbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ebc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc4:	dd06      	ble.n	800ebd4 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800ebc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ebca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800ebce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800ebd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ebd8:	3301      	adds	r3, #1
 800ebda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ebde:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ebe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d3cd      	bcc.n	800eb84 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800ebe8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ebec:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ebf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebf4:	f000 809b 	beq.w	800ed2e <arm_mat_inverse_f32+0x2b4>
 800ebf8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ebfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ec00:	429a      	cmp	r2, r3
 800ec02:	f000 8094 	beq.w	800ed2e <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	885b      	ldrh	r3, [r3, #2]
 800ec1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ec1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ec1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ec22:	1ad3      	subs	r3, r2, r3
 800ec24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ec26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ec2a:	fb03 f202 	mul.w	r2, r3, r2
 800ec2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ec32:	4413      	add	r3, r2
 800ec34:	009b      	lsls	r3, r3, #2
 800ec36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ec3a:	4413      	add	r3, r2
 800ec3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ec40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ec46:	fb03 f202 	mul.w	r2, r3, r2
 800ec4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ec4e:	4413      	add	r3, r2
 800ec50:	009b      	lsls	r3, r3, #2
 800ec52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ec56:	4413      	add	r3, r2
 800ec58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ec62:	e018      	b.n	800ec96 <arm_mat_inverse_f32+0x21c>
 800ec64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ec6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ec70:	1d1a      	adds	r2, r3, #4
 800ec72:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800ec76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ec7a:	6812      	ldr	r2, [r2, #0]
 800ec7c:	601a      	str	r2, [r3, #0]
 800ec7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ec82:	1d1a      	adds	r2, r3, #4
 800ec84:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800ec88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ec8a:	601a      	str	r2, [r3, #0]
 800ec8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ec90:	3301      	adds	r3, #1
 800ec92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ec96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800ec9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	dbe1      	blt.n	800ec64 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	885b      	ldrh	r3, [r3, #2]
 800ecb4:	647b      	str	r3, [r7, #68]	@ 0x44
 800ecb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecb8:	643b      	str	r3, [r7, #64]	@ 0x40
 800ecba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ecbe:	fb02 f303 	mul.w	r3, r2, r3
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ecc8:	4413      	add	r3, r2
 800ecca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ecce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecd0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ecd4:	fb02 f303 	mul.w	r3, r2, r3
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ecde:	4413      	add	r3, r2
 800ece0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ece4:	2300      	movs	r3, #0
 800ece6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ecea:	e018      	b.n	800ed1e <arm_mat_inverse_f32+0x2a4>
 800ecec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ecf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ecf8:	1d1a      	adds	r2, r3, #4
 800ecfa:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ecfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ed02:	6812      	ldr	r2, [r2, #0]
 800ed04:	601a      	str	r2, [r3, #0]
 800ed06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ed0a:	1d1a      	adds	r2, r3, #4
 800ed0c:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ed10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ed12:	601a      	str	r2, [r3, #0]
 800ed14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ed18:	3301      	adds	r3, #1
 800ed1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ed1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ed22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed24:	429a      	cmp	r2, r3
 800ed26:	dbe1      	blt.n	800ecec <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800ed28:	2301      	movs	r3, #1
 800ed2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800ed2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	d009      	beq.n	800ed4a <arm_mat_inverse_f32+0x2d0>
 800ed36:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ed3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ed3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed42:	d102      	bne.n	800ed4a <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800ed44:	f06f 0304 	mvn.w	r3, #4
 800ed48:	e208      	b.n	800f15c <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800ed4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ed4e:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800ed52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed56:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	885b      	ldrh	r3, [r3, #2]
 800ed66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ed6e:	1ad3      	subs	r3, r2, r3
 800ed70:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed74:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ed76:	fb03 f202 	mul.w	r2, r3, r2
 800ed7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ed7e:	4413      	add	r3, r2
 800ed80:	009b      	lsls	r3, r3, #2
 800ed82:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800ed86:	4413      	add	r3, r2
 800ed88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ed92:	e011      	b.n	800edb8 <arm_mat_inverse_f32+0x33e>
 800ed94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ed98:	1d1a      	adds	r2, r3, #4
 800ed9a:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800ed9e:	ed93 7a00 	vldr	s14, [r3]
 800eda2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800eda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edaa:	edc3 7a00 	vstr	s15, [r3]
 800edae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800edb2:	3301      	adds	r3, #1
 800edb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800edb8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800edbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edbe:	429a      	cmp	r2, r3
 800edc0:	dbe8      	blt.n	800ed94 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	885b      	ldrh	r3, [r3, #2]
 800edce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800edd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800edd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edd6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800edd8:	fb02 f303 	mul.w	r3, r2, r3
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ede2:	4413      	add	r3, r2
 800ede4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ede8:	2300      	movs	r3, #0
 800edea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800edee:	e011      	b.n	800ee14 <arm_mat_inverse_f32+0x39a>
 800edf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800edf4:	1d1a      	adds	r2, r3, #4
 800edf6:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800edfa:	ed93 7a00 	vldr	s14, [r3]
 800edfe:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ee02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee06:	edc3 7a00 	vstr	s15, [r3]
 800ee0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ee0e:	3301      	adds	r3, #1
 800ee10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ee14:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800ee18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	dbe8      	blt.n	800edf0 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800ee24:	e0ae      	b.n	800ef84 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	685a      	ldr	r2, [r3, #4]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	885b      	ldrh	r3, [r3, #2]
 800ee2e:	4619      	mov	r1, r3
 800ee30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ee34:	fb03 f101 	mul.w	r1, r3, r1
 800ee38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee3c:	440b      	add	r3, r1
 800ee3e:	009b      	lsls	r3, r3, #2
 800ee40:	4413      	add	r3, r2
 800ee42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800ee46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	685b      	ldr	r3, [r3, #4]
 800ee54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	885b      	ldrh	r3, [r3, #2]
 800ee64:	617b      	str	r3, [r7, #20]
 800ee66:	697a      	ldr	r2, [r7, #20]
 800ee68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee6c:	1ad3      	subs	r3, r2, r3
 800ee6e:	613b      	str	r3, [r7, #16]
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ee76:	fb03 f202 	mul.w	r2, r3, r2
 800ee7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee7e:	4413      	add	r3, r2
 800ee80:	009b      	lsls	r3, r3, #2
 800ee82:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800ee86:	4413      	add	r3, r2
 800ee88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee90:	fb03 f202 	mul.w	r2, r3, r2
 800ee94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee98:	4413      	add	r3, r2
 800ee9a:	009b      	lsls	r3, r3, #2
 800ee9c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800eea0:	4413      	add	r3, r2
 800eea2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800eea6:	2300      	movs	r3, #0
 800eea8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800eeac:	e01a      	b.n	800eee4 <arm_mat_inverse_f32+0x46a>
 800eeae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eeb2:	1d1a      	adds	r2, r3, #4
 800eeb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800eeb8:	ed93 7a00 	vldr	s14, [r3]
 800eebc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800eec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800eec8:	1d1a      	adds	r2, r3, #4
 800eeca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800eece:	ed93 7a00 	vldr	s14, [r3]
 800eed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eed6:	edc3 7a00 	vstr	s15, [r3]
 800eeda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800eede:	3301      	adds	r3, #1
 800eee0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800eee4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	429a      	cmp	r2, r3
 800eeec:	dbdf      	blt.n	800eeae <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	885b      	ldrh	r3, [r3, #2]
 800ef02:	60fb      	str	r3, [r7, #12]
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	60bb      	str	r3, [r7, #8]
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ef0e:	fb02 f303 	mul.w	r3, r2, r3
 800ef12:	009b      	lsls	r3, r3, #2
 800ef14:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ef18:	4413      	add	r3, r2
 800ef1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ef22:	fb02 f303 	mul.w	r3, r2, r3
 800ef26:	009b      	lsls	r3, r3, #2
 800ef28:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ef2c:	4413      	add	r3, r2
 800ef2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ef32:	2300      	movs	r3, #0
 800ef34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ef38:	e01a      	b.n	800ef70 <arm_mat_inverse_f32+0x4f6>
 800ef3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ef3e:	1d1a      	adds	r2, r3, #4
 800ef40:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ef44:	ed93 7a00 	vldr	s14, [r3]
 800ef48:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ef4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ef54:	1d1a      	adds	r2, r3, #4
 800ef56:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800ef5a:	ed93 7a00 	vldr	s14, [r3]
 800ef5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef62:	edc3 7a00 	vstr	s15, [r3]
 800ef66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ef70:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	dbdf      	blt.n	800ef3a <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800ef7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ef7e:	3301      	adds	r3, #1
 800ef80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ef84:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ef88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	f4ff af4b 	bcc.w	800ee26 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800ef90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef92:	3301      	adds	r3, #1
 800ef94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ef98:	e092      	b.n	800f0c0 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	685a      	ldr	r2, [r3, #4]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	885b      	ldrh	r3, [r3, #2]
 800efa2:	4619      	mov	r1, r3
 800efa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800efa8:	fb03 f101 	mul.w	r1, r3, r1
 800efac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800efb0:	440b      	add	r3, r1
 800efb2:	009b      	lsls	r3, r3, #2
 800efb4:	4413      	add	r3, r2
 800efb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800efba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	685b      	ldr	r3, [r3, #4]
 800efc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	677b      	str	r3, [r7, #116]	@ 0x74
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	885b      	ldrh	r3, [r3, #2]
 800efd4:	627b      	str	r3, [r7, #36]	@ 0x24
 800efd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800efd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800efdc:	1ad3      	subs	r3, r2, r3
 800efde:	623b      	str	r3, [r7, #32]
 800efe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efe2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800efe6:	fb03 f202 	mul.w	r2, r3, r2
 800efea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800efee:	4413      	add	r3, r2
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800eff4:	4413      	add	r3, r2
 800eff6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800eff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800effa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800effc:	fb03 f202 	mul.w	r2, r3, r2
 800f000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f004:	4413      	add	r3, r2
 800f006:	009b      	lsls	r3, r3, #2
 800f008:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800f00a:	4413      	add	r3, r2
 800f00c:	677b      	str	r3, [r7, #116]	@ 0x74
 800f00e:	2300      	movs	r3, #0
 800f010:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f012:	e014      	b.n	800f03e <arm_mat_inverse_f32+0x5c4>
 800f014:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f016:	1d1a      	adds	r2, r3, #4
 800f018:	677a      	str	r2, [r7, #116]	@ 0x74
 800f01a:	ed93 7a00 	vldr	s14, [r3]
 800f01e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f022:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f026:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f028:	1d1a      	adds	r2, r3, #4
 800f02a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800f02c:	ed93 7a00 	vldr	s14, [r3]
 800f030:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f034:	edc3 7a00 	vstr	s15, [r3]
 800f038:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f03a:	3301      	adds	r3, #1
 800f03c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f03e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f040:	6a3b      	ldr	r3, [r7, #32]
 800f042:	429a      	cmp	r2, r3
 800f044:	dbe6      	blt.n	800f014 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	885b      	ldrh	r3, [r3, #2]
 800f056:	61fb      	str	r3, [r7, #28]
 800f058:	69fb      	ldr	r3, [r7, #28]
 800f05a:	61bb      	str	r3, [r7, #24]
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f062:	fb02 f303 	mul.w	r3, r2, r3
 800f066:	009b      	lsls	r3, r3, #2
 800f068:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f06a:	4413      	add	r3, r2
 800f06c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f06e:	69fb      	ldr	r3, [r7, #28]
 800f070:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f072:	fb02 f303 	mul.w	r3, r2, r3
 800f076:	009b      	lsls	r3, r3, #2
 800f078:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f07a:	4413      	add	r3, r2
 800f07c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f07e:	2300      	movs	r3, #0
 800f080:	673b      	str	r3, [r7, #112]	@ 0x70
 800f082:	e014      	b.n	800f0ae <arm_mat_inverse_f32+0x634>
 800f084:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f086:	1d1a      	adds	r2, r3, #4
 800f088:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f08a:	ed93 7a00 	vldr	s14, [r3]
 800f08e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f092:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f096:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f098:	1d1a      	adds	r2, r3, #4
 800f09a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f09c:	ed93 7a00 	vldr	s14, [r3]
 800f0a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f0a4:	edc3 7a00 	vstr	s15, [r3]
 800f0a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	673b      	str	r3, [r7, #112]	@ 0x70
 800f0ae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f0b0:	69bb      	ldr	r3, [r7, #24]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	dbe6      	blt.n	800f084 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800f0b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f0c0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f0c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	f4ff af67 	bcc.w	800ef9a <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800f0cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f0d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f0da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	f4ff ad32 	bcc.w	800eb46 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800f0e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	d033      	beq.n	800f158 <arm_mat_inverse_f32+0x6de>
 800f0f0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f0f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0fc:	d12c      	bne.n	800f158 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800f104:	2300      	movs	r3, #0
 800f106:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f10a:	e010      	b.n	800f12e <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800f10c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f114:	4413      	add	r3, r2
 800f116:	edd3 7a00 	vldr	s15, [r3]
 800f11a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f122:	d10d      	bne.n	800f140 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800f124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f128:	3301      	adds	r3, #1
 800f12a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f12e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f130:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f132:	fb02 f303 	mul.w	r3, r2, r3
 800f136:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d3e6      	bcc.n	800f10c <arm_mat_inverse_f32+0x692>
 800f13e:	e000      	b.n	800f142 <arm_mat_inverse_f32+0x6c8>
            break;
 800f140:	bf00      	nop
      }

      if (i == numRows * numCols)
 800f142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f144:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f146:	fb02 f303 	mul.w	r3, r2, r3
 800f14a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800f14e:	429a      	cmp	r2, r3
 800f150:	d102      	bne.n	800f158 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800f152:	23fb      	movs	r3, #251	@ 0xfb
 800f154:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800f158:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	37ec      	adds	r7, #236	@ 0xec
 800f160:	46bd      	mov	sp, r7
 800f162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f166:	4770      	bx	lr

0800f168 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f168:	b480      	push	{r7}
 800f16a:	b093      	sub	sp, #76	@ 0x4c
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	60f8      	str	r0, [r7, #12]
 800f170:	60b9      	str	r1, [r7, #8]
 800f172:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	685b      	ldr	r3, [r3, #4]
 800f17e:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	881b      	ldrh	r3, [r3, #0]
 800f196:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	885b      	ldrh	r3, [r3, #2]
 800f19c:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	885b      	ldrh	r3, [r3, #2]
 800f1a2:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f1a8:	8b7b      	ldrh	r3, [r7, #26]
 800f1aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800f1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ae:	009b      	lsls	r3, r3, #2
 800f1b0:	69fa      	ldr	r2, [r7, #28]
 800f1b2:	4413      	add	r3, r2
 800f1b4:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800f1b6:	8b3b      	ldrh	r3, [r7, #24]
 800f1b8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800f1c0:	f04f 0300 	mov.w	r3, #0
 800f1c4:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800f1c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1c8:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800f1ca:	8afb      	ldrh	r3, [r7, #22]
 800f1cc:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800f1ce:	e017      	b.n	800f200 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800f1d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1d2:	1d1a      	adds	r2, r3, #4
 800f1d4:	647a      	str	r2, [r7, #68]	@ 0x44
 800f1d6:	ed93 7a00 	vldr	s14, [r3]
 800f1da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1dc:	edd3 7a00 	vldr	s15, [r3]
 800f1e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1e4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800f1e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1ec:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800f1f0:	8b3b      	ldrh	r3, [r7, #24]
 800f1f2:	009b      	lsls	r3, r3, #2
 800f1f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f1f6:	4413      	add	r3, r2
 800f1f8:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800f1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1fc:	3b01      	subs	r3, #1
 800f1fe:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800f200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f202:	2b00      	cmp	r3, #0
 800f204:	d1e4      	bne.n	800f1d0 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800f206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f208:	1d1a      	adds	r2, r3, #4
 800f20a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800f20c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f20e:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800f210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f212:	3b01      	subs	r3, #1
 800f214:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800f216:	8b3a      	ldrh	r2, [r7, #24]
 800f218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f21a:	1ad3      	subs	r3, r2, r3
 800f21c:	009b      	lsls	r3, r3, #2
 800f21e:	6a3a      	ldr	r2, [r7, #32]
 800f220:	4413      	add	r3, r2
 800f222:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800f224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f226:	2b00      	cmp	r3, #0
 800f228:	d1ca      	bne.n	800f1c0 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800f22a:	8b3b      	ldrh	r3, [r7, #24]
 800f22c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f22e:	4413      	add	r3, r2
 800f230:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800f232:	8afb      	ldrh	r3, [r7, #22]
 800f234:	009b      	lsls	r3, r3, #2
 800f236:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f238:	4413      	add	r3, r2
 800f23a:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800f23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f23e:	3b01      	subs	r3, #1
 800f240:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800f242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f244:	2b00      	cmp	r3, #0
 800f246:	d1b1      	bne.n	800f1ac <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f248:	2300      	movs	r3, #0
 800f24a:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800f24c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800f250:	4618      	mov	r0, r3
 800f252:	374c      	adds	r7, #76	@ 0x4c
 800f254:	46bd      	mov	sp, r7
 800f256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25a:	4770      	bx	lr

0800f25c <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b08b      	sub	sp, #44	@ 0x2c
 800f260:	af00      	add	r7, sp, #0
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	ed87 0a02 	vstr	s0, [r7, #8]
 800f268:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	685b      	ldr	r3, [r3, #4]
 800f26e:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	881b      	ldrh	r3, [r3, #0]
 800f27a:	461a      	mov	r2, r3
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	885b      	ldrh	r3, [r3, #2]
 800f280:	fb02 f303 	mul.w	r3, r2, r3
 800f284:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800f28a:	e010      	b.n	800f2ae <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800f28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f28e:	1d1a      	adds	r2, r3, #4
 800f290:	627a      	str	r2, [r7, #36]	@ 0x24
 800f292:	ed93 7a00 	vldr	s14, [r3]
 800f296:	6a3b      	ldr	r3, [r7, #32]
 800f298:	1d1a      	adds	r2, r3, #4
 800f29a:	623a      	str	r2, [r7, #32]
 800f29c:	edd7 7a02 	vldr	s15, [r7, #8]
 800f2a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2a4:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	3b01      	subs	r3, #1
 800f2ac:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d1eb      	bne.n	800f28c <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800f2b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	372c      	adds	r7, #44	@ 0x2c
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b08b      	sub	sp, #44	@ 0x2c
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	685b      	ldr	r3, [r3, #4]
 800f2e4:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	881b      	ldrh	r3, [r3, #0]
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	885b      	ldrh	r3, [r3, #2]
 800f2f0:	fb02 f303 	mul.w	r3, r2, r3
 800f2f4:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800f2fa:	e013      	b.n	800f324 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800f2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2fe:	1d1a      	adds	r2, r3, #4
 800f300:	627a      	str	r2, [r7, #36]	@ 0x24
 800f302:	ed93 7a00 	vldr	s14, [r3]
 800f306:	6a3b      	ldr	r3, [r7, #32]
 800f308:	1d1a      	adds	r2, r3, #4
 800f30a:	623a      	str	r2, [r7, #32]
 800f30c:	edd3 7a00 	vldr	s15, [r3]
 800f310:	69fb      	ldr	r3, [r7, #28]
 800f312:	1d1a      	adds	r2, r3, #4
 800f314:	61fa      	str	r2, [r7, #28]
 800f316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f31a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800f31e:	69bb      	ldr	r3, [r7, #24]
 800f320:	3b01      	subs	r3, #1
 800f322:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800f324:	69bb      	ldr	r3, [r7, #24]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d1e8      	bne.n	800f2fc <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f32a:	2300      	movs	r3, #0
 800f32c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800f32e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f332:	4618      	mov	r0, r3
 800f334:	372c      	adds	r7, #44	@ 0x2c
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr

0800f33e <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800f33e:	b480      	push	{r7}
 800f340:	b08b      	sub	sp, #44	@ 0x2c
 800f342:	af00      	add	r7, sp, #0
 800f344:	6078      	str	r0, [r7, #4]
 800f346:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	881b      	ldrh	r3, [r3, #0]
 800f358:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	885b      	ldrh	r3, [r3, #2]
 800f35e:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800f360:	89fb      	ldrh	r3, [r7, #14]
 800f362:	61bb      	str	r3, [r7, #24]
 800f364:	2300      	movs	r3, #0
 800f366:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	009b      	lsls	r3, r3, #2
 800f36c:	693a      	ldr	r2, [r7, #16]
 800f36e:	4413      	add	r3, r2
 800f370:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800f372:	89bb      	ldrh	r3, [r7, #12]
 800f374:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800f376:	e00d      	b.n	800f394 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800f378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f37a:	1d1a      	adds	r2, r3, #4
 800f37c:	627a      	str	r2, [r7, #36]	@ 0x24
 800f37e:	681a      	ldr	r2, [r3, #0]
 800f380:	6a3b      	ldr	r3, [r7, #32]
 800f382:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800f384:	89fb      	ldrh	r3, [r7, #14]
 800f386:	009b      	lsls	r3, r3, #2
 800f388:	6a3a      	ldr	r2, [r7, #32]
 800f38a:	4413      	add	r3, r2
 800f38c:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800f38e:	69fb      	ldr	r3, [r7, #28]
 800f390:	3b01      	subs	r3, #1
 800f392:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800f394:	69fb      	ldr	r3, [r7, #28]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d1ee      	bne.n	800f378 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	3301      	adds	r3, #1
 800f39e:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800f3a0:	69bb      	ldr	r3, [r7, #24]
 800f3a2:	3b01      	subs	r3, #1
 800f3a4:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800f3a6:	69bb      	ldr	r3, [r7, #24]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d1dd      	bne.n	800f368 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800f3b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	372c      	adds	r7, #44	@ 0x2c
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr

0800f3c0 <malloc>:
 800f3c0:	4b02      	ldr	r3, [pc, #8]	@ (800f3cc <malloc+0xc>)
 800f3c2:	4601      	mov	r1, r0
 800f3c4:	6818      	ldr	r0, [r3, #0]
 800f3c6:	f000 b825 	b.w	800f414 <_malloc_r>
 800f3ca:	bf00      	nop
 800f3cc:	20000140 	.word	0x20000140

0800f3d0 <sbrk_aligned>:
 800f3d0:	b570      	push	{r4, r5, r6, lr}
 800f3d2:	4e0f      	ldr	r6, [pc, #60]	@ (800f410 <sbrk_aligned+0x40>)
 800f3d4:	460c      	mov	r4, r1
 800f3d6:	6831      	ldr	r1, [r6, #0]
 800f3d8:	4605      	mov	r5, r0
 800f3da:	b911      	cbnz	r1, 800f3e2 <sbrk_aligned+0x12>
 800f3dc:	f000 f8ae 	bl	800f53c <_sbrk_r>
 800f3e0:	6030      	str	r0, [r6, #0]
 800f3e2:	4621      	mov	r1, r4
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	f000 f8a9 	bl	800f53c <_sbrk_r>
 800f3ea:	1c43      	adds	r3, r0, #1
 800f3ec:	d103      	bne.n	800f3f6 <sbrk_aligned+0x26>
 800f3ee:	f04f 34ff 	mov.w	r4, #4294967295
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	bd70      	pop	{r4, r5, r6, pc}
 800f3f6:	1cc4      	adds	r4, r0, #3
 800f3f8:	f024 0403 	bic.w	r4, r4, #3
 800f3fc:	42a0      	cmp	r0, r4
 800f3fe:	d0f8      	beq.n	800f3f2 <sbrk_aligned+0x22>
 800f400:	1a21      	subs	r1, r4, r0
 800f402:	4628      	mov	r0, r5
 800f404:	f000 f89a 	bl	800f53c <_sbrk_r>
 800f408:	3001      	adds	r0, #1
 800f40a:	d1f2      	bne.n	800f3f2 <sbrk_aligned+0x22>
 800f40c:	e7ef      	b.n	800f3ee <sbrk_aligned+0x1e>
 800f40e:	bf00      	nop
 800f410:	20002198 	.word	0x20002198

0800f414 <_malloc_r>:
 800f414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f418:	1ccd      	adds	r5, r1, #3
 800f41a:	f025 0503 	bic.w	r5, r5, #3
 800f41e:	3508      	adds	r5, #8
 800f420:	2d0c      	cmp	r5, #12
 800f422:	bf38      	it	cc
 800f424:	250c      	movcc	r5, #12
 800f426:	2d00      	cmp	r5, #0
 800f428:	4606      	mov	r6, r0
 800f42a:	db01      	blt.n	800f430 <_malloc_r+0x1c>
 800f42c:	42a9      	cmp	r1, r5
 800f42e:	d904      	bls.n	800f43a <_malloc_r+0x26>
 800f430:	230c      	movs	r3, #12
 800f432:	6033      	str	r3, [r6, #0]
 800f434:	2000      	movs	r0, #0
 800f436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f43a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f510 <_malloc_r+0xfc>
 800f43e:	f000 f869 	bl	800f514 <__malloc_lock>
 800f442:	f8d8 3000 	ldr.w	r3, [r8]
 800f446:	461c      	mov	r4, r3
 800f448:	bb44      	cbnz	r4, 800f49c <_malloc_r+0x88>
 800f44a:	4629      	mov	r1, r5
 800f44c:	4630      	mov	r0, r6
 800f44e:	f7ff ffbf 	bl	800f3d0 <sbrk_aligned>
 800f452:	1c43      	adds	r3, r0, #1
 800f454:	4604      	mov	r4, r0
 800f456:	d158      	bne.n	800f50a <_malloc_r+0xf6>
 800f458:	f8d8 4000 	ldr.w	r4, [r8]
 800f45c:	4627      	mov	r7, r4
 800f45e:	2f00      	cmp	r7, #0
 800f460:	d143      	bne.n	800f4ea <_malloc_r+0xd6>
 800f462:	2c00      	cmp	r4, #0
 800f464:	d04b      	beq.n	800f4fe <_malloc_r+0xea>
 800f466:	6823      	ldr	r3, [r4, #0]
 800f468:	4639      	mov	r1, r7
 800f46a:	4630      	mov	r0, r6
 800f46c:	eb04 0903 	add.w	r9, r4, r3
 800f470:	f000 f864 	bl	800f53c <_sbrk_r>
 800f474:	4581      	cmp	r9, r0
 800f476:	d142      	bne.n	800f4fe <_malloc_r+0xea>
 800f478:	6821      	ldr	r1, [r4, #0]
 800f47a:	1a6d      	subs	r5, r5, r1
 800f47c:	4629      	mov	r1, r5
 800f47e:	4630      	mov	r0, r6
 800f480:	f7ff ffa6 	bl	800f3d0 <sbrk_aligned>
 800f484:	3001      	adds	r0, #1
 800f486:	d03a      	beq.n	800f4fe <_malloc_r+0xea>
 800f488:	6823      	ldr	r3, [r4, #0]
 800f48a:	442b      	add	r3, r5
 800f48c:	6023      	str	r3, [r4, #0]
 800f48e:	f8d8 3000 	ldr.w	r3, [r8]
 800f492:	685a      	ldr	r2, [r3, #4]
 800f494:	bb62      	cbnz	r2, 800f4f0 <_malloc_r+0xdc>
 800f496:	f8c8 7000 	str.w	r7, [r8]
 800f49a:	e00f      	b.n	800f4bc <_malloc_r+0xa8>
 800f49c:	6822      	ldr	r2, [r4, #0]
 800f49e:	1b52      	subs	r2, r2, r5
 800f4a0:	d420      	bmi.n	800f4e4 <_malloc_r+0xd0>
 800f4a2:	2a0b      	cmp	r2, #11
 800f4a4:	d917      	bls.n	800f4d6 <_malloc_r+0xc2>
 800f4a6:	1961      	adds	r1, r4, r5
 800f4a8:	42a3      	cmp	r3, r4
 800f4aa:	6025      	str	r5, [r4, #0]
 800f4ac:	bf18      	it	ne
 800f4ae:	6059      	strne	r1, [r3, #4]
 800f4b0:	6863      	ldr	r3, [r4, #4]
 800f4b2:	bf08      	it	eq
 800f4b4:	f8c8 1000 	streq.w	r1, [r8]
 800f4b8:	5162      	str	r2, [r4, r5]
 800f4ba:	604b      	str	r3, [r1, #4]
 800f4bc:	4630      	mov	r0, r6
 800f4be:	f000 f82f 	bl	800f520 <__malloc_unlock>
 800f4c2:	f104 000b 	add.w	r0, r4, #11
 800f4c6:	1d23      	adds	r3, r4, #4
 800f4c8:	f020 0007 	bic.w	r0, r0, #7
 800f4cc:	1ac2      	subs	r2, r0, r3
 800f4ce:	bf1c      	itt	ne
 800f4d0:	1a1b      	subne	r3, r3, r0
 800f4d2:	50a3      	strne	r3, [r4, r2]
 800f4d4:	e7af      	b.n	800f436 <_malloc_r+0x22>
 800f4d6:	6862      	ldr	r2, [r4, #4]
 800f4d8:	42a3      	cmp	r3, r4
 800f4da:	bf0c      	ite	eq
 800f4dc:	f8c8 2000 	streq.w	r2, [r8]
 800f4e0:	605a      	strne	r2, [r3, #4]
 800f4e2:	e7eb      	b.n	800f4bc <_malloc_r+0xa8>
 800f4e4:	4623      	mov	r3, r4
 800f4e6:	6864      	ldr	r4, [r4, #4]
 800f4e8:	e7ae      	b.n	800f448 <_malloc_r+0x34>
 800f4ea:	463c      	mov	r4, r7
 800f4ec:	687f      	ldr	r7, [r7, #4]
 800f4ee:	e7b6      	b.n	800f45e <_malloc_r+0x4a>
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	42a3      	cmp	r3, r4
 800f4f6:	d1fb      	bne.n	800f4f0 <_malloc_r+0xdc>
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	6053      	str	r3, [r2, #4]
 800f4fc:	e7de      	b.n	800f4bc <_malloc_r+0xa8>
 800f4fe:	230c      	movs	r3, #12
 800f500:	6033      	str	r3, [r6, #0]
 800f502:	4630      	mov	r0, r6
 800f504:	f000 f80c 	bl	800f520 <__malloc_unlock>
 800f508:	e794      	b.n	800f434 <_malloc_r+0x20>
 800f50a:	6005      	str	r5, [r0, #0]
 800f50c:	e7d6      	b.n	800f4bc <_malloc_r+0xa8>
 800f50e:	bf00      	nop
 800f510:	2000219c 	.word	0x2000219c

0800f514 <__malloc_lock>:
 800f514:	4801      	ldr	r0, [pc, #4]	@ (800f51c <__malloc_lock+0x8>)
 800f516:	f000 b84b 	b.w	800f5b0 <__retarget_lock_acquire_recursive>
 800f51a:	bf00      	nop
 800f51c:	200022dc 	.word	0x200022dc

0800f520 <__malloc_unlock>:
 800f520:	4801      	ldr	r0, [pc, #4]	@ (800f528 <__malloc_unlock+0x8>)
 800f522:	f000 b846 	b.w	800f5b2 <__retarget_lock_release_recursive>
 800f526:	bf00      	nop
 800f528:	200022dc 	.word	0x200022dc

0800f52c <memset>:
 800f52c:	4402      	add	r2, r0
 800f52e:	4603      	mov	r3, r0
 800f530:	4293      	cmp	r3, r2
 800f532:	d100      	bne.n	800f536 <memset+0xa>
 800f534:	4770      	bx	lr
 800f536:	f803 1b01 	strb.w	r1, [r3], #1
 800f53a:	e7f9      	b.n	800f530 <memset+0x4>

0800f53c <_sbrk_r>:
 800f53c:	b538      	push	{r3, r4, r5, lr}
 800f53e:	4d06      	ldr	r5, [pc, #24]	@ (800f558 <_sbrk_r+0x1c>)
 800f540:	2300      	movs	r3, #0
 800f542:	4604      	mov	r4, r0
 800f544:	4608      	mov	r0, r1
 800f546:	602b      	str	r3, [r5, #0]
 800f548:	f7f7 f94a 	bl	80067e0 <_sbrk>
 800f54c:	1c43      	adds	r3, r0, #1
 800f54e:	d102      	bne.n	800f556 <_sbrk_r+0x1a>
 800f550:	682b      	ldr	r3, [r5, #0]
 800f552:	b103      	cbz	r3, 800f556 <_sbrk_r+0x1a>
 800f554:	6023      	str	r3, [r4, #0]
 800f556:	bd38      	pop	{r3, r4, r5, pc}
 800f558:	200022d8 	.word	0x200022d8

0800f55c <__errno>:
 800f55c:	4b01      	ldr	r3, [pc, #4]	@ (800f564 <__errno+0x8>)
 800f55e:	6818      	ldr	r0, [r3, #0]
 800f560:	4770      	bx	lr
 800f562:	bf00      	nop
 800f564:	20000140 	.word	0x20000140

0800f568 <__libc_init_array>:
 800f568:	b570      	push	{r4, r5, r6, lr}
 800f56a:	4d0d      	ldr	r5, [pc, #52]	@ (800f5a0 <__libc_init_array+0x38>)
 800f56c:	4c0d      	ldr	r4, [pc, #52]	@ (800f5a4 <__libc_init_array+0x3c>)
 800f56e:	1b64      	subs	r4, r4, r5
 800f570:	10a4      	asrs	r4, r4, #2
 800f572:	2600      	movs	r6, #0
 800f574:	42a6      	cmp	r6, r4
 800f576:	d109      	bne.n	800f58c <__libc_init_array+0x24>
 800f578:	4d0b      	ldr	r5, [pc, #44]	@ (800f5a8 <__libc_init_array+0x40>)
 800f57a:	4c0c      	ldr	r4, [pc, #48]	@ (800f5ac <__libc_init_array+0x44>)
 800f57c:	f001 ff30 	bl	80113e0 <_init>
 800f580:	1b64      	subs	r4, r4, r5
 800f582:	10a4      	asrs	r4, r4, #2
 800f584:	2600      	movs	r6, #0
 800f586:	42a6      	cmp	r6, r4
 800f588:	d105      	bne.n	800f596 <__libc_init_array+0x2e>
 800f58a:	bd70      	pop	{r4, r5, r6, pc}
 800f58c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f590:	4798      	blx	r3
 800f592:	3601      	adds	r6, #1
 800f594:	e7ee      	b.n	800f574 <__libc_init_array+0xc>
 800f596:	f855 3b04 	ldr.w	r3, [r5], #4
 800f59a:	4798      	blx	r3
 800f59c:	3601      	adds	r6, #1
 800f59e:	e7f2      	b.n	800f586 <__libc_init_array+0x1e>
 800f5a0:	08011a60 	.word	0x08011a60
 800f5a4:	08011a60 	.word	0x08011a60
 800f5a8:	08011a60 	.word	0x08011a60
 800f5ac:	08011a64 	.word	0x08011a64

0800f5b0 <__retarget_lock_acquire_recursive>:
 800f5b0:	4770      	bx	lr

0800f5b2 <__retarget_lock_release_recursive>:
 800f5b2:	4770      	bx	lr

0800f5b4 <memcpy>:
 800f5b4:	440a      	add	r2, r1
 800f5b6:	4291      	cmp	r1, r2
 800f5b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f5bc:	d100      	bne.n	800f5c0 <memcpy+0xc>
 800f5be:	4770      	bx	lr
 800f5c0:	b510      	push	{r4, lr}
 800f5c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5ca:	4291      	cmp	r1, r2
 800f5cc:	d1f9      	bne.n	800f5c2 <memcpy+0xe>
 800f5ce:	bd10      	pop	{r4, pc}

0800f5d0 <cos>:
 800f5d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5d2:	ec53 2b10 	vmov	r2, r3, d0
 800f5d6:	4826      	ldr	r0, [pc, #152]	@ (800f670 <cos+0xa0>)
 800f5d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f5dc:	4281      	cmp	r1, r0
 800f5de:	d806      	bhi.n	800f5ee <cos+0x1e>
 800f5e0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f668 <cos+0x98>
 800f5e4:	b005      	add	sp, #20
 800f5e6:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5ea:	f000 b9bd 	b.w	800f968 <__kernel_cos>
 800f5ee:	4821      	ldr	r0, [pc, #132]	@ (800f674 <cos+0xa4>)
 800f5f0:	4281      	cmp	r1, r0
 800f5f2:	d908      	bls.n	800f606 <cos+0x36>
 800f5f4:	4610      	mov	r0, r2
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	f7f0 fe12 	bl	8000220 <__aeabi_dsub>
 800f5fc:	ec41 0b10 	vmov	d0, r0, r1
 800f600:	b005      	add	sp, #20
 800f602:	f85d fb04 	ldr.w	pc, [sp], #4
 800f606:	4668      	mov	r0, sp
 800f608:	f000 fb32 	bl	800fc70 <__ieee754_rem_pio2>
 800f60c:	f000 0003 	and.w	r0, r0, #3
 800f610:	2801      	cmp	r0, #1
 800f612:	d00b      	beq.n	800f62c <cos+0x5c>
 800f614:	2802      	cmp	r0, #2
 800f616:	d015      	beq.n	800f644 <cos+0x74>
 800f618:	b9d8      	cbnz	r0, 800f652 <cos+0x82>
 800f61a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f61e:	ed9d 0b00 	vldr	d0, [sp]
 800f622:	f000 f9a1 	bl	800f968 <__kernel_cos>
 800f626:	ec51 0b10 	vmov	r0, r1, d0
 800f62a:	e7e7      	b.n	800f5fc <cos+0x2c>
 800f62c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f630:	ed9d 0b00 	vldr	d0, [sp]
 800f634:	f000 fa60 	bl	800faf8 <__kernel_sin>
 800f638:	ec53 2b10 	vmov	r2, r3, d0
 800f63c:	4610      	mov	r0, r2
 800f63e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f642:	e7db      	b.n	800f5fc <cos+0x2c>
 800f644:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f648:	ed9d 0b00 	vldr	d0, [sp]
 800f64c:	f000 f98c 	bl	800f968 <__kernel_cos>
 800f650:	e7f2      	b.n	800f638 <cos+0x68>
 800f652:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f656:	ed9d 0b00 	vldr	d0, [sp]
 800f65a:	2001      	movs	r0, #1
 800f65c:	f000 fa4c 	bl	800faf8 <__kernel_sin>
 800f660:	e7e1      	b.n	800f626 <cos+0x56>
 800f662:	bf00      	nop
 800f664:	f3af 8000 	nop.w
	...
 800f670:	3fe921fb 	.word	0x3fe921fb
 800f674:	7fefffff 	.word	0x7fefffff

0800f678 <sin>:
 800f678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f67a:	ec53 2b10 	vmov	r2, r3, d0
 800f67e:	4826      	ldr	r0, [pc, #152]	@ (800f718 <sin+0xa0>)
 800f680:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f684:	4281      	cmp	r1, r0
 800f686:	d807      	bhi.n	800f698 <sin+0x20>
 800f688:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f710 <sin+0x98>
 800f68c:	2000      	movs	r0, #0
 800f68e:	b005      	add	sp, #20
 800f690:	f85d eb04 	ldr.w	lr, [sp], #4
 800f694:	f000 ba30 	b.w	800faf8 <__kernel_sin>
 800f698:	4820      	ldr	r0, [pc, #128]	@ (800f71c <sin+0xa4>)
 800f69a:	4281      	cmp	r1, r0
 800f69c:	d908      	bls.n	800f6b0 <sin+0x38>
 800f69e:	4610      	mov	r0, r2
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	f7f0 fdbd 	bl	8000220 <__aeabi_dsub>
 800f6a6:	ec41 0b10 	vmov	d0, r0, r1
 800f6aa:	b005      	add	sp, #20
 800f6ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6b0:	4668      	mov	r0, sp
 800f6b2:	f000 fadd 	bl	800fc70 <__ieee754_rem_pio2>
 800f6b6:	f000 0003 	and.w	r0, r0, #3
 800f6ba:	2801      	cmp	r0, #1
 800f6bc:	d00c      	beq.n	800f6d8 <sin+0x60>
 800f6be:	2802      	cmp	r0, #2
 800f6c0:	d011      	beq.n	800f6e6 <sin+0x6e>
 800f6c2:	b9e8      	cbnz	r0, 800f700 <sin+0x88>
 800f6c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6c8:	ed9d 0b00 	vldr	d0, [sp]
 800f6cc:	2001      	movs	r0, #1
 800f6ce:	f000 fa13 	bl	800faf8 <__kernel_sin>
 800f6d2:	ec51 0b10 	vmov	r0, r1, d0
 800f6d6:	e7e6      	b.n	800f6a6 <sin+0x2e>
 800f6d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6dc:	ed9d 0b00 	vldr	d0, [sp]
 800f6e0:	f000 f942 	bl	800f968 <__kernel_cos>
 800f6e4:	e7f5      	b.n	800f6d2 <sin+0x5a>
 800f6e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f6ea:	ed9d 0b00 	vldr	d0, [sp]
 800f6ee:	2001      	movs	r0, #1
 800f6f0:	f000 fa02 	bl	800faf8 <__kernel_sin>
 800f6f4:	ec53 2b10 	vmov	r2, r3, d0
 800f6f8:	4610      	mov	r0, r2
 800f6fa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f6fe:	e7d2      	b.n	800f6a6 <sin+0x2e>
 800f700:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f704:	ed9d 0b00 	vldr	d0, [sp]
 800f708:	f000 f92e 	bl	800f968 <__kernel_cos>
 800f70c:	e7f2      	b.n	800f6f4 <sin+0x7c>
 800f70e:	bf00      	nop
	...
 800f718:	3fe921fb 	.word	0x3fe921fb
 800f71c:	7fefffff 	.word	0x7fefffff

0800f720 <fmodf>:
 800f720:	b508      	push	{r3, lr}
 800f722:	ed2d 8b02 	vpush	{d8}
 800f726:	eef0 8a40 	vmov.f32	s17, s0
 800f72a:	eeb0 8a60 	vmov.f32	s16, s1
 800f72e:	f000 fd43 	bl	80101b8 <__ieee754_fmodf>
 800f732:	eef4 8a48 	vcmp.f32	s17, s16
 800f736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f73a:	d60c      	bvs.n	800f756 <fmodf+0x36>
 800f73c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f75c <fmodf+0x3c>
 800f740:	eeb4 8a68 	vcmp.f32	s16, s17
 800f744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f748:	d105      	bne.n	800f756 <fmodf+0x36>
 800f74a:	f7ff ff07 	bl	800f55c <__errno>
 800f74e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f752:	2321      	movs	r3, #33	@ 0x21
 800f754:	6003      	str	r3, [r0, #0]
 800f756:	ecbd 8b02 	vpop	{d8}
 800f75a:	bd08      	pop	{r3, pc}
 800f75c:	00000000 	.word	0x00000000

0800f760 <sqrtf>:
 800f760:	b508      	push	{r3, lr}
 800f762:	ed2d 8b02 	vpush	{d8}
 800f766:	eeb0 8a40 	vmov.f32	s16, s0
 800f76a:	f000 f8f7 	bl	800f95c <__ieee754_sqrtf>
 800f76e:	eeb4 8a48 	vcmp.f32	s16, s16
 800f772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f776:	d60c      	bvs.n	800f792 <sqrtf+0x32>
 800f778:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f798 <sqrtf+0x38>
 800f77c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f784:	d505      	bpl.n	800f792 <sqrtf+0x32>
 800f786:	f7ff fee9 	bl	800f55c <__errno>
 800f78a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f78e:	2321      	movs	r3, #33	@ 0x21
 800f790:	6003      	str	r3, [r0, #0]
 800f792:	ecbd 8b02 	vpop	{d8}
 800f796:	bd08      	pop	{r3, pc}
 800f798:	00000000 	.word	0x00000000

0800f79c <cosf>:
 800f79c:	ee10 3a10 	vmov	r3, s0
 800f7a0:	b507      	push	{r0, r1, r2, lr}
 800f7a2:	4a1e      	ldr	r2, [pc, #120]	@ (800f81c <cosf+0x80>)
 800f7a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d806      	bhi.n	800f7ba <cosf+0x1e>
 800f7ac:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f820 <cosf+0x84>
 800f7b0:	b003      	add	sp, #12
 800f7b2:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7b6:	f000 bc5f 	b.w	8010078 <__kernel_cosf>
 800f7ba:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f7be:	d304      	bcc.n	800f7ca <cosf+0x2e>
 800f7c0:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f7c4:	b003      	add	sp, #12
 800f7c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7ca:	4668      	mov	r0, sp
 800f7cc:	f000 fd76 	bl	80102bc <__ieee754_rem_pio2f>
 800f7d0:	f000 0003 	and.w	r0, r0, #3
 800f7d4:	2801      	cmp	r0, #1
 800f7d6:	d009      	beq.n	800f7ec <cosf+0x50>
 800f7d8:	2802      	cmp	r0, #2
 800f7da:	d010      	beq.n	800f7fe <cosf+0x62>
 800f7dc:	b9b0      	cbnz	r0, 800f80c <cosf+0x70>
 800f7de:	eddd 0a01 	vldr	s1, [sp, #4]
 800f7e2:	ed9d 0a00 	vldr	s0, [sp]
 800f7e6:	f000 fc47 	bl	8010078 <__kernel_cosf>
 800f7ea:	e7eb      	b.n	800f7c4 <cosf+0x28>
 800f7ec:	eddd 0a01 	vldr	s1, [sp, #4]
 800f7f0:	ed9d 0a00 	vldr	s0, [sp]
 800f7f4:	f000 fc98 	bl	8010128 <__kernel_sinf>
 800f7f8:	eeb1 0a40 	vneg.f32	s0, s0
 800f7fc:	e7e2      	b.n	800f7c4 <cosf+0x28>
 800f7fe:	eddd 0a01 	vldr	s1, [sp, #4]
 800f802:	ed9d 0a00 	vldr	s0, [sp]
 800f806:	f000 fc37 	bl	8010078 <__kernel_cosf>
 800f80a:	e7f5      	b.n	800f7f8 <cosf+0x5c>
 800f80c:	eddd 0a01 	vldr	s1, [sp, #4]
 800f810:	ed9d 0a00 	vldr	s0, [sp]
 800f814:	2001      	movs	r0, #1
 800f816:	f000 fc87 	bl	8010128 <__kernel_sinf>
 800f81a:	e7d3      	b.n	800f7c4 <cosf+0x28>
 800f81c:	3f490fd8 	.word	0x3f490fd8
 800f820:	00000000 	.word	0x00000000

0800f824 <sinf>:
 800f824:	ee10 3a10 	vmov	r3, s0
 800f828:	b507      	push	{r0, r1, r2, lr}
 800f82a:	4a1f      	ldr	r2, [pc, #124]	@ (800f8a8 <sinf+0x84>)
 800f82c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f830:	4293      	cmp	r3, r2
 800f832:	d807      	bhi.n	800f844 <sinf+0x20>
 800f834:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f8ac <sinf+0x88>
 800f838:	2000      	movs	r0, #0
 800f83a:	b003      	add	sp, #12
 800f83c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f840:	f000 bc72 	b.w	8010128 <__kernel_sinf>
 800f844:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f848:	d304      	bcc.n	800f854 <sinf+0x30>
 800f84a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f84e:	b003      	add	sp, #12
 800f850:	f85d fb04 	ldr.w	pc, [sp], #4
 800f854:	4668      	mov	r0, sp
 800f856:	f000 fd31 	bl	80102bc <__ieee754_rem_pio2f>
 800f85a:	f000 0003 	and.w	r0, r0, #3
 800f85e:	2801      	cmp	r0, #1
 800f860:	d00a      	beq.n	800f878 <sinf+0x54>
 800f862:	2802      	cmp	r0, #2
 800f864:	d00f      	beq.n	800f886 <sinf+0x62>
 800f866:	b9c0      	cbnz	r0, 800f89a <sinf+0x76>
 800f868:	eddd 0a01 	vldr	s1, [sp, #4]
 800f86c:	ed9d 0a00 	vldr	s0, [sp]
 800f870:	2001      	movs	r0, #1
 800f872:	f000 fc59 	bl	8010128 <__kernel_sinf>
 800f876:	e7ea      	b.n	800f84e <sinf+0x2a>
 800f878:	eddd 0a01 	vldr	s1, [sp, #4]
 800f87c:	ed9d 0a00 	vldr	s0, [sp]
 800f880:	f000 fbfa 	bl	8010078 <__kernel_cosf>
 800f884:	e7e3      	b.n	800f84e <sinf+0x2a>
 800f886:	eddd 0a01 	vldr	s1, [sp, #4]
 800f88a:	ed9d 0a00 	vldr	s0, [sp]
 800f88e:	2001      	movs	r0, #1
 800f890:	f000 fc4a 	bl	8010128 <__kernel_sinf>
 800f894:	eeb1 0a40 	vneg.f32	s0, s0
 800f898:	e7d9      	b.n	800f84e <sinf+0x2a>
 800f89a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f89e:	ed9d 0a00 	vldr	s0, [sp]
 800f8a2:	f000 fbe9 	bl	8010078 <__kernel_cosf>
 800f8a6:	e7f5      	b.n	800f894 <sinf+0x70>
 800f8a8:	3f490fd8 	.word	0x3f490fd8
 800f8ac:	00000000 	.word	0x00000000

0800f8b0 <fmaxf>:
 800f8b0:	b508      	push	{r3, lr}
 800f8b2:	ed2d 8b02 	vpush	{d8}
 800f8b6:	eeb0 8a40 	vmov.f32	s16, s0
 800f8ba:	eef0 8a60 	vmov.f32	s17, s1
 800f8be:	f000 f831 	bl	800f924 <__fpclassifyf>
 800f8c2:	b930      	cbnz	r0, 800f8d2 <fmaxf+0x22>
 800f8c4:	eeb0 8a68 	vmov.f32	s16, s17
 800f8c8:	eeb0 0a48 	vmov.f32	s0, s16
 800f8cc:	ecbd 8b02 	vpop	{d8}
 800f8d0:	bd08      	pop	{r3, pc}
 800f8d2:	eeb0 0a68 	vmov.f32	s0, s17
 800f8d6:	f000 f825 	bl	800f924 <__fpclassifyf>
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	d0f4      	beq.n	800f8c8 <fmaxf+0x18>
 800f8de:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e6:	dded      	ble.n	800f8c4 <fmaxf+0x14>
 800f8e8:	e7ee      	b.n	800f8c8 <fmaxf+0x18>

0800f8ea <fminf>:
 800f8ea:	b508      	push	{r3, lr}
 800f8ec:	ed2d 8b02 	vpush	{d8}
 800f8f0:	eeb0 8a40 	vmov.f32	s16, s0
 800f8f4:	eef0 8a60 	vmov.f32	s17, s1
 800f8f8:	f000 f814 	bl	800f924 <__fpclassifyf>
 800f8fc:	b930      	cbnz	r0, 800f90c <fminf+0x22>
 800f8fe:	eeb0 8a68 	vmov.f32	s16, s17
 800f902:	eeb0 0a48 	vmov.f32	s0, s16
 800f906:	ecbd 8b02 	vpop	{d8}
 800f90a:	bd08      	pop	{r3, pc}
 800f90c:	eeb0 0a68 	vmov.f32	s0, s17
 800f910:	f000 f808 	bl	800f924 <__fpclassifyf>
 800f914:	2800      	cmp	r0, #0
 800f916:	d0f4      	beq.n	800f902 <fminf+0x18>
 800f918:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f920:	d5ed      	bpl.n	800f8fe <fminf+0x14>
 800f922:	e7ee      	b.n	800f902 <fminf+0x18>

0800f924 <__fpclassifyf>:
 800f924:	ee10 3a10 	vmov	r3, s0
 800f928:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800f92c:	d00d      	beq.n	800f94a <__fpclassifyf+0x26>
 800f92e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800f932:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800f936:	d30a      	bcc.n	800f94e <__fpclassifyf+0x2a>
 800f938:	4b07      	ldr	r3, [pc, #28]	@ (800f958 <__fpclassifyf+0x34>)
 800f93a:	1e42      	subs	r2, r0, #1
 800f93c:	429a      	cmp	r2, r3
 800f93e:	d908      	bls.n	800f952 <__fpclassifyf+0x2e>
 800f940:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800f944:	4258      	negs	r0, r3
 800f946:	4158      	adcs	r0, r3
 800f948:	4770      	bx	lr
 800f94a:	2002      	movs	r0, #2
 800f94c:	4770      	bx	lr
 800f94e:	2004      	movs	r0, #4
 800f950:	4770      	bx	lr
 800f952:	2003      	movs	r0, #3
 800f954:	4770      	bx	lr
 800f956:	bf00      	nop
 800f958:	007ffffe 	.word	0x007ffffe

0800f95c <__ieee754_sqrtf>:
 800f95c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f960:	4770      	bx	lr
 800f962:	0000      	movs	r0, r0
 800f964:	0000      	movs	r0, r0
	...

0800f968 <__kernel_cos>:
 800f968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f96c:	ec57 6b10 	vmov	r6, r7, d0
 800f970:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f974:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f978:	ed8d 1b00 	vstr	d1, [sp]
 800f97c:	d206      	bcs.n	800f98c <__kernel_cos+0x24>
 800f97e:	4630      	mov	r0, r6
 800f980:	4639      	mov	r1, r7
 800f982:	f7f1 f89f 	bl	8000ac4 <__aeabi_d2iz>
 800f986:	2800      	cmp	r0, #0
 800f988:	f000 8088 	beq.w	800fa9c <__kernel_cos+0x134>
 800f98c:	4632      	mov	r2, r6
 800f98e:	463b      	mov	r3, r7
 800f990:	4630      	mov	r0, r6
 800f992:	4639      	mov	r1, r7
 800f994:	f7f0 fdfc 	bl	8000590 <__aeabi_dmul>
 800f998:	4b51      	ldr	r3, [pc, #324]	@ (800fae0 <__kernel_cos+0x178>)
 800f99a:	2200      	movs	r2, #0
 800f99c:	4604      	mov	r4, r0
 800f99e:	460d      	mov	r5, r1
 800f9a0:	f7f0 fdf6 	bl	8000590 <__aeabi_dmul>
 800f9a4:	a340      	add	r3, pc, #256	@ (adr r3, 800faa8 <__kernel_cos+0x140>)
 800f9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9aa:	4682      	mov	sl, r0
 800f9ac:	468b      	mov	fp, r1
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	4629      	mov	r1, r5
 800f9b2:	f7f0 fded 	bl	8000590 <__aeabi_dmul>
 800f9b6:	a33e      	add	r3, pc, #248	@ (adr r3, 800fab0 <__kernel_cos+0x148>)
 800f9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9bc:	f7f0 fc32 	bl	8000224 <__adddf3>
 800f9c0:	4622      	mov	r2, r4
 800f9c2:	462b      	mov	r3, r5
 800f9c4:	f7f0 fde4 	bl	8000590 <__aeabi_dmul>
 800f9c8:	a33b      	add	r3, pc, #236	@ (adr r3, 800fab8 <__kernel_cos+0x150>)
 800f9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ce:	f7f0 fc27 	bl	8000220 <__aeabi_dsub>
 800f9d2:	4622      	mov	r2, r4
 800f9d4:	462b      	mov	r3, r5
 800f9d6:	f7f0 fddb 	bl	8000590 <__aeabi_dmul>
 800f9da:	a339      	add	r3, pc, #228	@ (adr r3, 800fac0 <__kernel_cos+0x158>)
 800f9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e0:	f7f0 fc20 	bl	8000224 <__adddf3>
 800f9e4:	4622      	mov	r2, r4
 800f9e6:	462b      	mov	r3, r5
 800f9e8:	f7f0 fdd2 	bl	8000590 <__aeabi_dmul>
 800f9ec:	a336      	add	r3, pc, #216	@ (adr r3, 800fac8 <__kernel_cos+0x160>)
 800f9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f2:	f7f0 fc15 	bl	8000220 <__aeabi_dsub>
 800f9f6:	4622      	mov	r2, r4
 800f9f8:	462b      	mov	r3, r5
 800f9fa:	f7f0 fdc9 	bl	8000590 <__aeabi_dmul>
 800f9fe:	a334      	add	r3, pc, #208	@ (adr r3, 800fad0 <__kernel_cos+0x168>)
 800fa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa04:	f7f0 fc0e 	bl	8000224 <__adddf3>
 800fa08:	4622      	mov	r2, r4
 800fa0a:	462b      	mov	r3, r5
 800fa0c:	f7f0 fdc0 	bl	8000590 <__aeabi_dmul>
 800fa10:	4622      	mov	r2, r4
 800fa12:	462b      	mov	r3, r5
 800fa14:	f7f0 fdbc 	bl	8000590 <__aeabi_dmul>
 800fa18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa1c:	4604      	mov	r4, r0
 800fa1e:	460d      	mov	r5, r1
 800fa20:	4630      	mov	r0, r6
 800fa22:	4639      	mov	r1, r7
 800fa24:	f7f0 fdb4 	bl	8000590 <__aeabi_dmul>
 800fa28:	460b      	mov	r3, r1
 800fa2a:	4602      	mov	r2, r0
 800fa2c:	4629      	mov	r1, r5
 800fa2e:	4620      	mov	r0, r4
 800fa30:	f7f0 fbf6 	bl	8000220 <__aeabi_dsub>
 800fa34:	4b2b      	ldr	r3, [pc, #172]	@ (800fae4 <__kernel_cos+0x17c>)
 800fa36:	4598      	cmp	r8, r3
 800fa38:	4606      	mov	r6, r0
 800fa3a:	460f      	mov	r7, r1
 800fa3c:	d810      	bhi.n	800fa60 <__kernel_cos+0xf8>
 800fa3e:	4602      	mov	r2, r0
 800fa40:	460b      	mov	r3, r1
 800fa42:	4650      	mov	r0, sl
 800fa44:	4659      	mov	r1, fp
 800fa46:	f7f0 fbeb 	bl	8000220 <__aeabi_dsub>
 800fa4a:	460b      	mov	r3, r1
 800fa4c:	4926      	ldr	r1, [pc, #152]	@ (800fae8 <__kernel_cos+0x180>)
 800fa4e:	4602      	mov	r2, r0
 800fa50:	2000      	movs	r0, #0
 800fa52:	f7f0 fbe5 	bl	8000220 <__aeabi_dsub>
 800fa56:	ec41 0b10 	vmov	d0, r0, r1
 800fa5a:	b003      	add	sp, #12
 800fa5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa60:	4b22      	ldr	r3, [pc, #136]	@ (800faec <__kernel_cos+0x184>)
 800fa62:	4921      	ldr	r1, [pc, #132]	@ (800fae8 <__kernel_cos+0x180>)
 800fa64:	4598      	cmp	r8, r3
 800fa66:	bf8c      	ite	hi
 800fa68:	4d21      	ldrhi	r5, [pc, #132]	@ (800faf0 <__kernel_cos+0x188>)
 800fa6a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800fa6e:	2400      	movs	r4, #0
 800fa70:	4622      	mov	r2, r4
 800fa72:	462b      	mov	r3, r5
 800fa74:	2000      	movs	r0, #0
 800fa76:	f7f0 fbd3 	bl	8000220 <__aeabi_dsub>
 800fa7a:	4622      	mov	r2, r4
 800fa7c:	4680      	mov	r8, r0
 800fa7e:	4689      	mov	r9, r1
 800fa80:	462b      	mov	r3, r5
 800fa82:	4650      	mov	r0, sl
 800fa84:	4659      	mov	r1, fp
 800fa86:	f7f0 fbcb 	bl	8000220 <__aeabi_dsub>
 800fa8a:	4632      	mov	r2, r6
 800fa8c:	463b      	mov	r3, r7
 800fa8e:	f7f0 fbc7 	bl	8000220 <__aeabi_dsub>
 800fa92:	4602      	mov	r2, r0
 800fa94:	460b      	mov	r3, r1
 800fa96:	4640      	mov	r0, r8
 800fa98:	4649      	mov	r1, r9
 800fa9a:	e7da      	b.n	800fa52 <__kernel_cos+0xea>
 800fa9c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800fad8 <__kernel_cos+0x170>
 800faa0:	e7db      	b.n	800fa5a <__kernel_cos+0xf2>
 800faa2:	bf00      	nop
 800faa4:	f3af 8000 	nop.w
 800faa8:	be8838d4 	.word	0xbe8838d4
 800faac:	bda8fae9 	.word	0xbda8fae9
 800fab0:	bdb4b1c4 	.word	0xbdb4b1c4
 800fab4:	3e21ee9e 	.word	0x3e21ee9e
 800fab8:	809c52ad 	.word	0x809c52ad
 800fabc:	3e927e4f 	.word	0x3e927e4f
 800fac0:	19cb1590 	.word	0x19cb1590
 800fac4:	3efa01a0 	.word	0x3efa01a0
 800fac8:	16c15177 	.word	0x16c15177
 800facc:	3f56c16c 	.word	0x3f56c16c
 800fad0:	5555554c 	.word	0x5555554c
 800fad4:	3fa55555 	.word	0x3fa55555
 800fad8:	00000000 	.word	0x00000000
 800fadc:	3ff00000 	.word	0x3ff00000
 800fae0:	3fe00000 	.word	0x3fe00000
 800fae4:	3fd33332 	.word	0x3fd33332
 800fae8:	3ff00000 	.word	0x3ff00000
 800faec:	3fe90000 	.word	0x3fe90000
 800faf0:	3fd20000 	.word	0x3fd20000
 800faf4:	00000000 	.word	0x00000000

0800faf8 <__kernel_sin>:
 800faf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fafc:	ec55 4b10 	vmov	r4, r5, d0
 800fb00:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800fb04:	b085      	sub	sp, #20
 800fb06:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800fb0a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800fb0e:	4680      	mov	r8, r0
 800fb10:	d205      	bcs.n	800fb1e <__kernel_sin+0x26>
 800fb12:	4620      	mov	r0, r4
 800fb14:	4629      	mov	r1, r5
 800fb16:	f7f0 ffd5 	bl	8000ac4 <__aeabi_d2iz>
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	d052      	beq.n	800fbc4 <__kernel_sin+0xcc>
 800fb1e:	4622      	mov	r2, r4
 800fb20:	462b      	mov	r3, r5
 800fb22:	4620      	mov	r0, r4
 800fb24:	4629      	mov	r1, r5
 800fb26:	f7f0 fd33 	bl	8000590 <__aeabi_dmul>
 800fb2a:	4682      	mov	sl, r0
 800fb2c:	468b      	mov	fp, r1
 800fb2e:	4602      	mov	r2, r0
 800fb30:	460b      	mov	r3, r1
 800fb32:	4620      	mov	r0, r4
 800fb34:	4629      	mov	r1, r5
 800fb36:	f7f0 fd2b 	bl	8000590 <__aeabi_dmul>
 800fb3a:	a342      	add	r3, pc, #264	@ (adr r3, 800fc44 <__kernel_sin+0x14c>)
 800fb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb40:	e9cd 0100 	strd	r0, r1, [sp]
 800fb44:	4650      	mov	r0, sl
 800fb46:	4659      	mov	r1, fp
 800fb48:	f7f0 fd22 	bl	8000590 <__aeabi_dmul>
 800fb4c:	a33f      	add	r3, pc, #252	@ (adr r3, 800fc4c <__kernel_sin+0x154>)
 800fb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb52:	f7f0 fb65 	bl	8000220 <__aeabi_dsub>
 800fb56:	4652      	mov	r2, sl
 800fb58:	465b      	mov	r3, fp
 800fb5a:	f7f0 fd19 	bl	8000590 <__aeabi_dmul>
 800fb5e:	a33d      	add	r3, pc, #244	@ (adr r3, 800fc54 <__kernel_sin+0x15c>)
 800fb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb64:	f7f0 fb5e 	bl	8000224 <__adddf3>
 800fb68:	4652      	mov	r2, sl
 800fb6a:	465b      	mov	r3, fp
 800fb6c:	f7f0 fd10 	bl	8000590 <__aeabi_dmul>
 800fb70:	a33a      	add	r3, pc, #232	@ (adr r3, 800fc5c <__kernel_sin+0x164>)
 800fb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb76:	f7f0 fb53 	bl	8000220 <__aeabi_dsub>
 800fb7a:	4652      	mov	r2, sl
 800fb7c:	465b      	mov	r3, fp
 800fb7e:	f7f0 fd07 	bl	8000590 <__aeabi_dmul>
 800fb82:	a338      	add	r3, pc, #224	@ (adr r3, 800fc64 <__kernel_sin+0x16c>)
 800fb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb88:	f7f0 fb4c 	bl	8000224 <__adddf3>
 800fb8c:	4606      	mov	r6, r0
 800fb8e:	460f      	mov	r7, r1
 800fb90:	f1b8 0f00 	cmp.w	r8, #0
 800fb94:	d11b      	bne.n	800fbce <__kernel_sin+0xd6>
 800fb96:	4602      	mov	r2, r0
 800fb98:	460b      	mov	r3, r1
 800fb9a:	4650      	mov	r0, sl
 800fb9c:	4659      	mov	r1, fp
 800fb9e:	f7f0 fcf7 	bl	8000590 <__aeabi_dmul>
 800fba2:	a325      	add	r3, pc, #148	@ (adr r3, 800fc38 <__kernel_sin+0x140>)
 800fba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba8:	f7f0 fb3a 	bl	8000220 <__aeabi_dsub>
 800fbac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbb0:	f7f0 fcee 	bl	8000590 <__aeabi_dmul>
 800fbb4:	4602      	mov	r2, r0
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	4620      	mov	r0, r4
 800fbba:	4629      	mov	r1, r5
 800fbbc:	f7f0 fb32 	bl	8000224 <__adddf3>
 800fbc0:	4604      	mov	r4, r0
 800fbc2:	460d      	mov	r5, r1
 800fbc4:	ec45 4b10 	vmov	d0, r4, r5
 800fbc8:	b005      	add	sp, #20
 800fbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbd2:	4b1b      	ldr	r3, [pc, #108]	@ (800fc40 <__kernel_sin+0x148>)
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	f7f0 fcdb 	bl	8000590 <__aeabi_dmul>
 800fbda:	4632      	mov	r2, r6
 800fbdc:	4680      	mov	r8, r0
 800fbde:	4689      	mov	r9, r1
 800fbe0:	463b      	mov	r3, r7
 800fbe2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbe6:	f7f0 fcd3 	bl	8000590 <__aeabi_dmul>
 800fbea:	4602      	mov	r2, r0
 800fbec:	460b      	mov	r3, r1
 800fbee:	4640      	mov	r0, r8
 800fbf0:	4649      	mov	r1, r9
 800fbf2:	f7f0 fb15 	bl	8000220 <__aeabi_dsub>
 800fbf6:	4652      	mov	r2, sl
 800fbf8:	465b      	mov	r3, fp
 800fbfa:	f7f0 fcc9 	bl	8000590 <__aeabi_dmul>
 800fbfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc02:	f7f0 fb0d 	bl	8000220 <__aeabi_dsub>
 800fc06:	a30c      	add	r3, pc, #48	@ (adr r3, 800fc38 <__kernel_sin+0x140>)
 800fc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc0c:	4606      	mov	r6, r0
 800fc0e:	460f      	mov	r7, r1
 800fc10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc14:	f7f0 fcbc 	bl	8000590 <__aeabi_dmul>
 800fc18:	4602      	mov	r2, r0
 800fc1a:	460b      	mov	r3, r1
 800fc1c:	4630      	mov	r0, r6
 800fc1e:	4639      	mov	r1, r7
 800fc20:	f7f0 fb00 	bl	8000224 <__adddf3>
 800fc24:	4602      	mov	r2, r0
 800fc26:	460b      	mov	r3, r1
 800fc28:	4620      	mov	r0, r4
 800fc2a:	4629      	mov	r1, r5
 800fc2c:	f7f0 faf8 	bl	8000220 <__aeabi_dsub>
 800fc30:	e7c6      	b.n	800fbc0 <__kernel_sin+0xc8>
 800fc32:	bf00      	nop
 800fc34:	f3af 8000 	nop.w
 800fc38:	55555549 	.word	0x55555549
 800fc3c:	3fc55555 	.word	0x3fc55555
 800fc40:	3fe00000 	.word	0x3fe00000
 800fc44:	5acfd57c 	.word	0x5acfd57c
 800fc48:	3de5d93a 	.word	0x3de5d93a
 800fc4c:	8a2b9ceb 	.word	0x8a2b9ceb
 800fc50:	3e5ae5e6 	.word	0x3e5ae5e6
 800fc54:	57b1fe7d 	.word	0x57b1fe7d
 800fc58:	3ec71de3 	.word	0x3ec71de3
 800fc5c:	19c161d5 	.word	0x19c161d5
 800fc60:	3f2a01a0 	.word	0x3f2a01a0
 800fc64:	1110f8a6 	.word	0x1110f8a6
 800fc68:	3f811111 	.word	0x3f811111
 800fc6c:	00000000 	.word	0x00000000

0800fc70 <__ieee754_rem_pio2>:
 800fc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc74:	ec57 6b10 	vmov	r6, r7, d0
 800fc78:	4bc5      	ldr	r3, [pc, #788]	@ (800ff90 <__ieee754_rem_pio2+0x320>)
 800fc7a:	b08d      	sub	sp, #52	@ 0x34
 800fc7c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800fc80:	4598      	cmp	r8, r3
 800fc82:	4604      	mov	r4, r0
 800fc84:	9704      	str	r7, [sp, #16]
 800fc86:	d807      	bhi.n	800fc98 <__ieee754_rem_pio2+0x28>
 800fc88:	2200      	movs	r2, #0
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	ed80 0b00 	vstr	d0, [r0]
 800fc90:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fc94:	2500      	movs	r5, #0
 800fc96:	e028      	b.n	800fcea <__ieee754_rem_pio2+0x7a>
 800fc98:	4bbe      	ldr	r3, [pc, #760]	@ (800ff94 <__ieee754_rem_pio2+0x324>)
 800fc9a:	4598      	cmp	r8, r3
 800fc9c:	d878      	bhi.n	800fd90 <__ieee754_rem_pio2+0x120>
 800fc9e:	9b04      	ldr	r3, [sp, #16]
 800fca0:	4dbd      	ldr	r5, [pc, #756]	@ (800ff98 <__ieee754_rem_pio2+0x328>)
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	4630      	mov	r0, r6
 800fca6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ff58 <__ieee754_rem_pio2+0x2e8>)
 800fca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcac:	4639      	mov	r1, r7
 800fcae:	dd38      	ble.n	800fd22 <__ieee754_rem_pio2+0xb2>
 800fcb0:	f7f0 fab6 	bl	8000220 <__aeabi_dsub>
 800fcb4:	45a8      	cmp	r8, r5
 800fcb6:	4606      	mov	r6, r0
 800fcb8:	460f      	mov	r7, r1
 800fcba:	d01a      	beq.n	800fcf2 <__ieee754_rem_pio2+0x82>
 800fcbc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ff60 <__ieee754_rem_pio2+0x2f0>)
 800fcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc2:	f7f0 faad 	bl	8000220 <__aeabi_dsub>
 800fcc6:	4602      	mov	r2, r0
 800fcc8:	460b      	mov	r3, r1
 800fcca:	4680      	mov	r8, r0
 800fccc:	4689      	mov	r9, r1
 800fcce:	4630      	mov	r0, r6
 800fcd0:	4639      	mov	r1, r7
 800fcd2:	f7f0 faa5 	bl	8000220 <__aeabi_dsub>
 800fcd6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ff60 <__ieee754_rem_pio2+0x2f0>)
 800fcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcdc:	f7f0 faa0 	bl	8000220 <__aeabi_dsub>
 800fce0:	e9c4 8900 	strd	r8, r9, [r4]
 800fce4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fce8:	2501      	movs	r5, #1
 800fcea:	4628      	mov	r0, r5
 800fcec:	b00d      	add	sp, #52	@ 0x34
 800fcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf2:	a39d      	add	r3, pc, #628	@ (adr r3, 800ff68 <__ieee754_rem_pio2+0x2f8>)
 800fcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf8:	f7f0 fa92 	bl	8000220 <__aeabi_dsub>
 800fcfc:	a39c      	add	r3, pc, #624	@ (adr r3, 800ff70 <__ieee754_rem_pio2+0x300>)
 800fcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd02:	4606      	mov	r6, r0
 800fd04:	460f      	mov	r7, r1
 800fd06:	f7f0 fa8b 	bl	8000220 <__aeabi_dsub>
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	460b      	mov	r3, r1
 800fd0e:	4680      	mov	r8, r0
 800fd10:	4689      	mov	r9, r1
 800fd12:	4630      	mov	r0, r6
 800fd14:	4639      	mov	r1, r7
 800fd16:	f7f0 fa83 	bl	8000220 <__aeabi_dsub>
 800fd1a:	a395      	add	r3, pc, #596	@ (adr r3, 800ff70 <__ieee754_rem_pio2+0x300>)
 800fd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd20:	e7dc      	b.n	800fcdc <__ieee754_rem_pio2+0x6c>
 800fd22:	f7f0 fa7f 	bl	8000224 <__adddf3>
 800fd26:	45a8      	cmp	r8, r5
 800fd28:	4606      	mov	r6, r0
 800fd2a:	460f      	mov	r7, r1
 800fd2c:	d018      	beq.n	800fd60 <__ieee754_rem_pio2+0xf0>
 800fd2e:	a38c      	add	r3, pc, #560	@ (adr r3, 800ff60 <__ieee754_rem_pio2+0x2f0>)
 800fd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd34:	f7f0 fa76 	bl	8000224 <__adddf3>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	460b      	mov	r3, r1
 800fd3c:	4680      	mov	r8, r0
 800fd3e:	4689      	mov	r9, r1
 800fd40:	4630      	mov	r0, r6
 800fd42:	4639      	mov	r1, r7
 800fd44:	f7f0 fa6c 	bl	8000220 <__aeabi_dsub>
 800fd48:	a385      	add	r3, pc, #532	@ (adr r3, 800ff60 <__ieee754_rem_pio2+0x2f0>)
 800fd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd4e:	f7f0 fa69 	bl	8000224 <__adddf3>
 800fd52:	f04f 35ff 	mov.w	r5, #4294967295
 800fd56:	e9c4 8900 	strd	r8, r9, [r4]
 800fd5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fd5e:	e7c4      	b.n	800fcea <__ieee754_rem_pio2+0x7a>
 800fd60:	a381      	add	r3, pc, #516	@ (adr r3, 800ff68 <__ieee754_rem_pio2+0x2f8>)
 800fd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd66:	f7f0 fa5d 	bl	8000224 <__adddf3>
 800fd6a:	a381      	add	r3, pc, #516	@ (adr r3, 800ff70 <__ieee754_rem_pio2+0x300>)
 800fd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd70:	4606      	mov	r6, r0
 800fd72:	460f      	mov	r7, r1
 800fd74:	f7f0 fa56 	bl	8000224 <__adddf3>
 800fd78:	4602      	mov	r2, r0
 800fd7a:	460b      	mov	r3, r1
 800fd7c:	4680      	mov	r8, r0
 800fd7e:	4689      	mov	r9, r1
 800fd80:	4630      	mov	r0, r6
 800fd82:	4639      	mov	r1, r7
 800fd84:	f7f0 fa4c 	bl	8000220 <__aeabi_dsub>
 800fd88:	a379      	add	r3, pc, #484	@ (adr r3, 800ff70 <__ieee754_rem_pio2+0x300>)
 800fd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd8e:	e7de      	b.n	800fd4e <__ieee754_rem_pio2+0xde>
 800fd90:	4b82      	ldr	r3, [pc, #520]	@ (800ff9c <__ieee754_rem_pio2+0x32c>)
 800fd92:	4598      	cmp	r8, r3
 800fd94:	f200 80d1 	bhi.w	800ff3a <__ieee754_rem_pio2+0x2ca>
 800fd98:	f000 f966 	bl	8010068 <fabs>
 800fd9c:	ec57 6b10 	vmov	r6, r7, d0
 800fda0:	a375      	add	r3, pc, #468	@ (adr r3, 800ff78 <__ieee754_rem_pio2+0x308>)
 800fda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda6:	4630      	mov	r0, r6
 800fda8:	4639      	mov	r1, r7
 800fdaa:	f7f0 fbf1 	bl	8000590 <__aeabi_dmul>
 800fdae:	4b7c      	ldr	r3, [pc, #496]	@ (800ffa0 <__ieee754_rem_pio2+0x330>)
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	f7f0 fa37 	bl	8000224 <__adddf3>
 800fdb6:	f7f0 fe85 	bl	8000ac4 <__aeabi_d2iz>
 800fdba:	4605      	mov	r5, r0
 800fdbc:	f7f0 fb7e 	bl	80004bc <__aeabi_i2d>
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	460b      	mov	r3, r1
 800fdc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fdc8:	a363      	add	r3, pc, #396	@ (adr r3, 800ff58 <__ieee754_rem_pio2+0x2e8>)
 800fdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdce:	f7f0 fbdf 	bl	8000590 <__aeabi_dmul>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	4630      	mov	r0, r6
 800fdd8:	4639      	mov	r1, r7
 800fdda:	f7f0 fa21 	bl	8000220 <__aeabi_dsub>
 800fdde:	a360      	add	r3, pc, #384	@ (adr r3, 800ff60 <__ieee754_rem_pio2+0x2f0>)
 800fde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde4:	4682      	mov	sl, r0
 800fde6:	468b      	mov	fp, r1
 800fde8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdec:	f7f0 fbd0 	bl	8000590 <__aeabi_dmul>
 800fdf0:	2d1f      	cmp	r5, #31
 800fdf2:	4606      	mov	r6, r0
 800fdf4:	460f      	mov	r7, r1
 800fdf6:	dc0c      	bgt.n	800fe12 <__ieee754_rem_pio2+0x1a2>
 800fdf8:	4b6a      	ldr	r3, [pc, #424]	@ (800ffa4 <__ieee754_rem_pio2+0x334>)
 800fdfa:	1e6a      	subs	r2, r5, #1
 800fdfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe00:	4543      	cmp	r3, r8
 800fe02:	d006      	beq.n	800fe12 <__ieee754_rem_pio2+0x1a2>
 800fe04:	4632      	mov	r2, r6
 800fe06:	463b      	mov	r3, r7
 800fe08:	4650      	mov	r0, sl
 800fe0a:	4659      	mov	r1, fp
 800fe0c:	f7f0 fa08 	bl	8000220 <__aeabi_dsub>
 800fe10:	e00e      	b.n	800fe30 <__ieee754_rem_pio2+0x1c0>
 800fe12:	463b      	mov	r3, r7
 800fe14:	4632      	mov	r2, r6
 800fe16:	4650      	mov	r0, sl
 800fe18:	4659      	mov	r1, fp
 800fe1a:	f7f0 fa01 	bl	8000220 <__aeabi_dsub>
 800fe1e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fe22:	9305      	str	r3, [sp, #20]
 800fe24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fe28:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800fe2c:	2b10      	cmp	r3, #16
 800fe2e:	dc02      	bgt.n	800fe36 <__ieee754_rem_pio2+0x1c6>
 800fe30:	e9c4 0100 	strd	r0, r1, [r4]
 800fe34:	e039      	b.n	800feaa <__ieee754_rem_pio2+0x23a>
 800fe36:	a34c      	add	r3, pc, #304	@ (adr r3, 800ff68 <__ieee754_rem_pio2+0x2f8>)
 800fe38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe40:	f7f0 fba6 	bl	8000590 <__aeabi_dmul>
 800fe44:	4606      	mov	r6, r0
 800fe46:	460f      	mov	r7, r1
 800fe48:	4602      	mov	r2, r0
 800fe4a:	460b      	mov	r3, r1
 800fe4c:	4650      	mov	r0, sl
 800fe4e:	4659      	mov	r1, fp
 800fe50:	f7f0 f9e6 	bl	8000220 <__aeabi_dsub>
 800fe54:	4602      	mov	r2, r0
 800fe56:	460b      	mov	r3, r1
 800fe58:	4680      	mov	r8, r0
 800fe5a:	4689      	mov	r9, r1
 800fe5c:	4650      	mov	r0, sl
 800fe5e:	4659      	mov	r1, fp
 800fe60:	f7f0 f9de 	bl	8000220 <__aeabi_dsub>
 800fe64:	4632      	mov	r2, r6
 800fe66:	463b      	mov	r3, r7
 800fe68:	f7f0 f9da 	bl	8000220 <__aeabi_dsub>
 800fe6c:	a340      	add	r3, pc, #256	@ (adr r3, 800ff70 <__ieee754_rem_pio2+0x300>)
 800fe6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe72:	4606      	mov	r6, r0
 800fe74:	460f      	mov	r7, r1
 800fe76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe7a:	f7f0 fb89 	bl	8000590 <__aeabi_dmul>
 800fe7e:	4632      	mov	r2, r6
 800fe80:	463b      	mov	r3, r7
 800fe82:	f7f0 f9cd 	bl	8000220 <__aeabi_dsub>
 800fe86:	4602      	mov	r2, r0
 800fe88:	460b      	mov	r3, r1
 800fe8a:	4606      	mov	r6, r0
 800fe8c:	460f      	mov	r7, r1
 800fe8e:	4640      	mov	r0, r8
 800fe90:	4649      	mov	r1, r9
 800fe92:	f7f0 f9c5 	bl	8000220 <__aeabi_dsub>
 800fe96:	9a05      	ldr	r2, [sp, #20]
 800fe98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fe9c:	1ad3      	subs	r3, r2, r3
 800fe9e:	2b31      	cmp	r3, #49	@ 0x31
 800fea0:	dc20      	bgt.n	800fee4 <__ieee754_rem_pio2+0x274>
 800fea2:	e9c4 0100 	strd	r0, r1, [r4]
 800fea6:	46c2      	mov	sl, r8
 800fea8:	46cb      	mov	fp, r9
 800feaa:	e9d4 8900 	ldrd	r8, r9, [r4]
 800feae:	4650      	mov	r0, sl
 800feb0:	4642      	mov	r2, r8
 800feb2:	464b      	mov	r3, r9
 800feb4:	4659      	mov	r1, fp
 800feb6:	f7f0 f9b3 	bl	8000220 <__aeabi_dsub>
 800feba:	463b      	mov	r3, r7
 800febc:	4632      	mov	r2, r6
 800febe:	f7f0 f9af 	bl	8000220 <__aeabi_dsub>
 800fec2:	9b04      	ldr	r3, [sp, #16]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800feca:	f6bf af0e 	bge.w	800fcea <__ieee754_rem_pio2+0x7a>
 800fece:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800fed2:	6063      	str	r3, [r4, #4]
 800fed4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fed8:	f8c4 8000 	str.w	r8, [r4]
 800fedc:	60a0      	str	r0, [r4, #8]
 800fede:	60e3      	str	r3, [r4, #12]
 800fee0:	426d      	negs	r5, r5
 800fee2:	e702      	b.n	800fcea <__ieee754_rem_pio2+0x7a>
 800fee4:	a326      	add	r3, pc, #152	@ (adr r3, 800ff80 <__ieee754_rem_pio2+0x310>)
 800fee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800feee:	f7f0 fb4f 	bl	8000590 <__aeabi_dmul>
 800fef2:	4606      	mov	r6, r0
 800fef4:	460f      	mov	r7, r1
 800fef6:	4602      	mov	r2, r0
 800fef8:	460b      	mov	r3, r1
 800fefa:	4640      	mov	r0, r8
 800fefc:	4649      	mov	r1, r9
 800fefe:	f7f0 f98f 	bl	8000220 <__aeabi_dsub>
 800ff02:	4602      	mov	r2, r0
 800ff04:	460b      	mov	r3, r1
 800ff06:	4682      	mov	sl, r0
 800ff08:	468b      	mov	fp, r1
 800ff0a:	4640      	mov	r0, r8
 800ff0c:	4649      	mov	r1, r9
 800ff0e:	f7f0 f987 	bl	8000220 <__aeabi_dsub>
 800ff12:	4632      	mov	r2, r6
 800ff14:	463b      	mov	r3, r7
 800ff16:	f7f0 f983 	bl	8000220 <__aeabi_dsub>
 800ff1a:	a31b      	add	r3, pc, #108	@ (adr r3, 800ff88 <__ieee754_rem_pio2+0x318>)
 800ff1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff20:	4606      	mov	r6, r0
 800ff22:	460f      	mov	r7, r1
 800ff24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff28:	f7f0 fb32 	bl	8000590 <__aeabi_dmul>
 800ff2c:	4632      	mov	r2, r6
 800ff2e:	463b      	mov	r3, r7
 800ff30:	f7f0 f976 	bl	8000220 <__aeabi_dsub>
 800ff34:	4606      	mov	r6, r0
 800ff36:	460f      	mov	r7, r1
 800ff38:	e764      	b.n	800fe04 <__ieee754_rem_pio2+0x194>
 800ff3a:	4b1b      	ldr	r3, [pc, #108]	@ (800ffa8 <__ieee754_rem_pio2+0x338>)
 800ff3c:	4598      	cmp	r8, r3
 800ff3e:	d935      	bls.n	800ffac <__ieee754_rem_pio2+0x33c>
 800ff40:	4632      	mov	r2, r6
 800ff42:	463b      	mov	r3, r7
 800ff44:	4630      	mov	r0, r6
 800ff46:	4639      	mov	r1, r7
 800ff48:	f7f0 f96a 	bl	8000220 <__aeabi_dsub>
 800ff4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ff50:	e9c4 0100 	strd	r0, r1, [r4]
 800ff54:	e69e      	b.n	800fc94 <__ieee754_rem_pio2+0x24>
 800ff56:	bf00      	nop
 800ff58:	54400000 	.word	0x54400000
 800ff5c:	3ff921fb 	.word	0x3ff921fb
 800ff60:	1a626331 	.word	0x1a626331
 800ff64:	3dd0b461 	.word	0x3dd0b461
 800ff68:	1a600000 	.word	0x1a600000
 800ff6c:	3dd0b461 	.word	0x3dd0b461
 800ff70:	2e037073 	.word	0x2e037073
 800ff74:	3ba3198a 	.word	0x3ba3198a
 800ff78:	6dc9c883 	.word	0x6dc9c883
 800ff7c:	3fe45f30 	.word	0x3fe45f30
 800ff80:	2e000000 	.word	0x2e000000
 800ff84:	3ba3198a 	.word	0x3ba3198a
 800ff88:	252049c1 	.word	0x252049c1
 800ff8c:	397b839a 	.word	0x397b839a
 800ff90:	3fe921fb 	.word	0x3fe921fb
 800ff94:	4002d97b 	.word	0x4002d97b
 800ff98:	3ff921fb 	.word	0x3ff921fb
 800ff9c:	413921fb 	.word	0x413921fb
 800ffa0:	3fe00000 	.word	0x3fe00000
 800ffa4:	080114a8 	.word	0x080114a8
 800ffa8:	7fefffff 	.word	0x7fefffff
 800ffac:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ffb0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ffb4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ffb8:	4630      	mov	r0, r6
 800ffba:	460f      	mov	r7, r1
 800ffbc:	f7f0 fd82 	bl	8000ac4 <__aeabi_d2iz>
 800ffc0:	f7f0 fa7c 	bl	80004bc <__aeabi_i2d>
 800ffc4:	4602      	mov	r2, r0
 800ffc6:	460b      	mov	r3, r1
 800ffc8:	4630      	mov	r0, r6
 800ffca:	4639      	mov	r1, r7
 800ffcc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ffd0:	f7f0 f926 	bl	8000220 <__aeabi_dsub>
 800ffd4:	4b22      	ldr	r3, [pc, #136]	@ (8010060 <__ieee754_rem_pio2+0x3f0>)
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	f7f0 fada 	bl	8000590 <__aeabi_dmul>
 800ffdc:	460f      	mov	r7, r1
 800ffde:	4606      	mov	r6, r0
 800ffe0:	f7f0 fd70 	bl	8000ac4 <__aeabi_d2iz>
 800ffe4:	f7f0 fa6a 	bl	80004bc <__aeabi_i2d>
 800ffe8:	4602      	mov	r2, r0
 800ffea:	460b      	mov	r3, r1
 800ffec:	4630      	mov	r0, r6
 800ffee:	4639      	mov	r1, r7
 800fff0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fff4:	f7f0 f914 	bl	8000220 <__aeabi_dsub>
 800fff8:	4b19      	ldr	r3, [pc, #100]	@ (8010060 <__ieee754_rem_pio2+0x3f0>)
 800fffa:	2200      	movs	r2, #0
 800fffc:	f7f0 fac8 	bl	8000590 <__aeabi_dmul>
 8010000:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8010004:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8010008:	f04f 0803 	mov.w	r8, #3
 801000c:	2600      	movs	r6, #0
 801000e:	2700      	movs	r7, #0
 8010010:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8010014:	4632      	mov	r2, r6
 8010016:	463b      	mov	r3, r7
 8010018:	46c2      	mov	sl, r8
 801001a:	f108 38ff 	add.w	r8, r8, #4294967295
 801001e:	f7f0 fd1f 	bl	8000a60 <__aeabi_dcmpeq>
 8010022:	2800      	cmp	r0, #0
 8010024:	d1f4      	bne.n	8010010 <__ieee754_rem_pio2+0x3a0>
 8010026:	4b0f      	ldr	r3, [pc, #60]	@ (8010064 <__ieee754_rem_pio2+0x3f4>)
 8010028:	9301      	str	r3, [sp, #4]
 801002a:	2302      	movs	r3, #2
 801002c:	9300      	str	r3, [sp, #0]
 801002e:	462a      	mov	r2, r5
 8010030:	4653      	mov	r3, sl
 8010032:	4621      	mov	r1, r4
 8010034:	a806      	add	r0, sp, #24
 8010036:	f000 fb5b 	bl	80106f0 <__kernel_rem_pio2>
 801003a:	9b04      	ldr	r3, [sp, #16]
 801003c:	2b00      	cmp	r3, #0
 801003e:	4605      	mov	r5, r0
 8010040:	f6bf ae53 	bge.w	800fcea <__ieee754_rem_pio2+0x7a>
 8010044:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010048:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801004c:	e9c4 2300 	strd	r2, r3, [r4]
 8010050:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8010054:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010058:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801005c:	e740      	b.n	800fee0 <__ieee754_rem_pio2+0x270>
 801005e:	bf00      	nop
 8010060:	41700000 	.word	0x41700000
 8010064:	08011528 	.word	0x08011528

08010068 <fabs>:
 8010068:	ec51 0b10 	vmov	r0, r1, d0
 801006c:	4602      	mov	r2, r0
 801006e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010072:	ec43 2b10 	vmov	d0, r2, r3
 8010076:	4770      	bx	lr

08010078 <__kernel_cosf>:
 8010078:	ee10 3a10 	vmov	r3, s0
 801007c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010080:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010084:	eef0 6a40 	vmov.f32	s13, s0
 8010088:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801008c:	d204      	bcs.n	8010098 <__kernel_cosf+0x20>
 801008e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8010092:	ee17 2a90 	vmov	r2, s15
 8010096:	b342      	cbz	r2, 80100ea <__kernel_cosf+0x72>
 8010098:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801009c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8010108 <__kernel_cosf+0x90>
 80100a0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801010c <__kernel_cosf+0x94>
 80100a4:	4a1a      	ldr	r2, [pc, #104]	@ (8010110 <__kernel_cosf+0x98>)
 80100a6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80100aa:	4293      	cmp	r3, r2
 80100ac:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010114 <__kernel_cosf+0x9c>
 80100b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80100b4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8010118 <__kernel_cosf+0xa0>
 80100b8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80100bc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801011c <__kernel_cosf+0xa4>
 80100c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80100c4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8010120 <__kernel_cosf+0xa8>
 80100c8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80100cc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80100d0:	ee26 6a07 	vmul.f32	s12, s12, s14
 80100d4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80100d8:	eee7 0a06 	vfma.f32	s1, s14, s12
 80100dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100e0:	d804      	bhi.n	80100ec <__kernel_cosf+0x74>
 80100e2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80100e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80100ea:	4770      	bx	lr
 80100ec:	4a0d      	ldr	r2, [pc, #52]	@ (8010124 <__kernel_cosf+0xac>)
 80100ee:	4293      	cmp	r3, r2
 80100f0:	bf9a      	itte	ls
 80100f2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80100f6:	ee07 3a10 	vmovls	s14, r3
 80100fa:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80100fe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010102:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010106:	e7ec      	b.n	80100e2 <__kernel_cosf+0x6a>
 8010108:	ad47d74e 	.word	0xad47d74e
 801010c:	310f74f6 	.word	0x310f74f6
 8010110:	3e999999 	.word	0x3e999999
 8010114:	b493f27c 	.word	0xb493f27c
 8010118:	37d00d01 	.word	0x37d00d01
 801011c:	bab60b61 	.word	0xbab60b61
 8010120:	3d2aaaab 	.word	0x3d2aaaab
 8010124:	3f480000 	.word	0x3f480000

08010128 <__kernel_sinf>:
 8010128:	ee10 3a10 	vmov	r3, s0
 801012c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010130:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010134:	d204      	bcs.n	8010140 <__kernel_sinf+0x18>
 8010136:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801013a:	ee17 3a90 	vmov	r3, s15
 801013e:	b35b      	cbz	r3, 8010198 <__kernel_sinf+0x70>
 8010140:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010144:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801019c <__kernel_sinf+0x74>
 8010148:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80101a0 <__kernel_sinf+0x78>
 801014c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010150:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80101a4 <__kernel_sinf+0x7c>
 8010154:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010158:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80101a8 <__kernel_sinf+0x80>
 801015c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010160:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80101ac <__kernel_sinf+0x84>
 8010164:	ee60 6a07 	vmul.f32	s13, s0, s14
 8010168:	eee6 7a07 	vfma.f32	s15, s12, s14
 801016c:	b930      	cbnz	r0, 801017c <__kernel_sinf+0x54>
 801016e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80101b0 <__kernel_sinf+0x88>
 8010172:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010176:	eea6 0a26 	vfma.f32	s0, s12, s13
 801017a:	4770      	bx	lr
 801017c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010180:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8010184:	eee0 7a86 	vfma.f32	s15, s1, s12
 8010188:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801018c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80101b4 <__kernel_sinf+0x8c>
 8010190:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010194:	ee30 0a60 	vsub.f32	s0, s0, s1
 8010198:	4770      	bx	lr
 801019a:	bf00      	nop
 801019c:	2f2ec9d3 	.word	0x2f2ec9d3
 80101a0:	b2d72f34 	.word	0xb2d72f34
 80101a4:	3638ef1b 	.word	0x3638ef1b
 80101a8:	b9500d01 	.word	0xb9500d01
 80101ac:	3c088889 	.word	0x3c088889
 80101b0:	be2aaaab 	.word	0xbe2aaaab
 80101b4:	3e2aaaab 	.word	0x3e2aaaab

080101b8 <__ieee754_fmodf>:
 80101b8:	b570      	push	{r4, r5, r6, lr}
 80101ba:	ee10 6a90 	vmov	r6, s1
 80101be:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80101c2:	1e5a      	subs	r2, r3, #1
 80101c4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80101c8:	d206      	bcs.n	80101d8 <__ieee754_fmodf+0x20>
 80101ca:	ee10 4a10 	vmov	r4, s0
 80101ce:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 80101d2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80101d6:	d304      	bcc.n	80101e2 <__ieee754_fmodf+0x2a>
 80101d8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80101dc:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80101e0:	bd70      	pop	{r4, r5, r6, pc}
 80101e2:	4299      	cmp	r1, r3
 80101e4:	dbfc      	blt.n	80101e0 <__ieee754_fmodf+0x28>
 80101e6:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 80101ea:	d105      	bne.n	80101f8 <__ieee754_fmodf+0x40>
 80101ec:	4b32      	ldr	r3, [pc, #200]	@ (80102b8 <__ieee754_fmodf+0x100>)
 80101ee:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 80101f2:	ed93 0a00 	vldr	s0, [r3]
 80101f6:	e7f3      	b.n	80101e0 <__ieee754_fmodf+0x28>
 80101f8:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80101fc:	d146      	bne.n	801028c <__ieee754_fmodf+0xd4>
 80101fe:	020a      	lsls	r2, r1, #8
 8010200:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8010204:	2a00      	cmp	r2, #0
 8010206:	dc3e      	bgt.n	8010286 <__ieee754_fmodf+0xce>
 8010208:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801020c:	bf01      	itttt	eq
 801020e:	021a      	lsleq	r2, r3, #8
 8010210:	fab2 f282 	clzeq	r2, r2
 8010214:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8010218:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 801021c:	bf16      	itet	ne
 801021e:	15da      	asrne	r2, r3, #23
 8010220:	3282      	addeq	r2, #130	@ 0x82
 8010222:	3a7f      	subne	r2, #127	@ 0x7f
 8010224:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8010228:	bfbb      	ittet	lt
 801022a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 801022e:	1a24      	sublt	r4, r4, r0
 8010230:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8010234:	40a1      	lsllt	r1, r4
 8010236:	bfa8      	it	ge
 8010238:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 801023c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8010240:	bfb5      	itete	lt
 8010242:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8010246:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 801024a:	1aa4      	sublt	r4, r4, r2
 801024c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8010250:	bfb8      	it	lt
 8010252:	fa03 f404 	lsllt.w	r4, r3, r4
 8010256:	1a80      	subs	r0, r0, r2
 8010258:	1b0b      	subs	r3, r1, r4
 801025a:	b9d0      	cbnz	r0, 8010292 <__ieee754_fmodf+0xda>
 801025c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8010260:	bf28      	it	cs
 8010262:	460b      	movcs	r3, r1
 8010264:	2b00      	cmp	r3, #0
 8010266:	d0c1      	beq.n	80101ec <__ieee754_fmodf+0x34>
 8010268:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801026c:	db19      	blt.n	80102a2 <__ieee754_fmodf+0xea>
 801026e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8010272:	db19      	blt.n	80102a8 <__ieee754_fmodf+0xf0>
 8010274:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8010278:	327f      	adds	r2, #127	@ 0x7f
 801027a:	432b      	orrs	r3, r5
 801027c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010280:	ee00 3a10 	vmov	s0, r3
 8010284:	e7ac      	b.n	80101e0 <__ieee754_fmodf+0x28>
 8010286:	3801      	subs	r0, #1
 8010288:	0052      	lsls	r2, r2, #1
 801028a:	e7bb      	b.n	8010204 <__ieee754_fmodf+0x4c>
 801028c:	15c8      	asrs	r0, r1, #23
 801028e:	387f      	subs	r0, #127	@ 0x7f
 8010290:	e7ba      	b.n	8010208 <__ieee754_fmodf+0x50>
 8010292:	2b00      	cmp	r3, #0
 8010294:	da02      	bge.n	801029c <__ieee754_fmodf+0xe4>
 8010296:	0049      	lsls	r1, r1, #1
 8010298:	3801      	subs	r0, #1
 801029a:	e7dd      	b.n	8010258 <__ieee754_fmodf+0xa0>
 801029c:	d0a6      	beq.n	80101ec <__ieee754_fmodf+0x34>
 801029e:	0059      	lsls	r1, r3, #1
 80102a0:	e7fa      	b.n	8010298 <__ieee754_fmodf+0xe0>
 80102a2:	005b      	lsls	r3, r3, #1
 80102a4:	3a01      	subs	r2, #1
 80102a6:	e7df      	b.n	8010268 <__ieee754_fmodf+0xb0>
 80102a8:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 80102ac:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80102b0:	3282      	adds	r2, #130	@ 0x82
 80102b2:	4113      	asrs	r3, r2
 80102b4:	432b      	orrs	r3, r5
 80102b6:	e7e3      	b.n	8010280 <__ieee754_fmodf+0xc8>
 80102b8:	08011630 	.word	0x08011630

080102bc <__ieee754_rem_pio2f>:
 80102bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102be:	ee10 6a10 	vmov	r6, s0
 80102c2:	4b88      	ldr	r3, [pc, #544]	@ (80104e4 <__ieee754_rem_pio2f+0x228>)
 80102c4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80102c8:	429d      	cmp	r5, r3
 80102ca:	b087      	sub	sp, #28
 80102cc:	4604      	mov	r4, r0
 80102ce:	d805      	bhi.n	80102dc <__ieee754_rem_pio2f+0x20>
 80102d0:	2300      	movs	r3, #0
 80102d2:	ed80 0a00 	vstr	s0, [r0]
 80102d6:	6043      	str	r3, [r0, #4]
 80102d8:	2000      	movs	r0, #0
 80102da:	e022      	b.n	8010322 <__ieee754_rem_pio2f+0x66>
 80102dc:	4b82      	ldr	r3, [pc, #520]	@ (80104e8 <__ieee754_rem_pio2f+0x22c>)
 80102de:	429d      	cmp	r5, r3
 80102e0:	d83a      	bhi.n	8010358 <__ieee754_rem_pio2f+0x9c>
 80102e2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80102e6:	2e00      	cmp	r6, #0
 80102e8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80104ec <__ieee754_rem_pio2f+0x230>
 80102ec:	4a80      	ldr	r2, [pc, #512]	@ (80104f0 <__ieee754_rem_pio2f+0x234>)
 80102ee:	f023 030f 	bic.w	r3, r3, #15
 80102f2:	dd18      	ble.n	8010326 <__ieee754_rem_pio2f+0x6a>
 80102f4:	4293      	cmp	r3, r2
 80102f6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80102fa:	bf09      	itett	eq
 80102fc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80104f4 <__ieee754_rem_pio2f+0x238>
 8010300:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80104f8 <__ieee754_rem_pio2f+0x23c>
 8010304:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80104fc <__ieee754_rem_pio2f+0x240>
 8010308:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801030c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8010310:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010314:	ed80 7a00 	vstr	s14, [r0]
 8010318:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801031c:	edc0 7a01 	vstr	s15, [r0, #4]
 8010320:	2001      	movs	r0, #1
 8010322:	b007      	add	sp, #28
 8010324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010326:	4293      	cmp	r3, r2
 8010328:	ee70 7a07 	vadd.f32	s15, s0, s14
 801032c:	bf09      	itett	eq
 801032e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80104f4 <__ieee754_rem_pio2f+0x238>
 8010332:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80104f8 <__ieee754_rem_pio2f+0x23c>
 8010336:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80104fc <__ieee754_rem_pio2f+0x240>
 801033a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801033e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010342:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010346:	ed80 7a00 	vstr	s14, [r0]
 801034a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801034e:	edc0 7a01 	vstr	s15, [r0, #4]
 8010352:	f04f 30ff 	mov.w	r0, #4294967295
 8010356:	e7e4      	b.n	8010322 <__ieee754_rem_pio2f+0x66>
 8010358:	4b69      	ldr	r3, [pc, #420]	@ (8010500 <__ieee754_rem_pio2f+0x244>)
 801035a:	429d      	cmp	r5, r3
 801035c:	d873      	bhi.n	8010446 <__ieee754_rem_pio2f+0x18a>
 801035e:	f000 f8dd 	bl	801051c <fabsf>
 8010362:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8010504 <__ieee754_rem_pio2f+0x248>
 8010366:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801036a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801036e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010376:	ee17 0a90 	vmov	r0, s15
 801037a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80104ec <__ieee754_rem_pio2f+0x230>
 801037e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8010382:	281f      	cmp	r0, #31
 8010384:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80104f8 <__ieee754_rem_pio2f+0x23c>
 8010388:	ee67 7a27 	vmul.f32	s15, s14, s15
 801038c:	eeb1 6a47 	vneg.f32	s12, s14
 8010390:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010394:	ee16 1a90 	vmov	r1, s13
 8010398:	dc09      	bgt.n	80103ae <__ieee754_rem_pio2f+0xf2>
 801039a:	4a5b      	ldr	r2, [pc, #364]	@ (8010508 <__ieee754_rem_pio2f+0x24c>)
 801039c:	1e47      	subs	r7, r0, #1
 801039e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80103a2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80103a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80103aa:	4293      	cmp	r3, r2
 80103ac:	d107      	bne.n	80103be <__ieee754_rem_pio2f+0x102>
 80103ae:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80103b2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80103b6:	2a08      	cmp	r2, #8
 80103b8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80103bc:	dc14      	bgt.n	80103e8 <__ieee754_rem_pio2f+0x12c>
 80103be:	6021      	str	r1, [r4, #0]
 80103c0:	ed94 7a00 	vldr	s14, [r4]
 80103c4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80103c8:	2e00      	cmp	r6, #0
 80103ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 80103ce:	ed84 0a01 	vstr	s0, [r4, #4]
 80103d2:	daa6      	bge.n	8010322 <__ieee754_rem_pio2f+0x66>
 80103d4:	eeb1 7a47 	vneg.f32	s14, s14
 80103d8:	eeb1 0a40 	vneg.f32	s0, s0
 80103dc:	ed84 7a00 	vstr	s14, [r4]
 80103e0:	ed84 0a01 	vstr	s0, [r4, #4]
 80103e4:	4240      	negs	r0, r0
 80103e6:	e79c      	b.n	8010322 <__ieee754_rem_pio2f+0x66>
 80103e8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80104f4 <__ieee754_rem_pio2f+0x238>
 80103ec:	eef0 6a40 	vmov.f32	s13, s0
 80103f0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80103f4:	ee70 7a66 	vsub.f32	s15, s0, s13
 80103f8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80103fc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80104fc <__ieee754_rem_pio2f+0x240>
 8010400:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8010404:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010408:	ee15 2a90 	vmov	r2, s11
 801040c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010410:	1a5b      	subs	r3, r3, r1
 8010412:	2b19      	cmp	r3, #25
 8010414:	dc04      	bgt.n	8010420 <__ieee754_rem_pio2f+0x164>
 8010416:	edc4 5a00 	vstr	s11, [r4]
 801041a:	eeb0 0a66 	vmov.f32	s0, s13
 801041e:	e7cf      	b.n	80103c0 <__ieee754_rem_pio2f+0x104>
 8010420:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801050c <__ieee754_rem_pio2f+0x250>
 8010424:	eeb0 0a66 	vmov.f32	s0, s13
 8010428:	eea6 0a25 	vfma.f32	s0, s12, s11
 801042c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8010430:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8010510 <__ieee754_rem_pio2f+0x254>
 8010434:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010438:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801043c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010440:	ed84 7a00 	vstr	s14, [r4]
 8010444:	e7bc      	b.n	80103c0 <__ieee754_rem_pio2f+0x104>
 8010446:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801044a:	d306      	bcc.n	801045a <__ieee754_rem_pio2f+0x19e>
 801044c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010450:	edc0 7a01 	vstr	s15, [r0, #4]
 8010454:	edc0 7a00 	vstr	s15, [r0]
 8010458:	e73e      	b.n	80102d8 <__ieee754_rem_pio2f+0x1c>
 801045a:	15ea      	asrs	r2, r5, #23
 801045c:	3a86      	subs	r2, #134	@ 0x86
 801045e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8010462:	ee07 3a90 	vmov	s15, r3
 8010466:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801046a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8010514 <__ieee754_rem_pio2f+0x258>
 801046e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010472:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010476:	ed8d 7a03 	vstr	s14, [sp, #12]
 801047a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801047e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010482:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801048a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801048e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010492:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801049a:	edcd 7a05 	vstr	s15, [sp, #20]
 801049e:	d11e      	bne.n	80104de <__ieee754_rem_pio2f+0x222>
 80104a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80104a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104a8:	bf0c      	ite	eq
 80104aa:	2301      	moveq	r3, #1
 80104ac:	2302      	movne	r3, #2
 80104ae:	491a      	ldr	r1, [pc, #104]	@ (8010518 <__ieee754_rem_pio2f+0x25c>)
 80104b0:	9101      	str	r1, [sp, #4]
 80104b2:	2102      	movs	r1, #2
 80104b4:	9100      	str	r1, [sp, #0]
 80104b6:	a803      	add	r0, sp, #12
 80104b8:	4621      	mov	r1, r4
 80104ba:	f000 fc69 	bl	8010d90 <__kernel_rem_pio2f>
 80104be:	2e00      	cmp	r6, #0
 80104c0:	f6bf af2f 	bge.w	8010322 <__ieee754_rem_pio2f+0x66>
 80104c4:	edd4 7a00 	vldr	s15, [r4]
 80104c8:	eef1 7a67 	vneg.f32	s15, s15
 80104cc:	edc4 7a00 	vstr	s15, [r4]
 80104d0:	edd4 7a01 	vldr	s15, [r4, #4]
 80104d4:	eef1 7a67 	vneg.f32	s15, s15
 80104d8:	edc4 7a01 	vstr	s15, [r4, #4]
 80104dc:	e782      	b.n	80103e4 <__ieee754_rem_pio2f+0x128>
 80104de:	2303      	movs	r3, #3
 80104e0:	e7e5      	b.n	80104ae <__ieee754_rem_pio2f+0x1f2>
 80104e2:	bf00      	nop
 80104e4:	3f490fd8 	.word	0x3f490fd8
 80104e8:	4016cbe3 	.word	0x4016cbe3
 80104ec:	3fc90f80 	.word	0x3fc90f80
 80104f0:	3fc90fd0 	.word	0x3fc90fd0
 80104f4:	37354400 	.word	0x37354400
 80104f8:	37354443 	.word	0x37354443
 80104fc:	2e85a308 	.word	0x2e85a308
 8010500:	43490f80 	.word	0x43490f80
 8010504:	3f22f984 	.word	0x3f22f984
 8010508:	08011638 	.word	0x08011638
 801050c:	2e85a300 	.word	0x2e85a300
 8010510:	248d3132 	.word	0x248d3132
 8010514:	43800000 	.word	0x43800000
 8010518:	080116b8 	.word	0x080116b8

0801051c <fabsf>:
 801051c:	ee10 3a10 	vmov	r3, s0
 8010520:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010524:	ee00 3a10 	vmov	s0, r3
 8010528:	4770      	bx	lr
 801052a:	0000      	movs	r0, r0
 801052c:	0000      	movs	r0, r0
	...

08010530 <scalbn>:
 8010530:	b570      	push	{r4, r5, r6, lr}
 8010532:	ec55 4b10 	vmov	r4, r5, d0
 8010536:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801053a:	4606      	mov	r6, r0
 801053c:	462b      	mov	r3, r5
 801053e:	b991      	cbnz	r1, 8010566 <scalbn+0x36>
 8010540:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010544:	4323      	orrs	r3, r4
 8010546:	d03b      	beq.n	80105c0 <scalbn+0x90>
 8010548:	4b33      	ldr	r3, [pc, #204]	@ (8010618 <scalbn+0xe8>)
 801054a:	4620      	mov	r0, r4
 801054c:	4629      	mov	r1, r5
 801054e:	2200      	movs	r2, #0
 8010550:	f7f0 f81e 	bl	8000590 <__aeabi_dmul>
 8010554:	4b31      	ldr	r3, [pc, #196]	@ (801061c <scalbn+0xec>)
 8010556:	429e      	cmp	r6, r3
 8010558:	4604      	mov	r4, r0
 801055a:	460d      	mov	r5, r1
 801055c:	da0f      	bge.n	801057e <scalbn+0x4e>
 801055e:	a326      	add	r3, pc, #152	@ (adr r3, 80105f8 <scalbn+0xc8>)
 8010560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010564:	e01e      	b.n	80105a4 <scalbn+0x74>
 8010566:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801056a:	4291      	cmp	r1, r2
 801056c:	d10b      	bne.n	8010586 <scalbn+0x56>
 801056e:	4622      	mov	r2, r4
 8010570:	4620      	mov	r0, r4
 8010572:	4629      	mov	r1, r5
 8010574:	f7ef fe56 	bl	8000224 <__adddf3>
 8010578:	4604      	mov	r4, r0
 801057a:	460d      	mov	r5, r1
 801057c:	e020      	b.n	80105c0 <scalbn+0x90>
 801057e:	460b      	mov	r3, r1
 8010580:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010584:	3936      	subs	r1, #54	@ 0x36
 8010586:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801058a:	4296      	cmp	r6, r2
 801058c:	dd0d      	ble.n	80105aa <scalbn+0x7a>
 801058e:	2d00      	cmp	r5, #0
 8010590:	a11b      	add	r1, pc, #108	@ (adr r1, 8010600 <scalbn+0xd0>)
 8010592:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010596:	da02      	bge.n	801059e <scalbn+0x6e>
 8010598:	a11b      	add	r1, pc, #108	@ (adr r1, 8010608 <scalbn+0xd8>)
 801059a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801059e:	a318      	add	r3, pc, #96	@ (adr r3, 8010600 <scalbn+0xd0>)
 80105a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a4:	f7ef fff4 	bl	8000590 <__aeabi_dmul>
 80105a8:	e7e6      	b.n	8010578 <scalbn+0x48>
 80105aa:	1872      	adds	r2, r6, r1
 80105ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80105b0:	428a      	cmp	r2, r1
 80105b2:	dcec      	bgt.n	801058e <scalbn+0x5e>
 80105b4:	2a00      	cmp	r2, #0
 80105b6:	dd06      	ble.n	80105c6 <scalbn+0x96>
 80105b8:	f36f 531e 	bfc	r3, #20, #11
 80105bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80105c0:	ec45 4b10 	vmov	d0, r4, r5
 80105c4:	bd70      	pop	{r4, r5, r6, pc}
 80105c6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80105ca:	da08      	bge.n	80105de <scalbn+0xae>
 80105cc:	2d00      	cmp	r5, #0
 80105ce:	a10a      	add	r1, pc, #40	@ (adr r1, 80105f8 <scalbn+0xc8>)
 80105d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105d4:	dac3      	bge.n	801055e <scalbn+0x2e>
 80105d6:	a10e      	add	r1, pc, #56	@ (adr r1, 8010610 <scalbn+0xe0>)
 80105d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105dc:	e7bf      	b.n	801055e <scalbn+0x2e>
 80105de:	3236      	adds	r2, #54	@ 0x36
 80105e0:	f36f 531e 	bfc	r3, #20, #11
 80105e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80105e8:	4620      	mov	r0, r4
 80105ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010620 <scalbn+0xf0>)
 80105ec:	4629      	mov	r1, r5
 80105ee:	2200      	movs	r2, #0
 80105f0:	e7d8      	b.n	80105a4 <scalbn+0x74>
 80105f2:	bf00      	nop
 80105f4:	f3af 8000 	nop.w
 80105f8:	c2f8f359 	.word	0xc2f8f359
 80105fc:	01a56e1f 	.word	0x01a56e1f
 8010600:	8800759c 	.word	0x8800759c
 8010604:	7e37e43c 	.word	0x7e37e43c
 8010608:	8800759c 	.word	0x8800759c
 801060c:	fe37e43c 	.word	0xfe37e43c
 8010610:	c2f8f359 	.word	0xc2f8f359
 8010614:	81a56e1f 	.word	0x81a56e1f
 8010618:	43500000 	.word	0x43500000
 801061c:	ffff3cb0 	.word	0xffff3cb0
 8010620:	3c900000 	.word	0x3c900000

08010624 <scalbnf>:
 8010624:	ee10 3a10 	vmov	r3, s0
 8010628:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801062c:	d02b      	beq.n	8010686 <scalbnf+0x62>
 801062e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010632:	d302      	bcc.n	801063a <scalbnf+0x16>
 8010634:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010638:	4770      	bx	lr
 801063a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801063e:	d123      	bne.n	8010688 <scalbnf+0x64>
 8010640:	4b24      	ldr	r3, [pc, #144]	@ (80106d4 <scalbnf+0xb0>)
 8010642:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80106d8 <scalbnf+0xb4>
 8010646:	4298      	cmp	r0, r3
 8010648:	ee20 0a27 	vmul.f32	s0, s0, s15
 801064c:	db17      	blt.n	801067e <scalbnf+0x5a>
 801064e:	ee10 3a10 	vmov	r3, s0
 8010652:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010656:	3a19      	subs	r2, #25
 8010658:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801065c:	4288      	cmp	r0, r1
 801065e:	dd15      	ble.n	801068c <scalbnf+0x68>
 8010660:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80106dc <scalbnf+0xb8>
 8010664:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80106e0 <scalbnf+0xbc>
 8010668:	ee10 3a10 	vmov	r3, s0
 801066c:	eeb0 7a67 	vmov.f32	s14, s15
 8010670:	2b00      	cmp	r3, #0
 8010672:	bfb8      	it	lt
 8010674:	eef0 7a66 	vmovlt.f32	s15, s13
 8010678:	ee27 0a87 	vmul.f32	s0, s15, s14
 801067c:	4770      	bx	lr
 801067e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80106e4 <scalbnf+0xc0>
 8010682:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010686:	4770      	bx	lr
 8010688:	0dd2      	lsrs	r2, r2, #23
 801068a:	e7e5      	b.n	8010658 <scalbnf+0x34>
 801068c:	4410      	add	r0, r2
 801068e:	28fe      	cmp	r0, #254	@ 0xfe
 8010690:	dce6      	bgt.n	8010660 <scalbnf+0x3c>
 8010692:	2800      	cmp	r0, #0
 8010694:	dd06      	ble.n	80106a4 <scalbnf+0x80>
 8010696:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801069a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801069e:	ee00 3a10 	vmov	s0, r3
 80106a2:	4770      	bx	lr
 80106a4:	f110 0f16 	cmn.w	r0, #22
 80106a8:	da09      	bge.n	80106be <scalbnf+0x9a>
 80106aa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80106e4 <scalbnf+0xc0>
 80106ae:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80106e8 <scalbnf+0xc4>
 80106b2:	ee10 3a10 	vmov	r3, s0
 80106b6:	eeb0 7a67 	vmov.f32	s14, s15
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	e7d9      	b.n	8010672 <scalbnf+0x4e>
 80106be:	3019      	adds	r0, #25
 80106c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80106c4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80106c8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80106ec <scalbnf+0xc8>
 80106cc:	ee07 3a90 	vmov	s15, r3
 80106d0:	e7d7      	b.n	8010682 <scalbnf+0x5e>
 80106d2:	bf00      	nop
 80106d4:	ffff3cb0 	.word	0xffff3cb0
 80106d8:	4c000000 	.word	0x4c000000
 80106dc:	7149f2ca 	.word	0x7149f2ca
 80106e0:	f149f2ca 	.word	0xf149f2ca
 80106e4:	0da24260 	.word	0x0da24260
 80106e8:	8da24260 	.word	0x8da24260
 80106ec:	33000000 	.word	0x33000000

080106f0 <__kernel_rem_pio2>:
 80106f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106f4:	ed2d 8b02 	vpush	{d8}
 80106f8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80106fc:	f112 0f14 	cmn.w	r2, #20
 8010700:	9306      	str	r3, [sp, #24]
 8010702:	9104      	str	r1, [sp, #16]
 8010704:	4bc2      	ldr	r3, [pc, #776]	@ (8010a10 <__kernel_rem_pio2+0x320>)
 8010706:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8010708:	9008      	str	r0, [sp, #32]
 801070a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801070e:	9300      	str	r3, [sp, #0]
 8010710:	9b06      	ldr	r3, [sp, #24]
 8010712:	f103 33ff 	add.w	r3, r3, #4294967295
 8010716:	bfa8      	it	ge
 8010718:	1ed4      	subge	r4, r2, #3
 801071a:	9305      	str	r3, [sp, #20]
 801071c:	bfb2      	itee	lt
 801071e:	2400      	movlt	r4, #0
 8010720:	2318      	movge	r3, #24
 8010722:	fb94 f4f3 	sdivge	r4, r4, r3
 8010726:	f06f 0317 	mvn.w	r3, #23
 801072a:	fb04 3303 	mla	r3, r4, r3, r3
 801072e:	eb03 0b02 	add.w	fp, r3, r2
 8010732:	9b00      	ldr	r3, [sp, #0]
 8010734:	9a05      	ldr	r2, [sp, #20]
 8010736:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8010a00 <__kernel_rem_pio2+0x310>
 801073a:	eb03 0802 	add.w	r8, r3, r2
 801073e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010740:	1aa7      	subs	r7, r4, r2
 8010742:	ae20      	add	r6, sp, #128	@ 0x80
 8010744:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010748:	2500      	movs	r5, #0
 801074a:	4545      	cmp	r5, r8
 801074c:	dd12      	ble.n	8010774 <__kernel_rem_pio2+0x84>
 801074e:	9b06      	ldr	r3, [sp, #24]
 8010750:	aa20      	add	r2, sp, #128	@ 0x80
 8010752:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010756:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801075a:	2700      	movs	r7, #0
 801075c:	9b00      	ldr	r3, [sp, #0]
 801075e:	429f      	cmp	r7, r3
 8010760:	dc2e      	bgt.n	80107c0 <__kernel_rem_pio2+0xd0>
 8010762:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8010a00 <__kernel_rem_pio2+0x310>
 8010766:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801076a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801076e:	46a8      	mov	r8, r5
 8010770:	2600      	movs	r6, #0
 8010772:	e01b      	b.n	80107ac <__kernel_rem_pio2+0xbc>
 8010774:	42ef      	cmn	r7, r5
 8010776:	d407      	bmi.n	8010788 <__kernel_rem_pio2+0x98>
 8010778:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801077c:	f7ef fe9e 	bl	80004bc <__aeabi_i2d>
 8010780:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010784:	3501      	adds	r5, #1
 8010786:	e7e0      	b.n	801074a <__kernel_rem_pio2+0x5a>
 8010788:	ec51 0b18 	vmov	r0, r1, d8
 801078c:	e7f8      	b.n	8010780 <__kernel_rem_pio2+0x90>
 801078e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8010792:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010796:	f7ef fefb 	bl	8000590 <__aeabi_dmul>
 801079a:	4602      	mov	r2, r0
 801079c:	460b      	mov	r3, r1
 801079e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107a2:	f7ef fd3f 	bl	8000224 <__adddf3>
 80107a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107aa:	3601      	adds	r6, #1
 80107ac:	9b05      	ldr	r3, [sp, #20]
 80107ae:	429e      	cmp	r6, r3
 80107b0:	dded      	ble.n	801078e <__kernel_rem_pio2+0x9e>
 80107b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80107b6:	3701      	adds	r7, #1
 80107b8:	ecaa 7b02 	vstmia	sl!, {d7}
 80107bc:	3508      	adds	r5, #8
 80107be:	e7cd      	b.n	801075c <__kernel_rem_pio2+0x6c>
 80107c0:	9b00      	ldr	r3, [sp, #0]
 80107c2:	f8dd 8000 	ldr.w	r8, [sp]
 80107c6:	aa0c      	add	r2, sp, #48	@ 0x30
 80107c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80107cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80107ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80107d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80107d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80107d6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80107da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80107dc:	ab98      	add	r3, sp, #608	@ 0x260
 80107de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80107e2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80107e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80107ea:	ac0c      	add	r4, sp, #48	@ 0x30
 80107ec:	ab70      	add	r3, sp, #448	@ 0x1c0
 80107ee:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80107f2:	46a1      	mov	r9, r4
 80107f4:	46c2      	mov	sl, r8
 80107f6:	f1ba 0f00 	cmp.w	sl, #0
 80107fa:	dc77      	bgt.n	80108ec <__kernel_rem_pio2+0x1fc>
 80107fc:	4658      	mov	r0, fp
 80107fe:	ed9d 0b02 	vldr	d0, [sp, #8]
 8010802:	f7ff fe95 	bl	8010530 <scalbn>
 8010806:	ec57 6b10 	vmov	r6, r7, d0
 801080a:	2200      	movs	r2, #0
 801080c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8010810:	4630      	mov	r0, r6
 8010812:	4639      	mov	r1, r7
 8010814:	f7ef febc 	bl	8000590 <__aeabi_dmul>
 8010818:	ec41 0b10 	vmov	d0, r0, r1
 801081c:	f000 fd20 	bl	8011260 <floor>
 8010820:	4b7c      	ldr	r3, [pc, #496]	@ (8010a14 <__kernel_rem_pio2+0x324>)
 8010822:	ec51 0b10 	vmov	r0, r1, d0
 8010826:	2200      	movs	r2, #0
 8010828:	f7ef feb2 	bl	8000590 <__aeabi_dmul>
 801082c:	4602      	mov	r2, r0
 801082e:	460b      	mov	r3, r1
 8010830:	4630      	mov	r0, r6
 8010832:	4639      	mov	r1, r7
 8010834:	f7ef fcf4 	bl	8000220 <__aeabi_dsub>
 8010838:	460f      	mov	r7, r1
 801083a:	4606      	mov	r6, r0
 801083c:	f7f0 f942 	bl	8000ac4 <__aeabi_d2iz>
 8010840:	9002      	str	r0, [sp, #8]
 8010842:	f7ef fe3b 	bl	80004bc <__aeabi_i2d>
 8010846:	4602      	mov	r2, r0
 8010848:	460b      	mov	r3, r1
 801084a:	4630      	mov	r0, r6
 801084c:	4639      	mov	r1, r7
 801084e:	f7ef fce7 	bl	8000220 <__aeabi_dsub>
 8010852:	f1bb 0f00 	cmp.w	fp, #0
 8010856:	4606      	mov	r6, r0
 8010858:	460f      	mov	r7, r1
 801085a:	dd6c      	ble.n	8010936 <__kernel_rem_pio2+0x246>
 801085c:	f108 31ff 	add.w	r1, r8, #4294967295
 8010860:	ab0c      	add	r3, sp, #48	@ 0x30
 8010862:	9d02      	ldr	r5, [sp, #8]
 8010864:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010868:	f1cb 0018 	rsb	r0, fp, #24
 801086c:	fa43 f200 	asr.w	r2, r3, r0
 8010870:	4415      	add	r5, r2
 8010872:	4082      	lsls	r2, r0
 8010874:	1a9b      	subs	r3, r3, r2
 8010876:	aa0c      	add	r2, sp, #48	@ 0x30
 8010878:	9502      	str	r5, [sp, #8]
 801087a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801087e:	f1cb 0217 	rsb	r2, fp, #23
 8010882:	fa43 f902 	asr.w	r9, r3, r2
 8010886:	f1b9 0f00 	cmp.w	r9, #0
 801088a:	dd64      	ble.n	8010956 <__kernel_rem_pio2+0x266>
 801088c:	9b02      	ldr	r3, [sp, #8]
 801088e:	2200      	movs	r2, #0
 8010890:	3301      	adds	r3, #1
 8010892:	9302      	str	r3, [sp, #8]
 8010894:	4615      	mov	r5, r2
 8010896:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801089a:	4590      	cmp	r8, r2
 801089c:	f300 80a1 	bgt.w	80109e2 <__kernel_rem_pio2+0x2f2>
 80108a0:	f1bb 0f00 	cmp.w	fp, #0
 80108a4:	dd07      	ble.n	80108b6 <__kernel_rem_pio2+0x1c6>
 80108a6:	f1bb 0f01 	cmp.w	fp, #1
 80108aa:	f000 80c1 	beq.w	8010a30 <__kernel_rem_pio2+0x340>
 80108ae:	f1bb 0f02 	cmp.w	fp, #2
 80108b2:	f000 80c8 	beq.w	8010a46 <__kernel_rem_pio2+0x356>
 80108b6:	f1b9 0f02 	cmp.w	r9, #2
 80108ba:	d14c      	bne.n	8010956 <__kernel_rem_pio2+0x266>
 80108bc:	4632      	mov	r2, r6
 80108be:	463b      	mov	r3, r7
 80108c0:	4955      	ldr	r1, [pc, #340]	@ (8010a18 <__kernel_rem_pio2+0x328>)
 80108c2:	2000      	movs	r0, #0
 80108c4:	f7ef fcac 	bl	8000220 <__aeabi_dsub>
 80108c8:	4606      	mov	r6, r0
 80108ca:	460f      	mov	r7, r1
 80108cc:	2d00      	cmp	r5, #0
 80108ce:	d042      	beq.n	8010956 <__kernel_rem_pio2+0x266>
 80108d0:	4658      	mov	r0, fp
 80108d2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8010a08 <__kernel_rem_pio2+0x318>
 80108d6:	f7ff fe2b 	bl	8010530 <scalbn>
 80108da:	4630      	mov	r0, r6
 80108dc:	4639      	mov	r1, r7
 80108de:	ec53 2b10 	vmov	r2, r3, d0
 80108e2:	f7ef fc9d 	bl	8000220 <__aeabi_dsub>
 80108e6:	4606      	mov	r6, r0
 80108e8:	460f      	mov	r7, r1
 80108ea:	e034      	b.n	8010956 <__kernel_rem_pio2+0x266>
 80108ec:	4b4b      	ldr	r3, [pc, #300]	@ (8010a1c <__kernel_rem_pio2+0x32c>)
 80108ee:	2200      	movs	r2, #0
 80108f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108f4:	f7ef fe4c 	bl	8000590 <__aeabi_dmul>
 80108f8:	f7f0 f8e4 	bl	8000ac4 <__aeabi_d2iz>
 80108fc:	f7ef fdde 	bl	80004bc <__aeabi_i2d>
 8010900:	4b47      	ldr	r3, [pc, #284]	@ (8010a20 <__kernel_rem_pio2+0x330>)
 8010902:	2200      	movs	r2, #0
 8010904:	4606      	mov	r6, r0
 8010906:	460f      	mov	r7, r1
 8010908:	f7ef fe42 	bl	8000590 <__aeabi_dmul>
 801090c:	4602      	mov	r2, r0
 801090e:	460b      	mov	r3, r1
 8010910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010914:	f7ef fc84 	bl	8000220 <__aeabi_dsub>
 8010918:	f7f0 f8d4 	bl	8000ac4 <__aeabi_d2iz>
 801091c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8010920:	f849 0b04 	str.w	r0, [r9], #4
 8010924:	4639      	mov	r1, r7
 8010926:	4630      	mov	r0, r6
 8010928:	f7ef fc7c 	bl	8000224 <__adddf3>
 801092c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010934:	e75f      	b.n	80107f6 <__kernel_rem_pio2+0x106>
 8010936:	d107      	bne.n	8010948 <__kernel_rem_pio2+0x258>
 8010938:	f108 33ff 	add.w	r3, r8, #4294967295
 801093c:	aa0c      	add	r2, sp, #48	@ 0x30
 801093e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010942:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8010946:	e79e      	b.n	8010886 <__kernel_rem_pio2+0x196>
 8010948:	4b36      	ldr	r3, [pc, #216]	@ (8010a24 <__kernel_rem_pio2+0x334>)
 801094a:	2200      	movs	r2, #0
 801094c:	f7f0 f8a6 	bl	8000a9c <__aeabi_dcmpge>
 8010950:	2800      	cmp	r0, #0
 8010952:	d143      	bne.n	80109dc <__kernel_rem_pio2+0x2ec>
 8010954:	4681      	mov	r9, r0
 8010956:	2200      	movs	r2, #0
 8010958:	2300      	movs	r3, #0
 801095a:	4630      	mov	r0, r6
 801095c:	4639      	mov	r1, r7
 801095e:	f7f0 f87f 	bl	8000a60 <__aeabi_dcmpeq>
 8010962:	2800      	cmp	r0, #0
 8010964:	f000 80c1 	beq.w	8010aea <__kernel_rem_pio2+0x3fa>
 8010968:	f108 33ff 	add.w	r3, r8, #4294967295
 801096c:	2200      	movs	r2, #0
 801096e:	9900      	ldr	r1, [sp, #0]
 8010970:	428b      	cmp	r3, r1
 8010972:	da70      	bge.n	8010a56 <__kernel_rem_pio2+0x366>
 8010974:	2a00      	cmp	r2, #0
 8010976:	f000 808b 	beq.w	8010a90 <__kernel_rem_pio2+0x3a0>
 801097a:	f108 38ff 	add.w	r8, r8, #4294967295
 801097e:	ab0c      	add	r3, sp, #48	@ 0x30
 8010980:	f1ab 0b18 	sub.w	fp, fp, #24
 8010984:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d0f6      	beq.n	801097a <__kernel_rem_pio2+0x28a>
 801098c:	4658      	mov	r0, fp
 801098e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8010a08 <__kernel_rem_pio2+0x318>
 8010992:	f7ff fdcd 	bl	8010530 <scalbn>
 8010996:	f108 0301 	add.w	r3, r8, #1
 801099a:	00da      	lsls	r2, r3, #3
 801099c:	9205      	str	r2, [sp, #20]
 801099e:	ec55 4b10 	vmov	r4, r5, d0
 80109a2:	aa70      	add	r2, sp, #448	@ 0x1c0
 80109a4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8010a1c <__kernel_rem_pio2+0x32c>
 80109a8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80109ac:	4646      	mov	r6, r8
 80109ae:	f04f 0a00 	mov.w	sl, #0
 80109b2:	2e00      	cmp	r6, #0
 80109b4:	f280 80d1 	bge.w	8010b5a <__kernel_rem_pio2+0x46a>
 80109b8:	4644      	mov	r4, r8
 80109ba:	2c00      	cmp	r4, #0
 80109bc:	f2c0 80ff 	blt.w	8010bbe <__kernel_rem_pio2+0x4ce>
 80109c0:	4b19      	ldr	r3, [pc, #100]	@ (8010a28 <__kernel_rem_pio2+0x338>)
 80109c2:	461f      	mov	r7, r3
 80109c4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80109c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80109ca:	9306      	str	r3, [sp, #24]
 80109cc:	f04f 0a00 	mov.w	sl, #0
 80109d0:	f04f 0b00 	mov.w	fp, #0
 80109d4:	2600      	movs	r6, #0
 80109d6:	eba8 0504 	sub.w	r5, r8, r4
 80109da:	e0e4      	b.n	8010ba6 <__kernel_rem_pio2+0x4b6>
 80109dc:	f04f 0902 	mov.w	r9, #2
 80109e0:	e754      	b.n	801088c <__kernel_rem_pio2+0x19c>
 80109e2:	f854 3b04 	ldr.w	r3, [r4], #4
 80109e6:	bb0d      	cbnz	r5, 8010a2c <__kernel_rem_pio2+0x33c>
 80109e8:	b123      	cbz	r3, 80109f4 <__kernel_rem_pio2+0x304>
 80109ea:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80109ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80109f2:	2301      	movs	r3, #1
 80109f4:	3201      	adds	r2, #1
 80109f6:	461d      	mov	r5, r3
 80109f8:	e74f      	b.n	801089a <__kernel_rem_pio2+0x1aa>
 80109fa:	bf00      	nop
 80109fc:	f3af 8000 	nop.w
	...
 8010a0c:	3ff00000 	.word	0x3ff00000
 8010a10:	08011a10 	.word	0x08011a10
 8010a14:	40200000 	.word	0x40200000
 8010a18:	3ff00000 	.word	0x3ff00000
 8010a1c:	3e700000 	.word	0x3e700000
 8010a20:	41700000 	.word	0x41700000
 8010a24:	3fe00000 	.word	0x3fe00000
 8010a28:	080119d0 	.word	0x080119d0
 8010a2c:	1acb      	subs	r3, r1, r3
 8010a2e:	e7de      	b.n	80109ee <__kernel_rem_pio2+0x2fe>
 8010a30:	f108 32ff 	add.w	r2, r8, #4294967295
 8010a34:	ab0c      	add	r3, sp, #48	@ 0x30
 8010a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a3a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010a3e:	a90c      	add	r1, sp, #48	@ 0x30
 8010a40:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010a44:	e737      	b.n	80108b6 <__kernel_rem_pio2+0x1c6>
 8010a46:	f108 32ff 	add.w	r2, r8, #4294967295
 8010a4a:	ab0c      	add	r3, sp, #48	@ 0x30
 8010a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010a54:	e7f3      	b.n	8010a3e <__kernel_rem_pio2+0x34e>
 8010a56:	a90c      	add	r1, sp, #48	@ 0x30
 8010a58:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010a5c:	3b01      	subs	r3, #1
 8010a5e:	430a      	orrs	r2, r1
 8010a60:	e785      	b.n	801096e <__kernel_rem_pio2+0x27e>
 8010a62:	3401      	adds	r4, #1
 8010a64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010a68:	2a00      	cmp	r2, #0
 8010a6a:	d0fa      	beq.n	8010a62 <__kernel_rem_pio2+0x372>
 8010a6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a6e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010a72:	eb0d 0503 	add.w	r5, sp, r3
 8010a76:	9b06      	ldr	r3, [sp, #24]
 8010a78:	aa20      	add	r2, sp, #128	@ 0x80
 8010a7a:	4443      	add	r3, r8
 8010a7c:	f108 0701 	add.w	r7, r8, #1
 8010a80:	3d98      	subs	r5, #152	@ 0x98
 8010a82:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8010a86:	4444      	add	r4, r8
 8010a88:	42bc      	cmp	r4, r7
 8010a8a:	da04      	bge.n	8010a96 <__kernel_rem_pio2+0x3a6>
 8010a8c:	46a0      	mov	r8, r4
 8010a8e:	e6a2      	b.n	80107d6 <__kernel_rem_pio2+0xe6>
 8010a90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a92:	2401      	movs	r4, #1
 8010a94:	e7e6      	b.n	8010a64 <__kernel_rem_pio2+0x374>
 8010a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a98:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8010a9c:	f7ef fd0e 	bl	80004bc <__aeabi_i2d>
 8010aa0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8010d60 <__kernel_rem_pio2+0x670>
 8010aa4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010aa8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010aac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010ab0:	46b2      	mov	sl, r6
 8010ab2:	f04f 0800 	mov.w	r8, #0
 8010ab6:	9b05      	ldr	r3, [sp, #20]
 8010ab8:	4598      	cmp	r8, r3
 8010aba:	dd05      	ble.n	8010ac8 <__kernel_rem_pio2+0x3d8>
 8010abc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ac0:	3701      	adds	r7, #1
 8010ac2:	eca5 7b02 	vstmia	r5!, {d7}
 8010ac6:	e7df      	b.n	8010a88 <__kernel_rem_pio2+0x398>
 8010ac8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8010acc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010ad0:	f7ef fd5e 	bl	8000590 <__aeabi_dmul>
 8010ad4:	4602      	mov	r2, r0
 8010ad6:	460b      	mov	r3, r1
 8010ad8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010adc:	f7ef fba2 	bl	8000224 <__adddf3>
 8010ae0:	f108 0801 	add.w	r8, r8, #1
 8010ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ae8:	e7e5      	b.n	8010ab6 <__kernel_rem_pio2+0x3c6>
 8010aea:	f1cb 0000 	rsb	r0, fp, #0
 8010aee:	ec47 6b10 	vmov	d0, r6, r7
 8010af2:	f7ff fd1d 	bl	8010530 <scalbn>
 8010af6:	ec55 4b10 	vmov	r4, r5, d0
 8010afa:	4b9b      	ldr	r3, [pc, #620]	@ (8010d68 <__kernel_rem_pio2+0x678>)
 8010afc:	2200      	movs	r2, #0
 8010afe:	4620      	mov	r0, r4
 8010b00:	4629      	mov	r1, r5
 8010b02:	f7ef ffcb 	bl	8000a9c <__aeabi_dcmpge>
 8010b06:	b300      	cbz	r0, 8010b4a <__kernel_rem_pio2+0x45a>
 8010b08:	4b98      	ldr	r3, [pc, #608]	@ (8010d6c <__kernel_rem_pio2+0x67c>)
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	4629      	mov	r1, r5
 8010b10:	f7ef fd3e 	bl	8000590 <__aeabi_dmul>
 8010b14:	f7ef ffd6 	bl	8000ac4 <__aeabi_d2iz>
 8010b18:	4606      	mov	r6, r0
 8010b1a:	f7ef fccf 	bl	80004bc <__aeabi_i2d>
 8010b1e:	4b92      	ldr	r3, [pc, #584]	@ (8010d68 <__kernel_rem_pio2+0x678>)
 8010b20:	2200      	movs	r2, #0
 8010b22:	f7ef fd35 	bl	8000590 <__aeabi_dmul>
 8010b26:	460b      	mov	r3, r1
 8010b28:	4602      	mov	r2, r0
 8010b2a:	4629      	mov	r1, r5
 8010b2c:	4620      	mov	r0, r4
 8010b2e:	f7ef fb77 	bl	8000220 <__aeabi_dsub>
 8010b32:	f7ef ffc7 	bl	8000ac4 <__aeabi_d2iz>
 8010b36:	ab0c      	add	r3, sp, #48	@ 0x30
 8010b38:	f10b 0b18 	add.w	fp, fp, #24
 8010b3c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010b40:	f108 0801 	add.w	r8, r8, #1
 8010b44:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8010b48:	e720      	b.n	801098c <__kernel_rem_pio2+0x29c>
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	4629      	mov	r1, r5
 8010b4e:	f7ef ffb9 	bl	8000ac4 <__aeabi_d2iz>
 8010b52:	ab0c      	add	r3, sp, #48	@ 0x30
 8010b54:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010b58:	e718      	b.n	801098c <__kernel_rem_pio2+0x29c>
 8010b5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8010b5c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010b60:	f7ef fcac 	bl	80004bc <__aeabi_i2d>
 8010b64:	4622      	mov	r2, r4
 8010b66:	462b      	mov	r3, r5
 8010b68:	f7ef fd12 	bl	8000590 <__aeabi_dmul>
 8010b6c:	4652      	mov	r2, sl
 8010b6e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8010b72:	465b      	mov	r3, fp
 8010b74:	4620      	mov	r0, r4
 8010b76:	4629      	mov	r1, r5
 8010b78:	f7ef fd0a 	bl	8000590 <__aeabi_dmul>
 8010b7c:	3e01      	subs	r6, #1
 8010b7e:	4604      	mov	r4, r0
 8010b80:	460d      	mov	r5, r1
 8010b82:	e716      	b.n	80109b2 <__kernel_rem_pio2+0x2c2>
 8010b84:	9906      	ldr	r1, [sp, #24]
 8010b86:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8010b8a:	9106      	str	r1, [sp, #24]
 8010b8c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8010b90:	f7ef fcfe 	bl	8000590 <__aeabi_dmul>
 8010b94:	4602      	mov	r2, r0
 8010b96:	460b      	mov	r3, r1
 8010b98:	4650      	mov	r0, sl
 8010b9a:	4659      	mov	r1, fp
 8010b9c:	f7ef fb42 	bl	8000224 <__adddf3>
 8010ba0:	3601      	adds	r6, #1
 8010ba2:	4682      	mov	sl, r0
 8010ba4:	468b      	mov	fp, r1
 8010ba6:	9b00      	ldr	r3, [sp, #0]
 8010ba8:	429e      	cmp	r6, r3
 8010baa:	dc01      	bgt.n	8010bb0 <__kernel_rem_pio2+0x4c0>
 8010bac:	42ae      	cmp	r6, r5
 8010bae:	dde9      	ble.n	8010b84 <__kernel_rem_pio2+0x494>
 8010bb0:	ab48      	add	r3, sp, #288	@ 0x120
 8010bb2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8010bb6:	e9c5 ab00 	strd	sl, fp, [r5]
 8010bba:	3c01      	subs	r4, #1
 8010bbc:	e6fd      	b.n	80109ba <__kernel_rem_pio2+0x2ca>
 8010bbe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010bc0:	2b02      	cmp	r3, #2
 8010bc2:	dc0b      	bgt.n	8010bdc <__kernel_rem_pio2+0x4ec>
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	dc35      	bgt.n	8010c34 <__kernel_rem_pio2+0x544>
 8010bc8:	d059      	beq.n	8010c7e <__kernel_rem_pio2+0x58e>
 8010bca:	9b02      	ldr	r3, [sp, #8]
 8010bcc:	f003 0007 	and.w	r0, r3, #7
 8010bd0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8010bd4:	ecbd 8b02 	vpop	{d8}
 8010bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bdc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010bde:	2b03      	cmp	r3, #3
 8010be0:	d1f3      	bne.n	8010bca <__kernel_rem_pio2+0x4da>
 8010be2:	9b05      	ldr	r3, [sp, #20]
 8010be4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010be8:	eb0d 0403 	add.w	r4, sp, r3
 8010bec:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8010bf0:	4625      	mov	r5, r4
 8010bf2:	46c2      	mov	sl, r8
 8010bf4:	f1ba 0f00 	cmp.w	sl, #0
 8010bf8:	dc69      	bgt.n	8010cce <__kernel_rem_pio2+0x5de>
 8010bfa:	4645      	mov	r5, r8
 8010bfc:	2d01      	cmp	r5, #1
 8010bfe:	f300 8087 	bgt.w	8010d10 <__kernel_rem_pio2+0x620>
 8010c02:	9c05      	ldr	r4, [sp, #20]
 8010c04:	ab48      	add	r3, sp, #288	@ 0x120
 8010c06:	441c      	add	r4, r3
 8010c08:	2000      	movs	r0, #0
 8010c0a:	2100      	movs	r1, #0
 8010c0c:	f1b8 0f01 	cmp.w	r8, #1
 8010c10:	f300 809c 	bgt.w	8010d4c <__kernel_rem_pio2+0x65c>
 8010c14:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8010c18:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8010c1c:	f1b9 0f00 	cmp.w	r9, #0
 8010c20:	f040 80a6 	bne.w	8010d70 <__kernel_rem_pio2+0x680>
 8010c24:	9b04      	ldr	r3, [sp, #16]
 8010c26:	e9c3 5600 	strd	r5, r6, [r3]
 8010c2a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010c2e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010c32:	e7ca      	b.n	8010bca <__kernel_rem_pio2+0x4da>
 8010c34:	9d05      	ldr	r5, [sp, #20]
 8010c36:	ab48      	add	r3, sp, #288	@ 0x120
 8010c38:	441d      	add	r5, r3
 8010c3a:	4644      	mov	r4, r8
 8010c3c:	2000      	movs	r0, #0
 8010c3e:	2100      	movs	r1, #0
 8010c40:	2c00      	cmp	r4, #0
 8010c42:	da35      	bge.n	8010cb0 <__kernel_rem_pio2+0x5c0>
 8010c44:	f1b9 0f00 	cmp.w	r9, #0
 8010c48:	d038      	beq.n	8010cbc <__kernel_rem_pio2+0x5cc>
 8010c4a:	4602      	mov	r2, r0
 8010c4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010c50:	9c04      	ldr	r4, [sp, #16]
 8010c52:	e9c4 2300 	strd	r2, r3, [r4]
 8010c56:	4602      	mov	r2, r0
 8010c58:	460b      	mov	r3, r1
 8010c5a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8010c5e:	f7ef fadf 	bl	8000220 <__aeabi_dsub>
 8010c62:	ad4a      	add	r5, sp, #296	@ 0x128
 8010c64:	2401      	movs	r4, #1
 8010c66:	45a0      	cmp	r8, r4
 8010c68:	da2b      	bge.n	8010cc2 <__kernel_rem_pio2+0x5d2>
 8010c6a:	f1b9 0f00 	cmp.w	r9, #0
 8010c6e:	d002      	beq.n	8010c76 <__kernel_rem_pio2+0x586>
 8010c70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010c74:	4619      	mov	r1, r3
 8010c76:	9b04      	ldr	r3, [sp, #16]
 8010c78:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010c7c:	e7a5      	b.n	8010bca <__kernel_rem_pio2+0x4da>
 8010c7e:	9c05      	ldr	r4, [sp, #20]
 8010c80:	ab48      	add	r3, sp, #288	@ 0x120
 8010c82:	441c      	add	r4, r3
 8010c84:	2000      	movs	r0, #0
 8010c86:	2100      	movs	r1, #0
 8010c88:	f1b8 0f00 	cmp.w	r8, #0
 8010c8c:	da09      	bge.n	8010ca2 <__kernel_rem_pio2+0x5b2>
 8010c8e:	f1b9 0f00 	cmp.w	r9, #0
 8010c92:	d002      	beq.n	8010c9a <__kernel_rem_pio2+0x5aa>
 8010c94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010c98:	4619      	mov	r1, r3
 8010c9a:	9b04      	ldr	r3, [sp, #16]
 8010c9c:	e9c3 0100 	strd	r0, r1, [r3]
 8010ca0:	e793      	b.n	8010bca <__kernel_rem_pio2+0x4da>
 8010ca2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010ca6:	f7ef fabd 	bl	8000224 <__adddf3>
 8010caa:	f108 38ff 	add.w	r8, r8, #4294967295
 8010cae:	e7eb      	b.n	8010c88 <__kernel_rem_pio2+0x598>
 8010cb0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8010cb4:	f7ef fab6 	bl	8000224 <__adddf3>
 8010cb8:	3c01      	subs	r4, #1
 8010cba:	e7c1      	b.n	8010c40 <__kernel_rem_pio2+0x550>
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	460b      	mov	r3, r1
 8010cc0:	e7c6      	b.n	8010c50 <__kernel_rem_pio2+0x560>
 8010cc2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8010cc6:	f7ef faad 	bl	8000224 <__adddf3>
 8010cca:	3401      	adds	r4, #1
 8010ccc:	e7cb      	b.n	8010c66 <__kernel_rem_pio2+0x576>
 8010cce:	ed35 7b02 	vldmdb	r5!, {d7}
 8010cd2:	ed8d 7b00 	vstr	d7, [sp]
 8010cd6:	ed95 7b02 	vldr	d7, [r5, #8]
 8010cda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010cde:	ec53 2b17 	vmov	r2, r3, d7
 8010ce2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010ce6:	f7ef fa9d 	bl	8000224 <__adddf3>
 8010cea:	4602      	mov	r2, r0
 8010cec:	460b      	mov	r3, r1
 8010cee:	4606      	mov	r6, r0
 8010cf0:	460f      	mov	r7, r1
 8010cf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010cf6:	f7ef fa93 	bl	8000220 <__aeabi_dsub>
 8010cfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010cfe:	f7ef fa91 	bl	8000224 <__adddf3>
 8010d02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010d06:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8010d0a:	e9c5 6700 	strd	r6, r7, [r5]
 8010d0e:	e771      	b.n	8010bf4 <__kernel_rem_pio2+0x504>
 8010d10:	ed34 7b02 	vldmdb	r4!, {d7}
 8010d14:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8010d18:	ec51 0b17 	vmov	r0, r1, d7
 8010d1c:	4652      	mov	r2, sl
 8010d1e:	465b      	mov	r3, fp
 8010d20:	ed8d 7b00 	vstr	d7, [sp]
 8010d24:	f7ef fa7e 	bl	8000224 <__adddf3>
 8010d28:	4602      	mov	r2, r0
 8010d2a:	460b      	mov	r3, r1
 8010d2c:	4606      	mov	r6, r0
 8010d2e:	460f      	mov	r7, r1
 8010d30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d34:	f7ef fa74 	bl	8000220 <__aeabi_dsub>
 8010d38:	4652      	mov	r2, sl
 8010d3a:	465b      	mov	r3, fp
 8010d3c:	f7ef fa72 	bl	8000224 <__adddf3>
 8010d40:	3d01      	subs	r5, #1
 8010d42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010d46:	e9c4 6700 	strd	r6, r7, [r4]
 8010d4a:	e757      	b.n	8010bfc <__kernel_rem_pio2+0x50c>
 8010d4c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010d50:	f7ef fa68 	bl	8000224 <__adddf3>
 8010d54:	f108 38ff 	add.w	r8, r8, #4294967295
 8010d58:	e758      	b.n	8010c0c <__kernel_rem_pio2+0x51c>
 8010d5a:	bf00      	nop
 8010d5c:	f3af 8000 	nop.w
	...
 8010d68:	41700000 	.word	0x41700000
 8010d6c:	3e700000 	.word	0x3e700000
 8010d70:	9b04      	ldr	r3, [sp, #16]
 8010d72:	9a04      	ldr	r2, [sp, #16]
 8010d74:	601d      	str	r5, [r3, #0]
 8010d76:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8010d7a:	605c      	str	r4, [r3, #4]
 8010d7c:	609f      	str	r7, [r3, #8]
 8010d7e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8010d82:	60d3      	str	r3, [r2, #12]
 8010d84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d88:	6110      	str	r0, [r2, #16]
 8010d8a:	6153      	str	r3, [r2, #20]
 8010d8c:	e71d      	b.n	8010bca <__kernel_rem_pio2+0x4da>
 8010d8e:	bf00      	nop

08010d90 <__kernel_rem_pio2f>:
 8010d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d94:	ed2d 8b04 	vpush	{d8-d9}
 8010d98:	b0d9      	sub	sp, #356	@ 0x164
 8010d9a:	4690      	mov	r8, r2
 8010d9c:	9001      	str	r0, [sp, #4]
 8010d9e:	4ab6      	ldr	r2, [pc, #728]	@ (8011078 <__kernel_rem_pio2f+0x2e8>)
 8010da0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8010da2:	f118 0f04 	cmn.w	r8, #4
 8010da6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8010daa:	460f      	mov	r7, r1
 8010dac:	f103 3bff 	add.w	fp, r3, #4294967295
 8010db0:	db26      	blt.n	8010e00 <__kernel_rem_pio2f+0x70>
 8010db2:	f1b8 0203 	subs.w	r2, r8, #3
 8010db6:	bf48      	it	mi
 8010db8:	f108 0204 	addmi.w	r2, r8, #4
 8010dbc:	10d2      	asrs	r2, r2, #3
 8010dbe:	1c55      	adds	r5, r2, #1
 8010dc0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010dc2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8011088 <__kernel_rem_pio2f+0x2f8>
 8010dc6:	00e8      	lsls	r0, r5, #3
 8010dc8:	eba2 060b 	sub.w	r6, r2, fp
 8010dcc:	9002      	str	r0, [sp, #8]
 8010dce:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8010dd2:	eb0a 0c0b 	add.w	ip, sl, fp
 8010dd6:	ac1c      	add	r4, sp, #112	@ 0x70
 8010dd8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8010ddc:	2000      	movs	r0, #0
 8010dde:	4560      	cmp	r0, ip
 8010de0:	dd10      	ble.n	8010e04 <__kernel_rem_pio2f+0x74>
 8010de2:	a91c      	add	r1, sp, #112	@ 0x70
 8010de4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8010de8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8010dec:	2600      	movs	r6, #0
 8010dee:	4556      	cmp	r6, sl
 8010df0:	dc24      	bgt.n	8010e3c <__kernel_rem_pio2f+0xac>
 8010df2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010df6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8011088 <__kernel_rem_pio2f+0x2f8>
 8010dfa:	4684      	mov	ip, r0
 8010dfc:	2400      	movs	r4, #0
 8010dfe:	e016      	b.n	8010e2e <__kernel_rem_pio2f+0x9e>
 8010e00:	2200      	movs	r2, #0
 8010e02:	e7dc      	b.n	8010dbe <__kernel_rem_pio2f+0x2e>
 8010e04:	42c6      	cmn	r6, r0
 8010e06:	bf5d      	ittte	pl
 8010e08:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8010e0c:	ee07 1a90 	vmovpl	s15, r1
 8010e10:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8010e14:	eef0 7a47 	vmovmi.f32	s15, s14
 8010e18:	ece4 7a01 	vstmia	r4!, {s15}
 8010e1c:	3001      	adds	r0, #1
 8010e1e:	e7de      	b.n	8010dde <__kernel_rem_pio2f+0x4e>
 8010e20:	ecfe 6a01 	vldmia	lr!, {s13}
 8010e24:	ed3c 7a01 	vldmdb	ip!, {s14}
 8010e28:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010e2c:	3401      	adds	r4, #1
 8010e2e:	455c      	cmp	r4, fp
 8010e30:	ddf6      	ble.n	8010e20 <__kernel_rem_pio2f+0x90>
 8010e32:	ece9 7a01 	vstmia	r9!, {s15}
 8010e36:	3601      	adds	r6, #1
 8010e38:	3004      	adds	r0, #4
 8010e3a:	e7d8      	b.n	8010dee <__kernel_rem_pio2f+0x5e>
 8010e3c:	a908      	add	r1, sp, #32
 8010e3e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010e42:	9104      	str	r1, [sp, #16]
 8010e44:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010e46:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8011084 <__kernel_rem_pio2f+0x2f4>
 8010e4a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8011080 <__kernel_rem_pio2f+0x2f0>
 8010e4e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010e52:	9203      	str	r2, [sp, #12]
 8010e54:	4654      	mov	r4, sl
 8010e56:	00a2      	lsls	r2, r4, #2
 8010e58:	9205      	str	r2, [sp, #20]
 8010e5a:	aa58      	add	r2, sp, #352	@ 0x160
 8010e5c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010e60:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8010e64:	a944      	add	r1, sp, #272	@ 0x110
 8010e66:	aa08      	add	r2, sp, #32
 8010e68:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8010e6c:	4694      	mov	ip, r2
 8010e6e:	4626      	mov	r6, r4
 8010e70:	2e00      	cmp	r6, #0
 8010e72:	dc4c      	bgt.n	8010f0e <__kernel_rem_pio2f+0x17e>
 8010e74:	4628      	mov	r0, r5
 8010e76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010e7a:	f7ff fbd3 	bl	8010624 <scalbnf>
 8010e7e:	eeb0 8a40 	vmov.f32	s16, s0
 8010e82:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8010e86:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010e8a:	f000 fa65 	bl	8011358 <floorf>
 8010e8e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8010e92:	eea0 8a67 	vfms.f32	s16, s0, s15
 8010e96:	2d00      	cmp	r5, #0
 8010e98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010e9c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010ea0:	ee17 9a90 	vmov	r9, s15
 8010ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ea8:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010eac:	dd41      	ble.n	8010f32 <__kernel_rem_pio2f+0x1a2>
 8010eae:	f104 3cff 	add.w	ip, r4, #4294967295
 8010eb2:	a908      	add	r1, sp, #32
 8010eb4:	f1c5 0e08 	rsb	lr, r5, #8
 8010eb8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8010ebc:	fa46 f00e 	asr.w	r0, r6, lr
 8010ec0:	4481      	add	r9, r0
 8010ec2:	fa00 f00e 	lsl.w	r0, r0, lr
 8010ec6:	1a36      	subs	r6, r6, r0
 8010ec8:	f1c5 0007 	rsb	r0, r5, #7
 8010ecc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8010ed0:	4106      	asrs	r6, r0
 8010ed2:	2e00      	cmp	r6, #0
 8010ed4:	dd3c      	ble.n	8010f50 <__kernel_rem_pio2f+0x1c0>
 8010ed6:	f04f 0e00 	mov.w	lr, #0
 8010eda:	f109 0901 	add.w	r9, r9, #1
 8010ede:	4670      	mov	r0, lr
 8010ee0:	4574      	cmp	r4, lr
 8010ee2:	dc68      	bgt.n	8010fb6 <__kernel_rem_pio2f+0x226>
 8010ee4:	2d00      	cmp	r5, #0
 8010ee6:	dd03      	ble.n	8010ef0 <__kernel_rem_pio2f+0x160>
 8010ee8:	2d01      	cmp	r5, #1
 8010eea:	d074      	beq.n	8010fd6 <__kernel_rem_pio2f+0x246>
 8010eec:	2d02      	cmp	r5, #2
 8010eee:	d07d      	beq.n	8010fec <__kernel_rem_pio2f+0x25c>
 8010ef0:	2e02      	cmp	r6, #2
 8010ef2:	d12d      	bne.n	8010f50 <__kernel_rem_pio2f+0x1c0>
 8010ef4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010ef8:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010efc:	b340      	cbz	r0, 8010f50 <__kernel_rem_pio2f+0x1c0>
 8010efe:	4628      	mov	r0, r5
 8010f00:	9306      	str	r3, [sp, #24]
 8010f02:	f7ff fb8f 	bl	8010624 <scalbnf>
 8010f06:	9b06      	ldr	r3, [sp, #24]
 8010f08:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010f0c:	e020      	b.n	8010f50 <__kernel_rem_pio2f+0x1c0>
 8010f0e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8010f12:	3e01      	subs	r6, #1
 8010f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f1c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010f20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010f24:	ecac 0a01 	vstmia	ip!, {s0}
 8010f28:	ed30 0a01 	vldmdb	r0!, {s0}
 8010f2c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010f30:	e79e      	b.n	8010e70 <__kernel_rem_pio2f+0xe0>
 8010f32:	d105      	bne.n	8010f40 <__kernel_rem_pio2f+0x1b0>
 8010f34:	1e60      	subs	r0, r4, #1
 8010f36:	a908      	add	r1, sp, #32
 8010f38:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8010f3c:	11f6      	asrs	r6, r6, #7
 8010f3e:	e7c8      	b.n	8010ed2 <__kernel_rem_pio2f+0x142>
 8010f40:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010f44:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f4c:	da31      	bge.n	8010fb2 <__kernel_rem_pio2f+0x222>
 8010f4e:	2600      	movs	r6, #0
 8010f50:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f58:	f040 8098 	bne.w	801108c <__kernel_rem_pio2f+0x2fc>
 8010f5c:	1e60      	subs	r0, r4, #1
 8010f5e:	2200      	movs	r2, #0
 8010f60:	4550      	cmp	r0, sl
 8010f62:	da4b      	bge.n	8010ffc <__kernel_rem_pio2f+0x26c>
 8010f64:	2a00      	cmp	r2, #0
 8010f66:	d065      	beq.n	8011034 <__kernel_rem_pio2f+0x2a4>
 8010f68:	3c01      	subs	r4, #1
 8010f6a:	ab08      	add	r3, sp, #32
 8010f6c:	3d08      	subs	r5, #8
 8010f6e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d0f8      	beq.n	8010f68 <__kernel_rem_pio2f+0x1d8>
 8010f76:	4628      	mov	r0, r5
 8010f78:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010f7c:	f7ff fb52 	bl	8010624 <scalbnf>
 8010f80:	1c63      	adds	r3, r4, #1
 8010f82:	aa44      	add	r2, sp, #272	@ 0x110
 8010f84:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8011084 <__kernel_rem_pio2f+0x2f4>
 8010f88:	0099      	lsls	r1, r3, #2
 8010f8a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010f8e:	4623      	mov	r3, r4
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	f280 80a9 	bge.w	80110e8 <__kernel_rem_pio2f+0x358>
 8010f96:	4623      	mov	r3, r4
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	f2c0 80c7 	blt.w	801112c <__kernel_rem_pio2f+0x39c>
 8010f9e:	aa44      	add	r2, sp, #272	@ 0x110
 8010fa0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8010fa4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801107c <__kernel_rem_pio2f+0x2ec>
 8010fa8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8011088 <__kernel_rem_pio2f+0x2f8>
 8010fac:	2000      	movs	r0, #0
 8010fae:	1ae2      	subs	r2, r4, r3
 8010fb0:	e0b1      	b.n	8011116 <__kernel_rem_pio2f+0x386>
 8010fb2:	2602      	movs	r6, #2
 8010fb4:	e78f      	b.n	8010ed6 <__kernel_rem_pio2f+0x146>
 8010fb6:	f852 1b04 	ldr.w	r1, [r2], #4
 8010fba:	b948      	cbnz	r0, 8010fd0 <__kernel_rem_pio2f+0x240>
 8010fbc:	b121      	cbz	r1, 8010fc8 <__kernel_rem_pio2f+0x238>
 8010fbe:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8010fc2:	f842 1c04 	str.w	r1, [r2, #-4]
 8010fc6:	2101      	movs	r1, #1
 8010fc8:	f10e 0e01 	add.w	lr, lr, #1
 8010fcc:	4608      	mov	r0, r1
 8010fce:	e787      	b.n	8010ee0 <__kernel_rem_pio2f+0x150>
 8010fd0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8010fd4:	e7f5      	b.n	8010fc2 <__kernel_rem_pio2f+0x232>
 8010fd6:	f104 3cff 	add.w	ip, r4, #4294967295
 8010fda:	aa08      	add	r2, sp, #32
 8010fdc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010fe0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010fe4:	a908      	add	r1, sp, #32
 8010fe6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8010fea:	e781      	b.n	8010ef0 <__kernel_rem_pio2f+0x160>
 8010fec:	f104 3cff 	add.w	ip, r4, #4294967295
 8010ff0:	aa08      	add	r2, sp, #32
 8010ff2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010ff6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010ffa:	e7f3      	b.n	8010fe4 <__kernel_rem_pio2f+0x254>
 8010ffc:	a908      	add	r1, sp, #32
 8010ffe:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8011002:	3801      	subs	r0, #1
 8011004:	430a      	orrs	r2, r1
 8011006:	e7ab      	b.n	8010f60 <__kernel_rem_pio2f+0x1d0>
 8011008:	3201      	adds	r2, #1
 801100a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801100e:	2e00      	cmp	r6, #0
 8011010:	d0fa      	beq.n	8011008 <__kernel_rem_pio2f+0x278>
 8011012:	9905      	ldr	r1, [sp, #20]
 8011014:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8011018:	eb0d 0001 	add.w	r0, sp, r1
 801101c:	18e6      	adds	r6, r4, r3
 801101e:	a91c      	add	r1, sp, #112	@ 0x70
 8011020:	f104 0c01 	add.w	ip, r4, #1
 8011024:	384c      	subs	r0, #76	@ 0x4c
 8011026:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801102a:	4422      	add	r2, r4
 801102c:	4562      	cmp	r2, ip
 801102e:	da04      	bge.n	801103a <__kernel_rem_pio2f+0x2aa>
 8011030:	4614      	mov	r4, r2
 8011032:	e710      	b.n	8010e56 <__kernel_rem_pio2f+0xc6>
 8011034:	9804      	ldr	r0, [sp, #16]
 8011036:	2201      	movs	r2, #1
 8011038:	e7e7      	b.n	801100a <__kernel_rem_pio2f+0x27a>
 801103a:	9903      	ldr	r1, [sp, #12]
 801103c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011040:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8011044:	9105      	str	r1, [sp, #20]
 8011046:	ee07 1a90 	vmov	s15, r1
 801104a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801104e:	2400      	movs	r4, #0
 8011050:	ece6 7a01 	vstmia	r6!, {s15}
 8011054:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8011088 <__kernel_rem_pio2f+0x2f8>
 8011058:	46b1      	mov	r9, r6
 801105a:	455c      	cmp	r4, fp
 801105c:	dd04      	ble.n	8011068 <__kernel_rem_pio2f+0x2d8>
 801105e:	ece0 7a01 	vstmia	r0!, {s15}
 8011062:	f10c 0c01 	add.w	ip, ip, #1
 8011066:	e7e1      	b.n	801102c <__kernel_rem_pio2f+0x29c>
 8011068:	ecfe 6a01 	vldmia	lr!, {s13}
 801106c:	ed39 7a01 	vldmdb	r9!, {s14}
 8011070:	3401      	adds	r4, #1
 8011072:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011076:	e7f0      	b.n	801105a <__kernel_rem_pio2f+0x2ca>
 8011078:	08011a4c 	.word	0x08011a4c
 801107c:	08011a20 	.word	0x08011a20
 8011080:	43800000 	.word	0x43800000
 8011084:	3b800000 	.word	0x3b800000
 8011088:	00000000 	.word	0x00000000
 801108c:	9b02      	ldr	r3, [sp, #8]
 801108e:	eeb0 0a48 	vmov.f32	s0, s16
 8011092:	eba3 0008 	sub.w	r0, r3, r8
 8011096:	f7ff fac5 	bl	8010624 <scalbnf>
 801109a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8011080 <__kernel_rem_pio2f+0x2f0>
 801109e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80110a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110a6:	db19      	blt.n	80110dc <__kernel_rem_pio2f+0x34c>
 80110a8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8011084 <__kernel_rem_pio2f+0x2f4>
 80110ac:	ee60 7a27 	vmul.f32	s15, s0, s15
 80110b0:	aa08      	add	r2, sp, #32
 80110b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110b6:	3508      	adds	r5, #8
 80110b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110bc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80110c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80110c8:	ee10 3a10 	vmov	r3, s0
 80110cc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80110d0:	ee17 3a90 	vmov	r3, s15
 80110d4:	3401      	adds	r4, #1
 80110d6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80110da:	e74c      	b.n	8010f76 <__kernel_rem_pio2f+0x1e6>
 80110dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80110e0:	aa08      	add	r2, sp, #32
 80110e2:	ee10 3a10 	vmov	r3, s0
 80110e6:	e7f6      	b.n	80110d6 <__kernel_rem_pio2f+0x346>
 80110e8:	a808      	add	r0, sp, #32
 80110ea:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80110ee:	9001      	str	r0, [sp, #4]
 80110f0:	ee07 0a90 	vmov	s15, r0
 80110f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110f8:	3b01      	subs	r3, #1
 80110fa:	ee67 7a80 	vmul.f32	s15, s15, s0
 80110fe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011102:	ed62 7a01 	vstmdb	r2!, {s15}
 8011106:	e743      	b.n	8010f90 <__kernel_rem_pio2f+0x200>
 8011108:	ecfc 6a01 	vldmia	ip!, {s13}
 801110c:	ecb5 7a01 	vldmia	r5!, {s14}
 8011110:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011114:	3001      	adds	r0, #1
 8011116:	4550      	cmp	r0, sl
 8011118:	dc01      	bgt.n	801111e <__kernel_rem_pio2f+0x38e>
 801111a:	4290      	cmp	r0, r2
 801111c:	ddf4      	ble.n	8011108 <__kernel_rem_pio2f+0x378>
 801111e:	a858      	add	r0, sp, #352	@ 0x160
 8011120:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011124:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8011128:	3b01      	subs	r3, #1
 801112a:	e735      	b.n	8010f98 <__kernel_rem_pio2f+0x208>
 801112c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801112e:	2b02      	cmp	r3, #2
 8011130:	dc09      	bgt.n	8011146 <__kernel_rem_pio2f+0x3b6>
 8011132:	2b00      	cmp	r3, #0
 8011134:	dc27      	bgt.n	8011186 <__kernel_rem_pio2f+0x3f6>
 8011136:	d040      	beq.n	80111ba <__kernel_rem_pio2f+0x42a>
 8011138:	f009 0007 	and.w	r0, r9, #7
 801113c:	b059      	add	sp, #356	@ 0x164
 801113e:	ecbd 8b04 	vpop	{d8-d9}
 8011142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011146:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8011148:	2b03      	cmp	r3, #3
 801114a:	d1f5      	bne.n	8011138 <__kernel_rem_pio2f+0x3a8>
 801114c:	aa30      	add	r2, sp, #192	@ 0xc0
 801114e:	1f0b      	subs	r3, r1, #4
 8011150:	4413      	add	r3, r2
 8011152:	461a      	mov	r2, r3
 8011154:	4620      	mov	r0, r4
 8011156:	2800      	cmp	r0, #0
 8011158:	dc50      	bgt.n	80111fc <__kernel_rem_pio2f+0x46c>
 801115a:	4622      	mov	r2, r4
 801115c:	2a01      	cmp	r2, #1
 801115e:	dc5d      	bgt.n	801121c <__kernel_rem_pio2f+0x48c>
 8011160:	ab30      	add	r3, sp, #192	@ 0xc0
 8011162:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8011088 <__kernel_rem_pio2f+0x2f8>
 8011166:	440b      	add	r3, r1
 8011168:	2c01      	cmp	r4, #1
 801116a:	dc67      	bgt.n	801123c <__kernel_rem_pio2f+0x4ac>
 801116c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8011170:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8011174:	2e00      	cmp	r6, #0
 8011176:	d167      	bne.n	8011248 <__kernel_rem_pio2f+0x4b8>
 8011178:	edc7 6a00 	vstr	s13, [r7]
 801117c:	ed87 7a01 	vstr	s14, [r7, #4]
 8011180:	edc7 7a02 	vstr	s15, [r7, #8]
 8011184:	e7d8      	b.n	8011138 <__kernel_rem_pio2f+0x3a8>
 8011186:	ab30      	add	r3, sp, #192	@ 0xc0
 8011188:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8011088 <__kernel_rem_pio2f+0x2f8>
 801118c:	440b      	add	r3, r1
 801118e:	4622      	mov	r2, r4
 8011190:	2a00      	cmp	r2, #0
 8011192:	da24      	bge.n	80111de <__kernel_rem_pio2f+0x44e>
 8011194:	b34e      	cbz	r6, 80111ea <__kernel_rem_pio2f+0x45a>
 8011196:	eef1 7a47 	vneg.f32	s15, s14
 801119a:	edc7 7a00 	vstr	s15, [r7]
 801119e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80111a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80111a6:	aa31      	add	r2, sp, #196	@ 0xc4
 80111a8:	2301      	movs	r3, #1
 80111aa:	429c      	cmp	r4, r3
 80111ac:	da20      	bge.n	80111f0 <__kernel_rem_pio2f+0x460>
 80111ae:	b10e      	cbz	r6, 80111b4 <__kernel_rem_pio2f+0x424>
 80111b0:	eef1 7a67 	vneg.f32	s15, s15
 80111b4:	edc7 7a01 	vstr	s15, [r7, #4]
 80111b8:	e7be      	b.n	8011138 <__kernel_rem_pio2f+0x3a8>
 80111ba:	ab30      	add	r3, sp, #192	@ 0xc0
 80111bc:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8011088 <__kernel_rem_pio2f+0x2f8>
 80111c0:	440b      	add	r3, r1
 80111c2:	2c00      	cmp	r4, #0
 80111c4:	da05      	bge.n	80111d2 <__kernel_rem_pio2f+0x442>
 80111c6:	b10e      	cbz	r6, 80111cc <__kernel_rem_pio2f+0x43c>
 80111c8:	eef1 7a67 	vneg.f32	s15, s15
 80111cc:	edc7 7a00 	vstr	s15, [r7]
 80111d0:	e7b2      	b.n	8011138 <__kernel_rem_pio2f+0x3a8>
 80111d2:	ed33 7a01 	vldmdb	r3!, {s14}
 80111d6:	3c01      	subs	r4, #1
 80111d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80111dc:	e7f1      	b.n	80111c2 <__kernel_rem_pio2f+0x432>
 80111de:	ed73 7a01 	vldmdb	r3!, {s15}
 80111e2:	3a01      	subs	r2, #1
 80111e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80111e8:	e7d2      	b.n	8011190 <__kernel_rem_pio2f+0x400>
 80111ea:	eef0 7a47 	vmov.f32	s15, s14
 80111ee:	e7d4      	b.n	801119a <__kernel_rem_pio2f+0x40a>
 80111f0:	ecb2 7a01 	vldmia	r2!, {s14}
 80111f4:	3301      	adds	r3, #1
 80111f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80111fa:	e7d6      	b.n	80111aa <__kernel_rem_pio2f+0x41a>
 80111fc:	ed72 7a01 	vldmdb	r2!, {s15}
 8011200:	edd2 6a01 	vldr	s13, [r2, #4]
 8011204:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011208:	3801      	subs	r0, #1
 801120a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801120e:	ed82 7a00 	vstr	s14, [r2]
 8011212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011216:	edc2 7a01 	vstr	s15, [r2, #4]
 801121a:	e79c      	b.n	8011156 <__kernel_rem_pio2f+0x3c6>
 801121c:	ed73 7a01 	vldmdb	r3!, {s15}
 8011220:	edd3 6a01 	vldr	s13, [r3, #4]
 8011224:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011228:	3a01      	subs	r2, #1
 801122a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801122e:	ed83 7a00 	vstr	s14, [r3]
 8011232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011236:	edc3 7a01 	vstr	s15, [r3, #4]
 801123a:	e78f      	b.n	801115c <__kernel_rem_pio2f+0x3cc>
 801123c:	ed33 7a01 	vldmdb	r3!, {s14}
 8011240:	3c01      	subs	r4, #1
 8011242:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011246:	e78f      	b.n	8011168 <__kernel_rem_pio2f+0x3d8>
 8011248:	eef1 6a66 	vneg.f32	s13, s13
 801124c:	eeb1 7a47 	vneg.f32	s14, s14
 8011250:	edc7 6a00 	vstr	s13, [r7]
 8011254:	ed87 7a01 	vstr	s14, [r7, #4]
 8011258:	eef1 7a67 	vneg.f32	s15, s15
 801125c:	e790      	b.n	8011180 <__kernel_rem_pio2f+0x3f0>
 801125e:	bf00      	nop

08011260 <floor>:
 8011260:	ec51 0b10 	vmov	r0, r1, d0
 8011264:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801126c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8011270:	2e13      	cmp	r6, #19
 8011272:	460c      	mov	r4, r1
 8011274:	4605      	mov	r5, r0
 8011276:	4680      	mov	r8, r0
 8011278:	dc34      	bgt.n	80112e4 <floor+0x84>
 801127a:	2e00      	cmp	r6, #0
 801127c:	da17      	bge.n	80112ae <floor+0x4e>
 801127e:	a332      	add	r3, pc, #200	@ (adr r3, 8011348 <floor+0xe8>)
 8011280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011284:	f7ee ffce 	bl	8000224 <__adddf3>
 8011288:	2200      	movs	r2, #0
 801128a:	2300      	movs	r3, #0
 801128c:	f7ef fc10 	bl	8000ab0 <__aeabi_dcmpgt>
 8011290:	b150      	cbz	r0, 80112a8 <floor+0x48>
 8011292:	2c00      	cmp	r4, #0
 8011294:	da55      	bge.n	8011342 <floor+0xe2>
 8011296:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801129a:	432c      	orrs	r4, r5
 801129c:	2500      	movs	r5, #0
 801129e:	42ac      	cmp	r4, r5
 80112a0:	4c2b      	ldr	r4, [pc, #172]	@ (8011350 <floor+0xf0>)
 80112a2:	bf08      	it	eq
 80112a4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80112a8:	4621      	mov	r1, r4
 80112aa:	4628      	mov	r0, r5
 80112ac:	e023      	b.n	80112f6 <floor+0x96>
 80112ae:	4f29      	ldr	r7, [pc, #164]	@ (8011354 <floor+0xf4>)
 80112b0:	4137      	asrs	r7, r6
 80112b2:	ea01 0307 	and.w	r3, r1, r7
 80112b6:	4303      	orrs	r3, r0
 80112b8:	d01d      	beq.n	80112f6 <floor+0x96>
 80112ba:	a323      	add	r3, pc, #140	@ (adr r3, 8011348 <floor+0xe8>)
 80112bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c0:	f7ee ffb0 	bl	8000224 <__adddf3>
 80112c4:	2200      	movs	r2, #0
 80112c6:	2300      	movs	r3, #0
 80112c8:	f7ef fbf2 	bl	8000ab0 <__aeabi_dcmpgt>
 80112cc:	2800      	cmp	r0, #0
 80112ce:	d0eb      	beq.n	80112a8 <floor+0x48>
 80112d0:	2c00      	cmp	r4, #0
 80112d2:	bfbe      	ittt	lt
 80112d4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80112d8:	4133      	asrlt	r3, r6
 80112da:	18e4      	addlt	r4, r4, r3
 80112dc:	ea24 0407 	bic.w	r4, r4, r7
 80112e0:	2500      	movs	r5, #0
 80112e2:	e7e1      	b.n	80112a8 <floor+0x48>
 80112e4:	2e33      	cmp	r6, #51	@ 0x33
 80112e6:	dd0a      	ble.n	80112fe <floor+0x9e>
 80112e8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80112ec:	d103      	bne.n	80112f6 <floor+0x96>
 80112ee:	4602      	mov	r2, r0
 80112f0:	460b      	mov	r3, r1
 80112f2:	f7ee ff97 	bl	8000224 <__adddf3>
 80112f6:	ec41 0b10 	vmov	d0, r0, r1
 80112fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112fe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8011302:	f04f 37ff 	mov.w	r7, #4294967295
 8011306:	40df      	lsrs	r7, r3
 8011308:	4207      	tst	r7, r0
 801130a:	d0f4      	beq.n	80112f6 <floor+0x96>
 801130c:	a30e      	add	r3, pc, #56	@ (adr r3, 8011348 <floor+0xe8>)
 801130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011312:	f7ee ff87 	bl	8000224 <__adddf3>
 8011316:	2200      	movs	r2, #0
 8011318:	2300      	movs	r3, #0
 801131a:	f7ef fbc9 	bl	8000ab0 <__aeabi_dcmpgt>
 801131e:	2800      	cmp	r0, #0
 8011320:	d0c2      	beq.n	80112a8 <floor+0x48>
 8011322:	2c00      	cmp	r4, #0
 8011324:	da0a      	bge.n	801133c <floor+0xdc>
 8011326:	2e14      	cmp	r6, #20
 8011328:	d101      	bne.n	801132e <floor+0xce>
 801132a:	3401      	adds	r4, #1
 801132c:	e006      	b.n	801133c <floor+0xdc>
 801132e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8011332:	2301      	movs	r3, #1
 8011334:	40b3      	lsls	r3, r6
 8011336:	441d      	add	r5, r3
 8011338:	4545      	cmp	r5, r8
 801133a:	d3f6      	bcc.n	801132a <floor+0xca>
 801133c:	ea25 0507 	bic.w	r5, r5, r7
 8011340:	e7b2      	b.n	80112a8 <floor+0x48>
 8011342:	2500      	movs	r5, #0
 8011344:	462c      	mov	r4, r5
 8011346:	e7af      	b.n	80112a8 <floor+0x48>
 8011348:	8800759c 	.word	0x8800759c
 801134c:	7e37e43c 	.word	0x7e37e43c
 8011350:	bff00000 	.word	0xbff00000
 8011354:	000fffff 	.word	0x000fffff

08011358 <floorf>:
 8011358:	ee10 3a10 	vmov	r3, s0
 801135c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011360:	3a7f      	subs	r2, #127	@ 0x7f
 8011362:	2a16      	cmp	r2, #22
 8011364:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011368:	dc2b      	bgt.n	80113c2 <floorf+0x6a>
 801136a:	2a00      	cmp	r2, #0
 801136c:	da12      	bge.n	8011394 <floorf+0x3c>
 801136e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80113d4 <floorf+0x7c>
 8011372:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011376:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801137a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801137e:	dd06      	ble.n	801138e <floorf+0x36>
 8011380:	2b00      	cmp	r3, #0
 8011382:	da24      	bge.n	80113ce <floorf+0x76>
 8011384:	2900      	cmp	r1, #0
 8011386:	4b14      	ldr	r3, [pc, #80]	@ (80113d8 <floorf+0x80>)
 8011388:	bf08      	it	eq
 801138a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801138e:	ee00 3a10 	vmov	s0, r3
 8011392:	4770      	bx	lr
 8011394:	4911      	ldr	r1, [pc, #68]	@ (80113dc <floorf+0x84>)
 8011396:	4111      	asrs	r1, r2
 8011398:	420b      	tst	r3, r1
 801139a:	d0fa      	beq.n	8011392 <floorf+0x3a>
 801139c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80113d4 <floorf+0x7c>
 80113a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80113a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80113a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ac:	ddef      	ble.n	801138e <floorf+0x36>
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	bfbe      	ittt	lt
 80113b2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80113b6:	fa40 f202 	asrlt.w	r2, r0, r2
 80113ba:	189b      	addlt	r3, r3, r2
 80113bc:	ea23 0301 	bic.w	r3, r3, r1
 80113c0:	e7e5      	b.n	801138e <floorf+0x36>
 80113c2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80113c6:	d3e4      	bcc.n	8011392 <floorf+0x3a>
 80113c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80113cc:	4770      	bx	lr
 80113ce:	2300      	movs	r3, #0
 80113d0:	e7dd      	b.n	801138e <floorf+0x36>
 80113d2:	bf00      	nop
 80113d4:	7149f2ca 	.word	0x7149f2ca
 80113d8:	bf800000 	.word	0xbf800000
 80113dc:	007fffff 	.word	0x007fffff

080113e0 <_init>:
 80113e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113e2:	bf00      	nop
 80113e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113e6:	bc08      	pop	{r3}
 80113e8:	469e      	mov	lr, r3
 80113ea:	4770      	bx	lr

080113ec <_fini>:
 80113ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ee:	bf00      	nop
 80113f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113f2:	bc08      	pop	{r3}
 80113f4:	469e      	mov	lr, r3
 80113f6:	4770      	bx	lr
