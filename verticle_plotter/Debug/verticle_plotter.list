
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1fc  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800b3d4  0800b3d4  0000c3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b824  0800b824  0000d1b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b824  0800b824  0000c824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b82c  0800b82c  0000d1b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b82c  0800b82c  0000c82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b830  0800b830  0000c830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b4  20000000  0800b834  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b34  200001b4  0800b9e8  0000d1b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ce8  0800b9e8  0000dce8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028656  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b43  00000000  00000000  0003583a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  0003a380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000145a  00000000  00000000  0003bdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c4aa  00000000  00000000  0003d22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026765  00000000  00000000  000696d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001186f0  00000000  00000000  0008fe39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a8529  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007534  00000000  00000000  001a856c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001afaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001b4 	.word	0x200001b4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b3bc 	.word	0x0800b3bc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001b8 	.word	0x200001b8
 8000214:	0800b3bc 	.word	0x0800b3bc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b988 	b.w	8000d1c <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	468e      	mov	lr, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	4688      	mov	r8, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4617      	mov	r7, r2
 8000a38:	d962      	bls.n	8000b00 <__udivmoddi4+0xdc>
 8000a3a:	fab2 f682 	clz	r6, r2
 8000a3e:	b14e      	cbz	r6, 8000a54 <__udivmoddi4+0x30>
 8000a40:	f1c6 0320 	rsb	r3, r6, #32
 8000a44:	fa01 f806 	lsl.w	r8, r1, r6
 8000a48:	fa20 f303 	lsr.w	r3, r0, r3
 8000a4c:	40b7      	lsls	r7, r6
 8000a4e:	ea43 0808 	orr.w	r8, r3, r8
 8000a52:	40b4      	lsls	r4, r6
 8000a54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a58:	fa1f fc87 	uxth.w	ip, r7
 8000a5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a60:	0c23      	lsrs	r3, r4, #16
 8000a62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d909      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a78:	f080 80ea 	bcs.w	8000c50 <__udivmoddi4+0x22c>
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	f240 80e7 	bls.w	8000c50 <__udivmoddi4+0x22c>
 8000a82:	3902      	subs	r1, #2
 8000a84:	443b      	add	r3, r7
 8000a86:	1a9a      	subs	r2, r3, r2
 8000a88:	b2a3      	uxth	r3, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a9a:	459c      	cmp	ip, r3
 8000a9c:	d909      	bls.n	8000ab2 <__udivmoddi4+0x8e>
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa4:	f080 80d6 	bcs.w	8000c54 <__udivmoddi4+0x230>
 8000aa8:	459c      	cmp	ip, r3
 8000aaa:	f240 80d3 	bls.w	8000c54 <__udivmoddi4+0x230>
 8000aae:	443b      	add	r3, r7
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab6:	eba3 030c 	sub.w	r3, r3, ip
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11d      	cbz	r5, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40f3      	lsrs	r3, r6
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d905      	bls.n	8000ada <__udivmoddi4+0xb6>
 8000ace:	b10d      	cbz	r5, 8000ad4 <__udivmoddi4+0xb0>
 8000ad0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	e7f5      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000ada:	fab3 f183 	clz	r1, r3
 8000ade:	2900      	cmp	r1, #0
 8000ae0:	d146      	bne.n	8000b70 <__udivmoddi4+0x14c>
 8000ae2:	4573      	cmp	r3, lr
 8000ae4:	d302      	bcc.n	8000aec <__udivmoddi4+0xc8>
 8000ae6:	4282      	cmp	r2, r0
 8000ae8:	f200 8105 	bhi.w	8000cf6 <__udivmoddi4+0x2d2>
 8000aec:	1a84      	subs	r4, r0, r2
 8000aee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000af2:	2001      	movs	r0, #1
 8000af4:	4690      	mov	r8, r2
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	d0e5      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000afa:	e9c5 4800 	strd	r4, r8, [r5]
 8000afe:	e7e2      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	f000 8090 	beq.w	8000c26 <__udivmoddi4+0x202>
 8000b06:	fab2 f682 	clz	r6, r2
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	f040 80a4 	bne.w	8000c58 <__udivmoddi4+0x234>
 8000b10:	1a8a      	subs	r2, r1, r2
 8000b12:	0c03      	lsrs	r3, r0, #16
 8000b14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b18:	b280      	uxth	r0, r0
 8000b1a:	b2bc      	uxth	r4, r7
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d907      	bls.n	8000b42 <__udivmoddi4+0x11e>
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x11c>
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	f200 80e0 	bhi.w	8000d00 <__udivmoddi4+0x2dc>
 8000b40:	46c4      	mov	ip, r8
 8000b42:	1a9b      	subs	r3, r3, r2
 8000b44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b50:	fb02 f404 	mul.w	r4, r2, r4
 8000b54:	429c      	cmp	r4, r3
 8000b56:	d907      	bls.n	8000b68 <__udivmoddi4+0x144>
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x142>
 8000b60:	429c      	cmp	r4, r3
 8000b62:	f200 80ca 	bhi.w	8000cfa <__udivmoddi4+0x2d6>
 8000b66:	4602      	mov	r2, r0
 8000b68:	1b1b      	subs	r3, r3, r4
 8000b6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b6e:	e7a5      	b.n	8000abc <__udivmoddi4+0x98>
 8000b70:	f1c1 0620 	rsb	r6, r1, #32
 8000b74:	408b      	lsls	r3, r1
 8000b76:	fa22 f706 	lsr.w	r7, r2, r6
 8000b7a:	431f      	orrs	r7, r3
 8000b7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b80:	fa20 f306 	lsr.w	r3, r0, r6
 8000b84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b8c:	4323      	orrs	r3, r4
 8000b8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b92:	fa1f fc87 	uxth.w	ip, r7
 8000b96:	fbbe f0f9 	udiv	r0, lr, r9
 8000b9a:	0c1c      	lsrs	r4, r3, #16
 8000b9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ba0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ba4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bae:	d909      	bls.n	8000bc4 <__udivmoddi4+0x1a0>
 8000bb0:	193c      	adds	r4, r7, r4
 8000bb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bb6:	f080 809c 	bcs.w	8000cf2 <__udivmoddi4+0x2ce>
 8000bba:	45a6      	cmp	lr, r4
 8000bbc:	f240 8099 	bls.w	8000cf2 <__udivmoddi4+0x2ce>
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	443c      	add	r4, r7
 8000bc4:	eba4 040e 	sub.w	r4, r4, lr
 8000bc8:	fa1f fe83 	uxth.w	lr, r3
 8000bcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000bd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000bd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bdc:	45a4      	cmp	ip, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x1ce>
 8000be0:	193c      	adds	r4, r7, r4
 8000be2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000be6:	f080 8082 	bcs.w	8000cee <__udivmoddi4+0x2ca>
 8000bea:	45a4      	cmp	ip, r4
 8000bec:	d97f      	bls.n	8000cee <__udivmoddi4+0x2ca>
 8000bee:	3b02      	subs	r3, #2
 8000bf0:	443c      	add	r4, r7
 8000bf2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bf6:	eba4 040c 	sub.w	r4, r4, ip
 8000bfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bfe:	4564      	cmp	r4, ip
 8000c00:	4673      	mov	r3, lr
 8000c02:	46e1      	mov	r9, ip
 8000c04:	d362      	bcc.n	8000ccc <__udivmoddi4+0x2a8>
 8000c06:	d05f      	beq.n	8000cc8 <__udivmoddi4+0x2a4>
 8000c08:	b15d      	cbz	r5, 8000c22 <__udivmoddi4+0x1fe>
 8000c0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c12:	fa04 f606 	lsl.w	r6, r4, r6
 8000c16:	fa22 f301 	lsr.w	r3, r2, r1
 8000c1a:	431e      	orrs	r6, r3
 8000c1c:	40cc      	lsrs	r4, r1
 8000c1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c22:	2100      	movs	r1, #0
 8000c24:	e74f      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000c26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c2a:	0c01      	lsrs	r1, r0, #16
 8000c2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c30:	b280      	uxth	r0, r0
 8000c32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c36:	463b      	mov	r3, r7
 8000c38:	4638      	mov	r0, r7
 8000c3a:	463c      	mov	r4, r7
 8000c3c:	46b8      	mov	r8, r7
 8000c3e:	46be      	mov	lr, r7
 8000c40:	2620      	movs	r6, #32
 8000c42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c46:	eba2 0208 	sub.w	r2, r2, r8
 8000c4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c4e:	e766      	b.n	8000b1e <__udivmoddi4+0xfa>
 8000c50:	4601      	mov	r1, r0
 8000c52:	e718      	b.n	8000a86 <__udivmoddi4+0x62>
 8000c54:	4610      	mov	r0, r2
 8000c56:	e72c      	b.n	8000ab2 <__udivmoddi4+0x8e>
 8000c58:	f1c6 0220 	rsb	r2, r6, #32
 8000c5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c60:	40b7      	lsls	r7, r6
 8000c62:	40b1      	lsls	r1, r6
 8000c64:	fa20 f202 	lsr.w	r2, r0, r2
 8000c68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c72:	b2bc      	uxth	r4, r7
 8000c74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c78:	0c11      	lsrs	r1, r2, #16
 8000c7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7e:	fb08 f904 	mul.w	r9, r8, r4
 8000c82:	40b0      	lsls	r0, r6
 8000c84:	4589      	cmp	r9, r1
 8000c86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c8a:	b280      	uxth	r0, r0
 8000c8c:	d93e      	bls.n	8000d0c <__udivmoddi4+0x2e8>
 8000c8e:	1879      	adds	r1, r7, r1
 8000c90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c94:	d201      	bcs.n	8000c9a <__udivmoddi4+0x276>
 8000c96:	4589      	cmp	r9, r1
 8000c98:	d81f      	bhi.n	8000cda <__udivmoddi4+0x2b6>
 8000c9a:	eba1 0109 	sub.w	r1, r1, r9
 8000c9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ca2:	fb09 f804 	mul.w	r8, r9, r4
 8000ca6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000caa:	b292      	uxth	r2, r2
 8000cac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cb0:	4542      	cmp	r2, r8
 8000cb2:	d229      	bcs.n	8000d08 <__udivmoddi4+0x2e4>
 8000cb4:	18ba      	adds	r2, r7, r2
 8000cb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cba:	d2c4      	bcs.n	8000c46 <__udivmoddi4+0x222>
 8000cbc:	4542      	cmp	r2, r8
 8000cbe:	d2c2      	bcs.n	8000c46 <__udivmoddi4+0x222>
 8000cc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000cc4:	443a      	add	r2, r7
 8000cc6:	e7be      	b.n	8000c46 <__udivmoddi4+0x222>
 8000cc8:	45f0      	cmp	r8, lr
 8000cca:	d29d      	bcs.n	8000c08 <__udivmoddi4+0x1e4>
 8000ccc:	ebbe 0302 	subs.w	r3, lr, r2
 8000cd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	46e1      	mov	r9, ip
 8000cd8:	e796      	b.n	8000c08 <__udivmoddi4+0x1e4>
 8000cda:	eba7 0909 	sub.w	r9, r7, r9
 8000cde:	4449      	add	r1, r9
 8000ce0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ce4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ce8:	fb09 f804 	mul.w	r8, r9, r4
 8000cec:	e7db      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cee:	4673      	mov	r3, lr
 8000cf0:	e77f      	b.n	8000bf2 <__udivmoddi4+0x1ce>
 8000cf2:	4650      	mov	r0, sl
 8000cf4:	e766      	b.n	8000bc4 <__udivmoddi4+0x1a0>
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	e6fd      	b.n	8000af6 <__udivmoddi4+0xd2>
 8000cfa:	443b      	add	r3, r7
 8000cfc:	3a02      	subs	r2, #2
 8000cfe:	e733      	b.n	8000b68 <__udivmoddi4+0x144>
 8000d00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d04:	443b      	add	r3, r7
 8000d06:	e71c      	b.n	8000b42 <__udivmoddi4+0x11e>
 8000d08:	4649      	mov	r1, r9
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x222>
 8000d0c:	eba1 0109 	sub.w	r1, r1, r9
 8000d10:	46c4      	mov	ip, r8
 8000d12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d16:	fb09 f804 	mul.w	r8, r9, r4
 8000d1a:	e7c4      	b.n	8000ca6 <__udivmoddi4+0x282>

08000d1c <__aeabi_idiv0>:
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	@ 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6178      	str	r0, [r7, #20]
 8000d28:	6139      	str	r1, [r7, #16]
 8000d2a:	60fa      	str	r2, [r7, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	68ba      	ldr	r2, [r7, #8]
 8000d46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000d4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	e008      	b.n	8000d74 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	4413      	add	r3, r2
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3301      	adds	r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
 8000d74:	69fa      	ldr	r2, [r7, #28]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d3f2      	bcc.n	8000d62 <ADC_DMA_Init+0x42>
    }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3724      	adds	r7, #36	@ 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	217f      	movs	r1, #127	@ 0x7f
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f003 fcfb 	bl	8004794 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6818      	ldr	r0, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6859      	ldr	r1, [r3, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	461a      	mov	r2, r3
 8000dac:	f002 fde4 	bl	8003978 <HAL_ADC_Start_DMA>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <PID_CONTROLLER_Init>:
  if (_u > _upper_limit) return _upper_limit;
  else if (_u < _lower_limit) return _lower_limit;
  return (int32_t)_u;
}

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6178      	str	r0, [r7, #20]
 8000dc0:	ed87 0a04 	vstr	s0, [r7, #16]
 8000dc4:	edc7 0a03 	vstr	s1, [r7, #12]
 8000dc8:	ed87 1a02 	vstr	s2, [r7, #8]
 8000dcc:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f04f 0200 	mov.w	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f04f 0200 	mov.w	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]

}
 8000e00:	bf00      	nop
 8000e02:	371c      	adds	r7, #28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	88fa      	ldrh	r2, [r7, #6]
 8000e26:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3328      	adds	r3, #40	@ 0x28
 8000e2c:	88fa      	ldrh	r2, [r7, #6]
 8000e2e:	68b9      	ldr	r1, [r7, #8]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 faf1 	bl	8001418 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	8b3a      	ldrh	r2, [r7, #24]
 8000e40:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2201      	movs	r2, #1
 8000e48:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e60:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d15f      	bne.n	8000f2e <MDXX_set_range+0xda>
		if (duty == 0) {
 8000e6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7a:	d115      	bne.n	8000ea8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3310      	adds	r3, #16
 8000e80:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001000 <MDXX_set_range+0x1ac>
 8000e84:	ed97 0a02 	vldr	s0, [r7, #8]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fae9 	bl	8001460 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	3328      	adds	r3, #40	@ 0x28
 8000e92:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001000 <MDXX_set_range+0x1ac>
 8000e96:	ed97 0a02 	vldr	s0, [r7, #8]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fae0 	bl	8001460 <PWM_write_range>
			mdxx->cmd = 0;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 8000ea6:	e0a6      	b.n	8000ff6 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8000ea8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb4:	dd1a      	ble.n	8000eec <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	3310      	adds	r3, #16
 8000eba:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001000 <MDXX_set_range+0x1ac>
 8000ebe:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 facc 	bl	8001460 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3328      	adds	r3, #40	@ 0x28
 8000ecc:	edd7 0a01 	vldr	s1, [r7, #4]
 8000ed0:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fac3 	bl	8001460 <PWM_write_range>
			mdxx->cmd = duty;
 8000eda:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee2:	ee17 2a90 	vmov	r2, s15
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000eea:	e084      	b.n	8000ff6 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3310      	adds	r3, #16
 8000ef0:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001004 <MDXX_set_range+0x1b0>
 8000ef4:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fab1 	bl	8001460 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3328      	adds	r3, #40	@ 0x28
 8000f02:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f06:	eef0 7ae7 	vabs.f32	s15, s15
 8000f0a:	eef0 0a67 	vmov.f32	s1, s15
 8000f0e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 faa4 	bl	8001460 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8000f18:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f1c:	eef0 7ae7 	vabs.f32	s15, s15
 8000f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f24:	ee17 2a90 	vmov	r2, s15
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f2c:	e063      	b.n	8000ff6 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d15e      	bne.n	8000ff6 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8000f38:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f44:	d115      	bne.n	8000f72 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000f50:	2200      	movs	r2, #0
 8000f52:	4619      	mov	r1, r3
 8000f54:	f004 fb4c 	bl	80055f0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3328      	adds	r3, #40	@ 0x28
 8000f5c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001000 <MDXX_set_range+0x1ac>
 8000f60:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fa7b 	bl	8001460 <PWM_write_range>
			mdxx->cmd = 0;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f70:	e041      	b.n	8000ff6 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8000f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7e:	dd1a      	ble.n	8000fb6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f004 fb2f 	bl	80055f0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3328      	adds	r3, #40	@ 0x28
 8000f96:	edd7 0a01 	vldr	s1, [r7, #4]
 8000f9a:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fa5e 	bl	8001460 <PWM_write_range>
			mdxx->cmd = duty;
 8000fa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fac:	ee17 2a90 	vmov	r2, s15
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000fb4:	e01f      	b.n	8000ff6 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f004 fb14 	bl	80055f0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3328      	adds	r3, #40	@ 0x28
 8000fcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd0:	eef0 7ae7 	vabs.f32	s15, s15
 8000fd4:	eef0 0a67 	vmov.f32	s1, s15
 8000fd8:	ed97 0a02 	vldr	s0, [r7, #8]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 fa3f 	bl	8001460 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8000fe2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe6:	eef0 7ae7 	vabs.f32	s15, s15
 8000fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fee:	ee17 2a90 	vmov	r2, s15
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	00000000 	.word	0x00000000
 8001004:	42c80000 	.word	0x42c80000

08001008 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, // kg
    .c = 64.83e-3,           // m
    .prismatic_pulley = 1.5915e-2 // m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	601a      	str	r2, [r3, #0]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	605a      	str	r2, [r3, #4]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	605a      	str	r2, [r3, #4]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001088:	b580      	push	{r7, lr}
 800108a:	ed2d 8b02 	vpush	{d8}
 800108e:	b08a      	sub	sp, #40	@ 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	460b      	mov	r3, r1
 8001096:	ed87 0a01 	vstr	s0, [r7, #4]
 800109a:	edc7 0a00 	vstr	s1, [r7]
 800109e:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 80010a0:	897b      	ldrh	r3, [r7, #10]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <FIR_init+0x2a>
        numTaps += 1;
 80010ac:	897b      	ldrh	r3, [r7, #10]
 80010ae:	3301      	adds	r3, #1
 80010b0:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	897a      	ldrh	r2, [r7, #10]
 80010b6:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2200      	movs	r2, #0
 80010bc:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 80010be:	897b      	ldrh	r3, [r7, #10]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f009 fb0c 	bl	800a6e0 <malloc>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 80010d0:	897b      	ldrh	r3, [r7, #10]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f009 fb03 	bl	800a6e0 <malloc>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 80e0 	beq.w	80012ac <FIR_init+0x224>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 80db 	beq.w	80012ac <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 80010f6:	2300      	movs	r3, #0
 80010f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80010fa:	e00a      	b.n	8001112 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 800110c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800110e:	3301      	adds	r3, #1
 8001110:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001112:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001114:	897b      	ldrh	r3, [r7, #10]
 8001116:	429a      	cmp	r2, r3
 8001118:	d3f0      	bcc.n	80010fc <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 800111a:	edd7 6a01 	vldr	s13, [r7, #4]
 800111e:	ed97 7a00 	vldr	s14, [r7]
 8001122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001126:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 800112a:	897b      	ldrh	r3, [r7, #10]
 800112c:	085b      	lsrs	r3, r3, #1
 800112e:	b29b      	uxth	r3, r3
 8001130:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001132:	2300      	movs	r3, #0
 8001134:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001136:	e077      	b.n	8001228 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001138:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800113c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001140:	429a      	cmp	r2, r3
 8001142:	d10c      	bne.n	800115e <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	edd7 7a06 	vldr	s15, [r7, #24]
 8001154:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001158:	edc3 7a00 	vstr	s15, [r3]
 800115c:	e02c      	b.n	80011b8 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 800115e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001160:	8afb      	ldrh	r3, [r7, #22]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	b29b      	uxth	r3, r3
 8001166:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001168:	edd7 7a06 	vldr	s15, [r7, #24]
 800116c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80012b8 <FIR_init+0x230>
 8001170:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001174:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001184:	eeb0 0a67 	vmov.f32	s0, s15
 8001188:	f009 fbe8 	bl	800a95c <sinf>
 800118c:	eef0 6a40 	vmov.f32	s13, s0
 8001190:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800119c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80012bc <FIR_init+0x234>
 80011a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b4:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	ed93 8a00 	vldr	s16, [r3]
 80011c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80012b8 <FIR_init+0x230>
 80011d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011dc:	897b      	ldrh	r3, [r7, #10]
 80011de:	3b01      	subs	r3, #1
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011ec:	eeb0 0a66 	vmov.f32	s0, s13
 80011f0:	f009 fb70 	bl	800a8d4 <cosf>
 80011f4:	eef0 7a40 	vmov.f32	s15, s0
 80011f8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80012c0 <FIR_init+0x238>
 80011fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001200:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80012c4 <FIR_init+0x23c>
 8001204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001218:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 800121c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001220:	b29b      	uxth	r3, r3
 8001222:	3301      	adds	r3, #1
 8001224:	b29b      	uxth	r3, r3
 8001226:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001228:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800122c:	897b      	ldrh	r3, [r7, #10]
 800122e:	429a      	cmp	r2, r3
 8001230:	db82      	blt.n	8001138 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001238:	2300      	movs	r3, #0
 800123a:	83fb      	strh	r3, [r7, #30]
 800123c:	e00f      	b.n	800125e <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	8bfb      	ldrh	r3, [r7, #30]
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001254:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001258:	8bfb      	ldrh	r3, [r7, #30]
 800125a:	3301      	adds	r3, #1
 800125c:	83fb      	strh	r3, [r7, #30]
 800125e:	8bfa      	ldrh	r2, [r7, #30]
 8001260:	897b      	ldrh	r3, [r7, #10]
 8001262:	429a      	cmp	r2, r3
 8001264:	d3eb      	bcc.n	800123e <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001266:	edd7 7a08 	vldr	s15, [r7, #32]
 800126a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	d01b      	beq.n	80012ac <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001274:	2300      	movs	r3, #0
 8001276:	83bb      	strh	r3, [r7, #28]
 8001278:	e014      	b.n	80012a4 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	8bbb      	ldrh	r3, [r7, #28]
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	edd3 6a00 	vldr	s13, [r3]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	8bbb      	ldrh	r3, [r7, #28]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	ed97 7a08 	vldr	s14, [r7, #32]
 8001296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800129a:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 800129e:	8bbb      	ldrh	r3, [r7, #28]
 80012a0:	3301      	adds	r3, #1
 80012a2:	83bb      	strh	r3, [r7, #28]
 80012a4:	8bba      	ldrh	r2, [r7, #28]
 80012a6:	897b      	ldrh	r3, [r7, #10]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d3e6      	bcc.n	800127a <FIR_init+0x1f2>
            }
        }
    }
}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	@ 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	ecbd 8b02 	vpop	{d8}
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40c90fdb 	.word	0x40c90fdb
 80012bc:	40490fdb 	.word	0x40490fdb
 80012c0:	3eeb851f 	.word	0x3eeb851f
 80012c4:	3f0a3d71 	.word	0x3f0a3d71

080012c8 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80012cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <modbus_1t5_Timeout+0x3c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2201      	movs	r2, #1
 80012d2:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80012d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <modbus_1t5_Timeout+0x3c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80012e0:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <modbus_1t5_Timeout+0x3c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <modbus_1t5_Timeout+0x3c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0201 	orr.w	r2, r2, #1
 80012f6:	601a      	str	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	200001d0 	.word	0x200001d0

08001308 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001310:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <modbus_3t5_Timeout+0x1c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2201      	movs	r2, #1
 8001316:	755a      	strb	r2, [r3, #21]

}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	200001d0 	.word	0x200001d0

08001328 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f008 f8f9 	bl	8009528 <HAL_UART_GetError>
 8001336:	4603      	mov	r3, r0
 8001338:	2b20      	cmp	r3, #32
 800133a:	d101      	bne.n	8001340 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 800133c:	f7ff ffc4 	bl	80012c8 <modbus_1t5_Timeout>

	}
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001356:	4a2d      	ldr	r2, [pc, #180]	@ (800140c <Modbus_init+0xc4>)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 800135c:	4b2b      	ldr	r3, [pc, #172]	@ (800140c <Modbus_init+0xc4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001364:	4b29      	ldr	r3, [pc, #164]	@ (800140c <Modbus_init+0xc4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 800136c:	4b27      	ldr	r3, [pc, #156]	@ (800140c <Modbus_init+0xc4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001374:	4b25      	ldr	r3, [pc, #148]	@ (800140c <Modbus_init+0xc4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	7e3a      	ldrb	r2, [r7, #24]
 800137a:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 800137c:	4b23      	ldr	r3, [pc, #140]	@ (800140c <Modbus_init+0xc4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	4a21      	ldr	r2, [pc, #132]	@ (8001410 <Modbus_init+0xc8>)
 800138a:	210e      	movs	r1, #14
 800138c:	4618      	mov	r0, r3
 800138e:	f006 fb79 	bl	8007a84 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2110      	movs	r1, #16
 8001398:	4618      	mov	r0, r3
 800139a:	f008 f86f 	bl	800947c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f008 f886 	bl	80094b4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	4a19      	ldr	r2, [pc, #100]	@ (8001414 <Modbus_init+0xcc>)
 80013ae:	2104      	movs	r1, #4
 80013b0:	4618      	mov	r0, r3
 80013b2:	f007 fbb7 	bl	8008b24 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <Modbus_init+0xc4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80013bc:	4b13      	ldr	r3, [pc, #76]	@ (800140c <Modbus_init+0xc4>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b12      	ldr	r3, [pc, #72]	@ (800140c <Modbus_init+0xc4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80013c8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80013cc:	4413      	add	r3, r2
 80013ce:	3302      	adds	r3, #2
 80013d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80013d4:	4619      	mov	r1, r3
 80013d6:	f007 fc5f 	bl	8008c98 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <Modbus_init+0xc4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d10c      	bne.n	8001404 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <Modbus_init+0xc4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f005 fa31 	bl	8006858 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80013f6:	4b05      	ldr	r3, [pc, #20]	@ (800140c <Modbus_init+0xc4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f005 fcf8 	bl	8006df4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200001d0 	.word	0x200001d0
 8001410:	08001309 	.word	0x08001309
 8001414:	08001329 	.word	0x08001329

08001418 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	4613      	mov	r3, r2
 8001424:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4a0b      	ldr	r2, [pc, #44]	@ (8001458 <PWM_init+0x40>)
 800142a:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	88fa      	ldrh	r2, [r7, #6]
 8001436:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 800143e:	68b8      	ldr	r0, [r7, #8]
 8001440:	f005 f99a 	bl	8006778 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	4619      	mov	r1, r3
 8001448:	68b8      	ldr	r0, [r7, #8]
 800144a:	f005 fb59 	bl	8006b00 <HAL_TIM_PWM_Start>
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	0a21fe80 	.word	0x0a21fe80
 800145c:	00000000 	.word	0x00000000

08001460 <PWM_write_range>:
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	ed87 0a02 	vstr	s0, [r7, #8]
 800146c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001470:	edd7 7a02 	vldr	s15, [r7, #8]
 8001474:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147c:	d137      	bne.n	80014ee <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	889b      	ldrh	r3, [r3, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d105      	bne.n	8001492 <PWM_write_range+0x32>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001490:	e0e1      	b.n	8001656 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	889b      	ldrh	r3, [r3, #4]
 8001496:	2b04      	cmp	r3, #4
 8001498:	d105      	bne.n	80014a6 <PWM_write_range+0x46>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2300      	movs	r3, #0
 80014a2:	6393      	str	r3, [r2, #56]	@ 0x38
 80014a4:	e0d7      	b.n	8001656 <PWM_write_range+0x1f6>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	889b      	ldrh	r3, [r3, #4]
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d105      	bne.n	80014ba <PWM_write_range+0x5a>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2300      	movs	r3, #0
 80014b6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80014b8:	e0cd      	b.n	8001656 <PWM_write_range+0x1f6>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	889b      	ldrh	r3, [r3, #4]
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	d105      	bne.n	80014ce <PWM_write_range+0x6e>
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2300      	movs	r3, #0
 80014ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80014cc:	e0c3      	b.n	8001656 <PWM_write_range+0x1f6>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	889b      	ldrh	r3, [r3, #4]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d105      	bne.n	80014e2 <PWM_write_range+0x82>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	2300      	movs	r3, #0
 80014de:	6493      	str	r3, [r2, #72]	@ 0x48
 80014e0:	e0b9      	b.n	8001656 <PWM_write_range+0x1f6>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2300      	movs	r3, #0
 80014ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80014ec:	e0b3      	b.n	8001656 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	ee07 3a90 	vmov	s15, r3
 80014f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80014fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80014fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001506:	ee17 2a90 	vmov	r2, s15
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001516:	33fe      	adds	r3, #254	@ 0xfe
 8001518:	4a53      	ldr	r2, [pc, #332]	@ (8001668 <PWM_write_range+0x208>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	0bdb      	lsrs	r3, r3, #15
 8001520:	b29b      	uxth	r3, r3
 8001522:	3b01      	subs	r3, #1
 8001524:	b29a      	uxth	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	ee07 3a90 	vmov	s15, r3
 8001532:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	899b      	ldrh	r3, [r3, #12]
 800153a:	3301      	adds	r3, #1
 800153c:	ee07 3a90 	vmov	s15, r3
 8001540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001544:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001548:	ed97 7a02 	vldr	s14, [r7, #8]
 800154c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001550:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001554:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800155c:	ee17 3a90 	vmov	r3, s15
 8001560:	b29a      	uxth	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	89db      	ldrh	r3, [r3, #14]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ffa6 	bl	80004bc <__aeabi_i2d>
 8001570:	4604      	mov	r4, r0
 8001572:	460d      	mov	r5, r1
 8001574:	edd7 7a01 	vldr	s15, [r7, #4]
 8001578:	eef0 7ae7 	vabs.f32	s15, s15
 800157c:	ee17 0a90 	vmov	r0, s15
 8001580:	f7fe ffae 	bl	80004e0 <__aeabi_f2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4620      	mov	r0, r4
 800158a:	4629      	mov	r1, r5
 800158c:	f7ff f800 	bl	8000590 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	a331      	add	r3, pc, #196	@ (adr r3, 8001660 <PWM_write_range+0x200>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f7ff f921 	bl	80007e4 <__aeabi_ddiv>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff fa03 	bl	80009b4 <__aeabi_d2uiz>
 80015ae:	4603      	mov	r3, r0
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	899a      	ldrh	r2, [r3, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	89da      	ldrh	r2, [r3, #14]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	89da      	ldrh	r2, [r3, #14]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	889b      	ldrh	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d106      	bne.n	80015f0 <PWM_write_range+0x190>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	6952      	ldr	r2, [r2, #20]
 80015ec:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80015ee:	e032      	b.n	8001656 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	889b      	ldrh	r3, [r3, #4]
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d106      	bne.n	8001606 <PWM_write_range+0x1a6>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001604:	e027      	b.n	8001656 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	889b      	ldrh	r3, [r3, #4]
 800160a:	2b08      	cmp	r3, #8
 800160c:	d106      	bne.n	800161c <PWM_write_range+0x1bc>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800161a:	e01c      	b.n	8001656 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	889b      	ldrh	r3, [r3, #4]
 8001620:	2b0c      	cmp	r3, #12
 8001622:	d106      	bne.n	8001632 <PWM_write_range+0x1d2>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001630:	e011      	b.n	8001656 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	889b      	ldrh	r3, [r3, #4]
 8001636:	2b10      	cmp	r3, #16
 8001638:	d106      	bne.n	8001648 <PWM_write_range+0x1e8>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001646:	e006      	b.n	8001656 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001654:	e7ff      	b.n	8001656 <PWM_write_range+0x1f6>
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bdb0      	pop	{r4, r5, r7, pc}
 800165e:	bf00      	nop
 8001660:	00000000 	.word	0x00000000
 8001664:	40efffe0 	.word	0x40efffe0
 8001668:	80008001 	.word	0x80008001

0800166c <QEI_init>:
* Created on: Mar 30, 2024
* Author: beamk
*/
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6178      	str	r0, [r7, #20]
 8001674:	6139      	str	r1, [r7, #16]
 8001676:	60fa      	str	r2, [r7, #12]
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	ed87 0a01 	vstr	s0, [r7, #4]
    qei->htimx = htimx;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	611a      	str	r2, [r3, #16]
    qei->ppr = ppr;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	619a      	str	r2, [r3, #24]
    qei->freq = freq;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	621a      	str	r2, [r3, #32]
    qei->c[NOW] = 0;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2200      	movs	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
    qei->pps = 0;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = 0;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->enc_period = 65536 - (65536 % ppr);
 80016b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	fb93 f2f2 	sdiv	r2, r3, r2
 80016be:	68f9      	ldr	r1, [r7, #12]
 80016c0:	fb01 f202 	mul.w	r2, r1, r2
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	615a      	str	r2, [r3, #20]
    qei->pulses = 0;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	2200      	movs	r2, #0
 80016d2:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf = 0;
    qei->revs = 0;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->rads = 0;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->mm = 0;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mmps = 0;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	645a      	str	r2, [r3, #68]	@ 0x44

    qei->ratio = ratio;  // Gear ratio or scaling factor
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	649a      	str	r2, [r3, #72]	@ 0x48
    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 80016fa:	213c      	movs	r1, #60	@ 0x3c
 80016fc:	6938      	ldr	r0, [r7, #16]
 80016fe:	f005 fcbb 	bl	8007078 <HAL_TIM_Encoder_Start>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	@ 0x30
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2220      	movs	r2, #32
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f009 f891 	bl	800a84c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800172a:	4b47      	ldr	r3, [pc, #284]	@ (8001848 <MX_ADC1_Init+0x13c>)
 800172c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001730:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001732:	4b45      	ldr	r3, [pc, #276]	@ (8001848 <MX_ADC1_Init+0x13c>)
 8001734:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001738:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800173a:	4b43      	ldr	r3, [pc, #268]	@ (8001848 <MX_ADC1_Init+0x13c>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001740:	4b41      	ldr	r3, [pc, #260]	@ (8001848 <MX_ADC1_Init+0x13c>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001746:	4b40      	ldr	r3, [pc, #256]	@ (8001848 <MX_ADC1_Init+0x13c>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800174c:	4b3e      	ldr	r3, [pc, #248]	@ (8001848 <MX_ADC1_Init+0x13c>)
 800174e:	2201      	movs	r2, #1
 8001750:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001752:	4b3d      	ldr	r3, [pc, #244]	@ (8001848 <MX_ADC1_Init+0x13c>)
 8001754:	2204      	movs	r2, #4
 8001756:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001758:	4b3b      	ldr	r3, [pc, #236]	@ (8001848 <MX_ADC1_Init+0x13c>)
 800175a:	2200      	movs	r2, #0
 800175c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800175e:	4b3a      	ldr	r3, [pc, #232]	@ (8001848 <MX_ADC1_Init+0x13c>)
 8001760:	2201      	movs	r2, #1
 8001762:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8001764:	4b38      	ldr	r3, [pc, #224]	@ (8001848 <MX_ADC1_Init+0x13c>)
 8001766:	2204      	movs	r2, #4
 8001768:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800176a:	4b37      	ldr	r3, [pc, #220]	@ (8001848 <MX_ADC1_Init+0x13c>)
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001772:	4b35      	ldr	r3, [pc, #212]	@ (8001848 <MX_ADC1_Init+0x13c>)
 8001774:	2200      	movs	r2, #0
 8001776:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001778:	4b33      	ldr	r3, [pc, #204]	@ (8001848 <MX_ADC1_Init+0x13c>)
 800177a:	2200      	movs	r2, #0
 800177c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800177e:	4b32      	ldr	r3, [pc, #200]	@ (8001848 <MX_ADC1_Init+0x13c>)
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001786:	4b30      	ldr	r3, [pc, #192]	@ (8001848 <MX_ADC1_Init+0x13c>)
 8001788:	2200      	movs	r2, #0
 800178a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800178c:	4b2e      	ldr	r3, [pc, #184]	@ (8001848 <MX_ADC1_Init+0x13c>)
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001794:	482c      	ldr	r0, [pc, #176]	@ (8001848 <MX_ADC1_Init+0x13c>)
 8001796:	f001 ff33 	bl	8003600 <HAL_ADC_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80017a0:	f000 fc26 	bl	8001ff0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ac:	4619      	mov	r1, r3
 80017ae:	4826      	ldr	r0, [pc, #152]	@ (8001848 <MX_ADC1_Init+0x13c>)
 80017b0:	f003 f852 	bl	8004858 <HAL_ADCEx_MultiModeConfigChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80017ba:	f000 fc19 	bl	8001ff0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80017be:	4b23      	ldr	r3, [pc, #140]	@ (800184c <MX_ADC1_Init+0x140>)
 80017c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017c2:	2306      	movs	r3, #6
 80017c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80017c6:	2307      	movs	r3, #7
 80017c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017ca:	237f      	movs	r3, #127	@ 0x7f
 80017cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017ce:	2304      	movs	r3, #4
 80017d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	4619      	mov	r1, r3
 80017da:	481b      	ldr	r0, [pc, #108]	@ (8001848 <MX_ADC1_Init+0x13c>)
 80017dc:	f002 f9be 	bl	8003b5c <HAL_ADC_ConfigChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80017e6:	f000 fc03 	bl	8001ff0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80017ea:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <MX_ADC1_Init+0x144>)
 80017ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80017ee:	230c      	movs	r3, #12
 80017f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	4619      	mov	r1, r3
 80017f6:	4814      	ldr	r0, [pc, #80]	@ (8001848 <MX_ADC1_Init+0x13c>)
 80017f8:	f002 f9b0 	bl	8003b5c <HAL_ADC_ConfigChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001802:	f000 fbf5 	bl	8001ff0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001806:	4b13      	ldr	r3, [pc, #76]	@ (8001854 <MX_ADC1_Init+0x148>)
 8001808:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800180a:	2312      	movs	r3, #18
 800180c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4619      	mov	r1, r3
 8001812:	480d      	ldr	r0, [pc, #52]	@ (8001848 <MX_ADC1_Init+0x13c>)
 8001814:	f002 f9a2 	bl	8003b5c <HAL_ADC_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800181e:	f000 fbe7 	bl	8001ff0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001822:	4b0d      	ldr	r3, [pc, #52]	@ (8001858 <MX_ADC1_Init+0x14c>)
 8001824:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001826:	2318      	movs	r3, #24
 8001828:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4806      	ldr	r0, [pc, #24]	@ (8001848 <MX_ADC1_Init+0x13c>)
 8001830:	f002 f994 	bl	8003b5c <HAL_ADC_ConfigChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800183a:	f000 fbd9 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	3730      	adds	r7, #48	@ 0x30
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200001d4 	.word	0x200001d4
 800184c:	19200040 	.word	0x19200040
 8001850:	1d500080 	.word	0x1d500080
 8001854:	21800100 	.word	0x21800100
 8001858:	3ef08000 	.word	0x3ef08000

0800185c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b0a0      	sub	sp, #128	@ 0x80
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001874:	f107 0318 	add.w	r3, r7, #24
 8001878:	2254      	movs	r2, #84	@ 0x54
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f008 ffe5 	bl	800a84c <memset>
  if(adcHandle->Instance==ADC1)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800188a:	d176      	bne.n	800197a <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800188c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001890:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001892:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001896:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001898:	f107 0318 	add.w	r3, r7, #24
 800189c:	4618      	mov	r0, r3
 800189e:	f004 fcb9 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80018a8:	f000 fba2 	bl	8001ff0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80018ac:	4b35      	ldr	r3, [pc, #212]	@ (8001984 <HAL_ADC_MspInit+0x128>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b0:	4a34      	ldr	r2, [pc, #208]	@ (8001984 <HAL_ADC_MspInit+0x128>)
 80018b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b8:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <HAL_ADC_MspInit+0x128>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001984 <HAL_ADC_MspInit+0x128>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001984 <HAL_ADC_MspInit+0x128>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001984 <HAL_ADC_MspInit+0x128>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018dc:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <HAL_ADC_MspInit+0x128>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e0:	4a28      	ldr	r2, [pc, #160]	@ (8001984 <HAL_ADC_MspInit+0x128>)
 80018e2:	f043 0302 	orr.w	r3, r3, #2
 80018e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e8:	4b26      	ldr	r3, [pc, #152]	@ (8001984 <HAL_ADC_MspInit+0x128>)
 80018ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80018f4:	2307      	movs	r3, #7
 80018f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f8:	2303      	movs	r3, #3
 80018fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001900:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001904:	4619      	mov	r1, r3
 8001906:	4820      	ldr	r0, [pc, #128]	@ (8001988 <HAL_ADC_MspInit+0x12c>)
 8001908:	f003 fcf0 	bl	80052ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800190c:	2301      	movs	r3, #1
 800190e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001910:	2303      	movs	r3, #3
 8001912:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800191c:	4619      	mov	r1, r3
 800191e:	481b      	ldr	r0, [pc, #108]	@ (800198c <HAL_ADC_MspInit+0x130>)
 8001920:	f003 fce4 	bl	80052ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001924:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <HAL_ADC_MspInit+0x134>)
 8001926:	4a1b      	ldr	r2, [pc, #108]	@ (8001994 <HAL_ADC_MspInit+0x138>)
 8001928:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800192a:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <HAL_ADC_MspInit+0x134>)
 800192c:	2205      	movs	r2, #5
 800192e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001930:	4b17      	ldr	r3, [pc, #92]	@ (8001990 <HAL_ADC_MspInit+0x134>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001936:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <HAL_ADC_MspInit+0x134>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800193c:	4b14      	ldr	r3, [pc, #80]	@ (8001990 <HAL_ADC_MspInit+0x134>)
 800193e:	2280      	movs	r2, #128	@ 0x80
 8001940:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001942:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <HAL_ADC_MspInit+0x134>)
 8001944:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001948:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800194a:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <HAL_ADC_MspInit+0x134>)
 800194c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001950:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001952:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <HAL_ADC_MspInit+0x134>)
 8001954:	2220      	movs	r2, #32
 8001956:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001958:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <HAL_ADC_MspInit+0x134>)
 800195a:	2200      	movs	r2, #0
 800195c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800195e:	480c      	ldr	r0, [pc, #48]	@ (8001990 <HAL_ADC_MspInit+0x134>)
 8001960:	f003 f992 	bl	8004c88 <HAL_DMA_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 800196a:	f000 fb41 	bl	8001ff0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a07      	ldr	r2, [pc, #28]	@ (8001990 <HAL_ADC_MspInit+0x134>)
 8001972:	655a      	str	r2, [r3, #84]	@ 0x54
 8001974:	4a06      	ldr	r2, [pc, #24]	@ (8001990 <HAL_ADC_MspInit+0x134>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800197a:	bf00      	nop
 800197c:	3780      	adds	r7, #128	@ 0x80
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	48000800 	.word	0x48000800
 800198c:	48000400 	.word	0x48000400
 8001990:	20000240 	.word	0x20000240
 8001994:	40020008 	.word	0x40020008

08001998 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800199e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <MX_DMA_Init+0x70>)
 80019a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019a2:	4a19      	ldr	r2, [pc, #100]	@ (8001a08 <MX_DMA_Init+0x70>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80019aa:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <MX_DMA_Init+0x70>)
 80019ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019b6:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <MX_DMA_Init+0x70>)
 80019b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ba:	4a13      	ldr	r2, [pc, #76]	@ (8001a08 <MX_DMA_Init+0x70>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <MX_DMA_Init+0x70>)
 80019c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	200b      	movs	r0, #11
 80019d4:	f003 f923 	bl	8004c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019d8:	200b      	movs	r0, #11
 80019da:	f003 f93a 	bl	8004c52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	200c      	movs	r0, #12
 80019e4:	f003 f91b 	bl	8004c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80019e8:	200c      	movs	r0, #12
 80019ea:	f003 f932 	bl	8004c52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	200d      	movs	r0, #13
 80019f4:	f003 f913 	bl	8004c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80019f8:	200d      	movs	r0, #13
 80019fa:	f003 f92a 	bl	8004c52 <HAL_NVIC_EnableIRQ>

}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000

08001a0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	@ 0x28
 8001a10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a22:	4b4f      	ldr	r3, [pc, #316]	@ (8001b60 <MX_GPIO_Init+0x154>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a26:	4a4e      	ldr	r2, [pc, #312]	@ (8001b60 <MX_GPIO_Init+0x154>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a2e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b60 <MX_GPIO_Init+0x154>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a3a:	4b49      	ldr	r3, [pc, #292]	@ (8001b60 <MX_GPIO_Init+0x154>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3e:	4a48      	ldr	r2, [pc, #288]	@ (8001b60 <MX_GPIO_Init+0x154>)
 8001a40:	f043 0320 	orr.w	r3, r3, #32
 8001a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a46:	4b46      	ldr	r3, [pc, #280]	@ (8001b60 <MX_GPIO_Init+0x154>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	4b43      	ldr	r3, [pc, #268]	@ (8001b60 <MX_GPIO_Init+0x154>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a56:	4a42      	ldr	r2, [pc, #264]	@ (8001b60 <MX_GPIO_Init+0x154>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a5e:	4b40      	ldr	r3, [pc, #256]	@ (8001b60 <MX_GPIO_Init+0x154>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b60 <MX_GPIO_Init+0x154>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6e:	4a3c      	ldr	r2, [pc, #240]	@ (8001b60 <MX_GPIO_Init+0x154>)
 8001a70:	f043 0302 	orr.w	r3, r3, #2
 8001a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a76:	4b3a      	ldr	r3, [pc, #232]	@ (8001b60 <MX_GPIO_Init+0x154>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001a82:	2200      	movs	r2, #0
 8001a84:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8001a88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a8c:	f003 fdb0 	bl	80055f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a96:	4833      	ldr	r0, [pc, #204]	@ (8001b64 <MX_GPIO_Init+0x158>)
 8001a98:	f003 fdaa 	bl	80055f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aa2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	482c      	ldr	r0, [pc, #176]	@ (8001b64 <MX_GPIO_Init+0x158>)
 8001ab4:	f003 fc1a 	bl	80052ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|GPIO_PIN_10;
 8001ab8:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8001abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ad4:	f003 fc0a 	bl	80052ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 EMER_Pin
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|EMER_Pin
 8001ad8:	f641 43b0 	movw	r3, #7344	@ 0x1cb0
 8001adc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	481e      	ldr	r0, [pc, #120]	@ (8001b68 <MX_GPIO_Init+0x15c>)
 8001aee:	f003 fbfd 	bl	80052ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001af2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4816      	ldr	r0, [pc, #88]	@ (8001b64 <MX_GPIO_Init+0x158>)
 8001b0c:	f003 fbee 	bl	80052ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b28:	f003 fbe0 	bl	80052ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b2c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4808      	ldr	r0, [pc, #32]	@ (8001b64 <MX_GPIO_Init+0x158>)
 8001b42:	f003 fbd3 	bl	80052ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2028      	movs	r0, #40	@ 0x28
 8001b4c:	f003 f867 	bl	8004c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b50:	2028      	movs	r0, #40	@ 0x28
 8001b52:	f003 f87e 	bl	8004c52 <HAL_NVIC_EnableIRQ>

}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	@ 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	48000800 	.word	0x48000800
 8001b68:	48000400 	.word	0x48000400

08001b6c <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix){
 8001b6c:	b5b0      	push	{r4, r5, r7, lr}
 8001b6e:	b0a2      	sub	sp, #136	@ 0x88
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
	filter->Q = 0.05f; //0.05
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4a38      	ldr	r2, [pc, #224]	@ (8001c5c <Kalman_Start+0xf0>)
 8001b7c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 1.0f;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b86:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001b90:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001b94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	float32_t g[4] = {0.0f,
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	667b      	str	r3, [r7, #100]	@ 0x64
 8001baa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001bae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	673b      	str	r3, [r7, #112]	@ 0x70
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8001bbc:	4b28      	ldr	r3, [pc, #160]	@ (8001c60 <Kalman_Start+0xf4>)
 8001bbe:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001bc2:	461d      	mov	r5, r3
 8001bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bd0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001bd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001bf6:	e028      	b.n	8001c4a <Kalman_Start+0xde>
	{
		filter->A[i] = A_matrix[i];
 8001bf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	4413      	add	r3, r2
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68f9      	ldr	r1, [r7, #12]
 8001c06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c0a:	3314      	adds	r3, #20
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8001c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	3388      	adds	r3, #136	@ 0x88
 8001c1a:	443b      	add	r3, r7
 8001c1c:	3b64      	subs	r3, #100	@ 0x64
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68f9      	ldr	r1, [r7, #12]
 8001c22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c26:	3398      	adds	r3, #152	@ 0x98
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c34:	3304      	adds	r3, #4
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8001c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c44:	3301      	adds	r3, #1
 8001c46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c4e:	2b0f      	cmp	r3, #15
 8001c50:	ddd2      	ble.n	8001bf8 <Kalman_Start+0x8c>
	}

	for(i=0;i<4;i++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c58:	e03f      	b.n	8001cda <Kalman_Start+0x16e>
 8001c5a:	bf00      	nop
 8001c5c:	3d4ccccd 	.word	0x3d4ccccd
 8001c60:	0800b3d4 	.word	0x0800b3d4
	{
		filter->X_k[i] = x_k[i];
 8001c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	3388      	adds	r3, #136	@ 0x88
 8001c6c:	443b      	add	r3, r7
 8001c6e:	3b74      	subs	r3, #116	@ 0x74
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68f9      	ldr	r1, [r7, #12]
 8001c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8001c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	4413      	add	r3, r2
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68f9      	ldr	r1, [r7, #12]
 8001c8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c90:	3324      	adds	r3, #36	@ 0x24
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8001c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	3388      	adds	r3, #136	@ 0x88
 8001ca0:	443b      	add	r3, r7
 8001ca2:	3b14      	subs	r3, #20
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68f9      	ldr	r1, [r7, #12]
 8001ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001cac:	3328      	adds	r3, #40	@ 0x28
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8001cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	3388      	adds	r3, #136	@ 0x88
 8001cbc:	443b      	add	r3, r7
 8001cbe:	3b24      	subs	r3, #36	@ 0x24
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68f9      	ldr	r1, [r7, #12]
 8001cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001cc8:	332c      	adds	r3, #44	@ 0x2c
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8001cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001cda:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	ddc0      	ble.n	8001c64 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2201      	movs	r2, #1
 8001cec:	2104      	movs	r1, #4
 8001cee:	f008 fcdf 	bl	800a6b0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3310      	adds	r3, #16
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	2104      	movs	r1, #4
 8001d00:	f008 fcd6 	bl	800a6b0 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3350      	adds	r3, #80	@ 0x50
 8001d0e:	2204      	movs	r2, #4
 8001d10:	2104      	movs	r1, #4
 8001d12:	f008 fccd 	bl	800a6b0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3390      	adds	r3, #144	@ 0x90
 8001d20:	2201      	movs	r2, #1
 8001d22:	2104      	movs	r1, #4
 8001d24:	f008 fcc4 	bl	800a6b0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	33a0      	adds	r3, #160	@ 0xa0
 8001d32:	2204      	movs	r2, #4
 8001d34:	2101      	movs	r1, #1
 8001d36:	f008 fcbb 	bl	800a6b0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	33b0      	adds	r3, #176	@ 0xb0
 8001d44:	2201      	movs	r2, #1
 8001d46:	2104      	movs	r1, #4
 8001d48:	f008 fcb2 	bl	800a6b0 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	33c8      	adds	r3, #200	@ 0xc8
 8001d56:	2204      	movs	r2, #4
 8001d58:	2104      	movs	r1, #4
 8001d5a:	f008 fca9 	bl	800a6b0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	2104      	movs	r1, #4
 8001d6e:	f008 fc9f 	bl	800a6b0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8001d7e:	2204      	movs	r2, #4
 8001d80:	2101      	movs	r1, #1
 8001d82:	f008 fc95 	bl	800a6b0 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d92:	2204      	movs	r2, #4
 8001d94:	2104      	movs	r1, #4
 8001d96:	f008 fc8b 	bl	800a6b0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001da6:	2204      	movs	r2, #4
 8001da8:	2104      	movs	r1, #4
 8001daa:	f008 fc81 	bl	800a6b0 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8001dba:	2201      	movs	r2, #1
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	f008 fc77 	bl	800a6b0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001dce:	2201      	movs	r2, #1
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	f008 fc6d 	bl	800a6b0 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001de2:	2204      	movs	r2, #4
 8001de4:	2101      	movs	r1, #1
 8001de6:	f008 fc63 	bl	800a6b0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8001df6:	2201      	movs	r2, #1
 8001df8:	2101      	movs	r1, #1
 8001dfa:	f008 fc59 	bl	800a6b0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	f008 fc4f 	bl	800a6b0 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8001e1e:	2201      	movs	r2, #1
 8001e20:	2104      	movs	r1, #4
 8001e22:	f008 fc45 	bl	800a6b0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8001e32:	2201      	movs	r2, #1
 8001e34:	2104      	movs	r1, #4
 8001e36:	f008 fc3b 	bl	800a6b0 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8001e46:	2201      	movs	r2, #1
 8001e48:	2101      	movs	r1, #1
 8001e4a:	f008 fc31 	bl	800a6b0 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	f008 fc27 	bl	800a6b0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8001e6e:	2201      	movs	r2, #1
 8001e70:	2101      	movs	r1, #1
 8001e72:	f008 fc1d 	bl	800a6b0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8001e82:	2201      	movs	r2, #1
 8001e84:	2104      	movs	r1, #4
 8001e86:	f008 fc13 	bl	800a6b0 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e96:	2201      	movs	r2, #1
 8001e98:	2101      	movs	r1, #1
 8001e9a:	f008 fc09 	bl	800a6b0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001eaa:	2204      	movs	r2, #4
 8001eac:	2104      	movs	r1, #4
 8001eae:	f008 fbff 	bl	800a6b0 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	33c4      	adds	r3, #196	@ 0xc4
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	f008 fbf6 	bl	800a6b0 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	f008 fbec 	bl	800a6b0 <arm_mat_init_f32>
}
 8001ed8:	bf00      	nop
 8001eda:	3788      	adds	r7, #136	@ 0x88
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bdb0      	pop	{r4, r5, r7, pc}

08001ee0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ee4:	f001 f8d7 	bl	8003096 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ee8:	f000 f818 	bl	8001f1c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001eec:	f7ff fd8e 	bl	8001a0c <MX_GPIO_Init>
	MX_DMA_Init();
 8001ef0:	f7ff fd52 	bl	8001998 <MX_DMA_Init>
	MX_ADC1_Init();
 8001ef4:	f7ff fc0a 	bl	800170c <MX_ADC1_Init>
	MX_TIM2_Init();
 8001ef8:	f000 fc1e 	bl	8002738 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001efc:	f000 fc6a 	bl	80027d4 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001f00:	f000 fcbe 	bl	8002880 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001f04:	f000 fd12 	bl	800292c <MX_TIM5_Init>
	MX_TIM8_Init();
 8001f08:	f000 fd5e 	bl	80029c8 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8001f0c:	f000 ff90 	bl	8002e30 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8001f10:	f000 fe2c 	bl	8002b6c <MX_TIM16_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8001f14:	f000 f872 	bl	8001ffc <plotter_begin>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <main+0x38>

08001f1c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b094      	sub	sp, #80	@ 0x50
 8001f20:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001f22:	f107 0318 	add.w	r3, r7, #24
 8001f26:	2238      	movs	r2, #56	@ 0x38
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f008 fc8e 	bl	800a84c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f003 fb86 	bl	8005650 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f44:	2302      	movs	r3, #2
 8001f46:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f4e:	2340      	movs	r3, #64	@ 0x40
 8001f50:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f52:	2302      	movs	r3, #2
 8001f54:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f56:	2302      	movs	r3, #2
 8001f58:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001f5e:	2355      	movs	r3, #85	@ 0x55
 8001f60:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f62:	2302      	movs	r3, #2
 8001f64:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f66:	2302      	movs	r3, #2
 8001f68:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f6e:	f107 0318 	add.w	r3, r7, #24
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 fc20 	bl	80057b8 <HAL_RCC_OscConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <SystemClock_Config+0x66>
		Error_Handler();
 8001f7e:	f000 f837 	bl	8001ff0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f82:	230f      	movs	r3, #15
 8001f84:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f86:	2303      	movs	r3, #3
 8001f88:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	2104      	movs	r1, #4
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f003 ff1e 	bl	8005ddc <HAL_RCC_ClockConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <SystemClock_Config+0x8e>
		Error_Handler();
 8001fa6:	f000 f823 	bl	8001ff0 <Error_Handler>
	}
}
 8001faa:	bf00      	nop
 8001fac:	3750      	adds	r7, #80	@ 0x50
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	80fb      	strh	r3, [r7, #6]

}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {

	}
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff4:	b672      	cpsid	i
}
 8001ff6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <Error_Handler+0x8>

08001ffc <plotter_begin>:
float joystick_x = 0.0f;
float joystick_y = 0.0f;
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

void plotter_begin() {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg, SIGNAL_SINE);
 8002002:	2100      	movs	r1, #0
 8002004:	4896      	ldr	r0, [pc, #600]	@ (8002260 <plotter_begin+0x264>)
 8002006:	f000 f995 	bl	8002334 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE, SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);
 800200a:	eddf 2a96 	vldr	s5, [pc, #600]	@ 8002264 <plotter_begin+0x268>
 800200e:	ed9f 2a96 	vldr	s4, [pc, #600]	@ 8002268 <plotter_begin+0x26c>
 8002012:	eddf 1a96 	vldr	s3, [pc, #600]	@ 800226c <plotter_begin+0x270>
 8002016:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 800226c <plotter_begin+0x270>
 800201a:	eddf 0a95 	vldr	s1, [pc, #596]	@ 8002270 <plotter_begin+0x274>
 800201e:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8002264 <plotter_begin+0x268>
 8002022:	488f      	ldr	r0, [pc, #572]	@ (8002260 <plotter_begin+0x264>)
 8002024:	f000 f9e4 	bl	80023f0 <SIGNAL_config_sine>

	SIGNAL_init(&chirp_linear_sg, SIGNAL_CHIRP);
 8002028:	2101      	movs	r1, #1
 800202a:	4892      	ldr	r0, [pc, #584]	@ (8002274 <plotter_begin+0x278>)
 800202c:	f000 f982 	bl	8002334 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_linear_sg, CHIRP_LINEAR_AMPLITUDE, CHIRP_LINEAR_START_FREQ,
 8002030:	eddf 2a8c 	vldr	s5, [pc, #560]	@ 8002264 <plotter_begin+0x268>
 8002034:	ed9f 2a8c 	vldr	s4, [pc, #560]	@ 8002268 <plotter_begin+0x26c>
 8002038:	2100      	movs	r1, #0
 800203a:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 800203e:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002042:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002046:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 8002264 <plotter_begin+0x268>
 800204a:	488a      	ldr	r0, [pc, #552]	@ (8002274 <plotter_begin+0x278>)
 800204c:	f000 f9fb 	bl	8002446 <SIGNAL_config_chirp>
	                   CHIRP_LINEAR_END_FREQ, CHIRP_LINEAR_DURATION, CHIRP_LINEAR,
	                   CHIRP_LINEAR_MIN_SETPOINT, CHIRP_LINEAR_MAX_SETPOINT);

	SIGNAL_init(&chirp_log_sg, SIGNAL_CHIRP);
 8002050:	2101      	movs	r1, #1
 8002052:	4889      	ldr	r0, [pc, #548]	@ (8002278 <plotter_begin+0x27c>)
 8002054:	f000 f96e 	bl	8002334 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_log_sg, CHIRP_LOG_AMPLITUDE, CHIRP_LOG_START_FREQ,
 8002058:	eddf 2a82 	vldr	s5, [pc, #520]	@ 8002264 <plotter_begin+0x268>
 800205c:	ed9f 2a82 	vldr	s4, [pc, #520]	@ 8002268 <plotter_begin+0x26c>
 8002060:	2101      	movs	r1, #1
 8002062:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8002066:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800206a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800206e:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 8002264 <plotter_begin+0x268>
 8002072:	4881      	ldr	r0, [pc, #516]	@ (8002278 <plotter_begin+0x27c>)
 8002074:	f000 f9e7 	bl	8002446 <SIGNAL_config_chirp>
	                   CHIRP_LOG_END_FREQ, CHIRP_LOG_DURATION, CHIRP_LOGARITHMIC,
	                   CHIRP_LOG_MIN_SETPOINT, CHIRP_LOG_MAX_SETPOINT);

	SIGNAL_init(&square_sg, SIGNAL_SQUARE);
 8002078:	2102      	movs	r1, #2
 800207a:	4880      	ldr	r0, [pc, #512]	@ (800227c <plotter_begin+0x280>)
 800207c:	f000 f95a 	bl	8002334 <SIGNAL_init>
	SIGNAL_config_square(&square_sg, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8002080:	ed9f 3a78 	vldr	s6, [pc, #480]	@ 8002264 <plotter_begin+0x268>
 8002084:	eddf 2a78 	vldr	s5, [pc, #480]	@ 8002268 <plotter_begin+0x26c>
 8002088:	ed9f 2a78 	vldr	s4, [pc, #480]	@ 800226c <plotter_begin+0x270>
 800208c:	eddf 1a77 	vldr	s3, [pc, #476]	@ 800226c <plotter_begin+0x270>
 8002090:	ed9f 1a7b 	vldr	s2, [pc, #492]	@ 8002280 <plotter_begin+0x284>
 8002094:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002098:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 8002264 <plotter_begin+0x268>
 800209c:	4877      	ldr	r0, [pc, #476]	@ (800227c <plotter_begin+0x280>)
 800209e:	f000 fa06 	bl	80024ae <SIGNAL_config_square>
	                    SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	                    SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&ramp_sg, SIGNAL_RAMP);
 80020a2:	2103      	movs	r1, #3
 80020a4:	4877      	ldr	r0, [pc, #476]	@ (8002284 <plotter_begin+0x288>)
 80020a6:	f000 f945 	bl	8002334 <SIGNAL_init>
	SIGNAL_config_ramp(&ramp_sg, RAMP_AMPLITUDE, RAMP_FREQUENCY,
 80020aa:	eddf 3a6e 	vldr	s7, [pc, #440]	@ 8002264 <plotter_begin+0x268>
 80020ae:	ed9f 3a6e 	vldr	s6, [pc, #440]	@ 8002268 <plotter_begin+0x26c>
 80020b2:	eddf 2a6e 	vldr	s5, [pc, #440]	@ 800226c <plotter_begin+0x270>
 80020b6:	ed9f 2a6d 	vldr	s4, [pc, #436]	@ 800226c <plotter_begin+0x270>
 80020ba:	eddf 1a6a 	vldr	s3, [pc, #424]	@ 8002264 <plotter_begin+0x268>
 80020be:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 8002268 <plotter_begin+0x26c>
 80020c2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80020c6:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 8002264 <plotter_begin+0x268>
 80020ca:	486e      	ldr	r0, [pc, #440]	@ (8002284 <plotter_begin+0x288>)
 80020cc:	f000 fa1f 	bl	800250e <SIGNAL_config_ramp>
	                  RAMP_START, RAMP_END, RAMP_PHASE, RAMP_OFFSET,
	                  RAMP_MIN_SETPOINT, RAMP_MAX_SETPOINT);

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR_RATIO1);
 80020d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80020d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020dc:	496a      	ldr	r1, [pc, #424]	@ (8002288 <plotter_begin+0x28c>)
 80020de:	486b      	ldr	r0, [pc, #428]	@ (800228c <plotter_begin+0x290>)
 80020e0:	f7ff fac4 	bl	800166c <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR_RATIO2);
 80020e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80020e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020f0:	4967      	ldr	r1, [pc, #412]	@ (8002290 <plotter_begin+0x294>)
 80020f2:	4868      	ldr	r0, [pc, #416]	@ (8002294 <plotter_begin+0x298>)
 80020f4:	f7ff faba 	bl	800166c <QEI_init>

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx, MOTOR1_GPIO_Pin);
 80020f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	4b66      	ldr	r3, [pc, #408]	@ (8002298 <plotter_begin+0x29c>)
 8002100:	2200      	movs	r2, #0
 8002102:	4966      	ldr	r1, [pc, #408]	@ (800229c <plotter_begin+0x2a0>)
 8002104:	4866      	ldr	r0, [pc, #408]	@ (80022a0 <plotter_begin+0x2a4>)
 8002106:	f7fe fe81 	bl	8000e0c <MDXX_GPIO_init>
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx, MOTOR2_GPIO_Pin);
 800210a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002114:	2204      	movs	r2, #4
 8002116:	4961      	ldr	r1, [pc, #388]	@ (800229c <plotter_begin+0x2a0>)
 8002118:	4862      	ldr	r0, [pc, #392]	@ (80022a4 <plotter_begin+0x2a8>)
 800211a:	f7fe fe77 	bl	8000e0c <MDXX_GPIO_init>

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 800211e:	2208      	movs	r2, #8
 8002120:	495e      	ldr	r1, [pc, #376]	@ (800229c <plotter_begin+0x2a0>)
 8002122:	4861      	ldr	r0, [pc, #388]	@ (80022a8 <plotter_begin+0x2ac>)
 8002124:	f7ff f978 	bl	8001418 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8002128:	eddf 0a50 	vldr	s1, [pc, #320]	@ 800226c <plotter_begin+0x270>
 800212c:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 80022ac <plotter_begin+0x2b0>
 8002130:	485b      	ldr	r0, [pc, #364]	@ (80022a0 <plotter_begin+0x2a4>)
 8002132:	f7fe fe8f 	bl	8000e54 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8002136:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 800226c <plotter_begin+0x270>
 800213a:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 80022ac <plotter_begin+0x2b0>
 800213e:	4859      	ldr	r0, [pc, #356]	@ (80022a4 <plotter_begin+0x2a8>)
 8002140:	f7fe fe88 	bl	8000e54 <MDXX_set_range>
	PWM_write_range(&servo, 2000, 0);
 8002144:	eddf 0a49 	vldr	s1, [pc, #292]	@ 800226c <plotter_begin+0x270>
 8002148:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 80022ac <plotter_begin+0x2b0>
 800214c:	4856      	ldr	r0, [pc, #344]	@ (80022a8 <plotter_begin+0x2ac>)
 800214e:	f7ff f987 	bl	8001460 <PWM_write_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 0, 0, 0, 65535);
 8002152:	eddf 1a57 	vldr	s3, [pc, #348]	@ 80022b0 <plotter_begin+0x2b4>
 8002156:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 800226c <plotter_begin+0x270>
 800215a:	eddf 0a44 	vldr	s1, [pc, #272]	@ 800226c <plotter_begin+0x270>
 800215e:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 800226c <plotter_begin+0x270>
 8002162:	4854      	ldr	r0, [pc, #336]	@ (80022b4 <plotter_begin+0x2b8>)
 8002164:	f7fe fe28 	bl	8000db8 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 0, 0, 0, 65535);
 8002168:	eddf 1a51 	vldr	s3, [pc, #324]	@ 80022b0 <plotter_begin+0x2b4>
 800216c:	ed9f 1a3f 	vldr	s2, [pc, #252]	@ 800226c <plotter_begin+0x270>
 8002170:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 800226c <plotter_begin+0x270>
 8002174:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 800226c <plotter_begin+0x270>
 8002178:	484f      	ldr	r0, [pc, #316]	@ (80022b8 <plotter_begin+0x2bc>)
 800217a:	f7fe fe1d 	bl	8000db8 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 0, 0, 0, 65535);
 800217e:	eddf 1a4c 	vldr	s3, [pc, #304]	@ 80022b0 <plotter_begin+0x2b4>
 8002182:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 800226c <plotter_begin+0x270>
 8002186:	eddf 0a39 	vldr	s1, [pc, #228]	@ 800226c <plotter_begin+0x270>
 800218a:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800226c <plotter_begin+0x270>
 800218e:	484b      	ldr	r0, [pc, #300]	@ (80022bc <plotter_begin+0x2c0>)
 8002190:	f7fe fe12 	bl	8000db8 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 0, 0, 0, 65535);
 8002194:	eddf 1a46 	vldr	s3, [pc, #280]	@ 80022b0 <plotter_begin+0x2b4>
 8002198:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 800226c <plotter_begin+0x270>
 800219c:	eddf 0a33 	vldr	s1, [pc, #204]	@ 800226c <plotter_begin+0x270>
 80021a0:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 800226c <plotter_begin+0x270>
 80021a4:	4846      	ldr	r0, [pc, #280]	@ (80022c0 <plotter_begin+0x2c4>)
 80021a6:	f7fe fe07 	bl	8000db8 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 80021aa:	4946      	ldr	r1, [pc, #280]	@ (80022c4 <plotter_begin+0x2c8>)
 80021ac:	4846      	ldr	r0, [pc, #280]	@ (80022c8 <plotter_begin+0x2cc>)
 80021ae:	f7fe ff2b 	bl	8001008 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 80021b2:	4946      	ldr	r1, [pc, #280]	@ (80022cc <plotter_begin+0x2d0>)
 80021b4:	4846      	ldr	r0, [pc, #280]	@ (80022d0 <plotter_begin+0x2d4>)
 80021b6:	f7fe ff47 	bl	8001048 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant, &Disturbance_Constant);
 80021ba:	4a46      	ldr	r2, [pc, #280]	@ (80022d4 <plotter_begin+0x2d8>)
 80021bc:	4941      	ldr	r1, [pc, #260]	@ (80022c4 <plotter_begin+0x2c8>)
 80021be:	4846      	ldr	r0, [pc, #280]	@ (80022d8 <plotter_begin+0x2dc>)
 80021c0:	f7fe ff30 	bl	8001024 <REVOLUTE_MOTOR_DFD_Init>
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant, &Disturbance_Constant);
 80021c4:	4a43      	ldr	r2, [pc, #268]	@ (80022d4 <plotter_begin+0x2d8>)
 80021c6:	4941      	ldr	r1, [pc, #260]	@ (80022cc <plotter_begin+0x2d0>)
 80021c8:	4844      	ldr	r0, [pc, #272]	@ (80022dc <plotter_begin+0x2e0>)
 80021ca:	f7fe ff4b 	bl	8001064 <PRISMATIC_MOTOR_DFD_Init>

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE, ADC_CHANNELS, 3.3f, 4095.0f);
 80021ce:	2304      	movs	r3, #4
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	eddf 0a43 	vldr	s1, [pc, #268]	@ 80022e0 <plotter_begin+0x2e4>
 80021d6:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 80022e4 <plotter_begin+0x2e8>
 80021da:	23c8      	movs	r3, #200	@ 0xc8
 80021dc:	4a42      	ldr	r2, [pc, #264]	@ (80022e8 <plotter_begin+0x2ec>)
 80021de:	4943      	ldr	r1, [pc, #268]	@ (80022ec <plotter_begin+0x2f0>)
 80021e0:	4843      	ldr	r0, [pc, #268]	@ (80022f0 <plotter_begin+0x2f4>)
 80021e2:	f7fe fd9d 	bl	8000d20 <ADC_DMA_Init>
	ADC_DMA_Start(&adc_dma);
 80021e6:	4842      	ldr	r0, [pc, #264]	@ (80022f0 <plotter_begin+0x2f4>)
 80021e8:	f7fe fdcf 	bl	8000d8a <ADC_DMA_Start>

	FIR_init(&LP_prismatic_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80021ec:	eddf 0a41 	vldr	s1, [pc, #260]	@ 80022f4 <plotter_begin+0x2f8>
 80021f0:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80021f4:	211f      	movs	r1, #31
 80021f6:	4840      	ldr	r0, [pc, #256]	@ (80022f8 <plotter_begin+0x2fc>)
 80021f8:	f7fe ff46 	bl	8001088 <FIR_init>
	FIR_init(&LP_prismatic_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80021fc:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 80022f4 <plotter_begin+0x2f8>
 8002200:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002204:	211f      	movs	r1, #31
 8002206:	483d      	ldr	r0, [pc, #244]	@ (80022fc <plotter_begin+0x300>)
 8002208:	f7fe ff3e 	bl	8001088 <FIR_init>
	FIR_init(&LP_revolute_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800220c:	eddf 0a39 	vldr	s1, [pc, #228]	@ 80022f4 <plotter_begin+0x2f8>
 8002210:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002214:	211f      	movs	r1, #31
 8002216:	483a      	ldr	r0, [pc, #232]	@ (8002300 <plotter_begin+0x304>)
 8002218:	f7fe ff36 	bl	8001088 <FIR_init>
	FIR_init(&LP_revolute_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800221c:	eddf 0a35 	vldr	s1, [pc, #212]	@ 80022f4 <plotter_begin+0x2f8>
 8002220:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002224:	211f      	movs	r1, #31
 8002226:	4837      	ldr	r0, [pc, #220]	@ (8002304 <plotter_begin+0x308>)
 8002228:	f7fe ff2e 	bl	8001088 <FIR_init>

	Kalman_Start(&flit_revolute_velocity, revolute_A, revolute_B);
 800222c:	4a36      	ldr	r2, [pc, #216]	@ (8002308 <plotter_begin+0x30c>)
 800222e:	4937      	ldr	r1, [pc, #220]	@ (800230c <plotter_begin+0x310>)
 8002230:	4837      	ldr	r0, [pc, #220]	@ (8002310 <plotter_begin+0x314>)
 8002232:	f7ff fc9b 	bl	8001b6c <Kalman_Start>
	Kalman_Start(&flit_prismatic_velocity, prismatic_A, prismatic_B);
 8002236:	4a37      	ldr	r2, [pc, #220]	@ (8002314 <plotter_begin+0x318>)
 8002238:	4937      	ldr	r1, [pc, #220]	@ (8002318 <plotter_begin+0x31c>)
 800223a:	4838      	ldr	r0, [pc, #224]	@ (800231c <plotter_begin+0x320>)
 800223c:	f7ff fc96 	bl	8001b6c <Kalman_Start>

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM, registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);
 8002240:	23c8      	movs	r3, #200	@ 0xc8
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	2315      	movs	r3, #21
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	4b35      	ldr	r3, [pc, #212]	@ (8002320 <plotter_begin+0x324>)
 800224a:	4a36      	ldr	r2, [pc, #216]	@ (8002324 <plotter_begin+0x328>)
 800224c:	4936      	ldr	r1, [pc, #216]	@ (8002328 <plotter_begin+0x32c>)
 800224e:	4837      	ldr	r0, [pc, #220]	@ (800232c <plotter_begin+0x330>)
 8002250:	f7ff f87a 	bl	8001348 <Modbus_init>

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8002254:	4836      	ldr	r0, [pc, #216]	@ (8002330 <plotter_begin+0x334>)
 8002256:	f004 faff 	bl	8006858 <HAL_TIM_Base_Start_IT>
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	200004c8 	.word	0x200004c8
 8002264:	3e6eeeef 	.word	0x3e6eeeef
 8002268:	be6eeeef 	.word	0xbe6eeeef
 800226c:	00000000 	.word	0x00000000
 8002270:	3d4ccccd 	.word	0x3d4ccccd
 8002274:	2000050c 	.word	0x2000050c
 8002278:	20000550 	.word	0x20000550
 800227c:	20000594 	.word	0x20000594
 8002280:	3e99999a 	.word	0x3e99999a
 8002284:	200005d8 	.word	0x200005d8
 8002288:	20001614 	.word	0x20001614
 800228c:	20000338 	.word	0x20000338
 8002290:	200016e0 	.word	0x200016e0
 8002294:	20000384 	.word	0x20000384
 8002298:	48000800 	.word	0x48000800
 800229c:	20001878 	.word	0x20001878
 80022a0:	200002a0 	.word	0x200002a0
 80022a4:	200002ec 	.word	0x200002ec
 80022a8:	20000498 	.word	0x20000498
 80022ac:	44fa0000 	.word	0x44fa0000
 80022b0:	477fff00 	.word	0x477fff00
 80022b4:	200003d0 	.word	0x200003d0
 80022b8:	200003fc 	.word	0x200003fc
 80022bc:	20000428 	.word	0x20000428
 80022c0:	20000454 	.word	0x20000454
 80022c4:	20000000 	.word	0x20000000
 80022c8:	2000048c 	.word	0x2000048c
 80022cc:	20000048 	.word	0x20000048
 80022d0:	20000480 	.word	0x20000480
 80022d4:	20000090 	.word	0x20000090
 80022d8:	20000490 	.word	0x20000490
 80022dc:	20000484 	.word	0x20000484
 80022e0:	457ff000 	.word	0x457ff000
 80022e4:	40533333 	.word	0x40533333
 80022e8:	20000d4c 	.word	0x20000d4c
 80022ec:	200001d4 	.word	0x200001d4
 80022f0:	200004b0 	.word	0x200004b0
 80022f4:	447a0000 	.word	0x447a0000
 80022f8:	20000628 	.word	0x20000628
 80022fc:	2000061c 	.word	0x2000061c
 8002300:	20000640 	.word	0x20000640
 8002304:	20000634 	.word	0x20000634
 8002308:	20000148 	.word	0x20000148
 800230c:	20000108 	.word	0x20000108
 8002310:	200009cc 	.word	0x200009cc
 8002314:	200000f8 	.word	0x200000f8
 8002318:	200000b8 	.word	0x200000b8
 800231c:	2000064c 	.word	0x2000064c
 8002320:	200013b4 	.word	0x200013b4
 8002324:	20001944 	.word	0x20001944
 8002328:	20001a10 	.word	0x20001a10
 800232c:	20000edc 	.word	0x20000edc
 8002330:	20001548 	.word	0x20001548

08002334 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	78fa      	ldrb	r2, [r7, #3]
 8002344:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800234c:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002354:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a1b      	ldr	r2, [pc, #108]	@ (80023e8 <SIGNAL_init+0xb4>)
 800237a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002382:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	2b03      	cmp	r3, #3
 8002388:	d828      	bhi.n	80023dc <SIGNAL_init+0xa8>
 800238a:	a201      	add	r2, pc, #4	@ (adr r2, 8002390 <SIGNAL_init+0x5c>)
 800238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002390:	080023db 	.word	0x080023db
 8002394:	080023a1 	.word	0x080023a1
 8002398:	080023bf 	.word	0x080023bf
 800239c:	080023c9 	.word	0x080023c9
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023ac:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a0e      	ldr	r2, [pc, #56]	@ (80023ec <SIGNAL_init+0xb8>)
 80023b2:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023ba:	621a      	str	r2, [r3, #32]
            break;
 80023bc:	e00e      	b.n	80023dc <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80023c4:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 80023c6:	e009      	b.n	80023dc <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023d6:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 80023d8:	e000      	b.n	80023dc <SIGNAL_init+0xa8>
            break;
 80023da:	bf00      	nop
    }
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	bf800000 	.word	0xbf800000
 80023ec:	41200000 	.word	0x41200000

080023f0 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	@ 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	61f8      	str	r0, [r7, #28]
 80023f8:	ed87 0a06 	vstr	s0, [r7, #24]
 80023fc:	edc7 0a05 	vstr	s1, [r7, #20]
 8002400:	ed87 1a04 	vstr	s2, [r7, #16]
 8002404:	edc7 1a03 	vstr	s3, [r7, #12]
 8002408:	ed87 2a02 	vstr	s4, [r7, #8]
 800240c:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800243a:	bf00      	nop
 800243c:	3724      	adds	r7, #36	@ 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <SIGNAL_config_chirp>:
                         float32_t f_start,
                         float32_t f_end,
                         float32_t duration,
                         ChirpType chirp_type,
                         float32_t min_setpoint,
                         float32_t max_setpoint) {
 8002446:	b480      	push	{r7}
 8002448:	b089      	sub	sp, #36	@ 0x24
 800244a:	af00      	add	r7, sp, #0
 800244c:	61f8      	str	r0, [r7, #28]
 800244e:	ed87 0a06 	vstr	s0, [r7, #24]
 8002452:	edc7 0a05 	vstr	s1, [r7, #20]
 8002456:	ed87 1a04 	vstr	s2, [r7, #16]
 800245a:	edc7 1a03 	vstr	s3, [r7, #12]
 800245e:	460b      	mov	r3, r1
 8002460:	ed87 2a01 	vstr	s4, [r7, #4]
 8002464:	edc7 2a00 	vstr	s5, [r7]
 8002468:	72fb      	strb	r3, [r7, #11]
    sg->type = SIGNAL_CHIRP;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	605a      	str	r2, [r3, #4]
    sg->f_start = f_start;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	619a      	str	r2, [r3, #24]
    sg->f_end = f_end;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	61da      	str	r2, [r3, #28]
    sg->duration = duration;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	621a      	str	r2, [r3, #32]
    sg->chirp_type = chirp_type;
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	7afa      	ldrb	r2, [r7, #11]
 800248c:	751a      	strb	r2, [r3, #20]
    sg->t = 0.0f;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	625a      	str	r2, [r3, #36]	@ 0x24
    sg->min_setpoint = min_setpoint;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80024a2:	bf00      	nop
 80024a4:	3724      	adds	r7, #36	@ 0x24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 80024ae:	b480      	push	{r7}
 80024b0:	b089      	sub	sp, #36	@ 0x24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	61f8      	str	r0, [r7, #28]
 80024b6:	ed87 0a06 	vstr	s0, [r7, #24]
 80024ba:	edc7 0a05 	vstr	s1, [r7, #20]
 80024be:	ed87 1a04 	vstr	s2, [r7, #16]
 80024c2:	edc7 1a03 	vstr	s3, [r7, #12]
 80024c6:	ed87 2a02 	vstr	s4, [r7, #8]
 80024ca:	edc7 2a01 	vstr	s5, [r7, #4]
 80024ce:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	2202      	movs	r2, #2
 80024d6:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002502:	bf00      	nop
 8002504:	3724      	adds	r7, #36	@ 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <SIGNAL_config_ramp>:
                        float32_t ramp_start,
                        float32_t ramp_end,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 800250e:	b480      	push	{r7}
 8002510:	b08b      	sub	sp, #44	@ 0x2c
 8002512:	af00      	add	r7, sp, #0
 8002514:	6278      	str	r0, [r7, #36]	@ 0x24
 8002516:	ed87 0a08 	vstr	s0, [r7, #32]
 800251a:	edc7 0a07 	vstr	s1, [r7, #28]
 800251e:	ed87 1a06 	vstr	s2, [r7, #24]
 8002522:	edc7 1a05 	vstr	s3, [r7, #20]
 8002526:	ed87 2a04 	vstr	s4, [r7, #16]
 800252a:	edc7 2a03 	vstr	s5, [r7, #12]
 800252e:	ed87 3a02 	vstr	s6, [r7, #8]
 8002532:	edc7 3a01 	vstr	s7, [r7, #4]
    sg->type = SIGNAL_RAMP;
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	2203      	movs	r2, #3
 800253a:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	6a3a      	ldr	r2, [r7, #32]
 8002540:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	609a      	str	r2, [r3, #8]
    sg->ramp_start = ramp_start;
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	62da      	str	r2, [r3, #44]	@ 0x2c
    sg->ramp_end = ramp_end;
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	631a      	str	r2, [r3, #48]	@ 0x30
    sg->phase = phase;
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8002560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800256c:	bf00      	nop
 800256e:	372c      	adds	r7, #44	@ 0x2c
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	4b0f      	ldr	r3, [pc, #60]	@ (80025bc <HAL_MspInit+0x44>)
 8002580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002582:	4a0e      	ldr	r2, [pc, #56]	@ (80025bc <HAL_MspInit+0x44>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6613      	str	r3, [r2, #96]	@ 0x60
 800258a:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <HAL_MspInit+0x44>)
 800258c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <HAL_MspInit+0x44>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259a:	4a08      	ldr	r2, [pc, #32]	@ (80025bc <HAL_MspInit+0x44>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a2:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <HAL_MspInit+0x44>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80025ae:	f003 f8f3 	bl	8005798 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000

080025c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <NMI_Handler+0x4>

080025c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025cc:	bf00      	nop
 80025ce:	e7fd      	b.n	80025cc <HardFault_Handler+0x4>

080025d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <MemManage_Handler+0x4>

080025d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <BusFault_Handler+0x4>

080025e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <UsageFault_Handler+0x4>

080025e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002616:	f000 fd91 	bl	800313c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002624:	4802      	ldr	r0, [pc, #8]	@ (8002630 <DMA1_Channel1_IRQHandler+0x10>)
 8002626:	f002 fd12 	bl	800504e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000240 	.word	0x20000240

08002634 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <DMA1_Channel2_IRQHandler+0x10>)
 800263a:	f002 fd08 	bl	800504e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20001adc 	.word	0x20001adc

08002648 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800264c:	4802      	ldr	r0, [pc, #8]	@ (8002658 <DMA1_Channel3_IRQHandler+0x10>)
 800264e:	f002 fcfe 	bl	800504e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20001b3c 	.word	0x20001b3c

0800265c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002660:	4802      	ldr	r0, [pc, #8]	@ (800266c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002662:	f004 fd97 	bl	8007194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20001944 	.word	0x20001944

08002670 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002674:	4802      	ldr	r0, [pc, #8]	@ (8002680 <TIM2_IRQHandler+0x10>)
 8002676:	f004 fd8d 	bl	8007194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20001548 	.word	0x20001548

08002684 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002688:	4802      	ldr	r0, [pc, #8]	@ (8002694 <USART2_IRQHandler+0x10>)
 800268a:	f006 fb51 	bl	8008d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20001a10 	.word	0x20001a10

08002698 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800269c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80026a0:	f002 ffbe 	bl	8005620 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b0:	4a14      	ldr	r2, [pc, #80]	@ (8002704 <_sbrk+0x5c>)
 80026b2:	4b15      	ldr	r3, [pc, #84]	@ (8002708 <_sbrk+0x60>)
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026bc:	4b13      	ldr	r3, [pc, #76]	@ (800270c <_sbrk+0x64>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c4:	4b11      	ldr	r3, [pc, #68]	@ (800270c <_sbrk+0x64>)
 80026c6:	4a12      	ldr	r2, [pc, #72]	@ (8002710 <_sbrk+0x68>)
 80026c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ca:	4b10      	ldr	r3, [pc, #64]	@ (800270c <_sbrk+0x64>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d207      	bcs.n	80026e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d8:	f008 f8d0 	bl	800a87c <__errno>
 80026dc:	4603      	mov	r3, r0
 80026de:	220c      	movs	r2, #12
 80026e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295
 80026e6:	e009      	b.n	80026fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e8:	4b08      	ldr	r3, [pc, #32]	@ (800270c <_sbrk+0x64>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ee:	4b07      	ldr	r3, [pc, #28]	@ (800270c <_sbrk+0x64>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	4a05      	ldr	r2, [pc, #20]	@ (800270c <_sbrk+0x64>)
 80026f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026fa:	68fb      	ldr	r3, [r7, #12]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20020000 	.word	0x20020000
 8002708:	00000400 	.word	0x00000400
 800270c:	20001544 	.word	0x20001544
 8002710:	20001ce8 	.word	0x20001ce8

08002714 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002718:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <SystemInit+0x20>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271e:	4a05      	ldr	r2, [pc, #20]	@ (8002734 <SystemInit+0x20>)
 8002720:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002724:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800273e:	f107 0310 	add.w	r3, r7, #16
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	609a      	str	r2, [r3, #8]
 800274a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002756:	4b1e      	ldr	r3, [pc, #120]	@ (80027d0 <MX_TIM2_Init+0x98>)
 8002758:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800275c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800275e:	4b1c      	ldr	r3, [pc, #112]	@ (80027d0 <MX_TIM2_Init+0x98>)
 8002760:	22a9      	movs	r2, #169	@ 0xa9
 8002762:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002764:	4b1a      	ldr	r3, [pc, #104]	@ (80027d0 <MX_TIM2_Init+0x98>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800276a:	4b19      	ldr	r3, [pc, #100]	@ (80027d0 <MX_TIM2_Init+0x98>)
 800276c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002770:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002772:	4b17      	ldr	r3, [pc, #92]	@ (80027d0 <MX_TIM2_Init+0x98>)
 8002774:	2200      	movs	r2, #0
 8002776:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002778:	4b15      	ldr	r3, [pc, #84]	@ (80027d0 <MX_TIM2_Init+0x98>)
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800277e:	4814      	ldr	r0, [pc, #80]	@ (80027d0 <MX_TIM2_Init+0x98>)
 8002780:	f003 ff96 	bl	80066b0 <HAL_TIM_Base_Init>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800278a:	f7ff fc31 	bl	8001ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800278e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002792:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002794:	f107 0310 	add.w	r3, r7, #16
 8002798:	4619      	mov	r1, r3
 800279a:	480d      	ldr	r0, [pc, #52]	@ (80027d0 <MX_TIM2_Init+0x98>)
 800279c:	f005 f802 	bl	80077a4 <HAL_TIM_ConfigClockSource>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80027a6:	f7ff fc23 	bl	8001ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	4619      	mov	r1, r3
 80027b6:	4806      	ldr	r0, [pc, #24]	@ (80027d0 <MX_TIM2_Init+0x98>)
 80027b8:	f005 ffda 	bl	8008770 <HAL_TIMEx_MasterConfigSynchronization>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80027c2:	f7ff fc15 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027c6:	bf00      	nop
 80027c8:	3720      	adds	r7, #32
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20001548 	.word	0x20001548

080027d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08c      	sub	sp, #48	@ 0x30
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	2224      	movs	r2, #36	@ 0x24
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f008 f832 	bl	800a84c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e8:	463b      	mov	r3, r7
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027f2:	4b21      	ldr	r3, [pc, #132]	@ (8002878 <MX_TIM3_Init+0xa4>)
 80027f4:	4a21      	ldr	r2, [pc, #132]	@ (800287c <MX_TIM3_Init+0xa8>)
 80027f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002878 <MX_TIM3_Init+0xa4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002878 <MX_TIM3_Init+0xa4>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002804:	4b1c      	ldr	r3, [pc, #112]	@ (8002878 <MX_TIM3_Init+0xa4>)
 8002806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800280a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800280c:	4b1a      	ldr	r3, [pc, #104]	@ (8002878 <MX_TIM3_Init+0xa4>)
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002812:	4b19      	ldr	r3, [pc, #100]	@ (8002878 <MX_TIM3_Init+0xa4>)
 8002814:	2200      	movs	r2, #0
 8002816:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002818:	2303      	movs	r3, #3
 800281a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800281c:	2300      	movs	r3, #0
 800281e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002820:	2301      	movs	r3, #1
 8002822:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002830:	2301      	movs	r3, #1
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002834:	2300      	movs	r3, #0
 8002836:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800283c:	f107 030c 	add.w	r3, r7, #12
 8002840:	4619      	mov	r1, r3
 8002842:	480d      	ldr	r0, [pc, #52]	@ (8002878 <MX_TIM3_Init+0xa4>)
 8002844:	f004 fb64 	bl	8006f10 <HAL_TIM_Encoder_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800284e:	f7ff fbcf 	bl	8001ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800285a:	463b      	mov	r3, r7
 800285c:	4619      	mov	r1, r3
 800285e:	4806      	ldr	r0, [pc, #24]	@ (8002878 <MX_TIM3_Init+0xa4>)
 8002860:	f005 ff86 	bl	8008770 <HAL_TIMEx_MasterConfigSynchronization>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800286a:	f7ff fbc1 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800286e:	bf00      	nop
 8002870:	3730      	adds	r7, #48	@ 0x30
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20001614 	.word	0x20001614
 800287c:	40000400 	.word	0x40000400

08002880 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08c      	sub	sp, #48	@ 0x30
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002886:	f107 030c 	add.w	r3, r7, #12
 800288a:	2224      	movs	r2, #36	@ 0x24
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f007 ffdc 	bl	800a84c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002894:	463b      	mov	r3, r7
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800289e:	4b21      	ldr	r3, [pc, #132]	@ (8002924 <MX_TIM4_Init+0xa4>)
 80028a0:	4a21      	ldr	r2, [pc, #132]	@ (8002928 <MX_TIM4_Init+0xa8>)
 80028a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80028a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002924 <MX_TIM4_Init+0xa4>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002924 <MX_TIM4_Init+0xa4>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80028b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002924 <MX_TIM4_Init+0xa4>)
 80028b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002924 <MX_TIM4_Init+0xa4>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028be:	4b19      	ldr	r3, [pc, #100]	@ (8002924 <MX_TIM4_Init+0xa4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028c4:	2303      	movs	r3, #3
 80028c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028c8:	2300      	movs	r3, #0
 80028ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028cc:	2301      	movs	r3, #1
 80028ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028d8:	2300      	movs	r3, #0
 80028da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028dc:	2301      	movs	r3, #1
 80028de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028e0:	2300      	movs	r3, #0
 80028e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	4619      	mov	r1, r3
 80028ee:	480d      	ldr	r0, [pc, #52]	@ (8002924 <MX_TIM4_Init+0xa4>)
 80028f0:	f004 fb0e 	bl	8006f10 <HAL_TIM_Encoder_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80028fa:	f7ff fb79 	bl	8001ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028fe:	2300      	movs	r3, #0
 8002900:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002906:	463b      	mov	r3, r7
 8002908:	4619      	mov	r1, r3
 800290a:	4806      	ldr	r0, [pc, #24]	@ (8002924 <MX_TIM4_Init+0xa4>)
 800290c:	f005 ff30 	bl	8008770 <HAL_TIMEx_MasterConfigSynchronization>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002916:	f7ff fb6b 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800291a:	bf00      	nop
 800291c:	3730      	adds	r7, #48	@ 0x30
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200016e0 	.word	0x200016e0
 8002928:	40000800 	.word	0x40000800

0800292c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002932:	f107 0310 	add.w	r3, r7, #16
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800294a:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <MX_TIM5_Init+0x94>)
 800294c:	4a1d      	ldr	r2, [pc, #116]	@ (80029c4 <MX_TIM5_Init+0x98>)
 800294e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8002950:	4b1b      	ldr	r3, [pc, #108]	@ (80029c0 <MX_TIM5_Init+0x94>)
 8002952:	22a9      	movs	r2, #169	@ 0xa9
 8002954:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002956:	4b1a      	ldr	r3, [pc, #104]	@ (80029c0 <MX_TIM5_Init+0x94>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800295c:	4b18      	ldr	r3, [pc, #96]	@ (80029c0 <MX_TIM5_Init+0x94>)
 800295e:	f04f 32ff 	mov.w	r2, #4294967295
 8002962:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002964:	4b16      	ldr	r3, [pc, #88]	@ (80029c0 <MX_TIM5_Init+0x94>)
 8002966:	2200      	movs	r2, #0
 8002968:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800296a:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <MX_TIM5_Init+0x94>)
 800296c:	2200      	movs	r2, #0
 800296e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002970:	4813      	ldr	r0, [pc, #76]	@ (80029c0 <MX_TIM5_Init+0x94>)
 8002972:	f003 fe9d 	bl	80066b0 <HAL_TIM_Base_Init>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800297c:	f7ff fb38 	bl	8001ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002980:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002984:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002986:	f107 0310 	add.w	r3, r7, #16
 800298a:	4619      	mov	r1, r3
 800298c:	480c      	ldr	r0, [pc, #48]	@ (80029c0 <MX_TIM5_Init+0x94>)
 800298e:	f004 ff09 	bl	80077a4 <HAL_TIM_ConfigClockSource>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002998:	f7ff fb2a 	bl	8001ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800299c:	2300      	movs	r3, #0
 800299e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	4619      	mov	r1, r3
 80029a8:	4805      	ldr	r0, [pc, #20]	@ (80029c0 <MX_TIM5_Init+0x94>)
 80029aa:	f005 fee1 	bl	8008770 <HAL_TIMEx_MasterConfigSynchronization>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80029b4:	f7ff fb1c 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80029b8:	bf00      	nop
 80029ba:	3720      	adds	r7, #32
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	200017ac 	.word	0x200017ac
 80029c4:	40000c00 	.word	0x40000c00

080029c8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b09c      	sub	sp, #112	@ 0x70
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
 80029f8:	615a      	str	r2, [r3, #20]
 80029fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	2234      	movs	r2, #52	@ 0x34
 8002a00:	2100      	movs	r1, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f007 ff22 	bl	800a84c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002a08:	4b56      	ldr	r3, [pc, #344]	@ (8002b64 <MX_TIM8_Init+0x19c>)
 8002a0a:	4a57      	ldr	r2, [pc, #348]	@ (8002b68 <MX_TIM8_Init+0x1a0>)
 8002a0c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002a0e:	4b55      	ldr	r3, [pc, #340]	@ (8002b64 <MX_TIM8_Init+0x19c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a14:	4b53      	ldr	r3, [pc, #332]	@ (8002b64 <MX_TIM8_Init+0x19c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002a1a:	4b52      	ldr	r3, [pc, #328]	@ (8002b64 <MX_TIM8_Init+0x19c>)
 8002a1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a20:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a22:	4b50      	ldr	r3, [pc, #320]	@ (8002b64 <MX_TIM8_Init+0x19c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002a28:	4b4e      	ldr	r3, [pc, #312]	@ (8002b64 <MX_TIM8_Init+0x19c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002b64 <MX_TIM8_Init+0x19c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002a34:	484b      	ldr	r0, [pc, #300]	@ (8002b64 <MX_TIM8_Init+0x19c>)
 8002a36:	f003 fe3b 	bl	80066b0 <HAL_TIM_Base_Init>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002a40:	f7ff fad6 	bl	8001ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a48:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002a4a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4844      	ldr	r0, [pc, #272]	@ (8002b64 <MX_TIM8_Init+0x19c>)
 8002a52:	f004 fea7 	bl	80077a4 <HAL_TIM_ConfigClockSource>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002a5c:	f7ff fac8 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002a60:	4840      	ldr	r0, [pc, #256]	@ (8002b64 <MX_TIM8_Init+0x19c>)
 8002a62:	f003 ffdf 	bl	8006a24 <HAL_TIM_PWM_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002a6c:	f7ff fac0 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8002a70:	483c      	ldr	r0, [pc, #240]	@ (8002b64 <MX_TIM8_Init+0x19c>)
 8002a72:	f003 ff69 	bl	8006948 <HAL_TIM_OC_Init>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 8002a7c:	f7ff fab8 	bl	8001ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a80:	2300      	movs	r3, #0
 8002a82:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a84:	2300      	movs	r3, #0
 8002a86:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002a8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a90:	4619      	mov	r1, r3
 8002a92:	4834      	ldr	r0, [pc, #208]	@ (8002b64 <MX_TIM8_Init+0x19c>)
 8002a94:	f005 fe6c 	bl	8008770 <HAL_TIMEx_MasterConfigSynchronization>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 8002a9e:	f7ff faa7 	bl	8001ff0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aa2:	2360      	movs	r3, #96	@ 0x60
 8002aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002aba:	2300      	movs	r3, #0
 8002abc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002abe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4827      	ldr	r0, [pc, #156]	@ (8002b64 <MX_TIM8_Init+0x19c>)
 8002ac8:	f004 fd58 	bl	800757c <HAL_TIM_PWM_ConfigChannel>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8002ad2:	f7ff fa8d 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ad6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ada:	2204      	movs	r2, #4
 8002adc:	4619      	mov	r1, r3
 8002ade:	4821      	ldr	r0, [pc, #132]	@ (8002b64 <MX_TIM8_Init+0x19c>)
 8002ae0:	f004 fd4c 	bl	800757c <HAL_TIM_PWM_ConfigChannel>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8002aea:	f7ff fa81 	bl	8001ff0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002aee:	2300      	movs	r3, #0
 8002af0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002af2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002af6:	2208      	movs	r2, #8
 8002af8:	4619      	mov	r1, r3
 8002afa:	481a      	ldr	r0, [pc, #104]	@ (8002b64 <MX_TIM8_Init+0x19c>)
 8002afc:	f004 fcc4 	bl	8007488 <HAL_TIM_OC_ConfigChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002b06:	f7ff fa73 	bl	8001ff0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002b30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	4619      	mov	r1, r3
 8002b46:	4807      	ldr	r0, [pc, #28]	@ (8002b64 <MX_TIM8_Init+0x19c>)
 8002b48:	f005 fea8 	bl	800889c <HAL_TIMEx_ConfigBreakDeadTime>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM8_Init+0x18e>
  {
    Error_Handler();
 8002b52:	f7ff fa4d 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002b56:	4803      	ldr	r0, [pc, #12]	@ (8002b64 <MX_TIM8_Init+0x19c>)
 8002b58:	f000 f914 	bl	8002d84 <HAL_TIM_MspPostInit>

}
 8002b5c:	bf00      	nop
 8002b5e:	3770      	adds	r7, #112	@ 0x70
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20001878 	.word	0x20001878
 8002b68:	40013400 	.word	0x40013400

08002b6c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002b70:	4b14      	ldr	r3, [pc, #80]	@ (8002bc4 <MX_TIM16_Init+0x58>)
 8002b72:	4a15      	ldr	r2, [pc, #84]	@ (8002bc8 <MX_TIM16_Init+0x5c>)
 8002b74:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8002b76:	4b13      	ldr	r3, [pc, #76]	@ (8002bc4 <MX_TIM16_Init+0x58>)
 8002b78:	22a9      	movs	r2, #169	@ 0xa9
 8002b7a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <MX_TIM16_Init+0x58>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8002b82:	4b10      	ldr	r3, [pc, #64]	@ (8002bc4 <MX_TIM16_Init+0x58>)
 8002b84:	f240 4279 	movw	r2, #1145	@ 0x479
 8002b88:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc4 <MX_TIM16_Init+0x58>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002b90:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <MX_TIM16_Init+0x58>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b96:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <MX_TIM16_Init+0x58>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002b9c:	4809      	ldr	r0, [pc, #36]	@ (8002bc4 <MX_TIM16_Init+0x58>)
 8002b9e:	f003 fd87 	bl	80066b0 <HAL_TIM_Base_Init>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002ba8:	f7ff fa22 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8002bac:	2108      	movs	r1, #8
 8002bae:	4805      	ldr	r0, [pc, #20]	@ (8002bc4 <MX_TIM16_Init+0x58>)
 8002bb0:	f004 f8b8 	bl	8006d24 <HAL_TIM_OnePulse_Init>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8002bba:	f7ff fa19 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20001944 	.word	0x20001944
 8002bc8:	40014400 	.word	0x40014400

08002bcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bdc:	d114      	bne.n	8002c08 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bde:	4b2b      	ldr	r3, [pc, #172]	@ (8002c8c <HAL_TIM_Base_MspInit+0xc0>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	4a2a      	ldr	r2, [pc, #168]	@ (8002c8c <HAL_TIM_Base_MspInit+0xc0>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bea:	4b28      	ldr	r3, [pc, #160]	@ (8002c8c <HAL_TIM_Base_MspInit+0xc0>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	201c      	movs	r0, #28
 8002bfc:	f002 f80f 	bl	8004c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c00:	201c      	movs	r0, #28
 8002c02:	f002 f826 	bl	8004c52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002c06:	e03c      	b.n	8002c82 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a20      	ldr	r2, [pc, #128]	@ (8002c90 <HAL_TIM_Base_MspInit+0xc4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10c      	bne.n	8002c2c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c12:	4b1e      	ldr	r3, [pc, #120]	@ (8002c8c <HAL_TIM_Base_MspInit+0xc0>)
 8002c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c16:	4a1d      	ldr	r2, [pc, #116]	@ (8002c8c <HAL_TIM_Base_MspInit+0xc0>)
 8002c18:	f043 0308 	orr.w	r3, r3, #8
 8002c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c8c <HAL_TIM_Base_MspInit+0xc0>)
 8002c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	693b      	ldr	r3, [r7, #16]
}
 8002c2a:	e02a      	b.n	8002c82 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a18      	ldr	r2, [pc, #96]	@ (8002c94 <HAL_TIM_Base_MspInit+0xc8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d10c      	bne.n	8002c50 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c36:	4b15      	ldr	r3, [pc, #84]	@ (8002c8c <HAL_TIM_Base_MspInit+0xc0>)
 8002c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c3a:	4a14      	ldr	r2, [pc, #80]	@ (8002c8c <HAL_TIM_Base_MspInit+0xc0>)
 8002c3c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c40:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c42:	4b12      	ldr	r3, [pc, #72]	@ (8002c8c <HAL_TIM_Base_MspInit+0xc0>)
 8002c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
}
 8002c4e:	e018      	b.n	8002c82 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a10      	ldr	r2, [pc, #64]	@ (8002c98 <HAL_TIM_Base_MspInit+0xcc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d113      	bne.n	8002c82 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c8c <HAL_TIM_Base_MspInit+0xc0>)
 8002c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5e:	4a0b      	ldr	r2, [pc, #44]	@ (8002c8c <HAL_TIM_Base_MspInit+0xc0>)
 8002c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c64:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c66:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <HAL_TIM_Base_MspInit+0xc0>)
 8002c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002c72:	2200      	movs	r2, #0
 8002c74:	2100      	movs	r1, #0
 8002c76:	2019      	movs	r0, #25
 8002c78:	f001 ffd1 	bl	8004c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c7c:	2019      	movs	r0, #25
 8002c7e:	f001 ffe8 	bl	8004c52 <HAL_NVIC_EnableIRQ>
}
 8002c82:	bf00      	nop
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40000c00 	.word	0x40000c00
 8002c94:	40013400 	.word	0x40013400
 8002c98:	40014400 	.word	0x40014400

08002c9c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08c      	sub	sp, #48	@ 0x30
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 031c 	add.w	r3, r7, #28
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a2f      	ldr	r2, [pc, #188]	@ (8002d78 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d129      	bne.n	8002d12 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8002d7c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc2:	4a2e      	ldr	r2, [pc, #184]	@ (8002d7c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002cc4:	f043 0302 	orr.w	r3, r3, #2
 8002cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cca:	4b2c      	ldr	r3, [pc, #176]	@ (8002d7c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd6:	4b29      	ldr	r3, [pc, #164]	@ (8002d7c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cda:	4a28      	ldr	r2, [pc, #160]	@ (8002d7c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ce2:	4b26      	ldr	r3, [pc, #152]	@ (8002d7c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cee:	23c0      	movs	r3, #192	@ 0xc0
 8002cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d02:	f107 031c 	add.w	r3, r7, #28
 8002d06:	4619      	mov	r1, r3
 8002d08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d0c:	f002 faee 	bl	80052ec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002d10:	e02e      	b.n	8002d70 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1a      	ldr	r2, [pc, #104]	@ (8002d80 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d129      	bne.n	8002d70 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d1c:	4b17      	ldr	r3, [pc, #92]	@ (8002d7c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d20:	4a16      	ldr	r2, [pc, #88]	@ (8002d7c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d22:	f043 0304 	orr.w	r3, r3, #4
 8002d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d28:	4b14      	ldr	r3, [pc, #80]	@ (8002d7c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d34:	4b11      	ldr	r3, [pc, #68]	@ (8002d7c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d38:	4a10      	ldr	r2, [pc, #64]	@ (8002d7c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d40:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d4c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002d5e:	230a      	movs	r3, #10
 8002d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d62:	f107 031c 	add.w	r3, r7, #28
 8002d66:	4619      	mov	r1, r3
 8002d68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d6c:	f002 fabe 	bl	80052ec <HAL_GPIO_Init>
}
 8002d70:	bf00      	nop
 8002d72:	3730      	adds	r7, #48	@ 0x30
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40000800 	.word	0x40000800

08002d84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	@ 0x28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8c:	f107 0314 	add.w	r3, r7, #20
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1f      	ldr	r2, [pc, #124]	@ (8002e20 <HAL_TIM_MspPostInit+0x9c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d138      	bne.n	8002e18 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da6:	4b1f      	ldr	r3, [pc, #124]	@ (8002e24 <HAL_TIM_MspPostInit+0xa0>)
 8002da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002daa:	4a1e      	ldr	r2, [pc, #120]	@ (8002e24 <HAL_TIM_MspPostInit+0xa0>)
 8002dac:	f043 0304 	orr.w	r3, r3, #4
 8002db0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002db2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e24 <HAL_TIM_MspPostInit+0xa0>)
 8002db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dbe:	4b19      	ldr	r3, [pc, #100]	@ (8002e24 <HAL_TIM_MspPostInit+0xa0>)
 8002dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc2:	4a18      	ldr	r2, [pc, #96]	@ (8002e24 <HAL_TIM_MspPostInit+0xa0>)
 8002dc4:	f043 0302 	orr.w	r3, r3, #2
 8002dc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dca:	4b16      	ldr	r3, [pc, #88]	@ (8002e24 <HAL_TIM_MspPostInit+0xa0>)
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dd6:	23c0      	movs	r3, #192	@ 0xc0
 8002dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de2:	2300      	movs	r3, #0
 8002de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002de6:	2304      	movs	r3, #4
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dea:	f107 0314 	add.w	r3, r7, #20
 8002dee:	4619      	mov	r1, r3
 8002df0:	480d      	ldr	r0, [pc, #52]	@ (8002e28 <HAL_TIM_MspPostInit+0xa4>)
 8002df2:	f002 fa7b 	bl	80052ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002df6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e04:	2300      	movs	r3, #0
 8002e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002e08:	230a      	movs	r3, #10
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	4619      	mov	r1, r3
 8002e12:	4806      	ldr	r0, [pc, #24]	@ (8002e2c <HAL_TIM_MspPostInit+0xa8>)
 8002e14:	f002 fa6a 	bl	80052ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002e18:	bf00      	nop
 8002e1a:	3728      	adds	r7, #40	@ 0x28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40013400 	.word	0x40013400
 8002e24:	40021000 	.word	0x40021000
 8002e28:	48000800 	.word	0x48000800
 8002e2c:	48000400 	.word	0x48000400

08002e30 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e34:	4b23      	ldr	r3, [pc, #140]	@ (8002ec4 <MX_USART2_UART_Init+0x94>)
 8002e36:	4a24      	ldr	r2, [pc, #144]	@ (8002ec8 <MX_USART2_UART_Init+0x98>)
 8002e38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002e3a:	4b22      	ldr	r3, [pc, #136]	@ (8002ec4 <MX_USART2_UART_Init+0x94>)
 8002e3c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002e40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002e42:	4b20      	ldr	r3, [pc, #128]	@ (8002ec4 <MX_USART2_UART_Init+0x94>)
 8002e44:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e48:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec4 <MX_USART2_UART_Init+0x94>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002e50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec4 <MX_USART2_UART_Init+0x94>)
 8002e52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e58:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec4 <MX_USART2_UART_Init+0x94>)
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e5e:	4b19      	ldr	r3, [pc, #100]	@ (8002ec4 <MX_USART2_UART_Init+0x94>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e64:	4b17      	ldr	r3, [pc, #92]	@ (8002ec4 <MX_USART2_UART_Init+0x94>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e6a:	4b16      	ldr	r3, [pc, #88]	@ (8002ec4 <MX_USART2_UART_Init+0x94>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e70:	4b14      	ldr	r3, [pc, #80]	@ (8002ec4 <MX_USART2_UART_Init+0x94>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e76:	4b13      	ldr	r3, [pc, #76]	@ (8002ec4 <MX_USART2_UART_Init+0x94>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e7c:	4811      	ldr	r0, [pc, #68]	@ (8002ec4 <MX_USART2_UART_Init+0x94>)
 8002e7e:	f005 fdf1 	bl	8008a64 <HAL_UART_Init>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002e88:	f7ff f8b2 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	480d      	ldr	r0, [pc, #52]	@ (8002ec4 <MX_USART2_UART_Init+0x94>)
 8002e90:	f007 fb44 	bl	800a51c <HAL_UARTEx_SetTxFifoThreshold>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002e9a:	f7ff f8a9 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4808      	ldr	r0, [pc, #32]	@ (8002ec4 <MX_USART2_UART_Init+0x94>)
 8002ea2:	f007 fb79 	bl	800a598 <HAL_UARTEx_SetRxFifoThreshold>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002eac:	f7ff f8a0 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002eb0:	4804      	ldr	r0, [pc, #16]	@ (8002ec4 <MX_USART2_UART_Init+0x94>)
 8002eb2:	f007 fafa 	bl	800a4aa <HAL_UARTEx_DisableFifoMode>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8002ebc:	f7ff f898 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ec0:	bf00      	nop
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20001a10 	.word	0x20001a10
 8002ec8:	40004400 	.word	0x40004400

08002ecc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b09e      	sub	sp, #120	@ 0x78
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ee4:	f107 0310 	add.w	r3, r7, #16
 8002ee8:	2254      	movs	r2, #84	@ 0x54
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f007 fcad 	bl	800a84c <memset>
  if(uartHandle->Instance==USART2)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a4d      	ldr	r2, [pc, #308]	@ (800302c <HAL_UART_MspInit+0x160>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	f040 8092 	bne.w	8003022 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002efe:	2302      	movs	r3, #2
 8002f00:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f06:	f107 0310 	add.w	r3, r7, #16
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 f982 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f16:	f7ff f86b 	bl	8001ff0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f1a:	4b45      	ldr	r3, [pc, #276]	@ (8003030 <HAL_UART_MspInit+0x164>)
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1e:	4a44      	ldr	r2, [pc, #272]	@ (8003030 <HAL_UART_MspInit+0x164>)
 8002f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f26:	4b42      	ldr	r3, [pc, #264]	@ (8003030 <HAL_UART_MspInit+0x164>)
 8002f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f32:	4b3f      	ldr	r3, [pc, #252]	@ (8003030 <HAL_UART_MspInit+0x164>)
 8002f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f36:	4a3e      	ldr	r2, [pc, #248]	@ (8003030 <HAL_UART_MspInit+0x164>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003030 <HAL_UART_MspInit+0x164>)
 8002f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f4a:	230c      	movs	r3, #12
 8002f4c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f56:	2300      	movs	r3, #0
 8002f58:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f5a:	2307      	movs	r3, #7
 8002f5c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002f62:	4619      	mov	r1, r3
 8002f64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f68:	f002 f9c0 	bl	80052ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8002f6c:	4b31      	ldr	r3, [pc, #196]	@ (8003034 <HAL_UART_MspInit+0x168>)
 8002f6e:	4a32      	ldr	r2, [pc, #200]	@ (8003038 <HAL_UART_MspInit+0x16c>)
 8002f70:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002f72:	4b30      	ldr	r3, [pc, #192]	@ (8003034 <HAL_UART_MspInit+0x168>)
 8002f74:	221a      	movs	r2, #26
 8002f76:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f78:	4b2e      	ldr	r3, [pc, #184]	@ (8003034 <HAL_UART_MspInit+0x168>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003034 <HAL_UART_MspInit+0x168>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f84:	4b2b      	ldr	r3, [pc, #172]	@ (8003034 <HAL_UART_MspInit+0x168>)
 8002f86:	2280      	movs	r2, #128	@ 0x80
 8002f88:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8003034 <HAL_UART_MspInit+0x168>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f90:	4b28      	ldr	r3, [pc, #160]	@ (8003034 <HAL_UART_MspInit+0x168>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002f96:	4b27      	ldr	r3, [pc, #156]	@ (8003034 <HAL_UART_MspInit+0x168>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f9c:	4b25      	ldr	r3, [pc, #148]	@ (8003034 <HAL_UART_MspInit+0x168>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002fa2:	4824      	ldr	r0, [pc, #144]	@ (8003034 <HAL_UART_MspInit+0x168>)
 8002fa4:	f001 fe70 	bl	8004c88 <HAL_DMA_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002fae:	f7ff f81f 	bl	8001ff0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003034 <HAL_UART_MspInit+0x168>)
 8002fb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002fba:	4a1e      	ldr	r2, [pc, #120]	@ (8003034 <HAL_UART_MspInit+0x168>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8002fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800303c <HAL_UART_MspInit+0x170>)
 8002fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8003040 <HAL_UART_MspInit+0x174>)
 8002fc4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800303c <HAL_UART_MspInit+0x170>)
 8002fc8:	221b      	movs	r2, #27
 8002fca:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800303c <HAL_UART_MspInit+0x170>)
 8002fce:	2210      	movs	r2, #16
 8002fd0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800303c <HAL_UART_MspInit+0x170>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fd8:	4b18      	ldr	r3, [pc, #96]	@ (800303c <HAL_UART_MspInit+0x170>)
 8002fda:	2280      	movs	r2, #128	@ 0x80
 8002fdc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fde:	4b17      	ldr	r3, [pc, #92]	@ (800303c <HAL_UART_MspInit+0x170>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fe4:	4b15      	ldr	r3, [pc, #84]	@ (800303c <HAL_UART_MspInit+0x170>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002fea:	4b14      	ldr	r3, [pc, #80]	@ (800303c <HAL_UART_MspInit+0x170>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ff0:	4b12      	ldr	r3, [pc, #72]	@ (800303c <HAL_UART_MspInit+0x170>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002ff6:	4811      	ldr	r0, [pc, #68]	@ (800303c <HAL_UART_MspInit+0x170>)
 8002ff8:	f001 fe46 	bl	8004c88 <HAL_DMA_Init>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8003002:	f7fe fff5 	bl	8001ff0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a0c      	ldr	r2, [pc, #48]	@ (800303c <HAL_UART_MspInit+0x170>)
 800300a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800300c:	4a0b      	ldr	r2, [pc, #44]	@ (800303c <HAL_UART_MspInit+0x170>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003012:	2200      	movs	r2, #0
 8003014:	2100      	movs	r1, #0
 8003016:	2026      	movs	r0, #38	@ 0x26
 8003018:	f001 fe01 	bl	8004c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800301c:	2026      	movs	r0, #38	@ 0x26
 800301e:	f001 fe18 	bl	8004c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003022:	bf00      	nop
 8003024:	3778      	adds	r7, #120	@ 0x78
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40004400 	.word	0x40004400
 8003030:	40021000 	.word	0x40021000
 8003034:	20001adc 	.word	0x20001adc
 8003038:	4002001c 	.word	0x4002001c
 800303c:	20001b3c 	.word	0x20001b3c
 8003040:	40020030 	.word	0x40020030

08003044 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003044:	480d      	ldr	r0, [pc, #52]	@ (800307c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003046:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003048:	f7ff fb64 	bl	8002714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800304c:	480c      	ldr	r0, [pc, #48]	@ (8003080 <LoopForever+0x6>)
  ldr r1, =_edata
 800304e:	490d      	ldr	r1, [pc, #52]	@ (8003084 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003050:	4a0d      	ldr	r2, [pc, #52]	@ (8003088 <LoopForever+0xe>)
  movs r3, #0
 8003052:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003054:	e002      	b.n	800305c <LoopCopyDataInit>

08003056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800305a:	3304      	adds	r3, #4

0800305c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800305c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800305e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003060:	d3f9      	bcc.n	8003056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003062:	4a0a      	ldr	r2, [pc, #40]	@ (800308c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003064:	4c0a      	ldr	r4, [pc, #40]	@ (8003090 <LoopForever+0x16>)
  movs r3, #0
 8003066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003068:	e001      	b.n	800306e <LoopFillZerobss>

0800306a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800306a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800306c:	3204      	adds	r2, #4

0800306e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800306e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003070:	d3fb      	bcc.n	800306a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003072:	f007 fc09 	bl	800a888 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003076:	f7fe ff33 	bl	8001ee0 <main>

0800307a <LoopForever>:

LoopForever:
    b LoopForever
 800307a:	e7fe      	b.n	800307a <LoopForever>
  ldr   r0, =_estack
 800307c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003084:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8003088:	0800b834 	.word	0x0800b834
  ldr r2, =_sbss
 800308c:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8003090:	20001ce8 	.word	0x20001ce8

08003094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003094:	e7fe      	b.n	8003094 <ADC1_2_IRQHandler>

08003096 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a0:	2003      	movs	r0, #3
 80030a2:	f001 fdb1 	bl	8004c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030a6:	2000      	movs	r0, #0
 80030a8:	f000 f80e 	bl	80030c8 <HAL_InitTick>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	71fb      	strb	r3, [r7, #7]
 80030b6:	e001      	b.n	80030bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030b8:	f7ff fa5e 	bl	8002578 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030bc:	79fb      	ldrb	r3, [r7, #7]

}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80030d4:	4b16      	ldr	r3, [pc, #88]	@ (8003130 <HAL_InitTick+0x68>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d022      	beq.n	8003122 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80030dc:	4b15      	ldr	r3, [pc, #84]	@ (8003134 <HAL_InitTick+0x6c>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b13      	ldr	r3, [pc, #76]	@ (8003130 <HAL_InitTick+0x68>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80030e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	4618      	mov	r0, r3
 80030f2:	f001 fdbc 	bl	8004c6e <HAL_SYSTICK_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10f      	bne.n	800311c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b0f      	cmp	r3, #15
 8003100:	d809      	bhi.n	8003116 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003102:	2200      	movs	r2, #0
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	f04f 30ff 	mov.w	r0, #4294967295
 800310a:	f001 fd88 	bl	8004c1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800310e:	4a0a      	ldr	r2, [pc, #40]	@ (8003138 <HAL_InitTick+0x70>)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	e007      	b.n	8003126 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
 800311a:	e004      	b.n	8003126 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
 8003120:	e001      	b.n	8003126 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003126:	7bfb      	ldrb	r3, [r7, #15]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000160 	.word	0x20000160
 8003134:	20000158 	.word	0x20000158
 8003138:	2000015c 	.word	0x2000015c

0800313c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003140:	4b05      	ldr	r3, [pc, #20]	@ (8003158 <HAL_IncTick+0x1c>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b05      	ldr	r3, [pc, #20]	@ (800315c <HAL_IncTick+0x20>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4413      	add	r3, r2
 800314a:	4a03      	ldr	r2, [pc, #12]	@ (8003158 <HAL_IncTick+0x1c>)
 800314c:	6013      	str	r3, [r2, #0]
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	20001b9c 	.word	0x20001b9c
 800315c:	20000160 	.word	0x20000160

08003160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return uwTick;
 8003164:	4b03      	ldr	r3, [pc, #12]	@ (8003174 <HAL_GetTick+0x14>)
 8003166:	681b      	ldr	r3, [r3, #0]
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20001b9c 	.word	0x20001b9c

08003178 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	609a      	str	r2, [r3, #8]
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	609a      	str	r2, [r3, #8]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3360      	adds	r3, #96	@ 0x60
 80031f2:	461a      	mov	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b08      	ldr	r3, [pc, #32]	@ (8003224 <LL_ADC_SetOffset+0x44>)
 8003202:	4013      	ands	r3, r2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	4313      	orrs	r3, r2
 8003210:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003218:	bf00      	nop
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	03fff000 	.word	0x03fff000

08003228 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3360      	adds	r3, #96	@ 0x60
 8003236:	461a      	mov	r2, r3
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3360      	adds	r3, #96	@ 0x60
 8003264:	461a      	mov	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	431a      	orrs	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800328a:	b480      	push	{r7}
 800328c:	b087      	sub	sp, #28
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	3360      	adds	r3, #96	@ 0x60
 800329a:	461a      	mov	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80032b4:	bf00      	nop
 80032b6:	371c      	adds	r7, #28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3360      	adds	r3, #96	@ 0x60
 80032d0:	461a      	mov	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80032ea:	bf00      	nop
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	615a      	str	r2, [r3, #20]
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003342:	b480      	push	{r7}
 8003344:	b087      	sub	sp, #28
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3330      	adds	r3, #48	@ 0x30
 8003352:	461a      	mov	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	0a1b      	lsrs	r3, r3, #8
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	4413      	add	r3, r2
 8003360:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	211f      	movs	r1, #31
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	401a      	ands	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	0e9b      	lsrs	r3, r3, #26
 800337a:	f003 011f 	and.w	r1, r3, #31
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	fa01 f303 	lsl.w	r3, r1, r3
 8003388:	431a      	orrs	r2, r3
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800339a:	b480      	push	{r7}
 800339c:	b087      	sub	sp, #28
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3314      	adds	r3, #20
 80033aa:	461a      	mov	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	0e5b      	lsrs	r3, r3, #25
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	4413      	add	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	0d1b      	lsrs	r3, r3, #20
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	2107      	movs	r1, #7
 80033c8:	fa01 f303 	lsl.w	r3, r1, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	401a      	ands	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	0d1b      	lsrs	r3, r3, #20
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	fa01 f303 	lsl.w	r3, r1, r3
 80033de:	431a      	orrs	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80033e4:	bf00      	nop
 80033e6:	371c      	adds	r7, #28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003408:	43db      	mvns	r3, r3
 800340a:	401a      	ands	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f003 0318 	and.w	r3, r3, #24
 8003412:	4908      	ldr	r1, [pc, #32]	@ (8003434 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003414:	40d9      	lsrs	r1, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	400b      	ands	r3, r1
 800341a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341e:	431a      	orrs	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003426:	bf00      	nop
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	0007ffff 	.word	0x0007ffff

08003438 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 031f 	and.w	r3, r3, #31
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003464:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6093      	str	r3, [r2, #8]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800348c:	d101      	bne.n	8003492 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80034b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034dc:	d101      	bne.n	80034e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003500:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003504:	f043 0201 	orr.w	r2, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003528:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800352c:	f043 0202 	orr.w	r2, r3, #2
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <LL_ADC_IsEnabled+0x18>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <LL_ADC_IsEnabled+0x1a>
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b02      	cmp	r3, #2
 8003578:	d101      	bne.n	800357e <LL_ADC_IsDisableOngoing+0x18>
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <LL_ADC_IsDisableOngoing+0x1a>
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800359c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035a0:	f043 0204 	orr.w	r2, r3, #4
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d101      	bne.n	80035cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d101      	bne.n	80035f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003600:	b590      	push	{r4, r7, lr}
 8003602:	b089      	sub	sp, #36	@ 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e1a9      	b.n	800396e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003624:	2b00      	cmp	r3, #0
 8003626:	d109      	bne.n	800363c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7fe f917 	bl	800185c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff ff19 	bl	8003478 <LL_ADC_IsDeepPowerDownEnabled>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d004      	beq.n	8003656 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff feff 	bl	8003454 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff ff34 	bl	80034c8 <LL_ADC_IsInternalRegulatorEnabled>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d115      	bne.n	8003692 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff ff18 	bl	80034a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003670:	4b9c      	ldr	r3, [pc, #624]	@ (80038e4 <HAL_ADC_Init+0x2e4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	099b      	lsrs	r3, r3, #6
 8003676:	4a9c      	ldr	r2, [pc, #624]	@ (80038e8 <HAL_ADC_Init+0x2e8>)
 8003678:	fba2 2303 	umull	r2, r3, r2, r3
 800367c:	099b      	lsrs	r3, r3, #6
 800367e:	3301      	adds	r3, #1
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003684:	e002      	b.n	800368c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3b01      	subs	r3, #1
 800368a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f9      	bne.n	8003686 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff ff16 	bl	80034c8 <LL_ADC_IsInternalRegulatorEnabled>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10d      	bne.n	80036be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a6:	f043 0210 	orr.w	r2, r3, #16
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b2:	f043 0201 	orr.w	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff ff76 	bl	80035b4 <LL_ADC_REG_IsConversionOngoing>
 80036c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f040 8142 	bne.w	800395c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f040 813e 	bne.w	800395c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80036e8:	f043 0202 	orr.w	r2, r3, #2
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff23 	bl	8003540 <LL_ADC_IsEnabled>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d141      	bne.n	8003784 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003708:	d004      	beq.n	8003714 <HAL_ADC_Init+0x114>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a77      	ldr	r2, [pc, #476]	@ (80038ec <HAL_ADC_Init+0x2ec>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d10f      	bne.n	8003734 <HAL_ADC_Init+0x134>
 8003714:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003718:	f7ff ff12 	bl	8003540 <LL_ADC_IsEnabled>
 800371c:	4604      	mov	r4, r0
 800371e:	4873      	ldr	r0, [pc, #460]	@ (80038ec <HAL_ADC_Init+0x2ec>)
 8003720:	f7ff ff0e 	bl	8003540 <LL_ADC_IsEnabled>
 8003724:	4603      	mov	r3, r0
 8003726:	4323      	orrs	r3, r4
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	e012      	b.n	800375a <HAL_ADC_Init+0x15a>
 8003734:	486e      	ldr	r0, [pc, #440]	@ (80038f0 <HAL_ADC_Init+0x2f0>)
 8003736:	f7ff ff03 	bl	8003540 <LL_ADC_IsEnabled>
 800373a:	4604      	mov	r4, r0
 800373c:	486d      	ldr	r0, [pc, #436]	@ (80038f4 <HAL_ADC_Init+0x2f4>)
 800373e:	f7ff feff 	bl	8003540 <LL_ADC_IsEnabled>
 8003742:	4603      	mov	r3, r0
 8003744:	431c      	orrs	r4, r3
 8003746:	486c      	ldr	r0, [pc, #432]	@ (80038f8 <HAL_ADC_Init+0x2f8>)
 8003748:	f7ff fefa 	bl	8003540 <LL_ADC_IsEnabled>
 800374c:	4603      	mov	r3, r0
 800374e:	4323      	orrs	r3, r4
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf0c      	ite	eq
 8003754:	2301      	moveq	r3, #1
 8003756:	2300      	movne	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d012      	beq.n	8003784 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003766:	d004      	beq.n	8003772 <HAL_ADC_Init+0x172>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a5f      	ldr	r2, [pc, #380]	@ (80038ec <HAL_ADC_Init+0x2ec>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d101      	bne.n	8003776 <HAL_ADC_Init+0x176>
 8003772:	4a62      	ldr	r2, [pc, #392]	@ (80038fc <HAL_ADC_Init+0x2fc>)
 8003774:	e000      	b.n	8003778 <HAL_ADC_Init+0x178>
 8003776:	4a62      	ldr	r2, [pc, #392]	@ (8003900 <HAL_ADC_Init+0x300>)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4619      	mov	r1, r3
 800377e:	4610      	mov	r0, r2
 8003780:	f7ff fcfa 	bl	8003178 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	7f5b      	ldrb	r3, [r3, #29]
 8003788:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800378e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003794:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800379a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037a4:	4313      	orrs	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d106      	bne.n	80037c0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b6:	3b01      	subs	r3, #1
 80037b8:	045b      	lsls	r3, r3, #17
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d009      	beq.n	80037dc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037cc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	4b48      	ldr	r3, [pc, #288]	@ (8003904 <HAL_ADC_Init+0x304>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6812      	ldr	r2, [r2, #0]
 80037ea:	69b9      	ldr	r1, [r7, #24]
 80037ec:	430b      	orrs	r3, r1
 80037ee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff fee5 	bl	80035da <LL_ADC_INJ_IsConversionOngoing>
 8003810:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d17f      	bne.n	8003918 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d17c      	bne.n	8003918 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003822:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800382a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800383a:	f023 0302 	bic.w	r3, r3, #2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6812      	ldr	r2, [r2, #0]
 8003842:	69b9      	ldr	r1, [r7, #24]
 8003844:	430b      	orrs	r3, r1
 8003846:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d017      	beq.n	8003880 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	691a      	ldr	r2, [r3, #16]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800385e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003868:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800386c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6911      	ldr	r1, [r2, #16]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	430b      	orrs	r3, r1
 800387a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800387e:	e013      	b.n	80038a8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800388e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80038a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038a4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d12a      	bne.n	8003908 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80038bc:	f023 0304 	bic.w	r3, r3, #4
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80038c8:	4311      	orrs	r1, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80038ce:	4311      	orrs	r1, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038d4:	430a      	orrs	r2, r1
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	611a      	str	r2, [r3, #16]
 80038e2:	e019      	b.n	8003918 <HAL_ADC_Init+0x318>
 80038e4:	20000158 	.word	0x20000158
 80038e8:	053e2d63 	.word	0x053e2d63
 80038ec:	50000100 	.word	0x50000100
 80038f0:	50000400 	.word	0x50000400
 80038f4:	50000500 	.word	0x50000500
 80038f8:	50000600 	.word	0x50000600
 80038fc:	50000300 	.word	0x50000300
 8003900:	50000700 	.word	0x50000700
 8003904:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0201 	bic.w	r2, r2, #1
 8003916:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d10c      	bne.n	800393a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003926:	f023 010f 	bic.w	r1, r3, #15
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	1e5a      	subs	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	631a      	str	r2, [r3, #48]	@ 0x30
 8003938:	e007      	b.n	800394a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 020f 	bic.w	r2, r2, #15
 8003948:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394e:	f023 0303 	bic.w	r3, r3, #3
 8003952:	f043 0201 	orr.w	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	65da      	str	r2, [r3, #92]	@ 0x5c
 800395a:	e007      	b.n	800396c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003960:	f043 0210 	orr.w	r2, r3, #16
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800396c:	7ffb      	ldrb	r3, [r7, #31]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3724      	adds	r7, #36	@ 0x24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd90      	pop	{r4, r7, pc}
 8003976:	bf00      	nop

08003978 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800398c:	d004      	beq.n	8003998 <HAL_ADC_Start_DMA+0x20>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a5a      	ldr	r2, [pc, #360]	@ (8003afc <HAL_ADC_Start_DMA+0x184>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d101      	bne.n	800399c <HAL_ADC_Start_DMA+0x24>
 8003998:	4b59      	ldr	r3, [pc, #356]	@ (8003b00 <HAL_ADC_Start_DMA+0x188>)
 800399a:	e000      	b.n	800399e <HAL_ADC_Start_DMA+0x26>
 800399c:	4b59      	ldr	r3, [pc, #356]	@ (8003b04 <HAL_ADC_Start_DMA+0x18c>)
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff fd4a 	bl	8003438 <LL_ADC_GetMultimode>
 80039a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff fe02 	bl	80035b4 <LL_ADC_REG_IsConversionOngoing>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 809b 	bne.w	8003aee <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_ADC_Start_DMA+0x4e>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e096      	b.n	8003af4 <HAL_ADC_Start_DMA+0x17c>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a4d      	ldr	r2, [pc, #308]	@ (8003b08 <HAL_ADC_Start_DMA+0x190>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d008      	beq.n	80039ea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	d002      	beq.n	80039ea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	2b09      	cmp	r3, #9
 80039e8:	d17a      	bne.n	8003ae0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fcf6 	bl	80043dc <ADC_Enable>
 80039f0:	4603      	mov	r3, r0
 80039f2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d16d      	bne.n	8003ad6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a02:	f023 0301 	bic.w	r3, r3, #1
 8003a06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a3a      	ldr	r2, [pc, #232]	@ (8003afc <HAL_ADC_Start_DMA+0x184>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d009      	beq.n	8003a2c <HAL_ADC_Start_DMA+0xb4>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a3b      	ldr	r2, [pc, #236]	@ (8003b0c <HAL_ADC_Start_DMA+0x194>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d002      	beq.n	8003a28 <HAL_ADC_Start_DMA+0xb0>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	e003      	b.n	8003a30 <HAL_ADC_Start_DMA+0xb8>
 8003a28:	4b39      	ldr	r3, [pc, #228]	@ (8003b10 <HAL_ADC_Start_DMA+0x198>)
 8003a2a:	e001      	b.n	8003a30 <HAL_ADC_Start_DMA+0xb8>
 8003a2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	6812      	ldr	r2, [r2, #0]
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d002      	beq.n	8003a3e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d105      	bne.n	8003a4a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a42:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d006      	beq.n	8003a64 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a5a:	f023 0206 	bic.w	r2, r3, #6
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a62:	e002      	b.n	8003a6a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6e:	4a29      	ldr	r2, [pc, #164]	@ (8003b14 <HAL_ADC_Start_DMA+0x19c>)
 8003a70:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a76:	4a28      	ldr	r2, [pc, #160]	@ (8003b18 <HAL_ADC_Start_DMA+0x1a0>)
 8003a78:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a7e:	4a27      	ldr	r2, [pc, #156]	@ (8003b1c <HAL_ADC_Start_DMA+0x1a4>)
 8003a80:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	221c      	movs	r2, #28
 8003a88:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f042 0210 	orr.w	r2, r2, #16
 8003aa0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0201 	orr.w	r2, r2, #1
 8003ab0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3340      	adds	r3, #64	@ 0x40
 8003abc:	4619      	mov	r1, r3
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f001 f989 	bl	8004dd8 <HAL_DMA_Start_IT>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff fd5c 	bl	800358c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003ad4:	e00d      	b.n	8003af2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003ade:	e008      	b.n	8003af2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003aec:	e001      	b.n	8003af2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003aee:	2302      	movs	r3, #2
 8003af0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	50000100 	.word	0x50000100
 8003b00:	50000300 	.word	0x50000300
 8003b04:	50000700 	.word	0x50000700
 8003b08:	50000600 	.word	0x50000600
 8003b0c:	50000500 	.word	0x50000500
 8003b10:	50000400 	.word	0x50000400
 8003b14:	080045c7 	.word	0x080045c7
 8003b18:	0800469f 	.word	0x0800469f
 8003b1c:	080046bb 	.word	0x080046bb

08003b20 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b0b6      	sub	sp, #216	@ 0xd8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d102      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x24>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	f000 bc13 	b.w	80043a6 <HAL_ADC_ConfigChannel+0x84a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff fd11 	bl	80035b4 <LL_ADC_REG_IsConversionOngoing>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f040 83f3 	bne.w	8004380 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6859      	ldr	r1, [r3, #4]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f7ff fbcb 	bl	8003342 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fcff 	bl	80035b4 <LL_ADC_REG_IsConversionOngoing>
 8003bb6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff fd0b 	bl	80035da <LL_ADC_INJ_IsConversionOngoing>
 8003bc4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f040 81d9 	bne.w	8003f84 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f040 81d4 	bne.w	8003f84 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003be4:	d10f      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f7ff fbd2 	bl	800339a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fb79 	bl	80032f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003c04:	e00e      	b.n	8003c24 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6819      	ldr	r1, [r3, #0]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	461a      	mov	r2, r3
 8003c14:	f7ff fbc1 	bl	800339a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fb69 	bl	80032f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	695a      	ldr	r2, [r3, #20]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	08db      	lsrs	r3, r3, #3
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d022      	beq.n	8003c8c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6919      	ldr	r1, [r3, #16]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c56:	f7ff fac3 	bl	80031e0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6919      	ldr	r1, [r3, #16]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f7ff fb0f 	bl	800328a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d102      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x126>
 8003c7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c80:	e000      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x128>
 8003c82:	2300      	movs	r3, #0
 8003c84:	461a      	mov	r2, r3
 8003c86:	f7ff fb1b 	bl	80032c0 <LL_ADC_SetOffsetSaturation>
 8003c8a:	e17b      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2100      	movs	r1, #0
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fac8 	bl	8003228 <LL_ADC_GetOffsetChannel>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10a      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x15c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff fabd 	bl	8003228 <LL_ADC_GetOffsetChannel>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	0e9b      	lsrs	r3, r3, #26
 8003cb2:	f003 021f 	and.w	r2, r3, #31
 8003cb6:	e01e      	b.n	8003cf6 <HAL_ADC_ConfigChannel+0x19a>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fab2 	bl	8003228 <LL_ADC_GetOffsetChannel>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003cce:	fa93 f3a3 	rbit	r3, r3
 8003cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cda:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003ce6:	2320      	movs	r3, #32
 8003ce8:	e004      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003cea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d105      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x1b2>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	0e9b      	lsrs	r3, r3, #26
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	e018      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x1e4>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d1a:	fa93 f3a3 	rbit	r3, r3
 8003d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003d2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003d32:	2320      	movs	r3, #32
 8003d34:	e004      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003d36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d106      	bne.n	8003d52 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fa81 	bl	8003254 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2101      	movs	r1, #1
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff fa65 	bl	8003228 <LL_ADC_GetOffsetChannel>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10a      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x222>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fa5a 	bl	8003228 <LL_ADC_GetOffsetChannel>
 8003d74:	4603      	mov	r3, r0
 8003d76:	0e9b      	lsrs	r3, r3, #26
 8003d78:	f003 021f 	and.w	r2, r3, #31
 8003d7c:	e01e      	b.n	8003dbc <HAL_ADC_ConfigChannel+0x260>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2101      	movs	r1, #1
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fa4f 	bl	8003228 <LL_ADC_GetOffsetChannel>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d94:	fa93 f3a3 	rbit	r3, r3
 8003d98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003d9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003da0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003da4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003dac:	2320      	movs	r3, #32
 8003dae:	e004      	b.n	8003dba <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003db0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003db4:	fab3 f383 	clz	r3, r3
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <HAL_ADC_ConfigChannel+0x278>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	0e9b      	lsrs	r3, r3, #26
 8003dce:	f003 031f 	and.w	r3, r3, #31
 8003dd2:	e018      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x2aa>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003de0:	fa93 f3a3 	rbit	r3, r3
 8003de4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003de8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003df0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003df8:	2320      	movs	r3, #32
 8003dfa:	e004      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003dfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e00:	fab3 f383 	clz	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d106      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2101      	movs	r1, #1
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fa1e 	bl	8003254 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2102      	movs	r1, #2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fa02 	bl	8003228 <LL_ADC_GetOffsetChannel>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x2e8>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2102      	movs	r1, #2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff f9f7 	bl	8003228 <LL_ADC_GetOffsetChannel>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	0e9b      	lsrs	r3, r3, #26
 8003e3e:	f003 021f 	and.w	r2, r3, #31
 8003e42:	e01e      	b.n	8003e82 <HAL_ADC_ConfigChannel+0x326>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2102      	movs	r1, #2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff f9ec 	bl	8003228 <LL_ADC_GetOffsetChannel>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e5a:	fa93 f3a3 	rbit	r3, r3
 8003e5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003e62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003e6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003e72:	2320      	movs	r3, #32
 8003e74:	e004      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003e76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e7a:	fab3 f383 	clz	r3, r3
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d105      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x33e>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	0e9b      	lsrs	r3, r3, #26
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	e016      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x36c>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ea6:	fa93 f3a3 	rbit	r3, r3
 8003eaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003eac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003eae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003eb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003eba:	2320      	movs	r3, #32
 8003ebc:	e004      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003ebe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ec2:	fab3 f383 	clz	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d106      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff f9bd 	bl	8003254 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2103      	movs	r1, #3
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff f9a1 	bl	8003228 <LL_ADC_GetOffsetChannel>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x3aa>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2103      	movs	r1, #3
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff f996 	bl	8003228 <LL_ADC_GetOffsetChannel>
 8003efc:	4603      	mov	r3, r0
 8003efe:	0e9b      	lsrs	r3, r3, #26
 8003f00:	f003 021f 	and.w	r2, r3, #31
 8003f04:	e017      	b.n	8003f36 <HAL_ADC_ConfigChannel+0x3da>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2103      	movs	r1, #3
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff f98b 	bl	8003228 <LL_ADC_GetOffsetChannel>
 8003f12:	4603      	mov	r3, r0
 8003f14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f18:	fa93 f3a3 	rbit	r3, r3
 8003f1c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f20:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003f22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003f28:	2320      	movs	r3, #32
 8003f2a:	e003      	b.n	8003f34 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003f2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d105      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x3f2>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	0e9b      	lsrs	r3, r3, #26
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	e011      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x416>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f56:	fa93 f3a3 	rbit	r3, r3
 8003f5a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003f5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003f60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003f66:	2320      	movs	r3, #32
 8003f68:	e003      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003f6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f6c:	fab3 f383 	clz	r3, r3
 8003f70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d106      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2103      	movs	r1, #3
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff f968 	bl	8003254 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fad9 	bl	8003540 <LL_ADC_IsEnabled>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f040 813d 	bne.w	8004210 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	6819      	ldr	r1, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	f7ff fa24 	bl	80033f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4aa2      	ldr	r2, [pc, #648]	@ (8004238 <HAL_ADC_ConfigChannel+0x6dc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	f040 812e 	bne.w	8004210 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10b      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x480>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	0e9b      	lsrs	r3, r3, #26
 8003fca:	3301      	adds	r3, #1
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	2b09      	cmp	r3, #9
 8003fd2:	bf94      	ite	ls
 8003fd4:	2301      	movls	r3, #1
 8003fd6:	2300      	movhi	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	e019      	b.n	8004010 <HAL_ADC_ConfigChannel+0x4b4>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fe4:	fa93 f3a3 	rbit	r3, r3
 8003fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003fea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003fee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	e003      	b.n	8004000 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003ff8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ffa:	fab3 f383 	clz	r3, r3
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	3301      	adds	r3, #1
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	2b09      	cmp	r3, #9
 8004008:	bf94      	ite	ls
 800400a:	2301      	movls	r3, #1
 800400c:	2300      	movhi	r3, #0
 800400e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004010:	2b00      	cmp	r3, #0
 8004012:	d079      	beq.n	8004108 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401c:	2b00      	cmp	r3, #0
 800401e:	d107      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x4d4>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	0e9b      	lsrs	r3, r3, #26
 8004026:	3301      	adds	r3, #1
 8004028:	069b      	lsls	r3, r3, #26
 800402a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800402e:	e015      	b.n	800405c <HAL_ADC_ConfigChannel+0x500>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004038:	fa93 f3a3 	rbit	r3, r3
 800403c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800403e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004040:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004048:	2320      	movs	r3, #32
 800404a:	e003      	b.n	8004054 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800404c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800404e:	fab3 f383 	clz	r3, r3
 8004052:	b2db      	uxtb	r3, r3
 8004054:	3301      	adds	r3, #1
 8004056:	069b      	lsls	r3, r3, #26
 8004058:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_ADC_ConfigChannel+0x520>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	0e9b      	lsrs	r3, r3, #26
 800406e:	3301      	adds	r3, #1
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2101      	movs	r1, #1
 8004076:	fa01 f303 	lsl.w	r3, r1, r3
 800407a:	e017      	b.n	80040ac <HAL_ADC_ConfigChannel+0x550>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004084:	fa93 f3a3 	rbit	r3, r3
 8004088:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800408a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800408c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800408e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004094:	2320      	movs	r3, #32
 8004096:	e003      	b.n	80040a0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004098:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800409a:	fab3 f383 	clz	r3, r3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	3301      	adds	r3, #1
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	2101      	movs	r1, #1
 80040a8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ac:	ea42 0103 	orr.w	r1, r2, r3
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x576>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	0e9b      	lsrs	r3, r3, #26
 80040c2:	3301      	adds	r3, #1
 80040c4:	f003 021f 	and.w	r2, r3, #31
 80040c8:	4613      	mov	r3, r2
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	4413      	add	r3, r2
 80040ce:	051b      	lsls	r3, r3, #20
 80040d0:	e018      	b.n	8004104 <HAL_ADC_ConfigChannel+0x5a8>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80040e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80040e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80040ea:	2320      	movs	r3, #32
 80040ec:	e003      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80040ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f0:	fab3 f383 	clz	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	3301      	adds	r3, #1
 80040f8:	f003 021f 	and.w	r2, r3, #31
 80040fc:	4613      	mov	r3, r2
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	4413      	add	r3, r2
 8004102:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004104:	430b      	orrs	r3, r1
 8004106:	e07e      	b.n	8004206 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004110:	2b00      	cmp	r3, #0
 8004112:	d107      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x5c8>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	0e9b      	lsrs	r3, r3, #26
 800411a:	3301      	adds	r3, #1
 800411c:	069b      	lsls	r3, r3, #26
 800411e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004122:	e015      	b.n	8004150 <HAL_ADC_ConfigChannel+0x5f4>
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412c:	fa93 f3a3 	rbit	r3, r3
 8004130:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004134:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800413c:	2320      	movs	r3, #32
 800413e:	e003      	b.n	8004148 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004142:	fab3 f383 	clz	r3, r3
 8004146:	b2db      	uxtb	r3, r3
 8004148:	3301      	adds	r3, #1
 800414a:	069b      	lsls	r3, r3, #26
 800414c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004158:	2b00      	cmp	r3, #0
 800415a:	d109      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x614>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	0e9b      	lsrs	r3, r3, #26
 8004162:	3301      	adds	r3, #1
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	2101      	movs	r1, #1
 800416a:	fa01 f303 	lsl.w	r3, r1, r3
 800416e:	e017      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x644>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	fa93 f3a3 	rbit	r3, r3
 800417c:	61fb      	str	r3, [r7, #28]
  return result;
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004188:	2320      	movs	r3, #32
 800418a:	e003      	b.n	8004194 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	fab3 f383 	clz	r3, r3
 8004192:	b2db      	uxtb	r3, r3
 8004194:	3301      	adds	r3, #1
 8004196:	f003 031f 	and.w	r3, r3, #31
 800419a:	2101      	movs	r1, #1
 800419c:	fa01 f303 	lsl.w	r3, r1, r3
 80041a0:	ea42 0103 	orr.w	r1, r2, r3
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10d      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x670>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	0e9b      	lsrs	r3, r3, #26
 80041b6:	3301      	adds	r3, #1
 80041b8:	f003 021f 	and.w	r2, r3, #31
 80041bc:	4613      	mov	r3, r2
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	4413      	add	r3, r2
 80041c2:	3b1e      	subs	r3, #30
 80041c4:	051b      	lsls	r3, r3, #20
 80041c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041ca:	e01b      	b.n	8004204 <HAL_ADC_ConfigChannel+0x6a8>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	fa93 f3a3 	rbit	r3, r3
 80041d8:	613b      	str	r3, [r7, #16]
  return result;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80041e4:	2320      	movs	r3, #32
 80041e6:	e003      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	fab3 f383 	clz	r3, r3
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	3301      	adds	r3, #1
 80041f2:	f003 021f 	and.w	r2, r3, #31
 80041f6:	4613      	mov	r3, r2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4413      	add	r3, r2
 80041fc:	3b1e      	subs	r3, #30
 80041fe:	051b      	lsls	r3, r3, #20
 8004200:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004204:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800420a:	4619      	mov	r1, r3
 800420c:	f7ff f8c5 	bl	800339a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4b09      	ldr	r3, [pc, #36]	@ (800423c <HAL_ADC_ConfigChannel+0x6e0>)
 8004216:	4013      	ands	r3, r2
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80be 	beq.w	800439a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004226:	d004      	beq.n	8004232 <HAL_ADC_ConfigChannel+0x6d6>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a04      	ldr	r2, [pc, #16]	@ (8004240 <HAL_ADC_ConfigChannel+0x6e4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d10a      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x6ec>
 8004232:	4b04      	ldr	r3, [pc, #16]	@ (8004244 <HAL_ADC_ConfigChannel+0x6e8>)
 8004234:	e009      	b.n	800424a <HAL_ADC_ConfigChannel+0x6ee>
 8004236:	bf00      	nop
 8004238:	407f0000 	.word	0x407f0000
 800423c:	80080000 	.word	0x80080000
 8004240:	50000100 	.word	0x50000100
 8004244:	50000300 	.word	0x50000300
 8004248:	4b59      	ldr	r3, [pc, #356]	@ (80043b0 <HAL_ADC_ConfigChannel+0x854>)
 800424a:	4618      	mov	r0, r3
 800424c:	f7fe ffba 	bl	80031c4 <LL_ADC_GetCommonPathInternalCh>
 8004250:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a56      	ldr	r2, [pc, #344]	@ (80043b4 <HAL_ADC_ConfigChannel+0x858>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_ADC_ConfigChannel+0x70c>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a55      	ldr	r2, [pc, #340]	@ (80043b8 <HAL_ADC_ConfigChannel+0x85c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d13a      	bne.n	80042de <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004268:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800426c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d134      	bne.n	80042de <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800427c:	d005      	beq.n	800428a <HAL_ADC_ConfigChannel+0x72e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a4e      	ldr	r2, [pc, #312]	@ (80043bc <HAL_ADC_ConfigChannel+0x860>)
 8004284:	4293      	cmp	r3, r2
 8004286:	f040 8085 	bne.w	8004394 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004292:	d004      	beq.n	800429e <HAL_ADC_ConfigChannel+0x742>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a49      	ldr	r2, [pc, #292]	@ (80043c0 <HAL_ADC_ConfigChannel+0x864>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d101      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x746>
 800429e:	4a49      	ldr	r2, [pc, #292]	@ (80043c4 <HAL_ADC_ConfigChannel+0x868>)
 80042a0:	e000      	b.n	80042a4 <HAL_ADC_ConfigChannel+0x748>
 80042a2:	4a43      	ldr	r2, [pc, #268]	@ (80043b0 <HAL_ADC_ConfigChannel+0x854>)
 80042a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042ac:	4619      	mov	r1, r3
 80042ae:	4610      	mov	r0, r2
 80042b0:	f7fe ff75 	bl	800319e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042b4:	4b44      	ldr	r3, [pc, #272]	@ (80043c8 <HAL_ADC_ConfigChannel+0x86c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	099b      	lsrs	r3, r3, #6
 80042ba:	4a44      	ldr	r2, [pc, #272]	@ (80043cc <HAL_ADC_ConfigChannel+0x870>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	099b      	lsrs	r3, r3, #6
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	4613      	mov	r3, r2
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80042ce:	e002      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1f9      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042dc:	e05a      	b.n	8004394 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a3b      	ldr	r2, [pc, #236]	@ (80043d0 <HAL_ADC_ConfigChannel+0x874>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d125      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d11f      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a31      	ldr	r2, [pc, #196]	@ (80043c0 <HAL_ADC_ConfigChannel+0x864>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d104      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x7ac>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a34      	ldr	r2, [pc, #208]	@ (80043d4 <HAL_ADC_ConfigChannel+0x878>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d047      	beq.n	8004398 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004310:	d004      	beq.n	800431c <HAL_ADC_ConfigChannel+0x7c0>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a2a      	ldr	r2, [pc, #168]	@ (80043c0 <HAL_ADC_ConfigChannel+0x864>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d101      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x7c4>
 800431c:	4a29      	ldr	r2, [pc, #164]	@ (80043c4 <HAL_ADC_ConfigChannel+0x868>)
 800431e:	e000      	b.n	8004322 <HAL_ADC_ConfigChannel+0x7c6>
 8004320:	4a23      	ldr	r2, [pc, #140]	@ (80043b0 <HAL_ADC_ConfigChannel+0x854>)
 8004322:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004326:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800432a:	4619      	mov	r1, r3
 800432c:	4610      	mov	r0, r2
 800432e:	f7fe ff36 	bl	800319e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004332:	e031      	b.n	8004398 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a27      	ldr	r2, [pc, #156]	@ (80043d8 <HAL_ADC_ConfigChannel+0x87c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d12d      	bne.n	800439a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800433e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d127      	bne.n	800439a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1c      	ldr	r2, [pc, #112]	@ (80043c0 <HAL_ADC_ConfigChannel+0x864>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d022      	beq.n	800439a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800435c:	d004      	beq.n	8004368 <HAL_ADC_ConfigChannel+0x80c>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a17      	ldr	r2, [pc, #92]	@ (80043c0 <HAL_ADC_ConfigChannel+0x864>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d101      	bne.n	800436c <HAL_ADC_ConfigChannel+0x810>
 8004368:	4a16      	ldr	r2, [pc, #88]	@ (80043c4 <HAL_ADC_ConfigChannel+0x868>)
 800436a:	e000      	b.n	800436e <HAL_ADC_ConfigChannel+0x812>
 800436c:	4a10      	ldr	r2, [pc, #64]	@ (80043b0 <HAL_ADC_ConfigChannel+0x854>)
 800436e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004372:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f7fe ff10 	bl	800319e <LL_ADC_SetCommonPathInternalCh>
 800437e:	e00c      	b.n	800439a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004384:	f043 0220 	orr.w	r2, r3, #32
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004392:	e002      	b.n	800439a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004394:	bf00      	nop
 8004396:	e000      	b.n	800439a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004398:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80043a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	37d8      	adds	r7, #216	@ 0xd8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	50000700 	.word	0x50000700
 80043b4:	c3210000 	.word	0xc3210000
 80043b8:	90c00010 	.word	0x90c00010
 80043bc:	50000600 	.word	0x50000600
 80043c0:	50000100 	.word	0x50000100
 80043c4:	50000300 	.word	0x50000300
 80043c8:	20000158 	.word	0x20000158
 80043cc:	053e2d63 	.word	0x053e2d63
 80043d0:	c7520000 	.word	0xc7520000
 80043d4:	50000500 	.word	0x50000500
 80043d8:	cb840000 	.word	0xcb840000

080043dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff f8a7 	bl	8003540 <LL_ADC_IsEnabled>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d176      	bne.n	80044e6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	4b3c      	ldr	r3, [pc, #240]	@ (80044f0 <ADC_Enable+0x114>)
 8004400:	4013      	ands	r3, r2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00d      	beq.n	8004422 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440a:	f043 0210 	orr.w	r2, r3, #16
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004416:	f043 0201 	orr.w	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e062      	b.n	80044e8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff f862 	bl	80034f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004434:	d004      	beq.n	8004440 <ADC_Enable+0x64>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a2e      	ldr	r2, [pc, #184]	@ (80044f4 <ADC_Enable+0x118>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d101      	bne.n	8004444 <ADC_Enable+0x68>
 8004440:	4b2d      	ldr	r3, [pc, #180]	@ (80044f8 <ADC_Enable+0x11c>)
 8004442:	e000      	b.n	8004446 <ADC_Enable+0x6a>
 8004444:	4b2d      	ldr	r3, [pc, #180]	@ (80044fc <ADC_Enable+0x120>)
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe febc 	bl	80031c4 <LL_ADC_GetCommonPathInternalCh>
 800444c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800444e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004452:	2b00      	cmp	r3, #0
 8004454:	d013      	beq.n	800447e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004456:	4b2a      	ldr	r3, [pc, #168]	@ (8004500 <ADC_Enable+0x124>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	099b      	lsrs	r3, r3, #6
 800445c:	4a29      	ldr	r2, [pc, #164]	@ (8004504 <ADC_Enable+0x128>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	099b      	lsrs	r3, r3, #6
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	4613      	mov	r3, r2
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004470:	e002      	b.n	8004478 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	3b01      	subs	r3, #1
 8004476:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f9      	bne.n	8004472 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800447e:	f7fe fe6f 	bl	8003160 <HAL_GetTick>
 8004482:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004484:	e028      	b.n	80044d8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff f858 	bl	8003540 <LL_ADC_IsEnabled>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d104      	bne.n	80044a0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff f828 	bl	80034f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044a0:	f7fe fe5e 	bl	8003160 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d914      	bls.n	80044d8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d00d      	beq.n	80044d8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c0:	f043 0210 	orr.w	r2, r3, #16
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044cc:	f043 0201 	orr.w	r2, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e007      	b.n	80044e8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d1cf      	bne.n	8004486 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	8000003f 	.word	0x8000003f
 80044f4:	50000100 	.word	0x50000100
 80044f8:	50000300 	.word	0x50000300
 80044fc:	50000700 	.word	0x50000700
 8004500:	20000158 	.word	0x20000158
 8004504:	053e2d63 	.word	0x053e2d63

08004508 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff f826 	bl	8003566 <LL_ADC_IsDisableOngoing>
 800451a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff f80d 	bl	8003540 <LL_ADC_IsEnabled>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d047      	beq.n	80045bc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d144      	bne.n	80045bc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 030d 	and.w	r3, r3, #13
 800453c:	2b01      	cmp	r3, #1
 800453e:	d10c      	bne.n	800455a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f7fe ffe7 	bl	8003518 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2203      	movs	r2, #3
 8004550:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004552:	f7fe fe05 	bl	8003160 <HAL_GetTick>
 8004556:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004558:	e029      	b.n	80045ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800455e:	f043 0210 	orr.w	r2, r3, #16
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456a:	f043 0201 	orr.w	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e023      	b.n	80045be <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004576:	f7fe fdf3 	bl	8003160 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d914      	bls.n	80045ae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00d      	beq.n	80045ae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004596:	f043 0210 	orr.w	r2, r3, #16
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a2:	f043 0201 	orr.w	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e007      	b.n	80045be <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1dc      	bne.n	8004576 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d14b      	bne.n	8004678 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d021      	beq.n	800463e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fe8c 	bl	800331c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d032      	beq.n	8004670 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d12b      	bne.n	8004670 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800461c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004628:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d11f      	bne.n	8004670 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004634:	f043 0201 	orr.w	r2, r3, #1
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800463c:	e018      	b.n	8004670 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d111      	bne.n	8004670 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004650:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800465c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004668:	f043 0201 	orr.w	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f7ff fa55 	bl	8003b20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004676:	e00e      	b.n	8004696 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f7ff fa5f 	bl	8003b48 <HAL_ADC_ErrorCallback>
}
 800468a:	e004      	b.n	8004696 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	4798      	blx	r3
}
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7ff fa41 	bl	8003b34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046b2:	bf00      	nop
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b084      	sub	sp, #16
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d8:	f043 0204 	orr.w	r2, r3, #4
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f7ff fa31 	bl	8003b48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046e6:	bf00      	nop
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <LL_ADC_IsEnabled>:
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <LL_ADC_IsEnabled+0x18>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <LL_ADC_IsEnabled+0x1a>
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <LL_ADC_StartCalibration>:
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004726:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004730:	4313      	orrs	r3, r2
 8004732:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	609a      	str	r2, [r3, #8]
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <LL_ADC_IsCalibrationOnGoing>:
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004756:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800475a:	d101      	bne.n	8004760 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <LL_ADC_REG_IsConversionOngoing>:
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b04      	cmp	r3, #4
 8004780:	d101      	bne.n	8004786 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800479e:	2300      	movs	r3, #0
 80047a0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_ADCEx_Calibration_Start+0x1c>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e04d      	b.n	800484c <HAL_ADCEx_Calibration_Start+0xb8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff fea5 	bl	8004508 <ADC_Disable>
 80047be:	4603      	mov	r3, r0
 80047c0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d136      	bne.n	8004836 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047cc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80047d0:	f023 0302 	bic.w	r3, r3, #2
 80047d4:	f043 0202 	orr.w	r2, r3, #2
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6839      	ldr	r1, [r7, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff ff96 	bl	8004714 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80047e8:	e014      	b.n	8004814 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	3301      	adds	r3, #1
 80047ee:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4a18      	ldr	r2, [pc, #96]	@ (8004854 <HAL_ADCEx_Calibration_Start+0xc0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d90d      	bls.n	8004814 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fc:	f023 0312 	bic.w	r3, r3, #18
 8004800:	f043 0210 	orr.w	r2, r3, #16
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e01b      	b.n	800484c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff ff94 	bl	8004746 <LL_ADC_IsCalibrationOnGoing>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e2      	bne.n	80047ea <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004828:	f023 0303 	bic.w	r3, r3, #3
 800482c:	f043 0201 	orr.w	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004834:	e005      	b.n	8004842 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483a:	f043 0210 	orr.w	r2, r3, #16
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800484a:	7bfb      	ldrb	r3, [r7, #15]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	0004de01 	.word	0x0004de01

08004858 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b0a1      	sub	sp, #132	@ 0x84
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004872:	2302      	movs	r3, #2
 8004874:	e0e7      	b.n	8004a46 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800487e:	2300      	movs	r3, #0
 8004880:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004882:	2300      	movs	r3, #0
 8004884:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800488e:	d102      	bne.n	8004896 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004890:	4b6f      	ldr	r3, [pc, #444]	@ (8004a50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004892:	60bb      	str	r3, [r7, #8]
 8004894:	e009      	b.n	80048aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a6e      	ldr	r2, [pc, #440]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d102      	bne.n	80048a6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80048a0:	4b6d      	ldr	r3, [pc, #436]	@ (8004a58 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80048a2:	60bb      	str	r3, [r7, #8]
 80048a4:	e001      	b.n	80048aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80048a6:	2300      	movs	r3, #0
 80048a8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10b      	bne.n	80048c8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b4:	f043 0220 	orr.w	r2, r3, #32
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0be      	b.n	8004a46 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff ff4f 	bl	800476e <LL_ADC_REG_IsConversionOngoing>
 80048d0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff ff49 	bl	800476e <LL_ADC_REG_IsConversionOngoing>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f040 80a0 	bne.w	8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80048e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f040 809c 	bne.w	8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048f4:	d004      	beq.n	8004900 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a55      	ldr	r2, [pc, #340]	@ (8004a50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d101      	bne.n	8004904 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004900:	4b56      	ldr	r3, [pc, #344]	@ (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004902:	e000      	b.n	8004906 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004904:	4b56      	ldr	r3, [pc, #344]	@ (8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004906:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d04b      	beq.n	80049a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004910:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	6859      	ldr	r1, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004922:	035b      	lsls	r3, r3, #13
 8004924:	430b      	orrs	r3, r1
 8004926:	431a      	orrs	r2, r3
 8004928:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800492a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004934:	d004      	beq.n	8004940 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a45      	ldr	r2, [pc, #276]	@ (8004a50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d10f      	bne.n	8004960 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004940:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004944:	f7ff fed3 	bl	80046ee <LL_ADC_IsEnabled>
 8004948:	4604      	mov	r4, r0
 800494a:	4841      	ldr	r0, [pc, #260]	@ (8004a50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800494c:	f7ff fecf 	bl	80046ee <LL_ADC_IsEnabled>
 8004950:	4603      	mov	r3, r0
 8004952:	4323      	orrs	r3, r4
 8004954:	2b00      	cmp	r3, #0
 8004956:	bf0c      	ite	eq
 8004958:	2301      	moveq	r3, #1
 800495a:	2300      	movne	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	e012      	b.n	8004986 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004960:	483c      	ldr	r0, [pc, #240]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004962:	f7ff fec4 	bl	80046ee <LL_ADC_IsEnabled>
 8004966:	4604      	mov	r4, r0
 8004968:	483b      	ldr	r0, [pc, #236]	@ (8004a58 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800496a:	f7ff fec0 	bl	80046ee <LL_ADC_IsEnabled>
 800496e:	4603      	mov	r3, r0
 8004970:	431c      	orrs	r4, r3
 8004972:	483c      	ldr	r0, [pc, #240]	@ (8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004974:	f7ff febb 	bl	80046ee <LL_ADC_IsEnabled>
 8004978:	4603      	mov	r3, r0
 800497a:	4323      	orrs	r3, r4
 800497c:	2b00      	cmp	r3, #0
 800497e:	bf0c      	ite	eq
 8004980:	2301      	moveq	r3, #1
 8004982:	2300      	movne	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d056      	beq.n	8004a38 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800498a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004992:	f023 030f 	bic.w	r3, r3, #15
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	6811      	ldr	r1, [r2, #0]
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	6892      	ldr	r2, [r2, #8]
 800499e:	430a      	orrs	r2, r1
 80049a0:	431a      	orrs	r2, r3
 80049a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049a4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049a6:	e047      	b.n	8004a38 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80049a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049b2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049bc:	d004      	beq.n	80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a23      	ldr	r2, [pc, #140]	@ (8004a50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d10f      	bne.n	80049e8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80049c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80049cc:	f7ff fe8f 	bl	80046ee <LL_ADC_IsEnabled>
 80049d0:	4604      	mov	r4, r0
 80049d2:	481f      	ldr	r0, [pc, #124]	@ (8004a50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049d4:	f7ff fe8b 	bl	80046ee <LL_ADC_IsEnabled>
 80049d8:	4603      	mov	r3, r0
 80049da:	4323      	orrs	r3, r4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	bf0c      	ite	eq
 80049e0:	2301      	moveq	r3, #1
 80049e2:	2300      	movne	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	e012      	b.n	8004a0e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80049e8:	481a      	ldr	r0, [pc, #104]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80049ea:	f7ff fe80 	bl	80046ee <LL_ADC_IsEnabled>
 80049ee:	4604      	mov	r4, r0
 80049f0:	4819      	ldr	r0, [pc, #100]	@ (8004a58 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80049f2:	f7ff fe7c 	bl	80046ee <LL_ADC_IsEnabled>
 80049f6:	4603      	mov	r3, r0
 80049f8:	431c      	orrs	r4, r3
 80049fa:	481a      	ldr	r0, [pc, #104]	@ (8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80049fc:	f7ff fe77 	bl	80046ee <LL_ADC_IsEnabled>
 8004a00:	4603      	mov	r3, r0
 8004a02:	4323      	orrs	r3, r4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	bf0c      	ite	eq
 8004a08:	2301      	moveq	r3, #1
 8004a0a:	2300      	movne	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d012      	beq.n	8004a38 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004a1a:	f023 030f 	bic.w	r3, r3, #15
 8004a1e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004a20:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a22:	e009      	b.n	8004a38 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a28:	f043 0220 	orr.w	r2, r3, #32
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004a36:	e000      	b.n	8004a3a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a42:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3784      	adds	r7, #132	@ 0x84
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd90      	pop	{r4, r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	50000100 	.word	0x50000100
 8004a54:	50000400 	.word	0x50000400
 8004a58:	50000500 	.word	0x50000500
 8004a5c:	50000300 	.word	0x50000300
 8004a60:	50000700 	.word	0x50000700
 8004a64:	50000600 	.word	0x50000600

08004a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a78:	4b0c      	ldr	r3, [pc, #48]	@ (8004aac <__NVIC_SetPriorityGrouping+0x44>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a84:	4013      	ands	r3, r2
 8004a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a9a:	4a04      	ldr	r2, [pc, #16]	@ (8004aac <__NVIC_SetPriorityGrouping+0x44>)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	60d3      	str	r3, [r2, #12]
}
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	e000ed00 	.word	0xe000ed00

08004ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ab4:	4b04      	ldr	r3, [pc, #16]	@ (8004ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	0a1b      	lsrs	r3, r3, #8
 8004aba:	f003 0307 	and.w	r3, r3, #7
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	e000ed00 	.word	0xe000ed00

08004acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	db0b      	blt.n	8004af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ade:	79fb      	ldrb	r3, [r7, #7]
 8004ae0:	f003 021f 	and.w	r2, r3, #31
 8004ae4:	4907      	ldr	r1, [pc, #28]	@ (8004b04 <__NVIC_EnableIRQ+0x38>)
 8004ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	2001      	movs	r0, #1
 8004aee:	fa00 f202 	lsl.w	r2, r0, r2
 8004af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	e000e100 	.word	0xe000e100

08004b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	6039      	str	r1, [r7, #0]
 8004b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	db0a      	blt.n	8004b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	490c      	ldr	r1, [pc, #48]	@ (8004b54 <__NVIC_SetPriority+0x4c>)
 8004b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b26:	0112      	lsls	r2, r2, #4
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b30:	e00a      	b.n	8004b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	4908      	ldr	r1, [pc, #32]	@ (8004b58 <__NVIC_SetPriority+0x50>)
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	3b04      	subs	r3, #4
 8004b40:	0112      	lsls	r2, r2, #4
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	440b      	add	r3, r1
 8004b46:	761a      	strb	r2, [r3, #24]
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	e000e100 	.word	0xe000e100
 8004b58:	e000ed00 	.word	0xe000ed00

08004b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b089      	sub	sp, #36	@ 0x24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f1c3 0307 	rsb	r3, r3, #7
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	bf28      	it	cs
 8004b7a:	2304      	movcs	r3, #4
 8004b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	3304      	adds	r3, #4
 8004b82:	2b06      	cmp	r3, #6
 8004b84:	d902      	bls.n	8004b8c <NVIC_EncodePriority+0x30>
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	3b03      	subs	r3, #3
 8004b8a:	e000      	b.n	8004b8e <NVIC_EncodePriority+0x32>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b90:	f04f 32ff 	mov.w	r2, #4294967295
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	43da      	mvns	r2, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	401a      	ands	r2, r3
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bae:	43d9      	mvns	r1, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bb4:	4313      	orrs	r3, r2
         );
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3724      	adds	r7, #36	@ 0x24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bd4:	d301      	bcc.n	8004bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e00f      	b.n	8004bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bda:	4a0a      	ldr	r2, [pc, #40]	@ (8004c04 <SysTick_Config+0x40>)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004be2:	210f      	movs	r1, #15
 8004be4:	f04f 30ff 	mov.w	r0, #4294967295
 8004be8:	f7ff ff8e 	bl	8004b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bec:	4b05      	ldr	r3, [pc, #20]	@ (8004c04 <SysTick_Config+0x40>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bf2:	4b04      	ldr	r3, [pc, #16]	@ (8004c04 <SysTick_Config+0x40>)
 8004bf4:	2207      	movs	r2, #7
 8004bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	e000e010 	.word	0xe000e010

08004c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff ff29 	bl	8004a68 <__NVIC_SetPriorityGrouping>
}
 8004c16:	bf00      	nop
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b086      	sub	sp, #24
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	4603      	mov	r3, r0
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
 8004c2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c2c:	f7ff ff40 	bl	8004ab0 <__NVIC_GetPriorityGrouping>
 8004c30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	6978      	ldr	r0, [r7, #20]
 8004c38:	f7ff ff90 	bl	8004b5c <NVIC_EncodePriority>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c42:	4611      	mov	r1, r2
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff ff5f 	bl	8004b08 <__NVIC_SetPriority>
}
 8004c4a:	bf00      	nop
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	4603      	mov	r3, r0
 8004c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff ff33 	bl	8004acc <__NVIC_EnableIRQ>
}
 8004c66:	bf00      	nop
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b082      	sub	sp, #8
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff ffa4 	bl	8004bc4 <SysTick_Config>
 8004c7c:	4603      	mov	r3, r0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e08d      	b.n	8004db6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	4b47      	ldr	r3, [pc, #284]	@ (8004dc0 <HAL_DMA_Init+0x138>)
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d80f      	bhi.n	8004cc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	4b45      	ldr	r3, [pc, #276]	@ (8004dc4 <HAL_DMA_Init+0x13c>)
 8004cae:	4413      	add	r3, r2
 8004cb0:	4a45      	ldr	r2, [pc, #276]	@ (8004dc8 <HAL_DMA_Init+0x140>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	091b      	lsrs	r3, r3, #4
 8004cb8:	009a      	lsls	r2, r3, #2
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a42      	ldr	r2, [pc, #264]	@ (8004dcc <HAL_DMA_Init+0x144>)
 8004cc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cc4:	e00e      	b.n	8004ce4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	4b40      	ldr	r3, [pc, #256]	@ (8004dd0 <HAL_DMA_Init+0x148>)
 8004cce:	4413      	add	r3, r2
 8004cd0:	4a3d      	ldr	r2, [pc, #244]	@ (8004dc8 <HAL_DMA_Init+0x140>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	091b      	lsrs	r3, r3, #4
 8004cd8:	009a      	lsls	r2, r3, #2
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a3c      	ldr	r2, [pc, #240]	@ (8004dd4 <HAL_DMA_Init+0x14c>)
 8004ce2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fa76 	bl	8005228 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d44:	d102      	bne.n	8004d4c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d60:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d010      	beq.n	8004d8c <HAL_DMA_Init+0x104>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d80c      	bhi.n	8004d8c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fa96 	bl	80052a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d88:	605a      	str	r2, [r3, #4]
 8004d8a:	e008      	b.n	8004d9e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40020407 	.word	0x40020407
 8004dc4:	bffdfff8 	.word	0xbffdfff8
 8004dc8:	cccccccd 	.word	0xcccccccd
 8004dcc:	40020000 	.word	0x40020000
 8004dd0:	bffdfbf8 	.word	0xbffdfbf8
 8004dd4:	40020400 	.word	0x40020400

08004dd8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_DMA_Start_IT+0x20>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e066      	b.n	8004ec6 <HAL_DMA_Start_IT+0xee>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d155      	bne.n	8004eb8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0201 	bic.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f9bb 	bl	80051ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d008      	beq.n	8004e50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 020e 	orr.w	r2, r2, #14
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e00f      	b.n	8004e70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0204 	bic.w	r2, r2, #4
 8004e5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 020a 	orr.w	r2, r2, #10
 8004e6e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d007      	beq.n	8004e8e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e8c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d007      	beq.n	8004ea6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ea4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0201 	orr.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	e005      	b.n	8004ec4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d005      	beq.n	8004ef2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	73fb      	strb	r3, [r7, #15]
 8004ef0:	e037      	b.n	8004f62 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 020e 	bic.w	r2, r2, #14
 8004f00:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f10:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0201 	bic.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f26:	f003 021f 	and.w	r2, r3, #31
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2e:	2101      	movs	r1, #1
 8004f30:	fa01 f202 	lsl.w	r2, r1, r2
 8004f34:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f3e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00c      	beq.n	8004f62 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f56:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f60:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d00d      	beq.n	8004fb4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	73fb      	strb	r3, [r7, #15]
 8004fb2:	e047      	b.n	8005044 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 020e 	bic.w	r2, r2, #14
 8004fc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0201 	bic.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fe2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe8:	f003 021f 	and.w	r2, r3, #31
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ff6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005000:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00c      	beq.n	8005024 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005014:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005018:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005022:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	4798      	blx	r3
    }
  }
  return status;
 8005044:	7bfb      	ldrb	r3, [r7, #15]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506a:	f003 031f 	and.w	r3, r3, #31
 800506e:	2204      	movs	r2, #4
 8005070:	409a      	lsls	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4013      	ands	r3, r2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d026      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x7a>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d021      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b00      	cmp	r3, #0
 8005090:	d107      	bne.n	80050a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0204 	bic.w	r2, r2, #4
 80050a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a6:	f003 021f 	and.w	r2, r3, #31
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ae:	2104      	movs	r1, #4
 80050b0:	fa01 f202 	lsl.w	r2, r1, r2
 80050b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d071      	beq.n	80051a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80050c6:	e06c      	b.n	80051a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050cc:	f003 031f 	and.w	r3, r3, #31
 80050d0:	2202      	movs	r2, #2
 80050d2:	409a      	lsls	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d02e      	beq.n	800513a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d029      	beq.n	800513a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10b      	bne.n	800510c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 020a 	bic.w	r2, r2, #10
 8005102:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005110:	f003 021f 	and.w	r2, r3, #31
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005118:	2102      	movs	r1, #2
 800511a:	fa01 f202 	lsl.w	r2, r1, r2
 800511e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d038      	beq.n	80051a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005138:	e033      	b.n	80051a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513e:	f003 031f 	and.w	r3, r3, #31
 8005142:	2208      	movs	r2, #8
 8005144:	409a      	lsls	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4013      	ands	r3, r2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d02a      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b00      	cmp	r3, #0
 8005156:	d025      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 020e 	bic.w	r2, r2, #14
 8005166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516c:	f003 021f 	and.w	r2, r3, #31
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005174:	2101      	movs	r1, #1
 8005176:	fa01 f202 	lsl.w	r2, r1, r2
 800517a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
}
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051da:	f003 021f 	and.w	r2, r3, #31
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	2101      	movs	r1, #1
 80051e4:	fa01 f202 	lsl.w	r2, r1, r2
 80051e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b10      	cmp	r3, #16
 80051f8:	d108      	bne.n	800520c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800520a:	e007      	b.n	800521c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	60da      	str	r2, [r3, #12]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	461a      	mov	r2, r3
 8005236:	4b16      	ldr	r3, [pc, #88]	@ (8005290 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005238:	429a      	cmp	r2, r3
 800523a:	d802      	bhi.n	8005242 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800523c:	4b15      	ldr	r3, [pc, #84]	@ (8005294 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	e001      	b.n	8005246 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005242:	4b15      	ldr	r3, [pc, #84]	@ (8005298 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005244:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	b2db      	uxtb	r3, r3
 8005250:	3b08      	subs	r3, #8
 8005252:	4a12      	ldr	r2, [pc, #72]	@ (800529c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005254:	fba2 2303 	umull	r2, r3, r2, r3
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005260:	089b      	lsrs	r3, r3, #2
 8005262:	009a      	lsls	r2, r3, #2
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	4413      	add	r3, r2
 8005268:	461a      	mov	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a0b      	ldr	r2, [pc, #44]	@ (80052a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005272:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f003 031f 	and.w	r3, r3, #31
 800527a:	2201      	movs	r2, #1
 800527c:	409a      	lsls	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40020407 	.word	0x40020407
 8005294:	40020800 	.word	0x40020800
 8005298:	40020820 	.word	0x40020820
 800529c:	cccccccd 	.word	0xcccccccd
 80052a0:	40020880 	.word	0x40020880

080052a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4b0b      	ldr	r3, [pc, #44]	@ (80052e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	461a      	mov	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a08      	ldr	r2, [pc, #32]	@ (80052e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80052c6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	f003 031f 	and.w	r3, r3, #31
 80052d0:	2201      	movs	r2, #1
 80052d2:	409a      	lsls	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80052d8:	bf00      	nop
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	1000823f 	.word	0x1000823f
 80052e8:	40020940 	.word	0x40020940

080052ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80052fa:	e15a      	b.n	80055b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	2101      	movs	r1, #1
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	fa01 f303 	lsl.w	r3, r1, r3
 8005308:	4013      	ands	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 814c 	beq.w	80055ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	2b01      	cmp	r3, #1
 800531e:	d005      	beq.n	800532c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005328:	2b02      	cmp	r3, #2
 800532a:	d130      	bne.n	800538e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	2203      	movs	r2, #3
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	43db      	mvns	r3, r3
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4013      	ands	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005362:	2201      	movs	r2, #1
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	43db      	mvns	r3, r3
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4013      	ands	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	091b      	lsrs	r3, r3, #4
 8005378:	f003 0201 	and.w	r2, r3, #1
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	2b03      	cmp	r3, #3
 8005398:	d017      	beq.n	80053ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	2203      	movs	r2, #3
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	43db      	mvns	r3, r3
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4013      	ands	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d123      	bne.n	800541e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	08da      	lsrs	r2, r3, #3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3208      	adds	r2, #8
 80053de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	220f      	movs	r2, #15
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43db      	mvns	r3, r3
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4013      	ands	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	08da      	lsrs	r2, r3, #3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3208      	adds	r2, #8
 8005418:	6939      	ldr	r1, [r7, #16]
 800541a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	2203      	movs	r2, #3
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43db      	mvns	r3, r3
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4013      	ands	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f003 0203 	and.w	r2, r3, #3
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 80a6 	beq.w	80055ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005460:	4b5b      	ldr	r3, [pc, #364]	@ (80055d0 <HAL_GPIO_Init+0x2e4>)
 8005462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005464:	4a5a      	ldr	r2, [pc, #360]	@ (80055d0 <HAL_GPIO_Init+0x2e4>)
 8005466:	f043 0301 	orr.w	r3, r3, #1
 800546a:	6613      	str	r3, [r2, #96]	@ 0x60
 800546c:	4b58      	ldr	r3, [pc, #352]	@ (80055d0 <HAL_GPIO_Init+0x2e4>)
 800546e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005478:	4a56      	ldr	r2, [pc, #344]	@ (80055d4 <HAL_GPIO_Init+0x2e8>)
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	089b      	lsrs	r3, r3, #2
 800547e:	3302      	adds	r3, #2
 8005480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005484:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	220f      	movs	r2, #15
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	43db      	mvns	r3, r3
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4013      	ands	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80054a2:	d01f      	beq.n	80054e4 <HAL_GPIO_Init+0x1f8>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a4c      	ldr	r2, [pc, #304]	@ (80055d8 <HAL_GPIO_Init+0x2ec>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d019      	beq.n	80054e0 <HAL_GPIO_Init+0x1f4>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a4b      	ldr	r2, [pc, #300]	@ (80055dc <HAL_GPIO_Init+0x2f0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d013      	beq.n	80054dc <HAL_GPIO_Init+0x1f0>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a4a      	ldr	r2, [pc, #296]	@ (80055e0 <HAL_GPIO_Init+0x2f4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00d      	beq.n	80054d8 <HAL_GPIO_Init+0x1ec>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a49      	ldr	r2, [pc, #292]	@ (80055e4 <HAL_GPIO_Init+0x2f8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d007      	beq.n	80054d4 <HAL_GPIO_Init+0x1e8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a48      	ldr	r2, [pc, #288]	@ (80055e8 <HAL_GPIO_Init+0x2fc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d101      	bne.n	80054d0 <HAL_GPIO_Init+0x1e4>
 80054cc:	2305      	movs	r3, #5
 80054ce:	e00a      	b.n	80054e6 <HAL_GPIO_Init+0x1fa>
 80054d0:	2306      	movs	r3, #6
 80054d2:	e008      	b.n	80054e6 <HAL_GPIO_Init+0x1fa>
 80054d4:	2304      	movs	r3, #4
 80054d6:	e006      	b.n	80054e6 <HAL_GPIO_Init+0x1fa>
 80054d8:	2303      	movs	r3, #3
 80054da:	e004      	b.n	80054e6 <HAL_GPIO_Init+0x1fa>
 80054dc:	2302      	movs	r3, #2
 80054de:	e002      	b.n	80054e6 <HAL_GPIO_Init+0x1fa>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e000      	b.n	80054e6 <HAL_GPIO_Init+0x1fa>
 80054e4:	2300      	movs	r3, #0
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	f002 0203 	and.w	r2, r2, #3
 80054ec:	0092      	lsls	r2, r2, #2
 80054ee:	4093      	lsls	r3, r2
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054f6:	4937      	ldr	r1, [pc, #220]	@ (80055d4 <HAL_GPIO_Init+0x2e8>)
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	089b      	lsrs	r3, r3, #2
 80054fc:	3302      	adds	r3, #2
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005504:	4b39      	ldr	r3, [pc, #228]	@ (80055ec <HAL_GPIO_Init+0x300>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	43db      	mvns	r3, r3
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4013      	ands	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005528:	4a30      	ldr	r2, [pc, #192]	@ (80055ec <HAL_GPIO_Init+0x300>)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800552e:	4b2f      	ldr	r3, [pc, #188]	@ (80055ec <HAL_GPIO_Init+0x300>)
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	43db      	mvns	r3, r3
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4013      	ands	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005552:	4a26      	ldr	r2, [pc, #152]	@ (80055ec <HAL_GPIO_Init+0x300>)
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005558:	4b24      	ldr	r3, [pc, #144]	@ (80055ec <HAL_GPIO_Init+0x300>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	43db      	mvns	r3, r3
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4013      	ands	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800557c:	4a1b      	ldr	r2, [pc, #108]	@ (80055ec <HAL_GPIO_Init+0x300>)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005582:	4b1a      	ldr	r3, [pc, #104]	@ (80055ec <HAL_GPIO_Init+0x300>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	43db      	mvns	r3, r3
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4013      	ands	r3, r2
 8005590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80055a6:	4a11      	ldr	r2, [pc, #68]	@ (80055ec <HAL_GPIO_Init+0x300>)
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	3301      	adds	r3, #1
 80055b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	fa22 f303 	lsr.w	r3, r2, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f47f ae9d 	bne.w	80052fc <HAL_GPIO_Init+0x10>
  }
}
 80055c2:	bf00      	nop
 80055c4:	bf00      	nop
 80055c6:	371c      	adds	r7, #28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	40021000 	.word	0x40021000
 80055d4:	40010000 	.word	0x40010000
 80055d8:	48000400 	.word	0x48000400
 80055dc:	48000800 	.word	0x48000800
 80055e0:	48000c00 	.word	0x48000c00
 80055e4:	48001000 	.word	0x48001000
 80055e8:	48001400 	.word	0x48001400
 80055ec:	40010400 	.word	0x40010400

080055f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	807b      	strh	r3, [r7, #2]
 80055fc:	4613      	mov	r3, r2
 80055fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005600:	787b      	ldrb	r3, [r7, #1]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005606:	887a      	ldrh	r2, [r7, #2]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800560c:	e002      	b.n	8005614 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800560e:	887a      	ldrh	r2, [r7, #2]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800562a:	4b08      	ldr	r3, [pc, #32]	@ (800564c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800562c:	695a      	ldr	r2, [r3, #20]
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	4013      	ands	r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d006      	beq.n	8005644 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005636:	4a05      	ldr	r2, [pc, #20]	@ (800564c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005638:	88fb      	ldrh	r3, [r7, #6]
 800563a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800563c:	88fb      	ldrh	r3, [r7, #6]
 800563e:	4618      	mov	r0, r3
 8005640:	f7fc fcb7 	bl	8001fb2 <HAL_GPIO_EXTI_Callback>
  }
}
 8005644:	bf00      	nop
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40010400 	.word	0x40010400

08005650 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d141      	bne.n	80056e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800565e:	4b4b      	ldr	r3, [pc, #300]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800566a:	d131      	bne.n	80056d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800566c:	4b47      	ldr	r3, [pc, #284]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800566e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005672:	4a46      	ldr	r2, [pc, #280]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005678:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800567c:	4b43      	ldr	r3, [pc, #268]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005684:	4a41      	ldr	r2, [pc, #260]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005686:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800568a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800568c:	4b40      	ldr	r3, [pc, #256]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2232      	movs	r2, #50	@ 0x32
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	4a3f      	ldr	r2, [pc, #252]	@ (8005794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005698:	fba2 2303 	umull	r2, r3, r2, r3
 800569c:	0c9b      	lsrs	r3, r3, #18
 800569e:	3301      	adds	r3, #1
 80056a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056a2:	e002      	b.n	80056aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056aa:	4b38      	ldr	r3, [pc, #224]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056b6:	d102      	bne.n	80056be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f2      	bne.n	80056a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056be:	4b33      	ldr	r3, [pc, #204]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ca:	d158      	bne.n	800577e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e057      	b.n	8005780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056d0:	4b2e      	ldr	r3, [pc, #184]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056d6:	4a2d      	ldr	r2, [pc, #180]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80056e0:	e04d      	b.n	800577e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056e8:	d141      	bne.n	800576e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056ea:	4b28      	ldr	r3, [pc, #160]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80056f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f6:	d131      	bne.n	800575c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056f8:	4b24      	ldr	r3, [pc, #144]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056fe:	4a23      	ldr	r2, [pc, #140]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005704:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005708:	4b20      	ldr	r3, [pc, #128]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005710:	4a1e      	ldr	r2, [pc, #120]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005712:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005716:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005718:	4b1d      	ldr	r3, [pc, #116]	@ (8005790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2232      	movs	r2, #50	@ 0x32
 800571e:	fb02 f303 	mul.w	r3, r2, r3
 8005722:	4a1c      	ldr	r2, [pc, #112]	@ (8005794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005724:	fba2 2303 	umull	r2, r3, r2, r3
 8005728:	0c9b      	lsrs	r3, r3, #18
 800572a:	3301      	adds	r3, #1
 800572c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800572e:	e002      	b.n	8005736 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3b01      	subs	r3, #1
 8005734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005736:	4b15      	ldr	r3, [pc, #84]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800573e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005742:	d102      	bne.n	800574a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f2      	bne.n	8005730 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800574a:	4b10      	ldr	r3, [pc, #64]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005756:	d112      	bne.n	800577e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e011      	b.n	8005780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800575c:	4b0b      	ldr	r3, [pc, #44]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800575e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005762:	4a0a      	ldr	r2, [pc, #40]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005768:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800576c:	e007      	b.n	800577e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800576e:	4b07      	ldr	r3, [pc, #28]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005776:	4a05      	ldr	r2, [pc, #20]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005778:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800577c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	40007000 	.word	0x40007000
 8005790:	20000158 	.word	0x20000158
 8005794:	431bde83 	.word	0x431bde83

08005798 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800579c:	4b05      	ldr	r3, [pc, #20]	@ (80057b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	4a04      	ldr	r2, [pc, #16]	@ (80057b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057a6:	6093      	str	r3, [r2, #8]
}
 80057a8:	bf00      	nop
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40007000 	.word	0x40007000

080057b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e2fe      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d075      	beq.n	80058c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057d6:	4b97      	ldr	r3, [pc, #604]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 030c 	and.w	r3, r3, #12
 80057de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057e0:	4b94      	ldr	r3, [pc, #592]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f003 0303 	and.w	r3, r3, #3
 80057e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b0c      	cmp	r3, #12
 80057ee:	d102      	bne.n	80057f6 <HAL_RCC_OscConfig+0x3e>
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d002      	beq.n	80057fc <HAL_RCC_OscConfig+0x44>
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d10b      	bne.n	8005814 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057fc:	4b8d      	ldr	r3, [pc, #564]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d05b      	beq.n	80058c0 <HAL_RCC_OscConfig+0x108>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d157      	bne.n	80058c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e2d9      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800581c:	d106      	bne.n	800582c <HAL_RCC_OscConfig+0x74>
 800581e:	4b85      	ldr	r3, [pc, #532]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a84      	ldr	r2, [pc, #528]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	e01d      	b.n	8005868 <HAL_RCC_OscConfig+0xb0>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005834:	d10c      	bne.n	8005850 <HAL_RCC_OscConfig+0x98>
 8005836:	4b7f      	ldr	r3, [pc, #508]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a7e      	ldr	r2, [pc, #504]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 800583c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	4b7c      	ldr	r3, [pc, #496]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a7b      	ldr	r2, [pc, #492]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	e00b      	b.n	8005868 <HAL_RCC_OscConfig+0xb0>
 8005850:	4b78      	ldr	r3, [pc, #480]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a77      	ldr	r2, [pc, #476]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	4b75      	ldr	r3, [pc, #468]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a74      	ldr	r2, [pc, #464]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d013      	beq.n	8005898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fd fc76 	bl	8003160 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005878:	f7fd fc72 	bl	8003160 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b64      	cmp	r3, #100	@ 0x64
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e29e      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800588a:	4b6a      	ldr	r3, [pc, #424]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0f0      	beq.n	8005878 <HAL_RCC_OscConfig+0xc0>
 8005896:	e014      	b.n	80058c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005898:	f7fd fc62 	bl	8003160 <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a0:	f7fd fc5e 	bl	8003160 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b64      	cmp	r3, #100	@ 0x64
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e28a      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058b2:	4b60      	ldr	r3, [pc, #384]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f0      	bne.n	80058a0 <HAL_RCC_OscConfig+0xe8>
 80058be:	e000      	b.n	80058c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d075      	beq.n	80059ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ce:	4b59      	ldr	r3, [pc, #356]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 030c 	and.w	r3, r3, #12
 80058d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058d8:	4b56      	ldr	r3, [pc, #344]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b0c      	cmp	r3, #12
 80058e6:	d102      	bne.n	80058ee <HAL_RCC_OscConfig+0x136>
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d002      	beq.n	80058f4 <HAL_RCC_OscConfig+0x13c>
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	d11f      	bne.n	8005934 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058f4:	4b4f      	ldr	r3, [pc, #316]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_RCC_OscConfig+0x154>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e25d      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590c:	4b49      	ldr	r3, [pc, #292]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	061b      	lsls	r3, r3, #24
 800591a:	4946      	ldr	r1, [pc, #280]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 800591c:	4313      	orrs	r3, r2
 800591e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005920:	4b45      	ldr	r3, [pc, #276]	@ (8005a38 <HAL_RCC_OscConfig+0x280>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	f7fd fbcf 	bl	80030c8 <HAL_InitTick>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d043      	beq.n	80059b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e249      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d023      	beq.n	8005984 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800593c:	4b3d      	ldr	r3, [pc, #244]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a3c      	ldr	r2, [pc, #240]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005948:	f7fd fc0a 	bl	8003160 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005950:	f7fd fc06 	bl	8003160 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e232      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005962:	4b34      	ldr	r3, [pc, #208]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0f0      	beq.n	8005950 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800596e:	4b31      	ldr	r3, [pc, #196]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	061b      	lsls	r3, r3, #24
 800597c:	492d      	ldr	r1, [pc, #180]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 800597e:	4313      	orrs	r3, r2
 8005980:	604b      	str	r3, [r1, #4]
 8005982:	e01a      	b.n	80059ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005984:	4b2b      	ldr	r3, [pc, #172]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a2a      	ldr	r2, [pc, #168]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 800598a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800598e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fd fbe6 	bl	8003160 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005998:	f7fd fbe2 	bl	8003160 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e20e      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059aa:	4b22      	ldr	r3, [pc, #136]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x1e0>
 80059b6:	e000      	b.n	80059ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d041      	beq.n	8005a4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d01c      	beq.n	8005a08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ce:	4b19      	ldr	r3, [pc, #100]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80059d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059d4:	4a17      	ldr	r2, [pc, #92]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80059d6:	f043 0301 	orr.w	r3, r3, #1
 80059da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059de:	f7fd fbbf 	bl	8003160 <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059e6:	f7fd fbbb 	bl	8003160 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e1e7      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 80059fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0ef      	beq.n	80059e6 <HAL_RCC_OscConfig+0x22e>
 8005a06:	e020      	b.n	8005a4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a08:	4b0a      	ldr	r3, [pc, #40]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a0e:	4a09      	ldr	r2, [pc, #36]	@ (8005a34 <HAL_RCC_OscConfig+0x27c>)
 8005a10:	f023 0301 	bic.w	r3, r3, #1
 8005a14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a18:	f7fd fba2 	bl	8003160 <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a1e:	e00d      	b.n	8005a3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a20:	f7fd fb9e 	bl	8003160 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d906      	bls.n	8005a3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e1ca      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
 8005a32:	bf00      	nop
 8005a34:	40021000 	.word	0x40021000
 8005a38:	2000015c 	.word	0x2000015c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a3c:	4b8c      	ldr	r3, [pc, #560]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1ea      	bne.n	8005a20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0304 	and.w	r3, r3, #4
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 80a6 	beq.w	8005ba4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a5c:	4b84      	ldr	r3, [pc, #528]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_RCC_OscConfig+0x2b4>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e000      	b.n	8005a6e <HAL_RCC_OscConfig+0x2b6>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00d      	beq.n	8005a8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a72:	4b7f      	ldr	r3, [pc, #508]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a76:	4a7e      	ldr	r2, [pc, #504]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a7e:	4b7c      	ldr	r3, [pc, #496]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a8e:	4b79      	ldr	r3, [pc, #484]	@ (8005c74 <HAL_RCC_OscConfig+0x4bc>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d118      	bne.n	8005acc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a9a:	4b76      	ldr	r3, [pc, #472]	@ (8005c74 <HAL_RCC_OscConfig+0x4bc>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a75      	ldr	r2, [pc, #468]	@ (8005c74 <HAL_RCC_OscConfig+0x4bc>)
 8005aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aa6:	f7fd fb5b 	bl	8003160 <HAL_GetTick>
 8005aaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aae:	f7fd fb57 	bl	8003160 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e183      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ac0:	4b6c      	ldr	r3, [pc, #432]	@ (8005c74 <HAL_RCC_OscConfig+0x4bc>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0f0      	beq.n	8005aae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d108      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x32e>
 8005ad4:	4b66      	ldr	r3, [pc, #408]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ada:	4a65      	ldr	r2, [pc, #404]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005adc:	f043 0301 	orr.w	r3, r3, #1
 8005ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ae4:	e024      	b.n	8005b30 <HAL_RCC_OscConfig+0x378>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	2b05      	cmp	r3, #5
 8005aec:	d110      	bne.n	8005b10 <HAL_RCC_OscConfig+0x358>
 8005aee:	4b60      	ldr	r3, [pc, #384]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af4:	4a5e      	ldr	r2, [pc, #376]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005af6:	f043 0304 	orr.w	r3, r3, #4
 8005afa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005afe:	4b5c      	ldr	r3, [pc, #368]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b04:	4a5a      	ldr	r2, [pc, #360]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b06:	f043 0301 	orr.w	r3, r3, #1
 8005b0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b0e:	e00f      	b.n	8005b30 <HAL_RCC_OscConfig+0x378>
 8005b10:	4b57      	ldr	r3, [pc, #348]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b16:	4a56      	ldr	r2, [pc, #344]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b18:	f023 0301 	bic.w	r3, r3, #1
 8005b1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b20:	4b53      	ldr	r3, [pc, #332]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b26:	4a52      	ldr	r2, [pc, #328]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b28:	f023 0304 	bic.w	r3, r3, #4
 8005b2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d016      	beq.n	8005b66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b38:	f7fd fb12 	bl	8003160 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b3e:	e00a      	b.n	8005b56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b40:	f7fd fb0e 	bl	8003160 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e138      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b56:	4b46      	ldr	r3, [pc, #280]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0ed      	beq.n	8005b40 <HAL_RCC_OscConfig+0x388>
 8005b64:	e015      	b.n	8005b92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b66:	f7fd fafb 	bl	8003160 <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b6c:	e00a      	b.n	8005b84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6e:	f7fd faf7 	bl	8003160 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e121      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b84:	4b3a      	ldr	r3, [pc, #232]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1ed      	bne.n	8005b6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b92:	7ffb      	ldrb	r3, [r7, #31]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d105      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b98:	4b35      	ldr	r3, [pc, #212]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b9c:	4a34      	ldr	r2, [pc, #208]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005b9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ba2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d03c      	beq.n	8005c2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d01c      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005bc0:	f043 0301 	orr.w	r3, r3, #1
 8005bc4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc8:	f7fd faca 	bl	8003160 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bd0:	f7fd fac6 	bl	8003160 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e0f2      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005be2:	4b23      	ldr	r3, [pc, #140]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0ef      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x418>
 8005bf0:	e01b      	b.n	8005c2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005bfa:	f023 0301 	bic.w	r3, r3, #1
 8005bfe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c02:	f7fd faad 	bl	8003160 <HAL_GetTick>
 8005c06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c08:	e008      	b.n	8005c1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c0a:	f7fd faa9 	bl	8003160 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e0d5      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c1c:	4b14      	ldr	r3, [pc, #80]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1ef      	bne.n	8005c0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 80c9 	beq.w	8005dc6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c34:	4b0e      	ldr	r3, [pc, #56]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 030c 	and.w	r3, r3, #12
 8005c3c:	2b0c      	cmp	r3, #12
 8005c3e:	f000 8083 	beq.w	8005d48 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d15e      	bne.n	8005d08 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c4a:	4b09      	ldr	r3, [pc, #36]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a08      	ldr	r2, [pc, #32]	@ (8005c70 <HAL_RCC_OscConfig+0x4b8>)
 8005c50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c56:	f7fd fa83 	bl	8003160 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c5c:	e00c      	b.n	8005c78 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c5e:	f7fd fa7f 	bl	8003160 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d905      	bls.n	8005c78 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e0ab      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
 8005c70:	40021000 	.word	0x40021000
 8005c74:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c78:	4b55      	ldr	r3, [pc, #340]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1ec      	bne.n	8005c5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c84:	4b52      	ldr	r3, [pc, #328]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	4b52      	ldr	r3, [pc, #328]	@ (8005dd4 <HAL_RCC_OscConfig+0x61c>)
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6a11      	ldr	r1, [r2, #32]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c94:	3a01      	subs	r2, #1
 8005c96:	0112      	lsls	r2, r2, #4
 8005c98:	4311      	orrs	r1, r2
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005c9e:	0212      	lsls	r2, r2, #8
 8005ca0:	4311      	orrs	r1, r2
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005ca6:	0852      	lsrs	r2, r2, #1
 8005ca8:	3a01      	subs	r2, #1
 8005caa:	0552      	lsls	r2, r2, #21
 8005cac:	4311      	orrs	r1, r2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005cb2:	0852      	lsrs	r2, r2, #1
 8005cb4:	3a01      	subs	r2, #1
 8005cb6:	0652      	lsls	r2, r2, #25
 8005cb8:	4311      	orrs	r1, r2
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005cbe:	06d2      	lsls	r2, r2, #27
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	4943      	ldr	r1, [pc, #268]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cc8:	4b41      	ldr	r3, [pc, #260]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a40      	ldr	r2, [pc, #256]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005cce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cd2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cd4:	4b3e      	ldr	r3, [pc, #248]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	4a3d      	ldr	r2, [pc, #244]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005cda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce0:	f7fd fa3e 	bl	8003160 <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce8:	f7fd fa3a 	bl	8003160 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e066      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cfa:	4b35      	ldr	r3, [pc, #212]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0f0      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x530>
 8005d06:	e05e      	b.n	8005dc6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d08:	4b31      	ldr	r3, [pc, #196]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a30      	ldr	r2, [pc, #192]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005d0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d14:	f7fd fa24 	bl	8003160 <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1c:	f7fd fa20 	bl	8003160 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e04c      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d2e:	4b28      	ldr	r3, [pc, #160]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f0      	bne.n	8005d1c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005d3a:	4b25      	ldr	r3, [pc, #148]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	4924      	ldr	r1, [pc, #144]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005d40:	4b25      	ldr	r3, [pc, #148]	@ (8005dd8 <HAL_RCC_OscConfig+0x620>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	60cb      	str	r3, [r1, #12]
 8005d46:	e03e      	b.n	8005dc6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e039      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005d54:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd0 <HAL_RCC_OscConfig+0x618>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f003 0203 	and.w	r2, r3, #3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d12c      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d72:	3b01      	subs	r3, #1
 8005d74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d123      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d11b      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d113      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da4:	085b      	lsrs	r3, r3, #1
 8005da6:	3b01      	subs	r3, #1
 8005da8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d109      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005db8:	085b      	lsrs	r3, r3, #1
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d001      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3720      	adds	r7, #32
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	019f800c 	.word	0x019f800c
 8005dd8:	feeefffc 	.word	0xfeeefffc

08005ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e11e      	b.n	8006032 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005df4:	4b91      	ldr	r3, [pc, #580]	@ (800603c <HAL_RCC_ClockConfig+0x260>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d910      	bls.n	8005e24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e02:	4b8e      	ldr	r3, [pc, #568]	@ (800603c <HAL_RCC_ClockConfig+0x260>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f023 020f 	bic.w	r2, r3, #15
 8005e0a:	498c      	ldr	r1, [pc, #560]	@ (800603c <HAL_RCC_ClockConfig+0x260>)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e12:	4b8a      	ldr	r3, [pc, #552]	@ (800603c <HAL_RCC_ClockConfig+0x260>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d001      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e106      	b.n	8006032 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d073      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d129      	bne.n	8005e8c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e38:	4b81      	ldr	r3, [pc, #516]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e0f4      	b.n	8006032 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005e48:	f000 f99e 	bl	8006188 <RCC_GetSysClockFreqFromPLLSource>
 8005e4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4a7c      	ldr	r2, [pc, #496]	@ (8006044 <HAL_RCC_ClockConfig+0x268>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d93f      	bls.n	8005ed6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e56:	4b7a      	ldr	r3, [pc, #488]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d009      	beq.n	8005e76 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d033      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d12f      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e76:	4b72      	ldr	r3, [pc, #456]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e7e:	4a70      	ldr	r2, [pc, #448]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005e80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e86:	2380      	movs	r3, #128	@ 0x80
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	e024      	b.n	8005ed6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d107      	bne.n	8005ea4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e94:	4b6a      	ldr	r3, [pc, #424]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d109      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0c6      	b.n	8006032 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ea4:	4b66      	ldr	r3, [pc, #408]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e0be      	b.n	8006032 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005eb4:	f000 f8ce 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8005eb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4a61      	ldr	r2, [pc, #388]	@ (8006044 <HAL_RCC_ClockConfig+0x268>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d909      	bls.n	8005ed6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ec2:	4b5f      	ldr	r3, [pc, #380]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eca:	4a5d      	ldr	r2, [pc, #372]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ed0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005ed2:	2380      	movs	r3, #128	@ 0x80
 8005ed4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ed6:	4b5a      	ldr	r3, [pc, #360]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f023 0203 	bic.w	r2, r3, #3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	4957      	ldr	r1, [pc, #348]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee8:	f7fd f93a 	bl	8003160 <HAL_GetTick>
 8005eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eee:	e00a      	b.n	8005f06 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ef0:	f7fd f936 	bl	8003160 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e095      	b.n	8006032 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f06:	4b4e      	ldr	r3, [pc, #312]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f003 020c 	and.w	r2, r3, #12
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d1eb      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d023      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d005      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f30:	4b43      	ldr	r3, [pc, #268]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	4a42      	ldr	r2, [pc, #264]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f3a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d007      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005f48:	4b3d      	ldr	r3, [pc, #244]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f50:	4a3b      	ldr	r2, [pc, #236]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f58:	4b39      	ldr	r3, [pc, #228]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	4936      	ldr	r1, [pc, #216]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	608b      	str	r3, [r1, #8]
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2b80      	cmp	r3, #128	@ 0x80
 8005f70:	d105      	bne.n	8005f7e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005f72:	4b33      	ldr	r3, [pc, #204]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	4a32      	ldr	r2, [pc, #200]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005f78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f7c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800603c <HAL_RCC_ClockConfig+0x260>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d21d      	bcs.n	8005fc8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800603c <HAL_RCC_ClockConfig+0x260>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f023 020f 	bic.w	r2, r3, #15
 8005f94:	4929      	ldr	r1, [pc, #164]	@ (800603c <HAL_RCC_ClockConfig+0x260>)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f9c:	f7fd f8e0 	bl	8003160 <HAL_GetTick>
 8005fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fa2:	e00a      	b.n	8005fba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fa4:	f7fd f8dc 	bl	8003160 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e03b      	b.n	8006032 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fba:	4b20      	ldr	r3, [pc, #128]	@ (800603c <HAL_RCC_ClockConfig+0x260>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d1ed      	bne.n	8005fa4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d008      	beq.n	8005fe6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4917      	ldr	r1, [pc, #92]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0308 	and.w	r3, r3, #8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d009      	beq.n	8006006 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ff2:	4b13      	ldr	r3, [pc, #76]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	490f      	ldr	r1, [pc, #60]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 8006002:	4313      	orrs	r3, r2
 8006004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006006:	f000 f825 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 800600a:	4602      	mov	r2, r0
 800600c:	4b0c      	ldr	r3, [pc, #48]	@ (8006040 <HAL_RCC_ClockConfig+0x264>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	091b      	lsrs	r3, r3, #4
 8006012:	f003 030f 	and.w	r3, r3, #15
 8006016:	490c      	ldr	r1, [pc, #48]	@ (8006048 <HAL_RCC_ClockConfig+0x26c>)
 8006018:	5ccb      	ldrb	r3, [r1, r3]
 800601a:	f003 031f 	and.w	r3, r3, #31
 800601e:	fa22 f303 	lsr.w	r3, r2, r3
 8006022:	4a0a      	ldr	r2, [pc, #40]	@ (800604c <HAL_RCC_ClockConfig+0x270>)
 8006024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006026:	4b0a      	ldr	r3, [pc, #40]	@ (8006050 <HAL_RCC_ClockConfig+0x274>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f7fd f84c 	bl	80030c8 <HAL_InitTick>
 8006030:	4603      	mov	r3, r0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	40022000 	.word	0x40022000
 8006040:	40021000 	.word	0x40021000
 8006044:	04c4b400 	.word	0x04c4b400
 8006048:	0800b414 	.word	0x0800b414
 800604c:	20000158 	.word	0x20000158
 8006050:	2000015c 	.word	0x2000015c

08006054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800605a:	4b2c      	ldr	r3, [pc, #176]	@ (800610c <HAL_RCC_GetSysClockFreq+0xb8>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 030c 	and.w	r3, r3, #12
 8006062:	2b04      	cmp	r3, #4
 8006064:	d102      	bne.n	800606c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006066:	4b2a      	ldr	r3, [pc, #168]	@ (8006110 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	e047      	b.n	80060fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800606c:	4b27      	ldr	r3, [pc, #156]	@ (800610c <HAL_RCC_GetSysClockFreq+0xb8>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 030c 	and.w	r3, r3, #12
 8006074:	2b08      	cmp	r3, #8
 8006076:	d102      	bne.n	800607e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006078:	4b26      	ldr	r3, [pc, #152]	@ (8006114 <HAL_RCC_GetSysClockFreq+0xc0>)
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	e03e      	b.n	80060fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800607e:	4b23      	ldr	r3, [pc, #140]	@ (800610c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 030c 	and.w	r3, r3, #12
 8006086:	2b0c      	cmp	r3, #12
 8006088:	d136      	bne.n	80060f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800608a:	4b20      	ldr	r3, [pc, #128]	@ (800610c <HAL_RCC_GetSysClockFreq+0xb8>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006094:	4b1d      	ldr	r3, [pc, #116]	@ (800610c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	091b      	lsrs	r3, r3, #4
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	3301      	adds	r3, #1
 80060a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d10c      	bne.n	80060c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006114 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b0:	4a16      	ldr	r2, [pc, #88]	@ (800610c <HAL_RCC_GetSysClockFreq+0xb8>)
 80060b2:	68d2      	ldr	r2, [r2, #12]
 80060b4:	0a12      	lsrs	r2, r2, #8
 80060b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060ba:	fb02 f303 	mul.w	r3, r2, r3
 80060be:	617b      	str	r3, [r7, #20]
      break;
 80060c0:	e00c      	b.n	80060dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060c2:	4a13      	ldr	r2, [pc, #76]	@ (8006110 <HAL_RCC_GetSysClockFreq+0xbc>)
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ca:	4a10      	ldr	r2, [pc, #64]	@ (800610c <HAL_RCC_GetSysClockFreq+0xb8>)
 80060cc:	68d2      	ldr	r2, [r2, #12]
 80060ce:	0a12      	lsrs	r2, r2, #8
 80060d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060d4:	fb02 f303 	mul.w	r3, r2, r3
 80060d8:	617b      	str	r3, [r7, #20]
      break;
 80060da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060dc:	4b0b      	ldr	r3, [pc, #44]	@ (800610c <HAL_RCC_GetSysClockFreq+0xb8>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	0e5b      	lsrs	r3, r3, #25
 80060e2:	f003 0303 	and.w	r3, r3, #3
 80060e6:	3301      	adds	r3, #1
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	613b      	str	r3, [r7, #16]
 80060f6:	e001      	b.n	80060fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80060fc:	693b      	ldr	r3, [r7, #16]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40021000 	.word	0x40021000
 8006110:	00f42400 	.word	0x00f42400
 8006114:	016e3600 	.word	0x016e3600

08006118 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006118:	b480      	push	{r7}
 800611a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800611c:	4b03      	ldr	r3, [pc, #12]	@ (800612c <HAL_RCC_GetHCLKFreq+0x14>)
 800611e:	681b      	ldr	r3, [r3, #0]
}
 8006120:	4618      	mov	r0, r3
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	20000158 	.word	0x20000158

08006130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006134:	f7ff fff0 	bl	8006118 <HAL_RCC_GetHCLKFreq>
 8006138:	4602      	mov	r2, r0
 800613a:	4b06      	ldr	r3, [pc, #24]	@ (8006154 <HAL_RCC_GetPCLK1Freq+0x24>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	0a1b      	lsrs	r3, r3, #8
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	4904      	ldr	r1, [pc, #16]	@ (8006158 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006146:	5ccb      	ldrb	r3, [r1, r3]
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006150:	4618      	mov	r0, r3
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40021000 	.word	0x40021000
 8006158:	0800b424 	.word	0x0800b424

0800615c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006160:	f7ff ffda 	bl	8006118 <HAL_RCC_GetHCLKFreq>
 8006164:	4602      	mov	r2, r0
 8006166:	4b06      	ldr	r3, [pc, #24]	@ (8006180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	0adb      	lsrs	r3, r3, #11
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	4904      	ldr	r1, [pc, #16]	@ (8006184 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006172:	5ccb      	ldrb	r3, [r1, r3]
 8006174:	f003 031f 	and.w	r3, r3, #31
 8006178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800617c:	4618      	mov	r0, r3
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40021000 	.word	0x40021000
 8006184:	0800b424 	.word	0x0800b424

08006188 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800618e:	4b1e      	ldr	r3, [pc, #120]	@ (8006208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006198:	4b1b      	ldr	r3, [pc, #108]	@ (8006208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	091b      	lsrs	r3, r3, #4
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	3301      	adds	r3, #1
 80061a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	d10c      	bne.n	80061c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061ac:	4a17      	ldr	r2, [pc, #92]	@ (800620c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b4:	4a14      	ldr	r2, [pc, #80]	@ (8006208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061b6:	68d2      	ldr	r2, [r2, #12]
 80061b8:	0a12      	lsrs	r2, r2, #8
 80061ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	617b      	str	r3, [r7, #20]
    break;
 80061c4:	e00c      	b.n	80061e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061c6:	4a12      	ldr	r2, [pc, #72]	@ (8006210 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ce:	4a0e      	ldr	r2, [pc, #56]	@ (8006208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061d0:	68d2      	ldr	r2, [r2, #12]
 80061d2:	0a12      	lsrs	r2, r2, #8
 80061d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061d8:	fb02 f303 	mul.w	r3, r2, r3
 80061dc:	617b      	str	r3, [r7, #20]
    break;
 80061de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061e0:	4b09      	ldr	r3, [pc, #36]	@ (8006208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	0e5b      	lsrs	r3, r3, #25
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	3301      	adds	r3, #1
 80061ec:	005b      	lsls	r3, r3, #1
 80061ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80061fa:	687b      	ldr	r3, [r7, #4]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	371c      	adds	r7, #28
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	40021000 	.word	0x40021000
 800620c:	016e3600 	.word	0x016e3600
 8006210:	00f42400 	.word	0x00f42400

08006214 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800621c:	2300      	movs	r3, #0
 800621e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006220:	2300      	movs	r3, #0
 8006222:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 8098 	beq.w	8006362 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006232:	2300      	movs	r3, #0
 8006234:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006236:	4b43      	ldr	r3, [pc, #268]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800623a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10d      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006242:	4b40      	ldr	r3, [pc, #256]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006246:	4a3f      	ldr	r2, [pc, #252]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800624c:	6593      	str	r3, [r2, #88]	@ 0x58
 800624e:	4b3d      	ldr	r3, [pc, #244]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006256:	60bb      	str	r3, [r7, #8]
 8006258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800625a:	2301      	movs	r3, #1
 800625c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800625e:	4b3a      	ldr	r3, [pc, #232]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a39      	ldr	r2, [pc, #228]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006268:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800626a:	f7fc ff79 	bl	8003160 <HAL_GetTick>
 800626e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006270:	e009      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006272:	f7fc ff75 	bl	8003160 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d902      	bls.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	74fb      	strb	r3, [r7, #19]
        break;
 8006284:	e005      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006286:	4b30      	ldr	r3, [pc, #192]	@ (8006348 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0ef      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006292:	7cfb      	ldrb	r3, [r7, #19]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d159      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006298:	4b2a      	ldr	r3, [pc, #168]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01e      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d019      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062b4:	4b23      	ldr	r3, [pc, #140]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062c0:	4b20      	ldr	r3, [pc, #128]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062e0:	4a18      	ldr	r2, [pc, #96]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d016      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f2:	f7fc ff35 	bl	8003160 <HAL_GetTick>
 80062f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f8:	e00b      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062fa:	f7fc ff31 	bl	8003160 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006308:	4293      	cmp	r3, r2
 800630a:	d902      	bls.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	74fb      	strb	r3, [r7, #19]
            break;
 8006310:	e006      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006312:	4b0c      	ldr	r3, [pc, #48]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0ec      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006320:	7cfb      	ldrb	r3, [r7, #19]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10b      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006326:	4b07      	ldr	r3, [pc, #28]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800632c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006334:	4903      	ldr	r1, [pc, #12]	@ (8006344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800633c:	e008      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800633e:	7cfb      	ldrb	r3, [r7, #19]
 8006340:	74bb      	strb	r3, [r7, #18]
 8006342:	e005      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006344:	40021000 	.word	0x40021000
 8006348:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634c:	7cfb      	ldrb	r3, [r7, #19]
 800634e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006350:	7c7b      	ldrb	r3, [r7, #17]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d105      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006356:	4ba7      	ldr	r3, [pc, #668]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635a:	4aa6      	ldr	r2, [pc, #664]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800635c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006360:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800636e:	4ba1      	ldr	r3, [pc, #644]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006374:	f023 0203 	bic.w	r2, r3, #3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	499d      	ldr	r1, [pc, #628]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800637e:	4313      	orrs	r3, r2
 8006380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006390:	4b98      	ldr	r3, [pc, #608]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006396:	f023 020c 	bic.w	r2, r3, #12
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	4995      	ldr	r1, [pc, #596]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0304 	and.w	r3, r3, #4
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063b2:	4b90      	ldr	r3, [pc, #576]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	498c      	ldr	r1, [pc, #560]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063d4:	4b87      	ldr	r3, [pc, #540]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	4984      	ldr	r1, [pc, #528]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063f6:	4b7f      	ldr	r3, [pc, #508]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	497b      	ldr	r1, [pc, #492]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006406:	4313      	orrs	r3, r2
 8006408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006418:	4b76      	ldr	r3, [pc, #472]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800641a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800641e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	4973      	ldr	r1, [pc, #460]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006428:	4313      	orrs	r3, r2
 800642a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800643a:	4b6e      	ldr	r3, [pc, #440]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800643c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006440:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	496a      	ldr	r1, [pc, #424]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800644a:	4313      	orrs	r3, r2
 800644c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800645c:	4b65      	ldr	r3, [pc, #404]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800645e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006462:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	4962      	ldr	r1, [pc, #392]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800646c:	4313      	orrs	r3, r2
 800646e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800647e:	4b5d      	ldr	r3, [pc, #372]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006484:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648c:	4959      	ldr	r1, [pc, #356]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064a0:	4b54      	ldr	r3, [pc, #336]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064a6:	f023 0203 	bic.w	r2, r3, #3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ae:	4951      	ldr	r1, [pc, #324]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064c2:	4b4c      	ldr	r3, [pc, #304]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d0:	4948      	ldr	r1, [pc, #288]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d015      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064e4:	4b43      	ldr	r3, [pc, #268]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f2:	4940      	ldr	r1, [pc, #256]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006502:	d105      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006504:	4b3b      	ldr	r3, [pc, #236]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	4a3a      	ldr	r2, [pc, #232]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800650e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006518:	2b00      	cmp	r3, #0
 800651a:	d015      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800651c:	4b35      	ldr	r3, [pc, #212]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800651e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006522:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800652a:	4932      	ldr	r1, [pc, #200]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800652c:	4313      	orrs	r3, r2
 800652e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800653a:	d105      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800653c:	4b2d      	ldr	r3, [pc, #180]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	4a2c      	ldr	r2, [pc, #176]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006546:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d015      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006554:	4b27      	ldr	r3, [pc, #156]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006562:	4924      	ldr	r1, [pc, #144]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006564:	4313      	orrs	r3, r2
 8006566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006572:	d105      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006574:	4b1f      	ldr	r3, [pc, #124]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	4a1e      	ldr	r2, [pc, #120]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800657e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d015      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800658c:	4b19      	ldr	r3, [pc, #100]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006592:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800659a:	4916      	ldr	r1, [pc, #88]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800659c:	4313      	orrs	r3, r2
 800659e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065aa:	d105      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065ac:	4b11      	ldr	r3, [pc, #68]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	4a10      	ldr	r2, [pc, #64]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d019      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065c4:	4b0b      	ldr	r3, [pc, #44]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d2:	4908      	ldr	r1, [pc, #32]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065e2:	d109      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065e4:	4b03      	ldr	r3, [pc, #12]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	4a02      	ldr	r2, [pc, #8]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065ee:	60d3      	str	r3, [r2, #12]
 80065f0:	e002      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80065f2:	bf00      	nop
 80065f4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d015      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006604:	4b29      	ldr	r3, [pc, #164]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006612:	4926      	ldr	r1, [pc, #152]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006614:	4313      	orrs	r3, r2
 8006616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006622:	d105      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006624:	4b21      	ldr	r3, [pc, #132]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	4a20      	ldr	r2, [pc, #128]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800662a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800662e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d015      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800663c:	4b1b      	ldr	r3, [pc, #108]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800663e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006642:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800664a:	4918      	ldr	r1, [pc, #96]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800664c:	4313      	orrs	r3, r2
 800664e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800665a:	d105      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800665c:	4b13      	ldr	r3, [pc, #76]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4a12      	ldr	r2, [pc, #72]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006666:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d015      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006674:	4b0d      	ldr	r3, [pc, #52]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006676:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800667a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006682:	490a      	ldr	r1, [pc, #40]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006684:	4313      	orrs	r3, r2
 8006686:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800668e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006692:	d105      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006694:	4b05      	ldr	r3, [pc, #20]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	4a04      	ldr	r2, [pc, #16]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800669a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800669e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80066a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	40021000 	.word	0x40021000

080066b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e054      	b.n	800676c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d111      	bne.n	80066f2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 ffd4 	bl	8008684 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d102      	bne.n	80066ea <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a23      	ldr	r2, [pc, #140]	@ (8006774 <HAL_TIM_Base_Init+0xc4>)
 80066e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2202      	movs	r2, #2
 80066f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3304      	adds	r3, #4
 8006702:	4619      	mov	r1, r3
 8006704:	4610      	mov	r0, r2
 8006706:	f001 fb1d 	bl	8007d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	08002bcd 	.word	0x08002bcd

08006778 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b01      	cmp	r3, #1
 800678a:	d001      	beq.n	8006790 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e04c      	b.n	800682a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a26      	ldr	r2, [pc, #152]	@ (8006838 <HAL_TIM_Base_Start+0xc0>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d022      	beq.n	80067e8 <HAL_TIM_Base_Start+0x70>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067aa:	d01d      	beq.n	80067e8 <HAL_TIM_Base_Start+0x70>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a22      	ldr	r2, [pc, #136]	@ (800683c <HAL_TIM_Base_Start+0xc4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d018      	beq.n	80067e8 <HAL_TIM_Base_Start+0x70>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a21      	ldr	r2, [pc, #132]	@ (8006840 <HAL_TIM_Base_Start+0xc8>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d013      	beq.n	80067e8 <HAL_TIM_Base_Start+0x70>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006844 <HAL_TIM_Base_Start+0xcc>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d00e      	beq.n	80067e8 <HAL_TIM_Base_Start+0x70>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006848 <HAL_TIM_Base_Start+0xd0>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d009      	beq.n	80067e8 <HAL_TIM_Base_Start+0x70>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a1c      	ldr	r2, [pc, #112]	@ (800684c <HAL_TIM_Base_Start+0xd4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d004      	beq.n	80067e8 <HAL_TIM_Base_Start+0x70>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006850 <HAL_TIM_Base_Start+0xd8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d115      	bne.n	8006814 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689a      	ldr	r2, [r3, #8]
 80067ee:	4b19      	ldr	r3, [pc, #100]	@ (8006854 <HAL_TIM_Base_Start+0xdc>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b06      	cmp	r3, #6
 80067f8:	d015      	beq.n	8006826 <HAL_TIM_Base_Start+0xae>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006800:	d011      	beq.n	8006826 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f042 0201 	orr.w	r2, r2, #1
 8006810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006812:	e008      	b.n	8006826 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0201 	orr.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	e000      	b.n	8006828 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006826:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	40012c00 	.word	0x40012c00
 800683c:	40000400 	.word	0x40000400
 8006840:	40000800 	.word	0x40000800
 8006844:	40000c00 	.word	0x40000c00
 8006848:	40013400 	.word	0x40013400
 800684c:	40014000 	.word	0x40014000
 8006850:	40015000 	.word	0x40015000
 8006854:	00010007 	.word	0x00010007

08006858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b01      	cmp	r3, #1
 800686a:	d001      	beq.n	8006870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e054      	b.n	800691a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0201 	orr.w	r2, r2, #1
 8006886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a26      	ldr	r2, [pc, #152]	@ (8006928 <HAL_TIM_Base_Start_IT+0xd0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d022      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x80>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800689a:	d01d      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x80>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a22      	ldr	r2, [pc, #136]	@ (800692c <HAL_TIM_Base_Start_IT+0xd4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d018      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x80>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a21      	ldr	r2, [pc, #132]	@ (8006930 <HAL_TIM_Base_Start_IT+0xd8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d013      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x80>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a1f      	ldr	r2, [pc, #124]	@ (8006934 <HAL_TIM_Base_Start_IT+0xdc>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d00e      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x80>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1e      	ldr	r2, [pc, #120]	@ (8006938 <HAL_TIM_Base_Start_IT+0xe0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d009      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x80>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1c      	ldr	r2, [pc, #112]	@ (800693c <HAL_TIM_Base_Start_IT+0xe4>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d004      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x80>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006940 <HAL_TIM_Base_Start_IT+0xe8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d115      	bne.n	8006904 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689a      	ldr	r2, [r3, #8]
 80068de:	4b19      	ldr	r3, [pc, #100]	@ (8006944 <HAL_TIM_Base_Start_IT+0xec>)
 80068e0:	4013      	ands	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b06      	cmp	r3, #6
 80068e8:	d015      	beq.n	8006916 <HAL_TIM_Base_Start_IT+0xbe>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f0:	d011      	beq.n	8006916 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f042 0201 	orr.w	r2, r2, #1
 8006900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006902:	e008      	b.n	8006916 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0201 	orr.w	r2, r2, #1
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	e000      	b.n	8006918 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006916:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40012c00 	.word	0x40012c00
 800692c:	40000400 	.word	0x40000400
 8006930:	40000800 	.word	0x40000800
 8006934:	40000c00 	.word	0x40000c00
 8006938:	40013400 	.word	0x40013400
 800693c:	40014000 	.word	0x40014000
 8006940:	40015000 	.word	0x40015000
 8006944:	00010007 	.word	0x00010007

08006948 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e054      	b.n	8006a04 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d111      	bne.n	800698a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 fe88 	bl	8008684 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006978:	2b00      	cmp	r3, #0
 800697a:	d102      	bne.n	8006982 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a23      	ldr	r2, [pc, #140]	@ (8006a0c <HAL_TIM_OC_Init+0xc4>)
 8006980:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2202      	movs	r2, #2
 800698e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3304      	adds	r3, #4
 800699a:	4619      	mov	r1, r3
 800699c:	4610      	mov	r0, r2
 800699e:	f001 f9d1 	bl	8007d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	08006a11 	.word	0x08006a11

08006a10 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e054      	b.n	8006ae0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d111      	bne.n	8006a66 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 fe1a 	bl	8008684 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a23      	ldr	r2, [pc, #140]	@ (8006ae8 <HAL_TIM_PWM_Init+0xc4>)
 8006a5c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2202      	movs	r2, #2
 8006a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	3304      	adds	r3, #4
 8006a76:	4619      	mov	r1, r3
 8006a78:	4610      	mov	r0, r2
 8006a7a:	f001 f963 	bl	8007d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	08006aed 	.word	0x08006aed

08006aec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d109      	bne.n	8006b24 <HAL_TIM_PWM_Start+0x24>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	bf14      	ite	ne
 8006b1c:	2301      	movne	r3, #1
 8006b1e:	2300      	moveq	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	e03c      	b.n	8006b9e <HAL_TIM_PWM_Start+0x9e>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d109      	bne.n	8006b3e <HAL_TIM_PWM_Start+0x3e>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	bf14      	ite	ne
 8006b36:	2301      	movne	r3, #1
 8006b38:	2300      	moveq	r3, #0
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	e02f      	b.n	8006b9e <HAL_TIM_PWM_Start+0x9e>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d109      	bne.n	8006b58 <HAL_TIM_PWM_Start+0x58>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	bf14      	ite	ne
 8006b50:	2301      	movne	r3, #1
 8006b52:	2300      	moveq	r3, #0
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	e022      	b.n	8006b9e <HAL_TIM_PWM_Start+0x9e>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	2b0c      	cmp	r3, #12
 8006b5c:	d109      	bne.n	8006b72 <HAL_TIM_PWM_Start+0x72>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	bf14      	ite	ne
 8006b6a:	2301      	movne	r3, #1
 8006b6c:	2300      	moveq	r3, #0
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	e015      	b.n	8006b9e <HAL_TIM_PWM_Start+0x9e>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b10      	cmp	r3, #16
 8006b76:	d109      	bne.n	8006b8c <HAL_TIM_PWM_Start+0x8c>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	bf14      	ite	ne
 8006b84:	2301      	movne	r3, #1
 8006b86:	2300      	moveq	r3, #0
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	e008      	b.n	8006b9e <HAL_TIM_PWM_Start+0x9e>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	bf14      	ite	ne
 8006b98:	2301      	movne	r3, #1
 8006b9a:	2300      	moveq	r3, #0
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e0a6      	b.n	8006cf4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <HAL_TIM_PWM_Start+0xb6>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bb4:	e023      	b.n	8006bfe <HAL_TIM_PWM_Start+0xfe>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b04      	cmp	r3, #4
 8006bba:	d104      	bne.n	8006bc6 <HAL_TIM_PWM_Start+0xc6>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bc4:	e01b      	b.n	8006bfe <HAL_TIM_PWM_Start+0xfe>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	d104      	bne.n	8006bd6 <HAL_TIM_PWM_Start+0xd6>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bd4:	e013      	b.n	8006bfe <HAL_TIM_PWM_Start+0xfe>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b0c      	cmp	r3, #12
 8006bda:	d104      	bne.n	8006be6 <HAL_TIM_PWM_Start+0xe6>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006be4:	e00b      	b.n	8006bfe <HAL_TIM_PWM_Start+0xfe>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b10      	cmp	r3, #16
 8006bea:	d104      	bne.n	8006bf6 <HAL_TIM_PWM_Start+0xf6>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bf4:	e003      	b.n	8006bfe <HAL_TIM_PWM_Start+0xfe>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2201      	movs	r2, #1
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f001 fd16 	bl	8008638 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a3a      	ldr	r2, [pc, #232]	@ (8006cfc <HAL_TIM_PWM_Start+0x1fc>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d018      	beq.n	8006c48 <HAL_TIM_PWM_Start+0x148>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a39      	ldr	r2, [pc, #228]	@ (8006d00 <HAL_TIM_PWM_Start+0x200>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d013      	beq.n	8006c48 <HAL_TIM_PWM_Start+0x148>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a37      	ldr	r2, [pc, #220]	@ (8006d04 <HAL_TIM_PWM_Start+0x204>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d00e      	beq.n	8006c48 <HAL_TIM_PWM_Start+0x148>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a36      	ldr	r2, [pc, #216]	@ (8006d08 <HAL_TIM_PWM_Start+0x208>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d009      	beq.n	8006c48 <HAL_TIM_PWM_Start+0x148>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a34      	ldr	r2, [pc, #208]	@ (8006d0c <HAL_TIM_PWM_Start+0x20c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d004      	beq.n	8006c48 <HAL_TIM_PWM_Start+0x148>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a33      	ldr	r2, [pc, #204]	@ (8006d10 <HAL_TIM_PWM_Start+0x210>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d101      	bne.n	8006c4c <HAL_TIM_PWM_Start+0x14c>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e000      	b.n	8006c4e <HAL_TIM_PWM_Start+0x14e>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d007      	beq.n	8006c62 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a25      	ldr	r2, [pc, #148]	@ (8006cfc <HAL_TIM_PWM_Start+0x1fc>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d022      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x1b2>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c74:	d01d      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x1b2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a26      	ldr	r2, [pc, #152]	@ (8006d14 <HAL_TIM_PWM_Start+0x214>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d018      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x1b2>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a24      	ldr	r2, [pc, #144]	@ (8006d18 <HAL_TIM_PWM_Start+0x218>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d013      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x1b2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a23      	ldr	r2, [pc, #140]	@ (8006d1c <HAL_TIM_PWM_Start+0x21c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00e      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x1b2>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a19      	ldr	r2, [pc, #100]	@ (8006d00 <HAL_TIM_PWM_Start+0x200>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d009      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x1b2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a18      	ldr	r2, [pc, #96]	@ (8006d04 <HAL_TIM_PWM_Start+0x204>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d004      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x1b2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a18      	ldr	r2, [pc, #96]	@ (8006d10 <HAL_TIM_PWM_Start+0x210>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d115      	bne.n	8006cde <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	4b19      	ldr	r3, [pc, #100]	@ (8006d20 <HAL_TIM_PWM_Start+0x220>)
 8006cba:	4013      	ands	r3, r2
 8006cbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b06      	cmp	r3, #6
 8006cc2:	d015      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x1f0>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cca:	d011      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f042 0201 	orr.w	r2, r2, #1
 8006cda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cdc:	e008      	b.n	8006cf0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f042 0201 	orr.w	r2, r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	e000      	b.n	8006cf2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	40012c00 	.word	0x40012c00
 8006d00:	40013400 	.word	0x40013400
 8006d04:	40014000 	.word	0x40014000
 8006d08:	40014400 	.word	0x40014400
 8006d0c:	40014800 	.word	0x40014800
 8006d10:	40015000 	.word	0x40015000
 8006d14:	40000400 	.word	0x40000400
 8006d18:	40000800 	.word	0x40000800
 8006d1c:	40000c00 	.word	0x40000c00
 8006d20:	00010007 	.word	0x00010007

08006d24 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e04c      	b.n	8006dd2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d111      	bne.n	8006d68 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 fc99 	bl	8008684 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d102      	bne.n	8006d60 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8006ddc <HAL_TIM_OnePulse_Init+0xb8>)
 8006d5e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3304      	adds	r3, #4
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	f000 ffe2 	bl	8007d44 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0208 	bic.w	r2, r2, #8
 8006d8e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6819      	ldr	r1, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	08006de1 	.word	0x08006de1

08006de0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e0c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e14:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e1c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d108      	bne.n	8006e36 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e24:	7bbb      	ldrb	r3, [r7, #14]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d105      	bne.n	8006e36 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e2a:	7b7b      	ldrb	r3, [r7, #13]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d102      	bne.n	8006e36 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e30:	7b3b      	ldrb	r3, [r7, #12]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d001      	beq.n	8006e3a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e059      	b.n	8006eee <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2202      	movs	r2, #2
 8006e46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2202      	movs	r2, #2
 8006e56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f042 0202 	orr.w	r2, r2, #2
 8006e68:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68da      	ldr	r2, [r3, #12]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f042 0204 	orr.w	r2, r2, #4
 8006e78:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	2100      	movs	r1, #0
 8006e82:	4618      	mov	r0, r3
 8006e84:	f001 fbd8 	bl	8008638 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	2104      	movs	r1, #4
 8006e90:	4618      	mov	r0, r3
 8006e92:	f001 fbd1 	bl	8008638 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a17      	ldr	r2, [pc, #92]	@ (8006ef8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d018      	beq.n	8006ed2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a15      	ldr	r2, [pc, #84]	@ (8006efc <HAL_TIM_OnePulse_Start_IT+0x108>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d013      	beq.n	8006ed2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a14      	ldr	r2, [pc, #80]	@ (8006f00 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d00e      	beq.n	8006ed2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a12      	ldr	r2, [pc, #72]	@ (8006f04 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d009      	beq.n	8006ed2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a11      	ldr	r2, [pc, #68]	@ (8006f08 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d004      	beq.n	8006ed2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a0f      	ldr	r2, [pc, #60]	@ (8006f0c <HAL_TIM_OnePulse_Start_IT+0x118>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d101      	bne.n	8006ed6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e000      	b.n	8006ed8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d007      	beq.n	8006eec <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006eea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	40012c00 	.word	0x40012c00
 8006efc:	40013400 	.word	0x40013400
 8006f00:	40014000 	.word	0x40014000
 8006f04:	40014400 	.word	0x40014400
 8006f08:	40014800 	.word	0x40014800
 8006f0c:	40015000 	.word	0x40015000

08006f10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e0a2      	b.n	800706a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d111      	bne.n	8006f54 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 fba3 	bl	8008684 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d102      	bne.n	8006f4c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a4a      	ldr	r2, [pc, #296]	@ (8007074 <HAL_TIM_Encoder_Init+0x164>)
 8006f4a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	6812      	ldr	r2, [r2, #0]
 8006f66:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006f6a:	f023 0307 	bic.w	r3, r3, #7
 8006f6e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3304      	adds	r3, #4
 8006f78:	4619      	mov	r1, r3
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	f000 fee2 	bl	8007d44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fa8:	f023 0303 	bic.w	r3, r3, #3
 8006fac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	021b      	lsls	r3, r3, #8
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006fc6:	f023 030c 	bic.w	r3, r3, #12
 8006fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	68da      	ldr	r2, [r3, #12]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	021b      	lsls	r3, r3, #8
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	011a      	lsls	r2, r3, #4
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	031b      	lsls	r3, r3, #12
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007004:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800700c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	011b      	lsls	r3, r3, #4
 8007018:	4313      	orrs	r3, r2
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	4313      	orrs	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	08002c9d 	.word	0x08002c9d

08007078 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007088:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007090:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007098:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d110      	bne.n	80070ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d102      	bne.n	80070b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80070ae:	7b7b      	ldrb	r3, [r7, #13]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d001      	beq.n	80070b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e069      	b.n	800718c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070c8:	e031      	b.n	800712e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	d110      	bne.n	80070f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d102      	bne.n	80070dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80070d6:	7b3b      	ldrb	r3, [r7, #12]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d001      	beq.n	80070e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e055      	b.n	800718c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070f0:	e01d      	b.n	800712e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d108      	bne.n	800710a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d105      	bne.n	800710a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070fe:	7b7b      	ldrb	r3, [r7, #13]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d102      	bne.n	800710a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007104:	7b3b      	ldrb	r3, [r7, #12]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d001      	beq.n	800710e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e03e      	b.n	800718c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2202      	movs	r2, #2
 8007112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2202      	movs	r2, #2
 800711a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2202      	movs	r2, #2
 8007122:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2202      	movs	r2, #2
 800712a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <HAL_TIM_Encoder_Start+0xc4>
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	2b04      	cmp	r3, #4
 8007138:	d008      	beq.n	800714c <HAL_TIM_Encoder_Start+0xd4>
 800713a:	e00f      	b.n	800715c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2201      	movs	r2, #1
 8007142:	2100      	movs	r1, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f001 fa77 	bl	8008638 <TIM_CCxChannelCmd>
      break;
 800714a:	e016      	b.n	800717a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2201      	movs	r2, #1
 8007152:	2104      	movs	r1, #4
 8007154:	4618      	mov	r0, r3
 8007156:	f001 fa6f 	bl	8008638 <TIM_CCxChannelCmd>
      break;
 800715a:	e00e      	b.n	800717a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2201      	movs	r2, #1
 8007162:	2100      	movs	r1, #0
 8007164:	4618      	mov	r0, r3
 8007166:	f001 fa67 	bl	8008638 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2201      	movs	r2, #1
 8007170:	2104      	movs	r1, #4
 8007172:	4618      	mov	r0, r3
 8007174:	f001 fa60 	bl	8008638 <TIM_CCxChannelCmd>
      break;
 8007178:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0201 	orr.w	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d026      	beq.n	8007204 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d021      	beq.n	8007204 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f06f 0202 	mvn.w	r2, #2
 80071c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	f003 0303 	and.w	r3, r3, #3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	4798      	blx	r3
 80071e8:	e009      	b.n	80071fe <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b00      	cmp	r3, #0
 800720c:	d026      	beq.n	800725c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b00      	cmp	r3, #0
 8007216:	d021      	beq.n	800725c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f06f 0204 	mvn.w	r2, #4
 8007220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2202      	movs	r2, #2
 8007226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007232:	2b00      	cmp	r3, #0
 8007234:	d005      	beq.n	8007242 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	4798      	blx	r3
 8007240:	e009      	b.n	8007256 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f003 0308 	and.w	r3, r3, #8
 8007262:	2b00      	cmp	r3, #0
 8007264:	d026      	beq.n	80072b4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f003 0308 	and.w	r3, r3, #8
 800726c:	2b00      	cmp	r3, #0
 800726e:	d021      	beq.n	80072b4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f06f 0208 	mvn.w	r2, #8
 8007278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2204      	movs	r2, #4
 800727e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	f003 0303 	and.w	r3, r3, #3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d005      	beq.n	800729a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4798      	blx	r3
 8007298:	e009      	b.n	80072ae <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f003 0310 	and.w	r3, r3, #16
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d026      	beq.n	800730c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f003 0310 	and.w	r3, r3, #16
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d021      	beq.n	800730c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f06f 0210 	mvn.w	r2, #16
 80072d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2208      	movs	r2, #8
 80072d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d005      	beq.n	80072f2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	4798      	blx	r3
 80072f0:	e009      	b.n	8007306 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00e      	beq.n	8007334 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	2b00      	cmp	r3, #0
 800731e:	d009      	beq.n	8007334 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f06f 0201 	mvn.w	r2, #1
 8007328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800733a:	2b00      	cmp	r3, #0
 800733c:	d104      	bne.n	8007348 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00e      	beq.n	8007366 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800734e:	2b00      	cmp	r3, #0
 8007350:	d009      	beq.n	8007366 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800735a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00e      	beq.n	800738e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007376:	2b00      	cmp	r3, #0
 8007378:	d009      	beq.n	800738e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00e      	beq.n	80073b6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d009      	beq.n	80073b6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80073aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f003 0320 	and.w	r3, r3, #32
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00e      	beq.n	80073de <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f003 0320 	and.w	r3, r3, #32
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d009      	beq.n	80073de <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f06f 0220 	mvn.w	r2, #32
 80073d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00e      	beq.n	8007406 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d009      	beq.n	8007406 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80073fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00e      	beq.n	800742e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d009      	beq.n	800742e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00e      	beq.n	8007456 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d009      	beq.n	8007456 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800744a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00e      	beq.n	800747e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d009      	beq.n	800747e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800747e:	bf00      	nop
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d101      	bne.n	80074a6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80074a2:	2302      	movs	r3, #2
 80074a4:	e066      	b.n	8007574 <HAL_TIM_OC_ConfigChannel+0xec>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b14      	cmp	r3, #20
 80074b2:	d857      	bhi.n	8007564 <HAL_TIM_OC_ConfigChannel+0xdc>
 80074b4:	a201      	add	r2, pc, #4	@ (adr r2, 80074bc <HAL_TIM_OC_ConfigChannel+0x34>)
 80074b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ba:	bf00      	nop
 80074bc:	08007511 	.word	0x08007511
 80074c0:	08007565 	.word	0x08007565
 80074c4:	08007565 	.word	0x08007565
 80074c8:	08007565 	.word	0x08007565
 80074cc:	0800751f 	.word	0x0800751f
 80074d0:	08007565 	.word	0x08007565
 80074d4:	08007565 	.word	0x08007565
 80074d8:	08007565 	.word	0x08007565
 80074dc:	0800752d 	.word	0x0800752d
 80074e0:	08007565 	.word	0x08007565
 80074e4:	08007565 	.word	0x08007565
 80074e8:	08007565 	.word	0x08007565
 80074ec:	0800753b 	.word	0x0800753b
 80074f0:	08007565 	.word	0x08007565
 80074f4:	08007565 	.word	0x08007565
 80074f8:	08007565 	.word	0x08007565
 80074fc:	08007549 	.word	0x08007549
 8007500:	08007565 	.word	0x08007565
 8007504:	08007565 	.word	0x08007565
 8007508:	08007565 	.word	0x08007565
 800750c:	08007557 	.word	0x08007557
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68b9      	ldr	r1, [r7, #8]
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fcc8 	bl	8007eac <TIM_OC1_SetConfig>
      break;
 800751c:	e025      	b.n	800756a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68b9      	ldr	r1, [r7, #8]
 8007524:	4618      	mov	r0, r3
 8007526:	f000 fd5b 	bl	8007fe0 <TIM_OC2_SetConfig>
      break;
 800752a:	e01e      	b.n	800756a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68b9      	ldr	r1, [r7, #8]
 8007532:	4618      	mov	r0, r3
 8007534:	f000 fde8 	bl	8008108 <TIM_OC3_SetConfig>
      break;
 8007538:	e017      	b.n	800756a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68b9      	ldr	r1, [r7, #8]
 8007540:	4618      	mov	r0, r3
 8007542:	f000 fe73 	bl	800822c <TIM_OC4_SetConfig>
      break;
 8007546:	e010      	b.n	800756a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68b9      	ldr	r1, [r7, #8]
 800754e:	4618      	mov	r0, r3
 8007550:	f000 ff00 	bl	8008354 <TIM_OC5_SetConfig>
      break;
 8007554:	e009      	b.n	800756a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68b9      	ldr	r1, [r7, #8]
 800755c:	4618      	mov	r0, r3
 800755e:	f000 ff63 	bl	8008428 <TIM_OC6_SetConfig>
      break;
 8007562:	e002      	b.n	800756a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	75fb      	strb	r3, [r7, #23]
      break;
 8007568:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007572:	7dfb      	ldrb	r3, [r7, #23]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007588:	2300      	movs	r3, #0
 800758a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007592:	2b01      	cmp	r3, #1
 8007594:	d101      	bne.n	800759a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007596:	2302      	movs	r3, #2
 8007598:	e0ff      	b.n	800779a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b14      	cmp	r3, #20
 80075a6:	f200 80f0 	bhi.w	800778a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80075aa:	a201      	add	r2, pc, #4	@ (adr r2, 80075b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b0:	08007605 	.word	0x08007605
 80075b4:	0800778b 	.word	0x0800778b
 80075b8:	0800778b 	.word	0x0800778b
 80075bc:	0800778b 	.word	0x0800778b
 80075c0:	08007645 	.word	0x08007645
 80075c4:	0800778b 	.word	0x0800778b
 80075c8:	0800778b 	.word	0x0800778b
 80075cc:	0800778b 	.word	0x0800778b
 80075d0:	08007687 	.word	0x08007687
 80075d4:	0800778b 	.word	0x0800778b
 80075d8:	0800778b 	.word	0x0800778b
 80075dc:	0800778b 	.word	0x0800778b
 80075e0:	080076c7 	.word	0x080076c7
 80075e4:	0800778b 	.word	0x0800778b
 80075e8:	0800778b 	.word	0x0800778b
 80075ec:	0800778b 	.word	0x0800778b
 80075f0:	08007709 	.word	0x08007709
 80075f4:	0800778b 	.word	0x0800778b
 80075f8:	0800778b 	.word	0x0800778b
 80075fc:	0800778b 	.word	0x0800778b
 8007600:	08007749 	.word	0x08007749
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68b9      	ldr	r1, [r7, #8]
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fc4e 	bl	8007eac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	699a      	ldr	r2, [r3, #24]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0208 	orr.w	r2, r2, #8
 800761e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699a      	ldr	r2, [r3, #24]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0204 	bic.w	r2, r2, #4
 800762e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6999      	ldr	r1, [r3, #24]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	691a      	ldr	r2, [r3, #16]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	619a      	str	r2, [r3, #24]
      break;
 8007642:	e0a5      	b.n	8007790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68b9      	ldr	r1, [r7, #8]
 800764a:	4618      	mov	r0, r3
 800764c:	f000 fcc8 	bl	8007fe0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699a      	ldr	r2, [r3, #24]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800765e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	699a      	ldr	r2, [r3, #24]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800766e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6999      	ldr	r1, [r3, #24]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	021a      	lsls	r2, r3, #8
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	619a      	str	r2, [r3, #24]
      break;
 8007684:	e084      	b.n	8007790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fd3b 	bl	8008108 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69da      	ldr	r2, [r3, #28]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f042 0208 	orr.w	r2, r2, #8
 80076a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	69da      	ldr	r2, [r3, #28]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0204 	bic.w	r2, r2, #4
 80076b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	69d9      	ldr	r1, [r3, #28]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	691a      	ldr	r2, [r3, #16]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	61da      	str	r2, [r3, #28]
      break;
 80076c4:	e064      	b.n	8007790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68b9      	ldr	r1, [r7, #8]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 fdad 	bl	800822c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	69da      	ldr	r2, [r3, #28]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	69da      	ldr	r2, [r3, #28]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	69d9      	ldr	r1, [r3, #28]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	021a      	lsls	r2, r3, #8
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	61da      	str	r2, [r3, #28]
      break;
 8007706:	e043      	b.n	8007790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68b9      	ldr	r1, [r7, #8]
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fe20 	bl	8008354 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0208 	orr.w	r2, r2, #8
 8007722:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 0204 	bic.w	r2, r2, #4
 8007732:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	691a      	ldr	r2, [r3, #16]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007746:	e023      	b.n	8007790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68b9      	ldr	r1, [r7, #8]
 800774e:	4618      	mov	r0, r3
 8007750:	f000 fe6a 	bl	8008428 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007762:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007772:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	021a      	lsls	r2, r3, #8
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007788:	e002      	b.n	8007790 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	75fb      	strb	r3, [r7, #23]
      break;
 800778e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007798:	7dfb      	ldrb	r3, [r7, #23]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop

080077a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d101      	bne.n	80077c0 <HAL_TIM_ConfigClockSource+0x1c>
 80077bc:	2302      	movs	r3, #2
 80077be:	e0f6      	b.n	80079ae <HAL_TIM_ConfigClockSource+0x20a>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80077de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80077e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a6f      	ldr	r2, [pc, #444]	@ (80079b8 <HAL_TIM_ConfigClockSource+0x214>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	f000 80c1 	beq.w	8007982 <HAL_TIM_ConfigClockSource+0x1de>
 8007800:	4a6d      	ldr	r2, [pc, #436]	@ (80079b8 <HAL_TIM_ConfigClockSource+0x214>)
 8007802:	4293      	cmp	r3, r2
 8007804:	f200 80c6 	bhi.w	8007994 <HAL_TIM_ConfigClockSource+0x1f0>
 8007808:	4a6c      	ldr	r2, [pc, #432]	@ (80079bc <HAL_TIM_ConfigClockSource+0x218>)
 800780a:	4293      	cmp	r3, r2
 800780c:	f000 80b9 	beq.w	8007982 <HAL_TIM_ConfigClockSource+0x1de>
 8007810:	4a6a      	ldr	r2, [pc, #424]	@ (80079bc <HAL_TIM_ConfigClockSource+0x218>)
 8007812:	4293      	cmp	r3, r2
 8007814:	f200 80be 	bhi.w	8007994 <HAL_TIM_ConfigClockSource+0x1f0>
 8007818:	4a69      	ldr	r2, [pc, #420]	@ (80079c0 <HAL_TIM_ConfigClockSource+0x21c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	f000 80b1 	beq.w	8007982 <HAL_TIM_ConfigClockSource+0x1de>
 8007820:	4a67      	ldr	r2, [pc, #412]	@ (80079c0 <HAL_TIM_ConfigClockSource+0x21c>)
 8007822:	4293      	cmp	r3, r2
 8007824:	f200 80b6 	bhi.w	8007994 <HAL_TIM_ConfigClockSource+0x1f0>
 8007828:	4a66      	ldr	r2, [pc, #408]	@ (80079c4 <HAL_TIM_ConfigClockSource+0x220>)
 800782a:	4293      	cmp	r3, r2
 800782c:	f000 80a9 	beq.w	8007982 <HAL_TIM_ConfigClockSource+0x1de>
 8007830:	4a64      	ldr	r2, [pc, #400]	@ (80079c4 <HAL_TIM_ConfigClockSource+0x220>)
 8007832:	4293      	cmp	r3, r2
 8007834:	f200 80ae 	bhi.w	8007994 <HAL_TIM_ConfigClockSource+0x1f0>
 8007838:	4a63      	ldr	r2, [pc, #396]	@ (80079c8 <HAL_TIM_ConfigClockSource+0x224>)
 800783a:	4293      	cmp	r3, r2
 800783c:	f000 80a1 	beq.w	8007982 <HAL_TIM_ConfigClockSource+0x1de>
 8007840:	4a61      	ldr	r2, [pc, #388]	@ (80079c8 <HAL_TIM_ConfigClockSource+0x224>)
 8007842:	4293      	cmp	r3, r2
 8007844:	f200 80a6 	bhi.w	8007994 <HAL_TIM_ConfigClockSource+0x1f0>
 8007848:	4a60      	ldr	r2, [pc, #384]	@ (80079cc <HAL_TIM_ConfigClockSource+0x228>)
 800784a:	4293      	cmp	r3, r2
 800784c:	f000 8099 	beq.w	8007982 <HAL_TIM_ConfigClockSource+0x1de>
 8007850:	4a5e      	ldr	r2, [pc, #376]	@ (80079cc <HAL_TIM_ConfigClockSource+0x228>)
 8007852:	4293      	cmp	r3, r2
 8007854:	f200 809e 	bhi.w	8007994 <HAL_TIM_ConfigClockSource+0x1f0>
 8007858:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800785c:	f000 8091 	beq.w	8007982 <HAL_TIM_ConfigClockSource+0x1de>
 8007860:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007864:	f200 8096 	bhi.w	8007994 <HAL_TIM_ConfigClockSource+0x1f0>
 8007868:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800786c:	f000 8089 	beq.w	8007982 <HAL_TIM_ConfigClockSource+0x1de>
 8007870:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007874:	f200 808e 	bhi.w	8007994 <HAL_TIM_ConfigClockSource+0x1f0>
 8007878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800787c:	d03e      	beq.n	80078fc <HAL_TIM_ConfigClockSource+0x158>
 800787e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007882:	f200 8087 	bhi.w	8007994 <HAL_TIM_ConfigClockSource+0x1f0>
 8007886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800788a:	f000 8086 	beq.w	800799a <HAL_TIM_ConfigClockSource+0x1f6>
 800788e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007892:	d87f      	bhi.n	8007994 <HAL_TIM_ConfigClockSource+0x1f0>
 8007894:	2b70      	cmp	r3, #112	@ 0x70
 8007896:	d01a      	beq.n	80078ce <HAL_TIM_ConfigClockSource+0x12a>
 8007898:	2b70      	cmp	r3, #112	@ 0x70
 800789a:	d87b      	bhi.n	8007994 <HAL_TIM_ConfigClockSource+0x1f0>
 800789c:	2b60      	cmp	r3, #96	@ 0x60
 800789e:	d050      	beq.n	8007942 <HAL_TIM_ConfigClockSource+0x19e>
 80078a0:	2b60      	cmp	r3, #96	@ 0x60
 80078a2:	d877      	bhi.n	8007994 <HAL_TIM_ConfigClockSource+0x1f0>
 80078a4:	2b50      	cmp	r3, #80	@ 0x50
 80078a6:	d03c      	beq.n	8007922 <HAL_TIM_ConfigClockSource+0x17e>
 80078a8:	2b50      	cmp	r3, #80	@ 0x50
 80078aa:	d873      	bhi.n	8007994 <HAL_TIM_ConfigClockSource+0x1f0>
 80078ac:	2b40      	cmp	r3, #64	@ 0x40
 80078ae:	d058      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0x1be>
 80078b0:	2b40      	cmp	r3, #64	@ 0x40
 80078b2:	d86f      	bhi.n	8007994 <HAL_TIM_ConfigClockSource+0x1f0>
 80078b4:	2b30      	cmp	r3, #48	@ 0x30
 80078b6:	d064      	beq.n	8007982 <HAL_TIM_ConfigClockSource+0x1de>
 80078b8:	2b30      	cmp	r3, #48	@ 0x30
 80078ba:	d86b      	bhi.n	8007994 <HAL_TIM_ConfigClockSource+0x1f0>
 80078bc:	2b20      	cmp	r3, #32
 80078be:	d060      	beq.n	8007982 <HAL_TIM_ConfigClockSource+0x1de>
 80078c0:	2b20      	cmp	r3, #32
 80078c2:	d867      	bhi.n	8007994 <HAL_TIM_ConfigClockSource+0x1f0>
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d05c      	beq.n	8007982 <HAL_TIM_ConfigClockSource+0x1de>
 80078c8:	2b10      	cmp	r3, #16
 80078ca:	d05a      	beq.n	8007982 <HAL_TIM_ConfigClockSource+0x1de>
 80078cc:	e062      	b.n	8007994 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078de:	f000 fe8b 	bl	80085f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80078f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	609a      	str	r2, [r3, #8]
      break;
 80078fa:	e04f      	b.n	800799c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800790c:	f000 fe74 	bl	80085f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689a      	ldr	r2, [r3, #8]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800791e:	609a      	str	r2, [r3, #8]
      break;
 8007920:	e03c      	b.n	800799c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800792e:	461a      	mov	r2, r3
 8007930:	f000 fde6 	bl	8008500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2150      	movs	r1, #80	@ 0x50
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fe3f 	bl	80085be <TIM_ITRx_SetConfig>
      break;
 8007940:	e02c      	b.n	800799c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800794e:	461a      	mov	r2, r3
 8007950:	f000 fe05 	bl	800855e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2160      	movs	r1, #96	@ 0x60
 800795a:	4618      	mov	r0, r3
 800795c:	f000 fe2f 	bl	80085be <TIM_ITRx_SetConfig>
      break;
 8007960:	e01c      	b.n	800799c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800796e:	461a      	mov	r2, r3
 8007970:	f000 fdc6 	bl	8008500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2140      	movs	r1, #64	@ 0x40
 800797a:	4618      	mov	r0, r3
 800797c:	f000 fe1f 	bl	80085be <TIM_ITRx_SetConfig>
      break;
 8007980:	e00c      	b.n	800799c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4619      	mov	r1, r3
 800798c:	4610      	mov	r0, r2
 800798e:	f000 fe16 	bl	80085be <TIM_ITRx_SetConfig>
      break;
 8007992:	e003      	b.n	800799c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	73fb      	strb	r3, [r7, #15]
      break;
 8007998:	e000      	b.n	800799c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800799a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	00100070 	.word	0x00100070
 80079bc:	00100060 	.word	0x00100060
 80079c0:	00100050 	.word	0x00100050
 80079c4:	00100040 	.word	0x00100040
 80079c8:	00100030 	.word	0x00100030
 80079cc:	00100020 	.word	0x00100020

080079d0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b087      	sub	sp, #28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	607a      	str	r2, [r7, #4]
 8007a90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e14a      	b.n	8007d36 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	f040 80dd 	bne.w	8007c68 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007aae:	7afb      	ldrb	r3, [r7, #11]
 8007ab0:	2b1f      	cmp	r3, #31
 8007ab2:	f200 80d6 	bhi.w	8007c62 <HAL_TIM_RegisterCallback+0x1de>
 8007ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8007abc <HAL_TIM_RegisterCallback+0x38>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007b3d 	.word	0x08007b3d
 8007ac0:	08007b45 	.word	0x08007b45
 8007ac4:	08007b4d 	.word	0x08007b4d
 8007ac8:	08007b55 	.word	0x08007b55
 8007acc:	08007b5d 	.word	0x08007b5d
 8007ad0:	08007b65 	.word	0x08007b65
 8007ad4:	08007b6d 	.word	0x08007b6d
 8007ad8:	08007b75 	.word	0x08007b75
 8007adc:	08007b7d 	.word	0x08007b7d
 8007ae0:	08007b85 	.word	0x08007b85
 8007ae4:	08007b8d 	.word	0x08007b8d
 8007ae8:	08007b95 	.word	0x08007b95
 8007aec:	08007b9d 	.word	0x08007b9d
 8007af0:	08007ba5 	.word	0x08007ba5
 8007af4:	08007baf 	.word	0x08007baf
 8007af8:	08007bb9 	.word	0x08007bb9
 8007afc:	08007bc3 	.word	0x08007bc3
 8007b00:	08007bcd 	.word	0x08007bcd
 8007b04:	08007bd7 	.word	0x08007bd7
 8007b08:	08007be1 	.word	0x08007be1
 8007b0c:	08007beb 	.word	0x08007beb
 8007b10:	08007bf5 	.word	0x08007bf5
 8007b14:	08007bff 	.word	0x08007bff
 8007b18:	08007c09 	.word	0x08007c09
 8007b1c:	08007c13 	.word	0x08007c13
 8007b20:	08007c1d 	.word	0x08007c1d
 8007b24:	08007c27 	.word	0x08007c27
 8007b28:	08007c31 	.word	0x08007c31
 8007b2c:	08007c3b 	.word	0x08007c3b
 8007b30:	08007c45 	.word	0x08007c45
 8007b34:	08007c4f 	.word	0x08007c4f
 8007b38:	08007c59 	.word	0x08007c59
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007b42:	e0f7      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007b4a:	e0f3      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007b52:	e0ef      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007b5a:	e0eb      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007b62:	e0e7      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007b6a:	e0e3      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007b72:	e0df      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007b7a:	e0db      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007b82:	e0d7      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007b8a:	e0d3      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007b92:	e0cf      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007b9a:	e0cb      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007ba2:	e0c7      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007bac:	e0c2      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007bb6:	e0bd      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007bc0:	e0b8      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8007bca:	e0b3      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007bd4:	e0ae      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007bde:	e0a9      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007be8:	e0a4      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007bf2:	e09f      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007bfc:	e09a      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007c06:	e095      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007c10:	e090      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007c1a:	e08b      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007c24:	e086      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007c2e:	e081      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007c38:	e07c      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007c42:	e077      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8007c4c:	e072      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007c56:	e06d      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007c60:	e068      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	75fb      	strb	r3, [r7, #23]
        break;
 8007c66:	e065      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d15d      	bne.n	8007d30 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007c74:	7afb      	ldrb	r3, [r7, #11]
 8007c76:	2b0d      	cmp	r3, #13
 8007c78:	d857      	bhi.n	8007d2a <HAL_TIM_RegisterCallback+0x2a6>
 8007c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c80 <HAL_TIM_RegisterCallback+0x1fc>)
 8007c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c80:	08007cb9 	.word	0x08007cb9
 8007c84:	08007cc1 	.word	0x08007cc1
 8007c88:	08007cc9 	.word	0x08007cc9
 8007c8c:	08007cd1 	.word	0x08007cd1
 8007c90:	08007cd9 	.word	0x08007cd9
 8007c94:	08007ce1 	.word	0x08007ce1
 8007c98:	08007ce9 	.word	0x08007ce9
 8007c9c:	08007cf1 	.word	0x08007cf1
 8007ca0:	08007cf9 	.word	0x08007cf9
 8007ca4:	08007d01 	.word	0x08007d01
 8007ca8:	08007d09 	.word	0x08007d09
 8007cac:	08007d11 	.word	0x08007d11
 8007cb0:	08007d19 	.word	0x08007d19
 8007cb4:	08007d21 	.word	0x08007d21
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007cbe:	e039      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007cc6:	e035      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007cce:	e031      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007cd6:	e02d      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007cde:	e029      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007ce6:	e025      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007cee:	e021      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007cf6:	e01d      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007cfe:	e019      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007d06:	e015      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007d0e:	e011      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007d16:	e00d      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007d1e:	e009      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007d28:	e004      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	75fb      	strb	r3, [r7, #23]
        break;
 8007d2e:	e001      	b.n	8007d34 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	371c      	adds	r7, #28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop

08007d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a4c      	ldr	r2, [pc, #304]	@ (8007e88 <TIM_Base_SetConfig+0x144>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d017      	beq.n	8007d8c <TIM_Base_SetConfig+0x48>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d62:	d013      	beq.n	8007d8c <TIM_Base_SetConfig+0x48>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a49      	ldr	r2, [pc, #292]	@ (8007e8c <TIM_Base_SetConfig+0x148>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00f      	beq.n	8007d8c <TIM_Base_SetConfig+0x48>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a48      	ldr	r2, [pc, #288]	@ (8007e90 <TIM_Base_SetConfig+0x14c>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d00b      	beq.n	8007d8c <TIM_Base_SetConfig+0x48>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a47      	ldr	r2, [pc, #284]	@ (8007e94 <TIM_Base_SetConfig+0x150>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d007      	beq.n	8007d8c <TIM_Base_SetConfig+0x48>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a46      	ldr	r2, [pc, #280]	@ (8007e98 <TIM_Base_SetConfig+0x154>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d003      	beq.n	8007d8c <TIM_Base_SetConfig+0x48>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a45      	ldr	r2, [pc, #276]	@ (8007e9c <TIM_Base_SetConfig+0x158>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d108      	bne.n	8007d9e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a39      	ldr	r2, [pc, #228]	@ (8007e88 <TIM_Base_SetConfig+0x144>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d023      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dac:	d01f      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a36      	ldr	r2, [pc, #216]	@ (8007e8c <TIM_Base_SetConfig+0x148>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d01b      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a35      	ldr	r2, [pc, #212]	@ (8007e90 <TIM_Base_SetConfig+0x14c>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d017      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a34      	ldr	r2, [pc, #208]	@ (8007e94 <TIM_Base_SetConfig+0x150>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d013      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a33      	ldr	r2, [pc, #204]	@ (8007e98 <TIM_Base_SetConfig+0x154>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d00f      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a33      	ldr	r2, [pc, #204]	@ (8007ea0 <TIM_Base_SetConfig+0x15c>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d00b      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a32      	ldr	r2, [pc, #200]	@ (8007ea4 <TIM_Base_SetConfig+0x160>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d007      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a31      	ldr	r2, [pc, #196]	@ (8007ea8 <TIM_Base_SetConfig+0x164>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d003      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a2c      	ldr	r2, [pc, #176]	@ (8007e9c <TIM_Base_SetConfig+0x158>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d108      	bne.n	8007e00 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a18      	ldr	r2, [pc, #96]	@ (8007e88 <TIM_Base_SetConfig+0x144>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d013      	beq.n	8007e54 <TIM_Base_SetConfig+0x110>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007e98 <TIM_Base_SetConfig+0x154>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d00f      	beq.n	8007e54 <TIM_Base_SetConfig+0x110>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a1a      	ldr	r2, [pc, #104]	@ (8007ea0 <TIM_Base_SetConfig+0x15c>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d00b      	beq.n	8007e54 <TIM_Base_SetConfig+0x110>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a19      	ldr	r2, [pc, #100]	@ (8007ea4 <TIM_Base_SetConfig+0x160>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d007      	beq.n	8007e54 <TIM_Base_SetConfig+0x110>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a18      	ldr	r2, [pc, #96]	@ (8007ea8 <TIM_Base_SetConfig+0x164>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d003      	beq.n	8007e54 <TIM_Base_SetConfig+0x110>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a13      	ldr	r2, [pc, #76]	@ (8007e9c <TIM_Base_SetConfig+0x158>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d103      	bne.n	8007e5c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	691a      	ldr	r2, [r3, #16]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d105      	bne.n	8007e7a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	f023 0201 	bic.w	r2, r3, #1
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	611a      	str	r2, [r3, #16]
  }
}
 8007e7a:	bf00      	nop
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	40012c00 	.word	0x40012c00
 8007e8c:	40000400 	.word	0x40000400
 8007e90:	40000800 	.word	0x40000800
 8007e94:	40000c00 	.word	0x40000c00
 8007e98:	40013400 	.word	0x40013400
 8007e9c:	40015000 	.word	0x40015000
 8007ea0:	40014000 	.word	0x40014000
 8007ea4:	40014400 	.word	0x40014400
 8007ea8:	40014800 	.word	0x40014800

08007eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	f023 0201 	bic.w	r2, r3, #1
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f023 0303 	bic.w	r3, r3, #3
 8007ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f023 0302 	bic.w	r3, r3, #2
 8007ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a30      	ldr	r2, [pc, #192]	@ (8007fc8 <TIM_OC1_SetConfig+0x11c>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d013      	beq.n	8007f34 <TIM_OC1_SetConfig+0x88>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a2f      	ldr	r2, [pc, #188]	@ (8007fcc <TIM_OC1_SetConfig+0x120>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00f      	beq.n	8007f34 <TIM_OC1_SetConfig+0x88>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a2e      	ldr	r2, [pc, #184]	@ (8007fd0 <TIM_OC1_SetConfig+0x124>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d00b      	beq.n	8007f34 <TIM_OC1_SetConfig+0x88>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8007fd4 <TIM_OC1_SetConfig+0x128>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d007      	beq.n	8007f34 <TIM_OC1_SetConfig+0x88>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a2c      	ldr	r2, [pc, #176]	@ (8007fd8 <TIM_OC1_SetConfig+0x12c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d003      	beq.n	8007f34 <TIM_OC1_SetConfig+0x88>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8007fdc <TIM_OC1_SetConfig+0x130>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d10c      	bne.n	8007f4e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f023 0308 	bic.w	r3, r3, #8
 8007f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f023 0304 	bic.w	r3, r3, #4
 8007f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a1d      	ldr	r2, [pc, #116]	@ (8007fc8 <TIM_OC1_SetConfig+0x11c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d013      	beq.n	8007f7e <TIM_OC1_SetConfig+0xd2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a1c      	ldr	r2, [pc, #112]	@ (8007fcc <TIM_OC1_SetConfig+0x120>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d00f      	beq.n	8007f7e <TIM_OC1_SetConfig+0xd2>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a1b      	ldr	r2, [pc, #108]	@ (8007fd0 <TIM_OC1_SetConfig+0x124>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d00b      	beq.n	8007f7e <TIM_OC1_SetConfig+0xd2>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a1a      	ldr	r2, [pc, #104]	@ (8007fd4 <TIM_OC1_SetConfig+0x128>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d007      	beq.n	8007f7e <TIM_OC1_SetConfig+0xd2>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a19      	ldr	r2, [pc, #100]	@ (8007fd8 <TIM_OC1_SetConfig+0x12c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d003      	beq.n	8007f7e <TIM_OC1_SetConfig+0xd2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a18      	ldr	r2, [pc, #96]	@ (8007fdc <TIM_OC1_SetConfig+0x130>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d111      	bne.n	8007fa2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	621a      	str	r2, [r3, #32]
}
 8007fbc:	bf00      	nop
 8007fbe:	371c      	adds	r7, #28
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	40012c00 	.word	0x40012c00
 8007fcc:	40013400 	.word	0x40013400
 8007fd0:	40014000 	.word	0x40014000
 8007fd4:	40014400 	.word	0x40014400
 8007fd8:	40014800 	.word	0x40014800
 8007fdc:	40015000 	.word	0x40015000

08007fe0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	f023 0210 	bic.w	r2, r3, #16
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800800e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800801a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	021b      	lsls	r3, r3, #8
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	4313      	orrs	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f023 0320 	bic.w	r3, r3, #32
 800802e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	011b      	lsls	r3, r3, #4
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	4313      	orrs	r3, r2
 800803a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a2c      	ldr	r2, [pc, #176]	@ (80080f0 <TIM_OC2_SetConfig+0x110>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d007      	beq.n	8008054 <TIM_OC2_SetConfig+0x74>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a2b      	ldr	r2, [pc, #172]	@ (80080f4 <TIM_OC2_SetConfig+0x114>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d003      	beq.n	8008054 <TIM_OC2_SetConfig+0x74>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a2a      	ldr	r2, [pc, #168]	@ (80080f8 <TIM_OC2_SetConfig+0x118>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d10d      	bne.n	8008070 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800805a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	011b      	lsls	r3, r3, #4
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	4313      	orrs	r3, r2
 8008066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800806e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a1f      	ldr	r2, [pc, #124]	@ (80080f0 <TIM_OC2_SetConfig+0x110>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d013      	beq.n	80080a0 <TIM_OC2_SetConfig+0xc0>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a1e      	ldr	r2, [pc, #120]	@ (80080f4 <TIM_OC2_SetConfig+0x114>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00f      	beq.n	80080a0 <TIM_OC2_SetConfig+0xc0>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a1e      	ldr	r2, [pc, #120]	@ (80080fc <TIM_OC2_SetConfig+0x11c>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00b      	beq.n	80080a0 <TIM_OC2_SetConfig+0xc0>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a1d      	ldr	r2, [pc, #116]	@ (8008100 <TIM_OC2_SetConfig+0x120>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d007      	beq.n	80080a0 <TIM_OC2_SetConfig+0xc0>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a1c      	ldr	r2, [pc, #112]	@ (8008104 <TIM_OC2_SetConfig+0x124>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d003      	beq.n	80080a0 <TIM_OC2_SetConfig+0xc0>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a17      	ldr	r2, [pc, #92]	@ (80080f8 <TIM_OC2_SetConfig+0x118>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d113      	bne.n	80080c8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80080a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	621a      	str	r2, [r3, #32]
}
 80080e2:	bf00      	nop
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	40012c00 	.word	0x40012c00
 80080f4:	40013400 	.word	0x40013400
 80080f8:	40015000 	.word	0x40015000
 80080fc:	40014000 	.word	0x40014000
 8008100:	40014400 	.word	0x40014400
 8008104:	40014800 	.word	0x40014800

08008108 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	69db      	ldr	r3, [r3, #28]
 800812e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800813a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f023 0303 	bic.w	r3, r3, #3
 8008142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	4313      	orrs	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	021b      	lsls	r3, r3, #8
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	4313      	orrs	r3, r2
 8008160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a2b      	ldr	r2, [pc, #172]	@ (8008214 <TIM_OC3_SetConfig+0x10c>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d007      	beq.n	800817a <TIM_OC3_SetConfig+0x72>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a2a      	ldr	r2, [pc, #168]	@ (8008218 <TIM_OC3_SetConfig+0x110>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d003      	beq.n	800817a <TIM_OC3_SetConfig+0x72>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a29      	ldr	r2, [pc, #164]	@ (800821c <TIM_OC3_SetConfig+0x114>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d10d      	bne.n	8008196 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	021b      	lsls	r3, r3, #8
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	4313      	orrs	r3, r2
 800818c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a1e      	ldr	r2, [pc, #120]	@ (8008214 <TIM_OC3_SetConfig+0x10c>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d013      	beq.n	80081c6 <TIM_OC3_SetConfig+0xbe>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a1d      	ldr	r2, [pc, #116]	@ (8008218 <TIM_OC3_SetConfig+0x110>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d00f      	beq.n	80081c6 <TIM_OC3_SetConfig+0xbe>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008220 <TIM_OC3_SetConfig+0x118>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d00b      	beq.n	80081c6 <TIM_OC3_SetConfig+0xbe>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a1c      	ldr	r2, [pc, #112]	@ (8008224 <TIM_OC3_SetConfig+0x11c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d007      	beq.n	80081c6 <TIM_OC3_SetConfig+0xbe>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008228 <TIM_OC3_SetConfig+0x120>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d003      	beq.n	80081c6 <TIM_OC3_SetConfig+0xbe>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a16      	ldr	r2, [pc, #88]	@ (800821c <TIM_OC3_SetConfig+0x114>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d113      	bne.n	80081ee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	011b      	lsls	r3, r3, #4
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	4313      	orrs	r3, r2
 80081e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	011b      	lsls	r3, r3, #4
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	621a      	str	r2, [r3, #32]
}
 8008208:	bf00      	nop
 800820a:	371c      	adds	r7, #28
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	40012c00 	.word	0x40012c00
 8008218:	40013400 	.word	0x40013400
 800821c:	40015000 	.word	0x40015000
 8008220:	40014000 	.word	0x40014000
 8008224:	40014400 	.word	0x40014400
 8008228:	40014800 	.word	0x40014800

0800822c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800822c:	b480      	push	{r7}
 800822e:	b087      	sub	sp, #28
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800825a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800825e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	021b      	lsls	r3, r3, #8
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	4313      	orrs	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800827a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	031b      	lsls	r3, r3, #12
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	4313      	orrs	r3, r2
 8008286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a2c      	ldr	r2, [pc, #176]	@ (800833c <TIM_OC4_SetConfig+0x110>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d007      	beq.n	80082a0 <TIM_OC4_SetConfig+0x74>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a2b      	ldr	r2, [pc, #172]	@ (8008340 <TIM_OC4_SetConfig+0x114>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d003      	beq.n	80082a0 <TIM_OC4_SetConfig+0x74>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a2a      	ldr	r2, [pc, #168]	@ (8008344 <TIM_OC4_SetConfig+0x118>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d10d      	bne.n	80082bc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80082a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	031b      	lsls	r3, r3, #12
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a1f      	ldr	r2, [pc, #124]	@ (800833c <TIM_OC4_SetConfig+0x110>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d013      	beq.n	80082ec <TIM_OC4_SetConfig+0xc0>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a1e      	ldr	r2, [pc, #120]	@ (8008340 <TIM_OC4_SetConfig+0x114>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d00f      	beq.n	80082ec <TIM_OC4_SetConfig+0xc0>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a1e      	ldr	r2, [pc, #120]	@ (8008348 <TIM_OC4_SetConfig+0x11c>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d00b      	beq.n	80082ec <TIM_OC4_SetConfig+0xc0>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a1d      	ldr	r2, [pc, #116]	@ (800834c <TIM_OC4_SetConfig+0x120>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d007      	beq.n	80082ec <TIM_OC4_SetConfig+0xc0>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a1c      	ldr	r2, [pc, #112]	@ (8008350 <TIM_OC4_SetConfig+0x124>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d003      	beq.n	80082ec <TIM_OC4_SetConfig+0xc0>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a17      	ldr	r2, [pc, #92]	@ (8008344 <TIM_OC4_SetConfig+0x118>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d113      	bne.n	8008314 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80082fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	019b      	lsls	r3, r3, #6
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	4313      	orrs	r3, r2
 8008306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	019b      	lsls	r3, r3, #6
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	4313      	orrs	r3, r2
 8008312:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	621a      	str	r2, [r3, #32]
}
 800832e:	bf00      	nop
 8008330:	371c      	adds	r7, #28
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	40012c00 	.word	0x40012c00
 8008340:	40013400 	.word	0x40013400
 8008344:	40015000 	.word	0x40015000
 8008348:	40014000 	.word	0x40014000
 800834c:	40014400 	.word	0x40014400
 8008350:	40014800 	.word	0x40014800

08008354 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a1b      	ldr	r3, [r3, #32]
 8008368:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800837a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	4313      	orrs	r3, r2
 8008390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008398:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	041b      	lsls	r3, r3, #16
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a19      	ldr	r2, [pc, #100]	@ (8008410 <TIM_OC5_SetConfig+0xbc>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d013      	beq.n	80083d6 <TIM_OC5_SetConfig+0x82>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a18      	ldr	r2, [pc, #96]	@ (8008414 <TIM_OC5_SetConfig+0xc0>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d00f      	beq.n	80083d6 <TIM_OC5_SetConfig+0x82>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a17      	ldr	r2, [pc, #92]	@ (8008418 <TIM_OC5_SetConfig+0xc4>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d00b      	beq.n	80083d6 <TIM_OC5_SetConfig+0x82>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a16      	ldr	r2, [pc, #88]	@ (800841c <TIM_OC5_SetConfig+0xc8>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d007      	beq.n	80083d6 <TIM_OC5_SetConfig+0x82>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a15      	ldr	r2, [pc, #84]	@ (8008420 <TIM_OC5_SetConfig+0xcc>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d003      	beq.n	80083d6 <TIM_OC5_SetConfig+0x82>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a14      	ldr	r2, [pc, #80]	@ (8008424 <TIM_OC5_SetConfig+0xd0>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d109      	bne.n	80083ea <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	021b      	lsls	r3, r3, #8
 80083e4:	697a      	ldr	r2, [r7, #20]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	685a      	ldr	r2, [r3, #4]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	621a      	str	r2, [r3, #32]
}
 8008404:	bf00      	nop
 8008406:	371c      	adds	r7, #28
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	40012c00 	.word	0x40012c00
 8008414:	40013400 	.word	0x40013400
 8008418:	40014000 	.word	0x40014000
 800841c:	40014400 	.word	0x40014400
 8008420:	40014800 	.word	0x40014800
 8008424:	40015000 	.word	0x40015000

08008428 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800844e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800845a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	021b      	lsls	r3, r3, #8
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4313      	orrs	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800846e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	051b      	lsls	r3, r3, #20
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	4313      	orrs	r3, r2
 800847a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a1a      	ldr	r2, [pc, #104]	@ (80084e8 <TIM_OC6_SetConfig+0xc0>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d013      	beq.n	80084ac <TIM_OC6_SetConfig+0x84>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a19      	ldr	r2, [pc, #100]	@ (80084ec <TIM_OC6_SetConfig+0xc4>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d00f      	beq.n	80084ac <TIM_OC6_SetConfig+0x84>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a18      	ldr	r2, [pc, #96]	@ (80084f0 <TIM_OC6_SetConfig+0xc8>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d00b      	beq.n	80084ac <TIM_OC6_SetConfig+0x84>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a17      	ldr	r2, [pc, #92]	@ (80084f4 <TIM_OC6_SetConfig+0xcc>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d007      	beq.n	80084ac <TIM_OC6_SetConfig+0x84>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a16      	ldr	r2, [pc, #88]	@ (80084f8 <TIM_OC6_SetConfig+0xd0>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d003      	beq.n	80084ac <TIM_OC6_SetConfig+0x84>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a15      	ldr	r2, [pc, #84]	@ (80084fc <TIM_OC6_SetConfig+0xd4>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d109      	bne.n	80084c0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	695b      	ldr	r3, [r3, #20]
 80084b8:	029b      	lsls	r3, r3, #10
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	4313      	orrs	r3, r2
 80084be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	621a      	str	r2, [r3, #32]
}
 80084da:	bf00      	nop
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	40012c00 	.word	0x40012c00
 80084ec:	40013400 	.word	0x40013400
 80084f0:	40014000 	.word	0x40014000
 80084f4:	40014400 	.word	0x40014400
 80084f8:	40014800 	.word	0x40014800
 80084fc:	40015000 	.word	0x40015000

08008500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008500:	b480      	push	{r7}
 8008502:	b087      	sub	sp, #28
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	f023 0201 	bic.w	r2, r3, #1
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800852a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	011b      	lsls	r3, r3, #4
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	4313      	orrs	r3, r2
 8008534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f023 030a 	bic.w	r3, r3, #10
 800853c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	4313      	orrs	r3, r2
 8008544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	621a      	str	r2, [r3, #32]
}
 8008552:	bf00      	nop
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800855e:	b480      	push	{r7}
 8008560:	b087      	sub	sp, #28
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	f023 0210 	bic.w	r2, r3, #16
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008588:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	031b      	lsls	r3, r3, #12
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	4313      	orrs	r3, r2
 8008592:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800859a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	011b      	lsls	r3, r3, #4
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	621a      	str	r2, [r3, #32]
}
 80085b2:	bf00      	nop
 80085b4:	371c      	adds	r7, #28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085be:	b480      	push	{r7}
 80085c0:	b085      	sub	sp, #20
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80085d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4313      	orrs	r3, r2
 80085e0:	f043 0307 	orr.w	r3, r3, #7
 80085e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	609a      	str	r2, [r3, #8]
}
 80085ec:	bf00      	nop
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008612:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	021a      	lsls	r2, r3, #8
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	431a      	orrs	r2, r3
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4313      	orrs	r3, r2
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	4313      	orrs	r3, r2
 8008624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	609a      	str	r2, [r3, #8]
}
 800862c:	bf00      	nop
 800862e:	371c      	adds	r7, #28
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f003 031f 	and.w	r3, r3, #31
 800864a:	2201      	movs	r2, #1
 800864c:	fa02 f303 	lsl.w	r3, r2, r3
 8008650:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6a1a      	ldr	r2, [r3, #32]
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	43db      	mvns	r3, r3
 800865a:	401a      	ands	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6a1a      	ldr	r2, [r3, #32]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f003 031f 	and.w	r3, r3, #31
 800866a:	6879      	ldr	r1, [r7, #4]
 800866c:	fa01 f303 	lsl.w	r3, r1, r3
 8008670:	431a      	orrs	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	621a      	str	r2, [r3, #32]
}
 8008676:	bf00      	nop
 8008678:	371c      	adds	r7, #28
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
	...

08008684 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a26      	ldr	r2, [pc, #152]	@ (8008728 <TIM_ResetCallback+0xa4>)
 8008690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a25      	ldr	r2, [pc, #148]	@ (800872c <TIM_ResetCallback+0xa8>)
 8008698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a24      	ldr	r2, [pc, #144]	@ (8008730 <TIM_ResetCallback+0xac>)
 80086a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a23      	ldr	r2, [pc, #140]	@ (8008734 <TIM_ResetCallback+0xb0>)
 80086a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a22      	ldr	r2, [pc, #136]	@ (8008738 <TIM_ResetCallback+0xb4>)
 80086b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a21      	ldr	r2, [pc, #132]	@ (800873c <TIM_ResetCallback+0xb8>)
 80086b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a20      	ldr	r2, [pc, #128]	@ (8008740 <TIM_ResetCallback+0xbc>)
 80086c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a1f      	ldr	r2, [pc, #124]	@ (8008744 <TIM_ResetCallback+0xc0>)
 80086c8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a1e      	ldr	r2, [pc, #120]	@ (8008748 <TIM_ResetCallback+0xc4>)
 80086d0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a1d      	ldr	r2, [pc, #116]	@ (800874c <TIM_ResetCallback+0xc8>)
 80086d8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a1c      	ldr	r2, [pc, #112]	@ (8008750 <TIM_ResetCallback+0xcc>)
 80086e0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008754 <TIM_ResetCallback+0xd0>)
 80086e8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a1a      	ldr	r2, [pc, #104]	@ (8008758 <TIM_ResetCallback+0xd4>)
 80086f0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a19      	ldr	r2, [pc, #100]	@ (800875c <TIM_ResetCallback+0xd8>)
 80086f8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a18      	ldr	r2, [pc, #96]	@ (8008760 <TIM_ResetCallback+0xdc>)
 8008700:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a17      	ldr	r2, [pc, #92]	@ (8008764 <TIM_ResetCallback+0xe0>)
 8008708:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a16      	ldr	r2, [pc, #88]	@ (8008768 <TIM_ResetCallback+0xe4>)
 8008710:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a15      	ldr	r2, [pc, #84]	@ (800876c <TIM_ResetCallback+0xe8>)
 8008718:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	08001fdd 	.word	0x08001fdd
 800872c:	080079d1 	.word	0x080079d1
 8008730:	08007a49 	.word	0x08007a49
 8008734:	08007a5d 	.word	0x08007a5d
 8008738:	080079f9 	.word	0x080079f9
 800873c:	08007a0d 	.word	0x08007a0d
 8008740:	080079e5 	.word	0x080079e5
 8008744:	08007a21 	.word	0x08007a21
 8008748:	08007a35 	.word	0x08007a35
 800874c:	08007a71 	.word	0x08007a71
 8008750:	080089c5 	.word	0x080089c5
 8008754:	080089d9 	.word	0x080089d9
 8008758:	080089ed 	.word	0x080089ed
 800875c:	08008a01 	.word	0x08008a01
 8008760:	08008a15 	.word	0x08008a15
 8008764:	08008a29 	.word	0x08008a29
 8008768:	08008a3d 	.word	0x08008a3d
 800876c:	08008a51 	.word	0x08008a51

08008770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008780:	2b01      	cmp	r3, #1
 8008782:	d101      	bne.n	8008788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008784:	2302      	movs	r3, #2
 8008786:	e074      	b.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2202      	movs	r2, #2
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a34      	ldr	r2, [pc, #208]	@ (8008880 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d009      	beq.n	80087c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a33      	ldr	r2, [pc, #204]	@ (8008884 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d004      	beq.n	80087c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a31      	ldr	r2, [pc, #196]	@ (8008888 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d108      	bne.n	80087d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80087cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80087de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a21      	ldr	r2, [pc, #132]	@ (8008880 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d022      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008808:	d01d      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a1f      	ldr	r2, [pc, #124]	@ (800888c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d018      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a1d      	ldr	r2, [pc, #116]	@ (8008890 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d013      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a1c      	ldr	r2, [pc, #112]	@ (8008894 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d00e      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a15      	ldr	r2, [pc, #84]	@ (8008884 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d009      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a18      	ldr	r2, [pc, #96]	@ (8008898 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d004      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a11      	ldr	r2, [pc, #68]	@ (8008888 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d10c      	bne.n	8008860 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800884c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	4313      	orrs	r3, r2
 8008856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	40012c00 	.word	0x40012c00
 8008884:	40013400 	.word	0x40013400
 8008888:	40015000 	.word	0x40015000
 800888c:	40000400 	.word	0x40000400
 8008890:	40000800 	.word	0x40000800
 8008894:	40000c00 	.word	0x40000c00
 8008898:	40014000 	.word	0x40014000

0800889c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d101      	bne.n	80088b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80088b4:	2302      	movs	r3, #2
 80088b6:	e078      	b.n	80089aa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	4313      	orrs	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	4313      	orrs	r3, r2
 8008904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	4313      	orrs	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800891e:	4313      	orrs	r3, r2
 8008920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	041b      	lsls	r3, r3, #16
 800892e:	4313      	orrs	r3, r2
 8008930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	4313      	orrs	r3, r2
 800893e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a1c      	ldr	r2, [pc, #112]	@ (80089b8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d009      	beq.n	800895e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a1b      	ldr	r2, [pc, #108]	@ (80089bc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d004      	beq.n	800895e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a19      	ldr	r2, [pc, #100]	@ (80089c0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d11c      	bne.n	8008998 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008968:	051b      	lsls	r3, r3, #20
 800896a:	4313      	orrs	r3, r2
 800896c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	4313      	orrs	r3, r2
 800897a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008986:	4313      	orrs	r3, r2
 8008988:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008994:	4313      	orrs	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	40012c00 	.word	0x40012c00
 80089bc:	40013400 	.word	0x40013400
 80089c0:	40015000 	.word	0x40015000

080089c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e050      	b.n	8008b18 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d114      	bne.n	8008aaa <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fd5b 	bl	8009544 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d103      	bne.n	8008aa0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a21      	ldr	r2, [pc, #132]	@ (8008b20 <HAL_UART_Init+0xbc>)
 8008a9c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2224      	movs	r2, #36	@ 0x24
 8008aae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f022 0201 	bic.w	r2, r2, #1
 8008ac0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f001 f888 	bl	8009be0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fd89 	bl	80095e8 <UART_SetConfig>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d101      	bne.n	8008ae0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e01b      	b.n	8008b18 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008aee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689a      	ldr	r2, [r3, #8]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008afe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f042 0201 	orr.w	r2, r2, #1
 8008b0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f001 f907 	bl	8009d24 <UART_CheckIdleState>
 8008b16:	4603      	mov	r3, r0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	08002ecd 	.word	0x08002ecd

08008b24 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	607a      	str	r2, [r7, #4]
 8008b30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d109      	bne.n	8008b50 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e09c      	b.n	8008c8a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b56:	2b20      	cmp	r3, #32
 8008b58:	d16c      	bne.n	8008c34 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8008b5a:	7afb      	ldrb	r3, [r7, #11]
 8008b5c:	2b0c      	cmp	r3, #12
 8008b5e:	d85e      	bhi.n	8008c1e <HAL_UART_RegisterCallback+0xfa>
 8008b60:	a201      	add	r2, pc, #4	@ (adr r2, 8008b68 <HAL_UART_RegisterCallback+0x44>)
 8008b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b66:	bf00      	nop
 8008b68:	08008b9d 	.word	0x08008b9d
 8008b6c:	08008ba7 	.word	0x08008ba7
 8008b70:	08008bb1 	.word	0x08008bb1
 8008b74:	08008bbb 	.word	0x08008bbb
 8008b78:	08008bc5 	.word	0x08008bc5
 8008b7c:	08008bcf 	.word	0x08008bcf
 8008b80:	08008bd9 	.word	0x08008bd9
 8008b84:	08008be3 	.word	0x08008be3
 8008b88:	08008bed 	.word	0x08008bed
 8008b8c:	08008bf7 	.word	0x08008bf7
 8008b90:	08008c01 	.word	0x08008c01
 8008b94:	08008c0b 	.word	0x08008c0b
 8008b98:	08008c15 	.word	0x08008c15
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008ba4:	e070      	b.n	8008c88 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008bae:	e06b      	b.n	8008c88 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008bb8:	e066      	b.n	8008c88 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008bc2:	e061      	b.n	8008c88 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008bcc:	e05c      	b.n	8008c88 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008bd6:	e057      	b.n	8008c88 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008be0:	e052      	b.n	8008c88 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008bea:	e04d      	b.n	8008c88 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008bf4:	e048      	b.n	8008c88 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008bfe:	e043      	b.n	8008c88 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008c08:	e03e      	b.n	8008c88 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008c12:	e039      	b.n	8008c88 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008c1c:	e034      	b.n	8008c88 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	75fb      	strb	r3, [r7, #23]
        break;
 8008c32:	e029      	b.n	8008c88 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d11a      	bne.n	8008c74 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8008c3e:	7afb      	ldrb	r3, [r7, #11]
 8008c40:	2b0b      	cmp	r3, #11
 8008c42:	d002      	beq.n	8008c4a <HAL_UART_RegisterCallback+0x126>
 8008c44:	2b0c      	cmp	r3, #12
 8008c46:	d005      	beq.n	8008c54 <HAL_UART_RegisterCallback+0x130>
 8008c48:	e009      	b.n	8008c5e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008c52:	e019      	b.n	8008c88 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008c5c:	e014      	b.n	8008c88 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	75fb      	strb	r3, [r7, #23]
        break;
 8008c72:	e009      	b.n	8008c88 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	371c      	adds	r7, #28
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop

08008c98 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b08a      	sub	sp, #40	@ 0x28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cac:	2b20      	cmp	r3, #32
 8008cae:	d137      	bne.n	8008d20 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <HAL_UART_Receive_DMA+0x24>
 8008cb6:	88fb      	ldrh	r3, [r7, #6]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d101      	bne.n	8008cc0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e030      	b.n	8008d22 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a18      	ldr	r2, [pc, #96]	@ (8008d2c <HAL_UART_Receive_DMA+0x94>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d01f      	beq.n	8008d10 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d018      	beq.n	8008d10 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	e853 3f00 	ldrex	r3, [r3]
 8008cea:	613b      	str	r3, [r7, #16]
   return(result);
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfc:	623b      	str	r3, [r7, #32]
 8008cfe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d00:	69f9      	ldr	r1, [r7, #28]
 8008d02:	6a3a      	ldr	r2, [r7, #32]
 8008d04:	e841 2300 	strex	r3, r2, [r1]
 8008d08:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1e6      	bne.n	8008cde <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008d10:	88fb      	ldrh	r3, [r7, #6]
 8008d12:	461a      	mov	r2, r3
 8008d14:	68b9      	ldr	r1, [r7, #8]
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f001 f91c 	bl	8009f54 <UART_Start_Receive_DMA>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	e000      	b.n	8008d22 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008d20:	2302      	movs	r3, #2
  }
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3728      	adds	r7, #40	@ 0x28
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	40008000 	.word	0x40008000

08008d30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b0ba      	sub	sp, #232	@ 0xe8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008d5a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008d5e:	4013      	ands	r3, r2
 8008d60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008d64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d11b      	bne.n	8008da4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d70:	f003 0320 	and.w	r3, r3, #32
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d015      	beq.n	8008da4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d7c:	f003 0320 	and.w	r3, r3, #32
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d105      	bne.n	8008d90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d009      	beq.n	8008da4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 8312 	beq.w	80093be <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	4798      	blx	r3
      }
      return;
 8008da2:	e30c      	b.n	80093be <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008da4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 8129 	beq.w	8009000 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008dae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008db2:	4b90      	ldr	r3, [pc, #576]	@ (8008ff4 <HAL_UART_IRQHandler+0x2c4>)
 8008db4:	4013      	ands	r3, r2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d106      	bne.n	8008dc8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008dba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008dbe:	4b8e      	ldr	r3, [pc, #568]	@ (8008ff8 <HAL_UART_IRQHandler+0x2c8>)
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f000 811c 	beq.w	8009000 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d011      	beq.n	8008df8 <HAL_UART_IRQHandler+0xc8>
 8008dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00b      	beq.n	8008df8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2201      	movs	r2, #1
 8008de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dee:	f043 0201 	orr.w	r2, r3, #1
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dfc:	f003 0302 	and.w	r3, r3, #2
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d011      	beq.n	8008e28 <HAL_UART_IRQHandler+0xf8>
 8008e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00b      	beq.n	8008e28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2202      	movs	r2, #2
 8008e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e1e:	f043 0204 	orr.w	r2, r3, #4
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d011      	beq.n	8008e58 <HAL_UART_IRQHandler+0x128>
 8008e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00b      	beq.n	8008e58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2204      	movs	r2, #4
 8008e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e4e:	f043 0202 	orr.w	r2, r3, #2
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e5c:	f003 0308 	and.w	r3, r3, #8
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d017      	beq.n	8008e94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e68:	f003 0320 	and.w	r3, r3, #32
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d105      	bne.n	8008e7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008e70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008e74:	4b5f      	ldr	r3, [pc, #380]	@ (8008ff4 <HAL_UART_IRQHandler+0x2c4>)
 8008e76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00b      	beq.n	8008e94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2208      	movs	r2, #8
 8008e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e8a:	f043 0208 	orr.w	r2, r3, #8
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d012      	beq.n	8008ec6 <HAL_UART_IRQHandler+0x196>
 8008ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ea4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00c      	beq.n	8008ec6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ebc:	f043 0220 	orr.w	r2, r3, #32
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 8278 	beq.w	80093c2 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ed6:	f003 0320 	and.w	r3, r3, #32
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d013      	beq.n	8008f06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ee2:	f003 0320 	and.w	r3, r3, #32
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d105      	bne.n	8008ef6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d007      	beq.n	8008f06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f1a:	2b40      	cmp	r3, #64	@ 0x40
 8008f1c:	d005      	beq.n	8008f2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d058      	beq.n	8008fdc <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f001 f8f9 	bl	800a122 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f3a:	2b40      	cmp	r3, #64	@ 0x40
 8008f3c:	d148      	bne.n	8008fd0 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3308      	adds	r3, #8
 8008f44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3308      	adds	r3, #8
 8008f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f7a:	e841 2300 	strex	r3, r2, [r1]
 8008f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1d9      	bne.n	8008f3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d017      	beq.n	8008fc4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f9a:	4a18      	ldr	r2, [pc, #96]	@ (8008ffc <HAL_UART_IRQHandler+0x2cc>)
 8008f9c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fb ffeb 	bl	8004f80 <HAL_DMA_Abort_IT>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d01f      	beq.n	8008ff0 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc2:	e015      	b.n	8008ff0 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fce:	e00f      	b.n	8008ff0 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fda:	e009      	b.n	8008ff0 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008fee:	e1e8      	b.n	80093c2 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff0:	bf00      	nop
    return;
 8008ff2:	e1e6      	b.n	80093c2 <HAL_UART_IRQHandler+0x692>
 8008ff4:	10000001 	.word	0x10000001
 8008ff8:	04000120 	.word	0x04000120
 8008ffc:	0800a3ed 	.word	0x0800a3ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009004:	2b01      	cmp	r3, #1
 8009006:	f040 8176 	bne.w	80092f6 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800900a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800900e:	f003 0310 	and.w	r3, r3, #16
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 816f 	beq.w	80092f6 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800901c:	f003 0310 	and.w	r3, r3, #16
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 8168 	beq.w	80092f6 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2210      	movs	r2, #16
 800902c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009038:	2b40      	cmp	r3, #64	@ 0x40
 800903a:	f040 80dc 	bne.w	80091f6 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800904c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 80b1 	beq.w	80091b8 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800905c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009060:	429a      	cmp	r2, r3
 8009062:	f080 80a9 	bcs.w	80091b8 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800906c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 0320 	and.w	r3, r3, #32
 800907e:	2b00      	cmp	r3, #0
 8009080:	f040 8087 	bne.w	8009192 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009090:	e853 3f00 	ldrex	r3, [r3]
 8009094:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009098:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800909c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	461a      	mov	r2, r3
 80090aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80090ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80090ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80090c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1da      	bne.n	8009084 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3308      	adds	r3, #8
 80090d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090d8:	e853 3f00 	ldrex	r3, [r3]
 80090dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80090de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090e0:	f023 0301 	bic.w	r3, r3, #1
 80090e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	3308      	adds	r3, #8
 80090ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80090f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80090f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80090fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80090fe:	e841 2300 	strex	r3, r2, [r1]
 8009102:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009104:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1e1      	bne.n	80090ce <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3308      	adds	r3, #8
 8009110:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009112:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009114:	e853 3f00 	ldrex	r3, [r3]
 8009118:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800911a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800911c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009120:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3308      	adds	r3, #8
 800912a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800912e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009130:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009132:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009134:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009136:	e841 2300 	strex	r3, r2, [r1]
 800913a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800913c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1e3      	bne.n	800910a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2220      	movs	r2, #32
 8009146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009158:	e853 3f00 	ldrex	r3, [r3]
 800915c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800915e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009160:	f023 0310 	bic.w	r3, r3, #16
 8009164:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	461a      	mov	r2, r3
 800916e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009172:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009174:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009176:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009178:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800917a:	e841 2300 	strex	r3, r2, [r1]
 800917e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1e4      	bne.n	8009150 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800918c:	4618      	mov	r0, r3
 800918e:	f7fb fe9e 	bl	8004ece <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2202      	movs	r2, #2
 8009196:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80091aa:	b292      	uxth	r2, r2
 80091ac:	1a8a      	subs	r2, r1, r2
 80091ae:	b292      	uxth	r2, r2
 80091b0:	4611      	mov	r1, r2
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80091b6:	e106      	b.n	80093c6 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80091be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091c2:	429a      	cmp	r2, r3
 80091c4:	f040 80ff 	bne.w	80093c6 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0320 	and.w	r3, r3, #32
 80091d6:	2b20      	cmp	r3, #32
 80091d8:	f040 80f5 	bne.w	80093c6 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2202      	movs	r2, #2
 80091e0:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80091ee:	4611      	mov	r1, r2
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	4798      	blx	r3
      return;
 80091f4:	e0e7      	b.n	80093c6 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009202:	b29b      	uxth	r3, r3
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009210:	b29b      	uxth	r3, r3
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 80d9 	beq.w	80093ca <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8009218:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 80d4 	beq.w	80093ca <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922a:	e853 3f00 	ldrex	r3, [r3]
 800922e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009232:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009236:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009244:	647b      	str	r3, [r7, #68]	@ 0x44
 8009246:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009248:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800924a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800924c:	e841 2300 	strex	r3, r2, [r1]
 8009250:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1e4      	bne.n	8009222 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3308      	adds	r3, #8
 800925e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009262:	e853 3f00 	ldrex	r3, [r3]
 8009266:	623b      	str	r3, [r7, #32]
   return(result);
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800926e:	f023 0301 	bic.w	r3, r3, #1
 8009272:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3308      	adds	r3, #8
 800927c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009280:	633a      	str	r2, [r7, #48]	@ 0x30
 8009282:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009284:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009288:	e841 2300 	strex	r3, r2, [r1]
 800928c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800928e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1e1      	bne.n	8009258 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2220      	movs	r2, #32
 8009298:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	e853 3f00 	ldrex	r3, [r3]
 80092b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f023 0310 	bic.w	r3, r3, #16
 80092bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	461a      	mov	r2, r3
 80092c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80092ca:	61fb      	str	r3, [r7, #28]
 80092cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ce:	69b9      	ldr	r1, [r7, #24]
 80092d0:	69fa      	ldr	r2, [r7, #28]
 80092d2:	e841 2300 	strex	r3, r2, [r1]
 80092d6:	617b      	str	r3, [r7, #20]
   return(result);
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1e4      	bne.n	80092a8 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2202      	movs	r2, #2
 80092e2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80092ea:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80092ee:	4611      	mov	r1, r2
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092f4:	e069      	b.n	80093ca <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80092f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d010      	beq.n	8009324 <HAL_UART_IRQHandler+0x5f4>
 8009302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00a      	beq.n	8009324 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009316:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009322:	e055      	b.n	80093d0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800932c:	2b00      	cmp	r3, #0
 800932e:	d014      	beq.n	800935a <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009338:	2b00      	cmp	r3, #0
 800933a:	d105      	bne.n	8009348 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800933c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009340:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d008      	beq.n	800935a <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800934c:	2b00      	cmp	r3, #0
 800934e:	d03e      	beq.n	80093ce <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	4798      	blx	r3
    }
    return;
 8009358:	e039      	b.n	80093ce <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800935a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800935e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009362:	2b00      	cmp	r3, #0
 8009364:	d009      	beq.n	800937a <HAL_UART_IRQHandler+0x64a>
 8009366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800936a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f001 f84e 	bl	800a414 <UART_EndTransmit_IT>
    return;
 8009378:	e02a      	b.n	80093d0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800937a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800937e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00b      	beq.n	800939e <HAL_UART_IRQHandler+0x66e>
 8009386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800938a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d005      	beq.n	800939e <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800939c:	e018      	b.n	80093d0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800939e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d012      	beq.n	80093d0 <HAL_UART_IRQHandler+0x6a0>
 80093aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	da0e      	bge.n	80093d0 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093bc:	e008      	b.n	80093d0 <HAL_UART_IRQHandler+0x6a0>
      return;
 80093be:	bf00      	nop
 80093c0:	e006      	b.n	80093d0 <HAL_UART_IRQHandler+0x6a0>
    return;
 80093c2:	bf00      	nop
 80093c4:	e004      	b.n	80093d0 <HAL_UART_IRQHandler+0x6a0>
      return;
 80093c6:	bf00      	nop
 80093c8:	e002      	b.n	80093d0 <HAL_UART_IRQHandler+0x6a0>
      return;
 80093ca:	bf00      	nop
 80093cc:	e000      	b.n	80093d0 <HAL_UART_IRQHandler+0x6a0>
    return;
 80093ce:	bf00      	nop
  }
}
 80093d0:	37e8      	adds	r7, #232	@ 0xe8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop

080093d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a09      	ldr	r2, [pc, #36]	@ (80094b0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d009      	beq.n	80094a4 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	430a      	orrs	r2, r1
 80094a2:	615a      	str	r2, [r3, #20]
  }
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	40008000 	.word	0x40008000

080094b4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a18      	ldr	r2, [pc, #96]	@ (8009524 <HAL_UART_EnableReceiverTimeout+0x70>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d027      	beq.n	8009516 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094cc:	2b20      	cmp	r3, #32
 80094ce:	d120      	bne.n	8009512 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d101      	bne.n	80094de <HAL_UART_EnableReceiverTimeout+0x2a>
 80094da:	2302      	movs	r3, #2
 80094dc:	e01c      	b.n	8009518 <HAL_UART_EnableReceiverTimeout+0x64>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2224      	movs	r2, #36	@ 0x24
 80094ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80094fc:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2220      	movs	r2, #32
 8009502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800950e:	2300      	movs	r3, #0
 8009510:	e002      	b.n	8009518 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009512:	2302      	movs	r3, #2
 8009514:	e000      	b.n	8009518 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
  }
}
 8009518:	4618      	mov	r0, r3
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	40008000 	.word	0x40008000

08009528 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009536:	4618      	mov	r0, r3
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
	...

08009544 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a1a      	ldr	r2, [pc, #104]	@ (80095b8 <UART_InitCallbacksToDefault+0x74>)
 8009550:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a19      	ldr	r2, [pc, #100]	@ (80095bc <UART_InitCallbacksToDefault+0x78>)
 8009558:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a18      	ldr	r2, [pc, #96]	@ (80095c0 <UART_InitCallbacksToDefault+0x7c>)
 8009560:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a17      	ldr	r2, [pc, #92]	@ (80095c4 <UART_InitCallbacksToDefault+0x80>)
 8009568:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a16      	ldr	r2, [pc, #88]	@ (80095c8 <UART_InitCallbacksToDefault+0x84>)
 8009570:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a15      	ldr	r2, [pc, #84]	@ (80095cc <UART_InitCallbacksToDefault+0x88>)
 8009578:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a14      	ldr	r2, [pc, #80]	@ (80095d0 <UART_InitCallbacksToDefault+0x8c>)
 8009580:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a13      	ldr	r2, [pc, #76]	@ (80095d4 <UART_InitCallbacksToDefault+0x90>)
 8009588:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a12      	ldr	r2, [pc, #72]	@ (80095d8 <UART_InitCallbacksToDefault+0x94>)
 8009590:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a11      	ldr	r2, [pc, #68]	@ (80095dc <UART_InitCallbacksToDefault+0x98>)
 8009598:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a10      	ldr	r2, [pc, #64]	@ (80095e0 <UART_InitCallbacksToDefault+0x9c>)
 80095a0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a0f      	ldr	r2, [pc, #60]	@ (80095e4 <UART_InitCallbacksToDefault+0xa0>)
 80095a8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	080093ed 	.word	0x080093ed
 80095bc:	080093d9 	.word	0x080093d9
 80095c0:	08009401 	.word	0x08009401
 80095c4:	08001fc9 	.word	0x08001fc9
 80095c8:	08009415 	.word	0x08009415
 80095cc:	08009429 	.word	0x08009429
 80095d0:	0800943d 	.word	0x0800943d
 80095d4:	08009451 	.word	0x08009451
 80095d8:	0800a46f 	.word	0x0800a46f
 80095dc:	0800a483 	.word	0x0800a483
 80095e0:	0800a497 	.word	0x0800a497
 80095e4:	08009465 	.word	0x08009465

080095e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095ec:	b08c      	sub	sp, #48	@ 0x30
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	689a      	ldr	r2, [r3, #8]
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	431a      	orrs	r2, r3
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	431a      	orrs	r2, r3
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	69db      	ldr	r3, [r3, #28]
 800960c:	4313      	orrs	r3, r2
 800960e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	4baa      	ldr	r3, [pc, #680]	@ (80098c0 <UART_SetConfig+0x2d8>)
 8009618:	4013      	ands	r3, r2
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	6812      	ldr	r2, [r2, #0]
 800961e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009620:	430b      	orrs	r3, r1
 8009622:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	68da      	ldr	r2, [r3, #12]
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	430a      	orrs	r2, r1
 8009638:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a9f      	ldr	r2, [pc, #636]	@ (80098c4 <UART_SetConfig+0x2dc>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d004      	beq.n	8009654 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009650:	4313      	orrs	r3, r2
 8009652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800965e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	6812      	ldr	r2, [r2, #0]
 8009666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009668:	430b      	orrs	r3, r1
 800966a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009672:	f023 010f 	bic.w	r1, r3, #15
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	430a      	orrs	r2, r1
 8009680:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a90      	ldr	r2, [pc, #576]	@ (80098c8 <UART_SetConfig+0x2e0>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d125      	bne.n	80096d8 <UART_SetConfig+0xf0>
 800968c:	4b8f      	ldr	r3, [pc, #572]	@ (80098cc <UART_SetConfig+0x2e4>)
 800968e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009692:	f003 0303 	and.w	r3, r3, #3
 8009696:	2b03      	cmp	r3, #3
 8009698:	d81a      	bhi.n	80096d0 <UART_SetConfig+0xe8>
 800969a:	a201      	add	r2, pc, #4	@ (adr r2, 80096a0 <UART_SetConfig+0xb8>)
 800969c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a0:	080096b1 	.word	0x080096b1
 80096a4:	080096c1 	.word	0x080096c1
 80096a8:	080096b9 	.word	0x080096b9
 80096ac:	080096c9 	.word	0x080096c9
 80096b0:	2301      	movs	r3, #1
 80096b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096b6:	e116      	b.n	80098e6 <UART_SetConfig+0x2fe>
 80096b8:	2302      	movs	r3, #2
 80096ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096be:	e112      	b.n	80098e6 <UART_SetConfig+0x2fe>
 80096c0:	2304      	movs	r3, #4
 80096c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096c6:	e10e      	b.n	80098e6 <UART_SetConfig+0x2fe>
 80096c8:	2308      	movs	r3, #8
 80096ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096ce:	e10a      	b.n	80098e6 <UART_SetConfig+0x2fe>
 80096d0:	2310      	movs	r3, #16
 80096d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096d6:	e106      	b.n	80098e6 <UART_SetConfig+0x2fe>
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a7c      	ldr	r2, [pc, #496]	@ (80098d0 <UART_SetConfig+0x2e8>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d138      	bne.n	8009754 <UART_SetConfig+0x16c>
 80096e2:	4b7a      	ldr	r3, [pc, #488]	@ (80098cc <UART_SetConfig+0x2e4>)
 80096e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096e8:	f003 030c 	and.w	r3, r3, #12
 80096ec:	2b0c      	cmp	r3, #12
 80096ee:	d82d      	bhi.n	800974c <UART_SetConfig+0x164>
 80096f0:	a201      	add	r2, pc, #4	@ (adr r2, 80096f8 <UART_SetConfig+0x110>)
 80096f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f6:	bf00      	nop
 80096f8:	0800972d 	.word	0x0800972d
 80096fc:	0800974d 	.word	0x0800974d
 8009700:	0800974d 	.word	0x0800974d
 8009704:	0800974d 	.word	0x0800974d
 8009708:	0800973d 	.word	0x0800973d
 800970c:	0800974d 	.word	0x0800974d
 8009710:	0800974d 	.word	0x0800974d
 8009714:	0800974d 	.word	0x0800974d
 8009718:	08009735 	.word	0x08009735
 800971c:	0800974d 	.word	0x0800974d
 8009720:	0800974d 	.word	0x0800974d
 8009724:	0800974d 	.word	0x0800974d
 8009728:	08009745 	.word	0x08009745
 800972c:	2300      	movs	r3, #0
 800972e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009732:	e0d8      	b.n	80098e6 <UART_SetConfig+0x2fe>
 8009734:	2302      	movs	r3, #2
 8009736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800973a:	e0d4      	b.n	80098e6 <UART_SetConfig+0x2fe>
 800973c:	2304      	movs	r3, #4
 800973e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009742:	e0d0      	b.n	80098e6 <UART_SetConfig+0x2fe>
 8009744:	2308      	movs	r3, #8
 8009746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800974a:	e0cc      	b.n	80098e6 <UART_SetConfig+0x2fe>
 800974c:	2310      	movs	r3, #16
 800974e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009752:	e0c8      	b.n	80098e6 <UART_SetConfig+0x2fe>
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a5e      	ldr	r2, [pc, #376]	@ (80098d4 <UART_SetConfig+0x2ec>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d125      	bne.n	80097aa <UART_SetConfig+0x1c2>
 800975e:	4b5b      	ldr	r3, [pc, #364]	@ (80098cc <UART_SetConfig+0x2e4>)
 8009760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009764:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009768:	2b30      	cmp	r3, #48	@ 0x30
 800976a:	d016      	beq.n	800979a <UART_SetConfig+0x1b2>
 800976c:	2b30      	cmp	r3, #48	@ 0x30
 800976e:	d818      	bhi.n	80097a2 <UART_SetConfig+0x1ba>
 8009770:	2b20      	cmp	r3, #32
 8009772:	d00a      	beq.n	800978a <UART_SetConfig+0x1a2>
 8009774:	2b20      	cmp	r3, #32
 8009776:	d814      	bhi.n	80097a2 <UART_SetConfig+0x1ba>
 8009778:	2b00      	cmp	r3, #0
 800977a:	d002      	beq.n	8009782 <UART_SetConfig+0x19a>
 800977c:	2b10      	cmp	r3, #16
 800977e:	d008      	beq.n	8009792 <UART_SetConfig+0x1aa>
 8009780:	e00f      	b.n	80097a2 <UART_SetConfig+0x1ba>
 8009782:	2300      	movs	r3, #0
 8009784:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009788:	e0ad      	b.n	80098e6 <UART_SetConfig+0x2fe>
 800978a:	2302      	movs	r3, #2
 800978c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009790:	e0a9      	b.n	80098e6 <UART_SetConfig+0x2fe>
 8009792:	2304      	movs	r3, #4
 8009794:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009798:	e0a5      	b.n	80098e6 <UART_SetConfig+0x2fe>
 800979a:	2308      	movs	r3, #8
 800979c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097a0:	e0a1      	b.n	80098e6 <UART_SetConfig+0x2fe>
 80097a2:	2310      	movs	r3, #16
 80097a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097a8:	e09d      	b.n	80098e6 <UART_SetConfig+0x2fe>
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a4a      	ldr	r2, [pc, #296]	@ (80098d8 <UART_SetConfig+0x2f0>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d125      	bne.n	8009800 <UART_SetConfig+0x218>
 80097b4:	4b45      	ldr	r3, [pc, #276]	@ (80098cc <UART_SetConfig+0x2e4>)
 80097b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80097be:	2bc0      	cmp	r3, #192	@ 0xc0
 80097c0:	d016      	beq.n	80097f0 <UART_SetConfig+0x208>
 80097c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80097c4:	d818      	bhi.n	80097f8 <UART_SetConfig+0x210>
 80097c6:	2b80      	cmp	r3, #128	@ 0x80
 80097c8:	d00a      	beq.n	80097e0 <UART_SetConfig+0x1f8>
 80097ca:	2b80      	cmp	r3, #128	@ 0x80
 80097cc:	d814      	bhi.n	80097f8 <UART_SetConfig+0x210>
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d002      	beq.n	80097d8 <UART_SetConfig+0x1f0>
 80097d2:	2b40      	cmp	r3, #64	@ 0x40
 80097d4:	d008      	beq.n	80097e8 <UART_SetConfig+0x200>
 80097d6:	e00f      	b.n	80097f8 <UART_SetConfig+0x210>
 80097d8:	2300      	movs	r3, #0
 80097da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097de:	e082      	b.n	80098e6 <UART_SetConfig+0x2fe>
 80097e0:	2302      	movs	r3, #2
 80097e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097e6:	e07e      	b.n	80098e6 <UART_SetConfig+0x2fe>
 80097e8:	2304      	movs	r3, #4
 80097ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097ee:	e07a      	b.n	80098e6 <UART_SetConfig+0x2fe>
 80097f0:	2308      	movs	r3, #8
 80097f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097f6:	e076      	b.n	80098e6 <UART_SetConfig+0x2fe>
 80097f8:	2310      	movs	r3, #16
 80097fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097fe:	e072      	b.n	80098e6 <UART_SetConfig+0x2fe>
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a35      	ldr	r2, [pc, #212]	@ (80098dc <UART_SetConfig+0x2f4>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d12a      	bne.n	8009860 <UART_SetConfig+0x278>
 800980a:	4b30      	ldr	r3, [pc, #192]	@ (80098cc <UART_SetConfig+0x2e4>)
 800980c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009810:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009814:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009818:	d01a      	beq.n	8009850 <UART_SetConfig+0x268>
 800981a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800981e:	d81b      	bhi.n	8009858 <UART_SetConfig+0x270>
 8009820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009824:	d00c      	beq.n	8009840 <UART_SetConfig+0x258>
 8009826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800982a:	d815      	bhi.n	8009858 <UART_SetConfig+0x270>
 800982c:	2b00      	cmp	r3, #0
 800982e:	d003      	beq.n	8009838 <UART_SetConfig+0x250>
 8009830:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009834:	d008      	beq.n	8009848 <UART_SetConfig+0x260>
 8009836:	e00f      	b.n	8009858 <UART_SetConfig+0x270>
 8009838:	2300      	movs	r3, #0
 800983a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800983e:	e052      	b.n	80098e6 <UART_SetConfig+0x2fe>
 8009840:	2302      	movs	r3, #2
 8009842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009846:	e04e      	b.n	80098e6 <UART_SetConfig+0x2fe>
 8009848:	2304      	movs	r3, #4
 800984a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800984e:	e04a      	b.n	80098e6 <UART_SetConfig+0x2fe>
 8009850:	2308      	movs	r3, #8
 8009852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009856:	e046      	b.n	80098e6 <UART_SetConfig+0x2fe>
 8009858:	2310      	movs	r3, #16
 800985a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800985e:	e042      	b.n	80098e6 <UART_SetConfig+0x2fe>
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a17      	ldr	r2, [pc, #92]	@ (80098c4 <UART_SetConfig+0x2dc>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d13a      	bne.n	80098e0 <UART_SetConfig+0x2f8>
 800986a:	4b18      	ldr	r3, [pc, #96]	@ (80098cc <UART_SetConfig+0x2e4>)
 800986c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009870:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009874:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009878:	d01a      	beq.n	80098b0 <UART_SetConfig+0x2c8>
 800987a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800987e:	d81b      	bhi.n	80098b8 <UART_SetConfig+0x2d0>
 8009880:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009884:	d00c      	beq.n	80098a0 <UART_SetConfig+0x2b8>
 8009886:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800988a:	d815      	bhi.n	80098b8 <UART_SetConfig+0x2d0>
 800988c:	2b00      	cmp	r3, #0
 800988e:	d003      	beq.n	8009898 <UART_SetConfig+0x2b0>
 8009890:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009894:	d008      	beq.n	80098a8 <UART_SetConfig+0x2c0>
 8009896:	e00f      	b.n	80098b8 <UART_SetConfig+0x2d0>
 8009898:	2300      	movs	r3, #0
 800989a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800989e:	e022      	b.n	80098e6 <UART_SetConfig+0x2fe>
 80098a0:	2302      	movs	r3, #2
 80098a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098a6:	e01e      	b.n	80098e6 <UART_SetConfig+0x2fe>
 80098a8:	2304      	movs	r3, #4
 80098aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ae:	e01a      	b.n	80098e6 <UART_SetConfig+0x2fe>
 80098b0:	2308      	movs	r3, #8
 80098b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098b6:	e016      	b.n	80098e6 <UART_SetConfig+0x2fe>
 80098b8:	2310      	movs	r3, #16
 80098ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098be:	e012      	b.n	80098e6 <UART_SetConfig+0x2fe>
 80098c0:	cfff69f3 	.word	0xcfff69f3
 80098c4:	40008000 	.word	0x40008000
 80098c8:	40013800 	.word	0x40013800
 80098cc:	40021000 	.word	0x40021000
 80098d0:	40004400 	.word	0x40004400
 80098d4:	40004800 	.word	0x40004800
 80098d8:	40004c00 	.word	0x40004c00
 80098dc:	40005000 	.word	0x40005000
 80098e0:	2310      	movs	r3, #16
 80098e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4aae      	ldr	r2, [pc, #696]	@ (8009ba4 <UART_SetConfig+0x5bc>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	f040 8097 	bne.w	8009a20 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80098f6:	2b08      	cmp	r3, #8
 80098f8:	d823      	bhi.n	8009942 <UART_SetConfig+0x35a>
 80098fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009900 <UART_SetConfig+0x318>)
 80098fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009900:	08009925 	.word	0x08009925
 8009904:	08009943 	.word	0x08009943
 8009908:	0800992d 	.word	0x0800992d
 800990c:	08009943 	.word	0x08009943
 8009910:	08009933 	.word	0x08009933
 8009914:	08009943 	.word	0x08009943
 8009918:	08009943 	.word	0x08009943
 800991c:	08009943 	.word	0x08009943
 8009920:	0800993b 	.word	0x0800993b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009924:	f7fc fc04 	bl	8006130 <HAL_RCC_GetPCLK1Freq>
 8009928:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800992a:	e010      	b.n	800994e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800992c:	4b9e      	ldr	r3, [pc, #632]	@ (8009ba8 <UART_SetConfig+0x5c0>)
 800992e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009930:	e00d      	b.n	800994e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009932:	f7fc fb8f 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8009936:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009938:	e009      	b.n	800994e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800993a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800993e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009940:	e005      	b.n	800994e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009942:	2300      	movs	r3, #0
 8009944:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800994c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800994e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 8130 	beq.w	8009bb6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800995a:	4a94      	ldr	r2, [pc, #592]	@ (8009bac <UART_SetConfig+0x5c4>)
 800995c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009960:	461a      	mov	r2, r3
 8009962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009964:	fbb3 f3f2 	udiv	r3, r3, r2
 8009968:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	4613      	mov	r3, r2
 8009970:	005b      	lsls	r3, r3, #1
 8009972:	4413      	add	r3, r2
 8009974:	69ba      	ldr	r2, [r7, #24]
 8009976:	429a      	cmp	r2, r3
 8009978:	d305      	bcc.n	8009986 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009980:	69ba      	ldr	r2, [r7, #24]
 8009982:	429a      	cmp	r2, r3
 8009984:	d903      	bls.n	800998e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800998c:	e113      	b.n	8009bb6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800998e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009990:	2200      	movs	r2, #0
 8009992:	60bb      	str	r3, [r7, #8]
 8009994:	60fa      	str	r2, [r7, #12]
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800999a:	4a84      	ldr	r2, [pc, #528]	@ (8009bac <UART_SetConfig+0x5c4>)
 800999c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	2200      	movs	r2, #0
 80099a4:	603b      	str	r3, [r7, #0]
 80099a6:	607a      	str	r2, [r7, #4]
 80099a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80099b0:	f7f7 f820 	bl	80009f4 <__aeabi_uldivmod>
 80099b4:	4602      	mov	r2, r0
 80099b6:	460b      	mov	r3, r1
 80099b8:	4610      	mov	r0, r2
 80099ba:	4619      	mov	r1, r3
 80099bc:	f04f 0200 	mov.w	r2, #0
 80099c0:	f04f 0300 	mov.w	r3, #0
 80099c4:	020b      	lsls	r3, r1, #8
 80099c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80099ca:	0202      	lsls	r2, r0, #8
 80099cc:	6979      	ldr	r1, [r7, #20]
 80099ce:	6849      	ldr	r1, [r1, #4]
 80099d0:	0849      	lsrs	r1, r1, #1
 80099d2:	2000      	movs	r0, #0
 80099d4:	460c      	mov	r4, r1
 80099d6:	4605      	mov	r5, r0
 80099d8:	eb12 0804 	adds.w	r8, r2, r4
 80099dc:	eb43 0905 	adc.w	r9, r3, r5
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	469a      	mov	sl, r3
 80099e8:	4693      	mov	fp, r2
 80099ea:	4652      	mov	r2, sl
 80099ec:	465b      	mov	r3, fp
 80099ee:	4640      	mov	r0, r8
 80099f0:	4649      	mov	r1, r9
 80099f2:	f7f6 ffff 	bl	80009f4 <__aeabi_uldivmod>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	4613      	mov	r3, r2
 80099fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099fe:	6a3b      	ldr	r3, [r7, #32]
 8009a00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a04:	d308      	bcc.n	8009a18 <UART_SetConfig+0x430>
 8009a06:	6a3b      	ldr	r3, [r7, #32]
 8009a08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a0c:	d204      	bcs.n	8009a18 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	6a3a      	ldr	r2, [r7, #32]
 8009a14:	60da      	str	r2, [r3, #12]
 8009a16:	e0ce      	b.n	8009bb6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009a1e:	e0ca      	b.n	8009bb6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	69db      	ldr	r3, [r3, #28]
 8009a24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a28:	d166      	bne.n	8009af8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009a2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a2e:	2b08      	cmp	r3, #8
 8009a30:	d827      	bhi.n	8009a82 <UART_SetConfig+0x49a>
 8009a32:	a201      	add	r2, pc, #4	@ (adr r2, 8009a38 <UART_SetConfig+0x450>)
 8009a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a38:	08009a5d 	.word	0x08009a5d
 8009a3c:	08009a65 	.word	0x08009a65
 8009a40:	08009a6d 	.word	0x08009a6d
 8009a44:	08009a83 	.word	0x08009a83
 8009a48:	08009a73 	.word	0x08009a73
 8009a4c:	08009a83 	.word	0x08009a83
 8009a50:	08009a83 	.word	0x08009a83
 8009a54:	08009a83 	.word	0x08009a83
 8009a58:	08009a7b 	.word	0x08009a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a5c:	f7fc fb68 	bl	8006130 <HAL_RCC_GetPCLK1Freq>
 8009a60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a62:	e014      	b.n	8009a8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a64:	f7fc fb7a 	bl	800615c <HAL_RCC_GetPCLK2Freq>
 8009a68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a6a:	e010      	b.n	8009a8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a6c:	4b4e      	ldr	r3, [pc, #312]	@ (8009ba8 <UART_SetConfig+0x5c0>)
 8009a6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a70:	e00d      	b.n	8009a8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a72:	f7fc faef 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8009a76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a78:	e009      	b.n	8009a8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a80:	e005      	b.n	8009a8e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009a82:	2300      	movs	r3, #0
 8009a84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009a8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f000 8090 	beq.w	8009bb6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a9a:	4a44      	ldr	r2, [pc, #272]	@ (8009bac <UART_SetConfig+0x5c4>)
 8009a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aa8:	005a      	lsls	r2, r3, #1
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	085b      	lsrs	r3, r3, #1
 8009ab0:	441a      	add	r2, r3
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	2b0f      	cmp	r3, #15
 8009ac0:	d916      	bls.n	8009af0 <UART_SetConfig+0x508>
 8009ac2:	6a3b      	ldr	r3, [r7, #32]
 8009ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ac8:	d212      	bcs.n	8009af0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009aca:	6a3b      	ldr	r3, [r7, #32]
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	f023 030f 	bic.w	r3, r3, #15
 8009ad2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ad4:	6a3b      	ldr	r3, [r7, #32]
 8009ad6:	085b      	lsrs	r3, r3, #1
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	f003 0307 	and.w	r3, r3, #7
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	8bfb      	ldrh	r3, [r7, #30]
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	8bfa      	ldrh	r2, [r7, #30]
 8009aec:	60da      	str	r2, [r3, #12]
 8009aee:	e062      	b.n	8009bb6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009af6:	e05e      	b.n	8009bb6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009af8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009afc:	2b08      	cmp	r3, #8
 8009afe:	d828      	bhi.n	8009b52 <UART_SetConfig+0x56a>
 8009b00:	a201      	add	r2, pc, #4	@ (adr r2, 8009b08 <UART_SetConfig+0x520>)
 8009b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b06:	bf00      	nop
 8009b08:	08009b2d 	.word	0x08009b2d
 8009b0c:	08009b35 	.word	0x08009b35
 8009b10:	08009b3d 	.word	0x08009b3d
 8009b14:	08009b53 	.word	0x08009b53
 8009b18:	08009b43 	.word	0x08009b43
 8009b1c:	08009b53 	.word	0x08009b53
 8009b20:	08009b53 	.word	0x08009b53
 8009b24:	08009b53 	.word	0x08009b53
 8009b28:	08009b4b 	.word	0x08009b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b2c:	f7fc fb00 	bl	8006130 <HAL_RCC_GetPCLK1Freq>
 8009b30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b32:	e014      	b.n	8009b5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b34:	f7fc fb12 	bl	800615c <HAL_RCC_GetPCLK2Freq>
 8009b38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b3a:	e010      	b.n	8009b5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ba8 <UART_SetConfig+0x5c0>)
 8009b3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b40:	e00d      	b.n	8009b5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b42:	f7fc fa87 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8009b46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b48:	e009      	b.n	8009b5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b50:	e005      	b.n	8009b5e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b5c:	bf00      	nop
    }

    if (pclk != 0U)
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d028      	beq.n	8009bb6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b68:	4a10      	ldr	r2, [pc, #64]	@ (8009bac <UART_SetConfig+0x5c4>)
 8009b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b6e:	461a      	mov	r2, r3
 8009b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b72:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	085b      	lsrs	r3, r3, #1
 8009b7c:	441a      	add	r2, r3
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b88:	6a3b      	ldr	r3, [r7, #32]
 8009b8a:	2b0f      	cmp	r3, #15
 8009b8c:	d910      	bls.n	8009bb0 <UART_SetConfig+0x5c8>
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b94:	d20c      	bcs.n	8009bb0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	60da      	str	r2, [r3, #12]
 8009ba0:	e009      	b.n	8009bb6 <UART_SetConfig+0x5ce>
 8009ba2:	bf00      	nop
 8009ba4:	40008000 	.word	0x40008000
 8009ba8:	00f42400 	.word	0x00f42400
 8009bac:	0800b42c 	.word	0x0800b42c
      }
      else
      {
        ret = HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009bd2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3730      	adds	r7, #48	@ 0x30
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bec:	f003 0308 	and.w	r3, r3, #8
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00a      	beq.n	8009c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	430a      	orrs	r2, r1
 8009c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0e:	f003 0301 	and.w	r3, r3, #1
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00a      	beq.n	8009c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	430a      	orrs	r2, r1
 8009c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c30:	f003 0302 	and.w	r3, r3, #2
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00a      	beq.n	8009c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c52:	f003 0304 	and.w	r3, r3, #4
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	430a      	orrs	r2, r1
 8009c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c74:	f003 0310 	and.w	r3, r3, #16
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00a      	beq.n	8009c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c96:	f003 0320 	and.w	r3, r3, #32
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00a      	beq.n	8009cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d01a      	beq.n	8009cf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cde:	d10a      	bne.n	8009cf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	430a      	orrs	r2, r1
 8009cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00a      	beq.n	8009d18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	430a      	orrs	r2, r1
 8009d16:	605a      	str	r2, [r3, #4]
  }
}
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b098      	sub	sp, #96	@ 0x60
 8009d28:	af02      	add	r7, sp, #8
 8009d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d34:	f7f9 fa14 	bl	8003160 <HAL_GetTick>
 8009d38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 0308 	and.w	r3, r3, #8
 8009d44:	2b08      	cmp	r3, #8
 8009d46:	d12f      	bne.n	8009da8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d50:	2200      	movs	r2, #0
 8009d52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f88e 	bl	8009e78 <UART_WaitOnFlagUntilTimeout>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d022      	beq.n	8009da8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6a:	e853 3f00 	ldrex	r3, [r3]
 8009d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d76:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d88:	e841 2300 	strex	r3, r2, [r1]
 8009d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1e6      	bne.n	8009d62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2220      	movs	r2, #32
 8009d98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009da4:	2303      	movs	r3, #3
 8009da6:	e063      	b.n	8009e70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 0304 	and.w	r3, r3, #4
 8009db2:	2b04      	cmp	r3, #4
 8009db4:	d149      	bne.n	8009e4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009db6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 f857 	bl	8009e78 <UART_WaitOnFlagUntilTimeout>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d03c      	beq.n	8009e4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd8:	e853 3f00 	ldrex	r3, [r3]
 8009ddc:	623b      	str	r3, [r7, #32]
   return(result);
 8009dde:	6a3b      	ldr	r3, [r7, #32]
 8009de0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	461a      	mov	r2, r3
 8009dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dee:	633b      	str	r3, [r7, #48]	@ 0x30
 8009df0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009df4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009df6:	e841 2300 	strex	r3, r2, [r1]
 8009dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1e6      	bne.n	8009dd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3308      	adds	r3, #8
 8009e08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	e853 3f00 	ldrex	r3, [r3]
 8009e10:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f023 0301 	bic.w	r3, r3, #1
 8009e18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	3308      	adds	r3, #8
 8009e20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e22:	61fa      	str	r2, [r7, #28]
 8009e24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e26:	69b9      	ldr	r1, [r7, #24]
 8009e28:	69fa      	ldr	r2, [r7, #28]
 8009e2a:	e841 2300 	strex	r3, r2, [r1]
 8009e2e:	617b      	str	r3, [r7, #20]
   return(result);
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1e5      	bne.n	8009e02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2220      	movs	r2, #32
 8009e3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e46:	2303      	movs	r3, #3
 8009e48:	e012      	b.n	8009e70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2220      	movs	r2, #32
 8009e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2220      	movs	r2, #32
 8009e56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3758      	adds	r7, #88	@ 0x58
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	603b      	str	r3, [r7, #0]
 8009e84:	4613      	mov	r3, r2
 8009e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e88:	e04f      	b.n	8009f2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e90:	d04b      	beq.n	8009f2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e92:	f7f9 f965 	bl	8003160 <HAL_GetTick>
 8009e96:	4602      	mov	r2, r0
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	69ba      	ldr	r2, [r7, #24]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d302      	bcc.n	8009ea8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e04e      	b.n	8009f4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 0304 	and.w	r3, r3, #4
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d037      	beq.n	8009f2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	2b80      	cmp	r3, #128	@ 0x80
 8009ebe:	d034      	beq.n	8009f2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	2b40      	cmp	r3, #64	@ 0x40
 8009ec4:	d031      	beq.n	8009f2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	69db      	ldr	r3, [r3, #28]
 8009ecc:	f003 0308 	and.w	r3, r3, #8
 8009ed0:	2b08      	cmp	r3, #8
 8009ed2:	d110      	bne.n	8009ef6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2208      	movs	r2, #8
 8009eda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f000 f920 	bl	800a122 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2208      	movs	r2, #8
 8009ee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e029      	b.n	8009f4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	69db      	ldr	r3, [r3, #28]
 8009efc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f04:	d111      	bne.n	8009f2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 f906 	bl	800a122 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2220      	movs	r2, #32
 8009f1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	e00f      	b.n	8009f4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	69da      	ldr	r2, [r3, #28]
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	4013      	ands	r3, r2
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	bf0c      	ite	eq
 8009f3a:	2301      	moveq	r3, #1
 8009f3c:	2300      	movne	r3, #0
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	461a      	mov	r2, r3
 8009f42:	79fb      	ldrb	r3, [r7, #7]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d0a0      	beq.n	8009e8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
	...

08009f54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b096      	sub	sp, #88	@ 0x58
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	88fa      	ldrh	r2, [r7, #6]
 8009f6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2222      	movs	r2, #34	@ 0x22
 8009f7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d02d      	beq.n	8009fe6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f90:	4a40      	ldr	r2, [pc, #256]	@ (800a094 <UART_Start_Receive_DMA+0x140>)
 8009f92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f9a:	4a3f      	ldr	r2, [pc, #252]	@ (800a098 <UART_Start_Receive_DMA+0x144>)
 8009f9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fa4:	4a3d      	ldr	r2, [pc, #244]	@ (800a09c <UART_Start_Receive_DMA+0x148>)
 8009fa6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fae:	2200      	movs	r2, #0
 8009fb0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3324      	adds	r3, #36	@ 0x24
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	88fb      	ldrh	r3, [r7, #6]
 8009fc8:	f7fa ff06 	bl	8004dd8 <HAL_DMA_Start_IT>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d009      	beq.n	8009fe6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2210      	movs	r2, #16
 8009fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2220      	movs	r2, #32
 8009fde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e051      	b.n	800a08a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d018      	beq.n	800a020 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ff6:	e853 3f00 	ldrex	r3, [r3]
 8009ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a002:	657b      	str	r3, [r7, #84]	@ 0x54
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	461a      	mov	r2, r3
 800a00a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a00c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a00e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a010:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a012:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a014:	e841 2300 	strex	r3, r2, [r1]
 800a018:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a01a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1e6      	bne.n	8009fee <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	3308      	adds	r3, #8
 800a026:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02a:	e853 3f00 	ldrex	r3, [r3]
 800a02e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a032:	f043 0301 	orr.w	r3, r3, #1
 800a036:	653b      	str	r3, [r7, #80]	@ 0x50
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	3308      	adds	r3, #8
 800a03e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a040:	637a      	str	r2, [r7, #52]	@ 0x34
 800a042:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a044:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a046:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a048:	e841 2300 	strex	r3, r2, [r1]
 800a04c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1e5      	bne.n	800a020 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	3308      	adds	r3, #8
 800a05a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	e853 3f00 	ldrex	r3, [r3]
 800a062:	613b      	str	r3, [r7, #16]
   return(result);
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a06a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	3308      	adds	r3, #8
 800a072:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a074:	623a      	str	r2, [r7, #32]
 800a076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a078:	69f9      	ldr	r1, [r7, #28]
 800a07a:	6a3a      	ldr	r2, [r7, #32]
 800a07c:	e841 2300 	strex	r3, r2, [r1]
 800a080:	61bb      	str	r3, [r7, #24]
   return(result);
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1e5      	bne.n	800a054 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3758      	adds	r7, #88	@ 0x58
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	0800a1ef 	.word	0x0800a1ef
 800a098:	0800a323 	.word	0x0800a323
 800a09c:	0800a369 	.word	0x0800a369

0800a0a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b08f      	sub	sp, #60	@ 0x3c
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	e853 3f00 	ldrex	r3, [r3]
 800a0b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a0bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0c8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0ce:	e841 2300 	strex	r3, r2, [r1]
 800a0d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1e6      	bne.n	800a0a8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3308      	adds	r3, #8
 800a0e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	e853 3f00 	ldrex	r3, [r3]
 800a0e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a0f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3308      	adds	r3, #8
 800a0f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0fa:	61ba      	str	r2, [r7, #24]
 800a0fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fe:	6979      	ldr	r1, [r7, #20]
 800a100:	69ba      	ldr	r2, [r7, #24]
 800a102:	e841 2300 	strex	r3, r2, [r1]
 800a106:	613b      	str	r3, [r7, #16]
   return(result);
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1e5      	bne.n	800a0da <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2220      	movs	r2, #32
 800a112:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a116:	bf00      	nop
 800a118:	373c      	adds	r7, #60	@ 0x3c
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a122:	b480      	push	{r7}
 800a124:	b095      	sub	sp, #84	@ 0x54
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a132:	e853 3f00 	ldrex	r3, [r3]
 800a136:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a13e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	461a      	mov	r2, r3
 800a146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a148:	643b      	str	r3, [r7, #64]	@ 0x40
 800a14a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a14e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a150:	e841 2300 	strex	r3, r2, [r1]
 800a154:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1e6      	bne.n	800a12a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	3308      	adds	r3, #8
 800a162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	e853 3f00 	ldrex	r3, [r3]
 800a16a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a172:	f023 0301 	bic.w	r3, r3, #1
 800a176:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3308      	adds	r3, #8
 800a17e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a180:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a182:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a188:	e841 2300 	strex	r3, r2, [r1]
 800a18c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1e3      	bne.n	800a15c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d118      	bne.n	800a1ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	e853 3f00 	ldrex	r3, [r3]
 800a1a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	f023 0310 	bic.w	r3, r3, #16
 800a1b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1ba:	61bb      	str	r3, [r7, #24]
 800a1bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1be:	6979      	ldr	r1, [r7, #20]
 800a1c0:	69ba      	ldr	r2, [r7, #24]
 800a1c2:	e841 2300 	strex	r3, r2, [r1]
 800a1c6:	613b      	str	r3, [r7, #16]
   return(result);
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1e6      	bne.n	800a19c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2220      	movs	r2, #32
 800a1d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a1e2:	bf00      	nop
 800a1e4:	3754      	adds	r7, #84	@ 0x54
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b09c      	sub	sp, #112	@ 0x70
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1fa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 0320 	and.w	r3, r3, #32
 800a206:	2b00      	cmp	r3, #0
 800a208:	d171      	bne.n	800a2ee <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a20a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a20c:	2200      	movs	r2, #0
 800a20e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a21a:	e853 3f00 	ldrex	r3, [r3]
 800a21e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a220:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a222:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a226:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	461a      	mov	r2, r3
 800a22e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a230:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a232:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a234:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a236:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a238:	e841 2300 	strex	r3, r2, [r1]
 800a23c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a23e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1e6      	bne.n	800a212 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	3308      	adds	r3, #8
 800a24a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a24e:	e853 3f00 	ldrex	r3, [r3]
 800a252:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a256:	f023 0301 	bic.w	r3, r3, #1
 800a25a:	667b      	str	r3, [r7, #100]	@ 0x64
 800a25c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	3308      	adds	r3, #8
 800a262:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a264:	647a      	str	r2, [r7, #68]	@ 0x44
 800a266:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a268:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a26a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a26c:	e841 2300 	strex	r3, r2, [r1]
 800a270:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1e5      	bne.n	800a244 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3308      	adds	r3, #8
 800a27e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a282:	e853 3f00 	ldrex	r3, [r3]
 800a286:	623b      	str	r3, [r7, #32]
   return(result);
 800a288:	6a3b      	ldr	r3, [r7, #32]
 800a28a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a28e:	663b      	str	r3, [r7, #96]	@ 0x60
 800a290:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3308      	adds	r3, #8
 800a296:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a298:	633a      	str	r2, [r7, #48]	@ 0x30
 800a29a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a29e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2a0:	e841 2300 	strex	r3, r2, [r1]
 800a2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e5      	bne.n	800a278 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a2ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2ae:	2220      	movs	r2, #32
 800a2b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d118      	bne.n	800a2ee <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	e853 3f00 	ldrex	r3, [r3]
 800a2c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f023 0310 	bic.w	r3, r3, #16
 800a2d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2da:	61fb      	str	r3, [r7, #28]
 800a2dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2de:	69b9      	ldr	r1, [r7, #24]
 800a2e0:	69fa      	ldr	r2, [r7, #28]
 800a2e2:	e841 2300 	strex	r3, r2, [r1]
 800a2e6:	617b      	str	r3, [r7, #20]
   return(result);
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1e6      	bne.n	800a2bc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d109      	bne.n	800a310 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a2fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a302:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a304:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a308:	4611      	mov	r1, r2
 800a30a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a30c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a30e:	e004      	b.n	800a31a <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800a310:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a312:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a316:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a318:	4798      	blx	r3
}
 800a31a:	bf00      	nop
 800a31c:	3770      	adds	r7, #112	@ 0x70
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b084      	sub	sp, #16
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a32e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2201      	movs	r2, #1
 800a334:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d10b      	bne.n	800a356 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a34a:	0852      	lsrs	r2, r2, #1
 800a34c:	b292      	uxth	r2, r2
 800a34e:	4611      	mov	r1, r2
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a354:	e004      	b.n	800a360 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	4798      	blx	r3
}
 800a360:	bf00      	nop
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a374:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a37c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a384:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a390:	2b80      	cmp	r3, #128	@ 0x80
 800a392:	d109      	bne.n	800a3a8 <UART_DMAError+0x40>
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	2b21      	cmp	r3, #33	@ 0x21
 800a398:	d106      	bne.n	800a3a8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a3a2:	6978      	ldr	r0, [r7, #20]
 800a3a4:	f7ff fe7c 	bl	800a0a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3b2:	2b40      	cmp	r3, #64	@ 0x40
 800a3b4:	d109      	bne.n	800a3ca <UART_DMAError+0x62>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2b22      	cmp	r3, #34	@ 0x22
 800a3ba:	d106      	bne.n	800a3ca <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a3c4:	6978      	ldr	r0, [r7, #20]
 800a3c6:	f7ff feac 	bl	800a122 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3d0:	f043 0210 	orr.w	r2, r3, #16
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a3e0:	6978      	ldr	r0, [r7, #20]
 800a3e2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3e4:	bf00      	nop
 800a3e6:	3718      	adds	r7, #24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a40c:	bf00      	nop
 800a40e:	3710      	adds	r7, #16
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b088      	sub	sp, #32
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	e853 3f00 	ldrex	r3, [r3]
 800a428:	60bb      	str	r3, [r7, #8]
   return(result);
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a430:	61fb      	str	r3, [r7, #28]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	461a      	mov	r2, r3
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	61bb      	str	r3, [r7, #24]
 800a43c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43e:	6979      	ldr	r1, [r7, #20]
 800a440:	69ba      	ldr	r2, [r7, #24]
 800a442:	e841 2300 	strex	r3, r2, [r1]
 800a446:	613b      	str	r3, [r7, #16]
   return(result);
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1e6      	bne.n	800a41c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2220      	movs	r2, #32
 800a452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a466:	bf00      	nop
 800a468:	3720      	adds	r7, #32
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a46e:	b480      	push	{r7}
 800a470:	b083      	sub	sp, #12
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a476:	bf00      	nop
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a482:	b480      	push	{r7}
 800a484:	b083      	sub	sp, #12
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a48a:	bf00      	nop
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a496:	b480      	push	{r7}
 800a498:	b083      	sub	sp, #12
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a49e:	bf00      	nop
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b085      	sub	sp, #20
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d101      	bne.n	800a4c0 <HAL_UARTEx_DisableFifoMode+0x16>
 800a4bc:	2302      	movs	r3, #2
 800a4be:	e027      	b.n	800a510 <HAL_UARTEx_DisableFifoMode+0x66>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2224      	movs	r2, #36	@ 0x24
 800a4cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f022 0201 	bic.w	r2, r2, #1
 800a4e6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a4ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2220      	movs	r2, #32
 800a502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3714      	adds	r7, #20
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d101      	bne.n	800a534 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a530:	2302      	movs	r3, #2
 800a532:	e02d      	b.n	800a590 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2224      	movs	r2, #36	@ 0x24
 800a540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f022 0201 	bic.w	r2, r2, #1
 800a55a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	683a      	ldr	r2, [r7, #0]
 800a56c:	430a      	orrs	r2, r1
 800a56e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 f84f 	bl	800a614 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2220      	movs	r2, #32
 800a582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3710      	adds	r7, #16
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d101      	bne.n	800a5b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5ac:	2302      	movs	r3, #2
 800a5ae:	e02d      	b.n	800a60c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2224      	movs	r2, #36	@ 0x24
 800a5bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f022 0201 	bic.w	r2, r2, #1
 800a5d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	683a      	ldr	r2, [r7, #0]
 800a5e8:	430a      	orrs	r2, r1
 800a5ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f811 	bl	800a614 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2220      	movs	r2, #32
 800a5fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a620:	2b00      	cmp	r3, #0
 800a622:	d108      	bne.n	800a636 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a634:	e031      	b.n	800a69a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a636:	2308      	movs	r3, #8
 800a638:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a63a:	2308      	movs	r3, #8
 800a63c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	0e5b      	lsrs	r3, r3, #25
 800a646:	b2db      	uxtb	r3, r3
 800a648:	f003 0307 	and.w	r3, r3, #7
 800a64c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	0f5b      	lsrs	r3, r3, #29
 800a656:	b2db      	uxtb	r3, r3
 800a658:	f003 0307 	and.w	r3, r3, #7
 800a65c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a65e:	7bbb      	ldrb	r3, [r7, #14]
 800a660:	7b3a      	ldrb	r2, [r7, #12]
 800a662:	4911      	ldr	r1, [pc, #68]	@ (800a6a8 <UARTEx_SetNbDataToProcess+0x94>)
 800a664:	5c8a      	ldrb	r2, [r1, r2]
 800a666:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a66a:	7b3a      	ldrb	r2, [r7, #12]
 800a66c:	490f      	ldr	r1, [pc, #60]	@ (800a6ac <UARTEx_SetNbDataToProcess+0x98>)
 800a66e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a670:	fb93 f3f2 	sdiv	r3, r3, r2
 800a674:	b29a      	uxth	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
 800a67e:	7b7a      	ldrb	r2, [r7, #13]
 800a680:	4909      	ldr	r1, [pc, #36]	@ (800a6a8 <UARTEx_SetNbDataToProcess+0x94>)
 800a682:	5c8a      	ldrb	r2, [r1, r2]
 800a684:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a688:	7b7a      	ldrb	r2, [r7, #13]
 800a68a:	4908      	ldr	r1, [pc, #32]	@ (800a6ac <UARTEx_SetNbDataToProcess+0x98>)
 800a68c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a68e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a692:	b29a      	uxth	r2, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a69a:	bf00      	nop
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
 800a6a8:	0800b444 	.word	0x0800b444
 800a6ac:	0800b44c 	.word	0x0800b44c

0800a6b0 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	607b      	str	r3, [r7, #4]
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	817b      	strh	r3, [r7, #10]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	897a      	ldrh	r2, [r7, #10]
 800a6c6:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	893a      	ldrh	r2, [r7, #8]
 800a6cc:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	605a      	str	r2, [r3, #4]
}
 800a6d4:	bf00      	nop
 800a6d6:	3714      	adds	r7, #20
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <malloc>:
 800a6e0:	4b02      	ldr	r3, [pc, #8]	@ (800a6ec <malloc+0xc>)
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	6818      	ldr	r0, [r3, #0]
 800a6e6:	f000 b825 	b.w	800a734 <_malloc_r>
 800a6ea:	bf00      	nop
 800a6ec:	20000164 	.word	0x20000164

0800a6f0 <sbrk_aligned>:
 800a6f0:	b570      	push	{r4, r5, r6, lr}
 800a6f2:	4e0f      	ldr	r6, [pc, #60]	@ (800a730 <sbrk_aligned+0x40>)
 800a6f4:	460c      	mov	r4, r1
 800a6f6:	6831      	ldr	r1, [r6, #0]
 800a6f8:	4605      	mov	r5, r0
 800a6fa:	b911      	cbnz	r1, 800a702 <sbrk_aligned+0x12>
 800a6fc:	f000 f8ae 	bl	800a85c <_sbrk_r>
 800a700:	6030      	str	r0, [r6, #0]
 800a702:	4621      	mov	r1, r4
 800a704:	4628      	mov	r0, r5
 800a706:	f000 f8a9 	bl	800a85c <_sbrk_r>
 800a70a:	1c43      	adds	r3, r0, #1
 800a70c:	d103      	bne.n	800a716 <sbrk_aligned+0x26>
 800a70e:	f04f 34ff 	mov.w	r4, #4294967295
 800a712:	4620      	mov	r0, r4
 800a714:	bd70      	pop	{r4, r5, r6, pc}
 800a716:	1cc4      	adds	r4, r0, #3
 800a718:	f024 0403 	bic.w	r4, r4, #3
 800a71c:	42a0      	cmp	r0, r4
 800a71e:	d0f8      	beq.n	800a712 <sbrk_aligned+0x22>
 800a720:	1a21      	subs	r1, r4, r0
 800a722:	4628      	mov	r0, r5
 800a724:	f000 f89a 	bl	800a85c <_sbrk_r>
 800a728:	3001      	adds	r0, #1
 800a72a:	d1f2      	bne.n	800a712 <sbrk_aligned+0x22>
 800a72c:	e7ef      	b.n	800a70e <sbrk_aligned+0x1e>
 800a72e:	bf00      	nop
 800a730:	20001ba0 	.word	0x20001ba0

0800a734 <_malloc_r>:
 800a734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a738:	1ccd      	adds	r5, r1, #3
 800a73a:	f025 0503 	bic.w	r5, r5, #3
 800a73e:	3508      	adds	r5, #8
 800a740:	2d0c      	cmp	r5, #12
 800a742:	bf38      	it	cc
 800a744:	250c      	movcc	r5, #12
 800a746:	2d00      	cmp	r5, #0
 800a748:	4606      	mov	r6, r0
 800a74a:	db01      	blt.n	800a750 <_malloc_r+0x1c>
 800a74c:	42a9      	cmp	r1, r5
 800a74e:	d904      	bls.n	800a75a <_malloc_r+0x26>
 800a750:	230c      	movs	r3, #12
 800a752:	6033      	str	r3, [r6, #0]
 800a754:	2000      	movs	r0, #0
 800a756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a75a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a830 <_malloc_r+0xfc>
 800a75e:	f000 f869 	bl	800a834 <__malloc_lock>
 800a762:	f8d8 3000 	ldr.w	r3, [r8]
 800a766:	461c      	mov	r4, r3
 800a768:	bb44      	cbnz	r4, 800a7bc <_malloc_r+0x88>
 800a76a:	4629      	mov	r1, r5
 800a76c:	4630      	mov	r0, r6
 800a76e:	f7ff ffbf 	bl	800a6f0 <sbrk_aligned>
 800a772:	1c43      	adds	r3, r0, #1
 800a774:	4604      	mov	r4, r0
 800a776:	d158      	bne.n	800a82a <_malloc_r+0xf6>
 800a778:	f8d8 4000 	ldr.w	r4, [r8]
 800a77c:	4627      	mov	r7, r4
 800a77e:	2f00      	cmp	r7, #0
 800a780:	d143      	bne.n	800a80a <_malloc_r+0xd6>
 800a782:	2c00      	cmp	r4, #0
 800a784:	d04b      	beq.n	800a81e <_malloc_r+0xea>
 800a786:	6823      	ldr	r3, [r4, #0]
 800a788:	4639      	mov	r1, r7
 800a78a:	4630      	mov	r0, r6
 800a78c:	eb04 0903 	add.w	r9, r4, r3
 800a790:	f000 f864 	bl	800a85c <_sbrk_r>
 800a794:	4581      	cmp	r9, r0
 800a796:	d142      	bne.n	800a81e <_malloc_r+0xea>
 800a798:	6821      	ldr	r1, [r4, #0]
 800a79a:	1a6d      	subs	r5, r5, r1
 800a79c:	4629      	mov	r1, r5
 800a79e:	4630      	mov	r0, r6
 800a7a0:	f7ff ffa6 	bl	800a6f0 <sbrk_aligned>
 800a7a4:	3001      	adds	r0, #1
 800a7a6:	d03a      	beq.n	800a81e <_malloc_r+0xea>
 800a7a8:	6823      	ldr	r3, [r4, #0]
 800a7aa:	442b      	add	r3, r5
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	f8d8 3000 	ldr.w	r3, [r8]
 800a7b2:	685a      	ldr	r2, [r3, #4]
 800a7b4:	bb62      	cbnz	r2, 800a810 <_malloc_r+0xdc>
 800a7b6:	f8c8 7000 	str.w	r7, [r8]
 800a7ba:	e00f      	b.n	800a7dc <_malloc_r+0xa8>
 800a7bc:	6822      	ldr	r2, [r4, #0]
 800a7be:	1b52      	subs	r2, r2, r5
 800a7c0:	d420      	bmi.n	800a804 <_malloc_r+0xd0>
 800a7c2:	2a0b      	cmp	r2, #11
 800a7c4:	d917      	bls.n	800a7f6 <_malloc_r+0xc2>
 800a7c6:	1961      	adds	r1, r4, r5
 800a7c8:	42a3      	cmp	r3, r4
 800a7ca:	6025      	str	r5, [r4, #0]
 800a7cc:	bf18      	it	ne
 800a7ce:	6059      	strne	r1, [r3, #4]
 800a7d0:	6863      	ldr	r3, [r4, #4]
 800a7d2:	bf08      	it	eq
 800a7d4:	f8c8 1000 	streq.w	r1, [r8]
 800a7d8:	5162      	str	r2, [r4, r5]
 800a7da:	604b      	str	r3, [r1, #4]
 800a7dc:	4630      	mov	r0, r6
 800a7de:	f000 f82f 	bl	800a840 <__malloc_unlock>
 800a7e2:	f104 000b 	add.w	r0, r4, #11
 800a7e6:	1d23      	adds	r3, r4, #4
 800a7e8:	f020 0007 	bic.w	r0, r0, #7
 800a7ec:	1ac2      	subs	r2, r0, r3
 800a7ee:	bf1c      	itt	ne
 800a7f0:	1a1b      	subne	r3, r3, r0
 800a7f2:	50a3      	strne	r3, [r4, r2]
 800a7f4:	e7af      	b.n	800a756 <_malloc_r+0x22>
 800a7f6:	6862      	ldr	r2, [r4, #4]
 800a7f8:	42a3      	cmp	r3, r4
 800a7fa:	bf0c      	ite	eq
 800a7fc:	f8c8 2000 	streq.w	r2, [r8]
 800a800:	605a      	strne	r2, [r3, #4]
 800a802:	e7eb      	b.n	800a7dc <_malloc_r+0xa8>
 800a804:	4623      	mov	r3, r4
 800a806:	6864      	ldr	r4, [r4, #4]
 800a808:	e7ae      	b.n	800a768 <_malloc_r+0x34>
 800a80a:	463c      	mov	r4, r7
 800a80c:	687f      	ldr	r7, [r7, #4]
 800a80e:	e7b6      	b.n	800a77e <_malloc_r+0x4a>
 800a810:	461a      	mov	r2, r3
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	42a3      	cmp	r3, r4
 800a816:	d1fb      	bne.n	800a810 <_malloc_r+0xdc>
 800a818:	2300      	movs	r3, #0
 800a81a:	6053      	str	r3, [r2, #4]
 800a81c:	e7de      	b.n	800a7dc <_malloc_r+0xa8>
 800a81e:	230c      	movs	r3, #12
 800a820:	6033      	str	r3, [r6, #0]
 800a822:	4630      	mov	r0, r6
 800a824:	f000 f80c 	bl	800a840 <__malloc_unlock>
 800a828:	e794      	b.n	800a754 <_malloc_r+0x20>
 800a82a:	6005      	str	r5, [r0, #0]
 800a82c:	e7d6      	b.n	800a7dc <_malloc_r+0xa8>
 800a82e:	bf00      	nop
 800a830:	20001ba4 	.word	0x20001ba4

0800a834 <__malloc_lock>:
 800a834:	4801      	ldr	r0, [pc, #4]	@ (800a83c <__malloc_lock+0x8>)
 800a836:	f000 b84b 	b.w	800a8d0 <__retarget_lock_acquire_recursive>
 800a83a:	bf00      	nop
 800a83c:	20001ce4 	.word	0x20001ce4

0800a840 <__malloc_unlock>:
 800a840:	4801      	ldr	r0, [pc, #4]	@ (800a848 <__malloc_unlock+0x8>)
 800a842:	f000 b846 	b.w	800a8d2 <__retarget_lock_release_recursive>
 800a846:	bf00      	nop
 800a848:	20001ce4 	.word	0x20001ce4

0800a84c <memset>:
 800a84c:	4402      	add	r2, r0
 800a84e:	4603      	mov	r3, r0
 800a850:	4293      	cmp	r3, r2
 800a852:	d100      	bne.n	800a856 <memset+0xa>
 800a854:	4770      	bx	lr
 800a856:	f803 1b01 	strb.w	r1, [r3], #1
 800a85a:	e7f9      	b.n	800a850 <memset+0x4>

0800a85c <_sbrk_r>:
 800a85c:	b538      	push	{r3, r4, r5, lr}
 800a85e:	4d06      	ldr	r5, [pc, #24]	@ (800a878 <_sbrk_r+0x1c>)
 800a860:	2300      	movs	r3, #0
 800a862:	4604      	mov	r4, r0
 800a864:	4608      	mov	r0, r1
 800a866:	602b      	str	r3, [r5, #0]
 800a868:	f7f7 ff1e 	bl	80026a8 <_sbrk>
 800a86c:	1c43      	adds	r3, r0, #1
 800a86e:	d102      	bne.n	800a876 <_sbrk_r+0x1a>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	b103      	cbz	r3, 800a876 <_sbrk_r+0x1a>
 800a874:	6023      	str	r3, [r4, #0]
 800a876:	bd38      	pop	{r3, r4, r5, pc}
 800a878:	20001ce0 	.word	0x20001ce0

0800a87c <__errno>:
 800a87c:	4b01      	ldr	r3, [pc, #4]	@ (800a884 <__errno+0x8>)
 800a87e:	6818      	ldr	r0, [r3, #0]
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	20000164 	.word	0x20000164

0800a888 <__libc_init_array>:
 800a888:	b570      	push	{r4, r5, r6, lr}
 800a88a:	4d0d      	ldr	r5, [pc, #52]	@ (800a8c0 <__libc_init_array+0x38>)
 800a88c:	4c0d      	ldr	r4, [pc, #52]	@ (800a8c4 <__libc_init_array+0x3c>)
 800a88e:	1b64      	subs	r4, r4, r5
 800a890:	10a4      	asrs	r4, r4, #2
 800a892:	2600      	movs	r6, #0
 800a894:	42a6      	cmp	r6, r4
 800a896:	d109      	bne.n	800a8ac <__libc_init_array+0x24>
 800a898:	4d0b      	ldr	r5, [pc, #44]	@ (800a8c8 <__libc_init_array+0x40>)
 800a89a:	4c0c      	ldr	r4, [pc, #48]	@ (800a8cc <__libc_init_array+0x44>)
 800a89c:	f000 fd8e 	bl	800b3bc <_init>
 800a8a0:	1b64      	subs	r4, r4, r5
 800a8a2:	10a4      	asrs	r4, r4, #2
 800a8a4:	2600      	movs	r6, #0
 800a8a6:	42a6      	cmp	r6, r4
 800a8a8:	d105      	bne.n	800a8b6 <__libc_init_array+0x2e>
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}
 800a8ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8b0:	4798      	blx	r3
 800a8b2:	3601      	adds	r6, #1
 800a8b4:	e7ee      	b.n	800a894 <__libc_init_array+0xc>
 800a8b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ba:	4798      	blx	r3
 800a8bc:	3601      	adds	r6, #1
 800a8be:	e7f2      	b.n	800a8a6 <__libc_init_array+0x1e>
 800a8c0:	0800b82c 	.word	0x0800b82c
 800a8c4:	0800b82c 	.word	0x0800b82c
 800a8c8:	0800b82c 	.word	0x0800b82c
 800a8cc:	0800b830 	.word	0x0800b830

0800a8d0 <__retarget_lock_acquire_recursive>:
 800a8d0:	4770      	bx	lr

0800a8d2 <__retarget_lock_release_recursive>:
 800a8d2:	4770      	bx	lr

0800a8d4 <cosf>:
 800a8d4:	ee10 3a10 	vmov	r3, s0
 800a8d8:	b507      	push	{r0, r1, r2, lr}
 800a8da:	4a1e      	ldr	r2, [pc, #120]	@ (800a954 <cosf+0x80>)
 800a8dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d806      	bhi.n	800a8f2 <cosf+0x1e>
 800a8e4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800a958 <cosf+0x84>
 800a8e8:	b003      	add	sp, #12
 800a8ea:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8ee:	f000 b87b 	b.w	800a9e8 <__kernel_cosf>
 800a8f2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a8f6:	d304      	bcc.n	800a902 <cosf+0x2e>
 800a8f8:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a8fc:	b003      	add	sp, #12
 800a8fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800a902:	4668      	mov	r0, sp
 800a904:	f000 f910 	bl	800ab28 <__ieee754_rem_pio2f>
 800a908:	f000 0003 	and.w	r0, r0, #3
 800a90c:	2801      	cmp	r0, #1
 800a90e:	d009      	beq.n	800a924 <cosf+0x50>
 800a910:	2802      	cmp	r0, #2
 800a912:	d010      	beq.n	800a936 <cosf+0x62>
 800a914:	b9b0      	cbnz	r0, 800a944 <cosf+0x70>
 800a916:	eddd 0a01 	vldr	s1, [sp, #4]
 800a91a:	ed9d 0a00 	vldr	s0, [sp]
 800a91e:	f000 f863 	bl	800a9e8 <__kernel_cosf>
 800a922:	e7eb      	b.n	800a8fc <cosf+0x28>
 800a924:	eddd 0a01 	vldr	s1, [sp, #4]
 800a928:	ed9d 0a00 	vldr	s0, [sp]
 800a92c:	f000 f8b4 	bl	800aa98 <__kernel_sinf>
 800a930:	eeb1 0a40 	vneg.f32	s0, s0
 800a934:	e7e2      	b.n	800a8fc <cosf+0x28>
 800a936:	eddd 0a01 	vldr	s1, [sp, #4]
 800a93a:	ed9d 0a00 	vldr	s0, [sp]
 800a93e:	f000 f853 	bl	800a9e8 <__kernel_cosf>
 800a942:	e7f5      	b.n	800a930 <cosf+0x5c>
 800a944:	eddd 0a01 	vldr	s1, [sp, #4]
 800a948:	ed9d 0a00 	vldr	s0, [sp]
 800a94c:	2001      	movs	r0, #1
 800a94e:	f000 f8a3 	bl	800aa98 <__kernel_sinf>
 800a952:	e7d3      	b.n	800a8fc <cosf+0x28>
 800a954:	3f490fd8 	.word	0x3f490fd8
 800a958:	00000000 	.word	0x00000000

0800a95c <sinf>:
 800a95c:	ee10 3a10 	vmov	r3, s0
 800a960:	b507      	push	{r0, r1, r2, lr}
 800a962:	4a1f      	ldr	r2, [pc, #124]	@ (800a9e0 <sinf+0x84>)
 800a964:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a968:	4293      	cmp	r3, r2
 800a96a:	d807      	bhi.n	800a97c <sinf+0x20>
 800a96c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800a9e4 <sinf+0x88>
 800a970:	2000      	movs	r0, #0
 800a972:	b003      	add	sp, #12
 800a974:	f85d eb04 	ldr.w	lr, [sp], #4
 800a978:	f000 b88e 	b.w	800aa98 <__kernel_sinf>
 800a97c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a980:	d304      	bcc.n	800a98c <sinf+0x30>
 800a982:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a986:	b003      	add	sp, #12
 800a988:	f85d fb04 	ldr.w	pc, [sp], #4
 800a98c:	4668      	mov	r0, sp
 800a98e:	f000 f8cb 	bl	800ab28 <__ieee754_rem_pio2f>
 800a992:	f000 0003 	and.w	r0, r0, #3
 800a996:	2801      	cmp	r0, #1
 800a998:	d00a      	beq.n	800a9b0 <sinf+0x54>
 800a99a:	2802      	cmp	r0, #2
 800a99c:	d00f      	beq.n	800a9be <sinf+0x62>
 800a99e:	b9c0      	cbnz	r0, 800a9d2 <sinf+0x76>
 800a9a0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a9a4:	ed9d 0a00 	vldr	s0, [sp]
 800a9a8:	2001      	movs	r0, #1
 800a9aa:	f000 f875 	bl	800aa98 <__kernel_sinf>
 800a9ae:	e7ea      	b.n	800a986 <sinf+0x2a>
 800a9b0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a9b4:	ed9d 0a00 	vldr	s0, [sp]
 800a9b8:	f000 f816 	bl	800a9e8 <__kernel_cosf>
 800a9bc:	e7e3      	b.n	800a986 <sinf+0x2a>
 800a9be:	eddd 0a01 	vldr	s1, [sp, #4]
 800a9c2:	ed9d 0a00 	vldr	s0, [sp]
 800a9c6:	2001      	movs	r0, #1
 800a9c8:	f000 f866 	bl	800aa98 <__kernel_sinf>
 800a9cc:	eeb1 0a40 	vneg.f32	s0, s0
 800a9d0:	e7d9      	b.n	800a986 <sinf+0x2a>
 800a9d2:	eddd 0a01 	vldr	s1, [sp, #4]
 800a9d6:	ed9d 0a00 	vldr	s0, [sp]
 800a9da:	f000 f805 	bl	800a9e8 <__kernel_cosf>
 800a9de:	e7f5      	b.n	800a9cc <sinf+0x70>
 800a9e0:	3f490fd8 	.word	0x3f490fd8
 800a9e4:	00000000 	.word	0x00000000

0800a9e8 <__kernel_cosf>:
 800a9e8:	ee10 3a10 	vmov	r3, s0
 800a9ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a9f0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800a9f4:	eef0 6a40 	vmov.f32	s13, s0
 800a9f8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a9fc:	d204      	bcs.n	800aa08 <__kernel_cosf+0x20>
 800a9fe:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800aa02:	ee17 2a90 	vmov	r2, s15
 800aa06:	b342      	cbz	r2, 800aa5a <__kernel_cosf+0x72>
 800aa08:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800aa0c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800aa78 <__kernel_cosf+0x90>
 800aa10:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800aa7c <__kernel_cosf+0x94>
 800aa14:	4a1a      	ldr	r2, [pc, #104]	@ (800aa80 <__kernel_cosf+0x98>)
 800aa16:	eea7 6a27 	vfma.f32	s12, s14, s15
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800aa84 <__kernel_cosf+0x9c>
 800aa20:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aa24:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800aa88 <__kernel_cosf+0xa0>
 800aa28:	eea7 6a87 	vfma.f32	s12, s15, s14
 800aa2c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800aa8c <__kernel_cosf+0xa4>
 800aa30:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aa34:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800aa90 <__kernel_cosf+0xa8>
 800aa38:	eea7 6a87 	vfma.f32	s12, s15, s14
 800aa3c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800aa40:	ee26 6a07 	vmul.f32	s12, s12, s14
 800aa44:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800aa48:	eee7 0a06 	vfma.f32	s1, s14, s12
 800aa4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa50:	d804      	bhi.n	800aa5c <__kernel_cosf+0x74>
 800aa52:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800aa56:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aa5a:	4770      	bx	lr
 800aa5c:	4a0d      	ldr	r2, [pc, #52]	@ (800aa94 <__kernel_cosf+0xac>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	bf9a      	itte	ls
 800aa62:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800aa66:	ee07 3a10 	vmovls	s14, r3
 800aa6a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800aa6e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800aa72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa76:	e7ec      	b.n	800aa52 <__kernel_cosf+0x6a>
 800aa78:	ad47d74e 	.word	0xad47d74e
 800aa7c:	310f74f6 	.word	0x310f74f6
 800aa80:	3e999999 	.word	0x3e999999
 800aa84:	b493f27c 	.word	0xb493f27c
 800aa88:	37d00d01 	.word	0x37d00d01
 800aa8c:	bab60b61 	.word	0xbab60b61
 800aa90:	3d2aaaab 	.word	0x3d2aaaab
 800aa94:	3f480000 	.word	0x3f480000

0800aa98 <__kernel_sinf>:
 800aa98:	ee10 3a10 	vmov	r3, s0
 800aa9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aaa0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800aaa4:	d204      	bcs.n	800aab0 <__kernel_sinf+0x18>
 800aaa6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800aaaa:	ee17 3a90 	vmov	r3, s15
 800aaae:	b35b      	cbz	r3, 800ab08 <__kernel_sinf+0x70>
 800aab0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800aab4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ab0c <__kernel_sinf+0x74>
 800aab8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800ab10 <__kernel_sinf+0x78>
 800aabc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800aac0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800ab14 <__kernel_sinf+0x7c>
 800aac4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aac8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800ab18 <__kernel_sinf+0x80>
 800aacc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800aad0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800ab1c <__kernel_sinf+0x84>
 800aad4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800aad8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800aadc:	b930      	cbnz	r0, 800aaec <__kernel_sinf+0x54>
 800aade:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800ab20 <__kernel_sinf+0x88>
 800aae2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800aae6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800aaea:	4770      	bx	lr
 800aaec:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800aaf0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800aaf4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800aaf8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800aafc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800ab24 <__kernel_sinf+0x8c>
 800ab00:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ab04:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	2f2ec9d3 	.word	0x2f2ec9d3
 800ab10:	b2d72f34 	.word	0xb2d72f34
 800ab14:	3638ef1b 	.word	0x3638ef1b
 800ab18:	b9500d01 	.word	0xb9500d01
 800ab1c:	3c088889 	.word	0x3c088889
 800ab20:	be2aaaab 	.word	0xbe2aaaab
 800ab24:	3e2aaaab 	.word	0x3e2aaaab

0800ab28 <__ieee754_rem_pio2f>:
 800ab28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab2a:	ee10 6a10 	vmov	r6, s0
 800ab2e:	4b88      	ldr	r3, [pc, #544]	@ (800ad50 <__ieee754_rem_pio2f+0x228>)
 800ab30:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800ab34:	429d      	cmp	r5, r3
 800ab36:	b087      	sub	sp, #28
 800ab38:	4604      	mov	r4, r0
 800ab3a:	d805      	bhi.n	800ab48 <__ieee754_rem_pio2f+0x20>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	ed80 0a00 	vstr	s0, [r0]
 800ab42:	6043      	str	r3, [r0, #4]
 800ab44:	2000      	movs	r0, #0
 800ab46:	e022      	b.n	800ab8e <__ieee754_rem_pio2f+0x66>
 800ab48:	4b82      	ldr	r3, [pc, #520]	@ (800ad54 <__ieee754_rem_pio2f+0x22c>)
 800ab4a:	429d      	cmp	r5, r3
 800ab4c:	d83a      	bhi.n	800abc4 <__ieee754_rem_pio2f+0x9c>
 800ab4e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800ab52:	2e00      	cmp	r6, #0
 800ab54:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800ad58 <__ieee754_rem_pio2f+0x230>
 800ab58:	4a80      	ldr	r2, [pc, #512]	@ (800ad5c <__ieee754_rem_pio2f+0x234>)
 800ab5a:	f023 030f 	bic.w	r3, r3, #15
 800ab5e:	dd18      	ble.n	800ab92 <__ieee754_rem_pio2f+0x6a>
 800ab60:	4293      	cmp	r3, r2
 800ab62:	ee70 7a47 	vsub.f32	s15, s0, s14
 800ab66:	bf09      	itett	eq
 800ab68:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800ad60 <__ieee754_rem_pio2f+0x238>
 800ab6c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800ad64 <__ieee754_rem_pio2f+0x23c>
 800ab70:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800ad68 <__ieee754_rem_pio2f+0x240>
 800ab74:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800ab78:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800ab7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab80:	ed80 7a00 	vstr	s14, [r0]
 800ab84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ab88:	edc0 7a01 	vstr	s15, [r0, #4]
 800ab8c:	2001      	movs	r0, #1
 800ab8e:	b007      	add	sp, #28
 800ab90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab92:	4293      	cmp	r3, r2
 800ab94:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ab98:	bf09      	itett	eq
 800ab9a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800ad60 <__ieee754_rem_pio2f+0x238>
 800ab9e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800ad64 <__ieee754_rem_pio2f+0x23c>
 800aba2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800ad68 <__ieee754_rem_pio2f+0x240>
 800aba6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800abaa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800abae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abb2:	ed80 7a00 	vstr	s14, [r0]
 800abb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abba:	edc0 7a01 	vstr	s15, [r0, #4]
 800abbe:	f04f 30ff 	mov.w	r0, #4294967295
 800abc2:	e7e4      	b.n	800ab8e <__ieee754_rem_pio2f+0x66>
 800abc4:	4b69      	ldr	r3, [pc, #420]	@ (800ad6c <__ieee754_rem_pio2f+0x244>)
 800abc6:	429d      	cmp	r5, r3
 800abc8:	d873      	bhi.n	800acb2 <__ieee754_rem_pio2f+0x18a>
 800abca:	f000 f8dd 	bl	800ad88 <fabsf>
 800abce:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800ad70 <__ieee754_rem_pio2f+0x248>
 800abd2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800abd6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800abda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800abe2:	ee17 0a90 	vmov	r0, s15
 800abe6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800ad58 <__ieee754_rem_pio2f+0x230>
 800abea:	eea7 0a67 	vfms.f32	s0, s14, s15
 800abee:	281f      	cmp	r0, #31
 800abf0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800ad64 <__ieee754_rem_pio2f+0x23c>
 800abf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf8:	eeb1 6a47 	vneg.f32	s12, s14
 800abfc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ac00:	ee16 1a90 	vmov	r1, s13
 800ac04:	dc09      	bgt.n	800ac1a <__ieee754_rem_pio2f+0xf2>
 800ac06:	4a5b      	ldr	r2, [pc, #364]	@ (800ad74 <__ieee754_rem_pio2f+0x24c>)
 800ac08:	1e47      	subs	r7, r0, #1
 800ac0a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800ac0e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800ac12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d107      	bne.n	800ac2a <__ieee754_rem_pio2f+0x102>
 800ac1a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800ac1e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800ac22:	2a08      	cmp	r2, #8
 800ac24:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800ac28:	dc14      	bgt.n	800ac54 <__ieee754_rem_pio2f+0x12c>
 800ac2a:	6021      	str	r1, [r4, #0]
 800ac2c:	ed94 7a00 	vldr	s14, [r4]
 800ac30:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ac34:	2e00      	cmp	r6, #0
 800ac36:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ac3a:	ed84 0a01 	vstr	s0, [r4, #4]
 800ac3e:	daa6      	bge.n	800ab8e <__ieee754_rem_pio2f+0x66>
 800ac40:	eeb1 7a47 	vneg.f32	s14, s14
 800ac44:	eeb1 0a40 	vneg.f32	s0, s0
 800ac48:	ed84 7a00 	vstr	s14, [r4]
 800ac4c:	ed84 0a01 	vstr	s0, [r4, #4]
 800ac50:	4240      	negs	r0, r0
 800ac52:	e79c      	b.n	800ab8e <__ieee754_rem_pio2f+0x66>
 800ac54:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800ad60 <__ieee754_rem_pio2f+0x238>
 800ac58:	eef0 6a40 	vmov.f32	s13, s0
 800ac5c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800ac60:	ee70 7a66 	vsub.f32	s15, s0, s13
 800ac64:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ac68:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800ad68 <__ieee754_rem_pio2f+0x240>
 800ac6c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800ac70:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800ac74:	ee15 2a90 	vmov	r2, s11
 800ac78:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ac7c:	1a5b      	subs	r3, r3, r1
 800ac7e:	2b19      	cmp	r3, #25
 800ac80:	dc04      	bgt.n	800ac8c <__ieee754_rem_pio2f+0x164>
 800ac82:	edc4 5a00 	vstr	s11, [r4]
 800ac86:	eeb0 0a66 	vmov.f32	s0, s13
 800ac8a:	e7cf      	b.n	800ac2c <__ieee754_rem_pio2f+0x104>
 800ac8c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800ad78 <__ieee754_rem_pio2f+0x250>
 800ac90:	eeb0 0a66 	vmov.f32	s0, s13
 800ac94:	eea6 0a25 	vfma.f32	s0, s12, s11
 800ac98:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ac9c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800ad7c <__ieee754_rem_pio2f+0x254>
 800aca0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800aca4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800aca8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800acac:	ed84 7a00 	vstr	s14, [r4]
 800acb0:	e7bc      	b.n	800ac2c <__ieee754_rem_pio2f+0x104>
 800acb2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800acb6:	d306      	bcc.n	800acc6 <__ieee754_rem_pio2f+0x19e>
 800acb8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800acbc:	edc0 7a01 	vstr	s15, [r0, #4]
 800acc0:	edc0 7a00 	vstr	s15, [r0]
 800acc4:	e73e      	b.n	800ab44 <__ieee754_rem_pio2f+0x1c>
 800acc6:	15ea      	asrs	r2, r5, #23
 800acc8:	3a86      	subs	r2, #134	@ 0x86
 800acca:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800acce:	ee07 3a90 	vmov	s15, r3
 800acd2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800acd6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800ad80 <__ieee754_rem_pio2f+0x258>
 800acda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800acde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ace2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ace6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800acea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800acee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800acf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800acf6:	ed8d 7a04 	vstr	s14, [sp, #16]
 800acfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800acfe:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ad02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad06:	edcd 7a05 	vstr	s15, [sp, #20]
 800ad0a:	d11e      	bne.n	800ad4a <__ieee754_rem_pio2f+0x222>
 800ad0c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ad10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad14:	bf0c      	ite	eq
 800ad16:	2301      	moveq	r3, #1
 800ad18:	2302      	movne	r3, #2
 800ad1a:	491a      	ldr	r1, [pc, #104]	@ (800ad84 <__ieee754_rem_pio2f+0x25c>)
 800ad1c:	9101      	str	r1, [sp, #4]
 800ad1e:	2102      	movs	r1, #2
 800ad20:	9100      	str	r1, [sp, #0]
 800ad22:	a803      	add	r0, sp, #12
 800ad24:	4621      	mov	r1, r4
 800ad26:	f000 f89d 	bl	800ae64 <__kernel_rem_pio2f>
 800ad2a:	2e00      	cmp	r6, #0
 800ad2c:	f6bf af2f 	bge.w	800ab8e <__ieee754_rem_pio2f+0x66>
 800ad30:	edd4 7a00 	vldr	s15, [r4]
 800ad34:	eef1 7a67 	vneg.f32	s15, s15
 800ad38:	edc4 7a00 	vstr	s15, [r4]
 800ad3c:	edd4 7a01 	vldr	s15, [r4, #4]
 800ad40:	eef1 7a67 	vneg.f32	s15, s15
 800ad44:	edc4 7a01 	vstr	s15, [r4, #4]
 800ad48:	e782      	b.n	800ac50 <__ieee754_rem_pio2f+0x128>
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	e7e5      	b.n	800ad1a <__ieee754_rem_pio2f+0x1f2>
 800ad4e:	bf00      	nop
 800ad50:	3f490fd8 	.word	0x3f490fd8
 800ad54:	4016cbe3 	.word	0x4016cbe3
 800ad58:	3fc90f80 	.word	0x3fc90f80
 800ad5c:	3fc90fd0 	.word	0x3fc90fd0
 800ad60:	37354400 	.word	0x37354400
 800ad64:	37354443 	.word	0x37354443
 800ad68:	2e85a308 	.word	0x2e85a308
 800ad6c:	43490f80 	.word	0x43490f80
 800ad70:	3f22f984 	.word	0x3f22f984
 800ad74:	0800b454 	.word	0x0800b454
 800ad78:	2e85a300 	.word	0x2e85a300
 800ad7c:	248d3132 	.word	0x248d3132
 800ad80:	43800000 	.word	0x43800000
 800ad84:	0800b4d4 	.word	0x0800b4d4

0800ad88 <fabsf>:
 800ad88:	ee10 3a10 	vmov	r3, s0
 800ad8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ad90:	ee00 3a10 	vmov	s0, r3
 800ad94:	4770      	bx	lr
	...

0800ad98 <scalbnf>:
 800ad98:	ee10 3a10 	vmov	r3, s0
 800ad9c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800ada0:	d02b      	beq.n	800adfa <scalbnf+0x62>
 800ada2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ada6:	d302      	bcc.n	800adae <scalbnf+0x16>
 800ada8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800adac:	4770      	bx	lr
 800adae:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800adb2:	d123      	bne.n	800adfc <scalbnf+0x64>
 800adb4:	4b24      	ldr	r3, [pc, #144]	@ (800ae48 <scalbnf+0xb0>)
 800adb6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800ae4c <scalbnf+0xb4>
 800adba:	4298      	cmp	r0, r3
 800adbc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800adc0:	db17      	blt.n	800adf2 <scalbnf+0x5a>
 800adc2:	ee10 3a10 	vmov	r3, s0
 800adc6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800adca:	3a19      	subs	r2, #25
 800adcc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800add0:	4288      	cmp	r0, r1
 800add2:	dd15      	ble.n	800ae00 <scalbnf+0x68>
 800add4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800ae50 <scalbnf+0xb8>
 800add8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800ae54 <scalbnf+0xbc>
 800addc:	ee10 3a10 	vmov	r3, s0
 800ade0:	eeb0 7a67 	vmov.f32	s14, s15
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	bfb8      	it	lt
 800ade8:	eef0 7a66 	vmovlt.f32	s15, s13
 800adec:	ee27 0a87 	vmul.f32	s0, s15, s14
 800adf0:	4770      	bx	lr
 800adf2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ae58 <scalbnf+0xc0>
 800adf6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800adfa:	4770      	bx	lr
 800adfc:	0dd2      	lsrs	r2, r2, #23
 800adfe:	e7e5      	b.n	800adcc <scalbnf+0x34>
 800ae00:	4410      	add	r0, r2
 800ae02:	28fe      	cmp	r0, #254	@ 0xfe
 800ae04:	dce6      	bgt.n	800add4 <scalbnf+0x3c>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	dd06      	ble.n	800ae18 <scalbnf+0x80>
 800ae0a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ae0e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ae12:	ee00 3a10 	vmov	s0, r3
 800ae16:	4770      	bx	lr
 800ae18:	f110 0f16 	cmn.w	r0, #22
 800ae1c:	da09      	bge.n	800ae32 <scalbnf+0x9a>
 800ae1e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800ae58 <scalbnf+0xc0>
 800ae22:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800ae5c <scalbnf+0xc4>
 800ae26:	ee10 3a10 	vmov	r3, s0
 800ae2a:	eeb0 7a67 	vmov.f32	s14, s15
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	e7d9      	b.n	800ade6 <scalbnf+0x4e>
 800ae32:	3019      	adds	r0, #25
 800ae34:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ae38:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ae3c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800ae60 <scalbnf+0xc8>
 800ae40:	ee07 3a90 	vmov	s15, r3
 800ae44:	e7d7      	b.n	800adf6 <scalbnf+0x5e>
 800ae46:	bf00      	nop
 800ae48:	ffff3cb0 	.word	0xffff3cb0
 800ae4c:	4c000000 	.word	0x4c000000
 800ae50:	7149f2ca 	.word	0x7149f2ca
 800ae54:	f149f2ca 	.word	0xf149f2ca
 800ae58:	0da24260 	.word	0x0da24260
 800ae5c:	8da24260 	.word	0x8da24260
 800ae60:	33000000 	.word	0x33000000

0800ae64 <__kernel_rem_pio2f>:
 800ae64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae68:	ed2d 8b04 	vpush	{d8-d9}
 800ae6c:	b0d9      	sub	sp, #356	@ 0x164
 800ae6e:	4690      	mov	r8, r2
 800ae70:	9001      	str	r0, [sp, #4]
 800ae72:	4ab6      	ldr	r2, [pc, #728]	@ (800b14c <__kernel_rem_pio2f+0x2e8>)
 800ae74:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800ae76:	f118 0f04 	cmn.w	r8, #4
 800ae7a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800ae7e:	460f      	mov	r7, r1
 800ae80:	f103 3bff 	add.w	fp, r3, #4294967295
 800ae84:	db26      	blt.n	800aed4 <__kernel_rem_pio2f+0x70>
 800ae86:	f1b8 0203 	subs.w	r2, r8, #3
 800ae8a:	bf48      	it	mi
 800ae8c:	f108 0204 	addmi.w	r2, r8, #4
 800ae90:	10d2      	asrs	r2, r2, #3
 800ae92:	1c55      	adds	r5, r2, #1
 800ae94:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800ae96:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800b15c <__kernel_rem_pio2f+0x2f8>
 800ae9a:	00e8      	lsls	r0, r5, #3
 800ae9c:	eba2 060b 	sub.w	r6, r2, fp
 800aea0:	9002      	str	r0, [sp, #8]
 800aea2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800aea6:	eb0a 0c0b 	add.w	ip, sl, fp
 800aeaa:	ac1c      	add	r4, sp, #112	@ 0x70
 800aeac:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	4560      	cmp	r0, ip
 800aeb4:	dd10      	ble.n	800aed8 <__kernel_rem_pio2f+0x74>
 800aeb6:	a91c      	add	r1, sp, #112	@ 0x70
 800aeb8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800aebc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800aec0:	2600      	movs	r6, #0
 800aec2:	4556      	cmp	r6, sl
 800aec4:	dc24      	bgt.n	800af10 <__kernel_rem_pio2f+0xac>
 800aec6:	f8dd e004 	ldr.w	lr, [sp, #4]
 800aeca:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800b15c <__kernel_rem_pio2f+0x2f8>
 800aece:	4684      	mov	ip, r0
 800aed0:	2400      	movs	r4, #0
 800aed2:	e016      	b.n	800af02 <__kernel_rem_pio2f+0x9e>
 800aed4:	2200      	movs	r2, #0
 800aed6:	e7dc      	b.n	800ae92 <__kernel_rem_pio2f+0x2e>
 800aed8:	42c6      	cmn	r6, r0
 800aeda:	bf5d      	ittte	pl
 800aedc:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800aee0:	ee07 1a90 	vmovpl	s15, r1
 800aee4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800aee8:	eef0 7a47 	vmovmi.f32	s15, s14
 800aeec:	ece4 7a01 	vstmia	r4!, {s15}
 800aef0:	3001      	adds	r0, #1
 800aef2:	e7de      	b.n	800aeb2 <__kernel_rem_pio2f+0x4e>
 800aef4:	ecfe 6a01 	vldmia	lr!, {s13}
 800aef8:	ed3c 7a01 	vldmdb	ip!, {s14}
 800aefc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800af00:	3401      	adds	r4, #1
 800af02:	455c      	cmp	r4, fp
 800af04:	ddf6      	ble.n	800aef4 <__kernel_rem_pio2f+0x90>
 800af06:	ece9 7a01 	vstmia	r9!, {s15}
 800af0a:	3601      	adds	r6, #1
 800af0c:	3004      	adds	r0, #4
 800af0e:	e7d8      	b.n	800aec2 <__kernel_rem_pio2f+0x5e>
 800af10:	a908      	add	r1, sp, #32
 800af12:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af16:	9104      	str	r1, [sp, #16]
 800af18:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800af1a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800b158 <__kernel_rem_pio2f+0x2f4>
 800af1e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800b154 <__kernel_rem_pio2f+0x2f0>
 800af22:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800af26:	9203      	str	r2, [sp, #12]
 800af28:	4654      	mov	r4, sl
 800af2a:	00a2      	lsls	r2, r4, #2
 800af2c:	9205      	str	r2, [sp, #20]
 800af2e:	aa58      	add	r2, sp, #352	@ 0x160
 800af30:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800af34:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800af38:	a944      	add	r1, sp, #272	@ 0x110
 800af3a:	aa08      	add	r2, sp, #32
 800af3c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800af40:	4694      	mov	ip, r2
 800af42:	4626      	mov	r6, r4
 800af44:	2e00      	cmp	r6, #0
 800af46:	dc4c      	bgt.n	800afe2 <__kernel_rem_pio2f+0x17e>
 800af48:	4628      	mov	r0, r5
 800af4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800af4e:	f7ff ff23 	bl	800ad98 <scalbnf>
 800af52:	eeb0 8a40 	vmov.f32	s16, s0
 800af56:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800af5a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800af5e:	f000 f9e9 	bl	800b334 <floorf>
 800af62:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800af66:	eea0 8a67 	vfms.f32	s16, s0, s15
 800af6a:	2d00      	cmp	r5, #0
 800af6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af70:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800af74:	ee17 9a90 	vmov	r9, s15
 800af78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af7c:	ee38 8a67 	vsub.f32	s16, s16, s15
 800af80:	dd41      	ble.n	800b006 <__kernel_rem_pio2f+0x1a2>
 800af82:	f104 3cff 	add.w	ip, r4, #4294967295
 800af86:	a908      	add	r1, sp, #32
 800af88:	f1c5 0e08 	rsb	lr, r5, #8
 800af8c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800af90:	fa46 f00e 	asr.w	r0, r6, lr
 800af94:	4481      	add	r9, r0
 800af96:	fa00 f00e 	lsl.w	r0, r0, lr
 800af9a:	1a36      	subs	r6, r6, r0
 800af9c:	f1c5 0007 	rsb	r0, r5, #7
 800afa0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800afa4:	4106      	asrs	r6, r0
 800afa6:	2e00      	cmp	r6, #0
 800afa8:	dd3c      	ble.n	800b024 <__kernel_rem_pio2f+0x1c0>
 800afaa:	f04f 0e00 	mov.w	lr, #0
 800afae:	f109 0901 	add.w	r9, r9, #1
 800afb2:	4670      	mov	r0, lr
 800afb4:	4574      	cmp	r4, lr
 800afb6:	dc68      	bgt.n	800b08a <__kernel_rem_pio2f+0x226>
 800afb8:	2d00      	cmp	r5, #0
 800afba:	dd03      	ble.n	800afc4 <__kernel_rem_pio2f+0x160>
 800afbc:	2d01      	cmp	r5, #1
 800afbe:	d074      	beq.n	800b0aa <__kernel_rem_pio2f+0x246>
 800afc0:	2d02      	cmp	r5, #2
 800afc2:	d07d      	beq.n	800b0c0 <__kernel_rem_pio2f+0x25c>
 800afc4:	2e02      	cmp	r6, #2
 800afc6:	d12d      	bne.n	800b024 <__kernel_rem_pio2f+0x1c0>
 800afc8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800afcc:	ee30 8a48 	vsub.f32	s16, s0, s16
 800afd0:	b340      	cbz	r0, 800b024 <__kernel_rem_pio2f+0x1c0>
 800afd2:	4628      	mov	r0, r5
 800afd4:	9306      	str	r3, [sp, #24]
 800afd6:	f7ff fedf 	bl	800ad98 <scalbnf>
 800afda:	9b06      	ldr	r3, [sp, #24]
 800afdc:	ee38 8a40 	vsub.f32	s16, s16, s0
 800afe0:	e020      	b.n	800b024 <__kernel_rem_pio2f+0x1c0>
 800afe2:	ee60 7a28 	vmul.f32	s15, s0, s17
 800afe6:	3e01      	subs	r6, #1
 800afe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800afec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aff0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800aff4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800aff8:	ecac 0a01 	vstmia	ip!, {s0}
 800affc:	ed30 0a01 	vldmdb	r0!, {s0}
 800b000:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b004:	e79e      	b.n	800af44 <__kernel_rem_pio2f+0xe0>
 800b006:	d105      	bne.n	800b014 <__kernel_rem_pio2f+0x1b0>
 800b008:	1e60      	subs	r0, r4, #1
 800b00a:	a908      	add	r1, sp, #32
 800b00c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b010:	11f6      	asrs	r6, r6, #7
 800b012:	e7c8      	b.n	800afa6 <__kernel_rem_pio2f+0x142>
 800b014:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b018:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b020:	da31      	bge.n	800b086 <__kernel_rem_pio2f+0x222>
 800b022:	2600      	movs	r6, #0
 800b024:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b02c:	f040 8098 	bne.w	800b160 <__kernel_rem_pio2f+0x2fc>
 800b030:	1e60      	subs	r0, r4, #1
 800b032:	2200      	movs	r2, #0
 800b034:	4550      	cmp	r0, sl
 800b036:	da4b      	bge.n	800b0d0 <__kernel_rem_pio2f+0x26c>
 800b038:	2a00      	cmp	r2, #0
 800b03a:	d065      	beq.n	800b108 <__kernel_rem_pio2f+0x2a4>
 800b03c:	3c01      	subs	r4, #1
 800b03e:	ab08      	add	r3, sp, #32
 800b040:	3d08      	subs	r5, #8
 800b042:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d0f8      	beq.n	800b03c <__kernel_rem_pio2f+0x1d8>
 800b04a:	4628      	mov	r0, r5
 800b04c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b050:	f7ff fea2 	bl	800ad98 <scalbnf>
 800b054:	1c63      	adds	r3, r4, #1
 800b056:	aa44      	add	r2, sp, #272	@ 0x110
 800b058:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800b158 <__kernel_rem_pio2f+0x2f4>
 800b05c:	0099      	lsls	r1, r3, #2
 800b05e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b062:	4623      	mov	r3, r4
 800b064:	2b00      	cmp	r3, #0
 800b066:	f280 80a9 	bge.w	800b1bc <__kernel_rem_pio2f+0x358>
 800b06a:	4623      	mov	r3, r4
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f2c0 80c7 	blt.w	800b200 <__kernel_rem_pio2f+0x39c>
 800b072:	aa44      	add	r2, sp, #272	@ 0x110
 800b074:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b078:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800b150 <__kernel_rem_pio2f+0x2ec>
 800b07c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800b15c <__kernel_rem_pio2f+0x2f8>
 800b080:	2000      	movs	r0, #0
 800b082:	1ae2      	subs	r2, r4, r3
 800b084:	e0b1      	b.n	800b1ea <__kernel_rem_pio2f+0x386>
 800b086:	2602      	movs	r6, #2
 800b088:	e78f      	b.n	800afaa <__kernel_rem_pio2f+0x146>
 800b08a:	f852 1b04 	ldr.w	r1, [r2], #4
 800b08e:	b948      	cbnz	r0, 800b0a4 <__kernel_rem_pio2f+0x240>
 800b090:	b121      	cbz	r1, 800b09c <__kernel_rem_pio2f+0x238>
 800b092:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800b096:	f842 1c04 	str.w	r1, [r2, #-4]
 800b09a:	2101      	movs	r1, #1
 800b09c:	f10e 0e01 	add.w	lr, lr, #1
 800b0a0:	4608      	mov	r0, r1
 800b0a2:	e787      	b.n	800afb4 <__kernel_rem_pio2f+0x150>
 800b0a4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800b0a8:	e7f5      	b.n	800b096 <__kernel_rem_pio2f+0x232>
 800b0aa:	f104 3cff 	add.w	ip, r4, #4294967295
 800b0ae:	aa08      	add	r2, sp, #32
 800b0b0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b0b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b0b8:	a908      	add	r1, sp, #32
 800b0ba:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b0be:	e781      	b.n	800afc4 <__kernel_rem_pio2f+0x160>
 800b0c0:	f104 3cff 	add.w	ip, r4, #4294967295
 800b0c4:	aa08      	add	r2, sp, #32
 800b0c6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b0ca:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b0ce:	e7f3      	b.n	800b0b8 <__kernel_rem_pio2f+0x254>
 800b0d0:	a908      	add	r1, sp, #32
 800b0d2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b0d6:	3801      	subs	r0, #1
 800b0d8:	430a      	orrs	r2, r1
 800b0da:	e7ab      	b.n	800b034 <__kernel_rem_pio2f+0x1d0>
 800b0dc:	3201      	adds	r2, #1
 800b0de:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b0e2:	2e00      	cmp	r6, #0
 800b0e4:	d0fa      	beq.n	800b0dc <__kernel_rem_pio2f+0x278>
 800b0e6:	9905      	ldr	r1, [sp, #20]
 800b0e8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800b0ec:	eb0d 0001 	add.w	r0, sp, r1
 800b0f0:	18e6      	adds	r6, r4, r3
 800b0f2:	a91c      	add	r1, sp, #112	@ 0x70
 800b0f4:	f104 0c01 	add.w	ip, r4, #1
 800b0f8:	384c      	subs	r0, #76	@ 0x4c
 800b0fa:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800b0fe:	4422      	add	r2, r4
 800b100:	4562      	cmp	r2, ip
 800b102:	da04      	bge.n	800b10e <__kernel_rem_pio2f+0x2aa>
 800b104:	4614      	mov	r4, r2
 800b106:	e710      	b.n	800af2a <__kernel_rem_pio2f+0xc6>
 800b108:	9804      	ldr	r0, [sp, #16]
 800b10a:	2201      	movs	r2, #1
 800b10c:	e7e7      	b.n	800b0de <__kernel_rem_pio2f+0x27a>
 800b10e:	9903      	ldr	r1, [sp, #12]
 800b110:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b114:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800b118:	9105      	str	r1, [sp, #20]
 800b11a:	ee07 1a90 	vmov	s15, r1
 800b11e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b122:	2400      	movs	r4, #0
 800b124:	ece6 7a01 	vstmia	r6!, {s15}
 800b128:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800b15c <__kernel_rem_pio2f+0x2f8>
 800b12c:	46b1      	mov	r9, r6
 800b12e:	455c      	cmp	r4, fp
 800b130:	dd04      	ble.n	800b13c <__kernel_rem_pio2f+0x2d8>
 800b132:	ece0 7a01 	vstmia	r0!, {s15}
 800b136:	f10c 0c01 	add.w	ip, ip, #1
 800b13a:	e7e1      	b.n	800b100 <__kernel_rem_pio2f+0x29c>
 800b13c:	ecfe 6a01 	vldmia	lr!, {s13}
 800b140:	ed39 7a01 	vldmdb	r9!, {s14}
 800b144:	3401      	adds	r4, #1
 800b146:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b14a:	e7f0      	b.n	800b12e <__kernel_rem_pio2f+0x2ca>
 800b14c:	0800b818 	.word	0x0800b818
 800b150:	0800b7ec 	.word	0x0800b7ec
 800b154:	43800000 	.word	0x43800000
 800b158:	3b800000 	.word	0x3b800000
 800b15c:	00000000 	.word	0x00000000
 800b160:	9b02      	ldr	r3, [sp, #8]
 800b162:	eeb0 0a48 	vmov.f32	s0, s16
 800b166:	eba3 0008 	sub.w	r0, r3, r8
 800b16a:	f7ff fe15 	bl	800ad98 <scalbnf>
 800b16e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800b154 <__kernel_rem_pio2f+0x2f0>
 800b172:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b17a:	db19      	blt.n	800b1b0 <__kernel_rem_pio2f+0x34c>
 800b17c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800b158 <__kernel_rem_pio2f+0x2f4>
 800b180:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b184:	aa08      	add	r2, sp, #32
 800b186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b18a:	3508      	adds	r5, #8
 800b18c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b190:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b198:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b19c:	ee10 3a10 	vmov	r3, s0
 800b1a0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b1a4:	ee17 3a90 	vmov	r3, s15
 800b1a8:	3401      	adds	r4, #1
 800b1aa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b1ae:	e74c      	b.n	800b04a <__kernel_rem_pio2f+0x1e6>
 800b1b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b1b4:	aa08      	add	r2, sp, #32
 800b1b6:	ee10 3a10 	vmov	r3, s0
 800b1ba:	e7f6      	b.n	800b1aa <__kernel_rem_pio2f+0x346>
 800b1bc:	a808      	add	r0, sp, #32
 800b1be:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800b1c2:	9001      	str	r0, [sp, #4]
 800b1c4:	ee07 0a90 	vmov	s15, r0
 800b1c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b1d2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b1d6:	ed62 7a01 	vstmdb	r2!, {s15}
 800b1da:	e743      	b.n	800b064 <__kernel_rem_pio2f+0x200>
 800b1dc:	ecfc 6a01 	vldmia	ip!, {s13}
 800b1e0:	ecb5 7a01 	vldmia	r5!, {s14}
 800b1e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	4550      	cmp	r0, sl
 800b1ec:	dc01      	bgt.n	800b1f2 <__kernel_rem_pio2f+0x38e>
 800b1ee:	4290      	cmp	r0, r2
 800b1f0:	ddf4      	ble.n	800b1dc <__kernel_rem_pio2f+0x378>
 800b1f2:	a858      	add	r0, sp, #352	@ 0x160
 800b1f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b1f8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800b1fc:	3b01      	subs	r3, #1
 800b1fe:	e735      	b.n	800b06c <__kernel_rem_pio2f+0x208>
 800b200:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800b202:	2b02      	cmp	r3, #2
 800b204:	dc09      	bgt.n	800b21a <__kernel_rem_pio2f+0x3b6>
 800b206:	2b00      	cmp	r3, #0
 800b208:	dc27      	bgt.n	800b25a <__kernel_rem_pio2f+0x3f6>
 800b20a:	d040      	beq.n	800b28e <__kernel_rem_pio2f+0x42a>
 800b20c:	f009 0007 	and.w	r0, r9, #7
 800b210:	b059      	add	sp, #356	@ 0x164
 800b212:	ecbd 8b04 	vpop	{d8-d9}
 800b216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800b21c:	2b03      	cmp	r3, #3
 800b21e:	d1f5      	bne.n	800b20c <__kernel_rem_pio2f+0x3a8>
 800b220:	aa30      	add	r2, sp, #192	@ 0xc0
 800b222:	1f0b      	subs	r3, r1, #4
 800b224:	4413      	add	r3, r2
 800b226:	461a      	mov	r2, r3
 800b228:	4620      	mov	r0, r4
 800b22a:	2800      	cmp	r0, #0
 800b22c:	dc50      	bgt.n	800b2d0 <__kernel_rem_pio2f+0x46c>
 800b22e:	4622      	mov	r2, r4
 800b230:	2a01      	cmp	r2, #1
 800b232:	dc5d      	bgt.n	800b2f0 <__kernel_rem_pio2f+0x48c>
 800b234:	ab30      	add	r3, sp, #192	@ 0xc0
 800b236:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800b15c <__kernel_rem_pio2f+0x2f8>
 800b23a:	440b      	add	r3, r1
 800b23c:	2c01      	cmp	r4, #1
 800b23e:	dc67      	bgt.n	800b310 <__kernel_rem_pio2f+0x4ac>
 800b240:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800b244:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800b248:	2e00      	cmp	r6, #0
 800b24a:	d167      	bne.n	800b31c <__kernel_rem_pio2f+0x4b8>
 800b24c:	edc7 6a00 	vstr	s13, [r7]
 800b250:	ed87 7a01 	vstr	s14, [r7, #4]
 800b254:	edc7 7a02 	vstr	s15, [r7, #8]
 800b258:	e7d8      	b.n	800b20c <__kernel_rem_pio2f+0x3a8>
 800b25a:	ab30      	add	r3, sp, #192	@ 0xc0
 800b25c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800b15c <__kernel_rem_pio2f+0x2f8>
 800b260:	440b      	add	r3, r1
 800b262:	4622      	mov	r2, r4
 800b264:	2a00      	cmp	r2, #0
 800b266:	da24      	bge.n	800b2b2 <__kernel_rem_pio2f+0x44e>
 800b268:	b34e      	cbz	r6, 800b2be <__kernel_rem_pio2f+0x45a>
 800b26a:	eef1 7a47 	vneg.f32	s15, s14
 800b26e:	edc7 7a00 	vstr	s15, [r7]
 800b272:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800b276:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b27a:	aa31      	add	r2, sp, #196	@ 0xc4
 800b27c:	2301      	movs	r3, #1
 800b27e:	429c      	cmp	r4, r3
 800b280:	da20      	bge.n	800b2c4 <__kernel_rem_pio2f+0x460>
 800b282:	b10e      	cbz	r6, 800b288 <__kernel_rem_pio2f+0x424>
 800b284:	eef1 7a67 	vneg.f32	s15, s15
 800b288:	edc7 7a01 	vstr	s15, [r7, #4]
 800b28c:	e7be      	b.n	800b20c <__kernel_rem_pio2f+0x3a8>
 800b28e:	ab30      	add	r3, sp, #192	@ 0xc0
 800b290:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800b15c <__kernel_rem_pio2f+0x2f8>
 800b294:	440b      	add	r3, r1
 800b296:	2c00      	cmp	r4, #0
 800b298:	da05      	bge.n	800b2a6 <__kernel_rem_pio2f+0x442>
 800b29a:	b10e      	cbz	r6, 800b2a0 <__kernel_rem_pio2f+0x43c>
 800b29c:	eef1 7a67 	vneg.f32	s15, s15
 800b2a0:	edc7 7a00 	vstr	s15, [r7]
 800b2a4:	e7b2      	b.n	800b20c <__kernel_rem_pio2f+0x3a8>
 800b2a6:	ed33 7a01 	vldmdb	r3!, {s14}
 800b2aa:	3c01      	subs	r4, #1
 800b2ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2b0:	e7f1      	b.n	800b296 <__kernel_rem_pio2f+0x432>
 800b2b2:	ed73 7a01 	vldmdb	r3!, {s15}
 800b2b6:	3a01      	subs	r2, #1
 800b2b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b2bc:	e7d2      	b.n	800b264 <__kernel_rem_pio2f+0x400>
 800b2be:	eef0 7a47 	vmov.f32	s15, s14
 800b2c2:	e7d4      	b.n	800b26e <__kernel_rem_pio2f+0x40a>
 800b2c4:	ecb2 7a01 	vldmia	r2!, {s14}
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2ce:	e7d6      	b.n	800b27e <__kernel_rem_pio2f+0x41a>
 800b2d0:	ed72 7a01 	vldmdb	r2!, {s15}
 800b2d4:	edd2 6a01 	vldr	s13, [r2, #4]
 800b2d8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b2dc:	3801      	subs	r0, #1
 800b2de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b2e2:	ed82 7a00 	vstr	s14, [r2]
 800b2e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2ea:	edc2 7a01 	vstr	s15, [r2, #4]
 800b2ee:	e79c      	b.n	800b22a <__kernel_rem_pio2f+0x3c6>
 800b2f0:	ed73 7a01 	vldmdb	r3!, {s15}
 800b2f4:	edd3 6a01 	vldr	s13, [r3, #4]
 800b2f8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b2fc:	3a01      	subs	r2, #1
 800b2fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b302:	ed83 7a00 	vstr	s14, [r3]
 800b306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b30a:	edc3 7a01 	vstr	s15, [r3, #4]
 800b30e:	e78f      	b.n	800b230 <__kernel_rem_pio2f+0x3cc>
 800b310:	ed33 7a01 	vldmdb	r3!, {s14}
 800b314:	3c01      	subs	r4, #1
 800b316:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b31a:	e78f      	b.n	800b23c <__kernel_rem_pio2f+0x3d8>
 800b31c:	eef1 6a66 	vneg.f32	s13, s13
 800b320:	eeb1 7a47 	vneg.f32	s14, s14
 800b324:	edc7 6a00 	vstr	s13, [r7]
 800b328:	ed87 7a01 	vstr	s14, [r7, #4]
 800b32c:	eef1 7a67 	vneg.f32	s15, s15
 800b330:	e790      	b.n	800b254 <__kernel_rem_pio2f+0x3f0>
 800b332:	bf00      	nop

0800b334 <floorf>:
 800b334:	ee10 3a10 	vmov	r3, s0
 800b338:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b33c:	3a7f      	subs	r2, #127	@ 0x7f
 800b33e:	2a16      	cmp	r2, #22
 800b340:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b344:	dc2b      	bgt.n	800b39e <floorf+0x6a>
 800b346:	2a00      	cmp	r2, #0
 800b348:	da12      	bge.n	800b370 <floorf+0x3c>
 800b34a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b3b0 <floorf+0x7c>
 800b34e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b352:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b35a:	dd06      	ble.n	800b36a <floorf+0x36>
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	da24      	bge.n	800b3aa <floorf+0x76>
 800b360:	2900      	cmp	r1, #0
 800b362:	4b14      	ldr	r3, [pc, #80]	@ (800b3b4 <floorf+0x80>)
 800b364:	bf08      	it	eq
 800b366:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800b36a:	ee00 3a10 	vmov	s0, r3
 800b36e:	4770      	bx	lr
 800b370:	4911      	ldr	r1, [pc, #68]	@ (800b3b8 <floorf+0x84>)
 800b372:	4111      	asrs	r1, r2
 800b374:	420b      	tst	r3, r1
 800b376:	d0fa      	beq.n	800b36e <floorf+0x3a>
 800b378:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800b3b0 <floorf+0x7c>
 800b37c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b380:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b388:	ddef      	ble.n	800b36a <floorf+0x36>
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	bfbe      	ittt	lt
 800b38e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800b392:	fa40 f202 	asrlt.w	r2, r0, r2
 800b396:	189b      	addlt	r3, r3, r2
 800b398:	ea23 0301 	bic.w	r3, r3, r1
 800b39c:	e7e5      	b.n	800b36a <floorf+0x36>
 800b39e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b3a2:	d3e4      	bcc.n	800b36e <floorf+0x3a>
 800b3a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b3a8:	4770      	bx	lr
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	e7dd      	b.n	800b36a <floorf+0x36>
 800b3ae:	bf00      	nop
 800b3b0:	7149f2ca 	.word	0x7149f2ca
 800b3b4:	bf800000 	.word	0xbf800000
 800b3b8:	007fffff 	.word	0x007fffff

0800b3bc <_init>:
 800b3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3be:	bf00      	nop
 800b3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3c2:	bc08      	pop	{r3}
 800b3c4:	469e      	mov	lr, r3
 800b3c6:	4770      	bx	lr

0800b3c8 <_fini>:
 800b3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ca:	bf00      	nop
 800b3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ce:	bc08      	pop	{r3}
 800b3d0:	469e      	mov	lr, r3
 800b3d2:	4770      	bx	lr
