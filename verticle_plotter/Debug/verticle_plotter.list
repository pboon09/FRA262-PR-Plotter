
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd68  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0800ff40  0800ff40  00010f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010540  08010540  00012150  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010540  08010540  00011540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010548  08010548  00012150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010548  08010548  00011548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801054c  0801054c  0001154c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  08010550  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002080  20000150  080106a0  00012150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021d0  080106a0  000121d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b782  00000000  00000000  00012180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000534a  00000000  00000000  0003d902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c08  00000000  00000000  00042c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015bb  00000000  00000000  00044858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d6c9  00000000  00000000  00045e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029d76  00000000  00000000  000734dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119b3c  00000000  00000000  0009d252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b6d8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f6c  00000000  00000000  001b6dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001bed40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000150 	.word	0x20000150
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ff28 	.word	0x0800ff28

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000154 	.word	0x20000154
 8000214:	0800ff28 	.word	0x0800ff28

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f007 f886 	bl	80080f0 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f006 f96f 	bl	80072d4 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fc4a 	bl	80019d4 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3328      	adds	r3, #40	@ 0x28
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f001 fe2b 	bl	8002fbc <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8b3a      	ldrh	r2, [r7, #24]
 8001370:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001390:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800139a:	2b00      	cmp	r3, #0
 800139c:	d15f      	bne.n	800145e <MDXX_set_range+0xda>
		if (duty == 0) {
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d115      	bne.n	80013d8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3310      	adds	r3, #16
 80013b0:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001530 <MDXX_set_range+0x1ac>
 80013b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 ff25 	bl	8003208 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3328      	adds	r3, #40	@ 0x28
 80013c2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001530 <MDXX_set_range+0x1ac>
 80013c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 ff1c 	bl	8003208 <PWM_write_range>
			mdxx->cmd = 0;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80013d6:	e0a6      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80013d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	dd1a      	ble.n	800141c <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3310      	adds	r3, #16
 80013ea:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001530 <MDXX_set_range+0x1ac>
 80013ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 ff08 	bl	8003208 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3328      	adds	r3, #40	@ 0x28
 80013fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8001400:	ed97 0a02 	vldr	s0, [r7, #8]
 8001404:	4618      	mov	r0, r3
 8001406:	f001 feff 	bl	8003208 <PWM_write_range>
			mdxx->cmd = duty;
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001412:	ee17 2a90 	vmov	r2, s15
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800141a:	e084      	b.n	8001526 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3310      	adds	r3, #16
 8001420:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001534 <MDXX_set_range+0x1b0>
 8001424:	ed97 0a02 	vldr	s0, [r7, #8]
 8001428:	4618      	mov	r0, r3
 800142a:	f001 feed 	bl	8003208 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3328      	adds	r3, #40	@ 0x28
 8001432:	edd7 7a01 	vldr	s15, [r7, #4]
 8001436:	eef0 7ae7 	vabs.f32	s15, s15
 800143a:	eef0 0a67 	vmov.f32	s1, s15
 800143e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001442:	4618      	mov	r0, r3
 8001444:	f001 fee0 	bl	8003208 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	eef0 7ae7 	vabs.f32	s15, s15
 8001450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001454:	ee17 2a90 	vmov	r2, s15
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145c:	e063      	b.n	8001526 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001464:	2b01      	cmp	r3, #1
 8001466:	d15e      	bne.n	8001526 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001468:	edd7 7a01 	vldr	s15, [r7, #4]
 800146c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d115      	bne.n	80014a2 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	f007 fd7a 	bl	8008f7c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3328      	adds	r3, #40	@ 0x28
 800148c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001530 <MDXX_set_range+0x1ac>
 8001490:	ed97 0a02 	vldr	s0, [r7, #8]
 8001494:	4618      	mov	r0, r3
 8001496:	f001 feb7 	bl	8003208 <PWM_write_range>
			mdxx->cmd = 0;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e041      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd1a      	ble.n	80014e6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	f007 fd5d 	bl	8008f7c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3328      	adds	r3, #40	@ 0x28
 80014c6:	edd7 0a01 	vldr	s1, [r7, #4]
 80014ca:	ed97 0a02 	vldr	s0, [r7, #8]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 fe9a 	bl	8003208 <PWM_write_range>
			mdxx->cmd = duty;
 80014d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 2a90 	vmov	r2, s15
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e01f      	b.n	8001526 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	f007 fd42 	bl	8008f7c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3328      	adds	r3, #40	@ 0x28
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	eef0 7ae7 	vabs.f32	s15, s15
 8001504:	eef0 0a67 	vmov.f32	s1, s15
 8001508:	ed97 0a02 	vldr	s0, [r7, #8]
 800150c:	4618      	mov	r0, r3
 800150e:	f001 fe7b 	bl	8003208 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001512:	edd7 7a01 	vldr	s15, [r7, #4]
 8001516:	eef0 7ae7 	vabs.f32	s15, s15
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 2a90 	vmov	r2, s15
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00000000 	.word	0x00000000
 8001534:	42c80000 	.word	0x42c80000

08001538 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	605a      	str	r2, [r3, #4]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qdd, float s){
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	ed2d 8b02 	vpush	{d8}
 800157e:	b08a      	sub	sp, #40	@ 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	ed87 0a02 	vstr	s0, [r7, #8]
 8001588:	edc7 0a01 	vstr	s1, [r7, #4]
 800158c:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * s;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	ed93 7a01 	vldr	s14, [r3, #4]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	edd3 7a00 	vldr	s15, [r3]
 80015a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a4:	ee17 0a90 	vmov	r0, s15
 80015a8:	f7fe ff9a 	bl	80004e0 <__aeabi_f2d>
 80015ac:	4604      	mov	r4, r0
 80015ae:	460d      	mov	r5, r1
 80015b0:	68b8      	ldr	r0, [r7, #8]
 80015b2:	f7fe ff95 	bl	80004e0 <__aeabi_f2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	ec43 2b10 	vmov	d0, r2, r3
 80015be:	f00c fe57 	bl	800e270 <sin>
 80015c2:	ec53 2b10 	vmov	r2, r3, d0
 80015c6:	4620      	mov	r0, r4
 80015c8:	4629      	mov	r1, r5
 80015ca:	f7fe ffe1 	bl	8000590 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4614      	mov	r4, r2
 80015d4:	461d      	mov	r5, r3
 80015d6:	6838      	ldr	r0, [r7, #0]
 80015d8:	f7fe ff82 	bl	80004e0 <__aeabi_f2d>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4620      	mov	r0, r4
 80015e2:	4629      	mov	r1, r5
 80015e4:	f7fe ffd4 	bl	8000590 <__aeabi_dmul>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f7ff fab0 	bl	8000b54 <__aeabi_d2f>
 80015f4:	4603      	mov	r3, r0
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
    float gravity_compensate_rail = motor->En->plotter_mass * motor->En->g * sin(q) * motor->En->c;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160c:	ee17 0a90 	vmov	r0, s15
 8001610:	f7fe ff66 	bl	80004e0 <__aeabi_f2d>
 8001614:	4604      	mov	r4, r0
 8001616:	460d      	mov	r5, r1
 8001618:	68b8      	ldr	r0, [r7, #8]
 800161a:	f7fe ff61 	bl	80004e0 <__aeabi_f2d>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	ec43 2b10 	vmov	d0, r2, r3
 8001626:	f00c fe23 	bl	800e270 <sin>
 800162a:	ec53 2b10 	vmov	r2, r3, d0
 800162e:	4620      	mov	r0, r4
 8001630:	4629      	mov	r1, r5
 8001632:	f7fe ffad 	bl	8000590 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4614      	mov	r4, r2
 800163c:	461d      	mov	r5, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff4b 	bl	80004e0 <__aeabi_f2d>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4620      	mov	r0, r4
 8001650:	4629      	mov	r1, r5
 8001652:	f7fe ff9d 	bl	8000590 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff fa79 	bl	8000b54 <__aeabi_d2f>
 8001662:	4603      	mov	r3, r0
 8001664:	623b      	str	r3, [r7, #32]
    float mass_torque = motor->En->plotter_mass * s*s * qdd;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	ed93 7a01 	vldr	s14, [r3, #4]
 800166e:	edd7 7a00 	vldr	s15, [r7]
 8001672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001676:	edd7 7a00 	vldr	s15, [r7]
 800167a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001686:	edc7 7a07 	vstr	s15, [r7, #28]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800169a:	f7ff f8a3 	bl	80007e4 <__aeabi_ddiv>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff fa55 	bl	8000b54 <__aeabi_d2f>
 80016aa:	4603      	mov	r3, r0
 80016ac:	61bb      	str	r3, [r7, #24]

    float v = (gravity_compensate_plotter + gravity_compensate_rail + 0) * transfer_function;
 80016ae:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80016b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ba:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001750 <REVOLUTE_MOTOR_DFD_Compute+0x1d8>
 80016be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016c2:	ed97 7a06 	vldr	s14, [r7, #24]
 80016c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ca:	edc7 7a05 	vstr	s15, [r7, #20]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	f7ff fa3b 	bl	8000b54 <__aeabi_d2f>
 80016de:	4603      	mov	r3, r0
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eeb1 8a67 	vneg.f32	s16, s15
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fa2e 	bl	8000b54 <__aeabi_d2f>
 80016f8:	4604      	mov	r4, r0
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f7ff fa25 	bl	8000b54 <__aeabi_d2f>
 800170a:	4603      	mov	r3, r0
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eef1 8a67 	vneg.f32	s17, s15
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff fa18 	bl	8000b54 <__aeabi_d2f>
 8001724:	4603      	mov	r3, r0
 8001726:	ee02 3a10 	vmov	s4, r3
 800172a:	eef0 1a68 	vmov.f32	s3, s17
 800172e:	ee01 4a10 	vmov	s2, r4
 8001732:	eef0 0a48 	vmov.f32	s1, s16
 8001736:	ed97 0a05 	vldr	s0, [r7, #20]
 800173a:	f000 f94b 	bl	80019d4 <mapf>
 800173e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001742:	eeb0 0a67 	vmov.f32	s0, s15
 8001746:	3728      	adds	r7, #40	@ 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	ecbd 8b02 	vpop	{d8}
 800174e:	bdb0      	pop	{r4, r5, r7, pc}
 8001750:	00000000 	.word	0x00000000

08001754 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	601a      	str	r2, [r3, #0]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	605a      	str	r2, [r3, #4]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001794:	b580      	push	{r7, lr}
 8001796:	ed2d 8b02 	vpush	{d8}
 800179a:	b08a      	sub	sp, #40	@ 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	460b      	mov	r3, r1
 80017a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80017a6:	edc7 0a00 	vstr	s1, [r7]
 80017aa:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 80017ac:	897b      	ldrh	r3, [r7, #10]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <FIR_init+0x2a>
        numTaps += 1;
 80017b8:	897b      	ldrh	r3, [r7, #10]
 80017ba:	3301      	adds	r3, #1
 80017bc:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	897a      	ldrh	r2, [r7, #10]
 80017c2:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 80017ca:	897b      	ldrh	r3, [r7, #10]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f00c fc46 	bl	800e060 <malloc>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 80017dc:	897b      	ldrh	r3, [r7, #10]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f00c fc3d 	bl	800e060 <malloc>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80e0 	beq.w	80019b8 <FIR_init+0x224>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80db 	beq.w	80019b8 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001802:	2300      	movs	r3, #0
 8001804:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001806:	e00a      	b.n	800181e <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001818:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800181a:	3301      	adds	r3, #1
 800181c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800181e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001820:	897b      	ldrh	r3, [r7, #10]
 8001822:	429a      	cmp	r2, r3
 8001824:	d3f0      	bcc.n	8001808 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001826:	edd7 6a01 	vldr	s13, [r7, #4]
 800182a:	ed97 7a00 	vldr	s14, [r7]
 800182e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001832:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001836:	897b      	ldrh	r3, [r7, #10]
 8001838:	085b      	lsrs	r3, r3, #1
 800183a:	b29b      	uxth	r3, r3
 800183c:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 800183e:	2300      	movs	r3, #0
 8001840:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001842:	e077      	b.n	8001934 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001844:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001848:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800184c:	429a      	cmp	r2, r3
 800184e:	d10c      	bne.n	800186a <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001860:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001864:	edc3 7a00 	vstr	s15, [r3]
 8001868:	e02c      	b.n	80018c4 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 800186a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800186c:	8afb      	ldrh	r3, [r7, #22]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	b29b      	uxth	r3, r3
 8001872:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001874:	edd7 7a06 	vldr	s15, [r7, #24]
 8001878:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80019c4 <FIR_init+0x230>
 800187c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001880:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001884:	ee07 3a90 	vmov	s15, r3
 8001888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800188c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001890:	eeb0 0a67 	vmov.f32	s0, s15
 8001894:	f00c fdc2 	bl	800e41c <sinf>
 8001898:	eef0 6a40 	vmov.f32	s13, s0
 800189c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80019c8 <FIR_init+0x234>
 80018ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018c0:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	ed93 8a00 	vldr	s16, [r3]
 80018d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80018d8:	ee07 3a90 	vmov	s15, r3
 80018dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80019c4 <FIR_init+0x230>
 80018e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018e8:	897b      	ldrh	r3, [r7, #10]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	ee07 3a90 	vmov	s15, r3
 80018f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80018f8:	eeb0 0a66 	vmov.f32	s0, s13
 80018fc:	f00c fd4a 	bl	800e394 <cosf>
 8001900:	eef0 7a40 	vmov.f32	s15, s0
 8001904:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80019cc <FIR_init+0x238>
 8001908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800190c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80019d0 <FIR_init+0x23c>
 8001910:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001924:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001928:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800192c:	b29b      	uxth	r3, r3
 800192e:	3301      	adds	r3, #1
 8001930:	b29b      	uxth	r3, r3
 8001932:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001934:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001938:	897b      	ldrh	r3, [r7, #10]
 800193a:	429a      	cmp	r2, r3
 800193c:	db82      	blt.n	8001844 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001944:	2300      	movs	r3, #0
 8001946:	83fb      	strh	r3, [r7, #30]
 8001948:	e00f      	b.n	800196a <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	8bfb      	ldrh	r3, [r7, #30]
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	edd3 7a00 	vldr	s15, [r3]
 8001958:	ed97 7a08 	vldr	s14, [r7, #32]
 800195c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001960:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001964:	8bfb      	ldrh	r3, [r7, #30]
 8001966:	3301      	adds	r3, #1
 8001968:	83fb      	strh	r3, [r7, #30]
 800196a:	8bfa      	ldrh	r2, [r7, #30]
 800196c:	897b      	ldrh	r3, [r7, #10]
 800196e:	429a      	cmp	r2, r3
 8001970:	d3eb      	bcc.n	800194a <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001972:	edd7 7a08 	vldr	s15, [r7, #32]
 8001976:	eef5 7a40 	vcmp.f32	s15, #0.0
 800197a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197e:	d01b      	beq.n	80019b8 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001980:	2300      	movs	r3, #0
 8001982:	83bb      	strh	r3, [r7, #28]
 8001984:	e014      	b.n	80019b0 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	8bbb      	ldrh	r3, [r7, #28]
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	edd3 6a00 	vldr	s13, [r3]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	8bbb      	ldrh	r3, [r7, #28]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	ed97 7a08 	vldr	s14, [r7, #32]
 80019a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019a6:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 80019aa:	8bbb      	ldrh	r3, [r7, #28]
 80019ac:	3301      	adds	r3, #1
 80019ae:	83bb      	strh	r3, [r7, #28]
 80019b0:	8bba      	ldrh	r2, [r7, #28]
 80019b2:	897b      	ldrh	r3, [r7, #10]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d3e6      	bcc.n	8001986 <FIR_init+0x1f2>
            }
        }
    }
}
 80019b8:	bf00      	nop
 80019ba:	3728      	adds	r7, #40	@ 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	ecbd 8b02 	vpop	{d8}
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40c90fdb 	.word	0x40c90fdb
 80019c8:	40490fdb 	.word	0x40490fdb
 80019cc:	3eeb851f 	.word	0x3eeb851f
 80019d0:	3f0a3d71 	.word	0x3f0a3d71

080019d4 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	@ 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	ed87 0a05 	vstr	s0, [r7, #20]
 80019de:	edc7 0a04 	vstr	s1, [r7, #16]
 80019e2:	ed87 1a03 	vstr	s2, [r7, #12]
 80019e6:	edc7 1a02 	vstr	s3, [r7, #8]
 80019ea:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 80019ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80019f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80019fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a0a:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001a0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a22:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2a:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	ee07 3a90 	vmov	s15, r3
}
 8001a34:	eeb0 0a67 	vmov.f32	s0, s15
 8001a38:	3724      	adds	r7, #36	@ 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001a48:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <modbus_1t5_Timeout+0x3c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001a50:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <modbus_1t5_Timeout+0x3c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001a5c:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <modbus_1t5_Timeout+0x3c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <modbus_1t5_Timeout+0x3c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	2000016c 	.word	0x2000016c

08001a84 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001a8c:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <modbus_3t5_Timeout+0x1c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2201      	movs	r2, #1
 8001a92:	755a      	strb	r2, [r3, #21]

}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	2000016c 	.word	0x2000016c

08001aa4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f00b f90f 	bl	800ccd0 <HAL_UART_GetError>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b20      	cmp	r3, #32
 8001ab6:	d101      	bne.n	8001abc <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001ab8:	f7ff ffc4 	bl	8001a44 <modbus_1t5_Timeout>

	}
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001ad2:	4a2d      	ldr	r2, [pc, #180]	@ (8001b88 <Modbus_init+0xc4>)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b88 <Modbus_init+0xc4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001ae0:	4b29      	ldr	r3, [pc, #164]	@ (8001b88 <Modbus_init+0xc4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001ae8:	4b27      	ldr	r3, [pc, #156]	@ (8001b88 <Modbus_init+0xc4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001af0:	4b25      	ldr	r3, [pc, #148]	@ (8001b88 <Modbus_init+0xc4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	7e3a      	ldrb	r2, [r7, #24]
 8001af6:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001af8:	4b23      	ldr	r3, [pc, #140]	@ (8001b88 <Modbus_init+0xc4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	69fa      	ldr	r2, [r7, #28]
 8001afe:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	4a21      	ldr	r2, [pc, #132]	@ (8001b8c <Modbus_init+0xc8>)
 8001b06:	210e      	movs	r1, #14
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f009 fb8f 	bl	800b22c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2110      	movs	r1, #16
 8001b14:	4618      	mov	r0, r3
 8001b16:	f00b f885 	bl	800cc24 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f00b f89c 	bl	800cc5c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4a19      	ldr	r2, [pc, #100]	@ (8001b90 <Modbus_init+0xcc>)
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00a fbcd 	bl	800c2cc <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <Modbus_init+0xc4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001b38:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <Modbus_init+0xc4>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <Modbus_init+0xc4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001b44:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001b48:	4413      	add	r3, r2
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b50:	4619      	mov	r1, r3
 8001b52:	f00a fc75 	bl	800c440 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001b56:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <Modbus_init+0xc4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d10c      	bne.n	8001b80 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001b66:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <Modbus_init+0xc4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f008 fb39 	bl	800a1e4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001b72:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <Modbus_init+0xc4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f008 fd88 	bl	800a690 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	2000016c 	.word	0x2000016c
 8001b8c:	08001a85 	.word	0x08001a85
 8001b90:	08001aa5 	.word	0x08001aa5

08001b94 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08c      	sub	sp, #48	@ 0x30
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6278      	str	r0, [r7, #36]	@ 0x24
 8001b9c:	ed87 0a08 	vstr	s0, [r7, #32]
 8001ba0:	edc7 0a07 	vstr	s1, [r7, #28]
 8001ba4:	ed87 1a06 	vstr	s2, [r7, #24]
 8001ba8:	edc7 1a05 	vstr	s3, [r7, #20]
 8001bac:	ed87 2a04 	vstr	s4, [r7, #16]
 8001bb0:	edc7 2a03 	vstr	s5, [r7, #12]
 8001bb4:	ed87 3a02 	vstr	s6, [r7, #8]
 8001bb8:	edc7 3a01 	vstr	s7, [r7, #4]
 8001bbc:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	6a3a      	ldr	r2, [r7, #32]
 8001bc4:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	69fa      	ldr	r2, [r7, #28]
 8001bcc:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8001be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8001be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfa:	2210      	movs	r2, #16
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f00c fae4 	bl	800e1cc <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c06:	3310      	adds	r3, #16
 8001c08:	2240      	movs	r2, #64	@ 0x40
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f00c fadd 	bl	800e1cc <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001c12:	2300      	movs	r3, #0
 8001c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c16:	e00c      	b.n	8001c32 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8001c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c22:	3304      	adds	r3, #4
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	4a79      	ldr	r2, [pc, #484]	@ (8001e10 <MotorKalman_Init+0x27c>)
 8001c2a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c2e:	3301      	adds	r3, #1
 8001c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	ddef      	ble.n	8001c18 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8001c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3a:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001c3e:	2240      	movs	r2, #64	@ 0x40
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f00c fac2 	bl	800e1cc <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c4c:	e00d      	b.n	8001c6a <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001c4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c58:	33be      	adds	r3, #190	@ 0xbe
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c62:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c66:	3301      	adds	r3, #1
 8001c68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	ddee      	ble.n	8001c4e <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8001c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c72:	33f0      	adds	r3, #240	@ 0xf0
 8001c74:	2210      	movs	r2, #16
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f00c faa7 	bl	800e1cc <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c84:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001c8e:	2210      	movs	r2, #16
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f00c fa9a 	bl	800e1cc <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c9e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8001ca2:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ca6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ca8:	f000 f922 	bl	8001ef0 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8001cac:	ed97 0a00 	vldr	s0, [r7]
 8001cb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001cb2:	f000 f94d 	bl	8001f50 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	2104      	movs	r1, #4
 8001cc2:	f00c f904 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cce:	3310      	adds	r3, #16
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	2104      	movs	r1, #4
 8001cd4:	f00c f8fb 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cda:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	f00c f8f1 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	f00c f8e7 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 8001d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d02:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	2101      	movs	r1, #1
 8001d10:	f00c f8dd 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8001d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d16:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8001d20:	2201      	movs	r2, #1
 8001d22:	2101      	movs	r1, #1
 8001d24:	f00c f8d3 	bl	800dece <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8001d34:	2204      	movs	r2, #4
 8001d36:	2104      	movs	r1, #4
 8001d38:	f00c f8c9 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3e:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	f00c f8bf 	bl	800dece <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2104      	movs	r1, #4
 8001d60:	f00c f8b5 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 8001d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d66:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6c:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8001d70:	2204      	movs	r2, #4
 8001d72:	2104      	movs	r1, #4
 8001d74:	f00c f8ab 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8001d84:	2204      	movs	r2, #4
 8001d86:	2101      	movs	r1, #1
 8001d88:	f00c f8a1 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8e:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8001d98:	2201      	movs	r2, #1
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	f00c f897 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8001dac:	2201      	movs	r2, #1
 8001dae:	2104      	movs	r1, #4
 8001db0:	f00c f88d 	bl	800dece <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8001db4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001db6:	f000 f82d 	bl	8001e14 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 8001dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbc:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc2:	3390      	adds	r3, #144	@ 0x90
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	f00c f881 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dce:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	33e0      	adds	r3, #224	@ 0xe0
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	2104      	movs	r1, #4
 8001dda:	f00c f878 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 8001dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de0:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8001de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dea:	2204      	movs	r2, #4
 8001dec:	2104      	movs	r1, #4
 8001dee:	f00c f86e 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8001dfe:	2201      	movs	r2, #1
 8001e00:	2104      	movs	r1, #4
 8001e02:	f00c f864 	bl	800dece <arm_mat_init_f32>
}
 8001e06:	bf00      	nop
 8001e08:	3730      	adds	r7, #48	@ 0x30
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	42c80000 	.word	0x42c80000

08001e14 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 8001e50:	4619      	mov	r1, r3
 8001e52:	4610      	mov	r0, r2
 8001e54:	eeb0 3a64 	vmov.f32	s6, s9
 8001e58:	eef0 2a45 	vmov.f32	s5, s10
 8001e5c:	eeb0 2a65 	vmov.f32	s4, s11
 8001e60:	eef0 1a46 	vmov.f32	s3, s12
 8001e64:	eeb0 1a66 	vmov.f32	s2, s13
 8001e68:	eef0 0a47 	vmov.f32	s1, s14
 8001e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e70:	f001 f83c 	bl	8002eec <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e7a:	2240      	movs	r2, #64	@ 0x40
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f00c f9a4 	bl	800e1cc <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001e8a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001ee8 <MotorKalman_DiscretizeModel+0xd4>
 8001e8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001ebe:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001eec <MotorKalman_DiscretizeModel+0xd8>
 8001ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001ed2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001ee8 <MotorKalman_DiscretizeModel+0xd4>
 8001ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	3c23d70a 	.word	0x3c23d70a
 8001eec:	3dcccccd 	.word	0x3dcccccd

08001ef0 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8001f02:	2240      	movs	r2, #64	@ 0x40
 8001f04:	2100      	movs	r1, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f00c f960 	bl	800e1cc <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8001f0c:	edd7 7a00 	vldr	s15, [r7]
 8001f10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001f28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f30:	d107      	bne.n	8001f42 <MotorKalman_SetProcessNoise+0x52>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8001f38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f40:	d002      	beq.n	8001f48 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ff66 	bl	8001e14 <MotorKalman_DiscretizeModel>
    }
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 8001f5c:	ed97 0a00 	vldr	s0, [r7]
 8001f60:	f00c f9fa 	bl	800e358 <sqrtf>
 8001f64:	eef0 7a40 	vmov.f32	s15, s0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b0b2      	sub	sp, #200	@ 0xc8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 8001f92:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001fa6:	e041      	b.n	800202c <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 8001fa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	33c8      	adds	r3, #200	@ 0xc8
 8001fb0:	443b      	add	r3, r7
 8001fb2:	3b3c      	subs	r3, #60	@ 0x3c
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001fc0:	e02b      	b.n	800201a <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 8001fc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	33c8      	adds	r3, #200	@ 0xc8
 8001fca:	443b      	add	r3, r7
 8001fcc:	3b3c      	subs	r3, #60	@ 0x3c
 8001fce:	ed93 7a00 	vldr	s14, [r3]
 8001fd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fd6:	009a      	lsls	r2, r3, #2
 8001fd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fdc:	4413      	add	r3, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	3324      	adds	r3, #36	@ 0x24
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	edd3 6a00 	vldr	s13, [r3]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	33c8      	adds	r3, #200	@ 0xc8
 8002008:	443b      	add	r3, r7
 800200a:	3b3c      	subs	r3, #60	@ 0x3c
 800200c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002010:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002014:	3301      	adds	r3, #1
 8002016:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800201a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800201e:	2b03      	cmp	r3, #3
 8002020:	ddcf      	ble.n	8001fc2 <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002022:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002026:	3301      	adds	r3, #1
 8002028:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800202c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002030:	2b03      	cmp	r3, #3
 8002032:	ddb9      	ble.n	8001fa8 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800203a:	e021      	b.n	8002080 <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 800203c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	33c8      	adds	r3, #200	@ 0xc8
 8002044:	443b      	add	r3, r7
 8002046:	3b3c      	subs	r3, #60	@ 0x3c
 8002048:	ed93 7a00 	vldr	s14, [r3]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002052:	3338      	adds	r3, #56	@ 0x38
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	edd3 6a00 	vldr	s13, [r3]
 800205c:	edd7 7a00 	vldr	s15, [r7]
 8002060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002076:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800207a:	3301      	adds	r3, #1
 800207c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002080:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002084:	2b03      	cmp	r3, #3
 8002086:	ddd9      	ble.n	800203c <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002088:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800208c:	2240      	movs	r2, #64	@ 0x40
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f00c f89b 	bl	800e1cc <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002096:	f107 030c 	add.w	r3, r7, #12
 800209a:	2240      	movs	r2, #64	@ 0x40
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f00c f894 	bl	800e1cc <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020aa:	e05f      	b.n	800216c <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020b2:	e052      	b.n	800215a <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80020b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80020b8:	009a      	lsls	r2, r3, #2
 80020ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	33c8      	adds	r3, #200	@ 0xc8
 80020c4:	443b      	add	r3, r7
 80020c6:	3b7c      	subs	r3, #124	@ 0x7c
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020d4:	e038      	b.n	8002148 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80020d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80020da:	009a      	lsls	r2, r3, #2
 80020dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	33c8      	adds	r3, #200	@ 0xc8
 80020e6:	443b      	add	r3, r7
 80020e8:	3b7c      	subs	r3, #124	@ 0x7c
 80020ea:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 80020ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80020f2:	009a      	lsls	r2, r3, #2
 80020f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80020f8:	4413      	add	r3, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	3324      	adds	r3, #36	@ 0x24
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	edd3 6a00 	vldr	s13, [r3]
 8002106:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800210a:	009a      	lsls	r2, r3, #2
 800210c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002110:	4413      	add	r3, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	3304      	adds	r3, #4
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	edd3 7a00 	vldr	s15, [r3]
 800211e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002126:	009a      	lsls	r2, r3, #2
 8002128:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800212c:	4413      	add	r3, r2
 800212e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	33c8      	adds	r3, #200	@ 0xc8
 8002136:	443b      	add	r3, r7
 8002138:	3b7c      	subs	r3, #124	@ 0x7c
 800213a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800213e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002142:	3301      	adds	r3, #1
 8002144:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002148:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800214c:	2b03      	cmp	r3, #3
 800214e:	ddc2      	ble.n	80020d6 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002150:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002154:	3301      	adds	r3, #1
 8002156:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800215a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800215e:	2b03      	cmp	r3, #3
 8002160:	dda8      	ble.n	80020b4 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002166:	3301      	adds	r3, #1
 8002168:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800216c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002170:	2b03      	cmp	r3, #3
 8002172:	dd9b      	ble.n	80020ac <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800217a:	e05f      	b.n	800223c <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800217c:	2300      	movs	r3, #0
 800217e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002182:	e052      	b.n	800222a <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002184:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002188:	009a      	lsls	r2, r3, #2
 800218a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	33c8      	adds	r3, #200	@ 0xc8
 8002194:	443b      	add	r3, r7
 8002196:	3bbc      	subs	r3, #188	@ 0xbc
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80021a4:	e038      	b.n	8002218 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80021a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021aa:	009a      	lsls	r2, r3, #2
 80021ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	33c8      	adds	r3, #200	@ 0xc8
 80021b6:	443b      	add	r3, r7
 80021b8:	3bbc      	subs	r3, #188	@ 0xbc
 80021ba:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 80021be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021c2:	009a      	lsls	r2, r3, #2
 80021c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	33c8      	adds	r3, #200	@ 0xc8
 80021ce:	443b      	add	r3, r7
 80021d0:	3b7c      	subs	r3, #124	@ 0x7c
 80021d2:	edd3 6a00 	vldr	s13, [r3]
 80021d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021da:	009a      	lsls	r2, r3, #2
 80021dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021e0:	4413      	add	r3, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	3324      	adds	r3, #36	@ 0x24
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	edd3 7a00 	vldr	s15, [r3]
 80021ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80021f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021f6:	009a      	lsls	r2, r3, #2
 80021f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021fc:	4413      	add	r3, r2
 80021fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	33c8      	adds	r3, #200	@ 0xc8
 8002206:	443b      	add	r3, r7
 8002208:	3bbc      	subs	r3, #188	@ 0xbc
 800220a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800220e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002212:	3301      	adds	r3, #1
 8002214:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002218:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800221c:	2b03      	cmp	r3, #3
 800221e:	ddc2      	ble.n	80021a6 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002220:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002224:	3301      	adds	r3, #1
 8002226:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800222a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800222e:	2b03      	cmp	r3, #3
 8002230:	dda8      	ble.n	8002184 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002236:	3301      	adds	r3, #1
 8002238:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800223c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002240:	2b03      	cmp	r3, #3
 8002242:	dd9b      	ble.n	800217c <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800224a:	e037      	b.n	80022bc <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002252:	e02a      	b.n	80022aa <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002254:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002258:	009a      	lsls	r2, r3, #2
 800225a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	33c8      	adds	r3, #200	@ 0xc8
 8002264:	443b      	add	r3, r7
 8002266:	3bbc      	subs	r3, #188	@ 0xbc
 8002268:	ed93 7a00 	vldr	s14, [r3]
 800226c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002270:	009a      	lsls	r2, r3, #2
 8002272:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002276:	4413      	add	r3, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	3354      	adds	r3, #84	@ 0x54
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002284:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002288:	009a      	lsls	r2, r3, #2
 800228a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800228e:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002290:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	3304      	adds	r3, #4
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80022a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022a4:	3301      	adds	r3, #1
 80022a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80022aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	ddd0      	ble.n	8002254 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80022b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022b6:	3301      	adds	r3, #1
 80022b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80022bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	ddc3      	ble.n	800224c <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	2104      	movs	r1, #4
 80022f8:	f00b fde9 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3310      	adds	r3, #16
 8002306:	2204      	movs	r2, #4
 8002308:	2104      	movs	r1, #4
 800230a:	f00b fde0 	bl	800dece <arm_mat_init_f32>
}
 800230e:	bf00      	nop
 8002310:	37c8      	adds	r7, #200	@ 0xc8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b0d0      	sub	sp, #320	@ 0x140
 800231c:	af00      	add	r7, sp, #0
 800231e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002322:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002326:	6018      	str	r0, [r3, #0]
 8002328:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800232c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002330:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002334:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002338:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002342:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 800234c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002350:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 800235a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800235e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800236c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002370:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 800237a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800237e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	edd3 7a01 	vldr	s15, [r3, #4]
 8002388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238c:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002390:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002394:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 800239e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80023a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80023b0:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 80023b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80023b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 80023c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80023c6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80023d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80023d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d8:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 80023dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80023e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023e4:	ed93 7a00 	vldr	s14, [r3]
 80023e8:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 80023ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f0:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 80023f4:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002402:	2300      	movs	r3, #0
 8002404:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002408:	e04d      	b.n	80024a6 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 800240a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002414:	443b      	add	r3, r7
 8002416:	3b58      	subs	r3, #88	@ 0x58
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002424:	e036      	b.n	8002494 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002426:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002430:	443b      	add	r3, r7
 8002432:	3b58      	subs	r3, #88	@ 0x58
 8002434:	ed93 7a00 	vldr	s14, [r3]
 8002438:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800243c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002446:	333c      	adds	r3, #60	@ 0x3c
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	edd3 6a00 	vldr	s13, [r3]
 8002450:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002454:	009a      	lsls	r2, r3, #2
 8002456:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800245a:	4413      	add	r3, r2
 800245c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002460:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	3304      	adds	r3, #4
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	edd3 7a00 	vldr	s15, [r3]
 8002470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002478:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002482:	443b      	add	r3, r7
 8002484:	3b58      	subs	r3, #88	@ 0x58
 8002486:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800248a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800248e:	3301      	adds	r3, #1
 8002490:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002494:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002498:	2b03      	cmp	r3, #3
 800249a:	ddc4      	ble.n	8002426 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800249c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80024a0:	3301      	adds	r3, #1
 80024a2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80024a6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	ddad      	ble.n	800240a <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024b6:	2300      	movs	r3, #0
 80024b8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80024bc:	e021      	b.n	8002502 <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 80024be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80024c8:	443b      	add	r3, r7
 80024ca:	3b58      	subs	r3, #88	@ 0x58
 80024cc:	ed93 7a00 	vldr	s14, [r3]
 80024d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80024d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80024de:	333c      	adds	r3, #60	@ 0x3c
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ec:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 80024f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f4:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80024fc:	3301      	adds	r3, #1
 80024fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002502:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002506:	2b03      	cmp	r3, #3
 8002508:	ddd9      	ble.n	80024be <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 800250a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800250e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002518:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 800251c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002520:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002524:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002532:	2300      	movs	r3, #0
 8002534:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002538:	e04d      	b.n	80025d6 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 800253a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002544:	443b      	add	r3, r7
 8002546:	3b68      	subs	r3, #104	@ 0x68
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002554:	e036      	b.n	80025c4 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 8002556:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002560:	443b      	add	r3, r7
 8002562:	3b68      	subs	r3, #104	@ 0x68
 8002564:	ed93 7a00 	vldr	s14, [r3]
 8002568:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800256c:	009a      	lsls	r2, r3, #2
 800256e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002572:	4413      	add	r3, r2
 8002574:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002578:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	3304      	adds	r3, #4
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	edd3 6a00 	vldr	s13, [r3]
 8002588:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800258c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002596:	333c      	adds	r3, #60	@ 0x3c
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80025b2:	443b      	add	r3, r7
 80025b4:	3b68      	subs	r3, #104	@ 0x68
 80025b6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80025be:	3301      	adds	r3, #1
 80025c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80025c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	ddc4      	ble.n	8002556 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025d0:	3301      	adds	r3, #1
 80025d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80025d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025da:	2b03      	cmp	r3, #3
 80025dc:	ddad      	ble.n	800253a <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 80025de:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80025f2:	e01a      	b.n	800262a <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 80025f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80025fe:	443b      	add	r3, r7
 8002600:	3b68      	subs	r3, #104	@ 0x68
 8002602:	edd3 6a00 	vldr	s13, [r3]
 8002606:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 800260a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002618:	443b      	add	r3, r7
 800261a:	3b78      	subs	r3, #120	@ 0x78
 800261c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002620:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002624:	3301      	adds	r3, #1
 8002626:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800262a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800262e:	2b03      	cmp	r3, #3
 8002630:	dde0      	ble.n	80025f4 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002638:	e029      	b.n	800268e <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 800263a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800263e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	ed93 7a00 	vldr	s14, [r3]
 8002650:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800265a:	443b      	add	r3, r7
 800265c:	3b78      	subs	r3, #120	@ 0x78
 800265e:	edd3 6a00 	vldr	s13, [r3]
 8002662:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800266a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002672:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002684:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002688:	3301      	adds	r3, #1
 800268a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800268e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002692:	2b03      	cmp	r3, #3
 8002694:	ddd1      	ble.n	800263a <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002696:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800269a:	2240      	movs	r2, #64	@ 0x40
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f00b fd94 	bl	800e1cc <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80026a4:	2300      	movs	r3, #0
 80026a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80026aa:	e035      	b.n	8002718 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80026b2:	e028      	b.n	8002706 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 80026b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80026be:	443b      	add	r3, r7
 80026c0:	3b78      	subs	r3, #120	@ 0x78
 80026c2:	ed93 7a00 	vldr	s14, [r3]
 80026c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026ca:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80026d4:	333c      	adds	r3, #60	@ 0x3c
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	edd3 7a00 	vldr	s15, [r3]
 80026de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026e2:	009a      	lsls	r2, r3, #2
 80026e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80026e8:	4413      	add	r3, r2
 80026ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80026f4:	443b      	add	r3, r7
 80026f6:	3bb8      	subs	r3, #184	@ 0xb8
 80026f8:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80026fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002700:	3301      	adds	r3, #1
 8002702:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002706:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800270a:	2b03      	cmp	r3, #3
 800270c:	ddd2      	ble.n	80026b4 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800270e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002712:	3301      	adds	r3, #1
 8002714:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002718:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800271c:	2b03      	cmp	r3, #3
 800271e:	ddc5      	ble.n	80026ac <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002720:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002724:	2240      	movs	r2, #64	@ 0x40
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f00b fd4f 	bl	800e1cc <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800272e:	2300      	movs	r3, #0
 8002730:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002734:	e038      	b.n	80027a8 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800273c:	e02b      	b.n	8002796 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 800273e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002742:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002746:	429a      	cmp	r2, r3
 8002748:	d102      	bne.n	8002750 <MotorKalman_Update+0x438>
 800274a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800274e:	e001      	b.n	8002754 <MotorKalman_Update+0x43c>
 8002750:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 800296c <MotorKalman_Update+0x654>
 8002754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002758:	009a      	lsls	r2, r3, #2
 800275a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002766:	443b      	add	r3, r7
 8002768:	3bb8      	subs	r3, #184	@ 0xb8
 800276a:	edd3 7a00 	vldr	s15, [r3]
 800276e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002772:	009a      	lsls	r2, r3, #2
 8002774:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002778:	4413      	add	r3, r2
 800277a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002784:	443b      	add	r3, r7
 8002786:	3bf8      	subs	r3, #248	@ 0xf8
 8002788:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800278c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002790:	3301      	adds	r3, #1
 8002792:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002796:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800279a:	2b03      	cmp	r3, #3
 800279c:	ddcf      	ble.n	800273e <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800279e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027a2:	3301      	adds	r3, #1
 80027a4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80027a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	ddc2      	ble.n	8002736 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 80027b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f103 0110 	add.w	r1, r3, #16
 80027be:	f107 0308 	add.w	r3, r7, #8
 80027c2:	2240      	movs	r2, #64	@ 0x40
 80027c4:	4618      	mov	r0, r3
 80027c6:	f00b fd45 	bl	800e254 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80027ca:	2300      	movs	r3, #0
 80027cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80027d0:	e06e      	b.n	80028b0 <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80027d8:	e061      	b.n	800289e <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80027da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80027de:	009a      	lsls	r2, r3, #2
 80027e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80027e4:	4413      	add	r3, r2
 80027e6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80027ea:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	3304      	adds	r3, #4
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002802:	e043      	b.n	800288c <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002808:	009a      	lsls	r2, r3, #2
 800280a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800280e:	4413      	add	r3, r2
 8002810:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002814:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	3304      	adds	r3, #4
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002828:	009a      	lsls	r2, r3, #2
 800282a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002836:	443b      	add	r3, r7
 8002838:	3bf8      	subs	r3, #248	@ 0xf8
 800283a:	edd3 6a00 	vldr	s13, [r3]
 800283e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002842:	009a      	lsls	r2, r3, #2
 8002844:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002848:	4413      	add	r3, r2
 800284a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800284e:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	edd3 7a00 	vldr	s15, [r3]
 800285a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800285e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002862:	009a      	lsls	r2, r3, #2
 8002864:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002868:	4413      	add	r3, r2
 800286a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002872:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	3304      	adds	r3, #4
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002886:	3301      	adds	r3, #1
 8002888:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800288c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002890:	2b03      	cmp	r3, #3
 8002892:	ddb7      	ble.n	8002804 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002894:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002898:	3301      	adds	r3, #1
 800289a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800289e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	dd99      	ble.n	80027da <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80028a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80028aa:	3301      	adds	r3, #1
 80028ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80028b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	dd8c      	ble.n	80027d2 <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 80028b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 80028d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028d6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028e2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 80028ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028f0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002906:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800290a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002916:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002920:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002924:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 800292e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002932:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2201      	movs	r2, #1
 800293a:	2104      	movs	r1, #4
 800293c:	f00b fac7 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002940:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002944:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800294e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002952:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3310      	adds	r3, #16
 800295a:	2204      	movs	r2, #4
 800295c:	2104      	movs	r1, #4
 800295e:	f00b fab6 	bl	800dece <arm_mat_init_f32>
}
 8002962:	bf00      	nop
 8002964:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	00000000 	.word	0x00000000

08002970 <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	ed87 0a02 	vstr	s0, [r7, #8]
 800297c:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8002980:	ed97 0a02 	vldr	s0, [r7, #8]
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f7ff fafa 	bl	8001f7e <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 800298a:	ed97 0a01 	vldr	s0, [r7, #4]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f7ff fcc2 	bl	8002318 <MotorKalman_Update>

    return filter->velocity;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 800299a:	ee07 3a90 	vmov	s15, r3
}
 800299e:	eeb0 0a67 	vmov.f32	s0, s15
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	e00c      	b.n	80029d4 <matrix_copy+0x2c>
        dst[i] = src[i];
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	441a      	add	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	440b      	add	r3, r1
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	3301      	adds	r3, #1
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	dbee      	blt.n	80029ba <matrix_copy+0x12>
    }
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 80029f8:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 80029fc:	6020      	str	r0, [r4, #0]
 80029fe:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002a02:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8002a06:	6001      	str	r1, [r0, #0]
 8002a08:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002a0c:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002a10:	ed81 0a00 	vstr	s0, [r1]
 8002a14:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002a18:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002a1c:	600a      	str	r2, [r1, #0]
 8002a1e:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002a22:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8002a26:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002a28:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002a2c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002a30:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2204      	movs	r2, #4
 8002a38:	2104      	movs	r1, #4
 8002a3a:	f00b fa48 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002a3e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002a42:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002a46:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	2104      	movs	r1, #4
 8002a50:	f00b fa3d 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002a54:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002a58:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002a5c:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2201      	movs	r2, #1
 8002a64:	2104      	movs	r1, #4
 8002a66:	f00b fa32 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002a6a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002a6e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002a72:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	2104      	movs	r1, #4
 8002a7c:	f00b fa27 	bl	800dece <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002a80:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002a84:	2240      	movs	r2, #64	@ 0x40
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f00b fb9f 	bl	800e1cc <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002a8e:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002a92:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8002a96:	2204      	movs	r2, #4
 8002a98:	2104      	movs	r1, #4
 8002a9a:	f00b fa18 	bl	800dece <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002aa4:	e011      	b.n	8002aca <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8002aa6:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8002ab6:	443b      	add	r3, r7
 8002ab8:	3b6c      	subs	r3, #108	@ 0x6c
 8002aba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002abe:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8002ac0:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002aca:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	dde9      	ble.n	8002aa6 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8002ad2:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002ad6:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8002ada:	2204      	movs	r2, #4
 8002adc:	2104      	movs	r1, #4
 8002ade:	f00b f9f6 	bl	800dece <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002ae2:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002ae6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002aea:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002aee:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002af2:	ed93 0a00 	vldr	s0, [r3]
 8002af6:	4610      	mov	r0, r2
 8002af8:	f00b fa7b 	bl	800dff2 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002afc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002b00:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002b04:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002b08:	2210      	movs	r2, #16
 8002b0a:	6819      	ldr	r1, [r3, #0]
 8002b0c:	f7ff ff4c 	bl	80029a8 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002b10:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002b14:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002b18:	2204      	movs	r2, #4
 8002b1a:	2104      	movs	r1, #4
 8002b1c:	f00b f9d7 	bl	800dece <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002b20:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002b24:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002b28:	2204      	movs	r2, #4
 8002b2a:	2104      	movs	r1, #4
 8002b2c:	f00b f9cf 	bl	800dece <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002b30:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002b34:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002b38:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f00b f98b 	bl	800de58 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002b42:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002b46:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002b4a:	2210      	movs	r2, #16
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff2b 	bl	80029a8 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002b52:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002b56:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002b60:	e03a      	b.n	8002bd8 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002b62:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002b66:	ee07 3a90 	vmov	s15, r3
 8002b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b6e:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8002b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b76:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8002b7a:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002b7e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002b82:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002b86:	4618      	mov	r0, r3
 8002b88:	f00b f9b9 	bl	800defe <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8002b8c:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002b90:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002b94:	2210      	movs	r2, #16
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff ff06 	bl	80029a8 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8002b9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ba0:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8002ba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ba8:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002bac:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f00b fa1b 	bl	800dff2 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8002bbc:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002bc0:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8002bc4:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f00b f945 	bl	800de58 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002bce:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002bd8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002bdc:	2b0a      	cmp	r3, #10
 8002bde:	ddc0      	ble.n	8002b62 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8002be0:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8002be4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002be8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002bec:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8002bf0:	ed93 0a00 	vldr	s0, [r3]
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	f00b f9fc 	bl	800dff2 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8002bfa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002bfe:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002c02:	461a      	mov	r2, r3
 8002c04:	2300      	movs	r3, #0
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	6053      	str	r3, [r2, #4]
 8002c0a:	6093      	str	r3, [r2, #8]
 8002c0c:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8002c0e:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8002c12:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8002c16:	2201      	movs	r2, #1
 8002c18:	2104      	movs	r1, #4
 8002c1a:	f00b f958 	bl	800dece <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8002c1e:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8002c22:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002c26:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f00b f967 	bl	800defe <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8002c30:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002c34:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8002c38:	2201      	movs	r2, #1
 8002c3a:	2104      	movs	r1, #4
 8002c3c:	f00b f947 	bl	800dece <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8002c40:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002c44:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002c48:	edd3 7a00 	vldr	s15, [r3]
 8002c4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c50:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002c54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c58:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002c5c:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002c60:	4611      	mov	r1, r2
 8002c62:	eeb0 0a47 	vmov.f32	s0, s14
 8002c66:	4618      	mov	r0, r3
 8002c68:	f00b f9c3 	bl	800dff2 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002c6c:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002c70:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002c74:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f00b f8ed 	bl	800de58 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8002c7e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002c82:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c86:	4618      	mov	r0, r3
 8002c88:	2340      	movs	r3, #64	@ 0x40
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	f00b fa9d 	bl	800e1cc <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8002c92:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002c96:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8002c9a:	2204      	movs	r2, #4
 8002c9c:	2104      	movs	r1, #4
 8002c9e:	f00b f916 	bl	800dece <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8002ca2:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8002ca6:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002caa:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f00b f925 	bl	800defe <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8002cb4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002cb8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	6053      	str	r3, [r2, #4]
 8002cc4:	6093      	str	r3, [r2, #8]
 8002cc6:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8002cc8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002ccc:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	2104      	movs	r1, #4
 8002cd4:	f00b f8fb 	bl	800dece <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8002cd8:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8002cdc:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002ce0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f00b f90a 	bl	800defe <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 8002cea:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002cee:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002cf2:	edd3 7a00 	vldr	s15, [r3]
 8002cf6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002cfa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002cfe:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002d02:	edd3 7a00 	vldr	s15, [r3]
 8002d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0a:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8002d0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d12:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002d16:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	eeb0 0a47 	vmov.f32	s0, s14
 8002d20:	4618      	mov	r0, r3
 8002d22:	f00b f966 	bl	800dff2 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002d26:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002d2a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002d2e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002d32:	4618      	mov	r0, r3
 8002d34:	f00b f890 	bl	800de58 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8002d38:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002d3c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d40:	4618      	mov	r0, r3
 8002d42:	2340      	movs	r3, #64	@ 0x40
 8002d44:	461a      	mov	r2, r3
 8002d46:	2100      	movs	r1, #0
 8002d48:	f00b fa40 	bl	800e1cc <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 8002d4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d50:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8002d54:	2204      	movs	r2, #4
 8002d56:	2104      	movs	r1, #4
 8002d58:	f00b f8b9 	bl	800dece <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 8002d5c:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8002d60:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002d64:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f00b f8c8 	bl	800defe <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 8002d6e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002d72:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8002d76:	461a      	mov	r2, r3
 8002d78:	2300      	movs	r3, #0
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	6053      	str	r3, [r2, #4]
 8002d7e:	6093      	str	r3, [r2, #8]
 8002d80:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 8002d82:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002d86:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	2104      	movs	r1, #4
 8002d8e:	f00b f89e 	bl	800dece <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 8002d92:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8002d96:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002d9a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f00b f8ad 	bl	800defe <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8002da4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002da8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002dac:	edd3 7a00 	vldr	s15, [r3]
 8002db0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002db4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002db8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002dbc:	edd3 7a00 	vldr	s15, [r3]
 8002dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dc4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dc8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd4:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8002dd8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ddc:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002de0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002de4:	4611      	mov	r1, r2
 8002de6:	eeb0 0a47 	vmov.f32	s0, s14
 8002dea:	4618      	mov	r0, r3
 8002dec:	f00b f901 	bl	800dff2 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002df0:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002df4:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002df8:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f00b f82b 	bl	800de58 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 8002e02:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e06:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	2340      	movs	r3, #64	@ 0x40
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2100      	movs	r1, #0
 8002e12:	f00b f9db 	bl	800e1cc <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 8002e16:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002e1a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002e1e:	2204      	movs	r2, #4
 8002e20:	2104      	movs	r1, #4
 8002e22:	f00b f854 	bl	800dece <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 8002e26:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002e2a:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002e2e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002e32:	4618      	mov	r0, r3
 8002e34:	f00b f863 	bl	800defe <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8002e38:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e3c:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8002e40:	461a      	mov	r2, r3
 8002e42:	2300      	movs	r3, #0
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	6053      	str	r3, [r2, #4]
 8002e48:	6093      	str	r3, [r2, #8]
 8002e4a:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 8002e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e50:	f107 001c 	add.w	r0, r7, #28
 8002e54:	2201      	movs	r2, #1
 8002e56:	2104      	movs	r1, #4
 8002e58:	f00b f839 	bl	800dece <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 8002e5c:	f107 021c 	add.w	r2, r7, #28
 8002e60:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002e64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f00b f848 	bl	800defe <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 8002e6e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e72:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002e76:	edd3 7a00 	vldr	s15, [r3]
 8002e7a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002e7e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e82:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002e86:	edd3 7a00 	vldr	s15, [r3]
 8002e8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e8e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e92:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002e96:	edd3 7a00 	vldr	s15, [r3]
 8002e9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e9e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002ea2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002ea6:	edd3 7a00 	vldr	s15, [r3]
 8002eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eae:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002ee8 <discretize_system_with_arm+0x4fc>
 8002eb2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002eb6:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002eba:	f107 031c 	add.w	r3, r7, #28
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f00b f894 	bl	800dff2 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002eca:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002ece:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002ed2:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f00a ffbe 	bl	800de58 <arm_mat_add_f32>
}
 8002edc:	bf00      	nop
 8002ede:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd90      	pop	{r4, r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	42f00000 	.word	0x42f00000

08002eec <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b09e      	sub	sp, #120	@ 0x78
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8002ef6:	edc7 0a08 	vstr	s1, [r7, #32]
 8002efa:	ed87 1a07 	vstr	s2, [r7, #28]
 8002efe:	edc7 1a06 	vstr	s3, [r7, #24]
 8002f02:	ed87 2a05 	vstr	s4, [r7, #20]
 8002f06:	edc7 2a04 	vstr	s5, [r7, #16]
 8002f0a:	ed87 3a03 	vstr	s6, [r7, #12]
 8002f0e:	60b8      	str	r0, [r7, #8]
 8002f10:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 8002f12:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f16:	2240      	movs	r2, #64	@ 0x40
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f00b f956 	bl	800e1cc <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 8002f20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 8002f2e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002f32:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8002f34:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f38:	eef1 6a67 	vneg.f32	s13, s15
 8002f3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f44:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8002f48:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8002f4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f54:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 8002f58:	edd7 6a04 	vldr	s13, [r7, #16]
 8002f5c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f64:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 8002f68:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f6c:	eef1 6a67 	vneg.f32	s13, s15
 8002f70:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f78:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8002f7c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f80:	eef1 6a67 	vneg.f32	s13, s15
 8002f84:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f8c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8002f90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f94:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f9c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8002fa0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002fa4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	ed97 0a03 	vldr	s0, [r7, #12]
 8002fb0:	f7ff fd1c 	bl	80029ec <discretize_system_with_arm>
}
 8002fb4:	bf00      	nop
 8002fb6:	3778      	adds	r7, #120	@ 0x78
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8002ffc <PWM_init+0x40>)
 8002fce:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	88fa      	ldrh	r2, [r7, #6]
 8002fda:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8002fe2:	68b8      	ldr	r0, [r7, #8]
 8002fe4:	f007 f88e 	bl	800a104 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	4619      	mov	r1, r3
 8002fec:	68b8      	ldr	r0, [r7, #8]
 8002fee:	f007 f9d5 	bl	800a39c <HAL_TIM_PWM_Start>
}
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	0a21fe80 	.word	0x0a21fe80

08003000 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8003000:	b5b0      	push	{r4, r5, r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	ed87 0a02 	vstr	s0, [r7, #8]
 800300c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003010:	edd7 7a02 	vldr	s15, [r7, #8]
 8003014:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301c:	d137      	bne.n	800308e <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	889b      	ldrh	r3, [r3, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d105      	bne.n	8003032 <PWM_write_duty+0x32>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2200      	movs	r2, #0
 800302e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003030:	e0e1      	b.n	80031f6 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	889b      	ldrh	r3, [r3, #4]
 8003036:	2b04      	cmp	r3, #4
 8003038:	d105      	bne.n	8003046 <PWM_write_duty+0x46>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	2300      	movs	r3, #0
 8003042:	6393      	str	r3, [r2, #56]	@ 0x38
 8003044:	e0d7      	b.n	80031f6 <PWM_write_duty+0x1f6>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	889b      	ldrh	r3, [r3, #4]
 800304a:	2b08      	cmp	r3, #8
 800304c:	d105      	bne.n	800305a <PWM_write_duty+0x5a>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	2300      	movs	r3, #0
 8003056:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003058:	e0cd      	b.n	80031f6 <PWM_write_duty+0x1f6>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	889b      	ldrh	r3, [r3, #4]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d105      	bne.n	800306e <PWM_write_duty+0x6e>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	2300      	movs	r3, #0
 800306a:	6413      	str	r3, [r2, #64]	@ 0x40
 800306c:	e0c3      	b.n	80031f6 <PWM_write_duty+0x1f6>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	889b      	ldrh	r3, [r3, #4]
 8003072:	2b10      	cmp	r3, #16
 8003074:	d105      	bne.n	8003082 <PWM_write_duty+0x82>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	2300      	movs	r3, #0
 800307e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003080:	e0b9      	b.n	80031f6 <PWM_write_duty+0x1f6>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	2300      	movs	r3, #0
 800308a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800308c:	e0b3      	b.n	80031f6 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800309a:	ed97 7a02 	vldr	s14, [r7, #8]
 800309e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030a6:	ee17 2a90 	vmov	r2, s15
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80030b6:	33fe      	adds	r3, #254	@ 0xfe
 80030b8:	4a51      	ldr	r2, [pc, #324]	@ (8003200 <PWM_write_duty+0x200>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	0bdb      	lsrs	r3, r3, #15
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	ee07 3a90 	vmov	s15, r3
 80030d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	899b      	ldrh	r3, [r3, #12]
 80030da:	3301      	adds	r3, #1
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80030e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80030ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80030f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030fc:	ee17 3a90 	vmov	r3, s15
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	89db      	ldrh	r3, [r3, #14]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd f9d6 	bl	80004bc <__aeabi_i2d>
 8003110:	4604      	mov	r4, r0
 8003112:	460d      	mov	r5, r1
 8003114:	edd7 7a01 	vldr	s15, [r7, #4]
 8003118:	eef0 7ae7 	vabs.f32	s15, s15
 800311c:	ee17 0a90 	vmov	r0, s15
 8003120:	f7fd f9de 	bl	80004e0 <__aeabi_f2d>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4620      	mov	r0, r4
 800312a:	4629      	mov	r1, r5
 800312c:	f7fd fa30 	bl	8000590 <__aeabi_dmul>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	4b31      	ldr	r3, [pc, #196]	@ (8003204 <PWM_write_duty+0x204>)
 800313e:	f7fd fb51 	bl	80007e4 <__aeabi_ddiv>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4610      	mov	r0, r2
 8003148:	4619      	mov	r1, r3
 800314a:	f7fd fce3 	bl	8000b14 <__aeabi_d2uiz>
 800314e:	4603      	mov	r3, r0
 8003150:	b29b      	uxth	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	899a      	ldrh	r2, [r3, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	89da      	ldrh	r2, [r3, #14]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	89da      	ldrh	r2, [r3, #14]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	889b      	ldrh	r3, [r3, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <PWM_write_duty+0x190>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	6952      	ldr	r2, [r2, #20]
 800318c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800318e:	e032      	b.n	80031f6 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	889b      	ldrh	r3, [r3, #4]
 8003194:	2b04      	cmp	r3, #4
 8003196:	d106      	bne.n	80031a6 <PWM_write_duty+0x1a6>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80031a4:	e027      	b.n	80031f6 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	889b      	ldrh	r3, [r3, #4]
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d106      	bne.n	80031bc <PWM_write_duty+0x1bc>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80031ba:	e01c      	b.n	80031f6 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	889b      	ldrh	r3, [r3, #4]
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	d106      	bne.n	80031d2 <PWM_write_duty+0x1d2>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80031d0:	e011      	b.n	80031f6 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	889b      	ldrh	r3, [r3, #4]
 80031d6:	2b10      	cmp	r3, #16
 80031d8:	d106      	bne.n	80031e8 <PWM_write_duty+0x1e8>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80031e6:	e006      	b.n	80031f6 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80031f4:	e7ff      	b.n	80031f6 <PWM_write_duty+0x1f6>
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bdb0      	pop	{r4, r5, r7, pc}
 80031fe:	bf00      	nop
 8003200:	80008001 	.word	0x80008001
 8003204:	40590000 	.word	0x40590000

08003208 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003208:	b5b0      	push	{r4, r5, r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	ed87 0a02 	vstr	s0, [r7, #8]
 8003214:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003218:	edd7 7a02 	vldr	s15, [r7, #8]
 800321c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003224:	d137      	bne.n	8003296 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	889b      	ldrh	r3, [r3, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <PWM_write_range+0x32>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2200      	movs	r2, #0
 8003236:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003238:	e0e1      	b.n	80033fe <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	889b      	ldrh	r3, [r3, #4]
 800323e:	2b04      	cmp	r3, #4
 8003240:	d105      	bne.n	800324e <PWM_write_range+0x46>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	2300      	movs	r3, #0
 800324a:	6393      	str	r3, [r2, #56]	@ 0x38
 800324c:	e0d7      	b.n	80033fe <PWM_write_range+0x1f6>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	889b      	ldrh	r3, [r3, #4]
 8003252:	2b08      	cmp	r3, #8
 8003254:	d105      	bne.n	8003262 <PWM_write_range+0x5a>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2300      	movs	r3, #0
 800325e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003260:	e0cd      	b.n	80033fe <PWM_write_range+0x1f6>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	889b      	ldrh	r3, [r3, #4]
 8003266:	2b0c      	cmp	r3, #12
 8003268:	d105      	bne.n	8003276 <PWM_write_range+0x6e>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2300      	movs	r3, #0
 8003272:	6413      	str	r3, [r2, #64]	@ 0x40
 8003274:	e0c3      	b.n	80033fe <PWM_write_range+0x1f6>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	889b      	ldrh	r3, [r3, #4]
 800327a:	2b10      	cmp	r3, #16
 800327c:	d105      	bne.n	800328a <PWM_write_range+0x82>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	2300      	movs	r3, #0
 8003286:	6493      	str	r3, [r2, #72]	@ 0x48
 8003288:	e0b9      	b.n	80033fe <PWM_write_range+0x1f6>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	2300      	movs	r3, #0
 8003292:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003294:	e0b3      	b.n	80033fe <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80032a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ae:	ee17 2a90 	vmov	r2, s15
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80032be:	33fe      	adds	r3, #254	@ 0xfe
 80032c0:	4a53      	ldr	r2, [pc, #332]	@ (8003410 <PWM_write_range+0x208>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	0bdb      	lsrs	r3, r3, #15
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	899b      	ldrh	r3, [r3, #12]
 80032e2:	3301      	adds	r3, #1
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80032f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003304:	ee17 3a90 	vmov	r3, s15
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	89db      	ldrh	r3, [r3, #14]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd f8d2 	bl	80004bc <__aeabi_i2d>
 8003318:	4604      	mov	r4, r0
 800331a:	460d      	mov	r5, r1
 800331c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003320:	eef0 7ae7 	vabs.f32	s15, s15
 8003324:	ee17 0a90 	vmov	r0, s15
 8003328:	f7fd f8da 	bl	80004e0 <__aeabi_f2d>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4620      	mov	r0, r4
 8003332:	4629      	mov	r1, r5
 8003334:	f7fd f92c 	bl	8000590 <__aeabi_dmul>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4610      	mov	r0, r2
 800333e:	4619      	mov	r1, r3
 8003340:	a331      	add	r3, pc, #196	@ (adr r3, 8003408 <PWM_write_range+0x200>)
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	f7fd fa4d 	bl	80007e4 <__aeabi_ddiv>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4610      	mov	r0, r2
 8003350:	4619      	mov	r1, r3
 8003352:	f7fd fbdf 	bl	8000b14 <__aeabi_d2uiz>
 8003356:	4603      	mov	r3, r0
 8003358:	b29b      	uxth	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	899a      	ldrh	r2, [r3, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	89da      	ldrh	r2, [r3, #14]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	89da      	ldrh	r2, [r3, #14]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	889b      	ldrh	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <PWM_write_range+0x190>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	6952      	ldr	r2, [r2, #20]
 8003394:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003396:	e032      	b.n	80033fe <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	889b      	ldrh	r3, [r3, #4]
 800339c:	2b04      	cmp	r3, #4
 800339e:	d106      	bne.n	80033ae <PWM_write_range+0x1a6>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80033ac:	e027      	b.n	80033fe <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	889b      	ldrh	r3, [r3, #4]
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d106      	bne.n	80033c4 <PWM_write_range+0x1bc>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80033c2:	e01c      	b.n	80033fe <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	889b      	ldrh	r3, [r3, #4]
 80033c8:	2b0c      	cmp	r3, #12
 80033ca:	d106      	bne.n	80033da <PWM_write_range+0x1d2>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80033d8:	e011      	b.n	80033fe <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	889b      	ldrh	r3, [r3, #4]
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d106      	bne.n	80033f0 <PWM_write_range+0x1e8>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80033ee:	e006      	b.n	80033fe <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80033fc:	e7ff      	b.n	80033fe <PWM_write_range+0x1f6>
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bdb0      	pop	{r4, r5, r7, pc}
 8003406:	bf00      	nop
 8003408:	00000000 	.word	0x00000000
 800340c:	40efffe0 	.word	0x40efffe0
 8003410:	80008001 	.word	0x80008001

08003414 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6178      	str	r0, [r7, #20]
 800341c:	6139      	str	r1, [r7, #16]
 800341e:	60fa      	str	r2, [r7, #12]
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	ed87 0a01 	vstr	s0, [r7, #4]
 8003426:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2200      	movs	r2, #0
 8003452:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8003474:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	fb93 f2f2 	sdiv	r2, r3, r2
 800347e:	68f9      	ldr	r1, [r7, #12]
 8003480:	fb01 f202 	mul.w	r2, r1, r2
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2200      	movs	r2, #0
 8003492:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2200      	movs	r2, #0
 8003498:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 80034e2:	213c      	movs	r1, #60	@ 0x3c
 80034e4:	6938      	ldr	r0, [r7, #16]
 80034e6:	f007 fa15 	bl	800a914 <HAL_TIM_Encoder_Start>
}
 80034ea:	bf00      	nop
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	0000      	movs	r0, r0
 80034f4:	0000      	movs	r0, r0
	...

080034f8 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 80034f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	0fda      	lsrs	r2, r3, #31
 8003520:	4413      	add	r3, r2
 8003522:	105b      	asrs	r3, r3, #1
 8003524:	461a      	mov	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4293      	cmp	r3, r2
 800352a:	dd05      	ble.n	8003538 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	e00e      	b.n	8003556 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	0fda      	lsrs	r2, r3, #31
 800353e:	4413      	add	r3, r2
 8003540:	105b      	asrs	r3, r3, #1
 8003542:	425b      	negs	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4293      	cmp	r3, r2
 800354a:	da04      	bge.n	8003556 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	441a      	add	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	ee07 3a90 	vmov	s15, r3
 8003578:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	ee07 3a90 	vmov	s15, r3
 8003584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003588:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003592:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fc ff9b 	bl	80004e0 <__aeabi_f2d>
 80035aa:	4604      	mov	r4, r0
 80035ac:	460d      	mov	r5, r1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b2:	ee07 3a90 	vmov	s15, r3
 80035b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035ce:	ee17 0a90 	vmov	r0, s15
 80035d2:	f7fc ff85 	bl	80004e0 <__aeabi_f2d>
 80035d6:	a33c      	add	r3, pc, #240	@ (adr r3, 80036c8 <QEI_get_diff_count+0x1d0>)
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	f7fc ffd8 	bl	8000590 <__aeabi_dmul>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4690      	mov	r8, r2
 80035e6:	4699      	mov	r9, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fc ff77 	bl	80004e0 <__aeabi_f2d>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4640      	mov	r0, r8
 80035f8:	4649      	mov	r1, r9
 80035fa:	f7fc ffc9 	bl	8000590 <__aeabi_dmul>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4620      	mov	r0, r4
 8003604:	4629      	mov	r1, r5
 8003606:	f7fc fe0d 	bl	8000224 <__adddf3>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4610      	mov	r0, r2
 8003610:	4619      	mov	r1, r3
 8003612:	f7fd fa9f 	bl	8000b54 <__aeabi_d2f>
 8003616:	4602      	mov	r2, r0
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003620:	4618      	mov	r0, r3
 8003622:	f7fc ff5d 	bl	80004e0 <__aeabi_f2d>
 8003626:	4604      	mov	r4, r0
 8003628:	460d      	mov	r5, r1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	ee07 3a90 	vmov	s15, r3
 8003632:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	ee07 3a90 	vmov	s15, r3
 800363e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003642:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003646:	ee16 0a90 	vmov	r0, s13
 800364a:	f7fc ff49 	bl	80004e0 <__aeabi_f2d>
 800364e:	a31e      	add	r3, pc, #120	@ (adr r3, 80036c8 <QEI_get_diff_count+0x1d0>)
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	f7fc ff9c 	bl	8000590 <__aeabi_dmul>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4690      	mov	r8, r2
 800365e:	4699      	mov	r9, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003664:	4618      	mov	r0, r3
 8003666:	f7fc ff3b 	bl	80004e0 <__aeabi_f2d>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4640      	mov	r0, r8
 8003670:	4649      	mov	r1, r9
 8003672:	f7fc ff8d 	bl	8000590 <__aeabi_dmul>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4690      	mov	r8, r2
 800367c:	4699      	mov	r9, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003682:	4618      	mov	r0, r3
 8003684:	f7fc ff2c 	bl	80004e0 <__aeabi_f2d>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4640      	mov	r0, r8
 800368e:	4649      	mov	r1, r9
 8003690:	f7fc ff7e 	bl	8000590 <__aeabi_dmul>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4620      	mov	r0, r4
 800369a:	4629      	mov	r1, r5
 800369c:	f7fc fdc2 	bl	8000224 <__adddf3>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4610      	mov	r0, r2
 80036a6:	4619      	mov	r1, r3
 80036a8:	f7fd fa54 	bl	8000b54 <__aeabi_d2f>
 80036ac:	4602      	mov	r2, r0
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	605a      	str	r2, [r3, #4]
}
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036c4:	f3af 8000 	nop.w
 80036c8:	54442d18 	.word	0x54442d18
 80036cc:	400921fb 	.word	0x400921fb

080036d0 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 80036d0:	b5b0      	push	{r4, r5, r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80036e0:	fb02 f303 	mul.w	r3, r2, r3
 80036e4:	ee07 3a90 	vmov	s15, r3
 80036e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fc fef2 	bl	80004e0 <__aeabi_f2d>
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	4b83      	ldr	r3, [pc, #524]	@ (8003910 <QEI_compute_data+0x240>)
 8003702:	f7fc ff45 	bl	8000590 <__aeabi_dmul>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4614      	mov	r4, r2
 800370c:	461d      	mov	r5, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800371a:	ee17 0a90 	vmov	r0, s15
 800371e:	f7fc fedf 	bl	80004e0 <__aeabi_f2d>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4620      	mov	r0, r4
 8003728:	4629      	mov	r1, r5
 800372a:	f7fd f85b 	bl	80007e4 <__aeabi_ddiv>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4614      	mov	r4, r2
 8003734:	461d      	mov	r5, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc fed0 	bl	80004e0 <__aeabi_f2d>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4620      	mov	r0, r4
 8003746:	4629      	mov	r1, r5
 8003748:	f7fc ff22 	bl	8000590 <__aeabi_dmul>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	f7fd f9fe 	bl	8000b54 <__aeabi_d2f>
 8003758:	4602      	mov	r2, r0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003764:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003768:	ee17 0a90 	vmov	r0, s15
 800376c:	f7fc feb8 	bl	80004e0 <__aeabi_f2d>
 8003770:	a365      	add	r3, pc, #404	@ (adr r3, 8003908 <QEI_compute_data+0x238>)
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	f7fc ff0b 	bl	8000590 <__aeabi_dmul>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4614      	mov	r4, r2
 8003780:	461d      	mov	r5, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	ee07 3a90 	vmov	s15, r3
 800378a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800378e:	ee17 0a90 	vmov	r0, s15
 8003792:	f7fc fea5 	bl	80004e0 <__aeabi_f2d>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4620      	mov	r0, r4
 800379c:	4629      	mov	r1, r5
 800379e:	f7fd f821 	bl	80007e4 <__aeabi_ddiv>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4614      	mov	r4, r2
 80037a8:	461d      	mov	r5, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fc fe96 	bl	80004e0 <__aeabi_f2d>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4620      	mov	r0, r4
 80037ba:	4629      	mov	r1, r5
 80037bc:	f7fc fee8 	bl	8000590 <__aeabi_dmul>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4610      	mov	r0, r2
 80037c6:	4619      	mov	r1, r3
 80037c8:	f7fd f9c4 	bl	8000b54 <__aeabi_d2f>
 80037cc:	4602      	mov	r2, r0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fc fe82 	bl	80004e0 <__aeabi_f2d>
 80037dc:	a34a      	add	r3, pc, #296	@ (adr r3, 8003908 <QEI_compute_data+0x238>)
 80037de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e2:	f7fc fed5 	bl	8000590 <__aeabi_dmul>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4614      	mov	r4, r2
 80037ec:	461d      	mov	r5, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fc fe74 	bl	80004e0 <__aeabi_f2d>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4620      	mov	r0, r4
 80037fe:	4629      	mov	r1, r5
 8003800:	f7fc fec6 	bl	8000590 <__aeabi_dmul>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4614      	mov	r4, r2
 800380a:	461d      	mov	r5, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	ee07 3a90 	vmov	s15, r3
 8003814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003818:	ee17 0a90 	vmov	r0, s15
 800381c:	f7fc fe60 	bl	80004e0 <__aeabi_f2d>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4620      	mov	r0, r4
 8003826:	4629      	mov	r1, r5
 8003828:	f7fc ffdc 	bl	80007e4 <__aeabi_ddiv>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4614      	mov	r4, r2
 8003832:	461d      	mov	r5, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003838:	4618      	mov	r0, r3
 800383a:	f7fc fe51 	bl	80004e0 <__aeabi_f2d>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4620      	mov	r0, r4
 8003844:	4629      	mov	r1, r5
 8003846:	f7fc fea3 	bl	8000590 <__aeabi_dmul>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4610      	mov	r0, r2
 8003850:	4619      	mov	r1, r3
 8003852:	f7fd f97f 	bl	8000b54 <__aeabi_d2f>
 8003856:	4602      	mov	r2, r0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	edd3 7a03 	vldr	s15, [r3, #12]
 8003878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800387c:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8003880:	edd7 7a03 	vldr	s15, [r7, #12]
 8003884:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800388c:	d00a      	beq.n	80038a4 <QEI_compute_data+0x1d4>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800389a:	edd7 7a03 	vldr	s15, [r7, #12]
 800389e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a2:	e001      	b.n	80038a8 <QEI_compute_data+0x1d8>
 80038a4:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003914 <QEI_compute_data+0x244>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	ed93 7a04 	vldr	s14, [r3, #16]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80038ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038be:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 80038c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80038c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ce:	d00a      	beq.n	80038e6 <QEI_compute_data+0x216>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d4:	ee07 3a90 	vmov	s15, r3
 80038d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80038e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e4:	e001      	b.n	80038ea <QEI_compute_data+0x21a>
 80038e6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8003914 <QEI_compute_data+0x244>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	615a      	str	r2, [r3, #20]
}
 8003900:	bf00      	nop
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bdb0      	pop	{r4, r5, r7, pc}
 8003908:	54442d18 	.word	0x54442d18
 800390c:	400921fb 	.word	0x400921fb
 8003910:	404e0000 	.word	0x404e0000
 8003914:	00000000 	.word	0x00000000

08003918 <QEI_reset>:

void QEI_reset(QEI *qei) {
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
    // Reset all position and velocity values
    qei->pps = 0;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->rpm = 0;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = 0;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->pulses = 0;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->mmps = 0;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->radpss = 0;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	651a      	str	r2, [r3, #80]	@ 0x50

    // Reset velocity history
    qei->r[NOW] = 0;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	615a      	str	r2, [r3, #20]
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 800399a:	b580      	push	{r7, lr}
 800399c:	b08e      	sub	sp, #56	@ 0x38
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6178      	str	r0, [r7, #20]
 80039a2:	ed87 0a04 	vstr	s0, [r7, #16]
 80039a6:	edc7 0a03 	vstr	s1, [r7, #12]
 80039aa:	ed87 1a02 	vstr	s2, [r7, #8]
 80039ae:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2200      	movs	r2, #0
 80039b6:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 80039d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80039dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80039e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039e4:	eef0 7ae7 	vabs.f32	s15, s15
 80039e8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 80039ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80039f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80039f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a00:	d503      	bpl.n	8003a0a <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	22ff      	movs	r2, #255	@ 0xff
 8003a06:	741a      	strb	r2, [r3, #16]
 8003a08:	e002      	b.n	8003a10 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8003a10:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003a14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1c:	d006      	beq.n	8003a2c <Trapezoidal_Generator+0x92>
 8003a1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a2a:	d104      	bne.n	8003a36 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	60da      	str	r2, [r3, #12]
        return;
 8003a34:	e06f      	b.n	8003b16 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8003a36:	edd7 6a02 	vldr	s13, [r7, #8]
 8003a3a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a42:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8003a46:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a4a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003a4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a52:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a62:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8003a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003a6a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003a6e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a76:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003a7a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003a7e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8a:	db27      	blt.n	8003adc <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003a8c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003a90:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a98:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003a9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aa0:	ed97 7a02 	vldr	s14, [r7, #8]
 8003aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aa8:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ab0:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003ab2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003ab6:	edd7 7a06 	vldr	s15, [r7, #24]
 8003aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8003ac4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003ac8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003acc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	edc3 7a02 	vstr	s15, [r3, #8]
 8003ada:	e018      	b.n	8003b0e <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003adc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ae4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003ae8:	eeb0 0a66 	vmov.f32	s0, s13
 8003aec:	f00a fc34 	bl	800e358 <sqrtf>
 8003af0:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	6a3a      	ldr	r2, [r7, #32]
 8003af8:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	6a3a      	ldr	r2, [r7, #32]
 8003afe:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8003b00:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	60da      	str	r2, [r3, #12]
}
 8003b16:	3738      	adds	r7, #56	@ 0x38
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8003b1c:	b480      	push	{r7}
 8003b1e:	b08d      	sub	sp, #52	@ 0x34
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6178      	str	r0, [r7, #20]
 8003b24:	6139      	str	r1, [r7, #16]
 8003b26:	ed87 0a03 	vstr	s0, [r7, #12]
 8003b2a:	edc7 0a02 	vstr	s1, [r7, #8]
 8003b2e:	ed87 1a01 	vstr	s2, [r7, #4]
 8003b32:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b3c:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8003dc0 <Trapezoidal_Evaluated+0x2a4>
 8003b40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5e:	f200 811b 	bhi.w	8003d98 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2200      	movs	r2, #0
 8003b66:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	7c1b      	ldrb	r3, [r3, #16]
 8003b6c:	b25b      	sxtb	r3, r3
 8003b6e:	ee07 3a90 	vmov	s15, r3
 8003b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b76:	ed97 7a00 	vldr	s14, [r7]
 8003b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	ed93 7a00 	vldr	s14, [r3]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b8e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b96:	d109      	bne.n	8003bac <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	edd3 7a00 	vldr	s15, [r3]
 8003b9e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003baa:	e00c      	b.n	8003bc6 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	7c1b      	ldrb	r3, [r3, #16]
 8003bb0:	b25b      	sxtb	r3, r3
 8003bb2:	ee07 3a90 	vmov	s15, r3
 8003bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bba:	ed97 7a01 	vldr	s14, [r7, #4]
 8003bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	ed93 7a03 	vldr	s14, [r3, #12]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	edd3 7a00 	vldr	s15, [r3]
 8003bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bda:	d824      	bhi.n	8003c26 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8003bdc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003be0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003be4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c10:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c22:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8003c24:	e0c6      	b.n	8003db4 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3a:	d830      	bhi.n	8003c9e <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003c3c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003c40:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003c44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	edd3 7a00 	vldr	s15, [r3]
 8003c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	edd3 7a00 	vldr	s15, [r3]
 8003c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c64:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	edd3 7a00 	vldr	s15, [r3]
 8003c74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c78:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003c7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c80:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c92:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	609a      	str	r2, [r3, #8]
}
 8003c9c:	e08a      	b.n	8003db4 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003caa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb2:	d900      	bls.n	8003cb6 <Trapezoidal_Evaluated+0x19a>
}
 8003cb4:	e07e      	b.n	8003db4 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003cb6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003cba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003cbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	edd3 7a00 	vldr	s15, [r3]
 8003cc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	edd3 7a00 	vldr	s15, [r3]
 8003cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cde:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	ed93 7a01 	vldr	s14, [r3, #4]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	edd3 7a00 	vldr	s15, [r3]
 8003cf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfa:	dd11      	ble.n	8003d20 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	edd3 7a00 	vldr	s15, [r3]
 8003d08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d0c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d14:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d1c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d30:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 8003d34:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003d38:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d40:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d48:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003d4c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003d50:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003d54:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 8003d6e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003d72:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8003d88:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003d8c:	eef1 7a67 	vneg.f32	s15, s15
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003d96:	e00d      	b.n	8003db4 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	609a      	str	r2, [r3, #8]
}
 8003db4:	bf00      	nop
 8003db6:	3734      	adds	r7, #52	@ 0x34
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	3a83126f 	.word	0x3a83126f

08003dc4 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	ed87 0a01 	vstr	s0, [r7, #4]
 8003dce:	4603      	mov	r3, r0
 8003dd0:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	2b1a      	cmp	r3, #26
 8003dd6:	d018      	beq.n	8003e0a <temperature_to_base+0x46>
 8003dd8:	2b1a      	cmp	r3, #26
 8003dda:	dc1d      	bgt.n	8003e18 <temperature_to_base+0x54>
 8003ddc:	2b18      	cmp	r3, #24
 8003dde:	d002      	beq.n	8003de6 <temperature_to_base+0x22>
 8003de0:	2b19      	cmp	r3, #25
 8003de2:	d003      	beq.n	8003dec <temperature_to_base+0x28>
 8003de4:	e018      	b.n	8003e18 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8003de6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dea:	e017      	b.n	8003e1c <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8003dec:	edd7 7a01 	vldr	s15, [r7, #4]
 8003df0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8003e2c <temperature_to_base+0x68>
 8003df4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003df8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003dfc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e00:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8003e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e08:	e008      	b.n	8003e1c <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 8003e0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e0e:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8003e30 <temperature_to_base+0x6c>
 8003e12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e16:	e001      	b.n	8003e1c <temperature_to_base+0x58>
        default:
            return value;
 8003e18:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8003e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	42000000 	.word	0x42000000
 8003e30:	43889333 	.word	0x43889333

08003e34 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8003e3e:	4603      	mov	r3, r0
 8003e40:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	2b1a      	cmp	r3, #26
 8003e46:	d018      	beq.n	8003e7a <temperature_from_base+0x46>
 8003e48:	2b1a      	cmp	r3, #26
 8003e4a:	dc1d      	bgt.n	8003e88 <temperature_from_base+0x54>
 8003e4c:	2b18      	cmp	r3, #24
 8003e4e:	d002      	beq.n	8003e56 <temperature_from_base+0x22>
 8003e50:	2b19      	cmp	r3, #25
 8003e52:	d003      	beq.n	8003e5c <temperature_from_base+0x28>
 8003e54:	e018      	b.n	8003e88 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8003e56:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e5a:	e017      	b.n	8003e8c <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 8003e5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e60:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8003e64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e68:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8003e6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e70:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003e9c <temperature_from_base+0x68>
 8003e74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e78:	e008      	b.n	8003e8c <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 8003e7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e7e:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8003ea0 <temperature_from_base+0x6c>
 8003e82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e86:	e001      	b.n	8003e8c <temperature_from_base+0x58>
        default:
            return value;
 8003e88:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8003e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	42000000 	.word	0x42000000
 8003ea0:	43889333 	.word	0x43889333

08003ea4 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	e00a      	b.n	8003ed4 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b1a      	cmp	r3, #26
 8003ed8:	ddf1      	ble.n	8003ebe <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a11      	ldr	r2, [pc, #68]	@ (8003f24 <init_length_converter+0x80>)
 8003ede:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a11      	ldr	r2, [pc, #68]	@ (8003f28 <init_length_converter+0x84>)
 8003ee4:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003eec:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8003f2c <init_length_converter+0x88>)
 8003ef2:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8003f30 <init_length_converter+0x8c>)
 8003ef8:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a0d      	ldr	r2, [pc, #52]	@ (8003f34 <init_length_converter+0x90>)
 8003efe:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a0d      	ldr	r2, [pc, #52]	@ (8003f38 <init_length_converter+0x94>)
 8003f04:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a0c      	ldr	r2, [pc, #48]	@ (8003f3c <init_length_converter+0x98>)
 8003f0a:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	3a83126f 	.word	0x3a83126f
 8003f28:	3c23d70a 	.word	0x3c23d70a
 8003f2c:	447a0000 	.word	0x447a0000
 8003f30:	3cd013a9 	.word	0x3cd013a9
 8003f34:	3e9c0ebf 	.word	0x3e9c0ebf
 8003f38:	3f6a161e 	.word	0x3f6a161e
 8003f3c:	44c92b02 	.word	0x44c92b02

08003f40 <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	220a      	movs	r2, #10
 8003f52:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8003f54:	2300      	movs	r3, #0
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	e00a      	b.n	8003f70 <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	3304      	adds	r3, #4
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b1a      	cmp	r3, #26
 8003f74:	ddf1      	ble.n	8003f5a <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a0e      	ldr	r2, [pc, #56]	@ (8003fb4 <init_mass_converter+0x74>)
 8003f7a:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8003fb8 <init_mass_converter+0x78>)
 8003f80:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003f88:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a0b      	ldr	r2, [pc, #44]	@ (8003fbc <init_mass_converter+0x7c>)
 8003f8e:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a0b      	ldr	r2, [pc, #44]	@ (8003fc0 <init_mass_converter+0x80>)
 8003f94:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc4 <init_mass_converter+0x84>)
 8003f9a:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003fa8:	bf00      	nop
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	358637bd 	.word	0x358637bd
 8003fb8:	3a83126f 	.word	0x3a83126f
 8003fbc:	447a0000 	.word	0x447a0000
 8003fc0:	3ce83d36 	.word	0x3ce83d36
 8003fc4:	3ee83d36 	.word	0x3ee83d36

08003fc8 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	220f      	movs	r2, #15
 8003fda:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	e00a      	b.n	8003ff8 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	3304      	adds	r3, #4
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b1a      	cmp	r3, #26
 8003ffc:	ddf1      	ble.n	8003fe2 <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a0a      	ldr	r2, [pc, #40]	@ (800402c <init_angle_converter+0x64>)
 8004002:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800400a:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a08      	ldr	r2, [pc, #32]	@ (8004030 <init_angle_converter+0x68>)
 8004010:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	3c8efa35 	.word	0x3c8efa35
 8004030:	3c80adfd 	.word	0x3c80adfd

08004034 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2203      	movs	r2, #3
 8004040:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2214      	movs	r2, #20
 8004046:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	e00a      	b.n	8004064 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	3304      	adds	r3, #4
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3301      	adds	r3, #1
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b1a      	cmp	r3, #26
 8004068:	ddf1      	ble.n	800404e <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a10      	ldr	r2, [pc, #64]	@ (80040b0 <init_time_converter+0x7c>)
 800406e:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a10      	ldr	r2, [pc, #64]	@ (80040b4 <init_time_converter+0x80>)
 8004074:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a0f      	ldr	r2, [pc, #60]	@ (80040b8 <init_time_converter+0x84>)
 800407a:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004082:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a0d      	ldr	r2, [pc, #52]	@ (80040bc <init_time_converter+0x88>)
 8004088:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a0c      	ldr	r2, [pc, #48]	@ (80040c0 <init_time_converter+0x8c>)
 800408e:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a0c      	ldr	r2, [pc, #48]	@ (80040c4 <init_time_converter+0x90>)
 8004094:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	3089705f 	.word	0x3089705f
 80040b4:	358637bd 	.word	0x358637bd
 80040b8:	3a83126f 	.word	0x3a83126f
 80040bc:	42700000 	.word	0x42700000
 80040c0:	45610000 	.word	0x45610000
 80040c4:	47a8c000 	.word	0x47a8c000

080040c8 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2204      	movs	r2, #4
 80040d4:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2218      	movs	r2, #24
 80040da:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	e00a      	b.n	80040f8 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	3304      	adds	r3, #4
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	3301      	adds	r3, #1
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b1a      	cmp	r3, #26
 80040fc:	ddf1      	ble.n	80040e2 <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a05      	ldr	r2, [pc, #20]	@ (8004118 <init_temperature_converter+0x50>)
 8004102:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a05      	ldr	r2, [pc, #20]	@ (800411c <init_temperature_converter+0x54>)
 8004108:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800410a:	bf00      	nop
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	08003dc5 	.word	0x08003dc5
 800411c:	08003e35 	.word	0x08003e35

08004120 <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff feba 	bl	8003ea4 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3378      	adds	r3, #120	@ 0x78
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff ff03 	bl	8003f40 <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	33f0      	adds	r3, #240	@ 0xf0
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff ff42 	bl	8003fc8 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff ff72 	bl	8004034 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff ffb6 	bl	80040c8 <init_temperature_converter>
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	2b1a      	cmp	r3, #26
 8004172:	d803      	bhi.n	800417c <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	4a05      	ldr	r2, [pc, #20]	@ (800418c <UnitConverter_get_unit_type+0x28>)
 8004178:	5cd3      	ldrb	r3, [r2, r3]
 800417a:	e000      	b.n	800417e <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	200000d4 	.word	0x200000d4

08004190 <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	ed87 0a02 	vstr	s0, [r7, #8]
 800419c:	460b      	mov	r3, r1
 800419e:	71fb      	strb	r3, [r7, #7]
 80041a0:	4613      	mov	r3, r2
 80041a2:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff ffdc 	bl	8004164 <UnitConverter_get_unit_type>
 80041ac:	4603      	mov	r3, r0
 80041ae:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 80041b0:	79bb      	ldrb	r3, [r7, #6]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff ffd6 	bl	8004164 <UnitConverter_get_unit_type>
 80041b8:	4603      	mov	r3, r0
 80041ba:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 80041bc:	7efa      	ldrb	r2, [r7, #27]
 80041be:	7ebb      	ldrb	r3, [r7, #26]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d002      	beq.n	80041ca <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 80041c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80041c8:	e03b      	b.n	8004242 <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 80041ca:	7efa      	ldrb	r2, [r7, #27]
 80041cc:	4613      	mov	r3, r2
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	1a9b      	subs	r3, r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4413      	add	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e6:	79fa      	ldrb	r2, [r7, #7]
 80041e8:	4610      	mov	r0, r2
 80041ea:	ed97 0a02 	vldr	s0, [r7, #8]
 80041ee:	4798      	blx	r3
 80041f0:	ed87 0a07 	vstr	s0, [r7, #28]
 80041f4:	e00c      	b.n	8004210 <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	3304      	adds	r3, #4
 8004200:	edd3 7a00 	vldr	s15, [r3]
 8004204:	ed97 7a02 	vldr	s14, [r7, #8]
 8004208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800420c:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004214:	2b00      	cmp	r3, #0
 8004216:	d009      	beq.n	800422c <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800421c:	79ba      	ldrb	r2, [r7, #6]
 800421e:	4610      	mov	r0, r2
 8004220:	ed97 0a07 	vldr	s0, [r7, #28]
 8004224:	4798      	blx	r3
 8004226:	eef0 7a40 	vmov.f32	s15, s0
 800422a:	e00a      	b.n	8004242 <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 800422c:	79bb      	ldrb	r3, [r7, #6]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	3304      	adds	r3, #4
 8004236:	ed93 7a00 	vldr	s14, [r3]
 800423a:	edd7 6a07 	vldr	s13, [r7, #28]
 800423e:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 8004242:	eeb0 0a67 	vmov.f32	s0, s15
 8004246:	3720      	adds	r7, #32
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	ed87 0a02 	vstr	s0, [r7, #8]
 8004258:	460b      	mov	r3, r1
 800425a:	71fb      	strb	r3, [r7, #7]
 800425c:	4613      	mov	r3, r2
 800425e:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff ff7e 	bl	8004164 <UnitConverter_get_unit_type>
 8004268:	4603      	mov	r3, r0
 800426a:	2b02      	cmp	r3, #2
 800426c:	d111      	bne.n	8004292 <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 800426e:	79bb      	ldrb	r3, [r7, #6]
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff ff77 	bl	8004164 <UnitConverter_get_unit_type>
 8004276:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004278:	2b02      	cmp	r3, #2
 800427a:	d10a      	bne.n	8004292 <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 800427c:	79ba      	ldrb	r2, [r7, #6]
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	4619      	mov	r1, r3
 8004282:	ed97 0a02 	vldr	s0, [r7, #8]
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff ff82 	bl	8004190 <UnitConverter_convert>
 800428c:	eef0 7a40 	vmov.f32	s15, s0
 8004290:	e001      	b.n	8004296 <UnitConverter_angle+0x4a>
    }
    return value;
 8004292:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8004296:	eeb0 0a67 	vmov.f32	s0, s15
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08c      	sub	sp, #48	@ 0x30
 80042a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80042a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	605a      	str	r2, [r3, #4]
 80042b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80042b2:	1d3b      	adds	r3, r7, #4
 80042b4:	2220      	movs	r2, #32
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f009 ff87 	bl	800e1cc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80042be:	4b39      	ldr	r3, [pc, #228]	@ (80043a4 <MX_ADC1_Init+0x104>)
 80042c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80042c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80042c6:	4b37      	ldr	r3, [pc, #220]	@ (80043a4 <MX_ADC1_Init+0x104>)
 80042c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80042cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80042ce:	4b35      	ldr	r3, [pc, #212]	@ (80043a4 <MX_ADC1_Init+0x104>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80042d4:	4b33      	ldr	r3, [pc, #204]	@ (80043a4 <MX_ADC1_Init+0x104>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80042da:	4b32      	ldr	r3, [pc, #200]	@ (80043a4 <MX_ADC1_Init+0x104>)
 80042dc:	2200      	movs	r2, #0
 80042de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80042e0:	4b30      	ldr	r3, [pc, #192]	@ (80043a4 <MX_ADC1_Init+0x104>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80042e6:	4b2f      	ldr	r3, [pc, #188]	@ (80043a4 <MX_ADC1_Init+0x104>)
 80042e8:	2204      	movs	r2, #4
 80042ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80042ec:	4b2d      	ldr	r3, [pc, #180]	@ (80043a4 <MX_ADC1_Init+0x104>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80042f2:	4b2c      	ldr	r3, [pc, #176]	@ (80043a4 <MX_ADC1_Init+0x104>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80042f8:	4b2a      	ldr	r3, [pc, #168]	@ (80043a4 <MX_ADC1_Init+0x104>)
 80042fa:	2202      	movs	r2, #2
 80042fc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80042fe:	4b29      	ldr	r3, [pc, #164]	@ (80043a4 <MX_ADC1_Init+0x104>)
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004306:	4b27      	ldr	r3, [pc, #156]	@ (80043a4 <MX_ADC1_Init+0x104>)
 8004308:	2200      	movs	r2, #0
 800430a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800430c:	4b25      	ldr	r3, [pc, #148]	@ (80043a4 <MX_ADC1_Init+0x104>)
 800430e:	2200      	movs	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004312:	4b24      	ldr	r3, [pc, #144]	@ (80043a4 <MX_ADC1_Init+0x104>)
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800431a:	4b22      	ldr	r3, [pc, #136]	@ (80043a4 <MX_ADC1_Init+0x104>)
 800431c:	2200      	movs	r2, #0
 800431e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004320:	4b20      	ldr	r3, [pc, #128]	@ (80043a4 <MX_ADC1_Init+0x104>)
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004328:	481e      	ldr	r0, [pc, #120]	@ (80043a4 <MX_ADC1_Init+0x104>)
 800432a:	f002 fe17 	bl	8006f5c <HAL_ADC_Init>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004334:	f000 feb8 	bl	80050a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004338:	2300      	movs	r3, #0
 800433a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800433c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004340:	4619      	mov	r1, r3
 8004342:	4818      	ldr	r0, [pc, #96]	@ (80043a4 <MX_ADC1_Init+0x104>)
 8004344:	f003 ff36 	bl	80081b4 <HAL_ADCEx_MultiModeConfigChannel>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800434e:	f000 feab 	bl	80050a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004352:	4b15      	ldr	r3, [pc, #84]	@ (80043a8 <MX_ADC1_Init+0x108>)
 8004354:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004356:	2306      	movs	r3, #6
 8004358:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800435a:	2307      	movs	r3, #7
 800435c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800435e:	237f      	movs	r3, #127	@ 0x7f
 8004360:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004362:	2304      	movs	r3, #4
 8004364:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004366:	2300      	movs	r3, #0
 8004368:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800436a:	1d3b      	adds	r3, r7, #4
 800436c:	4619      	mov	r1, r3
 800436e:	480d      	ldr	r0, [pc, #52]	@ (80043a4 <MX_ADC1_Init+0x104>)
 8004370:	f003 f8a2 	bl	80074b8 <HAL_ADC_ConfigChannel>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800437a:	f000 fe95 	bl	80050a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800437e:	4b0b      	ldr	r3, [pc, #44]	@ (80043ac <MX_ADC1_Init+0x10c>)
 8004380:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004382:	230c      	movs	r3, #12
 8004384:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4806      	ldr	r0, [pc, #24]	@ (80043a4 <MX_ADC1_Init+0x104>)
 800438c:	f003 f894 	bl	80074b8 <HAL_ADC_ConfigChannel>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004396:	f000 fe87 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800439a:	bf00      	nop
 800439c:	3730      	adds	r7, #48	@ 0x30
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000170 	.word	0x20000170
 80043a8:	19200040 	.word	0x19200040
 80043ac:	1d500080 	.word	0x1d500080

080043b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b09e      	sub	sp, #120	@ 0x78
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	605a      	str	r2, [r3, #4]
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	60da      	str	r2, [r3, #12]
 80043c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043c8:	f107 0310 	add.w	r3, r7, #16
 80043cc:	2254      	movs	r2, #84	@ 0x54
 80043ce:	2100      	movs	r1, #0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f009 fefb 	bl	800e1cc <memset>
  if(adcHandle->Instance==ADC1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043de:	d15e      	bne.n	800449e <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80043e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043e4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80043e6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80043ea:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043ec:	f107 0310 	add.w	r3, r7, #16
 80043f0:	4618      	mov	r0, r3
 80043f2:	f005 fbd5 	bl	8009ba0 <HAL_RCCEx_PeriphCLKConfig>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80043fc:	f000 fe54 	bl	80050a8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004400:	4b29      	ldr	r3, [pc, #164]	@ (80044a8 <HAL_ADC_MspInit+0xf8>)
 8004402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004404:	4a28      	ldr	r2, [pc, #160]	@ (80044a8 <HAL_ADC_MspInit+0xf8>)
 8004406:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800440a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800440c:	4b26      	ldr	r3, [pc, #152]	@ (80044a8 <HAL_ADC_MspInit+0xf8>)
 800440e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004410:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004418:	4b23      	ldr	r3, [pc, #140]	@ (80044a8 <HAL_ADC_MspInit+0xf8>)
 800441a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441c:	4a22      	ldr	r2, [pc, #136]	@ (80044a8 <HAL_ADC_MspInit+0xf8>)
 800441e:	f043 0304 	orr.w	r3, r3, #4
 8004422:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004424:	4b20      	ldr	r3, [pc, #128]	@ (80044a8 <HAL_ADC_MspInit+0xf8>)
 8004426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	60bb      	str	r3, [r7, #8]
 800442e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004430:	2303      	movs	r3, #3
 8004432:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004434:	2303      	movs	r3, #3
 8004436:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004438:	2300      	movs	r3, #0
 800443a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800443c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004440:	4619      	mov	r1, r3
 8004442:	481a      	ldr	r0, [pc, #104]	@ (80044ac <HAL_ADC_MspInit+0xfc>)
 8004444:	f004 fc00 	bl	8008c48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004448:	4b19      	ldr	r3, [pc, #100]	@ (80044b0 <HAL_ADC_MspInit+0x100>)
 800444a:	4a1a      	ldr	r2, [pc, #104]	@ (80044b4 <HAL_ADC_MspInit+0x104>)
 800444c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800444e:	4b18      	ldr	r3, [pc, #96]	@ (80044b0 <HAL_ADC_MspInit+0x100>)
 8004450:	2205      	movs	r2, #5
 8004452:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004454:	4b16      	ldr	r3, [pc, #88]	@ (80044b0 <HAL_ADC_MspInit+0x100>)
 8004456:	2200      	movs	r2, #0
 8004458:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800445a:	4b15      	ldr	r3, [pc, #84]	@ (80044b0 <HAL_ADC_MspInit+0x100>)
 800445c:	2200      	movs	r2, #0
 800445e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004460:	4b13      	ldr	r3, [pc, #76]	@ (80044b0 <HAL_ADC_MspInit+0x100>)
 8004462:	2280      	movs	r2, #128	@ 0x80
 8004464:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004466:	4b12      	ldr	r3, [pc, #72]	@ (80044b0 <HAL_ADC_MspInit+0x100>)
 8004468:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800446c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800446e:	4b10      	ldr	r3, [pc, #64]	@ (80044b0 <HAL_ADC_MspInit+0x100>)
 8004470:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004474:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004476:	4b0e      	ldr	r3, [pc, #56]	@ (80044b0 <HAL_ADC_MspInit+0x100>)
 8004478:	2220      	movs	r2, #32
 800447a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800447c:	4b0c      	ldr	r3, [pc, #48]	@ (80044b0 <HAL_ADC_MspInit+0x100>)
 800447e:	2200      	movs	r2, #0
 8004480:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004482:	480b      	ldr	r0, [pc, #44]	@ (80044b0 <HAL_ADC_MspInit+0x100>)
 8004484:	f004 f8ae 	bl	80085e4 <HAL_DMA_Init>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800448e:	f000 fe0b 	bl	80050a8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a06      	ldr	r2, [pc, #24]	@ (80044b0 <HAL_ADC_MspInit+0x100>)
 8004496:	655a      	str	r2, [r3, #84]	@ 0x54
 8004498:	4a05      	ldr	r2, [pc, #20]	@ (80044b0 <HAL_ADC_MspInit+0x100>)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800449e:	bf00      	nop
 80044a0:	3778      	adds	r7, #120	@ 0x78
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
 80044ac:	48000800 	.word	0x48000800
 80044b0:	200001dc 	.word	0x200001dc
 80044b4:	40020008 	.word	0x40020008

080044b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80044be:	4b22      	ldr	r3, [pc, #136]	@ (8004548 <MX_DMA_Init+0x90>)
 80044c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c2:	4a21      	ldr	r2, [pc, #132]	@ (8004548 <MX_DMA_Init+0x90>)
 80044c4:	f043 0304 	orr.w	r3, r3, #4
 80044c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80044ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004548 <MX_DMA_Init+0x90>)
 80044cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	607b      	str	r3, [r7, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80044d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004548 <MX_DMA_Init+0x90>)
 80044d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044da:	4a1b      	ldr	r2, [pc, #108]	@ (8004548 <MX_DMA_Init+0x90>)
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80044e2:	4b19      	ldr	r3, [pc, #100]	@ (8004548 <MX_DMA_Init+0x90>)
 80044e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80044ee:	2200      	movs	r2, #0
 80044f0:	2100      	movs	r1, #0
 80044f2:	200b      	movs	r0, #11
 80044f4:	f004 f841 	bl	800857a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80044f8:	200b      	movs	r0, #11
 80044fa:	f004 f858 	bl	80085ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80044fe:	2200      	movs	r2, #0
 8004500:	2100      	movs	r1, #0
 8004502:	200c      	movs	r0, #12
 8004504:	f004 f839 	bl	800857a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004508:	200c      	movs	r0, #12
 800450a:	f004 f850 	bl	80085ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800450e:	2200      	movs	r2, #0
 8004510:	2100      	movs	r1, #0
 8004512:	200d      	movs	r0, #13
 8004514:	f004 f831 	bl	800857a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004518:	200d      	movs	r0, #13
 800451a:	f004 f848 	bl	80085ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800451e:	2200      	movs	r2, #0
 8004520:	2100      	movs	r1, #0
 8004522:	200e      	movs	r0, #14
 8004524:	f004 f829 	bl	800857a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004528:	200e      	movs	r0, #14
 800452a:	f004 f840 	bl	80085ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800452e:	2200      	movs	r2, #0
 8004530:	2100      	movs	r1, #0
 8004532:	200f      	movs	r0, #15
 8004534:	f004 f821 	bl	800857a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004538:	200f      	movs	r0, #15
 800453a:	f004 f838 	bl	80085ae <HAL_NVIC_EnableIRQ>

}
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000

0800454c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08a      	sub	sp, #40	@ 0x28
 8004550:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004552:	f107 0314 	add.w	r3, r7, #20
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	605a      	str	r2, [r3, #4]
 800455c:	609a      	str	r2, [r3, #8]
 800455e:	60da      	str	r2, [r3, #12]
 8004560:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004562:	4b55      	ldr	r3, [pc, #340]	@ (80046b8 <MX_GPIO_Init+0x16c>)
 8004564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004566:	4a54      	ldr	r2, [pc, #336]	@ (80046b8 <MX_GPIO_Init+0x16c>)
 8004568:	f043 0304 	orr.w	r3, r3, #4
 800456c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800456e:	4b52      	ldr	r3, [pc, #328]	@ (80046b8 <MX_GPIO_Init+0x16c>)
 8004570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800457a:	4b4f      	ldr	r3, [pc, #316]	@ (80046b8 <MX_GPIO_Init+0x16c>)
 800457c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800457e:	4a4e      	ldr	r2, [pc, #312]	@ (80046b8 <MX_GPIO_Init+0x16c>)
 8004580:	f043 0320 	orr.w	r3, r3, #32
 8004584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004586:	4b4c      	ldr	r3, [pc, #304]	@ (80046b8 <MX_GPIO_Init+0x16c>)
 8004588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004592:	4b49      	ldr	r3, [pc, #292]	@ (80046b8 <MX_GPIO_Init+0x16c>)
 8004594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004596:	4a48      	ldr	r2, [pc, #288]	@ (80046b8 <MX_GPIO_Init+0x16c>)
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800459e:	4b46      	ldr	r3, [pc, #280]	@ (80046b8 <MX_GPIO_Init+0x16c>)
 80045a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045aa:	4b43      	ldr	r3, [pc, #268]	@ (80046b8 <MX_GPIO_Init+0x16c>)
 80045ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ae:	4a42      	ldr	r2, [pc, #264]	@ (80046b8 <MX_GPIO_Init+0x16c>)
 80045b0:	f043 0302 	orr.w	r3, r3, #2
 80045b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045b6:	4b40      	ldr	r3, [pc, #256]	@ (80046b8 <MX_GPIO_Init+0x16c>)
 80045b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	607b      	str	r3, [r7, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 80045c2:	2200      	movs	r2, #0
 80045c4:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80045c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045cc:	f004 fcd6 	bl	8008f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80045d0:	2200      	movs	r2, #0
 80045d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80045d6:	4839      	ldr	r0, [pc, #228]	@ (80046bc <MX_GPIO_Init+0x170>)
 80045d8:	f004 fcd0 	bl	8008f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80045dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80045e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80045e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80045ec:	f107 0314 	add.w	r3, r7, #20
 80045f0:	4619      	mov	r1, r3
 80045f2:	4832      	ldr	r0, [pc, #200]	@ (80046bc <MX_GPIO_Init+0x170>)
 80045f4:	f004 fb28 	bl	8008c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 80045f8:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 80045fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045fe:	2301      	movs	r3, #1
 8004600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004606:	2300      	movs	r3, #0
 8004608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800460a:	f107 0314 	add.w	r3, r7, #20
 800460e:	4619      	mov	r1, r3
 8004610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004614:	f004 fb18 	bl	8008c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004618:	2306      	movs	r3, #6
 800461a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800461c:	2300      	movs	r3, #0
 800461e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004620:	2302      	movs	r3, #2
 8004622:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004624:	f107 0314 	add.w	r3, r7, #20
 8004628:	4619      	mov	r1, r3
 800462a:	4825      	ldr	r0, [pc, #148]	@ (80046c0 <MX_GPIO_Init+0x174>)
 800462c:	f004 fb0c 	bl	8008c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_PHOTO_Pin EMER_Pin PROX_Pin J1_Pin */
  GPIO_InitStruct.Pin = LOWER_PHOTO_Pin|EMER_Pin|PROX_Pin|J1_Pin;
 8004630:	f241 03b0 	movw	r3, #4272	@ 0x10b0
 8004634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800463e:	f107 0314 	add.w	r3, r7, #20
 8004642:	4619      	mov	r1, r3
 8004644:	481e      	ldr	r0, [pc, #120]	@ (80046c0 <MX_GPIO_Init+0x174>)
 8004646:	f004 faff 	bl	8008c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800464a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800464e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004650:	2301      	movs	r3, #1
 8004652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004654:	2300      	movs	r3, #0
 8004656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004658:	2300      	movs	r3, #0
 800465a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800465c:	f107 0314 	add.w	r3, r7, #20
 8004660:	4619      	mov	r1, r3
 8004662:	4816      	ldr	r0, [pc, #88]	@ (80046bc <MX_GPIO_Init+0x170>)
 8004664:	f004 faf0 	bl	8008c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : UPPER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin;
 8004668:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800466c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800466e:	2300      	movs	r3, #0
 8004670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UPPER_PHOTO_GPIO_Port, &GPIO_InitStruct);
 8004676:	f107 0314 	add.w	r3, r7, #20
 800467a:	4619      	mov	r1, r3
 800467c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004680:	f004 fae2 	bl	8008c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin J2_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin|J2_Pin;
 8004684:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468e:	2300      	movs	r3, #0
 8004690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004692:	f107 0314 	add.w	r3, r7, #20
 8004696:	4619      	mov	r1, r3
 8004698:	4808      	ldr	r0, [pc, #32]	@ (80046bc <MX_GPIO_Init+0x170>)
 800469a:	f004 fad5 	bl	8008c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800469e:	2200      	movs	r2, #0
 80046a0:	2100      	movs	r1, #0
 80046a2:	2028      	movs	r0, #40	@ 0x28
 80046a4:	f003 ff69 	bl	800857a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80046a8:	2028      	movs	r0, #40	@ 0x28
 80046aa:	f003 ff80 	bl	80085ae <HAL_NVIC_EnableIRQ>

}
 80046ae:	bf00      	nop
 80046b0:	3728      	adds	r7, #40	@ 0x28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40021000 	.word	0x40021000
 80046bc:	48000800 	.word	0x48000800
 80046c0:	48000400 	.word	0x48000400

080046c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80046c8:	f3bf 8f4f 	dsb	sy
}
 80046cc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80046ce:	4b06      	ldr	r3, [pc, #24]	@ (80046e8 <__NVIC_SystemReset+0x24>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80046d6:	4904      	ldr	r1, [pc, #16]	@ (80046e8 <__NVIC_SystemReset+0x24>)
 80046d8:	4b04      	ldr	r3, [pc, #16]	@ (80046ec <__NVIC_SystemReset+0x28>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80046de:	f3bf 8f4f 	dsb	sy
}
 80046e2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80046e4:	bf00      	nop
 80046e6:	e7fd      	b.n	80046e4 <__NVIC_SystemReset+0x20>
 80046e8:	e000ed00 	.word	0xe000ed00
 80046ec:	05fa0004 	.word	0x05fa0004

080046f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80046f0:	b590      	push	{r4, r7, lr}
 80046f2:	ed2d 8b02 	vpush	{d8}
 80046f6:	b089      	sub	sp, #36	@ 0x24
 80046f8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80046fa:	f002 f97a 	bl	80069f2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80046fe:	f000 f9bd 	bl	8004a7c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004702:	f7ff ff23 	bl	800454c <MX_GPIO_Init>
	MX_DMA_Init();
 8004706:	f7ff fed7 	bl	80044b8 <MX_DMA_Init>
	MX_ADC1_Init();
 800470a:	f7ff fdc9 	bl	80042a0 <MX_ADC1_Init>
	MX_TIM2_Init();
 800470e:	f001 fbab 	bl	8005e68 <MX_TIM2_Init>
	MX_TIM3_Init();
 8004712:	f001 fbf7 	bl	8005f04 <MX_TIM3_Init>
	MX_TIM4_Init();
 8004716:	f001 fc4b 	bl	8005fb0 <MX_TIM4_Init>
	MX_TIM5_Init();
 800471a:	f001 fc9f 	bl	800605c <MX_TIM5_Init>
	MX_TIM8_Init();
 800471e:	f001 fceb 	bl	80060f8 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8004722:	f001 ff8f 	bl	8006644 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8004726:	f001 fda5 	bl	8006274 <MX_TIM16_Init>
	MX_TIM1_Init();
 800472a:	f001 fb09 	bl	8005d40 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 800472e:	f001 ff3f 	bl	80065b0 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8004732:	f000 fcc1 	bl	80050b8 <plotter_begin>
//			pristrajectoryActive = true;
//
//			trajectory_sequence_index = (trajectory_sequence_index + 1) % 4;
//		}
//		button_pressed_previous = b1;
		if (b1 && !button_pressed_previous && !revtrajectoryActive) {
 8004736:	4bbc      	ldr	r3, [pc, #752]	@ (8004a28 <main+0x338>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 815a 	beq.w	80049f4 <main+0x304>
 8004740:	4bba      	ldr	r3, [pc, #744]	@ (8004a2c <main+0x33c>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f040 8155 	bne.w	80049f4 <main+0x304>
 800474a:	4bb9      	ldr	r3, [pc, #740]	@ (8004a30 <main+0x340>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	f083 0301 	eor.w	r3, r3, #1
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 814d 	beq.w	80049f4 <main+0x304>
			revEva.t = 0.0f;
 800475a:	4bb6      	ldr	r3, [pc, #728]	@ (8004a34 <main+0x344>)
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	60da      	str	r2, [r3, #12]
			revEva.isFinised = false;
 8004762:	4bb4      	ldr	r3, [pc, #720]	@ (8004a34 <main+0x344>)
 8004764:	2200      	movs	r2, #0
 8004766:	741a      	strb	r2, [r3, #16]

			// Get ABSOLUTE current position
			rev_initial_p = revolute_encoder.rads;
 8004768:	4bb3      	ldr	r3, [pc, #716]	@ (8004a38 <main+0x348>)
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	4ab3      	ldr	r2, [pc, #716]	@ (8004a3c <main+0x34c>)
 800476e:	6013      	str	r3, [r2, #0]

			// Normalize current position to [0, 2π]
			float normalized_current = fmodf(revolute_encoder.rads, 2 * PI);
 8004770:	4bb1      	ldr	r3, [pc, #708]	@ (8004a38 <main+0x348>)
 8004772:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004776:	eddf 0ab2 	vldr	s1, [pc, #712]	@ 8004a40 <main+0x350>
 800477a:	eeb0 0a67 	vmov.f32	s0, s15
 800477e:	f009 fdcb 	bl	800e318 <fmodf>
 8004782:	ed87 0a07 	vstr	s0, [r7, #28]
			if (normalized_current < 0) {
 8004786:	edd7 7a07 	vldr	s15, [r7, #28]
 800478a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004792:	d507      	bpl.n	80047a4 <main+0xb4>
				normalized_current += 2 * PI;
 8004794:	edd7 7a07 	vldr	s15, [r7, #28]
 8004798:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8004a40 <main+0x350>
 800479c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047a0:	edc7 7a07 	vstr	s15, [r7, #28]
			}

			// Get target position in degrees, convert to radians
			float target_degrees =
					trajectory_sequence[trajectory_sequence_index];
 80047a4:	4ba7      	ldr	r3, [pc, #668]	@ (8004a44 <main+0x354>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
			float target_degrees =
 80047a8:	4aa7      	ldr	r2, [pc, #668]	@ (8004a48 <main+0x358>)
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	617b      	str	r3, [r7, #20]
			float target_radians = UnitConverter_angle(&converter_system,
 80047b2:	220f      	movs	r2, #15
 80047b4:	210e      	movs	r1, #14
 80047b6:	ed97 0a05 	vldr	s0, [r7, #20]
 80047ba:	48a4      	ldr	r0, [pc, #656]	@ (8004a4c <main+0x35c>)
 80047bc:	f7ff fd46 	bl	800424c <UnitConverter_angle>
 80047c0:	ed87 0a04 	vstr	s0, [r7, #16]
					target_degrees, UNIT_DEGREE, UNIT_RADIAN);

			// Normalize target to [0, 2π]
			float normalized_target = fmodf(target_radians, 2 * PI);
 80047c4:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 8004a40 <main+0x350>
 80047c8:	ed97 0a04 	vldr	s0, [r7, #16]
 80047cc:	f009 fda4 	bl	800e318 <fmodf>
 80047d0:	ed87 0a03 	vstr	s0, [r7, #12]
			if (normalized_target < 0) {
 80047d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80047d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e0:	d507      	bpl.n	80047f2 <main+0x102>
				normalized_target += 2 * PI;
 80047e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80047e6:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8004a40 <main+0x350>
 80047ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047ee:	edc7 7a03 	vstr	s15, [r7, #12]
			}

			// Convert to degrees for easier logic
			float current_deg = normalized_current * 180.0f / PI;
 80047f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80047f6:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8004a50 <main+0x360>
 80047fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80047fe:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8004a54 <main+0x364>
 8004802:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004806:	edc7 7a02 	vstr	s15, [r7, #8]
			float target_deg = target_degrees; // Already in degrees
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	607b      	str	r3, [r7, #4]

			// SIMPLIFIED APPROACH: Define explicit rules for movements
			float movement_deg = 0.0f;
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	61bb      	str	r3, [r7, #24]

			// If both angles are on the same side of 180°
			if ((current_deg < 180 && target_deg < 180)
 8004814:	edd7 7a02 	vldr	s15, [r7, #8]
 8004818:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8004a50 <main+0x360>
 800481c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004824:	d508      	bpl.n	8004838 <main+0x148>
 8004826:	edd7 7a01 	vldr	s15, [r7, #4]
 800482a:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8004a50 <main+0x360>
 800482e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004836:	d411      	bmi.n	800485c <main+0x16c>
					|| (current_deg >= 180 && target_deg >= 180)) {
 8004838:	edd7 7a02 	vldr	s15, [r7, #8]
 800483c:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8004a50 <main+0x360>
 8004840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004848:	db33      	blt.n	80048b2 <main+0x1c2>
 800484a:	edd7 7a01 	vldr	s15, [r7, #4]
 800484e:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8004a50 <main+0x360>
 8004852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485a:	db2a      	blt.n	80048b2 <main+0x1c2>

				// Simple case - take shortest path
				movement_deg = target_deg - current_deg;
 800485c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004860:	edd7 7a02 	vldr	s15, [r7, #8]
 8004864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004868:	edc7 7a06 	vstr	s15, [r7, #24]

				// Ensure shortest path
				if (movement_deg > 180)
 800486c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004870:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8004a50 <main+0x360>
 8004874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487c:	dd07      	ble.n	800488e <main+0x19e>
					movement_deg -= 360;
 800487e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004882:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8004a58 <main+0x368>
 8004886:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800488a:	edc7 7a06 	vstr	s15, [r7, #24]
				if (movement_deg < -180)
 800488e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004892:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8004a5c <main+0x36c>
 8004896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800489a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489e:	d562      	bpl.n	8004966 <main+0x276>
					movement_deg += 360;
 80048a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80048a4:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8004a58 <main+0x368>
 80048a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048ac:	edc7 7a06 	vstr	s15, [r7, #24]
				if (movement_deg < -180)
 80048b0:	e059      	b.n	8004966 <main+0x276>
			}
			// If we need to cross the 180° boundary
			else {
				// Explicitly determine direction to avoid crossing 180°
				if (current_deg < 180) {
 80048b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80048b6:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8004a50 <main+0x360>
 80048ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c2:	d52a      	bpl.n	800491a <main+0x22a>
					// Current < 180, target > 180
					// Go counterclockwise through 0°
					if (current_deg < target_deg - 180) {
 80048c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80048c8:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8004a50 <main+0x360>
 80048cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80048d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80048d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048dc:	d50e      	bpl.n	80048fc <main+0x20c>
						movement_deg = -(current_deg + (360 - target_deg)); // Negative = clockwise
 80048de:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8004a58 <main+0x368>
 80048e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80048e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80048ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048f2:	eef1 7a67 	vneg.f32	s15, s15
 80048f6:	edc7 7a06 	vstr	s15, [r7, #24]
 80048fa:	e034      	b.n	8004966 <main+0x276>
					} else {
						movement_deg = -(current_deg - target_deg + 360); // Negative = clockwise
 80048fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8004900:	edd7 7a01 	vldr	s15, [r7, #4]
 8004904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004908:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8004a58 <main+0x368>
 800490c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004910:	eef1 7a67 	vneg.f32	s15, s15
 8004914:	edc7 7a06 	vstr	s15, [r7, #24]
 8004918:	e025      	b.n	8004966 <main+0x276>
					}
				} else {
					// Current > 180, target < 180
					// Go clockwise through 0°
					if (target_deg < current_deg - 180) {
 800491a:	edd7 7a02 	vldr	s15, [r7, #8]
 800491e:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8004a50 <main+0x360>
 8004922:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004926:	ed97 7a01 	vldr	s14, [r7, #4]
 800492a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004932:	d50c      	bpl.n	800494e <main+0x25e>
						movement_deg = 360 - current_deg + target_deg; // Positive = counterclockwise
 8004934:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8004a58 <main+0x368>
 8004938:	edd7 7a02 	vldr	s15, [r7, #8]
 800493c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004940:	ed97 7a01 	vldr	s14, [r7, #4]
 8004944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004948:	edc7 7a06 	vstr	s15, [r7, #24]
 800494c:	e00b      	b.n	8004966 <main+0x276>
					} else {
						movement_deg = target_deg - current_deg + 360; // Positive = counterclockwise
 800494e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004952:	edd7 7a02 	vldr	s15, [r7, #8]
 8004956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800495a:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004a58 <main+0x368>
 800495e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004962:	edc7 7a06 	vstr	s15, [r7, #24]
					}
				}
			}

			// Convert to radians and apply to absolute position
			float movement_rad = movement_deg * PI / 180.0f;
 8004966:	edd7 7a06 	vldr	s15, [r7, #24]
 800496a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8004a54 <main+0x364>
 800496e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004972:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8004a50 <main+0x360>
 8004976:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800497a:	edc7 7a00 	vstr	s15, [r7]
			rev_target_p = rev_initial_p + movement_rad;
 800497e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a3c <main+0x34c>)
 8004980:	ed93 7a00 	vldr	s14, [r3]
 8004984:	edd7 7a00 	vldr	s15, [r7]
 8004988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800498c:	4b34      	ldr	r3, [pc, #208]	@ (8004a60 <main+0x370>)
 800498e:	edc3 7a00 	vstr	s15, [r3]

			// Generate trajectory
			Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 8004992:	4b2a      	ldr	r3, [pc, #168]	@ (8004a3c <main+0x34c>)
 8004994:	ed93 8a00 	vldr	s16, [r3]
 8004998:	4b31      	ldr	r3, [pc, #196]	@ (8004a60 <main+0x370>)
 800499a:	edd3 8a00 	vldr	s17, [r3]
					ZGX45RGG_150RPM_Constant.qd_max,
 800499e:	4b31      	ldr	r3, [pc, #196]	@ (8004a64 <main+0x374>)
 80049a0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 80049a4:	4610      	mov	r0, r2
 80049a6:	4619      	mov	r1, r3
 80049a8:	f7fc f8d4 	bl	8000b54 <__aeabi_d2f>
 80049ac:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.qdd_max);
 80049ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004a64 <main+0x374>)
 80049b0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
			Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 80049b4:	4610      	mov	r0, r2
 80049b6:	4619      	mov	r1, r3
 80049b8:	f7fc f8cc 	bl	8000b54 <__aeabi_d2f>
 80049bc:	4603      	mov	r3, r0
 80049be:	ee01 3a90 	vmov	s3, r3
 80049c2:	ee01 4a10 	vmov	s2, r4
 80049c6:	eef0 0a68 	vmov.f32	s1, s17
 80049ca:	eeb0 0a48 	vmov.f32	s0, s16
 80049ce:	4826      	ldr	r0, [pc, #152]	@ (8004a68 <main+0x378>)
 80049d0:	f7fe ffe3 	bl	800399a <Trapezoidal_Generator>

			revtrajectoryActive = true;
 80049d4:	4b16      	ldr	r3, [pc, #88]	@ (8004a30 <main+0x340>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	701a      	strb	r2, [r3, #0]
			trajectory_sequence_index = (trajectory_sequence_index + 1) % 4;
 80049da:	4b1a      	ldr	r3, [pc, #104]	@ (8004a44 <main+0x354>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	3301      	adds	r3, #1
 80049e0:	425a      	negs	r2, r3
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	f002 0203 	and.w	r2, r2, #3
 80049ea:	bf58      	it	pl
 80049ec:	4253      	negpl	r3, r2
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	4b14      	ldr	r3, [pc, #80]	@ (8004a44 <main+0x354>)
 80049f2:	701a      	strb	r2, [r3, #0]
		}

		button_pressed_previous = b1;
 80049f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a28 <main+0x338>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	4b0c      	ldr	r3, [pc, #48]	@ (8004a2c <main+0x33c>)
 80049fc:	701a      	strb	r2, [r3, #0]

		if (b2) {
 80049fe:	4b1b      	ldr	r3, [pc, #108]	@ (8004a6c <main+0x37c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <main+0x31c>
			home = 1;
 8004a06:	4b1a      	ldr	r3, [pc, #104]	@ (8004a70 <main+0x380>)
 8004a08:	2201      	movs	r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
		}

		if (b3) {
 8004a0c:	4b19      	ldr	r3, [pc, #100]	@ (8004a74 <main+0x384>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <main+0x32a>
			home = 99;
 8004a14:	4b16      	ldr	r3, [pc, #88]	@ (8004a70 <main+0x380>)
 8004a16:	2263      	movs	r2, #99	@ 0x63
 8004a18:	601a      	str	r2, [r3, #0]
		}

		if (b4) {
 8004a1a:	4b17      	ldr	r3, [pc, #92]	@ (8004a78 <main+0x388>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f43f ae89 	beq.w	8004736 <main+0x46>
			NVIC_SystemReset();
 8004a24:	f7ff fe4e 	bl	80046c4 <__NVIC_SystemReset>
 8004a28:	200017c4 	.word	0x200017c4
 8004a2c:	20000295 	.word	0x20000295
 8004a30:	20000264 	.word	0x20000264
 8004a34:	20000250 	.word	0x20000250
 8004a38:	200003a4 	.word	0x200003a4
 8004a3c:	20000268 	.word	0x20000268
 8004a40:	40c90fdb 	.word	0x40c90fdb
 8004a44:	20000294 	.word	0x20000294
 8004a48:	0800ff40 	.word	0x0800ff40
 8004a4c:	20000714 	.word	0x20000714
 8004a50:	43340000 	.word	0x43340000
 8004a54:	40490fdb 	.word	0x40490fdb
 8004a58:	43b40000 	.word	0x43b40000
 8004a5c:	c3340000 	.word	0xc3340000
 8004a60:	2000026c 	.word	0x2000026c
 8004a64:	20000000 	.word	0x20000000
 8004a68:	2000023c 	.word	0x2000023c
 8004a6c:	200017c8 	.word	0x200017c8
 8004a70:	20000290 	.word	0x20000290
 8004a74:	200017cc 	.word	0x200017cc
 8004a78:	200017d0 	.word	0x200017d0

08004a7c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b094      	sub	sp, #80	@ 0x50
 8004a80:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004a82:	f107 0318 	add.w	r3, r7, #24
 8004a86:	2238      	movs	r2, #56	@ 0x38
 8004a88:	2100      	movs	r1, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f009 fb9e 	bl	800e1cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004a90:	1d3b      	adds	r3, r7, #4
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	605a      	str	r2, [r3, #4]
 8004a98:	609a      	str	r2, [r3, #8]
 8004a9a:	60da      	str	r2, [r3, #12]
 8004a9c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	f004 fa9c 	bl	8008fdc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004aa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004aac:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004aae:	2340      	movs	r3, #64	@ 0x40
 8004ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004aba:	2304      	movs	r3, #4
 8004abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8004abe:	2355      	movs	r3, #85	@ 0x55
 8004ac0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004aca:	2302      	movs	r3, #2
 8004acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004ace:	f107 0318 	add.w	r3, r7, #24
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f004 fb36 	bl	8009144 <HAL_RCC_OscConfig>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <SystemClock_Config+0x66>
		Error_Handler();
 8004ade:	f000 fae3 	bl	80050a8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004ae2:	230f      	movs	r3, #15
 8004ae4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004aee:	2300      	movs	r3, #0
 8004af0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004af2:	2300      	movs	r3, #0
 8004af4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8004af6:	1d3b      	adds	r3, r7, #4
 8004af8:	2104      	movs	r1, #4
 8004afa:	4618      	mov	r0, r3
 8004afc:	f004 fe34 	bl	8009768 <HAL_RCC_ClockConfig>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <SystemClock_Config+0x8e>
		Error_Handler();
 8004b06:	f000 facf 	bl	80050a8 <Error_Handler>
	}
}
 8004b0a:	bf00      	nop
 8004b0c:	3750      	adds	r7, #80	@ 0x50
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EMER_Pin) {
 8004b1e:	88fb      	ldrh	r3, [r7, #6]
 8004b20:	2b10      	cmp	r3, #16
 8004b22:	d105      	bne.n	8004b30 <HAL_GPIO_EXTI_Callback+0x1c>
		rs_current_state = RS_EMERGENCY_TRIGGED;
 8004b24:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <HAL_GPIO_EXTI_Callback+0x28>)
 8004b26:	2205      	movs	r2, #5
 8004b28:	701a      	strb	r2, [r3, #0]
		emer_state = PUSHED;
 8004b2a:	4b05      	ldr	r3, [pc, #20]	@ (8004b40 <HAL_GPIO_EXTI_Callback+0x2c>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
	}
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	200000ef 	.word	0x200000ef
 8004b40:	200000f2 	.word	0x200000f2

08004b44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {

	}
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5c:	ed2d 8b02 	vpush	{d8}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4ab0      	ldr	r2, [pc, #704]	@ (8004e2c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	f040 8271 	bne.w	8005052 <HAL_TIM_PeriodElapsedCallback+0x4fa>
		plotter_update_sensors();
 8004b70:	f000 fe28 	bl	80057c4 <plotter_update_sensors>

		if (home == 1) {
 8004b74:	4bae      	ldr	r3, [pc, #696]	@ (8004e30 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d114      	bne.n	8004ba6 <HAL_TIM_PeriodElapsedCallback+0x4e>
			MDXX_set_range(&prismatic_motor, 2000, 65535 / 3);
 8004b7c:	eddf 0aad 	vldr	s1, [pc, #692]	@ 8004e34 <HAL_TIM_PeriodElapsedCallback+0x2dc>
 8004b80:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 8004e38 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8004b84:	48ad      	ldr	r0, [pc, #692]	@ (8004e3c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004b86:	f7fc fbfd 	bl	8001384 <MDXX_set_range>
			if (low_photo) {
 8004b8a:	4bad      	ldr	r3, [pc, #692]	@ (8004e40 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d009      	beq.n	8004ba6 <HAL_TIM_PeriodElapsedCallback+0x4e>
				home = 2;
 8004b92:	4ba7      	ldr	r3, [pc, #668]	@ (8004e30 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004b94:	2202      	movs	r2, #2
 8004b96:	601a      	str	r2, [r3, #0]
				MDXX_set_range(&prismatic_motor, 2000, 0);
 8004b98:	eddf 0aaa 	vldr	s1, [pc, #680]	@ 8004e44 <HAL_TIM_PeriodElapsedCallback+0x2ec>
 8004b9c:	ed9f 0aa6 	vldr	s0, [pc, #664]	@ 8004e38 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8004ba0:	48a6      	ldr	r0, [pc, #664]	@ (8004e3c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004ba2:	f7fc fbef 	bl	8001384 <MDXX_set_range>
			}
		}

		if (home == 2) {
 8004ba6:	4ba2      	ldr	r3, [pc, #648]	@ (8004e30 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d146      	bne.n	8004c3c <HAL_TIM_PeriodElapsedCallback+0xe4>
			static int prox_count = 0;
			static bool prox_previous = false;
			static bool initialized = false;

			// Initialize on first entry to state 4
			if (!initialized) {
 8004bae:	4ba6      	ldr	r3, [pc, #664]	@ (8004e48 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	f083 0301 	eor.w	r3, r3, #1
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00e      	beq.n	8004bda <HAL_TIM_PeriodElapsedCallback+0x82>
				prox_previous = prox;
 8004bbc:	4ba3      	ldr	r3, [pc, #652]	@ (8004e4c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	bf14      	ite	ne
 8004bc4:	2301      	movne	r3, #1
 8004bc6:	2300      	moveq	r3, #0
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	4ba1      	ldr	r3, [pc, #644]	@ (8004e50 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004bcc:	701a      	strb	r2, [r3, #0]
				prox_count = 0;
 8004bce:	4ba1      	ldr	r3, [pc, #644]	@ (8004e54 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]
				initialized = true;
 8004bd4:	4b9c      	ldr	r3, [pc, #624]	@ (8004e48 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	701a      	strb	r2, [r3, #0]
			}

			// Move revolute motor
			MDXX_set_range(&revolute_motor, 2000, 65535);
 8004bda:	eddf 0a9f 	vldr	s1, [pc, #636]	@ 8004e58 <HAL_TIM_PeriodElapsedCallback+0x300>
 8004bde:	ed9f 0a96 	vldr	s0, [pc, #600]	@ 8004e38 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8004be2:	489e      	ldr	r0, [pc, #632]	@ (8004e5c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004be4:	f7fc fbce 	bl	8001384 <MDXX_set_range>

			// Count proximity sensor triggers (rising edge detection)
			if (prox && !prox_previous) {
 8004be8:	4b98      	ldr	r3, [pc, #608]	@ (8004e4c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00b      	beq.n	8004c08 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8004bf0:	4b97      	ldr	r3, [pc, #604]	@ (8004e50 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	f083 0301 	eor.w	r3, r3, #1
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d004      	beq.n	8004c08 <HAL_TIM_PeriodElapsedCallback+0xb0>
				prox_count++;
 8004bfe:	4b95      	ldr	r3, [pc, #596]	@ (8004e54 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3301      	adds	r3, #1
 8004c04:	4a93      	ldr	r2, [pc, #588]	@ (8004e54 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004c06:	6013      	str	r3, [r2, #0]
			}
			prox_previous = prox;
 8004c08:	4b90      	ldr	r3, [pc, #576]	@ (8004e4c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	4b8e      	ldr	r3, [pc, #568]	@ (8004e50 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004c18:	701a      	strb	r2, [r3, #0]

			// After 2 triggers, stop motor and reset encoder
			if (prox_count >= 1) {
 8004c1a:	4b8e      	ldr	r3, [pc, #568]	@ (8004e54 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	dd0c      	ble.n	8004c3c <HAL_TIM_PeriodElapsedCallback+0xe4>
				MDXX_set_range(&revolute_motor, 2000, 0);
 8004c22:	eddf 0a88 	vldr	s1, [pc, #544]	@ 8004e44 <HAL_TIM_PeriodElapsedCallback+0x2ec>
 8004c26:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 8004e38 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8004c2a:	488c      	ldr	r0, [pc, #560]	@ (8004e5c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8004c2c:	f7fc fbaa 	bl	8001384 <MDXX_set_range>

				initialized = false;  // Reset for next time
 8004c30:	4b85      	ldr	r3, [pc, #532]	@ (8004e48 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
				home = 3;             // Exit homing sequence
 8004c36:	4b7e      	ldr	r3, [pc, #504]	@ (8004e30 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004c38:	2203      	movs	r2, #3
 8004c3a:	601a      	str	r2, [r3, #0]
			}
		}

		if (home == 3) {
 8004c3c:	4b7c      	ldr	r3, [pc, #496]	@ (8004e30 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b03      	cmp	r3, #3
 8004c42:	d11a      	bne.n	8004c7a <HAL_TIM_PeriodElapsedCallback+0x122>
			MDXX_set_range(&prismatic_motor, 2000, -65535 / 3);
 8004c44:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8004e60 <HAL_TIM_PeriodElapsedCallback+0x308>
 8004c48:	ed9f 0a7b 	vldr	s0, [pc, #492]	@ 8004e38 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8004c4c:	487b      	ldr	r0, [pc, #492]	@ (8004e3c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004c4e:	f7fc fb99 	bl	8001384 <MDXX_set_range>
			if (up_photo) {
 8004c52:	4b84      	ldr	r3, [pc, #528]	@ (8004e64 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00f      	beq.n	8004c7a <HAL_TIM_PeriodElapsedCallback+0x122>
				MDXX_set_range(&prismatic_motor, 2000, 0);
 8004c5a:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 8004e44 <HAL_TIM_PeriodElapsedCallback+0x2ec>
 8004c5e:	ed9f 0a76 	vldr	s0, [pc, #472]	@ 8004e38 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8004c62:	4876      	ldr	r0, [pc, #472]	@ (8004e3c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004c64:	f7fc fb8e 	bl	8001384 <MDXX_set_range>
				QEI_reset(&prismatic_encoder);
 8004c68:	487f      	ldr	r0, [pc, #508]	@ (8004e68 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8004c6a:	f7fe fe55 	bl	8003918 <QEI_reset>
				QEI_reset(&revolute_encoder);
 8004c6e:	487f      	ldr	r0, [pc, #508]	@ (8004e6c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8004c70:	f7fe fe52 	bl	8003918 <QEI_reset>
				home = 0;
 8004c74:	4b6e      	ldr	r3, [pc, #440]	@ (8004e30 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
//
//			MDXX_set_range(&revolute_motor, 2000, rev_cmd_ux);
//		}

		// Position control
		QEI_get_diff_count(&revolute_encoder);
 8004c7a:	487c      	ldr	r0, [pc, #496]	@ (8004e6c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8004c7c:	f7fe fc3c 	bl	80034f8 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8004c80:	487a      	ldr	r0, [pc, #488]	@ (8004e6c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8004c82:	f7fe fd25 	bl	80036d0 <QEI_compute_data>

		// Get current normalized position for error calculation
		cur_pos = fmodf(revolute_encoder.rads, 2 * PI);
 8004c86:	4b79      	ldr	r3, [pc, #484]	@ (8004e6c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8004c88:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004c8c:	eddf 0a78 	vldr	s1, [pc, #480]	@ 8004e70 <HAL_TIM_PeriodElapsedCallback+0x318>
 8004c90:	eeb0 0a67 	vmov.f32	s0, s15
 8004c94:	f009 fb40 	bl	800e318 <fmodf>
 8004c98:	eef0 7a40 	vmov.f32	s15, s0
 8004c9c:	4b75      	ldr	r3, [pc, #468]	@ (8004e74 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004c9e:	edc3 7a00 	vstr	s15, [r3]
		if (cur_pos < 0) {
 8004ca2:	4b74      	ldr	r3, [pc, #464]	@ (8004e74 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004ca4:	edd3 7a00 	vldr	s15, [r3]
 8004ca8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb0:	d509      	bpl.n	8004cc6 <HAL_TIM_PeriodElapsedCallback+0x16e>
			cur_pos += 2 * PI;
 8004cb2:	4b70      	ldr	r3, [pc, #448]	@ (8004e74 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004cb4:	edd3 7a00 	vldr	s15, [r3]
 8004cb8:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8004e70 <HAL_TIM_PeriodElapsedCallback+0x318>
 8004cbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cc0:	4b6c      	ldr	r3, [pc, #432]	@ (8004e74 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004cc2:	edc3 7a00 	vstr	s15, [r3]
		}

		// Calculate angle in degrees for display/debugging
		deg = UnitConverter_angle(&converter_system, cur_pos, UNIT_RADIAN,
 8004cc6:	4b6b      	ldr	r3, [pc, #428]	@ (8004e74 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004cc8:	edd3 7a00 	vldr	s15, [r3]
 8004ccc:	220e      	movs	r2, #14
 8004cce:	210f      	movs	r1, #15
 8004cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8004cd4:	4868      	ldr	r0, [pc, #416]	@ (8004e78 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8004cd6:	f7ff fab9 	bl	800424c <UnitConverter_angle>
 8004cda:	eef0 7a40 	vmov.f32	s15, s0
 8004cde:	4b67      	ldr	r3, [pc, #412]	@ (8004e7c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8004ce0:	edc3 7a00 	vstr	s15, [r3]
				UNIT_DEGREE);

		if (revtrajectoryActive && !revEva.isFinised) {
 8004ce4:	4b66      	ldr	r3, [pc, #408]	@ (8004e80 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d043      	beq.n	8004d74 <HAL_TIM_PeriodElapsedCallback+0x21c>
 8004cec:	4b65      	ldr	r3, [pc, #404]	@ (8004e84 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8004cee:	7c1b      	ldrb	r3, [r3, #16]
 8004cf0:	f083 0301 	eor.w	r3, r3, #1
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d03c      	beq.n	8004d74 <HAL_TIM_PeriodElapsedCallback+0x21c>
			// During trajectory following
			Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 8004cfa:	4b63      	ldr	r3, [pc, #396]	@ (8004e88 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8004cfc:	ed93 8a00 	vldr	s16, [r3]
 8004d00:	4b62      	ldr	r3, [pc, #392]	@ (8004e8c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8004d02:	edd3 8a00 	vldr	s17, [r3]
					ZGX45RGG_150RPM_Constant.qd_max,
 8004d06:	4b62      	ldr	r3, [pc, #392]	@ (8004e90 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8004d08:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4619      	mov	r1, r3
 8004d10:	f7fb ff20 	bl	8000b54 <__aeabi_d2f>
 8004d14:	4606      	mov	r6, r0
					ZGX45RGG_150RPM_Constant.qdd_max);
 8004d16:	4b5e      	ldr	r3, [pc, #376]	@ (8004e90 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8004d18:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
			Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	f7fb ff18 	bl	8000b54 <__aeabi_d2f>
 8004d24:	4603      	mov	r3, r0
 8004d26:	ee01 3a90 	vmov	s3, r3
 8004d2a:	ee01 6a10 	vmov	s2, r6
 8004d2e:	eef0 0a68 	vmov.f32	s1, s17
 8004d32:	eeb0 0a48 	vmov.f32	s0, s16
 8004d36:	4953      	ldr	r1, [pc, #332]	@ (8004e84 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8004d38:	4856      	ldr	r0, [pc, #344]	@ (8004e94 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8004d3a:	f7fe feef 	bl	8003b1c <Trapezoidal_Evaluated>

			revolute_pos = revEva.setposition;
 8004d3e:	4b51      	ldr	r3, [pc, #324]	@ (8004e84 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a55      	ldr	r2, [pc, #340]	@ (8004e98 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8004d44:	6013      	str	r3, [r2, #0]
			revolute_vel = revEva.setvelocity;
 8004d46:	4b4f      	ldr	r3, [pc, #316]	@ (8004e84 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4a54      	ldr	r2, [pc, #336]	@ (8004e9c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8004d4c:	6013      	str	r3, [r2, #0]

			// If trajectory has completed, save the final setpoint for position holding
			if (revEva.isFinised) {
 8004d4e:	4b4d      	ldr	r3, [pc, #308]	@ (8004e84 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8004d50:	7c1b      	ldrb	r3, [r3, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00e      	beq.n	8004d74 <HAL_TIM_PeriodElapsedCallback+0x21c>
				revtrajectoryActive = false;
 8004d56:	4b4a      	ldr	r3, [pc, #296]	@ (8004e80 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	701a      	strb	r2, [r3, #0]
				revolute_pos = revEva.setposition;  // Keep the last setpoint
 8004d5c:	4b49      	ldr	r3, [pc, #292]	@ (8004e84 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a4d      	ldr	r2, [pc, #308]	@ (8004e98 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8004d62:	6013      	str	r3, [r2, #0]
				revolute_vel = 0.0f;               // Stop velocity command
 8004d64:	4b4d      	ldr	r3, [pc, #308]	@ (8004e9c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
				dfd = 0.0f;
 8004d6c:	4b4c      	ldr	r3, [pc, #304]	@ (8004ea0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
			}
		}
		// Always calculate feedback and control signals, whether trajectory is active or not
		rev_vin = mapf(rev_cmd_ux, -65535.0, 65535.0, -12.0, 12.0);
 8004d74:	4b4b      	ldr	r3, [pc, #300]	@ (8004ea4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8004d76:	edd3 7a00 	vldr	s15, [r3]
 8004d7a:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8004d7e:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8004d82:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 8004e58 <HAL_TIM_PeriodElapsedCallback+0x300>
 8004d86:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8004ea8 <HAL_TIM_PeriodElapsedCallback+0x350>
 8004d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8004d8e:	f7fc fe21 	bl	80019d4 <mapf>
 8004d92:	eef0 7a40 	vmov.f32	s15, s0
 8004d96:	4b45      	ldr	r3, [pc, #276]	@ (8004eac <HAL_TIM_PeriodElapsedCallback+0x354>)
 8004d98:	edc3 7a00 	vstr	s15, [r3]

		rev_kal_filt = MotorKalman_Estimate(&revolute_kalman, rev_vin,
 8004d9c:	4b43      	ldr	r3, [pc, #268]	@ (8004eac <HAL_TIM_PeriodElapsedCallback+0x354>)
 8004d9e:	edd3 7a00 	vldr	s15, [r3]
 8004da2:	4b32      	ldr	r3, [pc, #200]	@ (8004e6c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8004da4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8004da8:	eef0 0a47 	vmov.f32	s1, s14
 8004dac:	eeb0 0a67 	vmov.f32	s0, s15
 8004db0:	483f      	ldr	r0, [pc, #252]	@ (8004eb0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8004db2:	f7fd fddd 	bl	8002970 <MotorKalman_Estimate>
 8004db6:	eef0 7a40 	vmov.f32	s15, s0
 8004dba:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8004dbc:	edc3 7a00 	vstr	s15, [r3]
				revolute_encoder.rads);

		if (isnan(rev_kal_filt)) {
 8004dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8004eb4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8004dc2:	edd3 7a00 	vldr	s15, [r3]
 8004dc6:	eef4 7a67 	vcmp.f32	s15, s15
 8004dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dce:	d703      	bvc.n	8004dd8 <HAL_TIM_PeriodElapsedCallback+0x280>
			rev_kal_filt = 0.0f;
 8004dd0:	4b38      	ldr	r3, [pc, #224]	@ (8004eb4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
		}

		rev_pos_error = revolute_pos - cur_pos;
 8004dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8004e98 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8004dda:	ed93 7a00 	vldr	s14, [r3]
 8004dde:	4b25      	ldr	r3, [pc, #148]	@ (8004e74 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8004de0:	edd3 7a00 	vldr	s15, [r3]
 8004de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004de8:	4b33      	ldr	r3, [pc, #204]	@ (8004eb8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8004dea:	edc3 7a00 	vstr	s15, [r3]

		// Ensure error uses the shortest path for control
		if (rev_pos_error > PI) {
 8004dee:	4b32      	ldr	r3, [pc, #200]	@ (8004eb8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8004df0:	edd3 7a00 	vldr	s15, [r3]
 8004df4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004ebc <HAL_TIM_PeriodElapsedCallback+0x364>
 8004df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e00:	dd09      	ble.n	8004e16 <HAL_TIM_PeriodElapsedCallback+0x2be>
			rev_pos_error -= 2 * PI;
 8004e02:	4b2d      	ldr	r3, [pc, #180]	@ (8004eb8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8004e04:	edd3 7a00 	vldr	s15, [r3]
 8004e08:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8004e70 <HAL_TIM_PeriodElapsedCallback+0x318>
 8004e0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e10:	4b29      	ldr	r3, [pc, #164]	@ (8004eb8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8004e12:	edc3 7a00 	vstr	s15, [r3]
		}
		if (rev_pos_error < -PI) {
 8004e16:	4b28      	ldr	r3, [pc, #160]	@ (8004eb8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8004e18:	edd3 7a00 	vldr	s15, [r3]
 8004e1c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004ec0 <HAL_TIM_PeriodElapsedCallback+0x368>
 8004e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e28:	d556      	bpl.n	8004ed8 <HAL_TIM_PeriodElapsedCallback+0x380>
 8004e2a:	e04b      	b.n	8004ec4 <HAL_TIM_PeriodElapsedCallback+0x36c>
 8004e2c:	200018a4 	.word	0x200018a4
 8004e30:	20000290 	.word	0x20000290
 8004e34:	46aaaa00 	.word	0x46aaaa00
 8004e38:	44fa0000 	.word	0x44fa0000
 8004e3c:	200002b0 	.word	0x200002b0
 8004e40:	200017b8 	.word	0x200017b8
 8004e44:	00000000 	.word	0x00000000
 8004e48:	200002a4 	.word	0x200002a4
 8004e4c:	200017ac 	.word	0x200017ac
 8004e50:	200002a5 	.word	0x200002a5
 8004e54:	200002a8 	.word	0x200002a8
 8004e58:	477fff00 	.word	0x477fff00
 8004e5c:	200002fc 	.word	0x200002fc
 8004e60:	c6aaaa00 	.word	0xc6aaaa00
 8004e64:	200017b4 	.word	0x200017b4
 8004e68:	20000348 	.word	0x20000348
 8004e6c:	200003a4 	.word	0x200003a4
 8004e70:	40c90fdb 	.word	0x40c90fdb
 8004e74:	20000298 	.word	0x20000298
 8004e78:	20000714 	.word	0x20000714
 8004e7c:	200002a0 	.word	0x200002a0
 8004e80:	20000264 	.word	0x20000264
 8004e84:	20000250 	.word	0x20000250
 8004e88:	20000268 	.word	0x20000268
 8004e8c:	2000026c 	.word	0x2000026c
 8004e90:	20000000 	.word	0x20000000
 8004e94:	2000023c 	.word	0x2000023c
 8004e98:	20000270 	.word	0x20000270
 8004e9c:	20000274 	.word	0x20000274
 8004ea0:	2000029c 	.word	0x2000029c
 8004ea4:	20000288 	.word	0x20000288
 8004ea8:	c77fff00 	.word	0xc77fff00
 8004eac:	20000284 	.word	0x20000284
 8004eb0:	20000d08 	.word	0x20000d08
 8004eb4:	20000280 	.word	0x20000280
 8004eb8:	20000278 	.word	0x20000278
 8004ebc:	40490fdb 	.word	0x40490fdb
 8004ec0:	c0490fdb 	.word	0xc0490fdb
			rev_pos_error += 2 * PI;
 8004ec4:	4b66      	ldr	r3, [pc, #408]	@ (8005060 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8004ec6:	edd3 7a00 	vldr	s15, [r3]
 8004eca:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8005064 <HAL_TIM_PeriodElapsedCallback+0x50c>
 8004ece:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ed2:	4b63      	ldr	r3, [pc, #396]	@ (8005060 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8004ed4:	edc3 7a00 	vstr	s15, [r3]
		}

		rev_cmd_vx = PWM_Satuation(
 8004ed8:	4b61      	ldr	r3, [pc, #388]	@ (8005060 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8004eda:	edd3 7a00 	vldr	s15, [r3]
 8004ede:	eeb0 0a67 	vmov.f32	s0, s15
 8004ee2:	4861      	ldr	r0, [pc, #388]	@ (8005068 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8004ee4:	f7fc f998 	bl	8001218 <PID_CONTROLLER_Compute>
 8004ee8:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_position_pid, rev_pos_error),
				ZGX45RGG_150RPM_Constant.qd_max,
 8004eec:	4b5f      	ldr	r3, [pc, #380]	@ (800506c <HAL_TIM_PeriodElapsedCallback+0x514>)
 8004eee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
		rev_cmd_vx = PWM_Satuation(
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	f7fb fde5 	bl	8000ac4 <__aeabi_d2iz>
 8004efa:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.qd_max);
 8004efc:	4b5b      	ldr	r3, [pc, #364]	@ (800506c <HAL_TIM_PeriodElapsedCallback+0x514>)
 8004efe:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004f02:	4692      	mov	sl, r2
 8004f04:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		rev_cmd_vx = PWM_Satuation(
 8004f08:	4650      	mov	r0, sl
 8004f0a:	4659      	mov	r1, fp
 8004f0c:	f7fb fdda 	bl	8000ac4 <__aeabi_d2iz>
 8004f10:	4603      	mov	r3, r0
 8004f12:	4619      	mov	r1, r3
 8004f14:	4630      	mov	r0, r6
 8004f16:	eeb0 0a48 	vmov.f32	s0, s16
 8004f1a:	f7fc f91b 	bl	8001154 <PWM_Satuation>
 8004f1e:	ee07 0a90 	vmov	s15, r0
 8004f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f26:	4b52      	ldr	r3, [pc, #328]	@ (8005070 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8004f28:	edc3 7a00 	vstr	s15, [r3]

		// Only add velocity feedforward when trajectory is active
		if (revtrajectoryActive) {
 8004f2c:	4b51      	ldr	r3, [pc, #324]	@ (8005074 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d010      	beq.n	8004f56 <HAL_TIM_PeriodElapsedCallback+0x3fe>
			rev_vel_error = rev_cmd_vx + revolute_vel - rev_kal_filt;
 8004f34:	4b4e      	ldr	r3, [pc, #312]	@ (8005070 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8004f36:	ed93 7a00 	vldr	s14, [r3]
 8004f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8005078 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8004f3c:	edd3 7a00 	vldr	s15, [r3]
 8004f40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f44:	4b4d      	ldr	r3, [pc, #308]	@ (800507c <HAL_TIM_PeriodElapsedCallback+0x524>)
 8004f46:	edd3 7a00 	vldr	s15, [r3]
 8004f4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f4e:	4b4c      	ldr	r3, [pc, #304]	@ (8005080 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8004f50:	edc3 7a00 	vstr	s15, [r3]
 8004f54:	e00a      	b.n	8004f6c <HAL_TIM_PeriodElapsedCallback+0x414>
		} else {
			rev_vel_error = rev_cmd_vx - rev_kal_filt;
 8004f56:	4b46      	ldr	r3, [pc, #280]	@ (8005070 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8004f58:	ed93 7a00 	vldr	s14, [r3]
 8004f5c:	4b47      	ldr	r3, [pc, #284]	@ (800507c <HAL_TIM_PeriodElapsedCallback+0x524>)
 8004f5e:	edd3 7a00 	vldr	s15, [r3]
 8004f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f66:	4b46      	ldr	r3, [pc, #280]	@ (8005080 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8004f68:	edc3 7a00 	vstr	s15, [r3]
		}

		rev_cmd_ux = PWM_Satuation(
 8004f6c:	4b44      	ldr	r3, [pc, #272]	@ (8005080 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8004f6e:	edd3 7a00 	vldr	s15, [r3]
 8004f72:	eeb0 0a67 	vmov.f32	s0, s15
 8004f76:	4843      	ldr	r0, [pc, #268]	@ (8005084 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8004f78:	f7fc f94e 	bl	8001218 <PID_CONTROLLER_Compute>
 8004f7c:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid, rev_vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8004f80:	4b3a      	ldr	r3, [pc, #232]	@ (800506c <HAL_TIM_PeriodElapsedCallback+0x514>)
 8004f82:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		rev_cmd_ux = PWM_Satuation(
 8004f86:	4610      	mov	r0, r2
 8004f88:	4619      	mov	r1, r3
 8004f8a:	f7fb fd9b 	bl	8000ac4 <__aeabi_d2iz>
 8004f8e:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8004f90:	4b36      	ldr	r3, [pc, #216]	@ (800506c <HAL_TIM_PeriodElapsedCallback+0x514>)
 8004f92:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8004f96:	4690      	mov	r8, r2
 8004f98:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		rev_cmd_ux = PWM_Satuation(
 8004f9c:	4640      	mov	r0, r8
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	f7fb fd90 	bl	8000ac4 <__aeabi_d2iz>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4630      	mov	r0, r6
 8004faa:	eeb0 0a48 	vmov.f32	s0, s16
 8004fae:	f7fc f8d1 	bl	8001154 <PWM_Satuation>
 8004fb2:	ee07 0a90 	vmov	s15, r0
 8004fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fba:	4b33      	ldr	r3, [pc, #204]	@ (8005088 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8004fbc:	edc3 7a00 	vstr	s15, [r3]

		// Add feed-forward disturbance compensation
		dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd, cur_pos, 0.0,
 8004fc0:	4b32      	ldr	r3, [pc, #200]	@ (800508c <HAL_TIM_PeriodElapsedCallback+0x534>)
 8004fc2:	edd3 7a00 	vldr	s15, [r3]
 8004fc6:	ed9f 1a32 	vldr	s2, [pc, #200]	@ 8005090 <HAL_TIM_PeriodElapsedCallback+0x538>
 8004fca:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8005094 <HAL_TIM_PeriodElapsedCallback+0x53c>
 8004fce:	eeb0 0a67 	vmov.f32	s0, s15
 8004fd2:	4831      	ldr	r0, [pc, #196]	@ (8005098 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8004fd4:	f7fc fad0 	bl	8001578 <REVOLUTE_MOTOR_DFD_Compute>
 8004fd8:	eef0 7a40 	vmov.f32	s15, s0
 8004fdc:	4b2f      	ldr	r3, [pc, #188]	@ (800509c <HAL_TIM_PeriodElapsedCallback+0x544>)
 8004fde:	edc3 7a00 	vstr	s15, [r3]
				0.3);
		rev_cmd_ux += dfd;
 8004fe2:	4b29      	ldr	r3, [pc, #164]	@ (8005088 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8004fe4:	ed93 7a00 	vldr	s14, [r3]
 8004fe8:	4b2c      	ldr	r3, [pc, #176]	@ (800509c <HAL_TIM_PeriodElapsedCallback+0x544>)
 8004fea:	edd3 7a00 	vldr	s15, [r3]
 8004fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ff2:	4b25      	ldr	r3, [pc, #148]	@ (8005088 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8004ff4:	edc3 7a00 	vstr	s15, [r3]

		// Final saturation
		rev_cmd_ux = PWM_Satuation(rev_cmd_ux, ZGX45RGG_150RPM_Constant.U_max,
 8004ff8:	4b23      	ldr	r3, [pc, #140]	@ (8005088 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8004ffa:	ed93 8a00 	vldr	s16, [r3]
 8004ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800506c <HAL_TIM_PeriodElapsedCallback+0x514>)
 8005000:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005004:	4610      	mov	r0, r2
 8005006:	4619      	mov	r1, r3
 8005008:	f7fb fd5c 	bl	8000ac4 <__aeabi_d2iz>
 800500c:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 800500e:	4b17      	ldr	r3, [pc, #92]	@ (800506c <HAL_TIM_PeriodElapsedCallback+0x514>)
 8005010:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005014:	4614      	mov	r4, r2
 8005016:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
		rev_cmd_ux = PWM_Satuation(rev_cmd_ux, ZGX45RGG_150RPM_Constant.U_max,
 800501a:	4620      	mov	r0, r4
 800501c:	4629      	mov	r1, r5
 800501e:	f7fb fd51 	bl	8000ac4 <__aeabi_d2iz>
 8005022:	4603      	mov	r3, r0
 8005024:	4619      	mov	r1, r3
 8005026:	4630      	mov	r0, r6
 8005028:	eeb0 0a48 	vmov.f32	s0, s16
 800502c:	f7fc f892 	bl	8001154 <PWM_Satuation>
 8005030:	ee07 0a90 	vmov	s15, r0
 8005034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005038:	4b13      	ldr	r3, [pc, #76]	@ (8005088 <HAL_TIM_PeriodElapsedCallback+0x530>)
 800503a:	edc3 7a00 	vstr	s15, [r3]

		MDXX_set_range(&revolute_motor, 2000, rev_cmd_ux);
 800503e:	4b12      	ldr	r3, [pc, #72]	@ (8005088 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8005040:	edd3 7a00 	vldr	s15, [r3]
 8005044:	eef0 0a67 	vmov.f32	s1, s15
 8005048:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80050a0 <HAL_TIM_PeriodElapsedCallback+0x548>
 800504c:	4815      	ldr	r0, [pc, #84]	@ (80050a4 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 800504e:	f7fc f999 	bl	8001384 <MDXX_set_range>
//		pris_cmd_ux = PWM_Satuation(pris_cmd_ux, ZGX45RGG_400RPM_Constant.U_max,
//				-ZGX45RGG_400RPM_Constant.U_max);
//
//		MDXX_set_range(&prismatic_motor, 2000, pris_cmd_ux);
	}
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	ecbd 8b02 	vpop	{d8}
 800505c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005060:	20000278 	.word	0x20000278
 8005064:	40c90fdb 	.word	0x40c90fdb
 8005068:	20000450 	.word	0x20000450
 800506c:	20000000 	.word	0x20000000
 8005070:	2000028c 	.word	0x2000028c
 8005074:	20000264 	.word	0x20000264
 8005078:	20000274 	.word	0x20000274
 800507c:	20000280 	.word	0x20000280
 8005080:	2000027c 	.word	0x2000027c
 8005084:	20000478 	.word	0x20000478
 8005088:	20000288 	.word	0x20000288
 800508c:	20000298 	.word	0x20000298
 8005090:	3e99999a 	.word	0x3e99999a
 8005094:	00000000 	.word	0x00000000
 8005098:	200004b0 	.word	0x200004b0
 800509c:	2000029c 	.word	0x2000029c
 80050a0:	44fa0000 	.word	0x44fa0000
 80050a4:	200002fc 	.word	0x200002fc

080050a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80050ac:	b672      	cpsid	i
}
 80050ae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80050b0:	bf00      	nop
 80050b2:	e7fd      	b.n	80050b0 <Error_Handler+0x8>
 80050b4:	0000      	movs	r0, r0
	...

080050b8 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int prox, emer, up_photo, low_photo, up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 80050b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050bc:	ed2d 8b02 	vpush	{d8}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 80050c4:	4bc8      	ldr	r3, [pc, #800]	@ (80053e8 <plotter_begin+0x330>)
 80050c6:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 80050ca:	4bc8      	ldr	r3, [pc, #800]	@ (80053ec <plotter_begin+0x334>)
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fb fa06 	bl	80004e0 <__aeabi_f2d>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4620      	mov	r0, r4
 80050da:	4629      	mov	r1, r5
 80050dc:	f7fb fa58 	bl	8000590 <__aeabi_dmul>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4610      	mov	r0, r2
 80050e6:	4619      	mov	r1, r3
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	4bc0      	ldr	r3, [pc, #768]	@ (80053f0 <plotter_begin+0x338>)
 80050ee:	f7fb fa4f 	bl	8000590 <__aeabi_dmul>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 80050f6:	49bc      	ldr	r1, [pc, #752]	@ (80053e8 <plotter_begin+0x330>)
 80050f8:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 0.5;
 80050fc:	4bba      	ldr	r3, [pc, #744]	@ (80053e8 <plotter_begin+0x330>)
 80050fe:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	4bbb      	ldr	r3, [pc, #748]	@ (80053f4 <plotter_begin+0x33c>)
 8005108:	f7fb fa42 	bl	8000590 <__aeabi_dmul>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	49b5      	ldr	r1, [pc, #724]	@ (80053e8 <plotter_begin+0x330>)
 8005112:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max * (24.0 /36.0) * 0.3;
 8005116:	4bb8      	ldr	r3, [pc, #736]	@ (80053f8 <plotter_begin+0x340>)
 8005118:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800511c:	a3ac      	add	r3, pc, #688	@ (adr r3, 80053d0 <plotter_begin+0x318>)
 800511e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005122:	f7fb fa35 	bl	8000590 <__aeabi_dmul>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4610      	mov	r0, r2
 800512c:	4619      	mov	r1, r3
 800512e:	a3aa      	add	r3, pc, #680	@ (adr r3, 80053d8 <plotter_begin+0x320>)
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f7fb fa2c 	bl	8000590 <__aeabi_dmul>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	49ae      	ldr	r1, [pc, #696]	@ (80053f8 <plotter_begin+0x340>)
 800513e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	ZGX45RGG_150RPM_Constant.qdd_max = ZGX45RGG_150RPM_Constant.qd_max * 0.4;
 8005142:	4bad      	ldr	r3, [pc, #692]	@ (80053f8 <plotter_begin+0x340>)
 8005144:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8005148:	a3a5      	add	r3, pc, #660	@ (adr r3, 80053e0 <plotter_begin+0x328>)
 800514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514e:	f7fb fa1f 	bl	8000590 <__aeabi_dmul>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	49a8      	ldr	r1, [pc, #672]	@ (80053f8 <plotter_begin+0x340>)
 8005158:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 800515c:	2100      	movs	r1, #0
 800515e:	48a7      	ldr	r0, [pc, #668]	@ (80053fc <plotter_begin+0x344>)
 8005160:	f000 fc1e 	bl	80059a0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8005164:	eddf 2aa6 	vldr	s5, [pc, #664]	@ 8005400 <plotter_begin+0x348>
 8005168:	ed9f 2aa6 	vldr	s4, [pc, #664]	@ 8005404 <plotter_begin+0x34c>
 800516c:	eddf 1ab3 	vldr	s3, [pc, #716]	@ 800543c <plotter_begin+0x384>
 8005170:	ed9f 1ab2 	vldr	s2, [pc, #712]	@ 800543c <plotter_begin+0x384>
 8005174:	eddf 0aa4 	vldr	s1, [pc, #656]	@ 8005408 <plotter_begin+0x350>
 8005178:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8005400 <plotter_begin+0x348>
 800517c:	489f      	ldr	r0, [pc, #636]	@ (80053fc <plotter_begin+0x344>)
 800517e:	f000 fc6d 	bl	8005a5c <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8005182:	2102      	movs	r1, #2
 8005184:	48a1      	ldr	r0, [pc, #644]	@ (800540c <plotter_begin+0x354>)
 8005186:	f000 fc0b 	bl	80059a0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 800518a:	ed9f 3a9d 	vldr	s6, [pc, #628]	@ 8005400 <plotter_begin+0x348>
 800518e:	eddf 2a9d 	vldr	s5, [pc, #628]	@ 8005404 <plotter_begin+0x34c>
 8005192:	ed9f 2aaa 	vldr	s4, [pc, #680]	@ 800543c <plotter_begin+0x384>
 8005196:	eddf 1aa9 	vldr	s3, [pc, #676]	@ 800543c <plotter_begin+0x384>
 800519a:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800519e:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 8005408 <plotter_begin+0x350>
 80051a2:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8005400 <plotter_begin+0x348>
 80051a6:	4899      	ldr	r0, [pc, #612]	@ (800540c <plotter_begin+0x354>)
 80051a8:	f000 fc83 	bl	8005ab2 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 80051ac:	2100      	movs	r1, #0
 80051ae:	4898      	ldr	r0, [pc, #608]	@ (8005410 <plotter_begin+0x358>)
 80051b0:	f000 fbf6 	bl	80059a0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 80051b4:	eddf 2a97 	vldr	s5, [pc, #604]	@ 8005414 <plotter_begin+0x35c>
 80051b8:	ed9f 2a97 	vldr	s4, [pc, #604]	@ 8005418 <plotter_begin+0x360>
 80051bc:	eddf 1a9f 	vldr	s3, [pc, #636]	@ 800543c <plotter_begin+0x384>
 80051c0:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 800543c <plotter_begin+0x384>
 80051c4:	eddf 0a90 	vldr	s1, [pc, #576]	@ 8005408 <plotter_begin+0x350>
 80051c8:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 8005414 <plotter_begin+0x35c>
 80051cc:	4890      	ldr	r0, [pc, #576]	@ (8005410 <plotter_begin+0x358>)
 80051ce:	f000 fc45 	bl	8005a5c <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 80051d2:	2102      	movs	r1, #2
 80051d4:	4891      	ldr	r0, [pc, #580]	@ (800541c <plotter_begin+0x364>)
 80051d6:	f000 fbe3 	bl	80059a0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 80051da:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 80051de:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 80051e2:	ed9f 2a96 	vldr	s4, [pc, #600]	@ 800543c <plotter_begin+0x384>
 80051e6:	eddf 1a95 	vldr	s3, [pc, #596]	@ 800543c <plotter_begin+0x384>
 80051ea:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80051ee:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8005408 <plotter_begin+0x350>
 80051f2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80051f6:	4889      	ldr	r0, [pc, #548]	@ (800541c <plotter_begin+0x364>)
 80051f8:	f000 fc5b 	bl	8005ab2 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 80051fc:	2100      	movs	r1, #0
 80051fe:	4888      	ldr	r0, [pc, #544]	@ (8005420 <plotter_begin+0x368>)
 8005200:	f000 fbce 	bl	80059a0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005204:	4b78      	ldr	r3, [pc, #480]	@ (80053e8 <plotter_begin+0x330>)
 8005206:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800520a:	4610      	mov	r0, r2
 800520c:	4619      	mov	r1, r3
 800520e:	f7fb fca1 	bl	8000b54 <__aeabi_d2f>
 8005212:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8005214:	4b74      	ldr	r3, [pc, #464]	@ (80053e8 <plotter_begin+0x330>)
 8005216:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800521a:	4610      	mov	r0, r2
 800521c:	4619      	mov	r1, r3
 800521e:	f7fb fc99 	bl	8000b54 <__aeabi_d2f>
 8005222:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005224:	ee07 3a90 	vmov	s15, r3
 8005228:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 800522c:	4b6e      	ldr	r3, [pc, #440]	@ (80053e8 <plotter_begin+0x330>)
 800522e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005232:	4610      	mov	r0, r2
 8005234:	4619      	mov	r1, r3
 8005236:	f7fb fc8d 	bl	8000b54 <__aeabi_d2f>
 800523a:	4603      	mov	r3, r0
 800523c:	ee02 3a90 	vmov	s5, r3
 8005240:	eeb0 2a48 	vmov.f32	s4, s16
 8005244:	eddf 1a7d 	vldr	s3, [pc, #500]	@ 800543c <plotter_begin+0x384>
 8005248:	ed9f 1a7c 	vldr	s2, [pc, #496]	@ 800543c <plotter_begin+0x384>
 800524c:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 8005408 <plotter_begin+0x350>
 8005250:	ee00 4a10 	vmov	s0, r4
 8005254:	4872      	ldr	r0, [pc, #456]	@ (8005420 <plotter_begin+0x368>)
 8005256:	f000 fc01 	bl	8005a5c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 800525a:	2102      	movs	r1, #2
 800525c:	4871      	ldr	r0, [pc, #452]	@ (8005424 <plotter_begin+0x36c>)
 800525e:	f000 fb9f 	bl	80059a0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005262:	4b61      	ldr	r3, [pc, #388]	@ (80053e8 <plotter_begin+0x330>)
 8005264:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005268:	4610      	mov	r0, r2
 800526a:	4619      	mov	r1, r3
 800526c:	f7fb fc72 	bl	8000b54 <__aeabi_d2f>
 8005270:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8005272:	4b5d      	ldr	r3, [pc, #372]	@ (80053e8 <plotter_begin+0x330>)
 8005274:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005278:	4610      	mov	r0, r2
 800527a:	4619      	mov	r1, r3
 800527c:	f7fb fc6a 	bl	8000b54 <__aeabi_d2f>
 8005280:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 800528a:	4b57      	ldr	r3, [pc, #348]	@ (80053e8 <plotter_begin+0x330>)
 800528c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005290:	4610      	mov	r0, r2
 8005292:	4619      	mov	r1, r3
 8005294:	f7fb fc5e 	bl	8000b54 <__aeabi_d2f>
 8005298:	4603      	mov	r3, r0
 800529a:	ee03 3a10 	vmov	s6, r3
 800529e:	eef0 2a48 	vmov.f32	s5, s16
 80052a2:	ed9f 2a66 	vldr	s4, [pc, #408]	@ 800543c <plotter_begin+0x384>
 80052a6:	eddf 1a65 	vldr	s3, [pc, #404]	@ 800543c <plotter_begin+0x384>
 80052aa:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80052ae:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8005408 <plotter_begin+0x350>
 80052b2:	ee00 4a10 	vmov	s0, r4
 80052b6:	485b      	ldr	r0, [pc, #364]	@ (8005424 <plotter_begin+0x36c>)
 80052b8:	f000 fbfb 	bl	8005ab2 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 80052bc:	2100      	movs	r1, #0
 80052be:	485a      	ldr	r0, [pc, #360]	@ (8005428 <plotter_begin+0x370>)
 80052c0:	f000 fb6e 	bl	80059a0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80052c4:	4b4c      	ldr	r3, [pc, #304]	@ (80053f8 <plotter_begin+0x340>)
 80052c6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80052ca:	4610      	mov	r0, r2
 80052cc:	4619      	mov	r1, r3
 80052ce:	f7fb fc41 	bl	8000b54 <__aeabi_d2f>
 80052d2:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 80052d4:	4b48      	ldr	r3, [pc, #288]	@ (80053f8 <plotter_begin+0x340>)
 80052d6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80052da:	4610      	mov	r0, r2
 80052dc:	4619      	mov	r1, r3
 80052de:	f7fb fc39 	bl	8000b54 <__aeabi_d2f>
 80052e2:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80052e4:	ee07 3a90 	vmov	s15, r3
 80052e8:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 80052ec:	4b42      	ldr	r3, [pc, #264]	@ (80053f8 <plotter_begin+0x340>)
 80052ee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80052f2:	4610      	mov	r0, r2
 80052f4:	4619      	mov	r1, r3
 80052f6:	f7fb fc2d 	bl	8000b54 <__aeabi_d2f>
 80052fa:	4603      	mov	r3, r0
 80052fc:	ee02 3a90 	vmov	s5, r3
 8005300:	eeb0 2a48 	vmov.f32	s4, s16
 8005304:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 800543c <plotter_begin+0x384>
 8005308:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 800543c <plotter_begin+0x384>
 800530c:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8005408 <plotter_begin+0x350>
 8005310:	ee00 4a10 	vmov	s0, r4
 8005314:	4844      	ldr	r0, [pc, #272]	@ (8005428 <plotter_begin+0x370>)
 8005316:	f000 fba1 	bl	8005a5c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 800531a:	2102      	movs	r1, #2
 800531c:	4843      	ldr	r0, [pc, #268]	@ (800542c <plotter_begin+0x374>)
 800531e:	f000 fb3f 	bl	80059a0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005322:	4b35      	ldr	r3, [pc, #212]	@ (80053f8 <plotter_begin+0x340>)
 8005324:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005328:	4610      	mov	r0, r2
 800532a:	4619      	mov	r1, r3
 800532c:	f7fb fc12 	bl	8000b54 <__aeabi_d2f>
 8005330:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8005332:	4b31      	ldr	r3, [pc, #196]	@ (80053f8 <plotter_begin+0x340>)
 8005334:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005338:	4610      	mov	r0, r2
 800533a:	4619      	mov	r1, r3
 800533c:	f7fb fc0a 	bl	8000b54 <__aeabi_d2f>
 8005340:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 800534a:	4b2b      	ldr	r3, [pc, #172]	@ (80053f8 <plotter_begin+0x340>)
 800534c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005350:	4610      	mov	r0, r2
 8005352:	4619      	mov	r1, r3
 8005354:	f7fb fbfe 	bl	8000b54 <__aeabi_d2f>
 8005358:	4603      	mov	r3, r0
 800535a:	ee03 3a10 	vmov	s6, r3
 800535e:	eef0 2a48 	vmov.f32	s5, s16
 8005362:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 800543c <plotter_begin+0x384>
 8005366:	eddf 1a35 	vldr	s3, [pc, #212]	@ 800543c <plotter_begin+0x384>
 800536a:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800536e:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8005408 <plotter_begin+0x350>
 8005372:	ee00 4a10 	vmov	s0, r4
 8005376:	482d      	ldr	r0, [pc, #180]	@ (800542c <plotter_begin+0x374>)
 8005378:	f000 fb9b 	bl	8005ab2 <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 800537c:	482c      	ldr	r0, [pc, #176]	@ (8005430 <plotter_begin+0x378>)
 800537e:	f7fe fecf 	bl	8004120 <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 8005382:	4b1a      	ldr	r3, [pc, #104]	@ (80053ec <plotter_begin+0x334>)
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	4618      	mov	r0, r3
 8005388:	f7fb f8aa 	bl	80004e0 <__aeabi_f2d>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	f7fa ff48 	bl	8000224 <__adddf3>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4610      	mov	r0, r2
 800539a:	4619      	mov	r1, r3
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	4b13      	ldr	r3, [pc, #76]	@ (80053f0 <plotter_begin+0x338>)
 80053a2:	f7fb f8f5 	bl	8000590 <__aeabi_dmul>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 80053aa:	4610      	mov	r0, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	f7fb fbd1 	bl	8000b54 <__aeabi_d2f>
 80053b2:	4603      	mov	r3, r0
 80053b4:	ee00 3a90 	vmov	s1, r3
 80053b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80053bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80053c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80053c4:	491b      	ldr	r1, [pc, #108]	@ (8005434 <plotter_begin+0x37c>)
 80053c6:	481c      	ldr	r0, [pc, #112]	@ (8005438 <plotter_begin+0x380>)
 80053c8:	f7fe f824 	bl	8003414 <QEI_init>
 80053cc:	e038      	b.n	8005440 <plotter_begin+0x388>
 80053ce:	bf00      	nop
 80053d0:	55555555 	.word	0x55555555
 80053d4:	3fe55555 	.word	0x3fe55555
 80053d8:	33333333 	.word	0x33333333
 80053dc:	3fd33333 	.word	0x3fd33333
 80053e0:	9999999a 	.word	0x9999999a
 80053e4:	3fd99999 	.word	0x3fd99999
 80053e8:	20000060 	.word	0x20000060
 80053ec:	200000c0 	.word	0x200000c0
 80053f0:	408f4000 	.word	0x408f4000
 80053f4:	3fe00000 	.word	0x3fe00000
 80053f8:	20000000 	.word	0x20000000
 80053fc:	200004f4 	.word	0x200004f4
 8005400:	477fff00 	.word	0x477fff00
 8005404:	c77fff00 	.word	0xc77fff00
 8005408:	3dcccccd 	.word	0x3dcccccd
 800540c:	20000538 	.word	0x20000538
 8005410:	2000057c 	.word	0x2000057c
 8005414:	4083d70a 	.word	0x4083d70a
 8005418:	c083d70a 	.word	0xc083d70a
 800541c:	200005c0 	.word	0x200005c0
 8005420:	20000604 	.word	0x20000604
 8005424:	20000648 	.word	0x20000648
 8005428:	2000068c 	.word	0x2000068c
 800542c:	200006d0 	.word	0x200006d0
 8005430:	20000714 	.word	0x20000714
 8005434:	20001970 	.word	0x20001970
 8005438:	20000348 	.word	0x20000348
 800543c:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8005440:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 800543c <plotter_begin+0x384>
 8005444:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005448:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800544c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005450:	49ae      	ldr	r1, [pc, #696]	@ (800570c <plotter_begin+0x654>)
 8005452:	48af      	ldr	r0, [pc, #700]	@ (8005710 <plotter_begin+0x658>)
 8005454:	f7fd ffde 	bl	8003414 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8005458:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005462:	2204      	movs	r2, #4
 8005464:	49ab      	ldr	r1, [pc, #684]	@ (8005714 <plotter_begin+0x65c>)
 8005466:	48ac      	ldr	r0, [pc, #688]	@ (8005718 <plotter_begin+0x660>)
 8005468:	f7fb ff68 	bl	800133c <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 800546c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	4baa      	ldr	r3, [pc, #680]	@ (800571c <plotter_begin+0x664>)
 8005474:	2200      	movs	r2, #0
 8005476:	49a7      	ldr	r1, [pc, #668]	@ (8005714 <plotter_begin+0x65c>)
 8005478:	48a9      	ldr	r0, [pc, #676]	@ (8005720 <plotter_begin+0x668>)
 800547a:	f7fb ff5f 	bl	800133c <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 800547e:	220c      	movs	r2, #12
 8005480:	49a8      	ldr	r1, [pc, #672]	@ (8005724 <plotter_begin+0x66c>)
 8005482:	48a9      	ldr	r0, [pc, #676]	@ (8005728 <plotter_begin+0x670>)
 8005484:	f7fd fd9a 	bl	8002fbc <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8005488:	eddf 0aa8 	vldr	s1, [pc, #672]	@ 800572c <plotter_begin+0x674>
 800548c:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 8005730 <plotter_begin+0x678>
 8005490:	48a1      	ldr	r0, [pc, #644]	@ (8005718 <plotter_begin+0x660>)
 8005492:	f7fb ff77 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8005496:	eddf 0aa5 	vldr	s1, [pc, #660]	@ 800572c <plotter_begin+0x674>
 800549a:	ed9f 0aa5 	vldr	s0, [pc, #660]	@ 8005730 <plotter_begin+0x678>
 800549e:	48a0      	ldr	r0, [pc, #640]	@ (8005720 <plotter_begin+0x668>)
 80054a0:	f7fb ff70 	bl	8001384 <MDXX_set_range>
	plotter_pen_up();
 80054a4:	f000 fa6c 	bl	8005980 <plotter_pen_up>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 75,
			ZGX45RGG_400RPM_Constant.sd_max);
 80054a8:	4ba2      	ldr	r3, [pc, #648]	@ (8005734 <plotter_begin+0x67c>)
 80054aa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 75,
 80054ae:	4610      	mov	r0, r2
 80054b0:	4619      	mov	r1, r3
 80054b2:	f7fb fb4f 	bl	8000b54 <__aeabi_d2f>
 80054b6:	4603      	mov	r3, r0
 80054b8:	ee01 3a90 	vmov	s3, r3
 80054bc:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 8005738 <plotter_begin+0x680>
 80054c0:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 800573c <plotter_begin+0x684>
 80054c4:	ed9f 0a9c 	vldr	s0, [pc, #624]	@ 8005738 <plotter_begin+0x680>
 80054c8:	489d      	ldr	r0, [pc, #628]	@ (8005740 <plotter_begin+0x688>)
 80054ca:	f7fb fe72 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 80054ce:	4b99      	ldr	r3, [pc, #612]	@ (8005734 <plotter_begin+0x67c>)
 80054d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 80054d4:	4610      	mov	r0, r2
 80054d6:	4619      	mov	r1, r3
 80054d8:	f7fb fb3c 	bl	8000b54 <__aeabi_d2f>
 80054dc:	4603      	mov	r3, r0
 80054de:	ee01 3a90 	vmov	s3, r3
 80054e2:	ed9f 1a92 	vldr	s2, [pc, #584]	@ 800572c <plotter_begin+0x674>
 80054e6:	eddf 0a97 	vldr	s1, [pc, #604]	@ 8005744 <plotter_begin+0x68c>
 80054ea:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8005748 <plotter_begin+0x690>
 80054ee:	4897      	ldr	r0, [pc, #604]	@ (800574c <plotter_begin+0x694>)
 80054f0:	f7fb fe5f 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 25, 1e-10, 10, // 100 1000
			ZGX45RGG_150RPM_Constant.qd_max);
 80054f4:	4b96      	ldr	r3, [pc, #600]	@ (8005750 <plotter_begin+0x698>)
 80054f6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 25, 1e-10, 10, // 100 1000
 80054fa:	4610      	mov	r0, r2
 80054fc:	4619      	mov	r1, r3
 80054fe:	f7fb fb29 	bl	8000b54 <__aeabi_d2f>
 8005502:	4603      	mov	r3, r0
 8005504:	ee01 3a90 	vmov	s3, r3
 8005508:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800550c:	eddf 0a8b 	vldr	s1, [pc, #556]	@ 800573c <plotter_begin+0x684>
 8005510:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005514:	488f      	ldr	r0, [pc, #572]	@ (8005754 <plotter_begin+0x69c>)
 8005516:	f7fb fe4c 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 3000, 200, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 800551a:	4b8d      	ldr	r3, [pc, #564]	@ (8005750 <plotter_begin+0x698>)
 800551c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 3000, 200, 0,
 8005520:	4610      	mov	r0, r2
 8005522:	4619      	mov	r1, r3
 8005524:	f7fb fb16 	bl	8000b54 <__aeabi_d2f>
 8005528:	4603      	mov	r3, r0
 800552a:	ee01 3a90 	vmov	s3, r3
 800552e:	ed9f 1a7f 	vldr	s2, [pc, #508]	@ 800572c <plotter_begin+0x674>
 8005532:	eddf 0a89 	vldr	s1, [pc, #548]	@ 8005758 <plotter_begin+0x6a0>
 8005536:	ed9f 0a89 	vldr	s0, [pc, #548]	@ 800575c <plotter_begin+0x6a4>
 800553a:	4889      	ldr	r0, [pc, #548]	@ (8005760 <plotter_begin+0x6a8>)
 800553c:	f7fb fe39 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8005540:	4983      	ldr	r1, [pc, #524]	@ (8005750 <plotter_begin+0x698>)
 8005542:	4888      	ldr	r0, [pc, #544]	@ (8005764 <plotter_begin+0x6ac>)
 8005544:	f7fb fff8 	bl	8001538 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8005548:	497a      	ldr	r1, [pc, #488]	@ (8005734 <plotter_begin+0x67c>)
 800554a:	4887      	ldr	r0, [pc, #540]	@ (8005768 <plotter_begin+0x6b0>)
 800554c:	f7fc f902 	bl	8001754 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8005550:	4a86      	ldr	r2, [pc, #536]	@ (800576c <plotter_begin+0x6b4>)
 8005552:	497f      	ldr	r1, [pc, #508]	@ (8005750 <plotter_begin+0x698>)
 8005554:	4886      	ldr	r0, [pc, #536]	@ (8005770 <plotter_begin+0x6b8>)
 8005556:	f7fb fffd 	bl	8001554 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 800555a:	4a84      	ldr	r2, [pc, #528]	@ (800576c <plotter_begin+0x6b4>)
 800555c:	4975      	ldr	r1, [pc, #468]	@ (8005734 <plotter_begin+0x67c>)
 800555e:	4885      	ldr	r0, [pc, #532]	@ (8005774 <plotter_begin+0x6bc>)
 8005560:	f7fc f906 	bl	8001770 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 8005564:	2302      	movs	r3, #2
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	eddf 0a83 	vldr	s1, [pc, #524]	@ 8005778 <plotter_begin+0x6c0>
 800556c:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 800577c <plotter_begin+0x6c4>
 8005570:	2364      	movs	r3, #100	@ 0x64
 8005572:	4a83      	ldr	r2, [pc, #524]	@ (8005780 <plotter_begin+0x6c8>)
 8005574:	4983      	ldr	r1, [pc, #524]	@ (8005784 <plotter_begin+0x6cc>)
 8005576:	4884      	ldr	r0, [pc, #528]	@ (8005788 <plotter_begin+0x6d0>)
 8005578:	f7fb fcd2 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 800557c:	2105      	movs	r1, #5
 800557e:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 800578c <plotter_begin+0x6d4>
 8005582:	4881      	ldr	r0, [pc, #516]	@ (8005788 <plotter_begin+0x6d0>)
 8005584:	f7fb fd7e 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 8005588:	487f      	ldr	r0, [pc, #508]	@ (8005788 <plotter_begin+0x6d0>)
 800558a:	f7fb fd21 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800558e:	eddf 0a80 	vldr	s1, [pc, #512]	@ 8005790 <plotter_begin+0x6d8>
 8005592:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005596:	211f      	movs	r1, #31
 8005598:	487e      	ldr	r0, [pc, #504]	@ (8005794 <plotter_begin+0x6dc>)
 800559a:	f7fc f8fb 	bl	8001794 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800559e:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 8005790 <plotter_begin+0x6d8>
 80055a2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80055a6:	211f      	movs	r1, #31
 80055a8:	487b      	ldr	r0, [pc, #492]	@ (8005798 <plotter_begin+0x6e0>)
 80055aa:	f7fc f8f3 	bl	8001794 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80055ae:	eddf 0a78 	vldr	s1, [pc, #480]	@ 8005790 <plotter_begin+0x6d8>
 80055b2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80055b6:	211f      	movs	r1, #31
 80055b8:	4878      	ldr	r0, [pc, #480]	@ (800579c <plotter_begin+0x6e4>)
 80055ba:	f7fc f8eb 	bl	8001794 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80055be:	eddf 0a74 	vldr	s1, [pc, #464]	@ 8005790 <plotter_begin+0x6d8>
 80055c2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80055c6:	211f      	movs	r1, #31
 80055c8:	4875      	ldr	r0, [pc, #468]	@ (80057a0 <plotter_begin+0x6e8>)
 80055ca:	f7fc f8e3 	bl	8001794 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80055ce:	4b59      	ldr	r3, [pc, #356]	@ (8005734 <plotter_begin+0x67c>)
 80055d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055d4:	4610      	mov	r0, r2
 80055d6:	4619      	mov	r1, r3
 80055d8:	f7fb fabc 	bl	8000b54 <__aeabi_d2f>
 80055dc:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80055de:	4b55      	ldr	r3, [pc, #340]	@ (8005734 <plotter_begin+0x67c>)
 80055e0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80055e4:	4610      	mov	r0, r2
 80055e6:	4619      	mov	r1, r3
 80055e8:	f7fb fab4 	bl	8000b54 <__aeabi_d2f>
 80055ec:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80055ee:	4b51      	ldr	r3, [pc, #324]	@ (8005734 <plotter_begin+0x67c>)
 80055f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80055f4:	4610      	mov	r0, r2
 80055f6:	4619      	mov	r1, r3
 80055f8:	f7fb faac 	bl	8000b54 <__aeabi_d2f>
 80055fc:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 80055fe:	4b4d      	ldr	r3, [pc, #308]	@ (8005734 <plotter_begin+0x67c>)
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8005604:	4610      	mov	r0, r2
 8005606:	4619      	mov	r1, r3
 8005608:	f7fb faa4 	bl	8000b54 <__aeabi_d2f>
 800560c:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 800560e:	4b49      	ldr	r3, [pc, #292]	@ (8005734 <plotter_begin+0x67c>)
 8005610:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8005614:	4610      	mov	r0, r2
 8005616:	4619      	mov	r1, r3
 8005618:	f7fb fa9c 	bl	8000b54 <__aeabi_d2f>
 800561c:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 800561e:	4b45      	ldr	r3, [pc, #276]	@ (8005734 <plotter_begin+0x67c>)
 8005620:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8005624:	4610      	mov	r0, r2
 8005626:	4619      	mov	r1, r3
 8005628:	f7fb fa94 	bl	8000b54 <__aeabi_d2f>
 800562c:	4603      	mov	r3, r0
 800562e:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8005632:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8005636:	ee03 3a10 	vmov	s6, r3
 800563a:	ee02 9a90 	vmov	s5, r9
 800563e:	ee02 8a10 	vmov	s4, r8
 8005642:	ee01 6a90 	vmov	s3, r6
 8005646:	ee01 5a10 	vmov	s2, r5
 800564a:	ee00 4a90 	vmov	s1, r4
 800564e:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 80057a4 <plotter_begin+0x6ec>
 8005652:	4855      	ldr	r0, [pc, #340]	@ (80057a8 <plotter_begin+0x6f0>)
 8005654:	f7fc fa9e 	bl	8001b94 <MotorKalman_Init>

	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8005658:	4b3d      	ldr	r3, [pc, #244]	@ (8005750 <plotter_begin+0x698>)
 800565a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800565e:	4610      	mov	r0, r2
 8005660:	4619      	mov	r1, r3
 8005662:	f7fb fa77 	bl	8000b54 <__aeabi_d2f>
 8005666:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.B, ZGX45RGG_150RPM_Constant.Kt,
 8005668:	4b39      	ldr	r3, [pc, #228]	@ (8005750 <plotter_begin+0x698>)
 800566a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 800566e:	4610      	mov	r0, r2
 8005670:	4619      	mov	r1, r3
 8005672:	f7fb fa6f 	bl	8000b54 <__aeabi_d2f>
 8005676:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.B, ZGX45RGG_150RPM_Constant.Kt,
 8005678:	4b35      	ldr	r3, [pc, #212]	@ (8005750 <plotter_begin+0x698>)
 800567a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 800567e:	4610      	mov	r0, r2
 8005680:	4619      	mov	r1, r3
 8005682:	f7fb fa67 	bl	8000b54 <__aeabi_d2f>
 8005686:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 8005688:	4b31      	ldr	r3, [pc, #196]	@ (8005750 <plotter_begin+0x698>)
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 800568e:	4610      	mov	r0, r2
 8005690:	4619      	mov	r1, r3
 8005692:	f7fb fa5f 	bl	8000b54 <__aeabi_d2f>
 8005696:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 8005698:	4b2d      	ldr	r3, [pc, #180]	@ (8005750 <plotter_begin+0x698>)
 800569a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 800569e:	4610      	mov	r0, r2
 80056a0:	4619      	mov	r1, r3
 80056a2:	f7fb fa57 	bl	8000b54 <__aeabi_d2f>
 80056a6:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.L, 1.0, 1.0);
 80056a8:	4b29      	ldr	r3, [pc, #164]	@ (8005750 <plotter_begin+0x698>)
 80056aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80056ae:	4610      	mov	r0, r2
 80056b0:	4619      	mov	r1, r3
 80056b2:	f7fb fa4f 	bl	8000b54 <__aeabi_d2f>
 80056b6:	4603      	mov	r3, r0
 80056b8:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 80056bc:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80056c0:	ee03 3a10 	vmov	s6, r3
 80056c4:	ee02 9a90 	vmov	s5, r9
 80056c8:	ee02 8a10 	vmov	s4, r8
 80056cc:	ee01 6a90 	vmov	s3, r6
 80056d0:	ee01 5a10 	vmov	s2, r5
 80056d4:	ee00 4a90 	vmov	s1, r4
 80056d8:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 80057a4 <plotter_begin+0x6ec>
 80056dc:	4833      	ldr	r0, [pc, #204]	@ (80057ac <plotter_begin+0x6f4>)
 80056de:	f7fc fa59 	bl	8001b94 <MotorKalman_Init>

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 80056e2:	23c8      	movs	r3, #200	@ 0xc8
 80056e4:	9301      	str	r3, [sp, #4]
 80056e6:	2315      	movs	r3, #21
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	4b31      	ldr	r3, [pc, #196]	@ (80057b0 <plotter_begin+0x6f8>)
 80056ec:	4a31      	ldr	r2, [pc, #196]	@ (80057b4 <plotter_begin+0x6fc>)
 80056ee:	4932      	ldr	r1, [pc, #200]	@ (80057b8 <plotter_begin+0x700>)
 80056f0:	4832      	ldr	r0, [pc, #200]	@ (80057bc <plotter_begin+0x704>)
 80056f2:	f7fc f9e7 	bl	8001ac4 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80056f6:	4832      	ldr	r0, [pc, #200]	@ (80057c0 <plotter_begin+0x708>)
 80056f8:	f004 fd74 	bl	800a1e4 <HAL_TIM_Base_Start_IT>
}
 80056fc:	bf00      	nop
 80056fe:	3704      	adds	r7, #4
 8005700:	46bd      	mov	sp, r7
 8005702:	ecbd 8b02 	vpop	{d8}
 8005706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800570a:	bf00      	nop
 800570c:	20001a3c 	.word	0x20001a3c
 8005710:	200003a4 	.word	0x200003a4
 8005714:	20001bd4 	.word	0x20001bd4
 8005718:	200002b0 	.word	0x200002b0
 800571c:	48000800 	.word	0x48000800
 8005720:	200002fc 	.word	0x200002fc
 8005724:	200017d8 	.word	0x200017d8
 8005728:	200004b8 	.word	0x200004b8
 800572c:	00000000 	.word	0x00000000
 8005730:	44fa0000 	.word	0x44fa0000
 8005734:	20000060 	.word	0x20000060
 8005738:	42960000 	.word	0x42960000
 800573c:	2edbe6ff 	.word	0x2edbe6ff
 8005740:	20000400 	.word	0x20000400
 8005744:	3727c5ac 	.word	0x3727c5ac
 8005748:	43160000 	.word	0x43160000
 800574c:	20000428 	.word	0x20000428
 8005750:	20000000 	.word	0x20000000
 8005754:	20000450 	.word	0x20000450
 8005758:	43480000 	.word	0x43480000
 800575c:	453b8000 	.word	0x453b8000
 8005760:	20000478 	.word	0x20000478
 8005764:	200004ac 	.word	0x200004ac
 8005768:	200004a0 	.word	0x200004a0
 800576c:	200000c0 	.word	0x200000c0
 8005770:	200004b0 	.word	0x200004b0
 8005774:	200004a4 	.word	0x200004a4
 8005778:	457ff000 	.word	0x457ff000
 800577c:	40533333 	.word	0x40533333
 8005780:	20001074 	.word	0x20001074
 8005784:	20000170 	.word	0x20000170
 8005788:	200004d0 	.word	0x200004d0
 800578c:	45000000 	.word	0x45000000
 8005790:	447a0000 	.word	0x447a0000
 8005794:	20000978 	.word	0x20000978
 8005798:	2000096c 	.word	0x2000096c
 800579c:	20000990 	.word	0x20000990
 80057a0:	20000984 	.word	0x20000984
 80057a4:	3a83126f 	.word	0x3a83126f
 80057a8:	2000099c 	.word	0x2000099c
 80057ac:	20000d08 	.word	0x20000d08
 80057b0:	20001614 	.word	0x20001614
 80057b4:	20001ca0 	.word	0x20001ca0
 80057b8:	20001e38 	.word	0x20001e38
 80057bc:	2000113c 	.word	0x2000113c
 80057c0:	200018a4 	.word	0x200018a4

080057c4 <plotter_update_sensors>:
void plotter_reset() {
	QEI_reset(&prismatic_encoder);
	QEI_reset(&revolute_encoder);
}

void plotter_update_sensors() {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 80057c8:	eddf 0a59 	vldr	s1, [pc, #356]	@ 8005930 <plotter_update_sensors+0x16c>
 80057cc:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8005934 <plotter_update_sensors+0x170>
 80057d0:	2106      	movs	r1, #6
 80057d2:	4859      	ldr	r0, [pc, #356]	@ (8005938 <plotter_update_sensors+0x174>)
 80057d4:	f7fb fc80 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 80057d8:	eef0 7a40 	vmov.f32	s15, s0
 80057dc:	4b57      	ldr	r3, [pc, #348]	@ (800593c <plotter_update_sensors+0x178>)
 80057de:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 80057e2:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8005930 <plotter_update_sensors+0x16c>
 80057e6:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8005934 <plotter_update_sensors+0x170>
 80057ea:	2107      	movs	r1, #7
 80057ec:	4852      	ldr	r0, [pc, #328]	@ (8005938 <plotter_update_sensors+0x174>)
 80057ee:	f7fb fc73 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 80057f2:	eef0 7a40 	vmov.f32	s15, s0
 80057f6:	4b52      	ldr	r3, [pc, #328]	@ (8005940 <plotter_update_sensors+0x17c>)
 80057f8:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 80057fc:	2180      	movs	r1, #128	@ 0x80
 80057fe:	4851      	ldr	r0, [pc, #324]	@ (8005944 <plotter_update_sensors+0x180>)
 8005800:	f003 fba4 	bl	8008f4c <HAL_GPIO_ReadPin>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	bf0c      	ite	eq
 800580a:	2301      	moveq	r3, #1
 800580c:	2300      	movne	r3, #0
 800580e:	b2db      	uxtb	r3, r3
 8005810:	461a      	mov	r2, r3
 8005812:	4b4d      	ldr	r3, [pc, #308]	@ (8005948 <plotter_update_sensors+0x184>)
 8005814:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8005816:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800581a:	484c      	ldr	r0, [pc, #304]	@ (800594c <plotter_update_sensors+0x188>)
 800581c:	f003 fb96 	bl	8008f4c <HAL_GPIO_ReadPin>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	bf0c      	ite	eq
 8005826:	2301      	moveq	r3, #1
 8005828:	2300      	movne	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	4b48      	ldr	r3, [pc, #288]	@ (8005950 <plotter_update_sensors+0x18c>)
 8005830:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8005832:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005836:	4845      	ldr	r0, [pc, #276]	@ (800594c <plotter_update_sensors+0x188>)
 8005838:	f003 fb88 	bl	8008f4c <HAL_GPIO_ReadPin>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	bf0c      	ite	eq
 8005842:	2301      	moveq	r3, #1
 8005844:	2300      	movne	r3, #0
 8005846:	b2db      	uxtb	r3, r3
 8005848:	461a      	mov	r2, r3
 800584a:	4b42      	ldr	r3, [pc, #264]	@ (8005954 <plotter_update_sensors+0x190>)
 800584c:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 800584e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005852:	483e      	ldr	r0, [pc, #248]	@ (800594c <plotter_update_sensors+0x188>)
 8005854:	f003 fb7a 	bl	8008f4c <HAL_GPIO_ReadPin>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	bf0c      	ite	eq
 800585e:	2301      	moveq	r3, #1
 8005860:	2300      	movne	r3, #0
 8005862:	b2db      	uxtb	r3, r3
 8005864:	461a      	mov	r2, r3
 8005866:	4b3c      	ldr	r3, [pc, #240]	@ (8005958 <plotter_update_sensors+0x194>)
 8005868:	601a      	str	r2, [r3, #0]

	prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 800586a:	2120      	movs	r1, #32
 800586c:	4835      	ldr	r0, [pc, #212]	@ (8005944 <plotter_update_sensors+0x180>)
 800586e:	f003 fb6d 	bl	8008f4c <HAL_GPIO_ReadPin>
 8005872:	4603      	mov	r3, r0
 8005874:	461a      	mov	r2, r3
 8005876:	4b39      	ldr	r3, [pc, #228]	@ (800595c <plotter_update_sensors+0x198>)
 8005878:	601a      	str	r2, [r3, #0]
	up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 800587a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800587e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005882:	f003 fb63 	bl	8008f4c <HAL_GPIO_ReadPin>
 8005886:	4603      	mov	r3, r0
 8005888:	461a      	mov	r2, r3
 800588a:	4b35      	ldr	r3, [pc, #212]	@ (8005960 <plotter_update_sensors+0x19c>)
 800588c:	601a      	str	r2, [r3, #0]
	low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 800588e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005892:	482c      	ldr	r0, [pc, #176]	@ (8005944 <plotter_update_sensors+0x180>)
 8005894:	f003 fb5a 	bl	8008f4c <HAL_GPIO_ReadPin>
 8005898:	4603      	mov	r3, r0
 800589a:	461a      	mov	r2, r3
 800589c:	4b31      	ldr	r3, [pc, #196]	@ (8005964 <plotter_update_sensors+0x1a0>)
 800589e:	601a      	str	r2, [r3, #0]
	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 80058a0:	2104      	movs	r1, #4
 80058a2:	4828      	ldr	r0, [pc, #160]	@ (8005944 <plotter_update_sensors+0x180>)
 80058a4:	f003 fb52 	bl	8008f4c <HAL_GPIO_ReadPin>
 80058a8:	4603      	mov	r3, r0
 80058aa:	461a      	mov	r2, r3
 80058ac:	4b2e      	ldr	r3, [pc, #184]	@ (8005968 <plotter_update_sensors+0x1a4>)
 80058ae:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 80058b0:	2102      	movs	r1, #2
 80058b2:	4824      	ldr	r0, [pc, #144]	@ (8005944 <plotter_update_sensors+0x180>)
 80058b4:	f003 fb4a 	bl	8008f4c <HAL_GPIO_ReadPin>
 80058b8:	4603      	mov	r3, r0
 80058ba:	461a      	mov	r2, r3
 80058bc:	4b2b      	ldr	r3, [pc, #172]	@ (800596c <plotter_update_sensors+0x1a8>)
 80058be:	601a      	str	r2, [r3, #0]

	emer = !HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 80058c0:	2110      	movs	r1, #16
 80058c2:	4820      	ldr	r0, [pc, #128]	@ (8005944 <plotter_update_sensors+0x180>)
 80058c4:	f003 fb42 	bl	8008f4c <HAL_GPIO_ReadPin>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	bf0c      	ite	eq
 80058ce:	2301      	moveq	r3, #1
 80058d0:	2300      	movne	r3, #0
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	4b26      	ldr	r3, [pc, #152]	@ (8005970 <plotter_update_sensors+0x1ac>)
 80058d8:	601a      	str	r2, [r3, #0]

	if (up_lim) {
 80058da:	4b23      	ldr	r3, [pc, #140]	@ (8005968 <plotter_update_sensors+0x1a4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <plotter_update_sensors+0x126>
		servo_state = PEN_UP;
 80058e2:	4b24      	ldr	r3, [pc, #144]	@ (8005974 <plotter_update_sensors+0x1b0>)
 80058e4:	2202      	movs	r2, #2
 80058e6:	701a      	strb	r2, [r3, #0]
 80058e8:	e00a      	b.n	8005900 <plotter_update_sensors+0x13c>
	} else if (low_lim) {
 80058ea:	4b20      	ldr	r3, [pc, #128]	@ (800596c <plotter_update_sensors+0x1a8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <plotter_update_sensors+0x136>
		servo_state = PEN_DOWN;
 80058f2:	4b20      	ldr	r3, [pc, #128]	@ (8005974 <plotter_update_sensors+0x1b0>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	e002      	b.n	8005900 <plotter_update_sensors+0x13c>
	} else {
		servo_state = PEN_IDLE;
 80058fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005974 <plotter_update_sensors+0x1b0>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]
	}

	if (up_photo) {
 8005900:	4b17      	ldr	r3, [pc, #92]	@ (8005960 <plotter_update_sensors+0x19c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <plotter_update_sensors+0x14c>
		prismatic_state = PP_AT_TOP_END_POSITION;
 8005908:	4b1b      	ldr	r3, [pc, #108]	@ (8005978 <plotter_update_sensors+0x1b4>)
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	e006      	b.n	800591e <plotter_update_sensors+0x15a>
	} else if (low_photo) {
 8005910:	4b14      	ldr	r3, [pc, #80]	@ (8005964 <plotter_update_sensors+0x1a0>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <plotter_update_sensors+0x15a>
		prismatic_state = PP_AT_BOTTOM_END_POSITION;
 8005918:	4b17      	ldr	r3, [pc, #92]	@ (8005978 <plotter_update_sensors+0x1b4>)
 800591a:	2202      	movs	r2, #2
 800591c:	701a      	strb	r2, [r3, #0]
	}

	if (prox) {
 800591e:	4b0f      	ldr	r3, [pc, #60]	@ (800595c <plotter_update_sensors+0x198>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <plotter_update_sensors+0x168>
		revolute_state = RP_AT_HOME_POSITION;
 8005926:	4b15      	ldr	r3, [pc, #84]	@ (800597c <plotter_update_sensors+0x1b8>)
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
	}

//    prismatic_current = ADC_DMA_ComputeCurrent(&adc_dma, PRISMATIC_CURRENT_CHANNEL, PRISMATIC_CURRENT_OFFSET);
//    revolute_current = ADC_DMA_ComputeCurrent(&adc_dma, REVOLUTE_CURRENT_CHANNEL, REVOLUTE_CURRENT_OFFSET);
}
 800592c:	bf00      	nop
 800592e:	bd80      	pop	{r7, pc}
 8005930:	42480000 	.word	0x42480000
 8005934:	c2480000 	.word	0xc2480000
 8005938:	200004d0 	.word	0x200004d0
 800593c:	200017a4 	.word	0x200017a4
 8005940:	200017a8 	.word	0x200017a8
 8005944:	48000400 	.word	0x48000400
 8005948:	200017c4 	.word	0x200017c4
 800594c:	48000800 	.word	0x48000800
 8005950:	200017c8 	.word	0x200017c8
 8005954:	200017cc 	.word	0x200017cc
 8005958:	200017d0 	.word	0x200017d0
 800595c:	200017ac 	.word	0x200017ac
 8005960:	200017b4 	.word	0x200017b4
 8005964:	200017b8 	.word	0x200017b8
 8005968:	200017bc 	.word	0x200017bc
 800596c:	200017c0 	.word	0x200017c0
 8005970:	200017b0 	.word	0x200017b0
 8005974:	200002ac 	.word	0x200002ac
 8005978:	200000f0 	.word	0x200000f0
 800597c:	200000f1 	.word	0x200000f1

08005980 <plotter_pen_up>:

void plotter_pen_up() {
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8005984:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8005988:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8005998 <plotter_pen_up+0x18>
 800598c:	4803      	ldr	r0, [pc, #12]	@ (800599c <plotter_pen_up+0x1c>)
 800598e:	f7fd fb37 	bl	8003000 <PWM_write_duty>
}
 8005992:	bf00      	nop
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	42480000 	.word	0x42480000
 800599c:	200004b8 	.word	0x200004b8

080059a0 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	78fa      	ldrb	r2, [r7, #3]
 80059b0:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80059b8:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80059c0:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f04f 0200 	mov.w	r2, #0
 80059d8:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a54 <SIGNAL_init+0xb4>)
 80059e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80059ee:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d828      	bhi.n	8005a48 <SIGNAL_init+0xa8>
 80059f6:	a201      	add	r2, pc, #4	@ (adr r2, 80059fc <SIGNAL_init+0x5c>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a47 	.word	0x08005a47
 8005a00:	08005a0d 	.word	0x08005a0d
 8005a04:	08005a2b 	.word	0x08005a2b
 8005a08:	08005a35 	.word	0x08005a35
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005a18:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8005a58 <SIGNAL_init+0xb8>)
 8005a1e:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005a26:	621a      	str	r2, [r3, #32]
            break;
 8005a28:	e00e      	b.n	8005a48 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8005a30:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8005a32:	e009      	b.n	8005a48 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005a42:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8005a44:	e000      	b.n	8005a48 <SIGNAL_init+0xa8>
            break;
 8005a46:	bf00      	nop
    }
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	bf800000 	.word	0xbf800000
 8005a58:	41200000 	.word	0x41200000

08005a5c <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8005a5c:	b480      	push	{r7}
 8005a5e:	b089      	sub	sp, #36	@ 0x24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	61f8      	str	r0, [r7, #28]
 8005a64:	ed87 0a06 	vstr	s0, [r7, #24]
 8005a68:	edc7 0a05 	vstr	s1, [r7, #20]
 8005a6c:	ed87 1a04 	vstr	s2, [r7, #16]
 8005a70:	edc7 1a03 	vstr	s3, [r7, #12]
 8005a74:	ed87 2a02 	vstr	s4, [r7, #8]
 8005a78:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005aa6:	bf00      	nop
 8005aa8:	3724      	adds	r7, #36	@ 0x24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8005ab2:	b480      	push	{r7}
 8005ab4:	b089      	sub	sp, #36	@ 0x24
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	61f8      	str	r0, [r7, #28]
 8005aba:	ed87 0a06 	vstr	s0, [r7, #24]
 8005abe:	edc7 0a05 	vstr	s1, [r7, #20]
 8005ac2:	ed87 1a04 	vstr	s2, [r7, #16]
 8005ac6:	edc7 1a03 	vstr	s3, [r7, #12]
 8005aca:	ed87 2a02 	vstr	s4, [r7, #8]
 8005ace:	edc7 2a01 	vstr	s5, [r7, #4]
 8005ad2:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	2202      	movs	r2, #2
 8005ada:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005b06:	bf00      	nop
 8005b08:	3724      	adds	r7, #36	@ 0x24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005b58 <HAL_MspInit+0x44>)
 8005b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8005b58 <HAL_MspInit+0x44>)
 8005b20:	f043 0301 	orr.w	r3, r3, #1
 8005b24:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b26:	4b0c      	ldr	r3, [pc, #48]	@ (8005b58 <HAL_MspInit+0x44>)
 8005b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	607b      	str	r3, [r7, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b32:	4b09      	ldr	r3, [pc, #36]	@ (8005b58 <HAL_MspInit+0x44>)
 8005b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b36:	4a08      	ldr	r2, [pc, #32]	@ (8005b58 <HAL_MspInit+0x44>)
 8005b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b3e:	4b06      	ldr	r3, [pc, #24]	@ (8005b58 <HAL_MspInit+0x44>)
 8005b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005b4a:	f003 faeb 	bl	8009124 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b4e:	bf00      	nop
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40021000 	.word	0x40021000

08005b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005b60:	bf00      	nop
 8005b62:	e7fd      	b.n	8005b60 <NMI_Handler+0x4>

08005b64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b68:	bf00      	nop
 8005b6a:	e7fd      	b.n	8005b68 <HardFault_Handler+0x4>

08005b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b70:	bf00      	nop
 8005b72:	e7fd      	b.n	8005b70 <MemManage_Handler+0x4>

08005b74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b78:	bf00      	nop
 8005b7a:	e7fd      	b.n	8005b78 <BusFault_Handler+0x4>

08005b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b80:	bf00      	nop
 8005b82:	e7fd      	b.n	8005b80 <UsageFault_Handler+0x4>

08005b84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b88:	bf00      	nop
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b92:	b480      	push	{r7}
 8005b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b96:	bf00      	nop
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ba4:	bf00      	nop
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005bb2:	f000 ff71 	bl	8006a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005bb6:	bf00      	nop
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005bc0:	4802      	ldr	r0, [pc, #8]	@ (8005bcc <DMA1_Channel1_IRQHandler+0x10>)
 8005bc2:	f002 fef2 	bl	80089aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	200001dc 	.word	0x200001dc

08005bd0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005bd4:	4802      	ldr	r0, [pc, #8]	@ (8005be0 <DMA1_Channel2_IRQHandler+0x10>)
 8005bd6:	f002 fee8 	bl	80089aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005bda:	bf00      	nop
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20001fc4 	.word	0x20001fc4

08005be4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005be8:	4802      	ldr	r0, [pc, #8]	@ (8005bf4 <DMA1_Channel3_IRQHandler+0x10>)
 8005bea:	f002 fede 	bl	80089aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005bee:	bf00      	nop
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20002024 	.word	0x20002024

08005bf8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8005bfc:	4802      	ldr	r0, [pc, #8]	@ (8005c08 <DMA1_Channel4_IRQHandler+0x10>)
 8005bfe:	f002 fed4 	bl	80089aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005c02:	bf00      	nop
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20001f04 	.word	0x20001f04

08005c0c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8005c10:	4802      	ldr	r0, [pc, #8]	@ (8005c1c <DMA1_Channel5_IRQHandler+0x10>)
 8005c12:	f002 feca 	bl	80089aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005c16:	bf00      	nop
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20001f64 	.word	0x20001f64

08005c20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005c24:	4803      	ldr	r0, [pc, #12]	@ (8005c34 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005c26:	f004 ff03 	bl	800aa30 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005c2a:	4803      	ldr	r0, [pc, #12]	@ (8005c38 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005c2c:	f004 ff00 	bl	800aa30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005c30:	bf00      	nop
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	200017d8 	.word	0x200017d8
 8005c38:	20001ca0 	.word	0x20001ca0

08005c3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005c40:	4802      	ldr	r0, [pc, #8]	@ (8005c4c <TIM2_IRQHandler+0x10>)
 8005c42:	f004 fef5 	bl	800aa30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005c46:	bf00      	nop
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	200018a4 	.word	0x200018a4

08005c50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005c54:	4802      	ldr	r0, [pc, #8]	@ (8005c60 <TIM3_IRQHandler+0x10>)
 8005c56:	f004 feeb 	bl	800aa30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005c5a:	bf00      	nop
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20001970 	.word	0x20001970

08005c64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005c68:	4802      	ldr	r0, [pc, #8]	@ (8005c74 <TIM4_IRQHandler+0x10>)
 8005c6a:	f004 fee1 	bl	800aa30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005c6e:	bf00      	nop
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20001a3c 	.word	0x20001a3c

08005c78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005c7c:	4802      	ldr	r0, [pc, #8]	@ (8005c88 <USART2_IRQHandler+0x10>)
 8005c7e:	f006 fc2b 	bl	800c4d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005c82:	bf00      	nop
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20001e38 	.word	0x20001e38

08005c8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005c90:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005c94:	f003 f98a 	bl	8008fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005c98:	bf00      	nop
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8005ca0:	4802      	ldr	r0, [pc, #8]	@ (8005cac <LPUART1_IRQHandler+0x10>)
 8005ca2:	f006 fc19 	bl	800c4d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8005ca6:	bf00      	nop
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20001d6c 	.word	0x20001d6c

08005cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005cb8:	4a14      	ldr	r2, [pc, #80]	@ (8005d0c <_sbrk+0x5c>)
 8005cba:	4b15      	ldr	r3, [pc, #84]	@ (8005d10 <_sbrk+0x60>)
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005cc4:	4b13      	ldr	r3, [pc, #76]	@ (8005d14 <_sbrk+0x64>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d102      	bne.n	8005cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ccc:	4b11      	ldr	r3, [pc, #68]	@ (8005d14 <_sbrk+0x64>)
 8005cce:	4a12      	ldr	r2, [pc, #72]	@ (8005d18 <_sbrk+0x68>)
 8005cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005cd2:	4b10      	ldr	r3, [pc, #64]	@ (8005d14 <_sbrk+0x64>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4413      	add	r3, r2
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d207      	bcs.n	8005cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ce0:	f008 fa8c 	bl	800e1fc <__errno>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	220c      	movs	r2, #12
 8005ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005cea:	f04f 33ff 	mov.w	r3, #4294967295
 8005cee:	e009      	b.n	8005d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005cf0:	4b08      	ldr	r3, [pc, #32]	@ (8005d14 <_sbrk+0x64>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005cf6:	4b07      	ldr	r3, [pc, #28]	@ (8005d14 <_sbrk+0x64>)
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	4a05      	ldr	r2, [pc, #20]	@ (8005d14 <_sbrk+0x64>)
 8005d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d02:	68fb      	ldr	r3, [r7, #12]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20020000 	.word	0x20020000
 8005d10:	00000400 	.word	0x00000400
 8005d14:	200017d4 	.word	0x200017d4
 8005d18:	200021d0 	.word	0x200021d0

08005d1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005d20:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <SystemInit+0x20>)
 8005d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d26:	4a05      	ldr	r2, [pc, #20]	@ (8005d3c <SystemInit+0x20>)
 8005d28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d30:	bf00      	nop
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	e000ed00 	.word	0xe000ed00

08005d40 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b098      	sub	sp, #96	@ 0x60
 8005d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d46:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	605a      	str	r2, [r3, #4]
 8005d50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d52:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	605a      	str	r2, [r3, #4]
 8005d5c:	609a      	str	r2, [r3, #8]
 8005d5e:	60da      	str	r2, [r3, #12]
 8005d60:	611a      	str	r2, [r3, #16]
 8005d62:	615a      	str	r2, [r3, #20]
 8005d64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005d66:	1d3b      	adds	r3, r7, #4
 8005d68:	2234      	movs	r2, #52	@ 0x34
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f008 fa2d 	bl	800e1cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005d72:	4b3b      	ldr	r3, [pc, #236]	@ (8005e60 <MX_TIM1_Init+0x120>)
 8005d74:	4a3b      	ldr	r2, [pc, #236]	@ (8005e64 <MX_TIM1_Init+0x124>)
 8005d76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005d78:	4b39      	ldr	r3, [pc, #228]	@ (8005e60 <MX_TIM1_Init+0x120>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d7e:	4b38      	ldr	r3, [pc, #224]	@ (8005e60 <MX_TIM1_Init+0x120>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005d84:	4b36      	ldr	r3, [pc, #216]	@ (8005e60 <MX_TIM1_Init+0x120>)
 8005d86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d8c:	4b34      	ldr	r3, [pc, #208]	@ (8005e60 <MX_TIM1_Init+0x120>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005d92:	4b33      	ldr	r3, [pc, #204]	@ (8005e60 <MX_TIM1_Init+0x120>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d98:	4b31      	ldr	r3, [pc, #196]	@ (8005e60 <MX_TIM1_Init+0x120>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005d9e:	4830      	ldr	r0, [pc, #192]	@ (8005e60 <MX_TIM1_Init+0x120>)
 8005da0:	f004 fa98 	bl	800a2d4 <HAL_TIM_PWM_Init>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8005daa:	f7ff f97d 	bl	80050a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dae:	2300      	movs	r3, #0
 8005db0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005db2:	2300      	movs	r3, #0
 8005db4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005dba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4827      	ldr	r0, [pc, #156]	@ (8005e60 <MX_TIM1_Init+0x120>)
 8005dc2:	f006 f8a9 	bl	800bf18 <HAL_TIMEx_MasterConfigSynchronization>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005dcc:	f7ff f96c 	bl	80050a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005dd0:	2360      	movs	r3, #96	@ 0x60
 8005dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005de0:	2300      	movs	r3, #0
 8005de2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005de4:	2300      	movs	r3, #0
 8005de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005de8:	2300      	movs	r3, #0
 8005dea:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005dec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005df0:	220c      	movs	r2, #12
 8005df2:	4619      	mov	r1, r3
 8005df4:	481a      	ldr	r0, [pc, #104]	@ (8005e60 <MX_TIM1_Init+0x120>)
 8005df6:	f004 ff95 	bl	800ad24 <HAL_TIM_PWM_ConfigChannel>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005e00:	f7ff f952 	bl	80050a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005e04:	2300      	movs	r3, #0
 8005e06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005e10:	2300      	movs	r3, #0
 8005e12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005e18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005e1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005e22:	2300      	movs	r3, #0
 8005e24:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005e26:	2300      	movs	r3, #0
 8005e28:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005e2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005e34:	2300      	movs	r3, #0
 8005e36:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005e3c:	1d3b      	adds	r3, r7, #4
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4807      	ldr	r0, [pc, #28]	@ (8005e60 <MX_TIM1_Init+0x120>)
 8005e42:	f006 f8ff 	bl	800c044 <HAL_TIMEx_ConfigBreakDeadTime>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8005e4c:	f7ff f92c 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005e50:	4803      	ldr	r0, [pc, #12]	@ (8005e60 <MX_TIM1_Init+0x120>)
 8005e52:	f000 fb51 	bl	80064f8 <HAL_TIM_MspPostInit>

}
 8005e56:	bf00      	nop
 8005e58:	3760      	adds	r7, #96	@ 0x60
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	200017d8 	.word	0x200017d8
 8005e64:	40012c00 	.word	0x40012c00

08005e68 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e6e:	f107 0310 	add.w	r3, r7, #16
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	605a      	str	r2, [r3, #4]
 8005e78:	609a      	str	r2, [r3, #8]
 8005e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e7c:	1d3b      	adds	r3, r7, #4
 8005e7e:	2200      	movs	r2, #0
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	605a      	str	r2, [r3, #4]
 8005e84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005e86:	4b1e      	ldr	r3, [pc, #120]	@ (8005f00 <MX_TIM2_Init+0x98>)
 8005e88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005e8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8005e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8005f00 <MX_TIM2_Init+0x98>)
 8005e90:	22a9      	movs	r2, #169	@ 0xa9
 8005e92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e94:	4b1a      	ldr	r3, [pc, #104]	@ (8005f00 <MX_TIM2_Init+0x98>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8005e9a:	4b19      	ldr	r3, [pc, #100]	@ (8005f00 <MX_TIM2_Init+0x98>)
 8005e9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005ea0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ea2:	4b17      	ldr	r3, [pc, #92]	@ (8005f00 <MX_TIM2_Init+0x98>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ea8:	4b15      	ldr	r3, [pc, #84]	@ (8005f00 <MX_TIM2_Init+0x98>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005eae:	4814      	ldr	r0, [pc, #80]	@ (8005f00 <MX_TIM2_Init+0x98>)
 8005eb0:	f004 f8c4 	bl	800a03c <HAL_TIM_Base_Init>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005eba:	f7ff f8f5 	bl	80050a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ebe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ec2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005ec4:	f107 0310 	add.w	r3, r7, #16
 8005ec8:	4619      	mov	r1, r3
 8005eca:	480d      	ldr	r0, [pc, #52]	@ (8005f00 <MX_TIM2_Init+0x98>)
 8005ecc:	f005 f83e 	bl	800af4c <HAL_TIM_ConfigClockSource>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005ed6:	f7ff f8e7 	bl	80050a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005eda:	2300      	movs	r3, #0
 8005edc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005ee2:	1d3b      	adds	r3, r7, #4
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	4806      	ldr	r0, [pc, #24]	@ (8005f00 <MX_TIM2_Init+0x98>)
 8005ee8:	f006 f816 	bl	800bf18 <HAL_TIMEx_MasterConfigSynchronization>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005ef2:	f7ff f8d9 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005ef6:	bf00      	nop
 8005ef8:	3720      	adds	r7, #32
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	200018a4 	.word	0x200018a4

08005f04 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08c      	sub	sp, #48	@ 0x30
 8005f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005f0a:	f107 030c 	add.w	r3, r7, #12
 8005f0e:	2224      	movs	r2, #36	@ 0x24
 8005f10:	2100      	movs	r1, #0
 8005f12:	4618      	mov	r0, r3
 8005f14:	f008 f95a 	bl	800e1cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f18:	463b      	mov	r3, r7
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	605a      	str	r2, [r3, #4]
 8005f20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005f22:	4b21      	ldr	r3, [pc, #132]	@ (8005fa8 <MX_TIM3_Init+0xa4>)
 8005f24:	4a21      	ldr	r2, [pc, #132]	@ (8005fac <MX_TIM3_Init+0xa8>)
 8005f26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005f28:	4b1f      	ldr	r3, [pc, #124]	@ (8005fa8 <MX_TIM3_Init+0xa4>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa8 <MX_TIM3_Init+0xa4>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005f34:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa8 <MX_TIM3_Init+0xa4>)
 8005f36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005f3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8005fa8 <MX_TIM3_Init+0xa4>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f42:	4b19      	ldr	r3, [pc, #100]	@ (8005fa8 <MX_TIM3_Init+0xa4>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005f50:	2301      	movs	r3, #1
 8005f52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005f54:	2300      	movs	r3, #0
 8005f56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005f60:	2301      	movs	r3, #1
 8005f62:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005f64:	2300      	movs	r3, #0
 8005f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005f6c:	f107 030c 	add.w	r3, r7, #12
 8005f70:	4619      	mov	r1, r3
 8005f72:	480d      	ldr	r0, [pc, #52]	@ (8005fa8 <MX_TIM3_Init+0xa4>)
 8005f74:	f004 fc1a 	bl	800a7ac <HAL_TIM_Encoder_Init>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8005f7e:	f7ff f893 	bl	80050a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f82:	2300      	movs	r3, #0
 8005f84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	4806      	ldr	r0, [pc, #24]	@ (8005fa8 <MX_TIM3_Init+0xa4>)
 8005f90:	f005 ffc2 	bl	800bf18 <HAL_TIMEx_MasterConfigSynchronization>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8005f9a:	f7ff f885 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005f9e:	bf00      	nop
 8005fa0:	3730      	adds	r7, #48	@ 0x30
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20001970 	.word	0x20001970
 8005fac:	40000400 	.word	0x40000400

08005fb0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08c      	sub	sp, #48	@ 0x30
 8005fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005fb6:	f107 030c 	add.w	r3, r7, #12
 8005fba:	2224      	movs	r2, #36	@ 0x24
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f008 f904 	bl	800e1cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	605a      	str	r2, [r3, #4]
 8005fcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005fce:	4b21      	ldr	r3, [pc, #132]	@ (8006054 <MX_TIM4_Init+0xa4>)
 8005fd0:	4a21      	ldr	r2, [pc, #132]	@ (8006058 <MX_TIM4_Init+0xa8>)
 8005fd2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8006054 <MX_TIM4_Init+0xa4>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fda:	4b1e      	ldr	r3, [pc, #120]	@ (8006054 <MX_TIM4_Init+0xa4>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8006054 <MX_TIM4_Init+0xa4>)
 8005fe2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005fe6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8006054 <MX_TIM4_Init+0xa4>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fee:	4b19      	ldr	r3, [pc, #100]	@ (8006054 <MX_TIM4_Init+0xa4>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006000:	2300      	movs	r3, #0
 8006002:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006004:	2300      	movs	r3, #0
 8006006:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006008:	2300      	movs	r3, #0
 800600a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800600c:	2301      	movs	r3, #1
 800600e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006010:	2300      	movs	r3, #0
 8006012:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006014:	2300      	movs	r3, #0
 8006016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006018:	f107 030c 	add.w	r3, r7, #12
 800601c:	4619      	mov	r1, r3
 800601e:	480d      	ldr	r0, [pc, #52]	@ (8006054 <MX_TIM4_Init+0xa4>)
 8006020:	f004 fbc4 	bl	800a7ac <HAL_TIM_Encoder_Init>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800602a:	f7ff f83d 	bl	80050a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800602e:	2300      	movs	r3, #0
 8006030:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006032:	2300      	movs	r3, #0
 8006034:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006036:	463b      	mov	r3, r7
 8006038:	4619      	mov	r1, r3
 800603a:	4806      	ldr	r0, [pc, #24]	@ (8006054 <MX_TIM4_Init+0xa4>)
 800603c:	f005 ff6c 	bl	800bf18 <HAL_TIMEx_MasterConfigSynchronization>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8006046:	f7ff f82f 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800604a:	bf00      	nop
 800604c:	3730      	adds	r7, #48	@ 0x30
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20001a3c 	.word	0x20001a3c
 8006058:	40000800 	.word	0x40000800

0800605c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006062:	f107 0310 	add.w	r3, r7, #16
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	605a      	str	r2, [r3, #4]
 800606c:	609a      	str	r2, [r3, #8]
 800606e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006070:	1d3b      	adds	r3, r7, #4
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	605a      	str	r2, [r3, #4]
 8006078:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800607a:	4b1d      	ldr	r3, [pc, #116]	@ (80060f0 <MX_TIM5_Init+0x94>)
 800607c:	4a1d      	ldr	r2, [pc, #116]	@ (80060f4 <MX_TIM5_Init+0x98>)
 800607e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8006080:	4b1b      	ldr	r3, [pc, #108]	@ (80060f0 <MX_TIM5_Init+0x94>)
 8006082:	22a9      	movs	r2, #169	@ 0xa9
 8006084:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006086:	4b1a      	ldr	r3, [pc, #104]	@ (80060f0 <MX_TIM5_Init+0x94>)
 8006088:	2200      	movs	r2, #0
 800608a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800608c:	4b18      	ldr	r3, [pc, #96]	@ (80060f0 <MX_TIM5_Init+0x94>)
 800608e:	f04f 32ff 	mov.w	r2, #4294967295
 8006092:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006094:	4b16      	ldr	r3, [pc, #88]	@ (80060f0 <MX_TIM5_Init+0x94>)
 8006096:	2200      	movs	r2, #0
 8006098:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800609a:	4b15      	ldr	r3, [pc, #84]	@ (80060f0 <MX_TIM5_Init+0x94>)
 800609c:	2200      	movs	r2, #0
 800609e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80060a0:	4813      	ldr	r0, [pc, #76]	@ (80060f0 <MX_TIM5_Init+0x94>)
 80060a2:	f003 ffcb 	bl	800a03c <HAL_TIM_Base_Init>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80060ac:	f7fe fffc 	bl	80050a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80060b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80060b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80060b6:	f107 0310 	add.w	r3, r7, #16
 80060ba:	4619      	mov	r1, r3
 80060bc:	480c      	ldr	r0, [pc, #48]	@ (80060f0 <MX_TIM5_Init+0x94>)
 80060be:	f004 ff45 	bl	800af4c <HAL_TIM_ConfigClockSource>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80060c8:	f7fe ffee 	bl	80050a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060cc:	2300      	movs	r3, #0
 80060ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80060d4:	1d3b      	adds	r3, r7, #4
 80060d6:	4619      	mov	r1, r3
 80060d8:	4805      	ldr	r0, [pc, #20]	@ (80060f0 <MX_TIM5_Init+0x94>)
 80060da:	f005 ff1d 	bl	800bf18 <HAL_TIMEx_MasterConfigSynchronization>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80060e4:	f7fe ffe0 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80060e8:	bf00      	nop
 80060ea:	3720      	adds	r7, #32
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	20001b08 	.word	0x20001b08
 80060f4:	40000c00 	.word	0x40000c00

080060f8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b09c      	sub	sp, #112	@ 0x70
 80060fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80060fe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	605a      	str	r2, [r3, #4]
 8006108:	609a      	str	r2, [r3, #8]
 800610a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800610c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	605a      	str	r2, [r3, #4]
 8006116:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006118:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	605a      	str	r2, [r3, #4]
 8006122:	609a      	str	r2, [r3, #8]
 8006124:	60da      	str	r2, [r3, #12]
 8006126:	611a      	str	r2, [r3, #16]
 8006128:	615a      	str	r2, [r3, #20]
 800612a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800612c:	1d3b      	adds	r3, r7, #4
 800612e:	2234      	movs	r2, #52	@ 0x34
 8006130:	2100      	movs	r1, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f008 f84a 	bl	800e1cc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006138:	4b4c      	ldr	r3, [pc, #304]	@ (800626c <MX_TIM8_Init+0x174>)
 800613a:	4a4d      	ldr	r2, [pc, #308]	@ (8006270 <MX_TIM8_Init+0x178>)
 800613c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800613e:	4b4b      	ldr	r3, [pc, #300]	@ (800626c <MX_TIM8_Init+0x174>)
 8006140:	2200      	movs	r2, #0
 8006142:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006144:	4b49      	ldr	r3, [pc, #292]	@ (800626c <MX_TIM8_Init+0x174>)
 8006146:	2200      	movs	r2, #0
 8006148:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800614a:	4b48      	ldr	r3, [pc, #288]	@ (800626c <MX_TIM8_Init+0x174>)
 800614c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006150:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8006152:	4b46      	ldr	r3, [pc, #280]	@ (800626c <MX_TIM8_Init+0x174>)
 8006154:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006158:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800615a:	4b44      	ldr	r3, [pc, #272]	@ (800626c <MX_TIM8_Init+0x174>)
 800615c:	2200      	movs	r2, #0
 800615e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006160:	4b42      	ldr	r3, [pc, #264]	@ (800626c <MX_TIM8_Init+0x174>)
 8006162:	2200      	movs	r2, #0
 8006164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8006166:	4841      	ldr	r0, [pc, #260]	@ (800626c <MX_TIM8_Init+0x174>)
 8006168:	f003 ff68 	bl	800a03c <HAL_TIM_Base_Init>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8006172:	f7fe ff99 	bl	80050a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006176:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800617a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800617c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006180:	4619      	mov	r1, r3
 8006182:	483a      	ldr	r0, [pc, #232]	@ (800626c <MX_TIM8_Init+0x174>)
 8006184:	f004 fee2 	bl	800af4c <HAL_TIM_ConfigClockSource>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800618e:	f7fe ff8b 	bl	80050a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8006192:	4836      	ldr	r0, [pc, #216]	@ (800626c <MX_TIM8_Init+0x174>)
 8006194:	f004 f89e 	bl	800a2d4 <HAL_TIM_PWM_Init>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800619e:	f7fe ff83 	bl	80050a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061a2:	2300      	movs	r3, #0
 80061a4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80061a6:	2300      	movs	r3, #0
 80061a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061aa:	2300      	movs	r3, #0
 80061ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80061ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80061b2:	4619      	mov	r1, r3
 80061b4:	482d      	ldr	r0, [pc, #180]	@ (800626c <MX_TIM8_Init+0x174>)
 80061b6:	f005 feaf 	bl	800bf18 <HAL_TIMEx_MasterConfigSynchronization>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80061c0:	f7fe ff72 	bl	80050a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80061c4:	2360      	movs	r3, #96	@ 0x60
 80061c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80061cc:	2300      	movs	r3, #0
 80061ce:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80061d0:	2300      	movs	r3, #0
 80061d2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80061d4:	2300      	movs	r3, #0
 80061d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80061d8:	2300      	movs	r3, #0
 80061da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80061dc:	2300      	movs	r3, #0
 80061de:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80061e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80061e4:	2200      	movs	r2, #0
 80061e6:	4619      	mov	r1, r3
 80061e8:	4820      	ldr	r0, [pc, #128]	@ (800626c <MX_TIM8_Init+0x174>)
 80061ea:	f004 fd9b 	bl	800ad24 <HAL_TIM_PWM_ConfigChannel>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80061f4:	f7fe ff58 	bl	80050a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80061f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80061fc:	2204      	movs	r2, #4
 80061fe:	4619      	mov	r1, r3
 8006200:	481a      	ldr	r0, [pc, #104]	@ (800626c <MX_TIM8_Init+0x174>)
 8006202:	f004 fd8f 	bl	800ad24 <HAL_TIM_PWM_ConfigChannel>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800620c:	f7fe ff4c 	bl	80050a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006210:	2300      	movs	r3, #0
 8006212:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006214:	2300      	movs	r3, #0
 8006216:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006220:	2300      	movs	r3, #0
 8006222:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006224:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006228:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800622a:	2300      	movs	r3, #0
 800622c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800622e:	2300      	movs	r3, #0
 8006230:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006232:	2300      	movs	r3, #0
 8006234:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006236:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800623a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800623c:	2300      	movs	r3, #0
 800623e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006240:	2300      	movs	r3, #0
 8006242:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006244:	2300      	movs	r3, #0
 8006246:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8006248:	1d3b      	adds	r3, r7, #4
 800624a:	4619      	mov	r1, r3
 800624c:	4807      	ldr	r0, [pc, #28]	@ (800626c <MX_TIM8_Init+0x174>)
 800624e:	f005 fef9 	bl	800c044 <HAL_TIMEx_ConfigBreakDeadTime>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8006258:	f7fe ff26 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800625c:	4803      	ldr	r0, [pc, #12]	@ (800626c <MX_TIM8_Init+0x174>)
 800625e:	f000 f94b 	bl	80064f8 <HAL_TIM_MspPostInit>

}
 8006262:	bf00      	nop
 8006264:	3770      	adds	r7, #112	@ 0x70
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20001bd4 	.word	0x20001bd4
 8006270:	40013400 	.word	0x40013400

08006274 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006278:	4b14      	ldr	r3, [pc, #80]	@ (80062cc <MX_TIM16_Init+0x58>)
 800627a:	4a15      	ldr	r2, [pc, #84]	@ (80062d0 <MX_TIM16_Init+0x5c>)
 800627c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800627e:	4b13      	ldr	r3, [pc, #76]	@ (80062cc <MX_TIM16_Init+0x58>)
 8006280:	22a9      	movs	r2, #169	@ 0xa9
 8006282:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006284:	4b11      	ldr	r3, [pc, #68]	@ (80062cc <MX_TIM16_Init+0x58>)
 8006286:	2200      	movs	r2, #0
 8006288:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800628a:	4b10      	ldr	r3, [pc, #64]	@ (80062cc <MX_TIM16_Init+0x58>)
 800628c:	f240 4279 	movw	r2, #1145	@ 0x479
 8006290:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006292:	4b0e      	ldr	r3, [pc, #56]	@ (80062cc <MX_TIM16_Init+0x58>)
 8006294:	2200      	movs	r2, #0
 8006296:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006298:	4b0c      	ldr	r3, [pc, #48]	@ (80062cc <MX_TIM16_Init+0x58>)
 800629a:	2200      	movs	r2, #0
 800629c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800629e:	4b0b      	ldr	r3, [pc, #44]	@ (80062cc <MX_TIM16_Init+0x58>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80062a4:	4809      	ldr	r0, [pc, #36]	@ (80062cc <MX_TIM16_Init+0x58>)
 80062a6:	f003 fec9 	bl	800a03c <HAL_TIM_Base_Init>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80062b0:	f7fe fefa 	bl	80050a8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80062b4:	2108      	movs	r1, #8
 80062b6:	4805      	ldr	r0, [pc, #20]	@ (80062cc <MX_TIM16_Init+0x58>)
 80062b8:	f004 f982 	bl	800a5c0 <HAL_TIM_OnePulse_Init>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80062c2:	f7fe fef1 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80062c6:	bf00      	nop
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20001ca0 	.word	0x20001ca0
 80062d0:	40014400 	.word	0x40014400

080062d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a0d      	ldr	r2, [pc, #52]	@ (8006318 <HAL_TIM_PWM_MspInit+0x44>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d113      	bne.n	800630e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80062e6:	4b0d      	ldr	r3, [pc, #52]	@ (800631c <HAL_TIM_PWM_MspInit+0x48>)
 80062e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062ea:	4a0c      	ldr	r2, [pc, #48]	@ (800631c <HAL_TIM_PWM_MspInit+0x48>)
 80062ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80062f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80062f2:	4b0a      	ldr	r3, [pc, #40]	@ (800631c <HAL_TIM_PWM_MspInit+0x48>)
 80062f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80062fe:	2200      	movs	r2, #0
 8006300:	2100      	movs	r1, #0
 8006302:	2019      	movs	r0, #25
 8006304:	f002 f939 	bl	800857a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006308:	2019      	movs	r0, #25
 800630a:	f002 f950 	bl	80085ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	40012c00 	.word	0x40012c00
 800631c:	40021000 	.word	0x40021000

08006320 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006330:	d114      	bne.n	800635c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006332:	4b2b      	ldr	r3, [pc, #172]	@ (80063e0 <HAL_TIM_Base_MspInit+0xc0>)
 8006334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006336:	4a2a      	ldr	r2, [pc, #168]	@ (80063e0 <HAL_TIM_Base_MspInit+0xc0>)
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	6593      	str	r3, [r2, #88]	@ 0x58
 800633e:	4b28      	ldr	r3, [pc, #160]	@ (80063e0 <HAL_TIM_Base_MspInit+0xc0>)
 8006340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	617b      	str	r3, [r7, #20]
 8006348:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800634a:	2200      	movs	r2, #0
 800634c:	2100      	movs	r1, #0
 800634e:	201c      	movs	r0, #28
 8006350:	f002 f913 	bl	800857a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006354:	201c      	movs	r0, #28
 8006356:	f002 f92a 	bl	80085ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800635a:	e03c      	b.n	80063d6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a20      	ldr	r2, [pc, #128]	@ (80063e4 <HAL_TIM_Base_MspInit+0xc4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d10c      	bne.n	8006380 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006366:	4b1e      	ldr	r3, [pc, #120]	@ (80063e0 <HAL_TIM_Base_MspInit+0xc0>)
 8006368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636a:	4a1d      	ldr	r2, [pc, #116]	@ (80063e0 <HAL_TIM_Base_MspInit+0xc0>)
 800636c:	f043 0308 	orr.w	r3, r3, #8
 8006370:	6593      	str	r3, [r2, #88]	@ 0x58
 8006372:	4b1b      	ldr	r3, [pc, #108]	@ (80063e0 <HAL_TIM_Base_MspInit+0xc0>)
 8006374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006376:	f003 0308 	and.w	r3, r3, #8
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	693b      	ldr	r3, [r7, #16]
}
 800637e:	e02a      	b.n	80063d6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a18      	ldr	r2, [pc, #96]	@ (80063e8 <HAL_TIM_Base_MspInit+0xc8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d10c      	bne.n	80063a4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800638a:	4b15      	ldr	r3, [pc, #84]	@ (80063e0 <HAL_TIM_Base_MspInit+0xc0>)
 800638c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800638e:	4a14      	ldr	r2, [pc, #80]	@ (80063e0 <HAL_TIM_Base_MspInit+0xc0>)
 8006390:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006394:	6613      	str	r3, [r2, #96]	@ 0x60
 8006396:	4b12      	ldr	r3, [pc, #72]	@ (80063e0 <HAL_TIM_Base_MspInit+0xc0>)
 8006398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800639a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	68fb      	ldr	r3, [r7, #12]
}
 80063a2:	e018      	b.n	80063d6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a10      	ldr	r2, [pc, #64]	@ (80063ec <HAL_TIM_Base_MspInit+0xcc>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d113      	bne.n	80063d6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80063ae:	4b0c      	ldr	r3, [pc, #48]	@ (80063e0 <HAL_TIM_Base_MspInit+0xc0>)
 80063b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063b2:	4a0b      	ldr	r2, [pc, #44]	@ (80063e0 <HAL_TIM_Base_MspInit+0xc0>)
 80063b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80063ba:	4b09      	ldr	r3, [pc, #36]	@ (80063e0 <HAL_TIM_Base_MspInit+0xc0>)
 80063bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c2:	60bb      	str	r3, [r7, #8]
 80063c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80063c6:	2200      	movs	r2, #0
 80063c8:	2100      	movs	r1, #0
 80063ca:	2019      	movs	r0, #25
 80063cc:	f002 f8d5 	bl	800857a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80063d0:	2019      	movs	r0, #25
 80063d2:	f002 f8ec 	bl	80085ae <HAL_NVIC_EnableIRQ>
}
 80063d6:	bf00      	nop
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	40021000 	.word	0x40021000
 80063e4:	40000c00 	.word	0x40000c00
 80063e8:	40013400 	.word	0x40013400
 80063ec:	40014400 	.word	0x40014400

080063f0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08c      	sub	sp, #48	@ 0x30
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063f8:	f107 031c 	add.w	r3, r7, #28
 80063fc:	2200      	movs	r2, #0
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	605a      	str	r2, [r3, #4]
 8006402:	609a      	str	r2, [r3, #8]
 8006404:	60da      	str	r2, [r3, #12]
 8006406:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a37      	ldr	r2, [pc, #220]	@ (80064ec <HAL_TIM_Encoder_MspInit+0xfc>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d131      	bne.n	8006476 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006412:	4b37      	ldr	r3, [pc, #220]	@ (80064f0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006416:	4a36      	ldr	r2, [pc, #216]	@ (80064f0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006418:	f043 0302 	orr.w	r3, r3, #2
 800641c:	6593      	str	r3, [r2, #88]	@ 0x58
 800641e:	4b34      	ldr	r3, [pc, #208]	@ (80064f0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	61bb      	str	r3, [r7, #24]
 8006428:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800642a:	4b31      	ldr	r3, [pc, #196]	@ (80064f0 <HAL_TIM_Encoder_MspInit+0x100>)
 800642c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800642e:	4a30      	ldr	r2, [pc, #192]	@ (80064f0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006436:	4b2e      	ldr	r3, [pc, #184]	@ (80064f0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006442:	23c0      	movs	r3, #192	@ 0xc0
 8006444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006446:	2302      	movs	r3, #2
 8006448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800644a:	2300      	movs	r3, #0
 800644c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800644e:	2300      	movs	r3, #0
 8006450:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006452:	2302      	movs	r3, #2
 8006454:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006456:	f107 031c 	add.w	r3, r7, #28
 800645a:	4619      	mov	r1, r3
 800645c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006460:	f002 fbf2 	bl	8008c48 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006464:	2200      	movs	r2, #0
 8006466:	2100      	movs	r1, #0
 8006468:	201d      	movs	r0, #29
 800646a:	f002 f886 	bl	800857a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800646e:	201d      	movs	r0, #29
 8006470:	f002 f89d 	bl	80085ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8006474:	e036      	b.n	80064e4 <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM4)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a1e      	ldr	r2, [pc, #120]	@ (80064f4 <HAL_TIM_Encoder_MspInit+0x104>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d131      	bne.n	80064e4 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006480:	4b1b      	ldr	r3, [pc, #108]	@ (80064f0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006484:	4a1a      	ldr	r2, [pc, #104]	@ (80064f0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006486:	f043 0304 	orr.w	r3, r3, #4
 800648a:	6593      	str	r3, [r2, #88]	@ 0x58
 800648c:	4b18      	ldr	r3, [pc, #96]	@ (80064f0 <HAL_TIM_Encoder_MspInit+0x100>)
 800648e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006498:	4b15      	ldr	r3, [pc, #84]	@ (80064f0 <HAL_TIM_Encoder_MspInit+0x100>)
 800649a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800649c:	4a14      	ldr	r2, [pc, #80]	@ (80064f0 <HAL_TIM_Encoder_MspInit+0x100>)
 800649e:	f043 0301 	orr.w	r3, r3, #1
 80064a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064a4:	4b12      	ldr	r3, [pc, #72]	@ (80064f0 <HAL_TIM_Encoder_MspInit+0x100>)
 80064a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80064b0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80064b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064b6:	2302      	movs	r3, #2
 80064b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064be:	2300      	movs	r3, #0
 80064c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80064c2:	230a      	movs	r3, #10
 80064c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064c6:	f107 031c 	add.w	r3, r7, #28
 80064ca:	4619      	mov	r1, r3
 80064cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80064d0:	f002 fbba 	bl	8008c48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80064d4:	2200      	movs	r2, #0
 80064d6:	2100      	movs	r1, #0
 80064d8:	201e      	movs	r0, #30
 80064da:	f002 f84e 	bl	800857a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80064de:	201e      	movs	r0, #30
 80064e0:	f002 f865 	bl	80085ae <HAL_NVIC_EnableIRQ>
}
 80064e4:	bf00      	nop
 80064e6:	3730      	adds	r7, #48	@ 0x30
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40000400 	.word	0x40000400
 80064f0:	40021000 	.word	0x40021000
 80064f4:	40000800 	.word	0x40000800

080064f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	@ 0x28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006500:	f107 0314 	add.w	r3, r7, #20
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	605a      	str	r2, [r3, #4]
 800650a:	609a      	str	r2, [r3, #8]
 800650c:	60da      	str	r2, [r3, #12]
 800650e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a22      	ldr	r2, [pc, #136]	@ (80065a0 <HAL_TIM_MspPostInit+0xa8>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d11c      	bne.n	8006554 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800651a:	4b22      	ldr	r3, [pc, #136]	@ (80065a4 <HAL_TIM_MspPostInit+0xac>)
 800651c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800651e:	4a21      	ldr	r2, [pc, #132]	@ (80065a4 <HAL_TIM_MspPostInit+0xac>)
 8006520:	f043 0304 	orr.w	r3, r3, #4
 8006524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006526:	4b1f      	ldr	r3, [pc, #124]	@ (80065a4 <HAL_TIM_MspPostInit+0xac>)
 8006528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800652a:	f003 0304 	and.w	r3, r3, #4
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006532:	2308      	movs	r3, #8
 8006534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006536:	2302      	movs	r3, #2
 8006538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800653a:	2300      	movs	r3, #0
 800653c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800653e:	2300      	movs	r3, #0
 8006540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8006542:	2302      	movs	r3, #2
 8006544:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006546:	f107 0314 	add.w	r3, r7, #20
 800654a:	4619      	mov	r1, r3
 800654c:	4816      	ldr	r0, [pc, #88]	@ (80065a8 <HAL_TIM_MspPostInit+0xb0>)
 800654e:	f002 fb7b 	bl	8008c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8006552:	e020      	b.n	8006596 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a14      	ldr	r2, [pc, #80]	@ (80065ac <HAL_TIM_MspPostInit+0xb4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d11b      	bne.n	8006596 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800655e:	4b11      	ldr	r3, [pc, #68]	@ (80065a4 <HAL_TIM_MspPostInit+0xac>)
 8006560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006562:	4a10      	ldr	r2, [pc, #64]	@ (80065a4 <HAL_TIM_MspPostInit+0xac>)
 8006564:	f043 0304 	orr.w	r3, r3, #4
 8006568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800656a:	4b0e      	ldr	r3, [pc, #56]	@ (80065a4 <HAL_TIM_MspPostInit+0xac>)
 800656c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006576:	23c0      	movs	r3, #192	@ 0xc0
 8006578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800657a:	2302      	movs	r3, #2
 800657c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800657e:	2300      	movs	r3, #0
 8006580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006582:	2300      	movs	r3, #0
 8006584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8006586:	2304      	movs	r3, #4
 8006588:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800658a:	f107 0314 	add.w	r3, r7, #20
 800658e:	4619      	mov	r1, r3
 8006590:	4805      	ldr	r0, [pc, #20]	@ (80065a8 <HAL_TIM_MspPostInit+0xb0>)
 8006592:	f002 fb59 	bl	8008c48 <HAL_GPIO_Init>
}
 8006596:	bf00      	nop
 8006598:	3728      	adds	r7, #40	@ 0x28
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	40012c00 	.word	0x40012c00
 80065a4:	40021000 	.word	0x40021000
 80065a8:	48000800 	.word	0x48000800
 80065ac:	40013400 	.word	0x40013400

080065b0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80065b4:	4b20      	ldr	r3, [pc, #128]	@ (8006638 <MX_LPUART1_UART_Init+0x88>)
 80065b6:	4a21      	ldr	r2, [pc, #132]	@ (800663c <MX_LPUART1_UART_Init+0x8c>)
 80065b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 80065ba:	4b1f      	ldr	r3, [pc, #124]	@ (8006638 <MX_LPUART1_UART_Init+0x88>)
 80065bc:	4a20      	ldr	r2, [pc, #128]	@ (8006640 <MX_LPUART1_UART_Init+0x90>)
 80065be:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80065c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006638 <MX_LPUART1_UART_Init+0x88>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80065c6:	4b1c      	ldr	r3, [pc, #112]	@ (8006638 <MX_LPUART1_UART_Init+0x88>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80065cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006638 <MX_LPUART1_UART_Init+0x88>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80065d2:	4b19      	ldr	r3, [pc, #100]	@ (8006638 <MX_LPUART1_UART_Init+0x88>)
 80065d4:	220c      	movs	r2, #12
 80065d6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065d8:	4b17      	ldr	r3, [pc, #92]	@ (8006638 <MX_LPUART1_UART_Init+0x88>)
 80065da:	2200      	movs	r2, #0
 80065dc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80065de:	4b16      	ldr	r3, [pc, #88]	@ (8006638 <MX_LPUART1_UART_Init+0x88>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80065e4:	4b14      	ldr	r3, [pc, #80]	@ (8006638 <MX_LPUART1_UART_Init+0x88>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80065ea:	4b13      	ldr	r3, [pc, #76]	@ (8006638 <MX_LPUART1_UART_Init+0x88>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80065f0:	4811      	ldr	r0, [pc, #68]	@ (8006638 <MX_LPUART1_UART_Init+0x88>)
 80065f2:	f005 fe0b 	bl	800c20c <HAL_UART_Init>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80065fc:	f7fe fd54 	bl	80050a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006600:	2100      	movs	r1, #0
 8006602:	480d      	ldr	r0, [pc, #52]	@ (8006638 <MX_LPUART1_UART_Init+0x88>)
 8006604:	f007 fb5e 	bl	800dcc4 <HAL_UARTEx_SetTxFifoThreshold>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800660e:	f7fe fd4b 	bl	80050a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006612:	2100      	movs	r1, #0
 8006614:	4808      	ldr	r0, [pc, #32]	@ (8006638 <MX_LPUART1_UART_Init+0x88>)
 8006616:	f007 fb93 	bl	800dd40 <HAL_UARTEx_SetRxFifoThreshold>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8006620:	f7fe fd42 	bl	80050a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8006624:	4804      	ldr	r0, [pc, #16]	@ (8006638 <MX_LPUART1_UART_Init+0x88>)
 8006626:	f007 fb14 	bl	800dc52 <HAL_UARTEx_DisableFifoMode>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8006630:	f7fe fd3a 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006634:	bf00      	nop
 8006636:	bd80      	pop	{r7, pc}
 8006638:	20001d6c 	.word	0x20001d6c
 800663c:	40008000 	.word	0x40008000
 8006640:	001e8480 	.word	0x001e8480

08006644 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006648:	4b23      	ldr	r3, [pc, #140]	@ (80066d8 <MX_USART2_UART_Init+0x94>)
 800664a:	4a24      	ldr	r2, [pc, #144]	@ (80066dc <MX_USART2_UART_Init+0x98>)
 800664c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800664e:	4b22      	ldr	r3, [pc, #136]	@ (80066d8 <MX_USART2_UART_Init+0x94>)
 8006650:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8006654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8006656:	4b20      	ldr	r3, [pc, #128]	@ (80066d8 <MX_USART2_UART_Init+0x94>)
 8006658:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800665c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800665e:	4b1e      	ldr	r3, [pc, #120]	@ (80066d8 <MX_USART2_UART_Init+0x94>)
 8006660:	2200      	movs	r2, #0
 8006662:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8006664:	4b1c      	ldr	r3, [pc, #112]	@ (80066d8 <MX_USART2_UART_Init+0x94>)
 8006666:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800666a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800666c:	4b1a      	ldr	r3, [pc, #104]	@ (80066d8 <MX_USART2_UART_Init+0x94>)
 800666e:	220c      	movs	r2, #12
 8006670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006672:	4b19      	ldr	r3, [pc, #100]	@ (80066d8 <MX_USART2_UART_Init+0x94>)
 8006674:	2200      	movs	r2, #0
 8006676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006678:	4b17      	ldr	r3, [pc, #92]	@ (80066d8 <MX_USART2_UART_Init+0x94>)
 800667a:	2200      	movs	r2, #0
 800667c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800667e:	4b16      	ldr	r3, [pc, #88]	@ (80066d8 <MX_USART2_UART_Init+0x94>)
 8006680:	2200      	movs	r2, #0
 8006682:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006684:	4b14      	ldr	r3, [pc, #80]	@ (80066d8 <MX_USART2_UART_Init+0x94>)
 8006686:	2200      	movs	r2, #0
 8006688:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800668a:	4b13      	ldr	r3, [pc, #76]	@ (80066d8 <MX_USART2_UART_Init+0x94>)
 800668c:	2200      	movs	r2, #0
 800668e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006690:	4811      	ldr	r0, [pc, #68]	@ (80066d8 <MX_USART2_UART_Init+0x94>)
 8006692:	f005 fdbb 	bl	800c20c <HAL_UART_Init>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800669c:	f7fe fd04 	bl	80050a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80066a0:	2100      	movs	r1, #0
 80066a2:	480d      	ldr	r0, [pc, #52]	@ (80066d8 <MX_USART2_UART_Init+0x94>)
 80066a4:	f007 fb0e 	bl	800dcc4 <HAL_UARTEx_SetTxFifoThreshold>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80066ae:	f7fe fcfb 	bl	80050a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80066b2:	2100      	movs	r1, #0
 80066b4:	4808      	ldr	r0, [pc, #32]	@ (80066d8 <MX_USART2_UART_Init+0x94>)
 80066b6:	f007 fb43 	bl	800dd40 <HAL_UARTEx_SetRxFifoThreshold>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80066c0:	f7fe fcf2 	bl	80050a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80066c4:	4804      	ldr	r0, [pc, #16]	@ (80066d8 <MX_USART2_UART_Init+0x94>)
 80066c6:	f007 fac4 	bl	800dc52 <HAL_UARTEx_DisableFifoMode>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80066d0:	f7fe fcea 	bl	80050a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80066d4:	bf00      	nop
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	20001e38 	.word	0x20001e38
 80066dc:	40004400 	.word	0x40004400

080066e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b0a0      	sub	sp, #128	@ 0x80
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066e8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80066ec:	2200      	movs	r2, #0
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	605a      	str	r2, [r3, #4]
 80066f2:	609a      	str	r2, [r3, #8]
 80066f4:	60da      	str	r2, [r3, #12]
 80066f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80066f8:	f107 0318 	add.w	r3, r7, #24
 80066fc:	2254      	movs	r2, #84	@ 0x54
 80066fe:	2100      	movs	r1, #0
 8006700:	4618      	mov	r0, r3
 8006702:	f007 fd63 	bl	800e1cc <memset>
  if(uartHandle->Instance==LPUART1)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a99      	ldr	r2, [pc, #612]	@ (8006970 <HAL_UART_MspInit+0x290>)
 800670c:	4293      	cmp	r3, r2
 800670e:	f040 8093 	bne.w	8006838 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006712:	2320      	movs	r3, #32
 8006714:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006716:	2300      	movs	r3, #0
 8006718:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800671a:	f107 0318 	add.w	r3, r7, #24
 800671e:	4618      	mov	r0, r3
 8006720:	f003 fa3e 	bl	8009ba0 <HAL_RCCEx_PeriphCLKConfig>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800672a:	f7fe fcbd 	bl	80050a8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800672e:	4b91      	ldr	r3, [pc, #580]	@ (8006974 <HAL_UART_MspInit+0x294>)
 8006730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006732:	4a90      	ldr	r2, [pc, #576]	@ (8006974 <HAL_UART_MspInit+0x294>)
 8006734:	f043 0301 	orr.w	r3, r3, #1
 8006738:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800673a:	4b8e      	ldr	r3, [pc, #568]	@ (8006974 <HAL_UART_MspInit+0x294>)
 800673c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006746:	4b8b      	ldr	r3, [pc, #556]	@ (8006974 <HAL_UART_MspInit+0x294>)
 8006748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800674a:	4a8a      	ldr	r2, [pc, #552]	@ (8006974 <HAL_UART_MspInit+0x294>)
 800674c:	f043 0302 	orr.w	r3, r3, #2
 8006750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006752:	4b88      	ldr	r3, [pc, #544]	@ (8006974 <HAL_UART_MspInit+0x294>)
 8006754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	613b      	str	r3, [r7, #16]
 800675c:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800675e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006762:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006764:	2302      	movs	r3, #2
 8006766:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006768:	2300      	movs	r3, #0
 800676a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800676c:	2300      	movs	r3, #0
 800676e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8006770:	2308      	movs	r3, #8
 8006772:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006774:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006778:	4619      	mov	r1, r3
 800677a:	487f      	ldr	r0, [pc, #508]	@ (8006978 <HAL_UART_MspInit+0x298>)
 800677c:	f002 fa64 	bl	8008c48 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8006780:	4b7e      	ldr	r3, [pc, #504]	@ (800697c <HAL_UART_MspInit+0x29c>)
 8006782:	4a7f      	ldr	r2, [pc, #508]	@ (8006980 <HAL_UART_MspInit+0x2a0>)
 8006784:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8006786:	4b7d      	ldr	r3, [pc, #500]	@ (800697c <HAL_UART_MspInit+0x29c>)
 8006788:	2222      	movs	r2, #34	@ 0x22
 800678a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800678c:	4b7b      	ldr	r3, [pc, #492]	@ (800697c <HAL_UART_MspInit+0x29c>)
 800678e:	2200      	movs	r2, #0
 8006790:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006792:	4b7a      	ldr	r3, [pc, #488]	@ (800697c <HAL_UART_MspInit+0x29c>)
 8006794:	2200      	movs	r2, #0
 8006796:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006798:	4b78      	ldr	r3, [pc, #480]	@ (800697c <HAL_UART_MspInit+0x29c>)
 800679a:	2280      	movs	r2, #128	@ 0x80
 800679c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800679e:	4b77      	ldr	r3, [pc, #476]	@ (800697c <HAL_UART_MspInit+0x29c>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067a4:	4b75      	ldr	r3, [pc, #468]	@ (800697c <HAL_UART_MspInit+0x29c>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80067aa:	4b74      	ldr	r3, [pc, #464]	@ (800697c <HAL_UART_MspInit+0x29c>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80067b0:	4b72      	ldr	r3, [pc, #456]	@ (800697c <HAL_UART_MspInit+0x29c>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80067b6:	4871      	ldr	r0, [pc, #452]	@ (800697c <HAL_UART_MspInit+0x29c>)
 80067b8:	f001 ff14 	bl	80085e4 <HAL_DMA_Init>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80067c2:	f7fe fc71 	bl	80050a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a6c      	ldr	r2, [pc, #432]	@ (800697c <HAL_UART_MspInit+0x29c>)
 80067ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80067ce:	4a6b      	ldr	r2, [pc, #428]	@ (800697c <HAL_UART_MspInit+0x29c>)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 80067d4:	4b6b      	ldr	r3, [pc, #428]	@ (8006984 <HAL_UART_MspInit+0x2a4>)
 80067d6:	4a6c      	ldr	r2, [pc, #432]	@ (8006988 <HAL_UART_MspInit+0x2a8>)
 80067d8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80067da:	4b6a      	ldr	r3, [pc, #424]	@ (8006984 <HAL_UART_MspInit+0x2a4>)
 80067dc:	2223      	movs	r2, #35	@ 0x23
 80067de:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80067e0:	4b68      	ldr	r3, [pc, #416]	@ (8006984 <HAL_UART_MspInit+0x2a4>)
 80067e2:	2210      	movs	r2, #16
 80067e4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067e6:	4b67      	ldr	r3, [pc, #412]	@ (8006984 <HAL_UART_MspInit+0x2a4>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80067ec:	4b65      	ldr	r3, [pc, #404]	@ (8006984 <HAL_UART_MspInit+0x2a4>)
 80067ee:	2280      	movs	r2, #128	@ 0x80
 80067f0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067f2:	4b64      	ldr	r3, [pc, #400]	@ (8006984 <HAL_UART_MspInit+0x2a4>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067f8:	4b62      	ldr	r3, [pc, #392]	@ (8006984 <HAL_UART_MspInit+0x2a4>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80067fe:	4b61      	ldr	r3, [pc, #388]	@ (8006984 <HAL_UART_MspInit+0x2a4>)
 8006800:	2200      	movs	r2, #0
 8006802:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006804:	4b5f      	ldr	r3, [pc, #380]	@ (8006984 <HAL_UART_MspInit+0x2a4>)
 8006806:	2200      	movs	r2, #0
 8006808:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800680a:	485e      	ldr	r0, [pc, #376]	@ (8006984 <HAL_UART_MspInit+0x2a4>)
 800680c:	f001 feea 	bl	80085e4 <HAL_DMA_Init>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8006816:	f7fe fc47 	bl	80050a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a59      	ldr	r2, [pc, #356]	@ (8006984 <HAL_UART_MspInit+0x2a4>)
 800681e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006820:	4a58      	ldr	r2, [pc, #352]	@ (8006984 <HAL_UART_MspInit+0x2a4>)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8006826:	2200      	movs	r2, #0
 8006828:	2100      	movs	r1, #0
 800682a:	205b      	movs	r0, #91	@ 0x5b
 800682c:	f001 fea5 	bl	800857a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8006830:	205b      	movs	r0, #91	@ 0x5b
 8006832:	f001 febc 	bl	80085ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006836:	e097      	b.n	8006968 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a53      	ldr	r2, [pc, #332]	@ (800698c <HAL_UART_MspInit+0x2ac>)
 800683e:	4293      	cmp	r3, r2
 8006840:	f040 8092 	bne.w	8006968 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006844:	2302      	movs	r3, #2
 8006846:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006848:	2300      	movs	r3, #0
 800684a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800684c:	f107 0318 	add.w	r3, r7, #24
 8006850:	4618      	mov	r0, r3
 8006852:	f003 f9a5 	bl	8009ba0 <HAL_RCCEx_PeriphCLKConfig>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <HAL_UART_MspInit+0x180>
      Error_Handler();
 800685c:	f7fe fc24 	bl	80050a8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006860:	4b44      	ldr	r3, [pc, #272]	@ (8006974 <HAL_UART_MspInit+0x294>)
 8006862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006864:	4a43      	ldr	r2, [pc, #268]	@ (8006974 <HAL_UART_MspInit+0x294>)
 8006866:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800686a:	6593      	str	r3, [r2, #88]	@ 0x58
 800686c:	4b41      	ldr	r3, [pc, #260]	@ (8006974 <HAL_UART_MspInit+0x294>)
 800686e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006874:	60fb      	str	r3, [r7, #12]
 8006876:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006878:	4b3e      	ldr	r3, [pc, #248]	@ (8006974 <HAL_UART_MspInit+0x294>)
 800687a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800687c:	4a3d      	ldr	r2, [pc, #244]	@ (8006974 <HAL_UART_MspInit+0x294>)
 800687e:	f043 0301 	orr.w	r3, r3, #1
 8006882:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006884:	4b3b      	ldr	r3, [pc, #236]	@ (8006974 <HAL_UART_MspInit+0x294>)
 8006886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006890:	230c      	movs	r3, #12
 8006892:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006894:	2302      	movs	r3, #2
 8006896:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006898:	2300      	movs	r3, #0
 800689a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800689c:	2300      	movs	r3, #0
 800689e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80068a0:	2307      	movs	r3, #7
 80068a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80068a8:	4619      	mov	r1, r3
 80068aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80068ae:	f002 f9cb 	bl	8008c48 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80068b2:	4b37      	ldr	r3, [pc, #220]	@ (8006990 <HAL_UART_MspInit+0x2b0>)
 80068b4:	4a37      	ldr	r2, [pc, #220]	@ (8006994 <HAL_UART_MspInit+0x2b4>)
 80068b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80068b8:	4b35      	ldr	r3, [pc, #212]	@ (8006990 <HAL_UART_MspInit+0x2b0>)
 80068ba:	221a      	movs	r2, #26
 80068bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068be:	4b34      	ldr	r3, [pc, #208]	@ (8006990 <HAL_UART_MspInit+0x2b0>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068c4:	4b32      	ldr	r3, [pc, #200]	@ (8006990 <HAL_UART_MspInit+0x2b0>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80068ca:	4b31      	ldr	r3, [pc, #196]	@ (8006990 <HAL_UART_MspInit+0x2b0>)
 80068cc:	2280      	movs	r2, #128	@ 0x80
 80068ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80068d0:	4b2f      	ldr	r3, [pc, #188]	@ (8006990 <HAL_UART_MspInit+0x2b0>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068d6:	4b2e      	ldr	r3, [pc, #184]	@ (8006990 <HAL_UART_MspInit+0x2b0>)
 80068d8:	2200      	movs	r2, #0
 80068da:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80068dc:	4b2c      	ldr	r3, [pc, #176]	@ (8006990 <HAL_UART_MspInit+0x2b0>)
 80068de:	2200      	movs	r2, #0
 80068e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80068e2:	4b2b      	ldr	r3, [pc, #172]	@ (8006990 <HAL_UART_MspInit+0x2b0>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80068e8:	4829      	ldr	r0, [pc, #164]	@ (8006990 <HAL_UART_MspInit+0x2b0>)
 80068ea:	f001 fe7b 	bl	80085e4 <HAL_DMA_Init>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <HAL_UART_MspInit+0x218>
      Error_Handler();
 80068f4:	f7fe fbd8 	bl	80050a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a25      	ldr	r2, [pc, #148]	@ (8006990 <HAL_UART_MspInit+0x2b0>)
 80068fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006900:	4a23      	ldr	r2, [pc, #140]	@ (8006990 <HAL_UART_MspInit+0x2b0>)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8006906:	4b24      	ldr	r3, [pc, #144]	@ (8006998 <HAL_UART_MspInit+0x2b8>)
 8006908:	4a24      	ldr	r2, [pc, #144]	@ (800699c <HAL_UART_MspInit+0x2bc>)
 800690a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800690c:	4b22      	ldr	r3, [pc, #136]	@ (8006998 <HAL_UART_MspInit+0x2b8>)
 800690e:	221b      	movs	r2, #27
 8006910:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006912:	4b21      	ldr	r3, [pc, #132]	@ (8006998 <HAL_UART_MspInit+0x2b8>)
 8006914:	2210      	movs	r2, #16
 8006916:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006918:	4b1f      	ldr	r3, [pc, #124]	@ (8006998 <HAL_UART_MspInit+0x2b8>)
 800691a:	2200      	movs	r2, #0
 800691c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800691e:	4b1e      	ldr	r3, [pc, #120]	@ (8006998 <HAL_UART_MspInit+0x2b8>)
 8006920:	2280      	movs	r2, #128	@ 0x80
 8006922:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006924:	4b1c      	ldr	r3, [pc, #112]	@ (8006998 <HAL_UART_MspInit+0x2b8>)
 8006926:	2200      	movs	r2, #0
 8006928:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800692a:	4b1b      	ldr	r3, [pc, #108]	@ (8006998 <HAL_UART_MspInit+0x2b8>)
 800692c:	2200      	movs	r2, #0
 800692e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006930:	4b19      	ldr	r3, [pc, #100]	@ (8006998 <HAL_UART_MspInit+0x2b8>)
 8006932:	2200      	movs	r2, #0
 8006934:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006936:	4b18      	ldr	r3, [pc, #96]	@ (8006998 <HAL_UART_MspInit+0x2b8>)
 8006938:	2200      	movs	r2, #0
 800693a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800693c:	4816      	ldr	r0, [pc, #88]	@ (8006998 <HAL_UART_MspInit+0x2b8>)
 800693e:	f001 fe51 	bl	80085e4 <HAL_DMA_Init>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8006948:	f7fe fbae 	bl	80050a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a12      	ldr	r2, [pc, #72]	@ (8006998 <HAL_UART_MspInit+0x2b8>)
 8006950:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006952:	4a11      	ldr	r2, [pc, #68]	@ (8006998 <HAL_UART_MspInit+0x2b8>)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006958:	2200      	movs	r2, #0
 800695a:	2100      	movs	r1, #0
 800695c:	2026      	movs	r0, #38	@ 0x26
 800695e:	f001 fe0c 	bl	800857a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006962:	2026      	movs	r0, #38	@ 0x26
 8006964:	f001 fe23 	bl	80085ae <HAL_NVIC_EnableIRQ>
}
 8006968:	bf00      	nop
 800696a:	3780      	adds	r7, #128	@ 0x80
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	40008000 	.word	0x40008000
 8006974:	40021000 	.word	0x40021000
 8006978:	48000400 	.word	0x48000400
 800697c:	20001f04 	.word	0x20001f04
 8006980:	40020044 	.word	0x40020044
 8006984:	20001f64 	.word	0x20001f64
 8006988:	40020058 	.word	0x40020058
 800698c:	40004400 	.word	0x40004400
 8006990:	20001fc4 	.word	0x20001fc4
 8006994:	4002001c 	.word	0x4002001c
 8006998:	20002024 	.word	0x20002024
 800699c:	40020030 	.word	0x40020030

080069a0 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 80069a0:	480d      	ldr	r0, [pc, #52]	@ (80069d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80069a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80069a4:	f7ff f9ba 	bl	8005d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80069a8:	480c      	ldr	r0, [pc, #48]	@ (80069dc <LoopForever+0x6>)
  ldr r1, =_edata
 80069aa:	490d      	ldr	r1, [pc, #52]	@ (80069e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80069ac:	4a0d      	ldr	r2, [pc, #52]	@ (80069e4 <LoopForever+0xe>)
  movs r3, #0
 80069ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80069b0:	e002      	b.n	80069b8 <LoopCopyDataInit>

080069b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80069b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80069b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80069b6:	3304      	adds	r3, #4

080069b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80069b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80069ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80069bc:	d3f9      	bcc.n	80069b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80069be:	4a0a      	ldr	r2, [pc, #40]	@ (80069e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80069c0:	4c0a      	ldr	r4, [pc, #40]	@ (80069ec <LoopForever+0x16>)
  movs r3, #0
 80069c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80069c4:	e001      	b.n	80069ca <LoopFillZerobss>

080069c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80069c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80069c8:	3204      	adds	r2, #4

080069ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80069ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80069cc:	d3fb      	bcc.n	80069c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80069ce:	f007 fc1b 	bl	800e208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80069d2:	f7fd fe8d 	bl	80046f0 <main>

080069d6 <LoopForever>:

LoopForever:
    b LoopForever
 80069d6:	e7fe      	b.n	80069d6 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 80069d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80069dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80069e0:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 80069e4:	08010550 	.word	0x08010550
  ldr r2, =_sbss
 80069e8:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 80069ec:	200021d0 	.word	0x200021d0

080069f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80069f0:	e7fe      	b.n	80069f0 <ADC1_2_IRQHandler>

080069f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069fc:	2003      	movs	r0, #3
 80069fe:	f001 fdb1 	bl	8008564 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a02:	2000      	movs	r0, #0
 8006a04:	f000 f80e 	bl	8006a24 <HAL_InitTick>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	71fb      	strb	r3, [r7, #7]
 8006a12:	e001      	b.n	8006a18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006a14:	f7ff f87e 	bl	8005b14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006a18:	79fb      	ldrb	r3, [r7, #7]

}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006a30:	4b16      	ldr	r3, [pc, #88]	@ (8006a8c <HAL_InitTick+0x68>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d022      	beq.n	8006a7e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006a38:	4b15      	ldr	r3, [pc, #84]	@ (8006a90 <HAL_InitTick+0x6c>)
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	4b13      	ldr	r3, [pc, #76]	@ (8006a8c <HAL_InitTick+0x68>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f001 fdbc 	bl	80085ca <HAL_SYSTICK_Config>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10f      	bne.n	8006a78 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b0f      	cmp	r3, #15
 8006a5c:	d809      	bhi.n	8006a72 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006a5e:	2200      	movs	r2, #0
 8006a60:	6879      	ldr	r1, [r7, #4]
 8006a62:	f04f 30ff 	mov.w	r0, #4294967295
 8006a66:	f001 fd88 	bl	800857a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8006a94 <HAL_InitTick+0x70>)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	e007      	b.n	8006a82 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	73fb      	strb	r3, [r7, #15]
 8006a76:	e004      	b.n	8006a82 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	73fb      	strb	r3, [r7, #15]
 8006a7c:	e001      	b.n	8006a82 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	200000fc 	.word	0x200000fc
 8006a90:	200000f4 	.word	0x200000f4
 8006a94:	200000f8 	.word	0x200000f8

08006a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006a9c:	4b05      	ldr	r3, [pc, #20]	@ (8006ab4 <HAL_IncTick+0x1c>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	4b05      	ldr	r3, [pc, #20]	@ (8006ab8 <HAL_IncTick+0x20>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	4a03      	ldr	r2, [pc, #12]	@ (8006ab4 <HAL_IncTick+0x1c>)
 8006aa8:	6013      	str	r3, [r2, #0]
}
 8006aaa:	bf00      	nop
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	20002084 	.word	0x20002084
 8006ab8:	200000fc 	.word	0x200000fc

08006abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
  return uwTick;
 8006ac0:	4b03      	ldr	r3, [pc, #12]	@ (8006ad0 <HAL_GetTick+0x14>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	20002084 	.word	0x20002084

08006ad4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	609a      	str	r2, [r3, #8]
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	609a      	str	r2, [r3, #8]
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3360      	adds	r3, #96	@ 0x60
 8006b4e:	461a      	mov	r2, r3
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	4b08      	ldr	r3, [pc, #32]	@ (8006b80 <LL_ADC_SetOffset+0x44>)
 8006b5e:	4013      	ands	r3, r2
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006b74:	bf00      	nop
 8006b76:	371c      	adds	r7, #28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	03fff000 	.word	0x03fff000

08006b84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3360      	adds	r3, #96	@ 0x60
 8006b92:	461a      	mov	r2, r3
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3360      	adds	r3, #96	@ 0x60
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006bda:	bf00      	nop
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b087      	sub	sp, #28
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3360      	adds	r3, #96	@ 0x60
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006c10:	bf00      	nop
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3360      	adds	r3, #96	@ 0x60
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	431a      	orrs	r2, r3
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006c46:	bf00      	nop
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	431a      	orrs	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	615a      	str	r2, [r3, #20]
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e000      	b.n	8006c92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b087      	sub	sp, #28
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3330      	adds	r3, #48	@ 0x30
 8006cae:	461a      	mov	r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	0a1b      	lsrs	r3, r3, #8
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	f003 030c 	and.w	r3, r3, #12
 8006cba:	4413      	add	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	f003 031f 	and.w	r3, r3, #31
 8006cc8:	211f      	movs	r1, #31
 8006cca:	fa01 f303 	lsl.w	r3, r1, r3
 8006cce:	43db      	mvns	r3, r3
 8006cd0:	401a      	ands	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	0e9b      	lsrs	r3, r3, #26
 8006cd6:	f003 011f 	and.w	r1, r3, #31
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f003 031f 	and.w	r3, r3, #31
 8006ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006cea:	bf00      	nop
 8006cec:	371c      	adds	r7, #28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b087      	sub	sp, #28
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3314      	adds	r3, #20
 8006d06:	461a      	mov	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	0e5b      	lsrs	r3, r3, #25
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	4413      	add	r3, r2
 8006d14:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	0d1b      	lsrs	r3, r3, #20
 8006d1e:	f003 031f 	and.w	r3, r3, #31
 8006d22:	2107      	movs	r1, #7
 8006d24:	fa01 f303 	lsl.w	r3, r1, r3
 8006d28:	43db      	mvns	r3, r3
 8006d2a:	401a      	ands	r2, r3
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	0d1b      	lsrs	r3, r3, #20
 8006d30:	f003 031f 	and.w	r3, r3, #31
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	fa01 f303 	lsl.w	r3, r1, r3
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006d40:	bf00      	nop
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d64:	43db      	mvns	r3, r3
 8006d66:	401a      	ands	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f003 0318 	and.w	r3, r3, #24
 8006d6e:	4908      	ldr	r1, [pc, #32]	@ (8006d90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006d70:	40d9      	lsrs	r1, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	400b      	ands	r3, r1
 8006d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	0007ffff 	.word	0x0007ffff

08006d94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f003 031f 	and.w	r3, r3, #31
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006dc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6093      	str	r3, [r2, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006de4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006de8:	d101      	bne.n	8006dee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e000      	b.n	8006df0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006e0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006e10:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e38:	d101      	bne.n	8006e3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e000      	b.n	8006e40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006e60:	f043 0201 	orr.w	r2, r3, #1
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006e88:	f043 0202 	orr.w	r2, r3, #2
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d101      	bne.n	8006eb4 <LL_ADC_IsEnabled+0x18>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e000      	b.n	8006eb6 <LL_ADC_IsEnabled+0x1a>
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b083      	sub	sp, #12
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d101      	bne.n	8006eda <LL_ADC_IsDisableOngoing+0x18>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <LL_ADC_IsDisableOngoing+0x1a>
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ef8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006efc:	f043 0204 	orr.w	r2, r3, #4
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b04      	cmp	r3, #4
 8006f22:	d101      	bne.n	8006f28 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006f24:	2301      	movs	r3, #1
 8006f26:	e000      	b.n	8006f2a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f003 0308 	and.w	r3, r3, #8
 8006f46:	2b08      	cmp	r3, #8
 8006f48:	d101      	bne.n	8006f4e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e000      	b.n	8006f50 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006f5c:	b590      	push	{r4, r7, lr}
 8006f5e:	b089      	sub	sp, #36	@ 0x24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e1a9      	b.n	80072ca <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d109      	bne.n	8006f98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7fd fa13 	bl	80043b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff ff19 	bl	8006dd4 <LL_ADC_IsDeepPowerDownEnabled>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d004      	beq.n	8006fb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7ff feff 	bl	8006db0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff ff34 	bl	8006e24 <LL_ADC_IsInternalRegulatorEnabled>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d115      	bne.n	8006fee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff ff18 	bl	8006dfc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006fcc:	4b9c      	ldr	r3, [pc, #624]	@ (8007240 <HAL_ADC_Init+0x2e4>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	099b      	lsrs	r3, r3, #6
 8006fd2:	4a9c      	ldr	r2, [pc, #624]	@ (8007244 <HAL_ADC_Init+0x2e8>)
 8006fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd8:	099b      	lsrs	r3, r3, #6
 8006fda:	3301      	adds	r3, #1
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006fe0:	e002      	b.n	8006fe8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1f9      	bne.n	8006fe2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff ff16 	bl	8006e24 <LL_ADC_IsInternalRegulatorEnabled>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10d      	bne.n	800701a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007002:	f043 0210 	orr.w	r2, r3, #16
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800700e:	f043 0201 	orr.w	r2, r3, #1
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4618      	mov	r0, r3
 8007020:	f7ff ff76 	bl	8006f10 <LL_ADC_REG_IsConversionOngoing>
 8007024:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800702a:	f003 0310 	and.w	r3, r3, #16
 800702e:	2b00      	cmp	r3, #0
 8007030:	f040 8142 	bne.w	80072b8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2b00      	cmp	r3, #0
 8007038:	f040 813e 	bne.w	80072b8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007040:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007044:	f043 0202 	orr.w	r2, r3, #2
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff ff23 	bl	8006e9c <LL_ADC_IsEnabled>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d141      	bne.n	80070e0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007064:	d004      	beq.n	8007070 <HAL_ADC_Init+0x114>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a77      	ldr	r2, [pc, #476]	@ (8007248 <HAL_ADC_Init+0x2ec>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d10f      	bne.n	8007090 <HAL_ADC_Init+0x134>
 8007070:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007074:	f7ff ff12 	bl	8006e9c <LL_ADC_IsEnabled>
 8007078:	4604      	mov	r4, r0
 800707a:	4873      	ldr	r0, [pc, #460]	@ (8007248 <HAL_ADC_Init+0x2ec>)
 800707c:	f7ff ff0e 	bl	8006e9c <LL_ADC_IsEnabled>
 8007080:	4603      	mov	r3, r0
 8007082:	4323      	orrs	r3, r4
 8007084:	2b00      	cmp	r3, #0
 8007086:	bf0c      	ite	eq
 8007088:	2301      	moveq	r3, #1
 800708a:	2300      	movne	r3, #0
 800708c:	b2db      	uxtb	r3, r3
 800708e:	e012      	b.n	80070b6 <HAL_ADC_Init+0x15a>
 8007090:	486e      	ldr	r0, [pc, #440]	@ (800724c <HAL_ADC_Init+0x2f0>)
 8007092:	f7ff ff03 	bl	8006e9c <LL_ADC_IsEnabled>
 8007096:	4604      	mov	r4, r0
 8007098:	486d      	ldr	r0, [pc, #436]	@ (8007250 <HAL_ADC_Init+0x2f4>)
 800709a:	f7ff feff 	bl	8006e9c <LL_ADC_IsEnabled>
 800709e:	4603      	mov	r3, r0
 80070a0:	431c      	orrs	r4, r3
 80070a2:	486c      	ldr	r0, [pc, #432]	@ (8007254 <HAL_ADC_Init+0x2f8>)
 80070a4:	f7ff fefa 	bl	8006e9c <LL_ADC_IsEnabled>
 80070a8:	4603      	mov	r3, r0
 80070aa:	4323      	orrs	r3, r4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	bf0c      	ite	eq
 80070b0:	2301      	moveq	r3, #1
 80070b2:	2300      	movne	r3, #0
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d012      	beq.n	80070e0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070c2:	d004      	beq.n	80070ce <HAL_ADC_Init+0x172>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a5f      	ldr	r2, [pc, #380]	@ (8007248 <HAL_ADC_Init+0x2ec>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d101      	bne.n	80070d2 <HAL_ADC_Init+0x176>
 80070ce:	4a62      	ldr	r2, [pc, #392]	@ (8007258 <HAL_ADC_Init+0x2fc>)
 80070d0:	e000      	b.n	80070d4 <HAL_ADC_Init+0x178>
 80070d2:	4a62      	ldr	r2, [pc, #392]	@ (800725c <HAL_ADC_Init+0x300>)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	4619      	mov	r1, r3
 80070da:	4610      	mov	r0, r2
 80070dc:	f7ff fcfa 	bl	8006ad4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	7f5b      	ldrb	r3, [r3, #29]
 80070e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80070ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80070f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80070f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80070fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007100:	4313      	orrs	r3, r2
 8007102:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800710a:	2b01      	cmp	r3, #1
 800710c:	d106      	bne.n	800711c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007112:	3b01      	subs	r3, #1
 8007114:	045b      	lsls	r3, r3, #17
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	4313      	orrs	r3, r2
 800711a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007120:	2b00      	cmp	r3, #0
 8007122:	d009      	beq.n	8007138 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007128:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007130:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007132:	69ba      	ldr	r2, [r7, #24]
 8007134:	4313      	orrs	r3, r2
 8007136:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	4b48      	ldr	r3, [pc, #288]	@ (8007260 <HAL_ADC_Init+0x304>)
 8007140:	4013      	ands	r3, r2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	6812      	ldr	r2, [r2, #0]
 8007146:	69b9      	ldr	r1, [r7, #24]
 8007148:	430b      	orrs	r3, r1
 800714a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4618      	mov	r0, r3
 8007168:	f7ff fee5 	bl	8006f36 <LL_ADC_INJ_IsConversionOngoing>
 800716c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d17f      	bne.n	8007274 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d17c      	bne.n	8007274 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800717e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007186:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007188:	4313      	orrs	r3, r2
 800718a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007196:	f023 0302 	bic.w	r3, r3, #2
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6812      	ldr	r2, [r2, #0]
 800719e:	69b9      	ldr	r1, [r7, #24]
 80071a0:	430b      	orrs	r3, r1
 80071a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d017      	beq.n	80071dc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	691a      	ldr	r2, [r3, #16]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80071ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80071c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80071c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6911      	ldr	r1, [r2, #16]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	6812      	ldr	r2, [r2, #0]
 80071d4:	430b      	orrs	r3, r1
 80071d6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80071da:	e013      	b.n	8007204 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691a      	ldr	r2, [r3, #16]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80071ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6812      	ldr	r2, [r2, #0]
 80071f8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80071fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007200:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800720a:	2b01      	cmp	r3, #1
 800720c:	d12a      	bne.n	8007264 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007218:	f023 0304 	bic.w	r3, r3, #4
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007224:	4311      	orrs	r1, r2
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800722a:	4311      	orrs	r1, r2
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007230:	430a      	orrs	r2, r1
 8007232:	431a      	orrs	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f042 0201 	orr.w	r2, r2, #1
 800723c:	611a      	str	r2, [r3, #16]
 800723e:	e019      	b.n	8007274 <HAL_ADC_Init+0x318>
 8007240:	200000f4 	.word	0x200000f4
 8007244:	053e2d63 	.word	0x053e2d63
 8007248:	50000100 	.word	0x50000100
 800724c:	50000400 	.word	0x50000400
 8007250:	50000500 	.word	0x50000500
 8007254:	50000600 	.word	0x50000600
 8007258:	50000300 	.word	0x50000300
 800725c:	50000700 	.word	0x50000700
 8007260:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	691a      	ldr	r2, [r3, #16]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0201 	bic.w	r2, r2, #1
 8007272:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d10c      	bne.n	8007296 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007282:	f023 010f 	bic.w	r1, r3, #15
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	1e5a      	subs	r2, r3, #1
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	430a      	orrs	r2, r1
 8007292:	631a      	str	r2, [r3, #48]	@ 0x30
 8007294:	e007      	b.n	80072a6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 020f 	bic.w	r2, r2, #15
 80072a4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072aa:	f023 0303 	bic.w	r3, r3, #3
 80072ae:	f043 0201 	orr.w	r2, r3, #1
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80072b6:	e007      	b.n	80072c8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072bc:	f043 0210 	orr.w	r2, r3, #16
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80072c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3724      	adds	r7, #36	@ 0x24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd90      	pop	{r4, r7, pc}
 80072d2:	bf00      	nop

080072d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072e8:	d004      	beq.n	80072f4 <HAL_ADC_Start_DMA+0x20>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a5a      	ldr	r2, [pc, #360]	@ (8007458 <HAL_ADC_Start_DMA+0x184>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d101      	bne.n	80072f8 <HAL_ADC_Start_DMA+0x24>
 80072f4:	4b59      	ldr	r3, [pc, #356]	@ (800745c <HAL_ADC_Start_DMA+0x188>)
 80072f6:	e000      	b.n	80072fa <HAL_ADC_Start_DMA+0x26>
 80072f8:	4b59      	ldr	r3, [pc, #356]	@ (8007460 <HAL_ADC_Start_DMA+0x18c>)
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7ff fd4a 	bl	8006d94 <LL_ADC_GetMultimode>
 8007300:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff fe02 	bl	8006f10 <LL_ADC_REG_IsConversionOngoing>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	f040 809b 	bne.w	800744a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800731a:	2b01      	cmp	r3, #1
 800731c:	d101      	bne.n	8007322 <HAL_ADC_Start_DMA+0x4e>
 800731e:	2302      	movs	r3, #2
 8007320:	e096      	b.n	8007450 <HAL_ADC_Start_DMA+0x17c>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a4d      	ldr	r2, [pc, #308]	@ (8007464 <HAL_ADC_Start_DMA+0x190>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d008      	beq.n	8007346 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d005      	beq.n	8007346 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b05      	cmp	r3, #5
 800733e:	d002      	beq.n	8007346 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	2b09      	cmp	r3, #9
 8007344:	d17a      	bne.n	800743c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 fcf6 	bl	8007d38 <ADC_Enable>
 800734c:	4603      	mov	r3, r0
 800734e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007350:	7dfb      	ldrb	r3, [r7, #23]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d16d      	bne.n	8007432 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800735a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800735e:	f023 0301 	bic.w	r3, r3, #1
 8007362:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a3a      	ldr	r2, [pc, #232]	@ (8007458 <HAL_ADC_Start_DMA+0x184>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d009      	beq.n	8007388 <HAL_ADC_Start_DMA+0xb4>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a3b      	ldr	r2, [pc, #236]	@ (8007468 <HAL_ADC_Start_DMA+0x194>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d002      	beq.n	8007384 <HAL_ADC_Start_DMA+0xb0>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	e003      	b.n	800738c <HAL_ADC_Start_DMA+0xb8>
 8007384:	4b39      	ldr	r3, [pc, #228]	@ (800746c <HAL_ADC_Start_DMA+0x198>)
 8007386:	e001      	b.n	800738c <HAL_ADC_Start_DMA+0xb8>
 8007388:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	6812      	ldr	r2, [r2, #0]
 8007390:	4293      	cmp	r3, r2
 8007392:	d002      	beq.n	800739a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d105      	bne.n	80073a6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800739e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d006      	beq.n	80073c0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073b6:	f023 0206 	bic.w	r2, r3, #6
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80073be:	e002      	b.n	80073c6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ca:	4a29      	ldr	r2, [pc, #164]	@ (8007470 <HAL_ADC_Start_DMA+0x19c>)
 80073cc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073d2:	4a28      	ldr	r2, [pc, #160]	@ (8007474 <HAL_ADC_Start_DMA+0x1a0>)
 80073d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073da:	4a27      	ldr	r2, [pc, #156]	@ (8007478 <HAL_ADC_Start_DMA+0x1a4>)
 80073dc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	221c      	movs	r2, #28
 80073e4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f042 0210 	orr.w	r2, r2, #16
 80073fc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f042 0201 	orr.w	r2, r2, #1
 800740c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3340      	adds	r3, #64	@ 0x40
 8007418:	4619      	mov	r1, r3
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f001 f989 	bl	8008734 <HAL_DMA_Start_IT>
 8007422:	4603      	mov	r3, r0
 8007424:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff fd5c 	bl	8006ee8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007430:	e00d      	b.n	800744e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800743a:	e008      	b.n	800744e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8007448:	e001      	b.n	800744e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800744a:	2302      	movs	r3, #2
 800744c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800744e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	50000100 	.word	0x50000100
 800745c:	50000300 	.word	0x50000300
 8007460:	50000700 	.word	0x50000700
 8007464:	50000600 	.word	0x50000600
 8007468:	50000500 	.word	0x50000500
 800746c:	50000400 	.word	0x50000400
 8007470:	08007f23 	.word	0x08007f23
 8007474:	08007ffb 	.word	0x08007ffb
 8007478:	08008017 	.word	0x08008017

0800747c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b0b6      	sub	sp, #216	@ 0xd8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d102      	bne.n	80074dc <HAL_ADC_ConfigChannel+0x24>
 80074d6:	2302      	movs	r3, #2
 80074d8:	f000 bc13 	b.w	8007d02 <HAL_ADC_ConfigChannel+0x84a>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7ff fd11 	bl	8006f10 <LL_ADC_REG_IsConversionOngoing>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f040 83f3 	bne.w	8007cdc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	6859      	ldr	r1, [r3, #4]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	f7ff fbcb 	bl	8006c9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4618      	mov	r0, r3
 800750e:	f7ff fcff 	bl	8006f10 <LL_ADC_REG_IsConversionOngoing>
 8007512:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4618      	mov	r0, r3
 800751c:	f7ff fd0b 	bl	8006f36 <LL_ADC_INJ_IsConversionOngoing>
 8007520:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007524:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007528:	2b00      	cmp	r3, #0
 800752a:	f040 81d9 	bne.w	80078e0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800752e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007532:	2b00      	cmp	r3, #0
 8007534:	f040 81d4 	bne.w	80078e0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007540:	d10f      	bne.n	8007562 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6818      	ldr	r0, [r3, #0]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2200      	movs	r2, #0
 800754c:	4619      	mov	r1, r3
 800754e:	f7ff fbd2 	bl	8006cf6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff fb79 	bl	8006c52 <LL_ADC_SetSamplingTimeCommonConfig>
 8007560:	e00e      	b.n	8007580 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6818      	ldr	r0, [r3, #0]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	6819      	ldr	r1, [r3, #0]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	461a      	mov	r2, r3
 8007570:	f7ff fbc1 	bl	8006cf6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2100      	movs	r1, #0
 800757a:	4618      	mov	r0, r3
 800757c:	f7ff fb69 	bl	8006c52 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	695a      	ldr	r2, [r3, #20]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	08db      	lsrs	r3, r3, #3
 800758c:	f003 0303 	and.w	r3, r3, #3
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	fa02 f303 	lsl.w	r3, r2, r3
 8007596:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d022      	beq.n	80075e8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	6919      	ldr	r1, [r3, #16]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075b2:	f7ff fac3 	bl	8006b3c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6818      	ldr	r0, [r3, #0]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	6919      	ldr	r1, [r3, #16]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	461a      	mov	r2, r3
 80075c4:	f7ff fb0f 	bl	8006be6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6818      	ldr	r0, [r3, #0]
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d102      	bne.n	80075de <HAL_ADC_ConfigChannel+0x126>
 80075d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80075dc:	e000      	b.n	80075e0 <HAL_ADC_ConfigChannel+0x128>
 80075de:	2300      	movs	r3, #0
 80075e0:	461a      	mov	r2, r3
 80075e2:	f7ff fb1b 	bl	8006c1c <LL_ADC_SetOffsetSaturation>
 80075e6:	e17b      	b.n	80078e0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2100      	movs	r1, #0
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7ff fac8 	bl	8006b84 <LL_ADC_GetOffsetChannel>
 80075f4:	4603      	mov	r3, r0
 80075f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10a      	bne.n	8007614 <HAL_ADC_ConfigChannel+0x15c>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2100      	movs	r1, #0
 8007604:	4618      	mov	r0, r3
 8007606:	f7ff fabd 	bl	8006b84 <LL_ADC_GetOffsetChannel>
 800760a:	4603      	mov	r3, r0
 800760c:	0e9b      	lsrs	r3, r3, #26
 800760e:	f003 021f 	and.w	r2, r3, #31
 8007612:	e01e      	b.n	8007652 <HAL_ADC_ConfigChannel+0x19a>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2100      	movs	r1, #0
 800761a:	4618      	mov	r0, r3
 800761c:	f7ff fab2 	bl	8006b84 <LL_ADC_GetOffsetChannel>
 8007620:	4603      	mov	r3, r0
 8007622:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007626:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800762a:	fa93 f3a3 	rbit	r3, r3
 800762e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007632:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007636:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800763a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8007642:	2320      	movs	r3, #32
 8007644:	e004      	b.n	8007650 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8007646:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800764a:	fab3 f383 	clz	r3, r3
 800764e:	b2db      	uxtb	r3, r3
 8007650:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800765a:	2b00      	cmp	r3, #0
 800765c:	d105      	bne.n	800766a <HAL_ADC_ConfigChannel+0x1b2>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	0e9b      	lsrs	r3, r3, #26
 8007664:	f003 031f 	and.w	r3, r3, #31
 8007668:	e018      	b.n	800769c <HAL_ADC_ConfigChannel+0x1e4>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007672:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007676:	fa93 f3a3 	rbit	r3, r3
 800767a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800767e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007682:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8007686:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800768e:	2320      	movs	r3, #32
 8007690:	e004      	b.n	800769c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8007692:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007696:	fab3 f383 	clz	r3, r3
 800769a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800769c:	429a      	cmp	r2, r3
 800769e:	d106      	bne.n	80076ae <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2200      	movs	r2, #0
 80076a6:	2100      	movs	r1, #0
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff fa81 	bl	8006bb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2101      	movs	r1, #1
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7ff fa65 	bl	8006b84 <LL_ADC_GetOffsetChannel>
 80076ba:	4603      	mov	r3, r0
 80076bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10a      	bne.n	80076da <HAL_ADC_ConfigChannel+0x222>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2101      	movs	r1, #1
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7ff fa5a 	bl	8006b84 <LL_ADC_GetOffsetChannel>
 80076d0:	4603      	mov	r3, r0
 80076d2:	0e9b      	lsrs	r3, r3, #26
 80076d4:	f003 021f 	and.w	r2, r3, #31
 80076d8:	e01e      	b.n	8007718 <HAL_ADC_ConfigChannel+0x260>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2101      	movs	r1, #1
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7ff fa4f 	bl	8006b84 <LL_ADC_GetOffsetChannel>
 80076e6:	4603      	mov	r3, r0
 80076e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80076f0:	fa93 f3a3 	rbit	r3, r3
 80076f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80076f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8007708:	2320      	movs	r3, #32
 800770a:	e004      	b.n	8007716 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800770c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007710:	fab3 f383 	clz	r3, r3
 8007714:	b2db      	uxtb	r3, r3
 8007716:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007720:	2b00      	cmp	r3, #0
 8007722:	d105      	bne.n	8007730 <HAL_ADC_ConfigChannel+0x278>
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	0e9b      	lsrs	r3, r3, #26
 800772a:	f003 031f 	and.w	r3, r3, #31
 800772e:	e018      	b.n	8007762 <HAL_ADC_ConfigChannel+0x2aa>
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007738:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800773c:	fa93 f3a3 	rbit	r3, r3
 8007740:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007744:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007748:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800774c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8007754:	2320      	movs	r3, #32
 8007756:	e004      	b.n	8007762 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8007758:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800775c:	fab3 f383 	clz	r3, r3
 8007760:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007762:	429a      	cmp	r2, r3
 8007764:	d106      	bne.n	8007774 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2200      	movs	r2, #0
 800776c:	2101      	movs	r1, #1
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff fa1e 	bl	8006bb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2102      	movs	r1, #2
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff fa02 	bl	8006b84 <LL_ADC_GetOffsetChannel>
 8007780:	4603      	mov	r3, r0
 8007782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10a      	bne.n	80077a0 <HAL_ADC_ConfigChannel+0x2e8>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2102      	movs	r1, #2
 8007790:	4618      	mov	r0, r3
 8007792:	f7ff f9f7 	bl	8006b84 <LL_ADC_GetOffsetChannel>
 8007796:	4603      	mov	r3, r0
 8007798:	0e9b      	lsrs	r3, r3, #26
 800779a:	f003 021f 	and.w	r2, r3, #31
 800779e:	e01e      	b.n	80077de <HAL_ADC_ConfigChannel+0x326>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2102      	movs	r1, #2
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff f9ec 	bl	8006b84 <LL_ADC_GetOffsetChannel>
 80077ac:	4603      	mov	r3, r0
 80077ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077b6:	fa93 f3a3 	rbit	r3, r3
 80077ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80077be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80077c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80077c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80077ce:	2320      	movs	r3, #32
 80077d0:	e004      	b.n	80077dc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80077d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80077d6:	fab3 f383 	clz	r3, r3
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d105      	bne.n	80077f6 <HAL_ADC_ConfigChannel+0x33e>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	0e9b      	lsrs	r3, r3, #26
 80077f0:	f003 031f 	and.w	r3, r3, #31
 80077f4:	e016      	b.n	8007824 <HAL_ADC_ConfigChannel+0x36c>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007802:	fa93 f3a3 	rbit	r3, r3
 8007806:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007808:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800780a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800780e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8007816:	2320      	movs	r3, #32
 8007818:	e004      	b.n	8007824 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800781a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800781e:	fab3 f383 	clz	r3, r3
 8007822:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007824:	429a      	cmp	r2, r3
 8007826:	d106      	bne.n	8007836 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2200      	movs	r2, #0
 800782e:	2102      	movs	r1, #2
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff f9bd 	bl	8006bb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2103      	movs	r1, #3
 800783c:	4618      	mov	r0, r3
 800783e:	f7ff f9a1 	bl	8006b84 <LL_ADC_GetOffsetChannel>
 8007842:	4603      	mov	r3, r0
 8007844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10a      	bne.n	8007862 <HAL_ADC_ConfigChannel+0x3aa>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2103      	movs	r1, #3
 8007852:	4618      	mov	r0, r3
 8007854:	f7ff f996 	bl	8006b84 <LL_ADC_GetOffsetChannel>
 8007858:	4603      	mov	r3, r0
 800785a:	0e9b      	lsrs	r3, r3, #26
 800785c:	f003 021f 	and.w	r2, r3, #31
 8007860:	e017      	b.n	8007892 <HAL_ADC_ConfigChannel+0x3da>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2103      	movs	r1, #3
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff f98b 	bl	8006b84 <LL_ADC_GetOffsetChannel>
 800786e:	4603      	mov	r3, r0
 8007870:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007872:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007874:	fa93 f3a3 	rbit	r3, r3
 8007878:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800787a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800787c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800787e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8007884:	2320      	movs	r3, #32
 8007886:	e003      	b.n	8007890 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8007888:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800788a:	fab3 f383 	clz	r3, r3
 800788e:	b2db      	uxtb	r3, r3
 8007890:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800789a:	2b00      	cmp	r3, #0
 800789c:	d105      	bne.n	80078aa <HAL_ADC_ConfigChannel+0x3f2>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	0e9b      	lsrs	r3, r3, #26
 80078a4:	f003 031f 	and.w	r3, r3, #31
 80078a8:	e011      	b.n	80078ce <HAL_ADC_ConfigChannel+0x416>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80078b2:	fa93 f3a3 	rbit	r3, r3
 80078b6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80078b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80078bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80078c2:	2320      	movs	r3, #32
 80078c4:	e003      	b.n	80078ce <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80078c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078c8:	fab3 f383 	clz	r3, r3
 80078cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d106      	bne.n	80078e0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2200      	movs	r2, #0
 80078d8:	2103      	movs	r1, #3
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff f968 	bl	8006bb0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7ff fad9 	bl	8006e9c <LL_ADC_IsEnabled>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f040 813d 	bne.w	8007b6c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6818      	ldr	r0, [r3, #0]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	6819      	ldr	r1, [r3, #0]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	461a      	mov	r2, r3
 8007900:	f7ff fa24 	bl	8006d4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	4aa2      	ldr	r2, [pc, #648]	@ (8007b94 <HAL_ADC_ConfigChannel+0x6dc>)
 800790a:	4293      	cmp	r3, r2
 800790c:	f040 812e 	bne.w	8007b6c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10b      	bne.n	8007938 <HAL_ADC_ConfigChannel+0x480>
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	0e9b      	lsrs	r3, r3, #26
 8007926:	3301      	adds	r3, #1
 8007928:	f003 031f 	and.w	r3, r3, #31
 800792c:	2b09      	cmp	r3, #9
 800792e:	bf94      	ite	ls
 8007930:	2301      	movls	r3, #1
 8007932:	2300      	movhi	r3, #0
 8007934:	b2db      	uxtb	r3, r3
 8007936:	e019      	b.n	800796c <HAL_ADC_ConfigChannel+0x4b4>
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800793e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007940:	fa93 f3a3 	rbit	r3, r3
 8007944:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007946:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007948:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800794a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8007950:	2320      	movs	r3, #32
 8007952:	e003      	b.n	800795c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8007954:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007956:	fab3 f383 	clz	r3, r3
 800795a:	b2db      	uxtb	r3, r3
 800795c:	3301      	adds	r3, #1
 800795e:	f003 031f 	and.w	r3, r3, #31
 8007962:	2b09      	cmp	r3, #9
 8007964:	bf94      	ite	ls
 8007966:	2301      	movls	r3, #1
 8007968:	2300      	movhi	r3, #0
 800796a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800796c:	2b00      	cmp	r3, #0
 800796e:	d079      	beq.n	8007a64 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007978:	2b00      	cmp	r3, #0
 800797a:	d107      	bne.n	800798c <HAL_ADC_ConfigChannel+0x4d4>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	0e9b      	lsrs	r3, r3, #26
 8007982:	3301      	adds	r3, #1
 8007984:	069b      	lsls	r3, r3, #26
 8007986:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800798a:	e015      	b.n	80079b8 <HAL_ADC_ConfigChannel+0x500>
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007994:	fa93 f3a3 	rbit	r3, r3
 8007998:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800799a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800799c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800799e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80079a4:	2320      	movs	r3, #32
 80079a6:	e003      	b.n	80079b0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80079a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079aa:	fab3 f383 	clz	r3, r3
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	3301      	adds	r3, #1
 80079b2:	069b      	lsls	r3, r3, #26
 80079b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d109      	bne.n	80079d8 <HAL_ADC_ConfigChannel+0x520>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	0e9b      	lsrs	r3, r3, #26
 80079ca:	3301      	adds	r3, #1
 80079cc:	f003 031f 	and.w	r3, r3, #31
 80079d0:	2101      	movs	r1, #1
 80079d2:	fa01 f303 	lsl.w	r3, r1, r3
 80079d6:	e017      	b.n	8007a08 <HAL_ADC_ConfigChannel+0x550>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079e0:	fa93 f3a3 	rbit	r3, r3
 80079e4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80079e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80079ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80079f0:	2320      	movs	r3, #32
 80079f2:	e003      	b.n	80079fc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80079f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079f6:	fab3 f383 	clz	r3, r3
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	3301      	adds	r3, #1
 80079fe:	f003 031f 	and.w	r3, r3, #31
 8007a02:	2101      	movs	r1, #1
 8007a04:	fa01 f303 	lsl.w	r3, r1, r3
 8007a08:	ea42 0103 	orr.w	r1, r2, r3
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10a      	bne.n	8007a2e <HAL_ADC_ConfigChannel+0x576>
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	0e9b      	lsrs	r3, r3, #26
 8007a1e:	3301      	adds	r3, #1
 8007a20:	f003 021f 	and.w	r2, r3, #31
 8007a24:	4613      	mov	r3, r2
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	4413      	add	r3, r2
 8007a2a:	051b      	lsls	r3, r3, #20
 8007a2c:	e018      	b.n	8007a60 <HAL_ADC_ConfigChannel+0x5a8>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a36:	fa93 f3a3 	rbit	r3, r3
 8007a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8007a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8007a46:	2320      	movs	r3, #32
 8007a48:	e003      	b.n	8007a52 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8007a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a4c:	fab3 f383 	clz	r3, r3
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	3301      	adds	r3, #1
 8007a54:	f003 021f 	and.w	r2, r3, #31
 8007a58:	4613      	mov	r3, r2
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	4413      	add	r3, r2
 8007a5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007a60:	430b      	orrs	r3, r1
 8007a62:	e07e      	b.n	8007b62 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d107      	bne.n	8007a80 <HAL_ADC_ConfigChannel+0x5c8>
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	0e9b      	lsrs	r3, r3, #26
 8007a76:	3301      	adds	r3, #1
 8007a78:	069b      	lsls	r3, r3, #26
 8007a7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007a7e:	e015      	b.n	8007aac <HAL_ADC_ConfigChannel+0x5f4>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a88:	fa93 f3a3 	rbit	r3, r3
 8007a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8007a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a90:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8007a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8007a98:	2320      	movs	r3, #32
 8007a9a:	e003      	b.n	8007aa4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9e:	fab3 f383 	clz	r3, r3
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	069b      	lsls	r3, r3, #26
 8007aa8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d109      	bne.n	8007acc <HAL_ADC_ConfigChannel+0x614>
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	0e9b      	lsrs	r3, r3, #26
 8007abe:	3301      	adds	r3, #1
 8007ac0:	f003 031f 	and.w	r3, r3, #31
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aca:	e017      	b.n	8007afc <HAL_ADC_ConfigChannel+0x644>
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	fa93 f3a3 	rbit	r3, r3
 8007ad8:	61fb      	str	r3, [r7, #28]
  return result;
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007ae4:	2320      	movs	r3, #32
 8007ae6:	e003      	b.n	8007af0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aea:	fab3 f383 	clz	r3, r3
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	3301      	adds	r3, #1
 8007af2:	f003 031f 	and.w	r3, r3, #31
 8007af6:	2101      	movs	r1, #1
 8007af8:	fa01 f303 	lsl.w	r3, r1, r3
 8007afc:	ea42 0103 	orr.w	r1, r2, r3
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10d      	bne.n	8007b28 <HAL_ADC_ConfigChannel+0x670>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	0e9b      	lsrs	r3, r3, #26
 8007b12:	3301      	adds	r3, #1
 8007b14:	f003 021f 	and.w	r2, r3, #31
 8007b18:	4613      	mov	r3, r2
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	4413      	add	r3, r2
 8007b1e:	3b1e      	subs	r3, #30
 8007b20:	051b      	lsls	r3, r3, #20
 8007b22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007b26:	e01b      	b.n	8007b60 <HAL_ADC_ConfigChannel+0x6a8>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	fa93 f3a3 	rbit	r3, r3
 8007b34:	613b      	str	r3, [r7, #16]
  return result;
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d101      	bne.n	8007b44 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007b40:	2320      	movs	r3, #32
 8007b42:	e003      	b.n	8007b4c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	fab3 f383 	clz	r3, r3
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	f003 021f 	and.w	r2, r3, #31
 8007b52:	4613      	mov	r3, r2
 8007b54:	005b      	lsls	r3, r3, #1
 8007b56:	4413      	add	r3, r2
 8007b58:	3b1e      	subs	r3, #30
 8007b5a:	051b      	lsls	r3, r3, #20
 8007b5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b60:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007b66:	4619      	mov	r1, r3
 8007b68:	f7ff f8c5 	bl	8006cf6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	4b09      	ldr	r3, [pc, #36]	@ (8007b98 <HAL_ADC_ConfigChannel+0x6e0>)
 8007b72:	4013      	ands	r3, r2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 80be 	beq.w	8007cf6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b82:	d004      	beq.n	8007b8e <HAL_ADC_ConfigChannel+0x6d6>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a04      	ldr	r2, [pc, #16]	@ (8007b9c <HAL_ADC_ConfigChannel+0x6e4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d10a      	bne.n	8007ba4 <HAL_ADC_ConfigChannel+0x6ec>
 8007b8e:	4b04      	ldr	r3, [pc, #16]	@ (8007ba0 <HAL_ADC_ConfigChannel+0x6e8>)
 8007b90:	e009      	b.n	8007ba6 <HAL_ADC_ConfigChannel+0x6ee>
 8007b92:	bf00      	nop
 8007b94:	407f0000 	.word	0x407f0000
 8007b98:	80080000 	.word	0x80080000
 8007b9c:	50000100 	.word	0x50000100
 8007ba0:	50000300 	.word	0x50000300
 8007ba4:	4b59      	ldr	r3, [pc, #356]	@ (8007d0c <HAL_ADC_ConfigChannel+0x854>)
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe ffba 	bl	8006b20 <LL_ADC_GetCommonPathInternalCh>
 8007bac:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a56      	ldr	r2, [pc, #344]	@ (8007d10 <HAL_ADC_ConfigChannel+0x858>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d004      	beq.n	8007bc4 <HAL_ADC_ConfigChannel+0x70c>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a55      	ldr	r2, [pc, #340]	@ (8007d14 <HAL_ADC_ConfigChannel+0x85c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d13a      	bne.n	8007c3a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007bc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007bc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d134      	bne.n	8007c3a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007bd8:	d005      	beq.n	8007be6 <HAL_ADC_ConfigChannel+0x72e>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a4e      	ldr	r2, [pc, #312]	@ (8007d18 <HAL_ADC_ConfigChannel+0x860>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	f040 8085 	bne.w	8007cf0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007bee:	d004      	beq.n	8007bfa <HAL_ADC_ConfigChannel+0x742>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a49      	ldr	r2, [pc, #292]	@ (8007d1c <HAL_ADC_ConfigChannel+0x864>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d101      	bne.n	8007bfe <HAL_ADC_ConfigChannel+0x746>
 8007bfa:	4a49      	ldr	r2, [pc, #292]	@ (8007d20 <HAL_ADC_ConfigChannel+0x868>)
 8007bfc:	e000      	b.n	8007c00 <HAL_ADC_ConfigChannel+0x748>
 8007bfe:	4a43      	ldr	r2, [pc, #268]	@ (8007d0c <HAL_ADC_ConfigChannel+0x854>)
 8007c00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007c04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007c08:	4619      	mov	r1, r3
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	f7fe ff75 	bl	8006afa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007c10:	4b44      	ldr	r3, [pc, #272]	@ (8007d24 <HAL_ADC_ConfigChannel+0x86c>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	099b      	lsrs	r3, r3, #6
 8007c16:	4a44      	ldr	r2, [pc, #272]	@ (8007d28 <HAL_ADC_ConfigChannel+0x870>)
 8007c18:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1c:	099b      	lsrs	r3, r3, #6
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	4613      	mov	r3, r2
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007c2a:	e002      	b.n	8007c32 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1f9      	bne.n	8007c2c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007c38:	e05a      	b.n	8007cf0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a3b      	ldr	r2, [pc, #236]	@ (8007d2c <HAL_ADC_ConfigChannel+0x874>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d125      	bne.n	8007c90 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007c44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007c48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d11f      	bne.n	8007c90 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a31      	ldr	r2, [pc, #196]	@ (8007d1c <HAL_ADC_ConfigChannel+0x864>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d104      	bne.n	8007c64 <HAL_ADC_ConfigChannel+0x7ac>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a34      	ldr	r2, [pc, #208]	@ (8007d30 <HAL_ADC_ConfigChannel+0x878>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d047      	beq.n	8007cf4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c6c:	d004      	beq.n	8007c78 <HAL_ADC_ConfigChannel+0x7c0>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a2a      	ldr	r2, [pc, #168]	@ (8007d1c <HAL_ADC_ConfigChannel+0x864>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d101      	bne.n	8007c7c <HAL_ADC_ConfigChannel+0x7c4>
 8007c78:	4a29      	ldr	r2, [pc, #164]	@ (8007d20 <HAL_ADC_ConfigChannel+0x868>)
 8007c7a:	e000      	b.n	8007c7e <HAL_ADC_ConfigChannel+0x7c6>
 8007c7c:	4a23      	ldr	r2, [pc, #140]	@ (8007d0c <HAL_ADC_ConfigChannel+0x854>)
 8007c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007c82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c86:	4619      	mov	r1, r3
 8007c88:	4610      	mov	r0, r2
 8007c8a:	f7fe ff36 	bl	8006afa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007c8e:	e031      	b.n	8007cf4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a27      	ldr	r2, [pc, #156]	@ (8007d34 <HAL_ADC_ConfigChannel+0x87c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d12d      	bne.n	8007cf6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007c9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d127      	bne.n	8007cf6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a1c      	ldr	r2, [pc, #112]	@ (8007d1c <HAL_ADC_ConfigChannel+0x864>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d022      	beq.n	8007cf6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007cb8:	d004      	beq.n	8007cc4 <HAL_ADC_ConfigChannel+0x80c>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a17      	ldr	r2, [pc, #92]	@ (8007d1c <HAL_ADC_ConfigChannel+0x864>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d101      	bne.n	8007cc8 <HAL_ADC_ConfigChannel+0x810>
 8007cc4:	4a16      	ldr	r2, [pc, #88]	@ (8007d20 <HAL_ADC_ConfigChannel+0x868>)
 8007cc6:	e000      	b.n	8007cca <HAL_ADC_ConfigChannel+0x812>
 8007cc8:	4a10      	ldr	r2, [pc, #64]	@ (8007d0c <HAL_ADC_ConfigChannel+0x854>)
 8007cca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007cce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	f7fe ff10 	bl	8006afa <LL_ADC_SetCommonPathInternalCh>
 8007cda:	e00c      	b.n	8007cf6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ce0:	f043 0220 	orr.w	r2, r3, #32
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8007cee:	e002      	b.n	8007cf6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007cf0:	bf00      	nop
 8007cf2:	e000      	b.n	8007cf6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007cf4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007cfe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	37d8      	adds	r7, #216	@ 0xd8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	50000700 	.word	0x50000700
 8007d10:	c3210000 	.word	0xc3210000
 8007d14:	90c00010 	.word	0x90c00010
 8007d18:	50000600 	.word	0x50000600
 8007d1c:	50000100 	.word	0x50000100
 8007d20:	50000300 	.word	0x50000300
 8007d24:	200000f4 	.word	0x200000f4
 8007d28:	053e2d63 	.word	0x053e2d63
 8007d2c:	c7520000 	.word	0xc7520000
 8007d30:	50000500 	.word	0x50000500
 8007d34:	cb840000 	.word	0xcb840000

08007d38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007d40:	2300      	movs	r3, #0
 8007d42:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff f8a7 	bl	8006e9c <LL_ADC_IsEnabled>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d176      	bne.n	8007e42 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	689a      	ldr	r2, [r3, #8]
 8007d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8007e4c <ADC_Enable+0x114>)
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00d      	beq.n	8007d7e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d66:	f043 0210 	orr.w	r2, r3, #16
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d72:	f043 0201 	orr.w	r2, r3, #1
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e062      	b.n	8007e44 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7ff f862 	bl	8006e4c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d90:	d004      	beq.n	8007d9c <ADC_Enable+0x64>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a2e      	ldr	r2, [pc, #184]	@ (8007e50 <ADC_Enable+0x118>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d101      	bne.n	8007da0 <ADC_Enable+0x68>
 8007d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8007e54 <ADC_Enable+0x11c>)
 8007d9e:	e000      	b.n	8007da2 <ADC_Enable+0x6a>
 8007da0:	4b2d      	ldr	r3, [pc, #180]	@ (8007e58 <ADC_Enable+0x120>)
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fe febc 	bl	8006b20 <LL_ADC_GetCommonPathInternalCh>
 8007da8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007daa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d013      	beq.n	8007dda <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007db2:	4b2a      	ldr	r3, [pc, #168]	@ (8007e5c <ADC_Enable+0x124>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	099b      	lsrs	r3, r3, #6
 8007db8:	4a29      	ldr	r2, [pc, #164]	@ (8007e60 <ADC_Enable+0x128>)
 8007dba:	fba2 2303 	umull	r2, r3, r2, r3
 8007dbe:	099b      	lsrs	r3, r3, #6
 8007dc0:	1c5a      	adds	r2, r3, #1
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	4413      	add	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007dcc:	e002      	b.n	8007dd4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1f9      	bne.n	8007dce <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007dda:	f7fe fe6f 	bl	8006abc <HAL_GetTick>
 8007dde:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007de0:	e028      	b.n	8007e34 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff f858 	bl	8006e9c <LL_ADC_IsEnabled>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d104      	bne.n	8007dfc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7ff f828 	bl	8006e4c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007dfc:	f7fe fe5e 	bl	8006abc <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d914      	bls.n	8007e34 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d00d      	beq.n	8007e34 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e1c:	f043 0210 	orr.w	r2, r3, #16
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e28:	f043 0201 	orr.w	r2, r3, #1
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e007      	b.n	8007e44 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d1cf      	bne.n	8007de2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	8000003f 	.word	0x8000003f
 8007e50:	50000100 	.word	0x50000100
 8007e54:	50000300 	.word	0x50000300
 8007e58:	50000700 	.word	0x50000700
 8007e5c:	200000f4 	.word	0x200000f4
 8007e60:	053e2d63 	.word	0x053e2d63

08007e64 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff f826 	bl	8006ec2 <LL_ADC_IsDisableOngoing>
 8007e76:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7ff f80d 	bl	8006e9c <LL_ADC_IsEnabled>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d047      	beq.n	8007f18 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d144      	bne.n	8007f18 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f003 030d 	and.w	r3, r3, #13
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d10c      	bne.n	8007eb6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fe ffe7 	bl	8006e74 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2203      	movs	r2, #3
 8007eac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007eae:	f7fe fe05 	bl	8006abc <HAL_GetTick>
 8007eb2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007eb4:	e029      	b.n	8007f0a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eba:	f043 0210 	orr.w	r2, r3, #16
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ec6:	f043 0201 	orr.w	r2, r3, #1
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e023      	b.n	8007f1a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007ed2:	f7fe fdf3 	bl	8006abc <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d914      	bls.n	8007f0a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00d      	beq.n	8007f0a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ef2:	f043 0210 	orr.w	r2, r3, #16
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007efe:	f043 0201 	orr.w	r2, r3, #1
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e007      	b.n	8007f1a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1dc      	bne.n	8007ed2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f34:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d14b      	bne.n	8007fd4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f40:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0308 	and.w	r3, r3, #8
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d021      	beq.n	8007f9a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fe fe8c 	bl	8006c78 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d032      	beq.n	8007fcc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d12b      	bne.n	8007fcc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d11f      	bne.n	8007fcc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f90:	f043 0201 	orr.w	r2, r3, #1
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007f98:	e018      	b.n	8007fcc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f003 0302 	and.w	r3, r3, #2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d111      	bne.n	8007fcc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d105      	bne.n	8007fcc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fc4:	f043 0201 	orr.w	r2, r3, #1
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff fa55 	bl	800747c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007fd2:	e00e      	b.n	8007ff2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fd8:	f003 0310 	and.w	r3, r3, #16
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d003      	beq.n	8007fe8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f7ff fa5f 	bl	80074a4 <HAL_ADC_ErrorCallback>
}
 8007fe6:	e004      	b.n	8007ff2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	4798      	blx	r3
}
 8007ff2:	bf00      	nop
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008006:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f7ff fa41 	bl	8007490 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800800e:	bf00      	nop
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008022:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008028:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008034:	f043 0204 	orr.w	r2, r3, #4
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7ff fa31 	bl	80074a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008042:	bf00      	nop
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <LL_ADC_IsEnabled>:
{
 800804a:	b480      	push	{r7}
 800804c:	b083      	sub	sp, #12
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b01      	cmp	r3, #1
 800805c:	d101      	bne.n	8008062 <LL_ADC_IsEnabled+0x18>
 800805e:	2301      	movs	r3, #1
 8008060:	e000      	b.n	8008064 <LL_ADC_IsEnabled+0x1a>
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <LL_ADC_StartCalibration>:
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8008082:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800808c:	4313      	orrs	r3, r2
 800808e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	609a      	str	r2, [r3, #8]
}
 8008096:	bf00      	nop
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <LL_ADC_IsCalibrationOnGoing>:
{
 80080a2:	b480      	push	{r7}
 80080a4:	b083      	sub	sp, #12
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080b6:	d101      	bne.n	80080bc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80080b8:	2301      	movs	r3, #1
 80080ba:	e000      	b.n	80080be <LL_ADC_IsCalibrationOnGoing+0x1c>
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <LL_ADC_REG_IsConversionOngoing>:
{
 80080ca:	b480      	push	{r7}
 80080cc:	b083      	sub	sp, #12
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d101      	bne.n	80080e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80080de:	2301      	movs	r3, #1
 80080e0:	e000      	b.n	80080e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008104:	2b01      	cmp	r3, #1
 8008106:	d101      	bne.n	800810c <HAL_ADCEx_Calibration_Start+0x1c>
 8008108:	2302      	movs	r3, #2
 800810a:	e04d      	b.n	80081a8 <HAL_ADCEx_Calibration_Start+0xb8>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff fea5 	bl	8007e64 <ADC_Disable>
 800811a:	4603      	mov	r3, r0
 800811c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d136      	bne.n	8008192 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008128:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800812c:	f023 0302 	bic.w	r3, r3, #2
 8008130:	f043 0202 	orr.w	r2, r3, #2
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	4618      	mov	r0, r3
 8008140:	f7ff ff96 	bl	8008070 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008144:	e014      	b.n	8008170 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	3301      	adds	r3, #1
 800814a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4a18      	ldr	r2, [pc, #96]	@ (80081b0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d90d      	bls.n	8008170 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008158:	f023 0312 	bic.w	r3, r3, #18
 800815c:	f043 0210 	orr.w	r2, r3, #16
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e01b      	b.n	80081a8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff ff94 	bl	80080a2 <LL_ADC_IsCalibrationOnGoing>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1e2      	bne.n	8008146 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008184:	f023 0303 	bic.w	r3, r3, #3
 8008188:	f043 0201 	orr.w	r2, r3, #1
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008190:	e005      	b.n	800819e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008196:	f043 0210 	orr.w	r2, r3, #16
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	0004de01 	.word	0x0004de01

080081b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80081b4:	b590      	push	{r4, r7, lr}
 80081b6:	b0a1      	sub	sp, #132	@ 0x84
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d101      	bne.n	80081d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80081ce:	2302      	movs	r3, #2
 80081d0:	e0e7      	b.n	80083a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80081da:	2300      	movs	r3, #0
 80081dc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80081de:	2300      	movs	r3, #0
 80081e0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081ea:	d102      	bne.n	80081f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80081ec:	4b6f      	ldr	r3, [pc, #444]	@ (80083ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80081ee:	60bb      	str	r3, [r7, #8]
 80081f0:	e009      	b.n	8008206 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a6e      	ldr	r2, [pc, #440]	@ (80083b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d102      	bne.n	8008202 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80081fc:	4b6d      	ldr	r3, [pc, #436]	@ (80083b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80081fe:	60bb      	str	r3, [r7, #8]
 8008200:	e001      	b.n	8008206 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8008202:	2300      	movs	r3, #0
 8008204:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10b      	bne.n	8008224 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008210:	f043 0220 	orr.w	r2, r3, #32
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e0be      	b.n	80083a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4618      	mov	r0, r3
 8008228:	f7ff ff4f 	bl	80080ca <LL_ADC_REG_IsConversionOngoing>
 800822c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	f7ff ff49 	bl	80080ca <LL_ADC_REG_IsConversionOngoing>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	f040 80a0 	bne.w	8008380 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8008240:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008242:	2b00      	cmp	r3, #0
 8008244:	f040 809c 	bne.w	8008380 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008250:	d004      	beq.n	800825c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a55      	ldr	r2, [pc, #340]	@ (80083ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d101      	bne.n	8008260 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800825c:	4b56      	ldr	r3, [pc, #344]	@ (80083b8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800825e:	e000      	b.n	8008262 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8008260:	4b56      	ldr	r3, [pc, #344]	@ (80083bc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8008262:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d04b      	beq.n	8008304 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800826c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	6859      	ldr	r1, [r3, #4]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800827e:	035b      	lsls	r3, r3, #13
 8008280:	430b      	orrs	r3, r1
 8008282:	431a      	orrs	r2, r3
 8008284:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008286:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008290:	d004      	beq.n	800829c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a45      	ldr	r2, [pc, #276]	@ (80083ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d10f      	bne.n	80082bc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800829c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80082a0:	f7ff fed3 	bl	800804a <LL_ADC_IsEnabled>
 80082a4:	4604      	mov	r4, r0
 80082a6:	4841      	ldr	r0, [pc, #260]	@ (80083ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80082a8:	f7ff fecf 	bl	800804a <LL_ADC_IsEnabled>
 80082ac:	4603      	mov	r3, r0
 80082ae:	4323      	orrs	r3, r4
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	bf0c      	ite	eq
 80082b4:	2301      	moveq	r3, #1
 80082b6:	2300      	movne	r3, #0
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	e012      	b.n	80082e2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80082bc:	483c      	ldr	r0, [pc, #240]	@ (80083b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80082be:	f7ff fec4 	bl	800804a <LL_ADC_IsEnabled>
 80082c2:	4604      	mov	r4, r0
 80082c4:	483b      	ldr	r0, [pc, #236]	@ (80083b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80082c6:	f7ff fec0 	bl	800804a <LL_ADC_IsEnabled>
 80082ca:	4603      	mov	r3, r0
 80082cc:	431c      	orrs	r4, r3
 80082ce:	483c      	ldr	r0, [pc, #240]	@ (80083c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80082d0:	f7ff febb 	bl	800804a <LL_ADC_IsEnabled>
 80082d4:	4603      	mov	r3, r0
 80082d6:	4323      	orrs	r3, r4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	bf0c      	ite	eq
 80082dc:	2301      	moveq	r3, #1
 80082de:	2300      	movne	r3, #0
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d056      	beq.n	8008394 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80082e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80082ee:	f023 030f 	bic.w	r3, r3, #15
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	6811      	ldr	r1, [r2, #0]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	6892      	ldr	r2, [r2, #8]
 80082fa:	430a      	orrs	r2, r1
 80082fc:	431a      	orrs	r2, r3
 80082fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008300:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008302:	e047      	b.n	8008394 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008304:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800830c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800830e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008318:	d004      	beq.n	8008324 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a23      	ldr	r2, [pc, #140]	@ (80083ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d10f      	bne.n	8008344 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8008324:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8008328:	f7ff fe8f 	bl	800804a <LL_ADC_IsEnabled>
 800832c:	4604      	mov	r4, r0
 800832e:	481f      	ldr	r0, [pc, #124]	@ (80083ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008330:	f7ff fe8b 	bl	800804a <LL_ADC_IsEnabled>
 8008334:	4603      	mov	r3, r0
 8008336:	4323      	orrs	r3, r4
 8008338:	2b00      	cmp	r3, #0
 800833a:	bf0c      	ite	eq
 800833c:	2301      	moveq	r3, #1
 800833e:	2300      	movne	r3, #0
 8008340:	b2db      	uxtb	r3, r3
 8008342:	e012      	b.n	800836a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8008344:	481a      	ldr	r0, [pc, #104]	@ (80083b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008346:	f7ff fe80 	bl	800804a <LL_ADC_IsEnabled>
 800834a:	4604      	mov	r4, r0
 800834c:	4819      	ldr	r0, [pc, #100]	@ (80083b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800834e:	f7ff fe7c 	bl	800804a <LL_ADC_IsEnabled>
 8008352:	4603      	mov	r3, r0
 8008354:	431c      	orrs	r4, r3
 8008356:	481a      	ldr	r0, [pc, #104]	@ (80083c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008358:	f7ff fe77 	bl	800804a <LL_ADC_IsEnabled>
 800835c:	4603      	mov	r3, r0
 800835e:	4323      	orrs	r3, r4
 8008360:	2b00      	cmp	r3, #0
 8008362:	bf0c      	ite	eq
 8008364:	2301      	moveq	r3, #1
 8008366:	2300      	movne	r3, #0
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d012      	beq.n	8008394 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800836e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8008376:	f023 030f 	bic.w	r3, r3, #15
 800837a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800837c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800837e:	e009      	b.n	8008394 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008384:	f043 0220 	orr.w	r2, r3, #32
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8008392:	e000      	b.n	8008396 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008394:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800839e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3784      	adds	r7, #132	@ 0x84
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd90      	pop	{r4, r7, pc}
 80083aa:	bf00      	nop
 80083ac:	50000100 	.word	0x50000100
 80083b0:	50000400 	.word	0x50000400
 80083b4:	50000500 	.word	0x50000500
 80083b8:	50000300 	.word	0x50000300
 80083bc:	50000700 	.word	0x50000700
 80083c0:	50000600 	.word	0x50000600

080083c4 <__NVIC_SetPriorityGrouping>:
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f003 0307 	and.w	r3, r3, #7
 80083d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008408 <__NVIC_SetPriorityGrouping+0x44>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80083e0:	4013      	ands	r3, r2
 80083e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80083ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80083f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80083f6:	4a04      	ldr	r2, [pc, #16]	@ (8008408 <__NVIC_SetPriorityGrouping+0x44>)
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	60d3      	str	r3, [r2, #12]
}
 80083fc:	bf00      	nop
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr
 8008408:	e000ed00 	.word	0xe000ed00

0800840c <__NVIC_GetPriorityGrouping>:
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008410:	4b04      	ldr	r3, [pc, #16]	@ (8008424 <__NVIC_GetPriorityGrouping+0x18>)
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	0a1b      	lsrs	r3, r3, #8
 8008416:	f003 0307 	and.w	r3, r3, #7
}
 800841a:	4618      	mov	r0, r3
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	e000ed00 	.word	0xe000ed00

08008428 <__NVIC_EnableIRQ>:
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008436:	2b00      	cmp	r3, #0
 8008438:	db0b      	blt.n	8008452 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800843a:	79fb      	ldrb	r3, [r7, #7]
 800843c:	f003 021f 	and.w	r2, r3, #31
 8008440:	4907      	ldr	r1, [pc, #28]	@ (8008460 <__NVIC_EnableIRQ+0x38>)
 8008442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008446:	095b      	lsrs	r3, r3, #5
 8008448:	2001      	movs	r0, #1
 800844a:	fa00 f202 	lsl.w	r2, r0, r2
 800844e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008452:	bf00      	nop
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	e000e100 	.word	0xe000e100

08008464 <__NVIC_SetPriority>:
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	4603      	mov	r3, r0
 800846c:	6039      	str	r1, [r7, #0]
 800846e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008474:	2b00      	cmp	r3, #0
 8008476:	db0a      	blt.n	800848e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	b2da      	uxtb	r2, r3
 800847c:	490c      	ldr	r1, [pc, #48]	@ (80084b0 <__NVIC_SetPriority+0x4c>)
 800847e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008482:	0112      	lsls	r2, r2, #4
 8008484:	b2d2      	uxtb	r2, r2
 8008486:	440b      	add	r3, r1
 8008488:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800848c:	e00a      	b.n	80084a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	b2da      	uxtb	r2, r3
 8008492:	4908      	ldr	r1, [pc, #32]	@ (80084b4 <__NVIC_SetPriority+0x50>)
 8008494:	79fb      	ldrb	r3, [r7, #7]
 8008496:	f003 030f 	and.w	r3, r3, #15
 800849a:	3b04      	subs	r3, #4
 800849c:	0112      	lsls	r2, r2, #4
 800849e:	b2d2      	uxtb	r2, r2
 80084a0:	440b      	add	r3, r1
 80084a2:	761a      	strb	r2, [r3, #24]
}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	e000e100 	.word	0xe000e100
 80084b4:	e000ed00 	.word	0xe000ed00

080084b8 <NVIC_EncodePriority>:
{
 80084b8:	b480      	push	{r7}
 80084ba:	b089      	sub	sp, #36	@ 0x24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f003 0307 	and.w	r3, r3, #7
 80084ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	f1c3 0307 	rsb	r3, r3, #7
 80084d2:	2b04      	cmp	r3, #4
 80084d4:	bf28      	it	cs
 80084d6:	2304      	movcs	r3, #4
 80084d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	3304      	adds	r3, #4
 80084de:	2b06      	cmp	r3, #6
 80084e0:	d902      	bls.n	80084e8 <NVIC_EncodePriority+0x30>
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	3b03      	subs	r3, #3
 80084e6:	e000      	b.n	80084ea <NVIC_EncodePriority+0x32>
 80084e8:	2300      	movs	r3, #0
 80084ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084ec:	f04f 32ff 	mov.w	r2, #4294967295
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	fa02 f303 	lsl.w	r3, r2, r3
 80084f6:	43da      	mvns	r2, r3
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	401a      	ands	r2, r3
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008500:	f04f 31ff 	mov.w	r1, #4294967295
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	fa01 f303 	lsl.w	r3, r1, r3
 800850a:	43d9      	mvns	r1, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008510:	4313      	orrs	r3, r2
}
 8008512:	4618      	mov	r0, r3
 8008514:	3724      	adds	r7, #36	@ 0x24
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
	...

08008520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	3b01      	subs	r3, #1
 800852c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008530:	d301      	bcc.n	8008536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008532:	2301      	movs	r3, #1
 8008534:	e00f      	b.n	8008556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008536:	4a0a      	ldr	r2, [pc, #40]	@ (8008560 <SysTick_Config+0x40>)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3b01      	subs	r3, #1
 800853c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800853e:	210f      	movs	r1, #15
 8008540:	f04f 30ff 	mov.w	r0, #4294967295
 8008544:	f7ff ff8e 	bl	8008464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008548:	4b05      	ldr	r3, [pc, #20]	@ (8008560 <SysTick_Config+0x40>)
 800854a:	2200      	movs	r2, #0
 800854c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800854e:	4b04      	ldr	r3, [pc, #16]	@ (8008560 <SysTick_Config+0x40>)
 8008550:	2207      	movs	r2, #7
 8008552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	e000e010 	.word	0xe000e010

08008564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7ff ff29 	bl	80083c4 <__NVIC_SetPriorityGrouping>
}
 8008572:	bf00      	nop
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b086      	sub	sp, #24
 800857e:	af00      	add	r7, sp, #0
 8008580:	4603      	mov	r3, r0
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	607a      	str	r2, [r7, #4]
 8008586:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008588:	f7ff ff40 	bl	800840c <__NVIC_GetPriorityGrouping>
 800858c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	68b9      	ldr	r1, [r7, #8]
 8008592:	6978      	ldr	r0, [r7, #20]
 8008594:	f7ff ff90 	bl	80084b8 <NVIC_EncodePriority>
 8008598:	4602      	mov	r2, r0
 800859a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800859e:	4611      	mov	r1, r2
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7ff ff5f 	bl	8008464 <__NVIC_SetPriority>
}
 80085a6:	bf00      	nop
 80085a8:	3718      	adds	r7, #24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b082      	sub	sp, #8
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	4603      	mov	r3, r0
 80085b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80085b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085bc:	4618      	mov	r0, r3
 80085be:	f7ff ff33 	bl	8008428 <__NVIC_EnableIRQ>
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7ff ffa4 	bl	8008520 <SysTick_Config>
 80085d8:	4603      	mov	r3, r0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
	...

080085e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e08d      	b.n	8008712 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	461a      	mov	r2, r3
 80085fc:	4b47      	ldr	r3, [pc, #284]	@ (800871c <HAL_DMA_Init+0x138>)
 80085fe:	429a      	cmp	r2, r3
 8008600:	d80f      	bhi.n	8008622 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	461a      	mov	r2, r3
 8008608:	4b45      	ldr	r3, [pc, #276]	@ (8008720 <HAL_DMA_Init+0x13c>)
 800860a:	4413      	add	r3, r2
 800860c:	4a45      	ldr	r2, [pc, #276]	@ (8008724 <HAL_DMA_Init+0x140>)
 800860e:	fba2 2303 	umull	r2, r3, r2, r3
 8008612:	091b      	lsrs	r3, r3, #4
 8008614:	009a      	lsls	r2, r3, #2
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a42      	ldr	r2, [pc, #264]	@ (8008728 <HAL_DMA_Init+0x144>)
 800861e:	641a      	str	r2, [r3, #64]	@ 0x40
 8008620:	e00e      	b.n	8008640 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	461a      	mov	r2, r3
 8008628:	4b40      	ldr	r3, [pc, #256]	@ (800872c <HAL_DMA_Init+0x148>)
 800862a:	4413      	add	r3, r2
 800862c:	4a3d      	ldr	r2, [pc, #244]	@ (8008724 <HAL_DMA_Init+0x140>)
 800862e:	fba2 2303 	umull	r2, r3, r2, r3
 8008632:	091b      	lsrs	r3, r3, #4
 8008634:	009a      	lsls	r2, r3, #2
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a3c      	ldr	r2, [pc, #240]	@ (8008730 <HAL_DMA_Init+0x14c>)
 800863e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2202      	movs	r2, #2
 8008644:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800865a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008664:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008670:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800867c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	4313      	orrs	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fa76 	bl	8008b84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086a0:	d102      	bne.n	80086a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086b0:	b2d2      	uxtb	r2, r2
 80086b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80086bc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d010      	beq.n	80086e8 <HAL_DMA_Init+0x104>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d80c      	bhi.n	80086e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fa96 	bl	8008c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086d8:	2200      	movs	r2, #0
 80086da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80086e4:	605a      	str	r2, [r3, #4]
 80086e6:	e008      	b.n	80086fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	40020407 	.word	0x40020407
 8008720:	bffdfff8 	.word	0xbffdfff8
 8008724:	cccccccd 	.word	0xcccccccd
 8008728:	40020000 	.word	0x40020000
 800872c:	bffdfbf8 	.word	0xbffdfbf8
 8008730:	40020400 	.word	0x40020400

08008734 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
 8008740:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800874c:	2b01      	cmp	r3, #1
 800874e:	d101      	bne.n	8008754 <HAL_DMA_Start_IT+0x20>
 8008750:	2302      	movs	r3, #2
 8008752:	e066      	b.n	8008822 <HAL_DMA_Start_IT+0xee>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b01      	cmp	r3, #1
 8008766:	d155      	bne.n	8008814 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2202      	movs	r2, #2
 800876c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f022 0201 	bic.w	r2, r2, #1
 8008784:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	68b9      	ldr	r1, [r7, #8]
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 f9bb 	bl	8008b08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008796:	2b00      	cmp	r3, #0
 8008798:	d008      	beq.n	80087ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f042 020e 	orr.w	r2, r2, #14
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	e00f      	b.n	80087cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f022 0204 	bic.w	r2, r2, #4
 80087ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f042 020a 	orr.w	r2, r2, #10
 80087ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d007      	beq.n	80087ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d007      	beq.n	8008802 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008800:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f042 0201 	orr.w	r2, r2, #1
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	e005      	b.n	8008820 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800881c:	2302      	movs	r3, #2
 800881e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008820:	7dfb      	ldrb	r3, [r7, #23]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3718      	adds	r7, #24
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800882a:	b480      	push	{r7}
 800882c:	b085      	sub	sp, #20
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b02      	cmp	r3, #2
 8008840:	d005      	beq.n	800884e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2204      	movs	r2, #4
 8008846:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	73fb      	strb	r3, [r7, #15]
 800884c:	e037      	b.n	80088be <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f022 020e 	bic.w	r2, r2, #14
 800885c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008868:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800886c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f022 0201 	bic.w	r2, r2, #1
 800887c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008882:	f003 021f 	and.w	r2, r3, #31
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800888a:	2101      	movs	r1, #1
 800888c:	fa01 f202 	lsl.w	r2, r1, r2
 8008890:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800889a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00c      	beq.n	80088be <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80088b2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80088bc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d00d      	beq.n	8008910 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2204      	movs	r2, #4
 80088f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	73fb      	strb	r3, [r7, #15]
 800890e:	e047      	b.n	80089a0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 020e 	bic.w	r2, r2, #14
 800891e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f022 0201 	bic.w	r2, r2, #1
 800892e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800893a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800893e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008944:	f003 021f 	and.w	r2, r3, #31
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800894c:	2101      	movs	r1, #1
 800894e:	fa01 f202 	lsl.w	r2, r1, r2
 8008952:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800895c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00c      	beq.n	8008980 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008970:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008974:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800897e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	4798      	blx	r3
    }
  }
  return status;
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089c6:	f003 031f 	and.w	r3, r3, #31
 80089ca:	2204      	movs	r2, #4
 80089cc:	409a      	lsls	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	4013      	ands	r3, r2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d026      	beq.n	8008a24 <HAL_DMA_IRQHandler+0x7a>
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	f003 0304 	and.w	r3, r3, #4
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d021      	beq.n	8008a24 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 0320 	and.w	r3, r3, #32
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d107      	bne.n	80089fe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f022 0204 	bic.w	r2, r2, #4
 80089fc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a02:	f003 021f 	and.w	r2, r3, #31
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a0a:	2104      	movs	r1, #4
 8008a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8008a10:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d071      	beq.n	8008afe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008a22:	e06c      	b.n	8008afe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a28:	f003 031f 	and.w	r3, r3, #31
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	409a      	lsls	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	4013      	ands	r3, r2
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d02e      	beq.n	8008a96 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f003 0302 	and.w	r3, r3, #2
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d029      	beq.n	8008a96 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0320 	and.w	r3, r3, #32
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d10b      	bne.n	8008a68 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f022 020a 	bic.w	r2, r2, #10
 8008a5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a6c:	f003 021f 	and.w	r2, r3, #31
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a74:	2102      	movs	r1, #2
 8008a76:	fa01 f202 	lsl.w	r2, r1, r2
 8008a7a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d038      	beq.n	8008afe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008a94:	e033      	b.n	8008afe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a9a:	f003 031f 	and.w	r3, r3, #31
 8008a9e:	2208      	movs	r2, #8
 8008aa0:	409a      	lsls	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d02a      	beq.n	8008b00 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	f003 0308 	and.w	r3, r3, #8
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d025      	beq.n	8008b00 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f022 020e 	bic.w	r2, r2, #14
 8008ac2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ac8:	f003 021f 	and.w	r2, r3, #31
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8008ad6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d004      	beq.n	8008b00 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008afe:	bf00      	nop
 8008b00:	bf00      	nop
}
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
 8008b14:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008b1e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d004      	beq.n	8008b32 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008b30:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b36:	f003 021f 	and.w	r2, r3, #31
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3e:	2101      	movs	r1, #1
 8008b40:	fa01 f202 	lsl.w	r2, r1, r2
 8008b44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	2b10      	cmp	r3, #16
 8008b54:	d108      	bne.n	8008b68 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008b66:	e007      	b.n	8008b78 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	60da      	str	r2, [r3, #12]
}
 8008b78:	bf00      	nop
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	461a      	mov	r2, r3
 8008b92:	4b16      	ldr	r3, [pc, #88]	@ (8008bec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d802      	bhi.n	8008b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008b98:	4b15      	ldr	r3, [pc, #84]	@ (8008bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008b9a:	617b      	str	r3, [r7, #20]
 8008b9c:	e001      	b.n	8008ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8008b9e:	4b15      	ldr	r3, [pc, #84]	@ (8008bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008ba0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	3b08      	subs	r3, #8
 8008bae:	4a12      	ldr	r2, [pc, #72]	@ (8008bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb4:	091b      	lsrs	r3, r3, #4
 8008bb6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bbc:	089b      	lsrs	r3, r3, #2
 8008bbe:	009a      	lsls	r2, r3, #2
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8008bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008bce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f003 031f 	and.w	r3, r3, #31
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	409a      	lsls	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008bde:	bf00      	nop
 8008be0:	371c      	adds	r7, #28
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	40020407 	.word	0x40020407
 8008bf0:	40020800 	.word	0x40020800
 8008bf4:	40020820 	.word	0x40020820
 8008bf8:	cccccccd 	.word	0xcccccccd
 8008bfc:	40020880 	.word	0x40020880

08008c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	4b0b      	ldr	r3, [pc, #44]	@ (8008c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008c14:	4413      	add	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	461a      	mov	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a08      	ldr	r2, [pc, #32]	@ (8008c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008c22:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	3b01      	subs	r3, #1
 8008c28:	f003 031f 	and.w	r3, r3, #31
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	409a      	lsls	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008c34:	bf00      	nop
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	1000823f 	.word	0x1000823f
 8008c44:	40020940 	.word	0x40020940

08008c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008c56:	e15a      	b.n	8008f0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	fa01 f303 	lsl.w	r3, r1, r3
 8008c64:	4013      	ands	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 814c 	beq.w	8008f08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	f003 0303 	and.w	r3, r3, #3
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d005      	beq.n	8008c88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d130      	bne.n	8008cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	2203      	movs	r2, #3
 8008c94:	fa02 f303 	lsl.w	r3, r2, r3
 8008c98:	43db      	mvns	r3, r3
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc6:	43db      	mvns	r3, r3
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	091b      	lsrs	r3, r3, #4
 8008cd4:	f003 0201 	and.w	r2, r3, #1
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	fa02 f303 	lsl.w	r3, r2, r3
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f003 0303 	and.w	r3, r3, #3
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	d017      	beq.n	8008d26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	005b      	lsls	r3, r3, #1
 8008d00:	2203      	movs	r2, #3
 8008d02:	fa02 f303 	lsl.w	r3, r2, r3
 8008d06:	43db      	mvns	r3, r3
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	689a      	ldr	r2, [r3, #8]
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f003 0303 	and.w	r3, r3, #3
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d123      	bne.n	8008d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	08da      	lsrs	r2, r3, #3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3208      	adds	r2, #8
 8008d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f003 0307 	and.w	r3, r3, #7
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	220f      	movs	r2, #15
 8008d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4e:	43db      	mvns	r3, r3
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	4013      	ands	r3, r2
 8008d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	691a      	ldr	r2, [r3, #16]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f003 0307 	and.w	r3, r3, #7
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	fa02 f303 	lsl.w	r3, r2, r3
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	08da      	lsrs	r2, r3, #3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3208      	adds	r2, #8
 8008d74:	6939      	ldr	r1, [r7, #16]
 8008d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	2203      	movs	r2, #3
 8008d86:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8a:	43db      	mvns	r3, r3
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	4013      	ands	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f003 0203 	and.w	r2, r3, #3
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 80a6 	beq.w	8008f08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8008f2c <HAL_GPIO_Init+0x2e4>)
 8008dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dc0:	4a5a      	ldr	r2, [pc, #360]	@ (8008f2c <HAL_GPIO_Init+0x2e4>)
 8008dc2:	f043 0301 	orr.w	r3, r3, #1
 8008dc6:	6613      	str	r3, [r2, #96]	@ 0x60
 8008dc8:	4b58      	ldr	r3, [pc, #352]	@ (8008f2c <HAL_GPIO_Init+0x2e4>)
 8008dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	60bb      	str	r3, [r7, #8]
 8008dd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008dd4:	4a56      	ldr	r2, [pc, #344]	@ (8008f30 <HAL_GPIO_Init+0x2e8>)
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	089b      	lsrs	r3, r3, #2
 8008dda:	3302      	adds	r3, #2
 8008ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f003 0303 	and.w	r3, r3, #3
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	220f      	movs	r2, #15
 8008dec:	fa02 f303 	lsl.w	r3, r2, r3
 8008df0:	43db      	mvns	r3, r3
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	4013      	ands	r3, r2
 8008df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008dfe:	d01f      	beq.n	8008e40 <HAL_GPIO_Init+0x1f8>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a4c      	ldr	r2, [pc, #304]	@ (8008f34 <HAL_GPIO_Init+0x2ec>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d019      	beq.n	8008e3c <HAL_GPIO_Init+0x1f4>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a4b      	ldr	r2, [pc, #300]	@ (8008f38 <HAL_GPIO_Init+0x2f0>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d013      	beq.n	8008e38 <HAL_GPIO_Init+0x1f0>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a4a      	ldr	r2, [pc, #296]	@ (8008f3c <HAL_GPIO_Init+0x2f4>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d00d      	beq.n	8008e34 <HAL_GPIO_Init+0x1ec>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a49      	ldr	r2, [pc, #292]	@ (8008f40 <HAL_GPIO_Init+0x2f8>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d007      	beq.n	8008e30 <HAL_GPIO_Init+0x1e8>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a48      	ldr	r2, [pc, #288]	@ (8008f44 <HAL_GPIO_Init+0x2fc>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d101      	bne.n	8008e2c <HAL_GPIO_Init+0x1e4>
 8008e28:	2305      	movs	r3, #5
 8008e2a:	e00a      	b.n	8008e42 <HAL_GPIO_Init+0x1fa>
 8008e2c:	2306      	movs	r3, #6
 8008e2e:	e008      	b.n	8008e42 <HAL_GPIO_Init+0x1fa>
 8008e30:	2304      	movs	r3, #4
 8008e32:	e006      	b.n	8008e42 <HAL_GPIO_Init+0x1fa>
 8008e34:	2303      	movs	r3, #3
 8008e36:	e004      	b.n	8008e42 <HAL_GPIO_Init+0x1fa>
 8008e38:	2302      	movs	r3, #2
 8008e3a:	e002      	b.n	8008e42 <HAL_GPIO_Init+0x1fa>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e000      	b.n	8008e42 <HAL_GPIO_Init+0x1fa>
 8008e40:	2300      	movs	r3, #0
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	f002 0203 	and.w	r2, r2, #3
 8008e48:	0092      	lsls	r2, r2, #2
 8008e4a:	4093      	lsls	r3, r2
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e52:	4937      	ldr	r1, [pc, #220]	@ (8008f30 <HAL_GPIO_Init+0x2e8>)
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	089b      	lsrs	r3, r3, #2
 8008e58:	3302      	adds	r3, #2
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e60:	4b39      	ldr	r3, [pc, #228]	@ (8008f48 <HAL_GPIO_Init+0x300>)
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	43db      	mvns	r3, r3
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008e84:	4a30      	ldr	r2, [pc, #192]	@ (8008f48 <HAL_GPIO_Init+0x300>)
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8008f48 <HAL_GPIO_Init+0x300>)
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	43db      	mvns	r3, r3
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	4013      	ands	r3, r2
 8008e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008eae:	4a26      	ldr	r2, [pc, #152]	@ (8008f48 <HAL_GPIO_Init+0x300>)
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008eb4:	4b24      	ldr	r3, [pc, #144]	@ (8008f48 <HAL_GPIO_Init+0x300>)
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	43db      	mvns	r3, r3
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d003      	beq.n	8008ed8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8008f48 <HAL_GPIO_Init+0x300>)
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008ede:	4b1a      	ldr	r3, [pc, #104]	@ (8008f48 <HAL_GPIO_Init+0x300>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	43db      	mvns	r3, r3
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	4013      	ands	r3, r2
 8008eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008f02:	4a11      	ldr	r2, [pc, #68]	@ (8008f48 <HAL_GPIO_Init+0x300>)
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	fa22 f303 	lsr.w	r3, r2, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f47f ae9d 	bne.w	8008c58 <HAL_GPIO_Init+0x10>
  }
}
 8008f1e:	bf00      	nop
 8008f20:	bf00      	nop
 8008f22:	371c      	adds	r7, #28
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	40021000 	.word	0x40021000
 8008f30:	40010000 	.word	0x40010000
 8008f34:	48000400 	.word	0x48000400
 8008f38:	48000800 	.word	0x48000800
 8008f3c:	48000c00 	.word	0x48000c00
 8008f40:	48001000 	.word	0x48001000
 8008f44:	48001400 	.word	0x48001400
 8008f48:	40010400 	.word	0x40010400

08008f4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	691a      	ldr	r2, [r3, #16]
 8008f5c:	887b      	ldrh	r3, [r7, #2]
 8008f5e:	4013      	ands	r3, r2
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f64:	2301      	movs	r3, #1
 8008f66:	73fb      	strb	r3, [r7, #15]
 8008f68:	e001      	b.n	8008f6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	460b      	mov	r3, r1
 8008f86:	807b      	strh	r3, [r7, #2]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f8c:	787b      	ldrb	r3, [r7, #1]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d003      	beq.n	8008f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008f92:	887a      	ldrh	r2, [r7, #2]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008f98:	e002      	b.n	8008fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008f9a:	887a      	ldrh	r2, [r7, #2]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008fb6:	4b08      	ldr	r3, [pc, #32]	@ (8008fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008fb8:	695a      	ldr	r2, [r3, #20]
 8008fba:	88fb      	ldrh	r3, [r7, #6]
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d006      	beq.n	8008fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008fc2:	4a05      	ldr	r2, [pc, #20]	@ (8008fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008fc4:	88fb      	ldrh	r3, [r7, #6]
 8008fc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008fc8:	88fb      	ldrh	r3, [r7, #6]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fb fda2 	bl	8004b14 <HAL_GPIO_EXTI_Callback>
  }
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	40010400 	.word	0x40010400

08008fdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d141      	bne.n	800906e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008fea:	4b4b      	ldr	r3, [pc, #300]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ff6:	d131      	bne.n	800905c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ff8:	4b47      	ldr	r3, [pc, #284]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ffe:	4a46      	ldr	r2, [pc, #280]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009000:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009004:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009008:	4b43      	ldr	r3, [pc, #268]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009010:	4a41      	ldr	r2, [pc, #260]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009012:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009016:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009018:	4b40      	ldr	r3, [pc, #256]	@ (800911c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2232      	movs	r2, #50	@ 0x32
 800901e:	fb02 f303 	mul.w	r3, r2, r3
 8009022:	4a3f      	ldr	r2, [pc, #252]	@ (8009120 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009024:	fba2 2303 	umull	r2, r3, r2, r3
 8009028:	0c9b      	lsrs	r3, r3, #18
 800902a:	3301      	adds	r3, #1
 800902c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800902e:	e002      	b.n	8009036 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	3b01      	subs	r3, #1
 8009034:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009036:	4b38      	ldr	r3, [pc, #224]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009038:	695b      	ldr	r3, [r3, #20]
 800903a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800903e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009042:	d102      	bne.n	800904a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1f2      	bne.n	8009030 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800904a:	4b33      	ldr	r3, [pc, #204]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009056:	d158      	bne.n	800910a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e057      	b.n	800910c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800905c:	4b2e      	ldr	r3, [pc, #184]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800905e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009062:	4a2d      	ldr	r2, [pc, #180]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009068:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800906c:	e04d      	b.n	800910a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009074:	d141      	bne.n	80090fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009076:	4b28      	ldr	r3, [pc, #160]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800907e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009082:	d131      	bne.n	80090e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009084:	4b24      	ldr	r3, [pc, #144]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800908a:	4a23      	ldr	r2, [pc, #140]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800908c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009090:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009094:	4b20      	ldr	r3, [pc, #128]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800909c:	4a1e      	ldr	r2, [pc, #120]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800909e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80090a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80090a4:	4b1d      	ldr	r3, [pc, #116]	@ (800911c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2232      	movs	r2, #50	@ 0x32
 80090aa:	fb02 f303 	mul.w	r3, r2, r3
 80090ae:	4a1c      	ldr	r2, [pc, #112]	@ (8009120 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80090b0:	fba2 2303 	umull	r2, r3, r2, r3
 80090b4:	0c9b      	lsrs	r3, r3, #18
 80090b6:	3301      	adds	r3, #1
 80090b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80090ba:	e002      	b.n	80090c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	3b01      	subs	r3, #1
 80090c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80090c2:	4b15      	ldr	r3, [pc, #84]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090c4:	695b      	ldr	r3, [r3, #20]
 80090c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090ce:	d102      	bne.n	80090d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1f2      	bne.n	80090bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80090d6:	4b10      	ldr	r3, [pc, #64]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090e2:	d112      	bne.n	800910a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80090e4:	2303      	movs	r3, #3
 80090e6:	e011      	b.n	800910c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80090e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090ee:	4a0a      	ldr	r2, [pc, #40]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80090f8:	e007      	b.n	800910a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80090fa:	4b07      	ldr	r3, [pc, #28]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009102:	4a05      	ldr	r2, [pc, #20]	@ (8009118 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009104:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009108:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3714      	adds	r7, #20
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr
 8009118:	40007000 	.word	0x40007000
 800911c:	200000f4 	.word	0x200000f4
 8009120:	431bde83 	.word	0x431bde83

08009124 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009124:	b480      	push	{r7}
 8009126:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009128:	4b05      	ldr	r3, [pc, #20]	@ (8009140 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	4a04      	ldr	r2, [pc, #16]	@ (8009140 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800912e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009132:	6093      	str	r3, [r2, #8]
}
 8009134:	bf00      	nop
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	40007000 	.word	0x40007000

08009144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b088      	sub	sp, #32
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e2fe      	b.n	8009754 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b00      	cmp	r3, #0
 8009160:	d075      	beq.n	800924e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009162:	4b97      	ldr	r3, [pc, #604]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	f003 030c 	and.w	r3, r3, #12
 800916a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800916c:	4b94      	ldr	r3, [pc, #592]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f003 0303 	and.w	r3, r3, #3
 8009174:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	2b0c      	cmp	r3, #12
 800917a:	d102      	bne.n	8009182 <HAL_RCC_OscConfig+0x3e>
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2b03      	cmp	r3, #3
 8009180:	d002      	beq.n	8009188 <HAL_RCC_OscConfig+0x44>
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	2b08      	cmp	r3, #8
 8009186:	d10b      	bne.n	80091a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009188:	4b8d      	ldr	r3, [pc, #564]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d05b      	beq.n	800924c <HAL_RCC_OscConfig+0x108>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d157      	bne.n	800924c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e2d9      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091a8:	d106      	bne.n	80091b8 <HAL_RCC_OscConfig+0x74>
 80091aa:	4b85      	ldr	r3, [pc, #532]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a84      	ldr	r2, [pc, #528]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 80091b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	e01d      	b.n	80091f4 <HAL_RCC_OscConfig+0xb0>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80091c0:	d10c      	bne.n	80091dc <HAL_RCC_OscConfig+0x98>
 80091c2:	4b7f      	ldr	r3, [pc, #508]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a7e      	ldr	r2, [pc, #504]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 80091c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	4b7c      	ldr	r3, [pc, #496]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a7b      	ldr	r2, [pc, #492]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 80091d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091d8:	6013      	str	r3, [r2, #0]
 80091da:	e00b      	b.n	80091f4 <HAL_RCC_OscConfig+0xb0>
 80091dc:	4b78      	ldr	r3, [pc, #480]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a77      	ldr	r2, [pc, #476]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 80091e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091e6:	6013      	str	r3, [r2, #0]
 80091e8:	4b75      	ldr	r3, [pc, #468]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a74      	ldr	r2, [pc, #464]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 80091ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80091f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d013      	beq.n	8009224 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091fc:	f7fd fc5e 	bl	8006abc <HAL_GetTick>
 8009200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009202:	e008      	b.n	8009216 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009204:	f7fd fc5a 	bl	8006abc <HAL_GetTick>
 8009208:	4602      	mov	r2, r0
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	2b64      	cmp	r3, #100	@ 0x64
 8009210:	d901      	bls.n	8009216 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	e29e      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009216:	4b6a      	ldr	r3, [pc, #424]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d0f0      	beq.n	8009204 <HAL_RCC_OscConfig+0xc0>
 8009222:	e014      	b.n	800924e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009224:	f7fd fc4a 	bl	8006abc <HAL_GetTick>
 8009228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800922a:	e008      	b.n	800923e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800922c:	f7fd fc46 	bl	8006abc <HAL_GetTick>
 8009230:	4602      	mov	r2, r0
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	2b64      	cmp	r3, #100	@ 0x64
 8009238:	d901      	bls.n	800923e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800923a:	2303      	movs	r3, #3
 800923c:	e28a      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800923e:	4b60      	ldr	r3, [pc, #384]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1f0      	bne.n	800922c <HAL_RCC_OscConfig+0xe8>
 800924a:	e000      	b.n	800924e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800924c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b00      	cmp	r3, #0
 8009258:	d075      	beq.n	8009346 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800925a:	4b59      	ldr	r3, [pc, #356]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f003 030c 	and.w	r3, r3, #12
 8009262:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009264:	4b56      	ldr	r3, [pc, #344]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f003 0303 	and.w	r3, r3, #3
 800926c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	2b0c      	cmp	r3, #12
 8009272:	d102      	bne.n	800927a <HAL_RCC_OscConfig+0x136>
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	2b02      	cmp	r3, #2
 8009278:	d002      	beq.n	8009280 <HAL_RCC_OscConfig+0x13c>
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	2b04      	cmp	r3, #4
 800927e:	d11f      	bne.n	80092c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009280:	4b4f      	ldr	r3, [pc, #316]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009288:	2b00      	cmp	r3, #0
 800928a:	d005      	beq.n	8009298 <HAL_RCC_OscConfig+0x154>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	e25d      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009298:	4b49      	ldr	r3, [pc, #292]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	061b      	lsls	r3, r3, #24
 80092a6:	4946      	ldr	r1, [pc, #280]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 80092a8:	4313      	orrs	r3, r2
 80092aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80092ac:	4b45      	ldr	r3, [pc, #276]	@ (80093c4 <HAL_RCC_OscConfig+0x280>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fd fbb7 	bl	8006a24 <HAL_InitTick>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d043      	beq.n	8009344 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	e249      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d023      	beq.n	8009310 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80092c8:	4b3d      	ldr	r3, [pc, #244]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a3c      	ldr	r2, [pc, #240]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 80092ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d4:	f7fd fbf2 	bl	8006abc <HAL_GetTick>
 80092d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80092da:	e008      	b.n	80092ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80092dc:	f7fd fbee 	bl	8006abc <HAL_GetTick>
 80092e0:	4602      	mov	r2, r0
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d901      	bls.n	80092ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e232      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80092ee:	4b34      	ldr	r3, [pc, #208]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0f0      	beq.n	80092dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092fa:	4b31      	ldr	r3, [pc, #196]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	061b      	lsls	r3, r3, #24
 8009308:	492d      	ldr	r1, [pc, #180]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 800930a:	4313      	orrs	r3, r2
 800930c:	604b      	str	r3, [r1, #4]
 800930e:	e01a      	b.n	8009346 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009310:	4b2b      	ldr	r3, [pc, #172]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a2a      	ldr	r2, [pc, #168]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 8009316:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800931a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800931c:	f7fd fbce 	bl	8006abc <HAL_GetTick>
 8009320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009322:	e008      	b.n	8009336 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009324:	f7fd fbca 	bl	8006abc <HAL_GetTick>
 8009328:	4602      	mov	r2, r0
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	2b02      	cmp	r3, #2
 8009330:	d901      	bls.n	8009336 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	e20e      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009336:	4b22      	ldr	r3, [pc, #136]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1f0      	bne.n	8009324 <HAL_RCC_OscConfig+0x1e0>
 8009342:	e000      	b.n	8009346 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009344:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 0308 	and.w	r3, r3, #8
 800934e:	2b00      	cmp	r3, #0
 8009350:	d041      	beq.n	80093d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d01c      	beq.n	8009394 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800935a:	4b19      	ldr	r3, [pc, #100]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 800935c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009360:	4a17      	ldr	r2, [pc, #92]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 8009362:	f043 0301 	orr.w	r3, r3, #1
 8009366:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800936a:	f7fd fba7 	bl	8006abc <HAL_GetTick>
 800936e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009370:	e008      	b.n	8009384 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009372:	f7fd fba3 	bl	8006abc <HAL_GetTick>
 8009376:	4602      	mov	r2, r0
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	2b02      	cmp	r3, #2
 800937e:	d901      	bls.n	8009384 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e1e7      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009384:	4b0e      	ldr	r3, [pc, #56]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 8009386:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800938a:	f003 0302 	and.w	r3, r3, #2
 800938e:	2b00      	cmp	r3, #0
 8009390:	d0ef      	beq.n	8009372 <HAL_RCC_OscConfig+0x22e>
 8009392:	e020      	b.n	80093d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009394:	4b0a      	ldr	r3, [pc, #40]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 8009396:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800939a:	4a09      	ldr	r2, [pc, #36]	@ (80093c0 <HAL_RCC_OscConfig+0x27c>)
 800939c:	f023 0301 	bic.w	r3, r3, #1
 80093a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093a4:	f7fd fb8a 	bl	8006abc <HAL_GetTick>
 80093a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80093aa:	e00d      	b.n	80093c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80093ac:	f7fd fb86 	bl	8006abc <HAL_GetTick>
 80093b0:	4602      	mov	r2, r0
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d906      	bls.n	80093c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e1ca      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
 80093be:	bf00      	nop
 80093c0:	40021000 	.word	0x40021000
 80093c4:	200000f8 	.word	0x200000f8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80093c8:	4b8c      	ldr	r3, [pc, #560]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 80093ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80093ce:	f003 0302 	and.w	r3, r3, #2
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1ea      	bne.n	80093ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0304 	and.w	r3, r3, #4
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 80a6 	beq.w	8009530 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093e4:	2300      	movs	r3, #0
 80093e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80093e8:	4b84      	ldr	r3, [pc, #528]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 80093ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d101      	bne.n	80093f8 <HAL_RCC_OscConfig+0x2b4>
 80093f4:	2301      	movs	r3, #1
 80093f6:	e000      	b.n	80093fa <HAL_RCC_OscConfig+0x2b6>
 80093f8:	2300      	movs	r3, #0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00d      	beq.n	800941a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093fe:	4b7f      	ldr	r3, [pc, #508]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 8009400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009402:	4a7e      	ldr	r2, [pc, #504]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 8009404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009408:	6593      	str	r3, [r2, #88]	@ 0x58
 800940a:	4b7c      	ldr	r3, [pc, #496]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 800940c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800940e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009412:	60fb      	str	r3, [r7, #12]
 8009414:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009416:	2301      	movs	r3, #1
 8009418:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800941a:	4b79      	ldr	r3, [pc, #484]	@ (8009600 <HAL_RCC_OscConfig+0x4bc>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009422:	2b00      	cmp	r3, #0
 8009424:	d118      	bne.n	8009458 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009426:	4b76      	ldr	r3, [pc, #472]	@ (8009600 <HAL_RCC_OscConfig+0x4bc>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a75      	ldr	r2, [pc, #468]	@ (8009600 <HAL_RCC_OscConfig+0x4bc>)
 800942c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009432:	f7fd fb43 	bl	8006abc <HAL_GetTick>
 8009436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009438:	e008      	b.n	800944c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800943a:	f7fd fb3f 	bl	8006abc <HAL_GetTick>
 800943e:	4602      	mov	r2, r0
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	2b02      	cmp	r3, #2
 8009446:	d901      	bls.n	800944c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	e183      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800944c:	4b6c      	ldr	r3, [pc, #432]	@ (8009600 <HAL_RCC_OscConfig+0x4bc>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009454:	2b00      	cmp	r3, #0
 8009456:	d0f0      	beq.n	800943a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d108      	bne.n	8009472 <HAL_RCC_OscConfig+0x32e>
 8009460:	4b66      	ldr	r3, [pc, #408]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 8009462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009466:	4a65      	ldr	r2, [pc, #404]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 8009468:	f043 0301 	orr.w	r3, r3, #1
 800946c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009470:	e024      	b.n	80094bc <HAL_RCC_OscConfig+0x378>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	2b05      	cmp	r3, #5
 8009478:	d110      	bne.n	800949c <HAL_RCC_OscConfig+0x358>
 800947a:	4b60      	ldr	r3, [pc, #384]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 800947c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009480:	4a5e      	ldr	r2, [pc, #376]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 8009482:	f043 0304 	orr.w	r3, r3, #4
 8009486:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800948a:	4b5c      	ldr	r3, [pc, #368]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 800948c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009490:	4a5a      	ldr	r2, [pc, #360]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 8009492:	f043 0301 	orr.w	r3, r3, #1
 8009496:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800949a:	e00f      	b.n	80094bc <HAL_RCC_OscConfig+0x378>
 800949c:	4b57      	ldr	r3, [pc, #348]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 800949e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094a2:	4a56      	ldr	r2, [pc, #344]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 80094a4:	f023 0301 	bic.w	r3, r3, #1
 80094a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80094ac:	4b53      	ldr	r3, [pc, #332]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 80094ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094b2:	4a52      	ldr	r2, [pc, #328]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 80094b4:	f023 0304 	bic.w	r3, r3, #4
 80094b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d016      	beq.n	80094f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094c4:	f7fd fafa 	bl	8006abc <HAL_GetTick>
 80094c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094ca:	e00a      	b.n	80094e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094cc:	f7fd faf6 	bl	8006abc <HAL_GetTick>
 80094d0:	4602      	mov	r2, r0
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094da:	4293      	cmp	r3, r2
 80094dc:	d901      	bls.n	80094e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e138      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094e2:	4b46      	ldr	r3, [pc, #280]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 80094e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094e8:	f003 0302 	and.w	r3, r3, #2
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d0ed      	beq.n	80094cc <HAL_RCC_OscConfig+0x388>
 80094f0:	e015      	b.n	800951e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094f2:	f7fd fae3 	bl	8006abc <HAL_GetTick>
 80094f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80094f8:	e00a      	b.n	8009510 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094fa:	f7fd fadf 	bl	8006abc <HAL_GetTick>
 80094fe:	4602      	mov	r2, r0
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009508:	4293      	cmp	r3, r2
 800950a:	d901      	bls.n	8009510 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	e121      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009510:	4b3a      	ldr	r3, [pc, #232]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 8009512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009516:	f003 0302 	and.w	r3, r3, #2
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1ed      	bne.n	80094fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800951e:	7ffb      	ldrb	r3, [r7, #31]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d105      	bne.n	8009530 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009524:	4b35      	ldr	r3, [pc, #212]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 8009526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009528:	4a34      	ldr	r2, [pc, #208]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 800952a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800952e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 0320 	and.w	r3, r3, #32
 8009538:	2b00      	cmp	r3, #0
 800953a:	d03c      	beq.n	80095b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d01c      	beq.n	800957e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009544:	4b2d      	ldr	r3, [pc, #180]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 8009546:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800954a:	4a2c      	ldr	r2, [pc, #176]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 800954c:	f043 0301 	orr.w	r3, r3, #1
 8009550:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009554:	f7fd fab2 	bl	8006abc <HAL_GetTick>
 8009558:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800955a:	e008      	b.n	800956e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800955c:	f7fd faae 	bl	8006abc <HAL_GetTick>
 8009560:	4602      	mov	r2, r0
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	2b02      	cmp	r3, #2
 8009568:	d901      	bls.n	800956e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800956a:	2303      	movs	r3, #3
 800956c:	e0f2      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800956e:	4b23      	ldr	r3, [pc, #140]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 8009570:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009574:	f003 0302 	and.w	r3, r3, #2
 8009578:	2b00      	cmp	r3, #0
 800957a:	d0ef      	beq.n	800955c <HAL_RCC_OscConfig+0x418>
 800957c:	e01b      	b.n	80095b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800957e:	4b1f      	ldr	r3, [pc, #124]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 8009580:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009584:	4a1d      	ldr	r2, [pc, #116]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 8009586:	f023 0301 	bic.w	r3, r3, #1
 800958a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800958e:	f7fd fa95 	bl	8006abc <HAL_GetTick>
 8009592:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009594:	e008      	b.n	80095a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009596:	f7fd fa91 	bl	8006abc <HAL_GetTick>
 800959a:	4602      	mov	r2, r0
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	d901      	bls.n	80095a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80095a4:	2303      	movs	r3, #3
 80095a6:	e0d5      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80095a8:	4b14      	ldr	r3, [pc, #80]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 80095aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80095ae:	f003 0302 	and.w	r3, r3, #2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1ef      	bne.n	8009596 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	69db      	ldr	r3, [r3, #28]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 80c9 	beq.w	8009752 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80095c0:	4b0e      	ldr	r3, [pc, #56]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f003 030c 	and.w	r3, r3, #12
 80095c8:	2b0c      	cmp	r3, #12
 80095ca:	f000 8083 	beq.w	80096d4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	69db      	ldr	r3, [r3, #28]
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d15e      	bne.n	8009694 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095d6:	4b09      	ldr	r3, [pc, #36]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a08      	ldr	r2, [pc, #32]	@ (80095fc <HAL_RCC_OscConfig+0x4b8>)
 80095dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e2:	f7fd fa6b 	bl	8006abc <HAL_GetTick>
 80095e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095e8:	e00c      	b.n	8009604 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095ea:	f7fd fa67 	bl	8006abc <HAL_GetTick>
 80095ee:	4602      	mov	r2, r0
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d905      	bls.n	8009604 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e0ab      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
 80095fc:	40021000 	.word	0x40021000
 8009600:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009604:	4b55      	ldr	r3, [pc, #340]	@ (800975c <HAL_RCC_OscConfig+0x618>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1ec      	bne.n	80095ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009610:	4b52      	ldr	r3, [pc, #328]	@ (800975c <HAL_RCC_OscConfig+0x618>)
 8009612:	68da      	ldr	r2, [r3, #12]
 8009614:	4b52      	ldr	r3, [pc, #328]	@ (8009760 <HAL_RCC_OscConfig+0x61c>)
 8009616:	4013      	ands	r3, r2
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	6a11      	ldr	r1, [r2, #32]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009620:	3a01      	subs	r2, #1
 8009622:	0112      	lsls	r2, r2, #4
 8009624:	4311      	orrs	r1, r2
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800962a:	0212      	lsls	r2, r2, #8
 800962c:	4311      	orrs	r1, r2
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009632:	0852      	lsrs	r2, r2, #1
 8009634:	3a01      	subs	r2, #1
 8009636:	0552      	lsls	r2, r2, #21
 8009638:	4311      	orrs	r1, r2
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800963e:	0852      	lsrs	r2, r2, #1
 8009640:	3a01      	subs	r2, #1
 8009642:	0652      	lsls	r2, r2, #25
 8009644:	4311      	orrs	r1, r2
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800964a:	06d2      	lsls	r2, r2, #27
 800964c:	430a      	orrs	r2, r1
 800964e:	4943      	ldr	r1, [pc, #268]	@ (800975c <HAL_RCC_OscConfig+0x618>)
 8009650:	4313      	orrs	r3, r2
 8009652:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009654:	4b41      	ldr	r3, [pc, #260]	@ (800975c <HAL_RCC_OscConfig+0x618>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a40      	ldr	r2, [pc, #256]	@ (800975c <HAL_RCC_OscConfig+0x618>)
 800965a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800965e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009660:	4b3e      	ldr	r3, [pc, #248]	@ (800975c <HAL_RCC_OscConfig+0x618>)
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	4a3d      	ldr	r2, [pc, #244]	@ (800975c <HAL_RCC_OscConfig+0x618>)
 8009666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800966a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800966c:	f7fd fa26 	bl	8006abc <HAL_GetTick>
 8009670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009672:	e008      	b.n	8009686 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009674:	f7fd fa22 	bl	8006abc <HAL_GetTick>
 8009678:	4602      	mov	r2, r0
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	2b02      	cmp	r3, #2
 8009680:	d901      	bls.n	8009686 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e066      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009686:	4b35      	ldr	r3, [pc, #212]	@ (800975c <HAL_RCC_OscConfig+0x618>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800968e:	2b00      	cmp	r3, #0
 8009690:	d0f0      	beq.n	8009674 <HAL_RCC_OscConfig+0x530>
 8009692:	e05e      	b.n	8009752 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009694:	4b31      	ldr	r3, [pc, #196]	@ (800975c <HAL_RCC_OscConfig+0x618>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a30      	ldr	r2, [pc, #192]	@ (800975c <HAL_RCC_OscConfig+0x618>)
 800969a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800969e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096a0:	f7fd fa0c 	bl	8006abc <HAL_GetTick>
 80096a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80096a6:	e008      	b.n	80096ba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096a8:	f7fd fa08 	bl	8006abc <HAL_GetTick>
 80096ac:	4602      	mov	r2, r0
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d901      	bls.n	80096ba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80096b6:	2303      	movs	r3, #3
 80096b8:	e04c      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80096ba:	4b28      	ldr	r3, [pc, #160]	@ (800975c <HAL_RCC_OscConfig+0x618>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1f0      	bne.n	80096a8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80096c6:	4b25      	ldr	r3, [pc, #148]	@ (800975c <HAL_RCC_OscConfig+0x618>)
 80096c8:	68da      	ldr	r2, [r3, #12]
 80096ca:	4924      	ldr	r1, [pc, #144]	@ (800975c <HAL_RCC_OscConfig+0x618>)
 80096cc:	4b25      	ldr	r3, [pc, #148]	@ (8009764 <HAL_RCC_OscConfig+0x620>)
 80096ce:	4013      	ands	r3, r2
 80096d0:	60cb      	str	r3, [r1, #12]
 80096d2:	e03e      	b.n	8009752 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	69db      	ldr	r3, [r3, #28]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d101      	bne.n	80096e0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e039      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80096e0:	4b1e      	ldr	r3, [pc, #120]	@ (800975c <HAL_RCC_OscConfig+0x618>)
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	f003 0203 	and.w	r2, r3, #3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a1b      	ldr	r3, [r3, #32]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d12c      	bne.n	800974e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096fe:	3b01      	subs	r3, #1
 8009700:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009702:	429a      	cmp	r2, r3
 8009704:	d123      	bne.n	800974e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009710:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009712:	429a      	cmp	r2, r3
 8009714:	d11b      	bne.n	800974e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009720:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009722:	429a      	cmp	r2, r3
 8009724:	d113      	bne.n	800974e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009730:	085b      	lsrs	r3, r3, #1
 8009732:	3b01      	subs	r3, #1
 8009734:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009736:	429a      	cmp	r2, r3
 8009738:	d109      	bne.n	800974e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009744:	085b      	lsrs	r3, r3, #1
 8009746:	3b01      	subs	r3, #1
 8009748:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800974a:	429a      	cmp	r2, r3
 800974c:	d001      	beq.n	8009752 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e000      	b.n	8009754 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3720      	adds	r7, #32
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	40021000 	.word	0x40021000
 8009760:	019f800c 	.word	0x019f800c
 8009764:	feeefffc 	.word	0xfeeefffc

08009768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009772:	2300      	movs	r3, #0
 8009774:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d101      	bne.n	8009780 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	e11e      	b.n	80099be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009780:	4b91      	ldr	r3, [pc, #580]	@ (80099c8 <HAL_RCC_ClockConfig+0x260>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f003 030f 	and.w	r3, r3, #15
 8009788:	683a      	ldr	r2, [r7, #0]
 800978a:	429a      	cmp	r2, r3
 800978c:	d910      	bls.n	80097b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800978e:	4b8e      	ldr	r3, [pc, #568]	@ (80099c8 <HAL_RCC_ClockConfig+0x260>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f023 020f 	bic.w	r2, r3, #15
 8009796:	498c      	ldr	r1, [pc, #560]	@ (80099c8 <HAL_RCC_ClockConfig+0x260>)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	4313      	orrs	r3, r2
 800979c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800979e:	4b8a      	ldr	r3, [pc, #552]	@ (80099c8 <HAL_RCC_ClockConfig+0x260>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 030f 	and.w	r3, r3, #15
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d001      	beq.n	80097b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	e106      	b.n	80099be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 0301 	and.w	r3, r3, #1
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d073      	beq.n	80098a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	2b03      	cmp	r3, #3
 80097c2:	d129      	bne.n	8009818 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80097c4:	4b81      	ldr	r3, [pc, #516]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d101      	bne.n	80097d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e0f4      	b.n	80099be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80097d4:	f000 f99e 	bl	8009b14 <RCC_GetSysClockFreqFromPLLSource>
 80097d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	4a7c      	ldr	r2, [pc, #496]	@ (80099d0 <HAL_RCC_ClockConfig+0x268>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d93f      	bls.n	8009862 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80097e2:	4b7a      	ldr	r3, [pc, #488]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d009      	beq.n	8009802 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d033      	beq.n	8009862 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d12f      	bne.n	8009862 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009802:	4b72      	ldr	r3, [pc, #456]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800980a:	4a70      	ldr	r2, [pc, #448]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 800980c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009810:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009812:	2380      	movs	r3, #128	@ 0x80
 8009814:	617b      	str	r3, [r7, #20]
 8009816:	e024      	b.n	8009862 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	2b02      	cmp	r3, #2
 800981e:	d107      	bne.n	8009830 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009820:	4b6a      	ldr	r3, [pc, #424]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009828:	2b00      	cmp	r3, #0
 800982a:	d109      	bne.n	8009840 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	e0c6      	b.n	80099be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009830:	4b66      	ldr	r3, [pc, #408]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009838:	2b00      	cmp	r3, #0
 800983a:	d101      	bne.n	8009840 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	e0be      	b.n	80099be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009840:	f000 f8ce 	bl	80099e0 <HAL_RCC_GetSysClockFreq>
 8009844:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	4a61      	ldr	r2, [pc, #388]	@ (80099d0 <HAL_RCC_ClockConfig+0x268>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d909      	bls.n	8009862 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800984e:	4b5f      	ldr	r3, [pc, #380]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009856:	4a5d      	ldr	r2, [pc, #372]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 8009858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800985c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800985e:	2380      	movs	r3, #128	@ 0x80
 8009860:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009862:	4b5a      	ldr	r3, [pc, #360]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f023 0203 	bic.w	r2, r3, #3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	4957      	ldr	r1, [pc, #348]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 8009870:	4313      	orrs	r3, r2
 8009872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009874:	f7fd f922 	bl	8006abc <HAL_GetTick>
 8009878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800987a:	e00a      	b.n	8009892 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800987c:	f7fd f91e 	bl	8006abc <HAL_GetTick>
 8009880:	4602      	mov	r2, r0
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800988a:	4293      	cmp	r3, r2
 800988c:	d901      	bls.n	8009892 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e095      	b.n	80099be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009892:	4b4e      	ldr	r3, [pc, #312]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	f003 020c 	and.w	r2, r3, #12
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d1eb      	bne.n	800987c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 0302 	and.w	r3, r3, #2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d023      	beq.n	80098f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 0304 	and.w	r3, r3, #4
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d005      	beq.n	80098c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80098bc:	4b43      	ldr	r3, [pc, #268]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	4a42      	ldr	r2, [pc, #264]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 80098c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80098c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 0308 	and.w	r3, r3, #8
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d007      	beq.n	80098e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80098d4:	4b3d      	ldr	r3, [pc, #244]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80098dc:	4a3b      	ldr	r2, [pc, #236]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 80098de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80098e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098e4:	4b39      	ldr	r3, [pc, #228]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	4936      	ldr	r1, [pc, #216]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 80098f2:	4313      	orrs	r3, r2
 80098f4:	608b      	str	r3, [r1, #8]
 80098f6:	e008      	b.n	800990a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	2b80      	cmp	r3, #128	@ 0x80
 80098fc:	d105      	bne.n	800990a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80098fe:	4b33      	ldr	r3, [pc, #204]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	4a32      	ldr	r2, [pc, #200]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 8009904:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009908:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800990a:	4b2f      	ldr	r3, [pc, #188]	@ (80099c8 <HAL_RCC_ClockConfig+0x260>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 030f 	and.w	r3, r3, #15
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	429a      	cmp	r2, r3
 8009916:	d21d      	bcs.n	8009954 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009918:	4b2b      	ldr	r3, [pc, #172]	@ (80099c8 <HAL_RCC_ClockConfig+0x260>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f023 020f 	bic.w	r2, r3, #15
 8009920:	4929      	ldr	r1, [pc, #164]	@ (80099c8 <HAL_RCC_ClockConfig+0x260>)
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	4313      	orrs	r3, r2
 8009926:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009928:	f7fd f8c8 	bl	8006abc <HAL_GetTick>
 800992c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800992e:	e00a      	b.n	8009946 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009930:	f7fd f8c4 	bl	8006abc <HAL_GetTick>
 8009934:	4602      	mov	r2, r0
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800993e:	4293      	cmp	r3, r2
 8009940:	d901      	bls.n	8009946 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009942:	2303      	movs	r3, #3
 8009944:	e03b      	b.n	80099be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009946:	4b20      	ldr	r3, [pc, #128]	@ (80099c8 <HAL_RCC_ClockConfig+0x260>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 030f 	and.w	r3, r3, #15
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	429a      	cmp	r2, r3
 8009952:	d1ed      	bne.n	8009930 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 0304 	and.w	r3, r3, #4
 800995c:	2b00      	cmp	r3, #0
 800995e:	d008      	beq.n	8009972 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009960:	4b1a      	ldr	r3, [pc, #104]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	4917      	ldr	r1, [pc, #92]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 800996e:	4313      	orrs	r3, r2
 8009970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 0308 	and.w	r3, r3, #8
 800997a:	2b00      	cmp	r3, #0
 800997c:	d009      	beq.n	8009992 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800997e:	4b13      	ldr	r3, [pc, #76]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	00db      	lsls	r3, r3, #3
 800998c:	490f      	ldr	r1, [pc, #60]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 800998e:	4313      	orrs	r3, r2
 8009990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009992:	f000 f825 	bl	80099e0 <HAL_RCC_GetSysClockFreq>
 8009996:	4602      	mov	r2, r0
 8009998:	4b0c      	ldr	r3, [pc, #48]	@ (80099cc <HAL_RCC_ClockConfig+0x264>)
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	091b      	lsrs	r3, r3, #4
 800999e:	f003 030f 	and.w	r3, r3, #15
 80099a2:	490c      	ldr	r1, [pc, #48]	@ (80099d4 <HAL_RCC_ClockConfig+0x26c>)
 80099a4:	5ccb      	ldrb	r3, [r1, r3]
 80099a6:	f003 031f 	and.w	r3, r3, #31
 80099aa:	fa22 f303 	lsr.w	r3, r2, r3
 80099ae:	4a0a      	ldr	r2, [pc, #40]	@ (80099d8 <HAL_RCC_ClockConfig+0x270>)
 80099b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80099b2:	4b0a      	ldr	r3, [pc, #40]	@ (80099dc <HAL_RCC_ClockConfig+0x274>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fd f834 	bl	8006a24 <HAL_InitTick>
 80099bc:	4603      	mov	r3, r0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3718      	adds	r7, #24
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	40022000 	.word	0x40022000
 80099cc:	40021000 	.word	0x40021000
 80099d0:	04c4b400 	.word	0x04c4b400
 80099d4:	0800ff50 	.word	0x0800ff50
 80099d8:	200000f4 	.word	0x200000f4
 80099dc:	200000f8 	.word	0x200000f8

080099e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b087      	sub	sp, #28
 80099e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80099e6:	4b2c      	ldr	r3, [pc, #176]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	f003 030c 	and.w	r3, r3, #12
 80099ee:	2b04      	cmp	r3, #4
 80099f0:	d102      	bne.n	80099f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80099f2:	4b2a      	ldr	r3, [pc, #168]	@ (8009a9c <HAL_RCC_GetSysClockFreq+0xbc>)
 80099f4:	613b      	str	r3, [r7, #16]
 80099f6:	e047      	b.n	8009a88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80099f8:	4b27      	ldr	r3, [pc, #156]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f003 030c 	and.w	r3, r3, #12
 8009a00:	2b08      	cmp	r3, #8
 8009a02:	d102      	bne.n	8009a0a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009a04:	4b26      	ldr	r3, [pc, #152]	@ (8009aa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009a06:	613b      	str	r3, [r7, #16]
 8009a08:	e03e      	b.n	8009a88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009a0a:	4b23      	ldr	r3, [pc, #140]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	f003 030c 	and.w	r3, r3, #12
 8009a12:	2b0c      	cmp	r3, #12
 8009a14:	d136      	bne.n	8009a84 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009a16:	4b20      	ldr	r3, [pc, #128]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	f003 0303 	and.w	r3, r3, #3
 8009a1e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009a20:	4b1d      	ldr	r3, [pc, #116]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	091b      	lsrs	r3, r3, #4
 8009a26:	f003 030f 	and.w	r3, r3, #15
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	d10c      	bne.n	8009a4e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009a34:	4a1a      	ldr	r2, [pc, #104]	@ (8009aa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a3c:	4a16      	ldr	r2, [pc, #88]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009a3e:	68d2      	ldr	r2, [r2, #12]
 8009a40:	0a12      	lsrs	r2, r2, #8
 8009a42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009a46:	fb02 f303 	mul.w	r3, r2, r3
 8009a4a:	617b      	str	r3, [r7, #20]
      break;
 8009a4c:	e00c      	b.n	8009a68 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009a4e:	4a13      	ldr	r2, [pc, #76]	@ (8009a9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a56:	4a10      	ldr	r2, [pc, #64]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009a58:	68d2      	ldr	r2, [r2, #12]
 8009a5a:	0a12      	lsrs	r2, r2, #8
 8009a5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009a60:	fb02 f303 	mul.w	r3, r2, r3
 8009a64:	617b      	str	r3, [r7, #20]
      break;
 8009a66:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009a68:	4b0b      	ldr	r3, [pc, #44]	@ (8009a98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	0e5b      	lsrs	r3, r3, #25
 8009a6e:	f003 0303 	and.w	r3, r3, #3
 8009a72:	3301      	adds	r3, #1
 8009a74:	005b      	lsls	r3, r3, #1
 8009a76:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009a78:	697a      	ldr	r2, [r7, #20]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a80:	613b      	str	r3, [r7, #16]
 8009a82:	e001      	b.n	8009a88 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009a84:	2300      	movs	r3, #0
 8009a86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009a88:	693b      	ldr	r3, [r7, #16]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	371c      	adds	r7, #28
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	40021000 	.word	0x40021000
 8009a9c:	00f42400 	.word	0x00f42400
 8009aa0:	016e3600 	.word	0x016e3600

08009aa4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009aa8:	4b03      	ldr	r3, [pc, #12]	@ (8009ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	200000f4 	.word	0x200000f4

08009abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009ac0:	f7ff fff0 	bl	8009aa4 <HAL_RCC_GetHCLKFreq>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	4b06      	ldr	r3, [pc, #24]	@ (8009ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	0a1b      	lsrs	r3, r3, #8
 8009acc:	f003 0307 	and.w	r3, r3, #7
 8009ad0:	4904      	ldr	r1, [pc, #16]	@ (8009ae4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009ad2:	5ccb      	ldrb	r3, [r1, r3]
 8009ad4:	f003 031f 	and.w	r3, r3, #31
 8009ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	40021000 	.word	0x40021000
 8009ae4:	0800ff60 	.word	0x0800ff60

08009ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009aec:	f7ff ffda 	bl	8009aa4 <HAL_RCC_GetHCLKFreq>
 8009af0:	4602      	mov	r2, r0
 8009af2:	4b06      	ldr	r3, [pc, #24]	@ (8009b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	0adb      	lsrs	r3, r3, #11
 8009af8:	f003 0307 	and.w	r3, r3, #7
 8009afc:	4904      	ldr	r1, [pc, #16]	@ (8009b10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009afe:	5ccb      	ldrb	r3, [r1, r3]
 8009b00:	f003 031f 	and.w	r3, r3, #31
 8009b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	40021000 	.word	0x40021000
 8009b10:	0800ff60 	.word	0x0800ff60

08009b14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b087      	sub	sp, #28
 8009b18:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8009b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	f003 0303 	and.w	r3, r3, #3
 8009b22:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009b24:	4b1b      	ldr	r3, [pc, #108]	@ (8009b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	091b      	lsrs	r3, r3, #4
 8009b2a:	f003 030f 	and.w	r3, r3, #15
 8009b2e:	3301      	adds	r3, #1
 8009b30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d10c      	bne.n	8009b52 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009b38:	4a17      	ldr	r2, [pc, #92]	@ (8009b98 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b40:	4a14      	ldr	r2, [pc, #80]	@ (8009b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009b42:	68d2      	ldr	r2, [r2, #12]
 8009b44:	0a12      	lsrs	r2, r2, #8
 8009b46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009b4a:	fb02 f303 	mul.w	r3, r2, r3
 8009b4e:	617b      	str	r3, [r7, #20]
    break;
 8009b50:	e00c      	b.n	8009b6c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009b52:	4a12      	ldr	r2, [pc, #72]	@ (8009b9c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8009b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009b5c:	68d2      	ldr	r2, [r2, #12]
 8009b5e:	0a12      	lsrs	r2, r2, #8
 8009b60:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009b64:	fb02 f303 	mul.w	r3, r2, r3
 8009b68:	617b      	str	r3, [r7, #20]
    break;
 8009b6a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009b6c:	4b09      	ldr	r3, [pc, #36]	@ (8009b94 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	0e5b      	lsrs	r3, r3, #25
 8009b72:	f003 0303 	and.w	r3, r3, #3
 8009b76:	3301      	adds	r3, #1
 8009b78:	005b      	lsls	r3, r3, #1
 8009b7a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b84:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009b86:	687b      	ldr	r3, [r7, #4]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	371c      	adds	r7, #28
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	40021000 	.word	0x40021000
 8009b98:	016e3600 	.word	0x016e3600
 8009b9c:	00f42400 	.word	0x00f42400

08009ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ba8:	2300      	movs	r3, #0
 8009baa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009bac:	2300      	movs	r3, #0
 8009bae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f000 8098 	beq.w	8009cee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009bc2:	4b43      	ldr	r3, [pc, #268]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10d      	bne.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009bce:	4b40      	ldr	r3, [pc, #256]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bd2:	4a3f      	ldr	r2, [pc, #252]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bda:	4b3d      	ldr	r3, [pc, #244]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009be2:	60bb      	str	r3, [r7, #8]
 8009be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009be6:	2301      	movs	r3, #1
 8009be8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009bea:	4b3a      	ldr	r3, [pc, #232]	@ (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a39      	ldr	r2, [pc, #228]	@ (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009bf6:	f7fc ff61 	bl	8006abc <HAL_GetTick>
 8009bfa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bfc:	e009      	b.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bfe:	f7fc ff5d 	bl	8006abc <HAL_GetTick>
 8009c02:	4602      	mov	r2, r0
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	1ad3      	subs	r3, r2, r3
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d902      	bls.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	74fb      	strb	r3, [r7, #19]
        break;
 8009c10:	e005      	b.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c12:	4b30      	ldr	r3, [pc, #192]	@ (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d0ef      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009c1e:	7cfb      	ldrb	r3, [r7, #19]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d159      	bne.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009c24:	4b2a      	ldr	r3, [pc, #168]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c2e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d01e      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d019      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009c40:	4b23      	ldr	r3, [pc, #140]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c4c:	4b20      	ldr	r3, [pc, #128]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c52:	4a1f      	ldr	r2, [pc, #124]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c62:	4a1b      	ldr	r2, [pc, #108]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009c6c:	4a18      	ldr	r2, [pc, #96]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d016      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c7e:	f7fc ff1d 	bl	8006abc <HAL_GetTick>
 8009c82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c84:	e00b      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c86:	f7fc ff19 	bl	8006abc <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d902      	bls.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	74fb      	strb	r3, [r7, #19]
            break;
 8009c9c:	e006      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ca4:	f003 0302 	and.w	r3, r3, #2
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d0ec      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009cac:	7cfb      	ldrb	r3, [r7, #19]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10b      	bne.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009cb2:	4b07      	ldr	r3, [pc, #28]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cc0:	4903      	ldr	r1, [pc, #12]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009cc8:	e008      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009cca:	7cfb      	ldrb	r3, [r7, #19]
 8009ccc:	74bb      	strb	r3, [r7, #18]
 8009cce:	e005      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009cd0:	40021000 	.word	0x40021000
 8009cd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cd8:	7cfb      	ldrb	r3, [r7, #19]
 8009cda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009cdc:	7c7b      	ldrb	r3, [r7, #17]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d105      	bne.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ce2:	4ba7      	ldr	r3, [pc, #668]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ce6:	4aa6      	ldr	r2, [pc, #664]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ce8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 0301 	and.w	r3, r3, #1
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00a      	beq.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009cfa:	4ba1      	ldr	r3, [pc, #644]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d00:	f023 0203 	bic.w	r2, r3, #3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	499d      	ldr	r1, [pc, #628]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0302 	and.w	r3, r3, #2
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00a      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009d1c:	4b98      	ldr	r3, [pc, #608]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d22:	f023 020c 	bic.w	r2, r3, #12
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	4995      	ldr	r1, [pc, #596]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f003 0304 	and.w	r3, r3, #4
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00a      	beq.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009d3e:	4b90      	ldr	r3, [pc, #576]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d44:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	498c      	ldr	r1, [pc, #560]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 0308 	and.w	r3, r3, #8
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00a      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009d60:	4b87      	ldr	r3, [pc, #540]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	4984      	ldr	r1, [pc, #528]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d70:	4313      	orrs	r3, r2
 8009d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 0310 	and.w	r3, r3, #16
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00a      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009d82:	4b7f      	ldr	r3, [pc, #508]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	695b      	ldr	r3, [r3, #20]
 8009d90:	497b      	ldr	r1, [pc, #492]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d92:	4313      	orrs	r3, r2
 8009d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f003 0320 	and.w	r3, r3, #32
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00a      	beq.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009da4:	4b76      	ldr	r3, [pc, #472]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009daa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	4973      	ldr	r1, [pc, #460]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009db4:	4313      	orrs	r3, r2
 8009db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00a      	beq.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009dc6:	4b6e      	ldr	r3, [pc, #440]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dcc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	69db      	ldr	r3, [r3, #28]
 8009dd4:	496a      	ldr	r1, [pc, #424]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00a      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009de8:	4b65      	ldr	r3, [pc, #404]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	4962      	ldr	r1, [pc, #392]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00a      	beq.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009e0a:	4b5d      	ldr	r3, [pc, #372]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e18:	4959      	ldr	r1, [pc, #356]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00a      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e2c:	4b54      	ldr	r3, [pc, #336]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e32:	f023 0203 	bic.w	r2, r3, #3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e3a:	4951      	ldr	r1, [pc, #324]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00a      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009e4e:	4b4c      	ldr	r3, [pc, #304]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e5c:	4948      	ldr	r1, [pc, #288]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d015      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e70:	4b43      	ldr	r3, [pc, #268]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e7e:	4940      	ldr	r1, [pc, #256]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e80:	4313      	orrs	r3, r2
 8009e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e8e:	d105      	bne.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e90:	4b3b      	ldr	r3, [pc, #236]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	4a3a      	ldr	r2, [pc, #232]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e9a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d015      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009ea8:	4b35      	ldr	r3, [pc, #212]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009eae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eb6:	4932      	ldr	r1, [pc, #200]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ec2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ec6:	d105      	bne.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	4a2c      	ldr	r2, [pc, #176]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ed2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d015      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009ee0:	4b27      	ldr	r3, [pc, #156]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ee6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eee:	4924      	ldr	r1, [pc, #144]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009efa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009efe:	d105      	bne.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f00:	4b1f      	ldr	r3, [pc, #124]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	4a1e      	ldr	r2, [pc, #120]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d015      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f18:	4b19      	ldr	r3, [pc, #100]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f26:	4916      	ldr	r1, [pc, #88]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f36:	d105      	bne.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f38:	4b11      	ldr	r3, [pc, #68]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	4a10      	ldr	r2, [pc, #64]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d019      	beq.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f50:	4b0b      	ldr	r3, [pc, #44]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f5e:	4908      	ldr	r1, [pc, #32]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f60:	4313      	orrs	r3, r2
 8009f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f6e:	d109      	bne.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f70:	4b03      	ldr	r3, [pc, #12]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	4a02      	ldr	r2, [pc, #8]	@ (8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f7a:	60d3      	str	r3, [r2, #12]
 8009f7c:	e002      	b.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009f7e:	bf00      	nop
 8009f80:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d015      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009f90:	4b29      	ldr	r3, [pc, #164]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f96:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f9e:	4926      	ldr	r1, [pc, #152]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009faa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fae:	d105      	bne.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009fb0:	4b21      	ldr	r3, [pc, #132]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	4a20      	ldr	r2, [pc, #128]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009fb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d015      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009fc8:	4b1b      	ldr	r3, [pc, #108]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fce:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fd6:	4918      	ldr	r1, [pc, #96]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fe6:	d105      	bne.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009fe8:	4b13      	ldr	r3, [pc, #76]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	4a12      	ldr	r2, [pc, #72]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ff2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d015      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a000:	4b0d      	ldr	r3, [pc, #52]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a002:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a006:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a00e:	490a      	ldr	r1, [pc, #40]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a010:	4313      	orrs	r3, r2
 800a012:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a01a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a01e:	d105      	bne.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a020:	4b05      	ldr	r3, [pc, #20]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	4a04      	ldr	r2, [pc, #16]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a02a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a02c:	7cbb      	ldrb	r3, [r7, #18]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	40021000 	.word	0x40021000

0800a03c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e054      	b.n	800a0f8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d111      	bne.n	800a07e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f001 fee2 	bl	800be2c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d102      	bne.n	800a076 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a23      	ldr	r2, [pc, #140]	@ (800a100 <HAL_TIM_Base_Init+0xc4>)
 800a074:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2202      	movs	r2, #2
 800a082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	3304      	adds	r3, #4
 800a08e:	4619      	mov	r1, r3
 800a090:	4610      	mov	r0, r2
 800a092:	f001 fa2b 	bl	800b4ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2201      	movs	r2, #1
 800a09a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	08006321 	.word	0x08006321

0800a104 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b01      	cmp	r3, #1
 800a116:	d001      	beq.n	800a11c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	e04c      	b.n	800a1b6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2202      	movs	r2, #2
 800a120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a26      	ldr	r2, [pc, #152]	@ (800a1c4 <HAL_TIM_Base_Start+0xc0>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d022      	beq.n	800a174 <HAL_TIM_Base_Start+0x70>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a136:	d01d      	beq.n	800a174 <HAL_TIM_Base_Start+0x70>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a22      	ldr	r2, [pc, #136]	@ (800a1c8 <HAL_TIM_Base_Start+0xc4>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d018      	beq.n	800a174 <HAL_TIM_Base_Start+0x70>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a21      	ldr	r2, [pc, #132]	@ (800a1cc <HAL_TIM_Base_Start+0xc8>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d013      	beq.n	800a174 <HAL_TIM_Base_Start+0x70>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a1f      	ldr	r2, [pc, #124]	@ (800a1d0 <HAL_TIM_Base_Start+0xcc>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d00e      	beq.n	800a174 <HAL_TIM_Base_Start+0x70>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a1e      	ldr	r2, [pc, #120]	@ (800a1d4 <HAL_TIM_Base_Start+0xd0>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d009      	beq.n	800a174 <HAL_TIM_Base_Start+0x70>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a1c      	ldr	r2, [pc, #112]	@ (800a1d8 <HAL_TIM_Base_Start+0xd4>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d004      	beq.n	800a174 <HAL_TIM_Base_Start+0x70>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a1b      	ldr	r2, [pc, #108]	@ (800a1dc <HAL_TIM_Base_Start+0xd8>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d115      	bne.n	800a1a0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	689a      	ldr	r2, [r3, #8]
 800a17a:	4b19      	ldr	r3, [pc, #100]	@ (800a1e0 <HAL_TIM_Base_Start+0xdc>)
 800a17c:	4013      	ands	r3, r2
 800a17e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2b06      	cmp	r3, #6
 800a184:	d015      	beq.n	800a1b2 <HAL_TIM_Base_Start+0xae>
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a18c:	d011      	beq.n	800a1b2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f042 0201 	orr.w	r2, r2, #1
 800a19c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a19e:	e008      	b.n	800a1b2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f042 0201 	orr.w	r2, r2, #1
 800a1ae:	601a      	str	r2, [r3, #0]
 800a1b0:	e000      	b.n	800a1b4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	40012c00 	.word	0x40012c00
 800a1c8:	40000400 	.word	0x40000400
 800a1cc:	40000800 	.word	0x40000800
 800a1d0:	40000c00 	.word	0x40000c00
 800a1d4:	40013400 	.word	0x40013400
 800a1d8:	40014000 	.word	0x40014000
 800a1dc:	40015000 	.word	0x40015000
 800a1e0:	00010007 	.word	0x00010007

0800a1e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d001      	beq.n	800a1fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e054      	b.n	800a2a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2202      	movs	r2, #2
 800a200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68da      	ldr	r2, [r3, #12]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f042 0201 	orr.w	r2, r2, #1
 800a212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a26      	ldr	r2, [pc, #152]	@ (800a2b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d022      	beq.n	800a264 <HAL_TIM_Base_Start_IT+0x80>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a226:	d01d      	beq.n	800a264 <HAL_TIM_Base_Start_IT+0x80>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a22      	ldr	r2, [pc, #136]	@ (800a2b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d018      	beq.n	800a264 <HAL_TIM_Base_Start_IT+0x80>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a21      	ldr	r2, [pc, #132]	@ (800a2bc <HAL_TIM_Base_Start_IT+0xd8>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d013      	beq.n	800a264 <HAL_TIM_Base_Start_IT+0x80>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a1f      	ldr	r2, [pc, #124]	@ (800a2c0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d00e      	beq.n	800a264 <HAL_TIM_Base_Start_IT+0x80>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a1e      	ldr	r2, [pc, #120]	@ (800a2c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d009      	beq.n	800a264 <HAL_TIM_Base_Start_IT+0x80>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a1c      	ldr	r2, [pc, #112]	@ (800a2c8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d004      	beq.n	800a264 <HAL_TIM_Base_Start_IT+0x80>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a1b      	ldr	r2, [pc, #108]	@ (800a2cc <HAL_TIM_Base_Start_IT+0xe8>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d115      	bne.n	800a290 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	689a      	ldr	r2, [r3, #8]
 800a26a:	4b19      	ldr	r3, [pc, #100]	@ (800a2d0 <HAL_TIM_Base_Start_IT+0xec>)
 800a26c:	4013      	ands	r3, r2
 800a26e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2b06      	cmp	r3, #6
 800a274:	d015      	beq.n	800a2a2 <HAL_TIM_Base_Start_IT+0xbe>
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a27c:	d011      	beq.n	800a2a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f042 0201 	orr.w	r2, r2, #1
 800a28c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a28e:	e008      	b.n	800a2a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f042 0201 	orr.w	r2, r2, #1
 800a29e:	601a      	str	r2, [r3, #0]
 800a2a0:	e000      	b.n	800a2a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	40012c00 	.word	0x40012c00
 800a2b8:	40000400 	.word	0x40000400
 800a2bc:	40000800 	.word	0x40000800
 800a2c0:	40000c00 	.word	0x40000c00
 800a2c4:	40013400 	.word	0x40013400
 800a2c8:	40014000 	.word	0x40014000
 800a2cc:	40015000 	.word	0x40015000
 800a2d0:	00010007 	.word	0x00010007

0800a2d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d101      	bne.n	800a2e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e054      	b.n	800a390 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d111      	bne.n	800a316 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f001 fd96 	bl	800be2c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a304:	2b00      	cmp	r3, #0
 800a306:	d102      	bne.n	800a30e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4a23      	ldr	r2, [pc, #140]	@ (800a398 <HAL_TIM_PWM_Init+0xc4>)
 800a30c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2202      	movs	r2, #2
 800a31a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	3304      	adds	r3, #4
 800a326:	4619      	mov	r1, r3
 800a328:	4610      	mov	r0, r2
 800a32a:	f001 f8df 	bl	800b4ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2201      	movs	r2, #1
 800a342:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2201      	movs	r2, #1
 800a34a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2201      	movs	r2, #1
 800a352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2201      	movs	r2, #1
 800a35a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2201      	movs	r2, #1
 800a36a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2201      	movs	r2, #1
 800a372:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	080062d5 	.word	0x080062d5

0800a39c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d109      	bne.n	800a3c0 <HAL_TIM_PWM_Start+0x24>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	bf14      	ite	ne
 800a3b8:	2301      	movne	r3, #1
 800a3ba:	2300      	moveq	r3, #0
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	e03c      	b.n	800a43a <HAL_TIM_PWM_Start+0x9e>
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2b04      	cmp	r3, #4
 800a3c4:	d109      	bne.n	800a3da <HAL_TIM_PWM_Start+0x3e>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	bf14      	ite	ne
 800a3d2:	2301      	movne	r3, #1
 800a3d4:	2300      	moveq	r3, #0
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	e02f      	b.n	800a43a <HAL_TIM_PWM_Start+0x9e>
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	2b08      	cmp	r3, #8
 800a3de:	d109      	bne.n	800a3f4 <HAL_TIM_PWM_Start+0x58>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	bf14      	ite	ne
 800a3ec:	2301      	movne	r3, #1
 800a3ee:	2300      	moveq	r3, #0
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	e022      	b.n	800a43a <HAL_TIM_PWM_Start+0x9e>
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2b0c      	cmp	r3, #12
 800a3f8:	d109      	bne.n	800a40e <HAL_TIM_PWM_Start+0x72>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a400:	b2db      	uxtb	r3, r3
 800a402:	2b01      	cmp	r3, #1
 800a404:	bf14      	ite	ne
 800a406:	2301      	movne	r3, #1
 800a408:	2300      	moveq	r3, #0
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	e015      	b.n	800a43a <HAL_TIM_PWM_Start+0x9e>
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b10      	cmp	r3, #16
 800a412:	d109      	bne.n	800a428 <HAL_TIM_PWM_Start+0x8c>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	bf14      	ite	ne
 800a420:	2301      	movne	r3, #1
 800a422:	2300      	moveq	r3, #0
 800a424:	b2db      	uxtb	r3, r3
 800a426:	e008      	b.n	800a43a <HAL_TIM_PWM_Start+0x9e>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b01      	cmp	r3, #1
 800a432:	bf14      	ite	ne
 800a434:	2301      	movne	r3, #1
 800a436:	2300      	moveq	r3, #0
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d001      	beq.n	800a442 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	e0a6      	b.n	800a590 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d104      	bne.n	800a452 <HAL_TIM_PWM_Start+0xb6>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2202      	movs	r2, #2
 800a44c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a450:	e023      	b.n	800a49a <HAL_TIM_PWM_Start+0xfe>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b04      	cmp	r3, #4
 800a456:	d104      	bne.n	800a462 <HAL_TIM_PWM_Start+0xc6>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2202      	movs	r2, #2
 800a45c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a460:	e01b      	b.n	800a49a <HAL_TIM_PWM_Start+0xfe>
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b08      	cmp	r3, #8
 800a466:	d104      	bne.n	800a472 <HAL_TIM_PWM_Start+0xd6>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2202      	movs	r2, #2
 800a46c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a470:	e013      	b.n	800a49a <HAL_TIM_PWM_Start+0xfe>
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	2b0c      	cmp	r3, #12
 800a476:	d104      	bne.n	800a482 <HAL_TIM_PWM_Start+0xe6>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2202      	movs	r2, #2
 800a47c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a480:	e00b      	b.n	800a49a <HAL_TIM_PWM_Start+0xfe>
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	2b10      	cmp	r3, #16
 800a486:	d104      	bne.n	800a492 <HAL_TIM_PWM_Start+0xf6>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2202      	movs	r2, #2
 800a48c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a490:	e003      	b.n	800a49a <HAL_TIM_PWM_Start+0xfe>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2202      	movs	r2, #2
 800a496:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	6839      	ldr	r1, [r7, #0]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f001 fc9c 	bl	800bde0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a3a      	ldr	r2, [pc, #232]	@ (800a598 <HAL_TIM_PWM_Start+0x1fc>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d018      	beq.n	800a4e4 <HAL_TIM_PWM_Start+0x148>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a39      	ldr	r2, [pc, #228]	@ (800a59c <HAL_TIM_PWM_Start+0x200>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d013      	beq.n	800a4e4 <HAL_TIM_PWM_Start+0x148>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a37      	ldr	r2, [pc, #220]	@ (800a5a0 <HAL_TIM_PWM_Start+0x204>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d00e      	beq.n	800a4e4 <HAL_TIM_PWM_Start+0x148>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a36      	ldr	r2, [pc, #216]	@ (800a5a4 <HAL_TIM_PWM_Start+0x208>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d009      	beq.n	800a4e4 <HAL_TIM_PWM_Start+0x148>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a34      	ldr	r2, [pc, #208]	@ (800a5a8 <HAL_TIM_PWM_Start+0x20c>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d004      	beq.n	800a4e4 <HAL_TIM_PWM_Start+0x148>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a33      	ldr	r2, [pc, #204]	@ (800a5ac <HAL_TIM_PWM_Start+0x210>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d101      	bne.n	800a4e8 <HAL_TIM_PWM_Start+0x14c>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e000      	b.n	800a4ea <HAL_TIM_PWM_Start+0x14e>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d007      	beq.n	800a4fe <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a4fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a25      	ldr	r2, [pc, #148]	@ (800a598 <HAL_TIM_PWM_Start+0x1fc>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d022      	beq.n	800a54e <HAL_TIM_PWM_Start+0x1b2>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a510:	d01d      	beq.n	800a54e <HAL_TIM_PWM_Start+0x1b2>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a26      	ldr	r2, [pc, #152]	@ (800a5b0 <HAL_TIM_PWM_Start+0x214>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d018      	beq.n	800a54e <HAL_TIM_PWM_Start+0x1b2>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a24      	ldr	r2, [pc, #144]	@ (800a5b4 <HAL_TIM_PWM_Start+0x218>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d013      	beq.n	800a54e <HAL_TIM_PWM_Start+0x1b2>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a23      	ldr	r2, [pc, #140]	@ (800a5b8 <HAL_TIM_PWM_Start+0x21c>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d00e      	beq.n	800a54e <HAL_TIM_PWM_Start+0x1b2>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a19      	ldr	r2, [pc, #100]	@ (800a59c <HAL_TIM_PWM_Start+0x200>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d009      	beq.n	800a54e <HAL_TIM_PWM_Start+0x1b2>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a18      	ldr	r2, [pc, #96]	@ (800a5a0 <HAL_TIM_PWM_Start+0x204>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d004      	beq.n	800a54e <HAL_TIM_PWM_Start+0x1b2>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a18      	ldr	r2, [pc, #96]	@ (800a5ac <HAL_TIM_PWM_Start+0x210>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d115      	bne.n	800a57a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	689a      	ldr	r2, [r3, #8]
 800a554:	4b19      	ldr	r3, [pc, #100]	@ (800a5bc <HAL_TIM_PWM_Start+0x220>)
 800a556:	4013      	ands	r3, r2
 800a558:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2b06      	cmp	r3, #6
 800a55e:	d015      	beq.n	800a58c <HAL_TIM_PWM_Start+0x1f0>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a566:	d011      	beq.n	800a58c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f042 0201 	orr.w	r2, r2, #1
 800a576:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a578:	e008      	b.n	800a58c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f042 0201 	orr.w	r2, r2, #1
 800a588:	601a      	str	r2, [r3, #0]
 800a58a:	e000      	b.n	800a58e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a58c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3710      	adds	r7, #16
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	40012c00 	.word	0x40012c00
 800a59c:	40013400 	.word	0x40013400
 800a5a0:	40014000 	.word	0x40014000
 800a5a4:	40014400 	.word	0x40014400
 800a5a8:	40014800 	.word	0x40014800
 800a5ac:	40015000 	.word	0x40015000
 800a5b0:	40000400 	.word	0x40000400
 800a5b4:	40000800 	.word	0x40000800
 800a5b8:	40000c00 	.word	0x40000c00
 800a5bc:	00010007 	.word	0x00010007

0800a5c0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e04c      	b.n	800a66e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d111      	bne.n	800a604 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f001 fc1f 	bl	800be2c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d102      	bne.n	800a5fc <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4a1f      	ldr	r2, [pc, #124]	@ (800a678 <HAL_TIM_OnePulse_Init+0xb8>)
 800a5fa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2202      	movs	r2, #2
 800a608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	3304      	adds	r3, #4
 800a614:	4619      	mov	r1, r3
 800a616:	4610      	mov	r0, r2
 800a618:	f000 ff68 	bl	800b4ec <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f022 0208 	bic.w	r2, r2, #8
 800a62a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6819      	ldr	r1, [r3, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	683a      	ldr	r2, [r7, #0]
 800a638:	430a      	orrs	r2, r1
 800a63a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	0800a67d 	.word	0x0800a67d

0800a67c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a6a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a6a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6b8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a6ba:	7bfb      	ldrb	r3, [r7, #15]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d108      	bne.n	800a6d2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a6c0:	7bbb      	ldrb	r3, [r7, #14]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d105      	bne.n	800a6d2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a6c6:	7b7b      	ldrb	r3, [r7, #13]
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d102      	bne.n	800a6d2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a6cc:	7b3b      	ldrb	r3, [r7, #12]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d001      	beq.n	800a6d6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e059      	b.n	800a78a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2202      	movs	r2, #2
 800a6da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2202      	movs	r2, #2
 800a6e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2202      	movs	r2, #2
 800a6ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2202      	movs	r2, #2
 800a6f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	68da      	ldr	r2, [r3, #12]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f042 0202 	orr.w	r2, r2, #2
 800a704:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68da      	ldr	r2, [r3, #12]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f042 0204 	orr.w	r2, r2, #4
 800a714:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2201      	movs	r2, #1
 800a71c:	2100      	movs	r1, #0
 800a71e:	4618      	mov	r0, r3
 800a720:	f001 fb5e 	bl	800bde0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2201      	movs	r2, #1
 800a72a:	2104      	movs	r1, #4
 800a72c:	4618      	mov	r0, r3
 800a72e:	f001 fb57 	bl	800bde0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a17      	ldr	r2, [pc, #92]	@ (800a794 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d018      	beq.n	800a76e <HAL_TIM_OnePulse_Start_IT+0xde>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a15      	ldr	r2, [pc, #84]	@ (800a798 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d013      	beq.n	800a76e <HAL_TIM_OnePulse_Start_IT+0xde>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a14      	ldr	r2, [pc, #80]	@ (800a79c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d00e      	beq.n	800a76e <HAL_TIM_OnePulse_Start_IT+0xde>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a12      	ldr	r2, [pc, #72]	@ (800a7a0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d009      	beq.n	800a76e <HAL_TIM_OnePulse_Start_IT+0xde>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a11      	ldr	r2, [pc, #68]	@ (800a7a4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d004      	beq.n	800a76e <HAL_TIM_OnePulse_Start_IT+0xde>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a0f      	ldr	r2, [pc, #60]	@ (800a7a8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d101      	bne.n	800a772 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800a76e:	2301      	movs	r3, #1
 800a770:	e000      	b.n	800a774 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800a772:	2300      	movs	r3, #0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d007      	beq.n	800a788 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a786:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	40012c00 	.word	0x40012c00
 800a798:	40013400 	.word	0x40013400
 800a79c:	40014000 	.word	0x40014000
 800a7a0:	40014400 	.word	0x40014400
 800a7a4:	40014800 	.word	0x40014800
 800a7a8:	40015000 	.word	0x40015000

0800a7ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d101      	bne.n	800a7c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e0a2      	b.n	800a906 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d111      	bne.n	800a7f0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f001 fb29 	bl	800be2c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d102      	bne.n	800a7e8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a4a      	ldr	r2, [pc, #296]	@ (800a910 <HAL_TIM_Encoder_Init+0x164>)
 800a7e6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2202      	movs	r2, #2
 800a7f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	6812      	ldr	r2, [r2, #0]
 800a802:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800a806:	f023 0307 	bic.w	r3, r3, #7
 800a80a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	3304      	adds	r3, #4
 800a814:	4619      	mov	r1, r3
 800a816:	4610      	mov	r0, r2
 800a818:	f000 fe68 	bl	800b4ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	699b      	ldr	r3, [r3, #24]
 800a82a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6a1b      	ldr	r3, [r3, #32]
 800a832:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	697a      	ldr	r2, [r7, #20]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a844:	f023 0303 	bic.w	r3, r3, #3
 800a848:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	689a      	ldr	r2, [r3, #8]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	699b      	ldr	r3, [r3, #24]
 800a852:	021b      	lsls	r3, r3, #8
 800a854:	4313      	orrs	r3, r2
 800a856:	693a      	ldr	r2, [r7, #16]
 800a858:	4313      	orrs	r3, r2
 800a85a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a862:	f023 030c 	bic.w	r3, r3, #12
 800a866:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a86e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	68da      	ldr	r2, [r3, #12]
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	69db      	ldr	r3, [r3, #28]
 800a87c:	021b      	lsls	r3, r3, #8
 800a87e:	4313      	orrs	r3, r2
 800a880:	693a      	ldr	r2, [r7, #16]
 800a882:	4313      	orrs	r3, r2
 800a884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	011a      	lsls	r2, r3, #4
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	6a1b      	ldr	r3, [r3, #32]
 800a890:	031b      	lsls	r3, r3, #12
 800a892:	4313      	orrs	r3, r2
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	4313      	orrs	r3, r2
 800a898:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a8a0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a8a8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	685a      	ldr	r2, [r3, #4]
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	695b      	ldr	r3, [r3, #20]
 800a8b2:	011b      	lsls	r3, r3, #4
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3718      	adds	r7, #24
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	080063f1 	.word	0x080063f1

0800a914 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a924:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a92c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a934:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a93c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d110      	bne.n	800a966 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a944:	7bfb      	ldrb	r3, [r7, #15]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d102      	bne.n	800a950 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a94a:	7b7b      	ldrb	r3, [r7, #13]
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d001      	beq.n	800a954 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	e069      	b.n	800aa28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2202      	movs	r2, #2
 800a958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2202      	movs	r2, #2
 800a960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a964:	e031      	b.n	800a9ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	2b04      	cmp	r3, #4
 800a96a:	d110      	bne.n	800a98e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a96c:	7bbb      	ldrb	r3, [r7, #14]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d102      	bne.n	800a978 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a972:	7b3b      	ldrb	r3, [r7, #12]
 800a974:	2b01      	cmp	r3, #1
 800a976:	d001      	beq.n	800a97c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	e055      	b.n	800aa28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2202      	movs	r2, #2
 800a980:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2202      	movs	r2, #2
 800a988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a98c:	e01d      	b.n	800a9ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a98e:	7bfb      	ldrb	r3, [r7, #15]
 800a990:	2b01      	cmp	r3, #1
 800a992:	d108      	bne.n	800a9a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a994:	7bbb      	ldrb	r3, [r7, #14]
 800a996:	2b01      	cmp	r3, #1
 800a998:	d105      	bne.n	800a9a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a99a:	7b7b      	ldrb	r3, [r7, #13]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d102      	bne.n	800a9a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a9a0:	7b3b      	ldrb	r3, [r7, #12]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d001      	beq.n	800a9aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e03e      	b.n	800aa28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2202      	movs	r2, #2
 800a9ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2202      	movs	r2, #2
 800a9b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2202      	movs	r2, #2
 800a9be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2202      	movs	r2, #2
 800a9c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d003      	beq.n	800a9d8 <HAL_TIM_Encoder_Start+0xc4>
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	2b04      	cmp	r3, #4
 800a9d4:	d008      	beq.n	800a9e8 <HAL_TIM_Encoder_Start+0xd4>
 800a9d6:	e00f      	b.n	800a9f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	2100      	movs	r1, #0
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f001 f9fd 	bl	800bde0 <TIM_CCxChannelCmd>
      break;
 800a9e6:	e016      	b.n	800aa16 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	2104      	movs	r1, #4
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f001 f9f5 	bl	800bde0 <TIM_CCxChannelCmd>
      break;
 800a9f6:	e00e      	b.n	800aa16 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	2100      	movs	r1, #0
 800aa00:	4618      	mov	r0, r3
 800aa02:	f001 f9ed 	bl	800bde0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	2104      	movs	r1, #4
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f001 f9e6 	bl	800bde0 <TIM_CCxChannelCmd>
      break;
 800aa14:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f042 0201 	orr.w	r2, r2, #1
 800aa24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	f003 0302 	and.w	r3, r3, #2
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d026      	beq.n	800aaa0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f003 0302 	and.w	r3, r3, #2
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d021      	beq.n	800aaa0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f06f 0202 	mvn.w	r2, #2
 800aa64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	f003 0303 	and.w	r3, r3, #3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d005      	beq.n	800aa86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	4798      	blx	r3
 800aa84:	e009      	b.n	800aa9a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	f003 0304 	and.w	r3, r3, #4
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d026      	beq.n	800aaf8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f003 0304 	and.w	r3, r3, #4
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d021      	beq.n	800aaf8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f06f 0204 	mvn.w	r2, #4
 800aabc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2202      	movs	r2, #2
 800aac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	699b      	ldr	r3, [r3, #24]
 800aaca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d005      	beq.n	800aade <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	4798      	blx	r3
 800aadc:	e009      	b.n	800aaf2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	f003 0308 	and.w	r3, r3, #8
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d026      	beq.n	800ab50 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f003 0308 	and.w	r3, r3, #8
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d021      	beq.n	800ab50 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f06f 0208 	mvn.w	r2, #8
 800ab14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2204      	movs	r2, #4
 800ab1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	69db      	ldr	r3, [r3, #28]
 800ab22:	f003 0303 	and.w	r3, r3, #3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d005      	beq.n	800ab36 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	4798      	blx	r3
 800ab34:	e009      	b.n	800ab4a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	f003 0310 	and.w	r3, r3, #16
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d026      	beq.n	800aba8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f003 0310 	and.w	r3, r3, #16
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d021      	beq.n	800aba8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f06f 0210 	mvn.w	r2, #16
 800ab6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2208      	movs	r2, #8
 800ab72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	69db      	ldr	r3, [r3, #28]
 800ab7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d005      	beq.n	800ab8e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	4798      	blx	r3
 800ab8c:	e009      	b.n	800aba2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	f003 0301 	and.w	r3, r3, #1
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00e      	beq.n	800abd0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d009      	beq.n	800abd0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f06f 0201 	mvn.w	r2, #1
 800abc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d104      	bne.n	800abe4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00e      	beq.n	800ac02 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abea:	2b00      	cmp	r3, #0
 800abec:	d009      	beq.n	800ac02 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800abf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00e      	beq.n	800ac2a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d009      	beq.n	800ac2a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ac1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00e      	beq.n	800ac52 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d009      	beq.n	800ac52 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ac46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	f003 0320 	and.w	r3, r3, #32
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00e      	beq.n	800ac7a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f003 0320 	and.w	r3, r3, #32
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d009      	beq.n	800ac7a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f06f 0220 	mvn.w	r2, #32
 800ac6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00e      	beq.n	800aca2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d009      	beq.n	800aca2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800ac96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d00e      	beq.n	800acca <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d009      	beq.n	800acca <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800acbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00e      	beq.n	800acf2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d009      	beq.n	800acf2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800ace6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00e      	beq.n	800ad1a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d009      	beq.n	800ad1a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800ad0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad1a:	bf00      	nop
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
	...

0800ad24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b086      	sub	sp, #24
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad30:	2300      	movs	r3, #0
 800ad32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d101      	bne.n	800ad42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ad3e:	2302      	movs	r3, #2
 800ad40:	e0ff      	b.n	800af42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b14      	cmp	r3, #20
 800ad4e:	f200 80f0 	bhi.w	800af32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ad52:	a201      	add	r2, pc, #4	@ (adr r2, 800ad58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ad54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad58:	0800adad 	.word	0x0800adad
 800ad5c:	0800af33 	.word	0x0800af33
 800ad60:	0800af33 	.word	0x0800af33
 800ad64:	0800af33 	.word	0x0800af33
 800ad68:	0800aded 	.word	0x0800aded
 800ad6c:	0800af33 	.word	0x0800af33
 800ad70:	0800af33 	.word	0x0800af33
 800ad74:	0800af33 	.word	0x0800af33
 800ad78:	0800ae2f 	.word	0x0800ae2f
 800ad7c:	0800af33 	.word	0x0800af33
 800ad80:	0800af33 	.word	0x0800af33
 800ad84:	0800af33 	.word	0x0800af33
 800ad88:	0800ae6f 	.word	0x0800ae6f
 800ad8c:	0800af33 	.word	0x0800af33
 800ad90:	0800af33 	.word	0x0800af33
 800ad94:	0800af33 	.word	0x0800af33
 800ad98:	0800aeb1 	.word	0x0800aeb1
 800ad9c:	0800af33 	.word	0x0800af33
 800ada0:	0800af33 	.word	0x0800af33
 800ada4:	0800af33 	.word	0x0800af33
 800ada8:	0800aef1 	.word	0x0800aef1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68b9      	ldr	r1, [r7, #8]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f000 fc4e 	bl	800b654 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	699a      	ldr	r2, [r3, #24]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f042 0208 	orr.w	r2, r2, #8
 800adc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	699a      	ldr	r2, [r3, #24]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f022 0204 	bic.w	r2, r2, #4
 800add6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	6999      	ldr	r1, [r3, #24]
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	691a      	ldr	r2, [r3, #16]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	430a      	orrs	r2, r1
 800ade8:	619a      	str	r2, [r3, #24]
      break;
 800adea:	e0a5      	b.n	800af38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68b9      	ldr	r1, [r7, #8]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 fcc8 	bl	800b788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	699a      	ldr	r2, [r3, #24]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	699a      	ldr	r2, [r3, #24]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	6999      	ldr	r1, [r3, #24]
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	021a      	lsls	r2, r3, #8
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	430a      	orrs	r2, r1
 800ae2a:	619a      	str	r2, [r3, #24]
      break;
 800ae2c:	e084      	b.n	800af38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	68b9      	ldr	r1, [r7, #8]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 fd3b 	bl	800b8b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	69da      	ldr	r2, [r3, #28]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f042 0208 	orr.w	r2, r2, #8
 800ae48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	69da      	ldr	r2, [r3, #28]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f022 0204 	bic.w	r2, r2, #4
 800ae58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	69d9      	ldr	r1, [r3, #28]
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	691a      	ldr	r2, [r3, #16]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	430a      	orrs	r2, r1
 800ae6a:	61da      	str	r2, [r3, #28]
      break;
 800ae6c:	e064      	b.n	800af38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68b9      	ldr	r1, [r7, #8]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f000 fdad 	bl	800b9d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	69da      	ldr	r2, [r3, #28]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	69da      	ldr	r2, [r3, #28]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	69d9      	ldr	r1, [r3, #28]
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	691b      	ldr	r3, [r3, #16]
 800aea4:	021a      	lsls	r2, r3, #8
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	430a      	orrs	r2, r1
 800aeac:	61da      	str	r2, [r3, #28]
      break;
 800aeae:	e043      	b.n	800af38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68b9      	ldr	r1, [r7, #8]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 fe20 	bl	800bafc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f042 0208 	orr.w	r2, r2, #8
 800aeca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f022 0204 	bic.w	r2, r2, #4
 800aeda:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	691a      	ldr	r2, [r3, #16]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	430a      	orrs	r2, r1
 800aeec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800aeee:	e023      	b.n	800af38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	68b9      	ldr	r1, [r7, #8]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f000 fe6a 	bl	800bbd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	021a      	lsls	r2, r3, #8
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	430a      	orrs	r2, r1
 800af2e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800af30:	e002      	b.n	800af38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	75fb      	strb	r3, [r7, #23]
      break;
 800af36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800af40:	7dfb      	ldrb	r3, [r7, #23]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3718      	adds	r7, #24
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop

0800af4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af56:	2300      	movs	r3, #0
 800af58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af60:	2b01      	cmp	r3, #1
 800af62:	d101      	bne.n	800af68 <HAL_TIM_ConfigClockSource+0x1c>
 800af64:	2302      	movs	r3, #2
 800af66:	e0f6      	b.n	800b156 <HAL_TIM_ConfigClockSource+0x20a>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2202      	movs	r2, #2
 800af74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800af86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800af8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a6f      	ldr	r2, [pc, #444]	@ (800b160 <HAL_TIM_ConfigClockSource+0x214>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	f000 80c1 	beq.w	800b12a <HAL_TIM_ConfigClockSource+0x1de>
 800afa8:	4a6d      	ldr	r2, [pc, #436]	@ (800b160 <HAL_TIM_ConfigClockSource+0x214>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	f200 80c6 	bhi.w	800b13c <HAL_TIM_ConfigClockSource+0x1f0>
 800afb0:	4a6c      	ldr	r2, [pc, #432]	@ (800b164 <HAL_TIM_ConfigClockSource+0x218>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	f000 80b9 	beq.w	800b12a <HAL_TIM_ConfigClockSource+0x1de>
 800afb8:	4a6a      	ldr	r2, [pc, #424]	@ (800b164 <HAL_TIM_ConfigClockSource+0x218>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	f200 80be 	bhi.w	800b13c <HAL_TIM_ConfigClockSource+0x1f0>
 800afc0:	4a69      	ldr	r2, [pc, #420]	@ (800b168 <HAL_TIM_ConfigClockSource+0x21c>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	f000 80b1 	beq.w	800b12a <HAL_TIM_ConfigClockSource+0x1de>
 800afc8:	4a67      	ldr	r2, [pc, #412]	@ (800b168 <HAL_TIM_ConfigClockSource+0x21c>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	f200 80b6 	bhi.w	800b13c <HAL_TIM_ConfigClockSource+0x1f0>
 800afd0:	4a66      	ldr	r2, [pc, #408]	@ (800b16c <HAL_TIM_ConfigClockSource+0x220>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	f000 80a9 	beq.w	800b12a <HAL_TIM_ConfigClockSource+0x1de>
 800afd8:	4a64      	ldr	r2, [pc, #400]	@ (800b16c <HAL_TIM_ConfigClockSource+0x220>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	f200 80ae 	bhi.w	800b13c <HAL_TIM_ConfigClockSource+0x1f0>
 800afe0:	4a63      	ldr	r2, [pc, #396]	@ (800b170 <HAL_TIM_ConfigClockSource+0x224>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	f000 80a1 	beq.w	800b12a <HAL_TIM_ConfigClockSource+0x1de>
 800afe8:	4a61      	ldr	r2, [pc, #388]	@ (800b170 <HAL_TIM_ConfigClockSource+0x224>)
 800afea:	4293      	cmp	r3, r2
 800afec:	f200 80a6 	bhi.w	800b13c <HAL_TIM_ConfigClockSource+0x1f0>
 800aff0:	4a60      	ldr	r2, [pc, #384]	@ (800b174 <HAL_TIM_ConfigClockSource+0x228>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	f000 8099 	beq.w	800b12a <HAL_TIM_ConfigClockSource+0x1de>
 800aff8:	4a5e      	ldr	r2, [pc, #376]	@ (800b174 <HAL_TIM_ConfigClockSource+0x228>)
 800affa:	4293      	cmp	r3, r2
 800affc:	f200 809e 	bhi.w	800b13c <HAL_TIM_ConfigClockSource+0x1f0>
 800b000:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b004:	f000 8091 	beq.w	800b12a <HAL_TIM_ConfigClockSource+0x1de>
 800b008:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b00c:	f200 8096 	bhi.w	800b13c <HAL_TIM_ConfigClockSource+0x1f0>
 800b010:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b014:	f000 8089 	beq.w	800b12a <HAL_TIM_ConfigClockSource+0x1de>
 800b018:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b01c:	f200 808e 	bhi.w	800b13c <HAL_TIM_ConfigClockSource+0x1f0>
 800b020:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b024:	d03e      	beq.n	800b0a4 <HAL_TIM_ConfigClockSource+0x158>
 800b026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b02a:	f200 8087 	bhi.w	800b13c <HAL_TIM_ConfigClockSource+0x1f0>
 800b02e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b032:	f000 8086 	beq.w	800b142 <HAL_TIM_ConfigClockSource+0x1f6>
 800b036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b03a:	d87f      	bhi.n	800b13c <HAL_TIM_ConfigClockSource+0x1f0>
 800b03c:	2b70      	cmp	r3, #112	@ 0x70
 800b03e:	d01a      	beq.n	800b076 <HAL_TIM_ConfigClockSource+0x12a>
 800b040:	2b70      	cmp	r3, #112	@ 0x70
 800b042:	d87b      	bhi.n	800b13c <HAL_TIM_ConfigClockSource+0x1f0>
 800b044:	2b60      	cmp	r3, #96	@ 0x60
 800b046:	d050      	beq.n	800b0ea <HAL_TIM_ConfigClockSource+0x19e>
 800b048:	2b60      	cmp	r3, #96	@ 0x60
 800b04a:	d877      	bhi.n	800b13c <HAL_TIM_ConfigClockSource+0x1f0>
 800b04c:	2b50      	cmp	r3, #80	@ 0x50
 800b04e:	d03c      	beq.n	800b0ca <HAL_TIM_ConfigClockSource+0x17e>
 800b050:	2b50      	cmp	r3, #80	@ 0x50
 800b052:	d873      	bhi.n	800b13c <HAL_TIM_ConfigClockSource+0x1f0>
 800b054:	2b40      	cmp	r3, #64	@ 0x40
 800b056:	d058      	beq.n	800b10a <HAL_TIM_ConfigClockSource+0x1be>
 800b058:	2b40      	cmp	r3, #64	@ 0x40
 800b05a:	d86f      	bhi.n	800b13c <HAL_TIM_ConfigClockSource+0x1f0>
 800b05c:	2b30      	cmp	r3, #48	@ 0x30
 800b05e:	d064      	beq.n	800b12a <HAL_TIM_ConfigClockSource+0x1de>
 800b060:	2b30      	cmp	r3, #48	@ 0x30
 800b062:	d86b      	bhi.n	800b13c <HAL_TIM_ConfigClockSource+0x1f0>
 800b064:	2b20      	cmp	r3, #32
 800b066:	d060      	beq.n	800b12a <HAL_TIM_ConfigClockSource+0x1de>
 800b068:	2b20      	cmp	r3, #32
 800b06a:	d867      	bhi.n	800b13c <HAL_TIM_ConfigClockSource+0x1f0>
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d05c      	beq.n	800b12a <HAL_TIM_ConfigClockSource+0x1de>
 800b070:	2b10      	cmp	r3, #16
 800b072:	d05a      	beq.n	800b12a <HAL_TIM_ConfigClockSource+0x1de>
 800b074:	e062      	b.n	800b13c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b086:	f000 fe8b 	bl	800bda0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b098:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	609a      	str	r2, [r3, #8]
      break;
 800b0a2:	e04f      	b.n	800b144 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b0b4:	f000 fe74 	bl	800bda0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	689a      	ldr	r2, [r3, #8]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b0c6:	609a      	str	r2, [r3, #8]
      break;
 800b0c8:	e03c      	b.n	800b144 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	f000 fde6 	bl	800bca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2150      	movs	r1, #80	@ 0x50
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 fe3f 	bl	800bd66 <TIM_ITRx_SetConfig>
      break;
 800b0e8:	e02c      	b.n	800b144 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	f000 fe05 	bl	800bd06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2160      	movs	r1, #96	@ 0x60
 800b102:	4618      	mov	r0, r3
 800b104:	f000 fe2f 	bl	800bd66 <TIM_ITRx_SetConfig>
      break;
 800b108:	e01c      	b.n	800b144 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b116:	461a      	mov	r2, r3
 800b118:	f000 fdc6 	bl	800bca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2140      	movs	r1, #64	@ 0x40
 800b122:	4618      	mov	r0, r3
 800b124:	f000 fe1f 	bl	800bd66 <TIM_ITRx_SetConfig>
      break;
 800b128:	e00c      	b.n	800b144 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4619      	mov	r1, r3
 800b134:	4610      	mov	r0, r2
 800b136:	f000 fe16 	bl	800bd66 <TIM_ITRx_SetConfig>
      break;
 800b13a:	e003      	b.n	800b144 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	73fb      	strb	r3, [r7, #15]
      break;
 800b140:	e000      	b.n	800b144 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800b142:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b154:	7bfb      	ldrb	r3, [r7, #15]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	00100070 	.word	0x00100070
 800b164:	00100060 	.word	0x00100060
 800b168:	00100050 	.word	0x00100050
 800b16c:	00100040 	.word	0x00100040
 800b170:	00100030 	.word	0x00100030
 800b174:	00100020 	.word	0x00100020

0800b178 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b194:	bf00      	nop
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b1a8:	bf00      	nop
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b1bc:	bf00      	nop
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1d0:	bf00      	nop
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b1e4:	bf00      	nop
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b20c:	bf00      	nop
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b087      	sub	sp, #28
 800b230:	af00      	add	r7, sp, #0
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	460b      	mov	r3, r1
 800b236:	607a      	str	r2, [r7, #4]
 800b238:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b23a:	2300      	movs	r3, #0
 800b23c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d101      	bne.n	800b248 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800b244:	2301      	movs	r3, #1
 800b246:	e14a      	b.n	800b4de <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	2b01      	cmp	r3, #1
 800b252:	f040 80dd 	bne.w	800b410 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800b256:	7afb      	ldrb	r3, [r7, #11]
 800b258:	2b1f      	cmp	r3, #31
 800b25a:	f200 80d6 	bhi.w	800b40a <HAL_TIM_RegisterCallback+0x1de>
 800b25e:	a201      	add	r2, pc, #4	@ (adr r2, 800b264 <HAL_TIM_RegisterCallback+0x38>)
 800b260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b264:	0800b2e5 	.word	0x0800b2e5
 800b268:	0800b2ed 	.word	0x0800b2ed
 800b26c:	0800b2f5 	.word	0x0800b2f5
 800b270:	0800b2fd 	.word	0x0800b2fd
 800b274:	0800b305 	.word	0x0800b305
 800b278:	0800b30d 	.word	0x0800b30d
 800b27c:	0800b315 	.word	0x0800b315
 800b280:	0800b31d 	.word	0x0800b31d
 800b284:	0800b325 	.word	0x0800b325
 800b288:	0800b32d 	.word	0x0800b32d
 800b28c:	0800b335 	.word	0x0800b335
 800b290:	0800b33d 	.word	0x0800b33d
 800b294:	0800b345 	.word	0x0800b345
 800b298:	0800b34d 	.word	0x0800b34d
 800b29c:	0800b357 	.word	0x0800b357
 800b2a0:	0800b361 	.word	0x0800b361
 800b2a4:	0800b36b 	.word	0x0800b36b
 800b2a8:	0800b375 	.word	0x0800b375
 800b2ac:	0800b37f 	.word	0x0800b37f
 800b2b0:	0800b389 	.word	0x0800b389
 800b2b4:	0800b393 	.word	0x0800b393
 800b2b8:	0800b39d 	.word	0x0800b39d
 800b2bc:	0800b3a7 	.word	0x0800b3a7
 800b2c0:	0800b3b1 	.word	0x0800b3b1
 800b2c4:	0800b3bb 	.word	0x0800b3bb
 800b2c8:	0800b3c5 	.word	0x0800b3c5
 800b2cc:	0800b3cf 	.word	0x0800b3cf
 800b2d0:	0800b3d9 	.word	0x0800b3d9
 800b2d4:	0800b3e3 	.word	0x0800b3e3
 800b2d8:	0800b3ed 	.word	0x0800b3ed
 800b2dc:	0800b3f7 	.word	0x0800b3f7
 800b2e0:	0800b401 	.word	0x0800b401
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b2ea:	e0f7      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b2f2:	e0f3      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b2fa:	e0ef      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b302:	e0eb      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b30a:	e0e7      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b312:	e0e3      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b31a:	e0df      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b322:	e0db      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b32a:	e0d7      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b332:	e0d3      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b33a:	e0cf      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b342:	e0cb      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b34a:	e0c7      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b354:	e0c2      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b35e:	e0bd      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800b368:	e0b8      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800b372:	e0b3      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800b37c:	e0ae      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800b386:	e0a9      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800b390:	e0a4      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800b39a:	e09f      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800b3a4:	e09a      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800b3ae:	e095      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800b3b8:	e090      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800b3c2:	e08b      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800b3cc:	e086      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800b3d6:	e081      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800b3e0:	e07c      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800b3ea:	e077      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800b3f4:	e072      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b3fe:	e06d      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b408:	e068      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	75fb      	strb	r3, [r7, #23]
        break;
 800b40e:	e065      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b416:	b2db      	uxtb	r3, r3
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d15d      	bne.n	800b4d8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800b41c:	7afb      	ldrb	r3, [r7, #11]
 800b41e:	2b0d      	cmp	r3, #13
 800b420:	d857      	bhi.n	800b4d2 <HAL_TIM_RegisterCallback+0x2a6>
 800b422:	a201      	add	r2, pc, #4	@ (adr r2, 800b428 <HAL_TIM_RegisterCallback+0x1fc>)
 800b424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b428:	0800b461 	.word	0x0800b461
 800b42c:	0800b469 	.word	0x0800b469
 800b430:	0800b471 	.word	0x0800b471
 800b434:	0800b479 	.word	0x0800b479
 800b438:	0800b481 	.word	0x0800b481
 800b43c:	0800b489 	.word	0x0800b489
 800b440:	0800b491 	.word	0x0800b491
 800b444:	0800b499 	.word	0x0800b499
 800b448:	0800b4a1 	.word	0x0800b4a1
 800b44c:	0800b4a9 	.word	0x0800b4a9
 800b450:	0800b4b1 	.word	0x0800b4b1
 800b454:	0800b4b9 	.word	0x0800b4b9
 800b458:	0800b4c1 	.word	0x0800b4c1
 800b45c:	0800b4c9 	.word	0x0800b4c9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b466:	e039      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b46e:	e035      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b476:	e031      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b47e:	e02d      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b486:	e029      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b48e:	e025      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b496:	e021      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b49e:	e01d      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b4a6:	e019      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b4ae:	e015      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b4b6:	e011      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b4be:	e00d      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b4c6:	e009      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b4d0:	e004      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	75fb      	strb	r3, [r7, #23]
        break;
 800b4d6:	e001      	b.n	800b4dc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b4dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	371c      	adds	r7, #28
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop

0800b4ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	4a4c      	ldr	r2, [pc, #304]	@ (800b630 <TIM_Base_SetConfig+0x144>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d017      	beq.n	800b534 <TIM_Base_SetConfig+0x48>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b50a:	d013      	beq.n	800b534 <TIM_Base_SetConfig+0x48>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	4a49      	ldr	r2, [pc, #292]	@ (800b634 <TIM_Base_SetConfig+0x148>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d00f      	beq.n	800b534 <TIM_Base_SetConfig+0x48>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	4a48      	ldr	r2, [pc, #288]	@ (800b638 <TIM_Base_SetConfig+0x14c>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d00b      	beq.n	800b534 <TIM_Base_SetConfig+0x48>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	4a47      	ldr	r2, [pc, #284]	@ (800b63c <TIM_Base_SetConfig+0x150>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d007      	beq.n	800b534 <TIM_Base_SetConfig+0x48>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4a46      	ldr	r2, [pc, #280]	@ (800b640 <TIM_Base_SetConfig+0x154>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d003      	beq.n	800b534 <TIM_Base_SetConfig+0x48>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a45      	ldr	r2, [pc, #276]	@ (800b644 <TIM_Base_SetConfig+0x158>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d108      	bne.n	800b546 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b53a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	4313      	orrs	r3, r2
 800b544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4a39      	ldr	r2, [pc, #228]	@ (800b630 <TIM_Base_SetConfig+0x144>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d023      	beq.n	800b596 <TIM_Base_SetConfig+0xaa>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b554:	d01f      	beq.n	800b596 <TIM_Base_SetConfig+0xaa>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	4a36      	ldr	r2, [pc, #216]	@ (800b634 <TIM_Base_SetConfig+0x148>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d01b      	beq.n	800b596 <TIM_Base_SetConfig+0xaa>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4a35      	ldr	r2, [pc, #212]	@ (800b638 <TIM_Base_SetConfig+0x14c>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d017      	beq.n	800b596 <TIM_Base_SetConfig+0xaa>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4a34      	ldr	r2, [pc, #208]	@ (800b63c <TIM_Base_SetConfig+0x150>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d013      	beq.n	800b596 <TIM_Base_SetConfig+0xaa>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4a33      	ldr	r2, [pc, #204]	@ (800b640 <TIM_Base_SetConfig+0x154>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d00f      	beq.n	800b596 <TIM_Base_SetConfig+0xaa>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	4a33      	ldr	r2, [pc, #204]	@ (800b648 <TIM_Base_SetConfig+0x15c>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d00b      	beq.n	800b596 <TIM_Base_SetConfig+0xaa>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	4a32      	ldr	r2, [pc, #200]	@ (800b64c <TIM_Base_SetConfig+0x160>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d007      	beq.n	800b596 <TIM_Base_SetConfig+0xaa>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4a31      	ldr	r2, [pc, #196]	@ (800b650 <TIM_Base_SetConfig+0x164>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d003      	beq.n	800b596 <TIM_Base_SetConfig+0xaa>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a2c      	ldr	r2, [pc, #176]	@ (800b644 <TIM_Base_SetConfig+0x158>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d108      	bne.n	800b5a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b59c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	695b      	ldr	r3, [r3, #20]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	689a      	ldr	r2, [r3, #8]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a18      	ldr	r2, [pc, #96]	@ (800b630 <TIM_Base_SetConfig+0x144>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d013      	beq.n	800b5fc <TIM_Base_SetConfig+0x110>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a1a      	ldr	r2, [pc, #104]	@ (800b640 <TIM_Base_SetConfig+0x154>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d00f      	beq.n	800b5fc <TIM_Base_SetConfig+0x110>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a1a      	ldr	r2, [pc, #104]	@ (800b648 <TIM_Base_SetConfig+0x15c>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d00b      	beq.n	800b5fc <TIM_Base_SetConfig+0x110>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a19      	ldr	r2, [pc, #100]	@ (800b64c <TIM_Base_SetConfig+0x160>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d007      	beq.n	800b5fc <TIM_Base_SetConfig+0x110>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a18      	ldr	r2, [pc, #96]	@ (800b650 <TIM_Base_SetConfig+0x164>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d003      	beq.n	800b5fc <TIM_Base_SetConfig+0x110>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4a13      	ldr	r2, [pc, #76]	@ (800b644 <TIM_Base_SetConfig+0x158>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d103      	bne.n	800b604 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	691a      	ldr	r2, [r3, #16]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2201      	movs	r2, #1
 800b608:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	f003 0301 	and.w	r3, r3, #1
 800b612:	2b01      	cmp	r3, #1
 800b614:	d105      	bne.n	800b622 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	f023 0201 	bic.w	r2, r3, #1
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	611a      	str	r2, [r3, #16]
  }
}
 800b622:	bf00      	nop
 800b624:	3714      	adds	r7, #20
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr
 800b62e:	bf00      	nop
 800b630:	40012c00 	.word	0x40012c00
 800b634:	40000400 	.word	0x40000400
 800b638:	40000800 	.word	0x40000800
 800b63c:	40000c00 	.word	0x40000c00
 800b640:	40013400 	.word	0x40013400
 800b644:	40015000 	.word	0x40015000
 800b648:	40014000 	.word	0x40014000
 800b64c:	40014400 	.word	0x40014400
 800b650:	40014800 	.word	0x40014800

0800b654 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b654:	b480      	push	{r7}
 800b656:	b087      	sub	sp, #28
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a1b      	ldr	r3, [r3, #32]
 800b668:	f023 0201 	bic.w	r2, r3, #1
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	699b      	ldr	r3, [r3, #24]
 800b67a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f023 0303 	bic.w	r3, r3, #3
 800b68e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	4313      	orrs	r3, r2
 800b698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f023 0302 	bic.w	r3, r3, #2
 800b6a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a30      	ldr	r2, [pc, #192]	@ (800b770 <TIM_OC1_SetConfig+0x11c>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d013      	beq.n	800b6dc <TIM_OC1_SetConfig+0x88>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4a2f      	ldr	r2, [pc, #188]	@ (800b774 <TIM_OC1_SetConfig+0x120>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d00f      	beq.n	800b6dc <TIM_OC1_SetConfig+0x88>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	4a2e      	ldr	r2, [pc, #184]	@ (800b778 <TIM_OC1_SetConfig+0x124>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d00b      	beq.n	800b6dc <TIM_OC1_SetConfig+0x88>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4a2d      	ldr	r2, [pc, #180]	@ (800b77c <TIM_OC1_SetConfig+0x128>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d007      	beq.n	800b6dc <TIM_OC1_SetConfig+0x88>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a2c      	ldr	r2, [pc, #176]	@ (800b780 <TIM_OC1_SetConfig+0x12c>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d003      	beq.n	800b6dc <TIM_OC1_SetConfig+0x88>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4a2b      	ldr	r2, [pc, #172]	@ (800b784 <TIM_OC1_SetConfig+0x130>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d10c      	bne.n	800b6f6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	f023 0308 	bic.w	r3, r3, #8
 800b6e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	697a      	ldr	r2, [r7, #20]
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	f023 0304 	bic.w	r3, r3, #4
 800b6f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4a1d      	ldr	r2, [pc, #116]	@ (800b770 <TIM_OC1_SetConfig+0x11c>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d013      	beq.n	800b726 <TIM_OC1_SetConfig+0xd2>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4a1c      	ldr	r2, [pc, #112]	@ (800b774 <TIM_OC1_SetConfig+0x120>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d00f      	beq.n	800b726 <TIM_OC1_SetConfig+0xd2>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	4a1b      	ldr	r2, [pc, #108]	@ (800b778 <TIM_OC1_SetConfig+0x124>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d00b      	beq.n	800b726 <TIM_OC1_SetConfig+0xd2>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4a1a      	ldr	r2, [pc, #104]	@ (800b77c <TIM_OC1_SetConfig+0x128>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d007      	beq.n	800b726 <TIM_OC1_SetConfig+0xd2>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4a19      	ldr	r2, [pc, #100]	@ (800b780 <TIM_OC1_SetConfig+0x12c>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d003      	beq.n	800b726 <TIM_OC1_SetConfig+0xd2>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	4a18      	ldr	r2, [pc, #96]	@ (800b784 <TIM_OC1_SetConfig+0x130>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d111      	bne.n	800b74a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b72c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	695b      	ldr	r3, [r3, #20]
 800b73a:	693a      	ldr	r2, [r7, #16]
 800b73c:	4313      	orrs	r3, r2
 800b73e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	699b      	ldr	r3, [r3, #24]
 800b744:	693a      	ldr	r2, [r7, #16]
 800b746:	4313      	orrs	r3, r2
 800b748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	693a      	ldr	r2, [r7, #16]
 800b74e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	685a      	ldr	r2, [r3, #4]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	697a      	ldr	r2, [r7, #20]
 800b762:	621a      	str	r2, [r3, #32]
}
 800b764:	bf00      	nop
 800b766:	371c      	adds	r7, #28
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr
 800b770:	40012c00 	.word	0x40012c00
 800b774:	40013400 	.word	0x40013400
 800b778:	40014000 	.word	0x40014000
 800b77c:	40014400 	.word	0x40014400
 800b780:	40014800 	.word	0x40014800
 800b784:	40015000 	.word	0x40015000

0800b788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b788:	b480      	push	{r7}
 800b78a:	b087      	sub	sp, #28
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a1b      	ldr	r3, [r3, #32]
 800b796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6a1b      	ldr	r3, [r3, #32]
 800b79c:	f023 0210 	bic.w	r2, r3, #16
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	699b      	ldr	r3, [r3, #24]
 800b7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b7b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b7c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	021b      	lsls	r3, r3, #8
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	f023 0320 	bic.w	r3, r3, #32
 800b7d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	011b      	lsls	r3, r3, #4
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a2c      	ldr	r2, [pc, #176]	@ (800b898 <TIM_OC2_SetConfig+0x110>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d007      	beq.n	800b7fc <TIM_OC2_SetConfig+0x74>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a2b      	ldr	r2, [pc, #172]	@ (800b89c <TIM_OC2_SetConfig+0x114>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d003      	beq.n	800b7fc <TIM_OC2_SetConfig+0x74>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	4a2a      	ldr	r2, [pc, #168]	@ (800b8a0 <TIM_OC2_SetConfig+0x118>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d10d      	bne.n	800b818 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	011b      	lsls	r3, r3, #4
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	4313      	orrs	r3, r2
 800b80e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b816:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a1f      	ldr	r2, [pc, #124]	@ (800b898 <TIM_OC2_SetConfig+0x110>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d013      	beq.n	800b848 <TIM_OC2_SetConfig+0xc0>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4a1e      	ldr	r2, [pc, #120]	@ (800b89c <TIM_OC2_SetConfig+0x114>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d00f      	beq.n	800b848 <TIM_OC2_SetConfig+0xc0>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a1e      	ldr	r2, [pc, #120]	@ (800b8a4 <TIM_OC2_SetConfig+0x11c>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d00b      	beq.n	800b848 <TIM_OC2_SetConfig+0xc0>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4a1d      	ldr	r2, [pc, #116]	@ (800b8a8 <TIM_OC2_SetConfig+0x120>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d007      	beq.n	800b848 <TIM_OC2_SetConfig+0xc0>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a1c      	ldr	r2, [pc, #112]	@ (800b8ac <TIM_OC2_SetConfig+0x124>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d003      	beq.n	800b848 <TIM_OC2_SetConfig+0xc0>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a17      	ldr	r2, [pc, #92]	@ (800b8a0 <TIM_OC2_SetConfig+0x118>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d113      	bne.n	800b870 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b84e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b856:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	695b      	ldr	r3, [r3, #20]
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	4313      	orrs	r3, r2
 800b862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	699b      	ldr	r3, [r3, #24]
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	693a      	ldr	r2, [r7, #16]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	685a      	ldr	r2, [r3, #4]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	621a      	str	r2, [r3, #32]
}
 800b88a:	bf00      	nop
 800b88c:	371c      	adds	r7, #28
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	40012c00 	.word	0x40012c00
 800b89c:	40013400 	.word	0x40013400
 800b8a0:	40015000 	.word	0x40015000
 800b8a4:	40014000 	.word	0x40014000
 800b8a8:	40014400 	.word	0x40014400
 800b8ac:	40014800 	.word	0x40014800

0800b8b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b087      	sub	sp, #28
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a1b      	ldr	r3, [r3, #32]
 800b8be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6a1b      	ldr	r3, [r3, #32]
 800b8c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	69db      	ldr	r3, [r3, #28]
 800b8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b8de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f023 0303 	bic.w	r3, r3, #3
 800b8ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b8fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	021b      	lsls	r3, r3, #8
 800b904:	697a      	ldr	r2, [r7, #20]
 800b906:	4313      	orrs	r3, r2
 800b908:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	4a2b      	ldr	r2, [pc, #172]	@ (800b9bc <TIM_OC3_SetConfig+0x10c>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d007      	beq.n	800b922 <TIM_OC3_SetConfig+0x72>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4a2a      	ldr	r2, [pc, #168]	@ (800b9c0 <TIM_OC3_SetConfig+0x110>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d003      	beq.n	800b922 <TIM_OC3_SetConfig+0x72>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	4a29      	ldr	r2, [pc, #164]	@ (800b9c4 <TIM_OC3_SetConfig+0x114>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d10d      	bne.n	800b93e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	021b      	lsls	r3, r3, #8
 800b930:	697a      	ldr	r2, [r7, #20]
 800b932:	4313      	orrs	r3, r2
 800b934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b93c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	4a1e      	ldr	r2, [pc, #120]	@ (800b9bc <TIM_OC3_SetConfig+0x10c>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d013      	beq.n	800b96e <TIM_OC3_SetConfig+0xbe>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	4a1d      	ldr	r2, [pc, #116]	@ (800b9c0 <TIM_OC3_SetConfig+0x110>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d00f      	beq.n	800b96e <TIM_OC3_SetConfig+0xbe>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	4a1d      	ldr	r2, [pc, #116]	@ (800b9c8 <TIM_OC3_SetConfig+0x118>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d00b      	beq.n	800b96e <TIM_OC3_SetConfig+0xbe>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	4a1c      	ldr	r2, [pc, #112]	@ (800b9cc <TIM_OC3_SetConfig+0x11c>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d007      	beq.n	800b96e <TIM_OC3_SetConfig+0xbe>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	4a1b      	ldr	r2, [pc, #108]	@ (800b9d0 <TIM_OC3_SetConfig+0x120>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d003      	beq.n	800b96e <TIM_OC3_SetConfig+0xbe>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	4a16      	ldr	r2, [pc, #88]	@ (800b9c4 <TIM_OC3_SetConfig+0x114>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d113      	bne.n	800b996 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b97c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	695b      	ldr	r3, [r3, #20]
 800b982:	011b      	lsls	r3, r3, #4
 800b984:	693a      	ldr	r2, [r7, #16]
 800b986:	4313      	orrs	r3, r2
 800b988:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	699b      	ldr	r3, [r3, #24]
 800b98e:	011b      	lsls	r3, r3, #4
 800b990:	693a      	ldr	r2, [r7, #16]
 800b992:	4313      	orrs	r3, r2
 800b994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	693a      	ldr	r2, [r7, #16]
 800b99a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	68fa      	ldr	r2, [r7, #12]
 800b9a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	685a      	ldr	r2, [r3, #4]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	697a      	ldr	r2, [r7, #20]
 800b9ae:	621a      	str	r2, [r3, #32]
}
 800b9b0:	bf00      	nop
 800b9b2:	371c      	adds	r7, #28
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr
 800b9bc:	40012c00 	.word	0x40012c00
 800b9c0:	40013400 	.word	0x40013400
 800b9c4:	40015000 	.word	0x40015000
 800b9c8:	40014000 	.word	0x40014000
 800b9cc:	40014400 	.word	0x40014400
 800b9d0:	40014800 	.word	0x40014800

0800b9d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b087      	sub	sp, #28
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6a1b      	ldr	r3, [r3, #32]
 800b9e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6a1b      	ldr	r3, [r3, #32]
 800b9e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	69db      	ldr	r3, [r3, #28]
 800b9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ba02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	021b      	lsls	r3, r3, #8
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ba22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	031b      	lsls	r3, r3, #12
 800ba2a:	697a      	ldr	r2, [r7, #20]
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4a2c      	ldr	r2, [pc, #176]	@ (800bae4 <TIM_OC4_SetConfig+0x110>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d007      	beq.n	800ba48 <TIM_OC4_SetConfig+0x74>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4a2b      	ldr	r2, [pc, #172]	@ (800bae8 <TIM_OC4_SetConfig+0x114>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d003      	beq.n	800ba48 <TIM_OC4_SetConfig+0x74>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a2a      	ldr	r2, [pc, #168]	@ (800baec <TIM_OC4_SetConfig+0x118>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d10d      	bne.n	800ba64 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ba4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	031b      	lsls	r3, r3, #12
 800ba56:	697a      	ldr	r2, [r7, #20]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	4a1f      	ldr	r2, [pc, #124]	@ (800bae4 <TIM_OC4_SetConfig+0x110>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d013      	beq.n	800ba94 <TIM_OC4_SetConfig+0xc0>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	4a1e      	ldr	r2, [pc, #120]	@ (800bae8 <TIM_OC4_SetConfig+0x114>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d00f      	beq.n	800ba94 <TIM_OC4_SetConfig+0xc0>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4a1e      	ldr	r2, [pc, #120]	@ (800baf0 <TIM_OC4_SetConfig+0x11c>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d00b      	beq.n	800ba94 <TIM_OC4_SetConfig+0xc0>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	4a1d      	ldr	r2, [pc, #116]	@ (800baf4 <TIM_OC4_SetConfig+0x120>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d007      	beq.n	800ba94 <TIM_OC4_SetConfig+0xc0>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4a1c      	ldr	r2, [pc, #112]	@ (800baf8 <TIM_OC4_SetConfig+0x124>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d003      	beq.n	800ba94 <TIM_OC4_SetConfig+0xc0>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4a17      	ldr	r2, [pc, #92]	@ (800baec <TIM_OC4_SetConfig+0x118>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d113      	bne.n	800babc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba9a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800baa2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	695b      	ldr	r3, [r3, #20]
 800baa8:	019b      	lsls	r3, r3, #6
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	4313      	orrs	r3, r2
 800baae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	699b      	ldr	r3, [r3, #24]
 800bab4:	019b      	lsls	r3, r3, #6
 800bab6:	693a      	ldr	r2, [r7, #16]
 800bab8:	4313      	orrs	r3, r2
 800baba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	693a      	ldr	r2, [r7, #16]
 800bac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	685a      	ldr	r2, [r3, #4]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	697a      	ldr	r2, [r7, #20]
 800bad4:	621a      	str	r2, [r3, #32]
}
 800bad6:	bf00      	nop
 800bad8:	371c      	adds	r7, #28
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr
 800bae2:	bf00      	nop
 800bae4:	40012c00 	.word	0x40012c00
 800bae8:	40013400 	.word	0x40013400
 800baec:	40015000 	.word	0x40015000
 800baf0:	40014000 	.word	0x40014000
 800baf4:	40014400 	.word	0x40014400
 800baf8:	40014800 	.word	0x40014800

0800bafc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b087      	sub	sp, #28
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6a1b      	ldr	r3, [r3, #32]
 800bb0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6a1b      	ldr	r3, [r3, #32]
 800bb10:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bb40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	041b      	lsls	r3, r3, #16
 800bb48:	693a      	ldr	r2, [r7, #16]
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4a19      	ldr	r2, [pc, #100]	@ (800bbb8 <TIM_OC5_SetConfig+0xbc>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d013      	beq.n	800bb7e <TIM_OC5_SetConfig+0x82>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	4a18      	ldr	r2, [pc, #96]	@ (800bbbc <TIM_OC5_SetConfig+0xc0>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d00f      	beq.n	800bb7e <TIM_OC5_SetConfig+0x82>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4a17      	ldr	r2, [pc, #92]	@ (800bbc0 <TIM_OC5_SetConfig+0xc4>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d00b      	beq.n	800bb7e <TIM_OC5_SetConfig+0x82>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4a16      	ldr	r2, [pc, #88]	@ (800bbc4 <TIM_OC5_SetConfig+0xc8>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d007      	beq.n	800bb7e <TIM_OC5_SetConfig+0x82>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4a15      	ldr	r2, [pc, #84]	@ (800bbc8 <TIM_OC5_SetConfig+0xcc>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d003      	beq.n	800bb7e <TIM_OC5_SetConfig+0x82>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	4a14      	ldr	r2, [pc, #80]	@ (800bbcc <TIM_OC5_SetConfig+0xd0>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d109      	bne.n	800bb92 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	695b      	ldr	r3, [r3, #20]
 800bb8a:	021b      	lsls	r3, r3, #8
 800bb8c:	697a      	ldr	r2, [r7, #20]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	697a      	ldr	r2, [r7, #20]
 800bb96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	685a      	ldr	r2, [r3, #4]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	693a      	ldr	r2, [r7, #16]
 800bbaa:	621a      	str	r2, [r3, #32]
}
 800bbac:	bf00      	nop
 800bbae:	371c      	adds	r7, #28
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	40012c00 	.word	0x40012c00
 800bbbc:	40013400 	.word	0x40013400
 800bbc0:	40014000 	.word	0x40014000
 800bbc4:	40014400 	.word	0x40014400
 800bbc8:	40014800 	.word	0x40014800
 800bbcc:	40015000 	.word	0x40015000

0800bbd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b087      	sub	sp, #28
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a1b      	ldr	r3, [r3, #32]
 800bbe4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bbfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	021b      	lsls	r3, r3, #8
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bc16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	051b      	lsls	r3, r3, #20
 800bc1e:	693a      	ldr	r2, [r7, #16]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4a1a      	ldr	r2, [pc, #104]	@ (800bc90 <TIM_OC6_SetConfig+0xc0>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d013      	beq.n	800bc54 <TIM_OC6_SetConfig+0x84>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4a19      	ldr	r2, [pc, #100]	@ (800bc94 <TIM_OC6_SetConfig+0xc4>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d00f      	beq.n	800bc54 <TIM_OC6_SetConfig+0x84>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	4a18      	ldr	r2, [pc, #96]	@ (800bc98 <TIM_OC6_SetConfig+0xc8>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d00b      	beq.n	800bc54 <TIM_OC6_SetConfig+0x84>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	4a17      	ldr	r2, [pc, #92]	@ (800bc9c <TIM_OC6_SetConfig+0xcc>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d007      	beq.n	800bc54 <TIM_OC6_SetConfig+0x84>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4a16      	ldr	r2, [pc, #88]	@ (800bca0 <TIM_OC6_SetConfig+0xd0>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d003      	beq.n	800bc54 <TIM_OC6_SetConfig+0x84>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4a15      	ldr	r2, [pc, #84]	@ (800bca4 <TIM_OC6_SetConfig+0xd4>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d109      	bne.n	800bc68 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bc5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	695b      	ldr	r3, [r3, #20]
 800bc60:	029b      	lsls	r3, r3, #10
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	4313      	orrs	r3, r2
 800bc66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	697a      	ldr	r2, [r7, #20]
 800bc6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	68fa      	ldr	r2, [r7, #12]
 800bc72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	685a      	ldr	r2, [r3, #4]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	693a      	ldr	r2, [r7, #16]
 800bc80:	621a      	str	r2, [r3, #32]
}
 800bc82:	bf00      	nop
 800bc84:	371c      	adds	r7, #28
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop
 800bc90:	40012c00 	.word	0x40012c00
 800bc94:	40013400 	.word	0x40013400
 800bc98:	40014000 	.word	0x40014000
 800bc9c:	40014400 	.word	0x40014400
 800bca0:	40014800 	.word	0x40014800
 800bca4:	40015000 	.word	0x40015000

0800bca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b087      	sub	sp, #28
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6a1b      	ldr	r3, [r3, #32]
 800bcb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	6a1b      	ldr	r3, [r3, #32]
 800bcbe:	f023 0201 	bic.w	r2, r3, #1
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	699b      	ldr	r3, [r3, #24]
 800bcca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bcd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	011b      	lsls	r3, r3, #4
 800bcd8:	693a      	ldr	r2, [r7, #16]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	f023 030a 	bic.w	r3, r3, #10
 800bce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bce6:	697a      	ldr	r2, [r7, #20]
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	4313      	orrs	r3, r2
 800bcec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	693a      	ldr	r2, [r7, #16]
 800bcf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	697a      	ldr	r2, [r7, #20]
 800bcf8:	621a      	str	r2, [r3, #32]
}
 800bcfa:	bf00      	nop
 800bcfc:	371c      	adds	r7, #28
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd06:	b480      	push	{r7}
 800bd08:	b087      	sub	sp, #28
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	60f8      	str	r0, [r7, #12]
 800bd0e:	60b9      	str	r1, [r7, #8]
 800bd10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6a1b      	ldr	r3, [r3, #32]
 800bd16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6a1b      	ldr	r3, [r3, #32]
 800bd1c:	f023 0210 	bic.w	r2, r3, #16
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bd30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	031b      	lsls	r3, r3, #12
 800bd36:	693a      	ldr	r2, [r7, #16]
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bd42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	011b      	lsls	r3, r3, #4
 800bd48:	697a      	ldr	r2, [r7, #20]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	693a      	ldr	r2, [r7, #16]
 800bd52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	697a      	ldr	r2, [r7, #20]
 800bd58:	621a      	str	r2, [r3, #32]
}
 800bd5a:	bf00      	nop
 800bd5c:	371c      	adds	r7, #28
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd66:	b480      	push	{r7}
 800bd68:	b085      	sub	sp, #20
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bd7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bd82:	683a      	ldr	r2, [r7, #0]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	4313      	orrs	r3, r2
 800bd88:	f043 0307 	orr.w	r3, r3, #7
 800bd8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	609a      	str	r2, [r3, #8]
}
 800bd94:	bf00      	nop
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b087      	sub	sp, #28
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	607a      	str	r2, [r7, #4]
 800bdac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bdba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	021a      	lsls	r2, r3, #8
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	431a      	orrs	r2, r3
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	697a      	ldr	r2, [r7, #20]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	697a      	ldr	r2, [r7, #20]
 800bdd2:	609a      	str	r2, [r3, #8]
}
 800bdd4:	bf00      	nop
 800bdd6:	371c      	adds	r7, #28
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b087      	sub	sp, #28
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	f003 031f 	and.w	r3, r3, #31
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	fa02 f303 	lsl.w	r3, r2, r3
 800bdf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	6a1a      	ldr	r2, [r3, #32]
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	43db      	mvns	r3, r3
 800be02:	401a      	ands	r2, r3
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6a1a      	ldr	r2, [r3, #32]
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	f003 031f 	and.w	r3, r3, #31
 800be12:	6879      	ldr	r1, [r7, #4]
 800be14:	fa01 f303 	lsl.w	r3, r1, r3
 800be18:	431a      	orrs	r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	621a      	str	r2, [r3, #32]
}
 800be1e:	bf00      	nop
 800be20:	371c      	adds	r7, #28
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr
	...

0800be2c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4a26      	ldr	r2, [pc, #152]	@ (800bed0 <TIM_ResetCallback+0xa4>)
 800be38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a25      	ldr	r2, [pc, #148]	@ (800bed4 <TIM_ResetCallback+0xa8>)
 800be40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4a24      	ldr	r2, [pc, #144]	@ (800bed8 <TIM_ResetCallback+0xac>)
 800be48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4a23      	ldr	r2, [pc, #140]	@ (800bedc <TIM_ResetCallback+0xb0>)
 800be50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4a22      	ldr	r2, [pc, #136]	@ (800bee0 <TIM_ResetCallback+0xb4>)
 800be58:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4a21      	ldr	r2, [pc, #132]	@ (800bee4 <TIM_ResetCallback+0xb8>)
 800be60:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4a20      	ldr	r2, [pc, #128]	@ (800bee8 <TIM_ResetCallback+0xbc>)
 800be68:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4a1f      	ldr	r2, [pc, #124]	@ (800beec <TIM_ResetCallback+0xc0>)
 800be70:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4a1e      	ldr	r2, [pc, #120]	@ (800bef0 <TIM_ResetCallback+0xc4>)
 800be78:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4a1d      	ldr	r2, [pc, #116]	@ (800bef4 <TIM_ResetCallback+0xc8>)
 800be80:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4a1c      	ldr	r2, [pc, #112]	@ (800bef8 <TIM_ResetCallback+0xcc>)
 800be88:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4a1b      	ldr	r2, [pc, #108]	@ (800befc <TIM_ResetCallback+0xd0>)
 800be90:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	4a1a      	ldr	r2, [pc, #104]	@ (800bf00 <TIM_ResetCallback+0xd4>)
 800be98:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4a19      	ldr	r2, [pc, #100]	@ (800bf04 <TIM_ResetCallback+0xd8>)
 800bea0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a18      	ldr	r2, [pc, #96]	@ (800bf08 <TIM_ResetCallback+0xdc>)
 800bea8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	4a17      	ldr	r2, [pc, #92]	@ (800bf0c <TIM_ResetCallback+0xe0>)
 800beb0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4a16      	ldr	r2, [pc, #88]	@ (800bf10 <TIM_ResetCallback+0xe4>)
 800beb8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4a15      	ldr	r2, [pc, #84]	@ (800bf14 <TIM_ResetCallback+0xe8>)
 800bec0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800bec4:	bf00      	nop
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr
 800bed0:	08004b59 	.word	0x08004b59
 800bed4:	0800b179 	.word	0x0800b179
 800bed8:	0800b1f1 	.word	0x0800b1f1
 800bedc:	0800b205 	.word	0x0800b205
 800bee0:	0800b1a1 	.word	0x0800b1a1
 800bee4:	0800b1b5 	.word	0x0800b1b5
 800bee8:	0800b18d 	.word	0x0800b18d
 800beec:	0800b1c9 	.word	0x0800b1c9
 800bef0:	0800b1dd 	.word	0x0800b1dd
 800bef4:	0800b219 	.word	0x0800b219
 800bef8:	0800c16d 	.word	0x0800c16d
 800befc:	0800c181 	.word	0x0800c181
 800bf00:	0800c195 	.word	0x0800c195
 800bf04:	0800c1a9 	.word	0x0800c1a9
 800bf08:	0800c1bd 	.word	0x0800c1bd
 800bf0c:	0800c1d1 	.word	0x0800c1d1
 800bf10:	0800c1e5 	.word	0x0800c1e5
 800bf14:	0800c1f9 	.word	0x0800c1f9

0800bf18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d101      	bne.n	800bf30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	e074      	b.n	800c01a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2202      	movs	r2, #2
 800bf3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a34      	ldr	r2, [pc, #208]	@ (800c028 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d009      	beq.n	800bf6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a33      	ldr	r2, [pc, #204]	@ (800c02c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d004      	beq.n	800bf6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a31      	ldr	r2, [pc, #196]	@ (800c030 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d108      	bne.n	800bf80 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bf74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bf86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	4313      	orrs	r3, r2
 800bf94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	68fa      	ldr	r2, [r7, #12]
 800bf9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4a21      	ldr	r2, [pc, #132]	@ (800c028 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d022      	beq.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfb0:	d01d      	beq.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a1f      	ldr	r2, [pc, #124]	@ (800c034 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d018      	beq.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a1d      	ldr	r2, [pc, #116]	@ (800c038 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d013      	beq.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a1c      	ldr	r2, [pc, #112]	@ (800c03c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d00e      	beq.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a15      	ldr	r2, [pc, #84]	@ (800c02c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d009      	beq.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a18      	ldr	r2, [pc, #96]	@ (800c040 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d004      	beq.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a11      	ldr	r2, [pc, #68]	@ (800c030 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d10c      	bne.n	800c008 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3714      	adds	r7, #20
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	40012c00 	.word	0x40012c00
 800c02c:	40013400 	.word	0x40013400
 800c030:	40015000 	.word	0x40015000
 800c034:	40000400 	.word	0x40000400
 800c038:	40000800 	.word	0x40000800
 800c03c:	40000c00 	.word	0x40000c00
 800c040:	40014000 	.word	0x40014000

0800c044 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c044:	b480      	push	{r7}
 800c046:	b085      	sub	sp, #20
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c04e:	2300      	movs	r3, #0
 800c050:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d101      	bne.n	800c060 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c05c:	2302      	movs	r3, #2
 800c05e:	e078      	b.n	800c152 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	68db      	ldr	r3, [r3, #12]
 800c072:	4313      	orrs	r3, r2
 800c074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	4313      	orrs	r3, r2
 800c082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	4313      	orrs	r3, r2
 800c090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	691b      	ldr	r3, [r3, #16]
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	695b      	ldr	r3, [r3, #20]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	699b      	ldr	r3, [r3, #24]
 800c0d4:	041b      	lsls	r3, r3, #16
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	69db      	ldr	r3, [r3, #28]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a1c      	ldr	r2, [pc, #112]	@ (800c160 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d009      	beq.n	800c106 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4a1b      	ldr	r2, [pc, #108]	@ (800c164 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d004      	beq.n	800c106 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a19      	ldr	r2, [pc, #100]	@ (800c168 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d11c      	bne.n	800c140 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c110:	051b      	lsls	r3, r3, #20
 800c112:	4313      	orrs	r3, r2
 800c114:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	6a1b      	ldr	r3, [r3, #32]
 800c120:	4313      	orrs	r3, r2
 800c122:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c12e:	4313      	orrs	r3, r2
 800c130:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c13c:	4313      	orrs	r3, r2
 800c13e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c150:	2300      	movs	r3, #0
}
 800c152:	4618      	mov	r0, r3
 800c154:	3714      	adds	r7, #20
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	40012c00 	.word	0x40012c00
 800c164:	40013400 	.word	0x40013400
 800c168:	40015000 	.word	0x40015000

0800c16c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c174:	bf00      	nop
 800c176:	370c      	adds	r7, #12
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800c188:	bf00      	nop
 800c18a:	370c      	adds	r7, #12
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr

0800c194 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c1b0:	bf00      	nop
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c1c4:	bf00      	nop
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c1d8:	bf00      	nop
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c1ec:	bf00      	nop
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c200:	bf00      	nop
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d101      	bne.n	800c21e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c21a:	2301      	movs	r3, #1
 800c21c:	e050      	b.n	800c2c0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c224:	2b00      	cmp	r3, #0
 800c226:	d114      	bne.n	800c252 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 fd5b 	bl	800ccec <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d103      	bne.n	800c248 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a21      	ldr	r2, [pc, #132]	@ (800c2c8 <HAL_UART_Init+0xbc>)
 800c244:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2224      	movs	r2, #36	@ 0x24
 800c256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f022 0201 	bic.w	r2, r2, #1
 800c268:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d002      	beq.n	800c278 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f001 f888 	bl	800d388 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 fd89 	bl	800cd90 <UART_SetConfig>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b01      	cmp	r3, #1
 800c282:	d101      	bne.n	800c288 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800c284:	2301      	movs	r3, #1
 800c286:	e01b      	b.n	800c2c0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	685a      	ldr	r2, [r3, #4]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	689a      	ldr	r2, [r3, #8]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c2a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f042 0201 	orr.w	r2, r2, #1
 800c2b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f001 f907 	bl	800d4cc <UART_CheckIdleState>
 800c2be:	4603      	mov	r3, r0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	080066e1 	.word	0x080066e1

0800c2cc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b087      	sub	sp, #28
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	607a      	str	r2, [r7, #4]
 800c2d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d109      	bne.n	800c2f8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	e09c      	b.n	800c432 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2fe:	2b20      	cmp	r3, #32
 800c300:	d16c      	bne.n	800c3dc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800c302:	7afb      	ldrb	r3, [r7, #11]
 800c304:	2b0c      	cmp	r3, #12
 800c306:	d85e      	bhi.n	800c3c6 <HAL_UART_RegisterCallback+0xfa>
 800c308:	a201      	add	r2, pc, #4	@ (adr r2, 800c310 <HAL_UART_RegisterCallback+0x44>)
 800c30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c30e:	bf00      	nop
 800c310:	0800c345 	.word	0x0800c345
 800c314:	0800c34f 	.word	0x0800c34f
 800c318:	0800c359 	.word	0x0800c359
 800c31c:	0800c363 	.word	0x0800c363
 800c320:	0800c36d 	.word	0x0800c36d
 800c324:	0800c377 	.word	0x0800c377
 800c328:	0800c381 	.word	0x0800c381
 800c32c:	0800c38b 	.word	0x0800c38b
 800c330:	0800c395 	.word	0x0800c395
 800c334:	0800c39f 	.word	0x0800c39f
 800c338:	0800c3a9 	.word	0x0800c3a9
 800c33c:	0800c3b3 	.word	0x0800c3b3
 800c340:	0800c3bd 	.word	0x0800c3bd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800c34c:	e070      	b.n	800c430 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800c356:	e06b      	b.n	800c430 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800c360:	e066      	b.n	800c430 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800c36a:	e061      	b.n	800c430 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800c374:	e05c      	b.n	800c430 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800c37e:	e057      	b.n	800c430 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800c388:	e052      	b.n	800c430 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800c392:	e04d      	b.n	800c430 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800c39c:	e048      	b.n	800c430 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800c3a6:	e043      	b.n	800c430 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800c3b0:	e03e      	b.n	800c430 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c3ba:	e039      	b.n	800c430 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c3c4:	e034      	b.n	800c430 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	75fb      	strb	r3, [r7, #23]
        break;
 800c3da:	e029      	b.n	800c430 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d11a      	bne.n	800c41c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800c3e6:	7afb      	ldrb	r3, [r7, #11]
 800c3e8:	2b0b      	cmp	r3, #11
 800c3ea:	d002      	beq.n	800c3f2 <HAL_UART_RegisterCallback+0x126>
 800c3ec:	2b0c      	cmp	r3, #12
 800c3ee:	d005      	beq.n	800c3fc <HAL_UART_RegisterCallback+0x130>
 800c3f0:	e009      	b.n	800c406 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c3fa:	e019      	b.n	800c430 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c404:	e014      	b.n	800c430 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c40c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c416:	2301      	movs	r3, #1
 800c418:	75fb      	strb	r3, [r7, #23]
        break;
 800c41a:	e009      	b.n	800c430 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c422:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800c42c:	2301      	movs	r3, #1
 800c42e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c430:	7dfb      	ldrb	r3, [r7, #23]
}
 800c432:	4618      	mov	r0, r3
 800c434:	371c      	adds	r7, #28
 800c436:	46bd      	mov	sp, r7
 800c438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop

0800c440 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b08a      	sub	sp, #40	@ 0x28
 800c444:	af00      	add	r7, sp, #0
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	4613      	mov	r3, r2
 800c44c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c454:	2b20      	cmp	r3, #32
 800c456:	d137      	bne.n	800c4c8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d002      	beq.n	800c464 <HAL_UART_Receive_DMA+0x24>
 800c45e:	88fb      	ldrh	r3, [r7, #6]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d101      	bne.n	800c468 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c464:	2301      	movs	r3, #1
 800c466:	e030      	b.n	800c4ca <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2200      	movs	r2, #0
 800c46c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a18      	ldr	r2, [pc, #96]	@ (800c4d4 <HAL_UART_Receive_DMA+0x94>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d01f      	beq.n	800c4b8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c482:	2b00      	cmp	r3, #0
 800c484:	d018      	beq.n	800c4b8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	e853 3f00 	ldrex	r3, [r3]
 800c492:	613b      	str	r3, [r7, #16]
   return(result);
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c49a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a4:	623b      	str	r3, [r7, #32]
 800c4a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a8:	69f9      	ldr	r1, [r7, #28]
 800c4aa:	6a3a      	ldr	r2, [r7, #32]
 800c4ac:	e841 2300 	strex	r3, r2, [r1]
 800c4b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d1e6      	bne.n	800c486 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c4b8:	88fb      	ldrh	r3, [r7, #6]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	68b9      	ldr	r1, [r7, #8]
 800c4be:	68f8      	ldr	r0, [r7, #12]
 800c4c0:	f001 f91c 	bl	800d6fc <UART_Start_Receive_DMA>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	e000      	b.n	800c4ca <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c4c8:	2302      	movs	r3, #2
  }
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3728      	adds	r7, #40	@ 0x28
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	40008000 	.word	0x40008000

0800c4d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b0ba      	sub	sp, #232	@ 0xe8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	69db      	ldr	r3, [r3, #28]
 800c4e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c4fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c502:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c506:	4013      	ands	r3, r2
 800c508:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c50c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c510:	2b00      	cmp	r3, #0
 800c512:	d11b      	bne.n	800c54c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c518:	f003 0320 	and.w	r3, r3, #32
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d015      	beq.n	800c54c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c524:	f003 0320 	and.w	r3, r3, #32
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d105      	bne.n	800c538 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c52c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c534:	2b00      	cmp	r3, #0
 800c536:	d009      	beq.n	800c54c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f000 8312 	beq.w	800cb66 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	4798      	blx	r3
      }
      return;
 800c54a:	e30c      	b.n	800cb66 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c54c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c550:	2b00      	cmp	r3, #0
 800c552:	f000 8129 	beq.w	800c7a8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c556:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c55a:	4b90      	ldr	r3, [pc, #576]	@ (800c79c <HAL_UART_IRQHandler+0x2c4>)
 800c55c:	4013      	ands	r3, r2
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d106      	bne.n	800c570 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c562:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c566:	4b8e      	ldr	r3, [pc, #568]	@ (800c7a0 <HAL_UART_IRQHandler+0x2c8>)
 800c568:	4013      	ands	r3, r2
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f000 811c 	beq.w	800c7a8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c574:	f003 0301 	and.w	r3, r3, #1
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d011      	beq.n	800c5a0 <HAL_UART_IRQHandler+0xc8>
 800c57c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c584:	2b00      	cmp	r3, #0
 800c586:	d00b      	beq.n	800c5a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2201      	movs	r2, #1
 800c58e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c596:	f043 0201 	orr.w	r2, r3, #1
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5a4:	f003 0302 	and.w	r3, r3, #2
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d011      	beq.n	800c5d0 <HAL_UART_IRQHandler+0xf8>
 800c5ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5b0:	f003 0301 	and.w	r3, r3, #1
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00b      	beq.n	800c5d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2202      	movs	r2, #2
 800c5be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5c6:	f043 0204 	orr.w	r2, r3, #4
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5d4:	f003 0304 	and.w	r3, r3, #4
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d011      	beq.n	800c600 <HAL_UART_IRQHandler+0x128>
 800c5dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5e0:	f003 0301 	and.w	r3, r3, #1
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d00b      	beq.n	800c600 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2204      	movs	r2, #4
 800c5ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5f6:	f043 0202 	orr.w	r2, r3, #2
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c604:	f003 0308 	and.w	r3, r3, #8
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d017      	beq.n	800c63c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c60c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c610:	f003 0320 	and.w	r3, r3, #32
 800c614:	2b00      	cmp	r3, #0
 800c616:	d105      	bne.n	800c624 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c618:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c61c:	4b5f      	ldr	r3, [pc, #380]	@ (800c79c <HAL_UART_IRQHandler+0x2c4>)
 800c61e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c620:	2b00      	cmp	r3, #0
 800c622:	d00b      	beq.n	800c63c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2208      	movs	r2, #8
 800c62a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c632:	f043 0208 	orr.w	r2, r3, #8
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c63c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c644:	2b00      	cmp	r3, #0
 800c646:	d012      	beq.n	800c66e <HAL_UART_IRQHandler+0x196>
 800c648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c64c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00c      	beq.n	800c66e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c65c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c664:	f043 0220 	orr.w	r2, r3, #32
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c674:	2b00      	cmp	r3, #0
 800c676:	f000 8278 	beq.w	800cb6a <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c67a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c67e:	f003 0320 	and.w	r3, r3, #32
 800c682:	2b00      	cmp	r3, #0
 800c684:	d013      	beq.n	800c6ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c68a:	f003 0320 	and.w	r3, r3, #32
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d105      	bne.n	800c69e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d007      	beq.n	800c6ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d003      	beq.n	800c6ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6c2:	2b40      	cmp	r3, #64	@ 0x40
 800c6c4:	d005      	beq.n	800c6d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c6c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c6ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d058      	beq.n	800c784 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f001 f8f9 	bl	800d8ca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6e2:	2b40      	cmp	r3, #64	@ 0x40
 800c6e4:	d148      	bne.n	800c778 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	3308      	adds	r3, #8
 800c6ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c6f4:	e853 3f00 	ldrex	r3, [r3]
 800c6f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c6fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c700:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c704:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	3308      	adds	r3, #8
 800c70e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c712:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c716:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c71e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c722:	e841 2300 	strex	r3, r2, [r1]
 800c726:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c72a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1d9      	bne.n	800c6e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d017      	beq.n	800c76c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c742:	4a18      	ldr	r2, [pc, #96]	@ (800c7a4 <HAL_UART_IRQHandler+0x2cc>)
 800c744:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7fc f8c5 	bl	80088dc <HAL_DMA_Abort_IT>
 800c752:	4603      	mov	r3, r0
 800c754:	2b00      	cmp	r3, #0
 800c756:	d01f      	beq.n	800c798 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c75e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c766:	4610      	mov	r0, r2
 800c768:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c76a:	e015      	b.n	800c798 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c776:	e00f      	b.n	800c798 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c782:	e009      	b.n	800c798 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c796:	e1e8      	b.n	800cb6a <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c798:	bf00      	nop
    return;
 800c79a:	e1e6      	b.n	800cb6a <HAL_UART_IRQHandler+0x692>
 800c79c:	10000001 	.word	0x10000001
 800c7a0:	04000120 	.word	0x04000120
 800c7a4:	0800db95 	.word	0x0800db95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	f040 8176 	bne.w	800ca9e <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c7b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7b6:	f003 0310 	and.w	r3, r3, #16
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f000 816f 	beq.w	800ca9e <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c7c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7c4:	f003 0310 	and.w	r3, r3, #16
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f000 8168 	beq.w	800ca9e <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2210      	movs	r2, #16
 800c7d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7e0:	2b40      	cmp	r3, #64	@ 0x40
 800c7e2:	f040 80dc 	bne.w	800c99e <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c7f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	f000 80b1 	beq.w	800c960 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c804:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c808:	429a      	cmp	r2, r3
 800c80a:	f080 80a9 	bcs.w	800c960 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c814:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f003 0320 	and.w	r3, r3, #32
 800c826:	2b00      	cmp	r3, #0
 800c828:	f040 8087 	bne.w	800c93a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c834:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c838:	e853 3f00 	ldrex	r3, [r3]
 800c83c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c840:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c848:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	461a      	mov	r2, r3
 800c852:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c856:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c85a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c85e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c862:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c866:	e841 2300 	strex	r3, r2, [r1]
 800c86a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c86e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c872:	2b00      	cmp	r3, #0
 800c874:	d1da      	bne.n	800c82c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	3308      	adds	r3, #8
 800c87c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c87e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c880:	e853 3f00 	ldrex	r3, [r3]
 800c884:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c886:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c888:	f023 0301 	bic.w	r3, r3, #1
 800c88c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	3308      	adds	r3, #8
 800c896:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c89a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c89e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c8a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c8a6:	e841 2300 	strex	r3, r2, [r1]
 800c8aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c8ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d1e1      	bne.n	800c876 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	3308      	adds	r3, #8
 800c8b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8bc:	e853 3f00 	ldrex	r3, [r3]
 800c8c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c8c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	3308      	adds	r3, #8
 800c8d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c8d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c8d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c8dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c8de:	e841 2300 	strex	r3, r2, [r1]
 800c8e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c8e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1e3      	bne.n	800c8b2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2220      	movs	r2, #32
 800c8ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c900:	e853 3f00 	ldrex	r3, [r3]
 800c904:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c906:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c908:	f023 0310 	bic.w	r3, r3, #16
 800c90c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	461a      	mov	r2, r3
 800c916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c91a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c91c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c91e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c920:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c922:	e841 2300 	strex	r3, r2, [r1]
 800c926:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d1e4      	bne.n	800c8f8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c934:	4618      	mov	r0, r3
 800c936:	f7fb ff78 	bl	800882a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2202      	movs	r2, #2
 800c93e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800c952:	b292      	uxth	r2, r2
 800c954:	1a8a      	subs	r2, r1, r2
 800c956:	b292      	uxth	r2, r2
 800c958:	4611      	mov	r1, r2
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c95e:	e106      	b.n	800cb6e <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c96a:	429a      	cmp	r2, r3
 800c96c:	f040 80ff 	bne.w	800cb6e <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f003 0320 	and.w	r3, r3, #32
 800c97e:	2b20      	cmp	r3, #32
 800c980:	f040 80f5 	bne.w	800cb6e <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2202      	movs	r2, #2
 800c988:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c996:	4611      	mov	r1, r2
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	4798      	blx	r3
      return;
 800c99c:	e0e7      	b.n	800cb6e <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	1ad3      	subs	r3, r2, r3
 800c9ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	f000 80d9 	beq.w	800cb72 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800c9c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f000 80d4 	beq.w	800cb72 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d2:	e853 3f00 	ldrex	r3, [r3]
 800c9d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c9de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c9ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c9f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9f4:	e841 2300 	strex	r3, r2, [r1]
 800c9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c9fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d1e4      	bne.n	800c9ca <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	3308      	adds	r3, #8
 800ca06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0a:	e853 3f00 	ldrex	r3, [r3]
 800ca0e:	623b      	str	r3, [r7, #32]
   return(result);
 800ca10:	6a3b      	ldr	r3, [r7, #32]
 800ca12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ca16:	f023 0301 	bic.w	r3, r3, #1
 800ca1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	3308      	adds	r3, #8
 800ca24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ca28:	633a      	str	r2, [r7, #48]	@ 0x30
 800ca2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca30:	e841 2300 	strex	r3, r2, [r1]
 800ca34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1e1      	bne.n	800ca00 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2220      	movs	r2, #32
 800ca40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	e853 3f00 	ldrex	r3, [r3]
 800ca5c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f023 0310 	bic.w	r3, r3, #16
 800ca64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ca72:	61fb      	str	r3, [r7, #28]
 800ca74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca76:	69b9      	ldr	r1, [r7, #24]
 800ca78:	69fa      	ldr	r2, [r7, #28]
 800ca7a:	e841 2300 	strex	r3, r2, [r1]
 800ca7e:	617b      	str	r3, [r7, #20]
   return(result);
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d1e4      	bne.n	800ca50 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2202      	movs	r2, #2
 800ca8a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ca92:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800ca96:	4611      	mov	r1, r2
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ca9c:	e069      	b.n	800cb72 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ca9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800caa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d010      	beq.n	800cacc <HAL_UART_IRQHandler+0x5f4>
 800caaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800caae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00a      	beq.n	800cacc <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cabe:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800caca:	e055      	b.n	800cb78 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cacc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d014      	beq.n	800cb02 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cadc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d105      	bne.n	800caf0 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cae8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800caec:	2b00      	cmp	r3, #0
 800caee:	d008      	beq.n	800cb02 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d03e      	beq.n	800cb76 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	4798      	blx	r3
    }
    return;
 800cb00:	e039      	b.n	800cb76 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cb02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d009      	beq.n	800cb22 <HAL_UART_IRQHandler+0x64a>
 800cb0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d003      	beq.n	800cb22 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f001 f84e 	bl	800dbbc <UART_EndTransmit_IT>
    return;
 800cb20:	e02a      	b.n	800cb78 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cb22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00b      	beq.n	800cb46 <HAL_UART_IRQHandler+0x66e>
 800cb2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb32:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d005      	beq.n	800cb46 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb44:	e018      	b.n	800cb78 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cb46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d012      	beq.n	800cb78 <HAL_UART_IRQHandler+0x6a0>
 800cb52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	da0e      	bge.n	800cb78 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb64:	e008      	b.n	800cb78 <HAL_UART_IRQHandler+0x6a0>
      return;
 800cb66:	bf00      	nop
 800cb68:	e006      	b.n	800cb78 <HAL_UART_IRQHandler+0x6a0>
    return;
 800cb6a:	bf00      	nop
 800cb6c:	e004      	b.n	800cb78 <HAL_UART_IRQHandler+0x6a0>
      return;
 800cb6e:	bf00      	nop
 800cb70:	e002      	b.n	800cb78 <HAL_UART_IRQHandler+0x6a0>
      return;
 800cb72:	bf00      	nop
 800cb74:	e000      	b.n	800cb78 <HAL_UART_IRQHandler+0x6a0>
    return;
 800cb76:	bf00      	nop
  }
}
 800cb78:	37e8      	adds	r7, #232	@ 0xe8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop

0800cb80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cb88:	bf00      	nop
 800cb8a:	370c      	adds	r7, #12
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b083      	sub	sp, #12
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cb9c:	bf00      	nop
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr

0800cba8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cbb0:	bf00      	nop
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cbc4:	bf00      	nop
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b083      	sub	sp, #12
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800cbd8:	bf00      	nop
 800cbda:	370c      	adds	r7, #12
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr

0800cbe4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800cbec:	bf00      	nop
 800cbee:	370c      	adds	r7, #12
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800cc00:	bf00      	nop
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	460b      	mov	r3, r1
 800cc16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cc18:	bf00      	nop
 800cc1a:	370c      	adds	r7, #12
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4a09      	ldr	r2, [pc, #36]	@ (800cc58 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d009      	beq.n	800cc4c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	695b      	ldr	r3, [r3, #20]
 800cc3e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	683a      	ldr	r2, [r7, #0]
 800cc48:	430a      	orrs	r2, r1
 800cc4a:	615a      	str	r2, [r3, #20]
  }
}
 800cc4c:	bf00      	nop
 800cc4e:	370c      	adds	r7, #12
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr
 800cc58:	40008000 	.word	0x40008000

0800cc5c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b083      	sub	sp, #12
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a18      	ldr	r2, [pc, #96]	@ (800cccc <HAL_UART_EnableReceiverTimeout+0x70>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d027      	beq.n	800ccbe <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc74:	2b20      	cmp	r3, #32
 800cc76:	d120      	bne.n	800ccba <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d101      	bne.n	800cc86 <HAL_UART_EnableReceiverTimeout+0x2a>
 800cc82:	2302      	movs	r3, #2
 800cc84:	e01c      	b.n	800ccc0 <HAL_UART_EnableReceiverTimeout+0x64>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2224      	movs	r2, #36	@ 0x24
 800cc92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	685a      	ldr	r2, [r3, #4]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800cca4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2220      	movs	r2, #32
 800ccaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	e002      	b.n	800ccc0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800ccba:	2302      	movs	r3, #2
 800ccbc:	e000      	b.n	800ccc0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800ccbe:	2301      	movs	r3, #1
  }
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	370c      	adds	r7, #12
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr
 800cccc:	40008000 	.word	0x40008000

0800ccd0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	370c      	adds	r7, #12
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr
	...

0800ccec <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	4a1a      	ldr	r2, [pc, #104]	@ (800cd60 <UART_InitCallbacksToDefault+0x74>)
 800ccf8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	4a19      	ldr	r2, [pc, #100]	@ (800cd64 <UART_InitCallbacksToDefault+0x78>)
 800cd00:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	4a18      	ldr	r2, [pc, #96]	@ (800cd68 <UART_InitCallbacksToDefault+0x7c>)
 800cd08:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	4a17      	ldr	r2, [pc, #92]	@ (800cd6c <UART_InitCallbacksToDefault+0x80>)
 800cd10:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	4a16      	ldr	r2, [pc, #88]	@ (800cd70 <UART_InitCallbacksToDefault+0x84>)
 800cd18:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	4a15      	ldr	r2, [pc, #84]	@ (800cd74 <UART_InitCallbacksToDefault+0x88>)
 800cd20:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	4a14      	ldr	r2, [pc, #80]	@ (800cd78 <UART_InitCallbacksToDefault+0x8c>)
 800cd28:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	4a13      	ldr	r2, [pc, #76]	@ (800cd7c <UART_InitCallbacksToDefault+0x90>)
 800cd30:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4a12      	ldr	r2, [pc, #72]	@ (800cd80 <UART_InitCallbacksToDefault+0x94>)
 800cd38:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	4a11      	ldr	r2, [pc, #68]	@ (800cd84 <UART_InitCallbacksToDefault+0x98>)
 800cd40:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	4a10      	ldr	r2, [pc, #64]	@ (800cd88 <UART_InitCallbacksToDefault+0x9c>)
 800cd48:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4a0f      	ldr	r2, [pc, #60]	@ (800cd8c <UART_InitCallbacksToDefault+0xa0>)
 800cd50:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800cd54:	bf00      	nop
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr
 800cd60:	0800cb95 	.word	0x0800cb95
 800cd64:	0800cb81 	.word	0x0800cb81
 800cd68:	0800cba9 	.word	0x0800cba9
 800cd6c:	08004b45 	.word	0x08004b45
 800cd70:	0800cbbd 	.word	0x0800cbbd
 800cd74:	0800cbd1 	.word	0x0800cbd1
 800cd78:	0800cbe5 	.word	0x0800cbe5
 800cd7c:	0800cbf9 	.word	0x0800cbf9
 800cd80:	0800dc17 	.word	0x0800dc17
 800cd84:	0800dc2b 	.word	0x0800dc2b
 800cd88:	0800dc3f 	.word	0x0800dc3f
 800cd8c:	0800cc0d 	.word	0x0800cc0d

0800cd90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd94:	b08c      	sub	sp, #48	@ 0x30
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	689a      	ldr	r2, [r3, #8]
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	691b      	ldr	r3, [r3, #16]
 800cda8:	431a      	orrs	r2, r3
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	695b      	ldr	r3, [r3, #20]
 800cdae:	431a      	orrs	r2, r3
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	69db      	ldr	r3, [r3, #28]
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	4baa      	ldr	r3, [pc, #680]	@ (800d068 <UART_SetConfig+0x2d8>)
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	6812      	ldr	r2, [r2, #0]
 800cdc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cdc8:	430b      	orrs	r3, r1
 800cdca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	68da      	ldr	r2, [r3, #12]
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	430a      	orrs	r2, r1
 800cde0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	699b      	ldr	r3, [r3, #24]
 800cde6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a9f      	ldr	r2, [pc, #636]	@ (800d06c <UART_SetConfig+0x2dc>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d004      	beq.n	800cdfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	6a1b      	ldr	r3, [r3, #32]
 800cdf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ce06:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ce0a:	697a      	ldr	r2, [r7, #20]
 800ce0c:	6812      	ldr	r2, [r2, #0]
 800ce0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce10:	430b      	orrs	r3, r1
 800ce12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce1a:	f023 010f 	bic.w	r1, r3, #15
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	430a      	orrs	r2, r1
 800ce28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4a90      	ldr	r2, [pc, #576]	@ (800d070 <UART_SetConfig+0x2e0>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d125      	bne.n	800ce80 <UART_SetConfig+0xf0>
 800ce34:	4b8f      	ldr	r3, [pc, #572]	@ (800d074 <UART_SetConfig+0x2e4>)
 800ce36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce3a:	f003 0303 	and.w	r3, r3, #3
 800ce3e:	2b03      	cmp	r3, #3
 800ce40:	d81a      	bhi.n	800ce78 <UART_SetConfig+0xe8>
 800ce42:	a201      	add	r2, pc, #4	@ (adr r2, 800ce48 <UART_SetConfig+0xb8>)
 800ce44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce48:	0800ce59 	.word	0x0800ce59
 800ce4c:	0800ce69 	.word	0x0800ce69
 800ce50:	0800ce61 	.word	0x0800ce61
 800ce54:	0800ce71 	.word	0x0800ce71
 800ce58:	2301      	movs	r3, #1
 800ce5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce5e:	e116      	b.n	800d08e <UART_SetConfig+0x2fe>
 800ce60:	2302      	movs	r3, #2
 800ce62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce66:	e112      	b.n	800d08e <UART_SetConfig+0x2fe>
 800ce68:	2304      	movs	r3, #4
 800ce6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce6e:	e10e      	b.n	800d08e <UART_SetConfig+0x2fe>
 800ce70:	2308      	movs	r3, #8
 800ce72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce76:	e10a      	b.n	800d08e <UART_SetConfig+0x2fe>
 800ce78:	2310      	movs	r3, #16
 800ce7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce7e:	e106      	b.n	800d08e <UART_SetConfig+0x2fe>
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a7c      	ldr	r2, [pc, #496]	@ (800d078 <UART_SetConfig+0x2e8>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d138      	bne.n	800cefc <UART_SetConfig+0x16c>
 800ce8a:	4b7a      	ldr	r3, [pc, #488]	@ (800d074 <UART_SetConfig+0x2e4>)
 800ce8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce90:	f003 030c 	and.w	r3, r3, #12
 800ce94:	2b0c      	cmp	r3, #12
 800ce96:	d82d      	bhi.n	800cef4 <UART_SetConfig+0x164>
 800ce98:	a201      	add	r2, pc, #4	@ (adr r2, 800cea0 <UART_SetConfig+0x110>)
 800ce9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce9e:	bf00      	nop
 800cea0:	0800ced5 	.word	0x0800ced5
 800cea4:	0800cef5 	.word	0x0800cef5
 800cea8:	0800cef5 	.word	0x0800cef5
 800ceac:	0800cef5 	.word	0x0800cef5
 800ceb0:	0800cee5 	.word	0x0800cee5
 800ceb4:	0800cef5 	.word	0x0800cef5
 800ceb8:	0800cef5 	.word	0x0800cef5
 800cebc:	0800cef5 	.word	0x0800cef5
 800cec0:	0800cedd 	.word	0x0800cedd
 800cec4:	0800cef5 	.word	0x0800cef5
 800cec8:	0800cef5 	.word	0x0800cef5
 800cecc:	0800cef5 	.word	0x0800cef5
 800ced0:	0800ceed 	.word	0x0800ceed
 800ced4:	2300      	movs	r3, #0
 800ced6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceda:	e0d8      	b.n	800d08e <UART_SetConfig+0x2fe>
 800cedc:	2302      	movs	r3, #2
 800cede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cee2:	e0d4      	b.n	800d08e <UART_SetConfig+0x2fe>
 800cee4:	2304      	movs	r3, #4
 800cee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceea:	e0d0      	b.n	800d08e <UART_SetConfig+0x2fe>
 800ceec:	2308      	movs	r3, #8
 800ceee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cef2:	e0cc      	b.n	800d08e <UART_SetConfig+0x2fe>
 800cef4:	2310      	movs	r3, #16
 800cef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cefa:	e0c8      	b.n	800d08e <UART_SetConfig+0x2fe>
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a5e      	ldr	r2, [pc, #376]	@ (800d07c <UART_SetConfig+0x2ec>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d125      	bne.n	800cf52 <UART_SetConfig+0x1c2>
 800cf06:	4b5b      	ldr	r3, [pc, #364]	@ (800d074 <UART_SetConfig+0x2e4>)
 800cf08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf0c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cf10:	2b30      	cmp	r3, #48	@ 0x30
 800cf12:	d016      	beq.n	800cf42 <UART_SetConfig+0x1b2>
 800cf14:	2b30      	cmp	r3, #48	@ 0x30
 800cf16:	d818      	bhi.n	800cf4a <UART_SetConfig+0x1ba>
 800cf18:	2b20      	cmp	r3, #32
 800cf1a:	d00a      	beq.n	800cf32 <UART_SetConfig+0x1a2>
 800cf1c:	2b20      	cmp	r3, #32
 800cf1e:	d814      	bhi.n	800cf4a <UART_SetConfig+0x1ba>
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d002      	beq.n	800cf2a <UART_SetConfig+0x19a>
 800cf24:	2b10      	cmp	r3, #16
 800cf26:	d008      	beq.n	800cf3a <UART_SetConfig+0x1aa>
 800cf28:	e00f      	b.n	800cf4a <UART_SetConfig+0x1ba>
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf30:	e0ad      	b.n	800d08e <UART_SetConfig+0x2fe>
 800cf32:	2302      	movs	r3, #2
 800cf34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf38:	e0a9      	b.n	800d08e <UART_SetConfig+0x2fe>
 800cf3a:	2304      	movs	r3, #4
 800cf3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf40:	e0a5      	b.n	800d08e <UART_SetConfig+0x2fe>
 800cf42:	2308      	movs	r3, #8
 800cf44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf48:	e0a1      	b.n	800d08e <UART_SetConfig+0x2fe>
 800cf4a:	2310      	movs	r3, #16
 800cf4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf50:	e09d      	b.n	800d08e <UART_SetConfig+0x2fe>
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a4a      	ldr	r2, [pc, #296]	@ (800d080 <UART_SetConfig+0x2f0>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d125      	bne.n	800cfa8 <UART_SetConfig+0x218>
 800cf5c:	4b45      	ldr	r3, [pc, #276]	@ (800d074 <UART_SetConfig+0x2e4>)
 800cf5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cf66:	2bc0      	cmp	r3, #192	@ 0xc0
 800cf68:	d016      	beq.n	800cf98 <UART_SetConfig+0x208>
 800cf6a:	2bc0      	cmp	r3, #192	@ 0xc0
 800cf6c:	d818      	bhi.n	800cfa0 <UART_SetConfig+0x210>
 800cf6e:	2b80      	cmp	r3, #128	@ 0x80
 800cf70:	d00a      	beq.n	800cf88 <UART_SetConfig+0x1f8>
 800cf72:	2b80      	cmp	r3, #128	@ 0x80
 800cf74:	d814      	bhi.n	800cfa0 <UART_SetConfig+0x210>
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d002      	beq.n	800cf80 <UART_SetConfig+0x1f0>
 800cf7a:	2b40      	cmp	r3, #64	@ 0x40
 800cf7c:	d008      	beq.n	800cf90 <UART_SetConfig+0x200>
 800cf7e:	e00f      	b.n	800cfa0 <UART_SetConfig+0x210>
 800cf80:	2300      	movs	r3, #0
 800cf82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf86:	e082      	b.n	800d08e <UART_SetConfig+0x2fe>
 800cf88:	2302      	movs	r3, #2
 800cf8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf8e:	e07e      	b.n	800d08e <UART_SetConfig+0x2fe>
 800cf90:	2304      	movs	r3, #4
 800cf92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf96:	e07a      	b.n	800d08e <UART_SetConfig+0x2fe>
 800cf98:	2308      	movs	r3, #8
 800cf9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf9e:	e076      	b.n	800d08e <UART_SetConfig+0x2fe>
 800cfa0:	2310      	movs	r3, #16
 800cfa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfa6:	e072      	b.n	800d08e <UART_SetConfig+0x2fe>
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a35      	ldr	r2, [pc, #212]	@ (800d084 <UART_SetConfig+0x2f4>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d12a      	bne.n	800d008 <UART_SetConfig+0x278>
 800cfb2:	4b30      	ldr	r3, [pc, #192]	@ (800d074 <UART_SetConfig+0x2e4>)
 800cfb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cfbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cfc0:	d01a      	beq.n	800cff8 <UART_SetConfig+0x268>
 800cfc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cfc6:	d81b      	bhi.n	800d000 <UART_SetConfig+0x270>
 800cfc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfcc:	d00c      	beq.n	800cfe8 <UART_SetConfig+0x258>
 800cfce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfd2:	d815      	bhi.n	800d000 <UART_SetConfig+0x270>
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d003      	beq.n	800cfe0 <UART_SetConfig+0x250>
 800cfd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfdc:	d008      	beq.n	800cff0 <UART_SetConfig+0x260>
 800cfde:	e00f      	b.n	800d000 <UART_SetConfig+0x270>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfe6:	e052      	b.n	800d08e <UART_SetConfig+0x2fe>
 800cfe8:	2302      	movs	r3, #2
 800cfea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfee:	e04e      	b.n	800d08e <UART_SetConfig+0x2fe>
 800cff0:	2304      	movs	r3, #4
 800cff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cff6:	e04a      	b.n	800d08e <UART_SetConfig+0x2fe>
 800cff8:	2308      	movs	r3, #8
 800cffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cffe:	e046      	b.n	800d08e <UART_SetConfig+0x2fe>
 800d000:	2310      	movs	r3, #16
 800d002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d006:	e042      	b.n	800d08e <UART_SetConfig+0x2fe>
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a17      	ldr	r2, [pc, #92]	@ (800d06c <UART_SetConfig+0x2dc>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d13a      	bne.n	800d088 <UART_SetConfig+0x2f8>
 800d012:	4b18      	ldr	r3, [pc, #96]	@ (800d074 <UART_SetConfig+0x2e4>)
 800d014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d018:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d01c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d020:	d01a      	beq.n	800d058 <UART_SetConfig+0x2c8>
 800d022:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d026:	d81b      	bhi.n	800d060 <UART_SetConfig+0x2d0>
 800d028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d02c:	d00c      	beq.n	800d048 <UART_SetConfig+0x2b8>
 800d02e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d032:	d815      	bhi.n	800d060 <UART_SetConfig+0x2d0>
 800d034:	2b00      	cmp	r3, #0
 800d036:	d003      	beq.n	800d040 <UART_SetConfig+0x2b0>
 800d038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d03c:	d008      	beq.n	800d050 <UART_SetConfig+0x2c0>
 800d03e:	e00f      	b.n	800d060 <UART_SetConfig+0x2d0>
 800d040:	2300      	movs	r3, #0
 800d042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d046:	e022      	b.n	800d08e <UART_SetConfig+0x2fe>
 800d048:	2302      	movs	r3, #2
 800d04a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d04e:	e01e      	b.n	800d08e <UART_SetConfig+0x2fe>
 800d050:	2304      	movs	r3, #4
 800d052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d056:	e01a      	b.n	800d08e <UART_SetConfig+0x2fe>
 800d058:	2308      	movs	r3, #8
 800d05a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d05e:	e016      	b.n	800d08e <UART_SetConfig+0x2fe>
 800d060:	2310      	movs	r3, #16
 800d062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d066:	e012      	b.n	800d08e <UART_SetConfig+0x2fe>
 800d068:	cfff69f3 	.word	0xcfff69f3
 800d06c:	40008000 	.word	0x40008000
 800d070:	40013800 	.word	0x40013800
 800d074:	40021000 	.word	0x40021000
 800d078:	40004400 	.word	0x40004400
 800d07c:	40004800 	.word	0x40004800
 800d080:	40004c00 	.word	0x40004c00
 800d084:	40005000 	.word	0x40005000
 800d088:	2310      	movs	r3, #16
 800d08a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4aae      	ldr	r2, [pc, #696]	@ (800d34c <UART_SetConfig+0x5bc>)
 800d094:	4293      	cmp	r3, r2
 800d096:	f040 8097 	bne.w	800d1c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d09a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d09e:	2b08      	cmp	r3, #8
 800d0a0:	d823      	bhi.n	800d0ea <UART_SetConfig+0x35a>
 800d0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800d0a8 <UART_SetConfig+0x318>)
 800d0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a8:	0800d0cd 	.word	0x0800d0cd
 800d0ac:	0800d0eb 	.word	0x0800d0eb
 800d0b0:	0800d0d5 	.word	0x0800d0d5
 800d0b4:	0800d0eb 	.word	0x0800d0eb
 800d0b8:	0800d0db 	.word	0x0800d0db
 800d0bc:	0800d0eb 	.word	0x0800d0eb
 800d0c0:	0800d0eb 	.word	0x0800d0eb
 800d0c4:	0800d0eb 	.word	0x0800d0eb
 800d0c8:	0800d0e3 	.word	0x0800d0e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0cc:	f7fc fcf6 	bl	8009abc <HAL_RCC_GetPCLK1Freq>
 800d0d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0d2:	e010      	b.n	800d0f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d0d4:	4b9e      	ldr	r3, [pc, #632]	@ (800d350 <UART_SetConfig+0x5c0>)
 800d0d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d0d8:	e00d      	b.n	800d0f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d0da:	f7fc fc81 	bl	80099e0 <HAL_RCC_GetSysClockFreq>
 800d0de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0e0:	e009      	b.n	800d0f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d0e8:	e005      	b.n	800d0f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d0f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	f000 8130 	beq.w	800d35e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d102:	4a94      	ldr	r2, [pc, #592]	@ (800d354 <UART_SetConfig+0x5c4>)
 800d104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d108:	461a      	mov	r2, r3
 800d10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d10c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d110:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	685a      	ldr	r2, [r3, #4]
 800d116:	4613      	mov	r3, r2
 800d118:	005b      	lsls	r3, r3, #1
 800d11a:	4413      	add	r3, r2
 800d11c:	69ba      	ldr	r2, [r7, #24]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d305      	bcc.n	800d12e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d128:	69ba      	ldr	r2, [r7, #24]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d903      	bls.n	800d136 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d134:	e113      	b.n	800d35e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d138:	2200      	movs	r2, #0
 800d13a:	60bb      	str	r3, [r7, #8]
 800d13c:	60fa      	str	r2, [r7, #12]
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d142:	4a84      	ldr	r2, [pc, #528]	@ (800d354 <UART_SetConfig+0x5c4>)
 800d144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d148:	b29b      	uxth	r3, r3
 800d14a:	2200      	movs	r2, #0
 800d14c:	603b      	str	r3, [r7, #0]
 800d14e:	607a      	str	r2, [r7, #4]
 800d150:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d154:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d158:	f7f3 fd4c 	bl	8000bf4 <__aeabi_uldivmod>
 800d15c:	4602      	mov	r2, r0
 800d15e:	460b      	mov	r3, r1
 800d160:	4610      	mov	r0, r2
 800d162:	4619      	mov	r1, r3
 800d164:	f04f 0200 	mov.w	r2, #0
 800d168:	f04f 0300 	mov.w	r3, #0
 800d16c:	020b      	lsls	r3, r1, #8
 800d16e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d172:	0202      	lsls	r2, r0, #8
 800d174:	6979      	ldr	r1, [r7, #20]
 800d176:	6849      	ldr	r1, [r1, #4]
 800d178:	0849      	lsrs	r1, r1, #1
 800d17a:	2000      	movs	r0, #0
 800d17c:	460c      	mov	r4, r1
 800d17e:	4605      	mov	r5, r0
 800d180:	eb12 0804 	adds.w	r8, r2, r4
 800d184:	eb43 0905 	adc.w	r9, r3, r5
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	2200      	movs	r2, #0
 800d18e:	469a      	mov	sl, r3
 800d190:	4693      	mov	fp, r2
 800d192:	4652      	mov	r2, sl
 800d194:	465b      	mov	r3, fp
 800d196:	4640      	mov	r0, r8
 800d198:	4649      	mov	r1, r9
 800d19a:	f7f3 fd2b 	bl	8000bf4 <__aeabi_uldivmod>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	4613      	mov	r3, r2
 800d1a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d1a6:	6a3b      	ldr	r3, [r7, #32]
 800d1a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d1ac:	d308      	bcc.n	800d1c0 <UART_SetConfig+0x430>
 800d1ae:	6a3b      	ldr	r3, [r7, #32]
 800d1b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d1b4:	d204      	bcs.n	800d1c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	6a3a      	ldr	r2, [r7, #32]
 800d1bc:	60da      	str	r2, [r3, #12]
 800d1be:	e0ce      	b.n	800d35e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d1c6:	e0ca      	b.n	800d35e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	69db      	ldr	r3, [r3, #28]
 800d1cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d1d0:	d166      	bne.n	800d2a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d1d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d1d6:	2b08      	cmp	r3, #8
 800d1d8:	d827      	bhi.n	800d22a <UART_SetConfig+0x49a>
 800d1da:	a201      	add	r2, pc, #4	@ (adr r2, 800d1e0 <UART_SetConfig+0x450>)
 800d1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e0:	0800d205 	.word	0x0800d205
 800d1e4:	0800d20d 	.word	0x0800d20d
 800d1e8:	0800d215 	.word	0x0800d215
 800d1ec:	0800d22b 	.word	0x0800d22b
 800d1f0:	0800d21b 	.word	0x0800d21b
 800d1f4:	0800d22b 	.word	0x0800d22b
 800d1f8:	0800d22b 	.word	0x0800d22b
 800d1fc:	0800d22b 	.word	0x0800d22b
 800d200:	0800d223 	.word	0x0800d223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d204:	f7fc fc5a 	bl	8009abc <HAL_RCC_GetPCLK1Freq>
 800d208:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d20a:	e014      	b.n	800d236 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d20c:	f7fc fc6c 	bl	8009ae8 <HAL_RCC_GetPCLK2Freq>
 800d210:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d212:	e010      	b.n	800d236 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d214:	4b4e      	ldr	r3, [pc, #312]	@ (800d350 <UART_SetConfig+0x5c0>)
 800d216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d218:	e00d      	b.n	800d236 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d21a:	f7fc fbe1 	bl	80099e0 <HAL_RCC_GetSysClockFreq>
 800d21e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d220:	e009      	b.n	800d236 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d226:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d228:	e005      	b.n	800d236 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d22a:	2300      	movs	r3, #0
 800d22c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d22e:	2301      	movs	r3, #1
 800d230:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d234:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d238:	2b00      	cmp	r3, #0
 800d23a:	f000 8090 	beq.w	800d35e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d242:	4a44      	ldr	r2, [pc, #272]	@ (800d354 <UART_SetConfig+0x5c4>)
 800d244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d248:	461a      	mov	r2, r3
 800d24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d24c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d250:	005a      	lsls	r2, r3, #1
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	085b      	lsrs	r3, r3, #1
 800d258:	441a      	add	r2, r3
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d262:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d264:	6a3b      	ldr	r3, [r7, #32]
 800d266:	2b0f      	cmp	r3, #15
 800d268:	d916      	bls.n	800d298 <UART_SetConfig+0x508>
 800d26a:	6a3b      	ldr	r3, [r7, #32]
 800d26c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d270:	d212      	bcs.n	800d298 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d272:	6a3b      	ldr	r3, [r7, #32]
 800d274:	b29b      	uxth	r3, r3
 800d276:	f023 030f 	bic.w	r3, r3, #15
 800d27a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d27c:	6a3b      	ldr	r3, [r7, #32]
 800d27e:	085b      	lsrs	r3, r3, #1
 800d280:	b29b      	uxth	r3, r3
 800d282:	f003 0307 	and.w	r3, r3, #7
 800d286:	b29a      	uxth	r2, r3
 800d288:	8bfb      	ldrh	r3, [r7, #30]
 800d28a:	4313      	orrs	r3, r2
 800d28c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	8bfa      	ldrh	r2, [r7, #30]
 800d294:	60da      	str	r2, [r3, #12]
 800d296:	e062      	b.n	800d35e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d298:	2301      	movs	r3, #1
 800d29a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d29e:	e05e      	b.n	800d35e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d2a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d2a4:	2b08      	cmp	r3, #8
 800d2a6:	d828      	bhi.n	800d2fa <UART_SetConfig+0x56a>
 800d2a8:	a201      	add	r2, pc, #4	@ (adr r2, 800d2b0 <UART_SetConfig+0x520>)
 800d2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ae:	bf00      	nop
 800d2b0:	0800d2d5 	.word	0x0800d2d5
 800d2b4:	0800d2dd 	.word	0x0800d2dd
 800d2b8:	0800d2e5 	.word	0x0800d2e5
 800d2bc:	0800d2fb 	.word	0x0800d2fb
 800d2c0:	0800d2eb 	.word	0x0800d2eb
 800d2c4:	0800d2fb 	.word	0x0800d2fb
 800d2c8:	0800d2fb 	.word	0x0800d2fb
 800d2cc:	0800d2fb 	.word	0x0800d2fb
 800d2d0:	0800d2f3 	.word	0x0800d2f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d2d4:	f7fc fbf2 	bl	8009abc <HAL_RCC_GetPCLK1Freq>
 800d2d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d2da:	e014      	b.n	800d306 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d2dc:	f7fc fc04 	bl	8009ae8 <HAL_RCC_GetPCLK2Freq>
 800d2e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d2e2:	e010      	b.n	800d306 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d2e4:	4b1a      	ldr	r3, [pc, #104]	@ (800d350 <UART_SetConfig+0x5c0>)
 800d2e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d2e8:	e00d      	b.n	800d306 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d2ea:	f7fc fb79 	bl	80099e0 <HAL_RCC_GetSysClockFreq>
 800d2ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d2f0:	e009      	b.n	800d306 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d2f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d2f8:	e005      	b.n	800d306 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d2fe:	2301      	movs	r3, #1
 800d300:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d304:	bf00      	nop
    }

    if (pclk != 0U)
 800d306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d028      	beq.n	800d35e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d310:	4a10      	ldr	r2, [pc, #64]	@ (800d354 <UART_SetConfig+0x5c4>)
 800d312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d316:	461a      	mov	r2, r3
 800d318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	085b      	lsrs	r3, r3, #1
 800d324:	441a      	add	r2, r3
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d32e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d330:	6a3b      	ldr	r3, [r7, #32]
 800d332:	2b0f      	cmp	r3, #15
 800d334:	d910      	bls.n	800d358 <UART_SetConfig+0x5c8>
 800d336:	6a3b      	ldr	r3, [r7, #32]
 800d338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d33c:	d20c      	bcs.n	800d358 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d33e:	6a3b      	ldr	r3, [r7, #32]
 800d340:	b29a      	uxth	r2, r3
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	60da      	str	r2, [r3, #12]
 800d348:	e009      	b.n	800d35e <UART_SetConfig+0x5ce>
 800d34a:	bf00      	nop
 800d34c:	40008000 	.word	0x40008000
 800d350:	00f42400 	.word	0x00f42400
 800d354:	0800ff68 	.word	0x0800ff68
      }
      else
      {
        ret = HAL_ERROR;
 800d358:	2301      	movs	r3, #1
 800d35a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	2201      	movs	r2, #1
 800d362:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	2201      	movs	r2, #1
 800d36a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	2200      	movs	r2, #0
 800d372:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	2200      	movs	r2, #0
 800d378:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d37a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3730      	adds	r7, #48	@ 0x30
 800d382:	46bd      	mov	sp, r7
 800d384:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d388:	b480      	push	{r7}
 800d38a:	b083      	sub	sp, #12
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d394:	f003 0308 	and.w	r3, r3, #8
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00a      	beq.n	800d3b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	430a      	orrs	r2, r1
 800d3b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3b6:	f003 0301 	and.w	r3, r3, #1
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00a      	beq.n	800d3d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	430a      	orrs	r2, r1
 800d3d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3d8:	f003 0302 	and.w	r3, r3, #2
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00a      	beq.n	800d3f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	430a      	orrs	r2, r1
 800d3f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3fa:	f003 0304 	and.w	r3, r3, #4
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d00a      	beq.n	800d418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	430a      	orrs	r2, r1
 800d416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d41c:	f003 0310 	and.w	r3, r3, #16
 800d420:	2b00      	cmp	r3, #0
 800d422:	d00a      	beq.n	800d43a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	430a      	orrs	r2, r1
 800d438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d43e:	f003 0320 	and.w	r3, r3, #32
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00a      	beq.n	800d45c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	689b      	ldr	r3, [r3, #8]
 800d44c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	430a      	orrs	r2, r1
 800d45a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d464:	2b00      	cmp	r3, #0
 800d466:	d01a      	beq.n	800d49e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	430a      	orrs	r2, r1
 800d47c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d482:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d486:	d10a      	bne.n	800d49e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	430a      	orrs	r2, r1
 800d49c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00a      	beq.n	800d4c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	430a      	orrs	r2, r1
 800d4be:	605a      	str	r2, [r3, #4]
  }
}
 800d4c0:	bf00      	nop
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b098      	sub	sp, #96	@ 0x60
 800d4d0:	af02      	add	r7, sp, #8
 800d4d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d4dc:	f7f9 faee 	bl	8006abc <HAL_GetTick>
 800d4e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f003 0308 	and.w	r3, r3, #8
 800d4ec:	2b08      	cmp	r3, #8
 800d4ee:	d12f      	bne.n	800d550 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d4f4:	9300      	str	r3, [sp, #0]
 800d4f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 f88e 	bl	800d620 <UART_WaitOnFlagUntilTimeout>
 800d504:	4603      	mov	r3, r0
 800d506:	2b00      	cmp	r3, #0
 800d508:	d022      	beq.n	800d550 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d512:	e853 3f00 	ldrex	r3, [r3]
 800d516:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d51a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d51e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	461a      	mov	r2, r3
 800d526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d528:	647b      	str	r3, [r7, #68]	@ 0x44
 800d52a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d52c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d52e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d530:	e841 2300 	strex	r3, r2, [r1]
 800d534:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d1e6      	bne.n	800d50a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2220      	movs	r2, #32
 800d540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d54c:	2303      	movs	r3, #3
 800d54e:	e063      	b.n	800d618 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f003 0304 	and.w	r3, r3, #4
 800d55a:	2b04      	cmp	r3, #4
 800d55c:	d149      	bne.n	800d5f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d55e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d562:	9300      	str	r3, [sp, #0]
 800d564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d566:	2200      	movs	r2, #0
 800d568:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 f857 	bl	800d620 <UART_WaitOnFlagUntilTimeout>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d03c      	beq.n	800d5f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d580:	e853 3f00 	ldrex	r3, [r3]
 800d584:	623b      	str	r3, [r7, #32]
   return(result);
 800d586:	6a3b      	ldr	r3, [r7, #32]
 800d588:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d58c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	461a      	mov	r2, r3
 800d594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d596:	633b      	str	r3, [r7, #48]	@ 0x30
 800d598:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d59a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d59c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d59e:	e841 2300 	strex	r3, r2, [r1]
 800d5a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1e6      	bne.n	800d578 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	3308      	adds	r3, #8
 800d5b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	e853 3f00 	ldrex	r3, [r3]
 800d5b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f023 0301 	bic.w	r3, r3, #1
 800d5c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	3308      	adds	r3, #8
 800d5c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d5ca:	61fa      	str	r2, [r7, #28]
 800d5cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ce:	69b9      	ldr	r1, [r7, #24]
 800d5d0:	69fa      	ldr	r2, [r7, #28]
 800d5d2:	e841 2300 	strex	r3, r2, [r1]
 800d5d6:	617b      	str	r3, [r7, #20]
   return(result);
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d1e5      	bne.n	800d5aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2220      	movs	r2, #32
 800d5e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d5ee:	2303      	movs	r3, #3
 800d5f0:	e012      	b.n	800d618 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2220      	movs	r2, #32
 800d5f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2220      	movs	r2, #32
 800d5fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2200      	movs	r2, #0
 800d606:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2200      	movs	r2, #0
 800d60c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3758      	adds	r7, #88	@ 0x58
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	603b      	str	r3, [r7, #0]
 800d62c:	4613      	mov	r3, r2
 800d62e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d630:	e04f      	b.n	800d6d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d632:	69bb      	ldr	r3, [r7, #24]
 800d634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d638:	d04b      	beq.n	800d6d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d63a:	f7f9 fa3f 	bl	8006abc <HAL_GetTick>
 800d63e:	4602      	mov	r2, r0
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	1ad3      	subs	r3, r2, r3
 800d644:	69ba      	ldr	r2, [r7, #24]
 800d646:	429a      	cmp	r2, r3
 800d648:	d302      	bcc.n	800d650 <UART_WaitOnFlagUntilTimeout+0x30>
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d101      	bne.n	800d654 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d650:	2303      	movs	r3, #3
 800d652:	e04e      	b.n	800d6f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f003 0304 	and.w	r3, r3, #4
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d037      	beq.n	800d6d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	2b80      	cmp	r3, #128	@ 0x80
 800d666:	d034      	beq.n	800d6d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	2b40      	cmp	r3, #64	@ 0x40
 800d66c:	d031      	beq.n	800d6d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	69db      	ldr	r3, [r3, #28]
 800d674:	f003 0308 	and.w	r3, r3, #8
 800d678:	2b08      	cmp	r3, #8
 800d67a:	d110      	bne.n	800d69e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2208      	movs	r2, #8
 800d682:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d684:	68f8      	ldr	r0, [r7, #12]
 800d686:	f000 f920 	bl	800d8ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2208      	movs	r2, #8
 800d68e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2200      	movs	r2, #0
 800d696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d69a:	2301      	movs	r3, #1
 800d69c:	e029      	b.n	800d6f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	69db      	ldr	r3, [r3, #28]
 800d6a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d6a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d6ac:	d111      	bne.n	800d6d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d6b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d6b8:	68f8      	ldr	r0, [r7, #12]
 800d6ba:	f000 f906 	bl	800d8ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2220      	movs	r2, #32
 800d6c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d6ce:	2303      	movs	r3, #3
 800d6d0:	e00f      	b.n	800d6f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	69da      	ldr	r2, [r3, #28]
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	4013      	ands	r3, r2
 800d6dc:	68ba      	ldr	r2, [r7, #8]
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	bf0c      	ite	eq
 800d6e2:	2301      	moveq	r3, #1
 800d6e4:	2300      	movne	r3, #0
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	79fb      	ldrb	r3, [r7, #7]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d0a0      	beq.n	800d632 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d6f0:	2300      	movs	r3, #0
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3710      	adds	r7, #16
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
	...

0800d6fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b096      	sub	sp, #88	@ 0x58
 800d700:	af00      	add	r7, sp, #0
 800d702:	60f8      	str	r0, [r7, #12]
 800d704:	60b9      	str	r1, [r7, #8]
 800d706:	4613      	mov	r3, r2
 800d708:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	88fa      	ldrh	r2, [r7, #6]
 800d714:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2200      	movs	r2, #0
 800d71c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2222      	movs	r2, #34	@ 0x22
 800d724:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d02d      	beq.n	800d78e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d738:	4a40      	ldr	r2, [pc, #256]	@ (800d83c <UART_Start_Receive_DMA+0x140>)
 800d73a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d742:	4a3f      	ldr	r2, [pc, #252]	@ (800d840 <UART_Start_Receive_DMA+0x144>)
 800d744:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d74c:	4a3d      	ldr	r2, [pc, #244]	@ (800d844 <UART_Start_Receive_DMA+0x148>)
 800d74e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d756:	2200      	movs	r2, #0
 800d758:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	3324      	adds	r3, #36	@ 0x24
 800d766:	4619      	mov	r1, r3
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d76c:	461a      	mov	r2, r3
 800d76e:	88fb      	ldrh	r3, [r7, #6]
 800d770:	f7fa ffe0 	bl	8008734 <HAL_DMA_Start_IT>
 800d774:	4603      	mov	r3, r0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d009      	beq.n	800d78e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2210      	movs	r2, #16
 800d77e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2220      	movs	r2, #32
 800d786:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d78a:	2301      	movs	r3, #1
 800d78c:	e051      	b.n	800d832 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	691b      	ldr	r3, [r3, #16]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d018      	beq.n	800d7c8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d79c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d79e:	e853 3f00 	ldrex	r3, [r3]
 800d7a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d7aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d7b6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d7ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d7bc:	e841 2300 	strex	r3, r2, [r1]
 800d7c0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d7c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d1e6      	bne.n	800d796 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	3308      	adds	r3, #8
 800d7ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d2:	e853 3f00 	ldrex	r3, [r3]
 800d7d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7da:	f043 0301 	orr.w	r3, r3, #1
 800d7de:	653b      	str	r3, [r7, #80]	@ 0x50
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	3308      	adds	r3, #8
 800d7e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d7e8:	637a      	str	r2, [r7, #52]	@ 0x34
 800d7ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d7ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7f0:	e841 2300 	strex	r3, r2, [r1]
 800d7f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d1e5      	bne.n	800d7c8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	3308      	adds	r3, #8
 800d802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	e853 3f00 	ldrex	r3, [r3]
 800d80a:	613b      	str	r3, [r7, #16]
   return(result);
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d812:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	3308      	adds	r3, #8
 800d81a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d81c:	623a      	str	r2, [r7, #32]
 800d81e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d820:	69f9      	ldr	r1, [r7, #28]
 800d822:	6a3a      	ldr	r2, [r7, #32]
 800d824:	e841 2300 	strex	r3, r2, [r1]
 800d828:	61bb      	str	r3, [r7, #24]
   return(result);
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d1e5      	bne.n	800d7fc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d830:	2300      	movs	r3, #0
}
 800d832:	4618      	mov	r0, r3
 800d834:	3758      	adds	r7, #88	@ 0x58
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	0800d997 	.word	0x0800d997
 800d840:	0800dacb 	.word	0x0800dacb
 800d844:	0800db11 	.word	0x0800db11

0800d848 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d848:	b480      	push	{r7}
 800d84a:	b08f      	sub	sp, #60	@ 0x3c
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d856:	6a3b      	ldr	r3, [r7, #32]
 800d858:	e853 3f00 	ldrex	r3, [r3]
 800d85c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d85e:	69fb      	ldr	r3, [r7, #28]
 800d860:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d864:	637b      	str	r3, [r7, #52]	@ 0x34
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	461a      	mov	r2, r3
 800d86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d86e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d870:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d872:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d874:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d876:	e841 2300 	strex	r3, r2, [r1]
 800d87a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d1e6      	bne.n	800d850 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	3308      	adds	r3, #8
 800d888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	e853 3f00 	ldrex	r3, [r3]
 800d890:	60bb      	str	r3, [r7, #8]
   return(result);
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d898:	633b      	str	r3, [r7, #48]	@ 0x30
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	3308      	adds	r3, #8
 800d8a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8a2:	61ba      	str	r2, [r7, #24]
 800d8a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8a6:	6979      	ldr	r1, [r7, #20]
 800d8a8:	69ba      	ldr	r2, [r7, #24]
 800d8aa:	e841 2300 	strex	r3, r2, [r1]
 800d8ae:	613b      	str	r3, [r7, #16]
   return(result);
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d1e5      	bne.n	800d882 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2220      	movs	r2, #32
 800d8ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d8be:	bf00      	nop
 800d8c0:	373c      	adds	r7, #60	@ 0x3c
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr

0800d8ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d8ca:	b480      	push	{r7}
 800d8cc:	b095      	sub	sp, #84	@ 0x54
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8da:	e853 3f00 	ldrex	r3, [r3]
 800d8de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d8e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d8f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d8f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d8f8:	e841 2300 	strex	r3, r2, [r1]
 800d8fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d900:	2b00      	cmp	r3, #0
 800d902:	d1e6      	bne.n	800d8d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	3308      	adds	r3, #8
 800d90a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d90c:	6a3b      	ldr	r3, [r7, #32]
 800d90e:	e853 3f00 	ldrex	r3, [r3]
 800d912:	61fb      	str	r3, [r7, #28]
   return(result);
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d91a:	f023 0301 	bic.w	r3, r3, #1
 800d91e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	3308      	adds	r3, #8
 800d926:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d928:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d92a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d92c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d92e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d930:	e841 2300 	strex	r3, r2, [r1]
 800d934:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d1e3      	bne.n	800d904 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d940:	2b01      	cmp	r3, #1
 800d942:	d118      	bne.n	800d976 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	e853 3f00 	ldrex	r3, [r3]
 800d950:	60bb      	str	r3, [r7, #8]
   return(result);
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	f023 0310 	bic.w	r3, r3, #16
 800d958:	647b      	str	r3, [r7, #68]	@ 0x44
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	461a      	mov	r2, r3
 800d960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d962:	61bb      	str	r3, [r7, #24]
 800d964:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d966:	6979      	ldr	r1, [r7, #20]
 800d968:	69ba      	ldr	r2, [r7, #24]
 800d96a:	e841 2300 	strex	r3, r2, [r1]
 800d96e:	613b      	str	r3, [r7, #16]
   return(result);
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d1e6      	bne.n	800d944 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2220      	movs	r2, #32
 800d97a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2200      	movs	r2, #0
 800d982:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2200      	movs	r2, #0
 800d988:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d98a:	bf00      	nop
 800d98c:	3754      	adds	r7, #84	@ 0x54
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr

0800d996 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d996:	b580      	push	{r7, lr}
 800d998:	b09c      	sub	sp, #112	@ 0x70
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f003 0320 	and.w	r3, r3, #32
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d171      	bne.n	800da96 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d9b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d9ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9c2:	e853 3f00 	ldrex	r3, [r3]
 800d9c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d9c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d9ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d9d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d9d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d9da:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d9de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d9e0:	e841 2300 	strex	r3, r2, [r1]
 800d9e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d9e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1e6      	bne.n	800d9ba <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	3308      	adds	r3, #8
 800d9f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9f6:	e853 3f00 	ldrex	r3, [r3]
 800d9fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d9fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9fe:	f023 0301 	bic.w	r3, r3, #1
 800da02:	667b      	str	r3, [r7, #100]	@ 0x64
 800da04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	3308      	adds	r3, #8
 800da0a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800da0c:	647a      	str	r2, [r7, #68]	@ 0x44
 800da0e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da14:	e841 2300 	strex	r3, r2, [r1]
 800da18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d1e5      	bne.n	800d9ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	3308      	adds	r3, #8
 800da26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da2a:	e853 3f00 	ldrex	r3, [r3]
 800da2e:	623b      	str	r3, [r7, #32]
   return(result);
 800da30:	6a3b      	ldr	r3, [r7, #32]
 800da32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da36:	663b      	str	r3, [r7, #96]	@ 0x60
 800da38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	3308      	adds	r3, #8
 800da3e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800da40:	633a      	str	r2, [r7, #48]	@ 0x30
 800da42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da48:	e841 2300 	strex	r3, r2, [r1]
 800da4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da50:	2b00      	cmp	r3, #0
 800da52:	d1e5      	bne.n	800da20 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800da54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da56:	2220      	movs	r2, #32
 800da58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da60:	2b01      	cmp	r3, #1
 800da62:	d118      	bne.n	800da96 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	e853 3f00 	ldrex	r3, [r3]
 800da70:	60fb      	str	r3, [r7, #12]
   return(result);
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f023 0310 	bic.w	r3, r3, #16
 800da78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800da7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	461a      	mov	r2, r3
 800da80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da82:	61fb      	str	r3, [r7, #28]
 800da84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da86:	69b9      	ldr	r1, [r7, #24]
 800da88:	69fa      	ldr	r2, [r7, #28]
 800da8a:	e841 2300 	strex	r3, r2, [r1]
 800da8e:	617b      	str	r3, [r7, #20]
   return(result);
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d1e6      	bne.n	800da64 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da98:	2200      	movs	r2, #0
 800da9a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d109      	bne.n	800dab8 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800daa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800daa6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800daaa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800daac:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800dab0:	4611      	mov	r1, r2
 800dab2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dab4:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dab6:	e004      	b.n	800dac2 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800dab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800daba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dabe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dac0:	4798      	blx	r3
}
 800dac2:	bf00      	nop
 800dac4:	3770      	adds	r7, #112	@ 0x70
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b084      	sub	sp, #16
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dad6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2201      	movs	r2, #1
 800dadc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d10b      	bne.n	800dafe <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800daec:	68fa      	ldr	r2, [r7, #12]
 800daee:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800daf2:	0852      	lsrs	r2, r2, #1
 800daf4:	b292      	uxth	r2, r2
 800daf6:	4611      	mov	r1, r2
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dafc:	e004      	b.n	800db08 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	4798      	blx	r3
}
 800db08:	bf00      	nop
 800db0a:	3710      	adds	r7, #16
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db1c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db24:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800db2c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	689b      	ldr	r3, [r3, #8]
 800db34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db38:	2b80      	cmp	r3, #128	@ 0x80
 800db3a:	d109      	bne.n	800db50 <UART_DMAError+0x40>
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	2b21      	cmp	r3, #33	@ 0x21
 800db40:	d106      	bne.n	800db50 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	2200      	movs	r2, #0
 800db46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800db4a:	6978      	ldr	r0, [r7, #20]
 800db4c:	f7ff fe7c 	bl	800d848 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	689b      	ldr	r3, [r3, #8]
 800db56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db5a:	2b40      	cmp	r3, #64	@ 0x40
 800db5c:	d109      	bne.n	800db72 <UART_DMAError+0x62>
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2b22      	cmp	r3, #34	@ 0x22
 800db62:	d106      	bne.n	800db72 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	2200      	movs	r2, #0
 800db68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800db6c:	6978      	ldr	r0, [r7, #20]
 800db6e:	f7ff feac 	bl	800d8ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db78:	f043 0210 	orr.w	r2, r3, #16
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800db88:	6978      	ldr	r0, [r7, #20]
 800db8a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db8c:	bf00      	nop
 800db8e:	3718      	adds	r7, #24
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dba0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2200      	movs	r2, #0
 800dba6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dbb0:	68f8      	ldr	r0, [r7, #12]
 800dbb2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbb4:	bf00      	nop
 800dbb6:	3710      	adds	r7, #16
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b088      	sub	sp, #32
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	e853 3f00 	ldrex	r3, [r3]
 800dbd0:	60bb      	str	r3, [r7, #8]
   return(result);
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dbd8:	61fb      	str	r3, [r7, #28]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	461a      	mov	r2, r3
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	61bb      	str	r3, [r7, #24]
 800dbe4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe6:	6979      	ldr	r1, [r7, #20]
 800dbe8:	69ba      	ldr	r2, [r7, #24]
 800dbea:	e841 2300 	strex	r3, r2, [r1]
 800dbee:	613b      	str	r3, [r7, #16]
   return(result);
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d1e6      	bne.n	800dbc4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2220      	movs	r2, #32
 800dbfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2200      	movs	r2, #0
 800dc02:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc0e:	bf00      	nop
 800dc10:	3720      	adds	r7, #32
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dc16:	b480      	push	{r7}
 800dc18:	b083      	sub	sp, #12
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dc1e:	bf00      	nop
 800dc20:	370c      	adds	r7, #12
 800dc22:	46bd      	mov	sp, r7
 800dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc28:	4770      	bx	lr

0800dc2a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dc2a:	b480      	push	{r7}
 800dc2c:	b083      	sub	sp, #12
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dc32:	bf00      	nop
 800dc34:	370c      	adds	r7, #12
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr

0800dc3e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dc3e:	b480      	push	{r7}
 800dc40:	b083      	sub	sp, #12
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dc46:	bf00      	nop
 800dc48:	370c      	adds	r7, #12
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr

0800dc52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dc52:	b480      	push	{r7}
 800dc54:	b085      	sub	sp, #20
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d101      	bne.n	800dc68 <HAL_UARTEx_DisableFifoMode+0x16>
 800dc64:	2302      	movs	r3, #2
 800dc66:	e027      	b.n	800dcb8 <HAL_UARTEx_DisableFifoMode+0x66>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2224      	movs	r2, #36	@ 0x24
 800dc74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f022 0201 	bic.w	r2, r2, #1
 800dc8e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dc96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	68fa      	ldr	r2, [r7, #12]
 800dca4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2220      	movs	r2, #32
 800dcaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dcb6:	2300      	movs	r3, #0
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3714      	adds	r7, #20
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr

0800dcc4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d101      	bne.n	800dcdc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dcd8:	2302      	movs	r3, #2
 800dcda:	e02d      	b.n	800dd38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2201      	movs	r2, #1
 800dce0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2224      	movs	r2, #36	@ 0x24
 800dce8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	681a      	ldr	r2, [r3, #0]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f022 0201 	bic.w	r2, r2, #1
 800dd02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	683a      	ldr	r2, [r7, #0]
 800dd14:	430a      	orrs	r2, r1
 800dd16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f000 f84f 	bl	800ddbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	68fa      	ldr	r2, [r7, #12]
 800dd24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2220      	movs	r2, #32
 800dd2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2200      	movs	r2, #0
 800dd32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd36:	2300      	movs	r3, #0
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3710      	adds	r7, #16
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d101      	bne.n	800dd58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dd54:	2302      	movs	r3, #2
 800dd56:	e02d      	b.n	800ddb4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2224      	movs	r2, #36	@ 0x24
 800dd64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f022 0201 	bic.w	r2, r2, #1
 800dd7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	683a      	ldr	r2, [r7, #0]
 800dd90:	430a      	orrs	r2, r1
 800dd92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 f811 	bl	800ddbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	68fa      	ldr	r2, [r7, #12]
 800dda0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2220      	movs	r2, #32
 800dda6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2200      	movs	r2, #0
 800ddae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ddb2:	2300      	movs	r3, #0
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3710      	adds	r7, #16
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b085      	sub	sp, #20
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d108      	bne.n	800ddde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2201      	movs	r2, #1
 800ddd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dddc:	e031      	b.n	800de42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ddde:	2308      	movs	r3, #8
 800dde0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dde2:	2308      	movs	r3, #8
 800dde4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	0e5b      	lsrs	r3, r3, #25
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	f003 0307 	and.w	r3, r3, #7
 800ddf4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	0f5b      	lsrs	r3, r3, #29
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	f003 0307 	and.w	r3, r3, #7
 800de04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de06:	7bbb      	ldrb	r3, [r7, #14]
 800de08:	7b3a      	ldrb	r2, [r7, #12]
 800de0a:	4911      	ldr	r1, [pc, #68]	@ (800de50 <UARTEx_SetNbDataToProcess+0x94>)
 800de0c:	5c8a      	ldrb	r2, [r1, r2]
 800de0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800de12:	7b3a      	ldrb	r2, [r7, #12]
 800de14:	490f      	ldr	r1, [pc, #60]	@ (800de54 <UARTEx_SetNbDataToProcess+0x98>)
 800de16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de18:	fb93 f3f2 	sdiv	r3, r3, r2
 800de1c:	b29a      	uxth	r2, r3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de24:	7bfb      	ldrb	r3, [r7, #15]
 800de26:	7b7a      	ldrb	r2, [r7, #13]
 800de28:	4909      	ldr	r1, [pc, #36]	@ (800de50 <UARTEx_SetNbDataToProcess+0x94>)
 800de2a:	5c8a      	ldrb	r2, [r1, r2]
 800de2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800de30:	7b7a      	ldrb	r2, [r7, #13]
 800de32:	4908      	ldr	r1, [pc, #32]	@ (800de54 <UARTEx_SetNbDataToProcess+0x98>)
 800de34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de36:	fb93 f3f2 	sdiv	r3, r3, r2
 800de3a:	b29a      	uxth	r2, r3
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800de42:	bf00      	nop
 800de44:	3714      	adds	r7, #20
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr
 800de4e:	bf00      	nop
 800de50:	0800ff80 	.word	0x0800ff80
 800de54:	0800ff88 	.word	0x0800ff88

0800de58 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800de58:	b480      	push	{r7}
 800de5a:	b08b      	sub	sp, #44	@ 0x2c
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	60b9      	str	r1, [r7, #8]
 800de62:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	685b      	ldr	r3, [r3, #4]
 800de68:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	881b      	ldrh	r3, [r3, #0]
 800de7a:	461a      	mov	r2, r3
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	885b      	ldrh	r3, [r3, #2]
 800de80:	fb02 f303 	mul.w	r3, r2, r3
 800de84:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800de8a:	e013      	b.n	800deb4 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800de8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de8e:	1d1a      	adds	r2, r3, #4
 800de90:	627a      	str	r2, [r7, #36]	@ 0x24
 800de92:	ed93 7a00 	vldr	s14, [r3]
 800de96:	6a3b      	ldr	r3, [r7, #32]
 800de98:	1d1a      	adds	r2, r3, #4
 800de9a:	623a      	str	r2, [r7, #32]
 800de9c:	edd3 7a00 	vldr	s15, [r3]
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	1d1a      	adds	r2, r3, #4
 800dea4:	61fa      	str	r2, [r7, #28]
 800dea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800deaa:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	3b01      	subs	r3, #1
 800deb2:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800deb4:	69bb      	ldr	r3, [r7, #24]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d1e8      	bne.n	800de8c <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800deba:	2300      	movs	r3, #0
 800debc:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800debe:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	372c      	adds	r7, #44	@ 0x2c
 800dec6:	46bd      	mov	sp, r7
 800dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800decc:	4770      	bx	lr

0800dece <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800dece:	b480      	push	{r7}
 800ded0:	b085      	sub	sp, #20
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	60f8      	str	r0, [r7, #12]
 800ded6:	607b      	str	r3, [r7, #4]
 800ded8:	460b      	mov	r3, r1
 800deda:	817b      	strh	r3, [r7, #10]
 800dedc:	4613      	mov	r3, r2
 800dede:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	897a      	ldrh	r2, [r7, #10]
 800dee4:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	893a      	ldrh	r2, [r7, #8]
 800deea:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	687a      	ldr	r2, [r7, #4]
 800def0:	605a      	str	r2, [r3, #4]
}
 800def2:	bf00      	nop
 800def4:	3714      	adds	r7, #20
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr

0800defe <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800defe:	b480      	push	{r7}
 800df00:	b093      	sub	sp, #76	@ 0x4c
 800df02:	af00      	add	r7, sp, #0
 800df04:	60f8      	str	r0, [r7, #12]
 800df06:	60b9      	str	r1, [r7, #8]
 800df08:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	685b      	ldr	r3, [r3, #4]
 800df0e:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	881b      	ldrh	r3, [r3, #0]
 800df2c:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	885b      	ldrh	r3, [r3, #2]
 800df32:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	885b      	ldrh	r3, [r3, #2]
 800df38:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800df3a:	2300      	movs	r3, #0
 800df3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df3e:	8b7b      	ldrh	r3, [r7, #26]
 800df40:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800df42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	69fa      	ldr	r2, [r7, #28]
 800df48:	4413      	add	r3, r2
 800df4a:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800df4c:	8b3b      	ldrh	r3, [r7, #24]
 800df4e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800df56:	f04f 0300 	mov.w	r3, #0
 800df5a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800df5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df5e:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800df60:	8afb      	ldrh	r3, [r7, #22]
 800df62:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800df64:	e017      	b.n	800df96 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800df66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df68:	1d1a      	adds	r2, r3, #4
 800df6a:	647a      	str	r2, [r7, #68]	@ 0x44
 800df6c:	ed93 7a00 	vldr	s14, [r3]
 800df70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800df72:	edd3 7a00 	vldr	s15, [r3]
 800df76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df7a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800df7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df82:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800df86:	8b3b      	ldrh	r3, [r7, #24]
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df8c:	4413      	add	r3, r2
 800df8e:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800df90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df92:	3b01      	subs	r3, #1
 800df94:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800df96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1e4      	bne.n	800df66 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800df9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df9e:	1d1a      	adds	r2, r3, #4
 800dfa0:	63ba      	str	r2, [r7, #56]	@ 0x38
 800dfa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dfa4:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800dfa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800dfac:	8b3a      	ldrh	r2, [r7, #24]
 800dfae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfb0:	1ad3      	subs	r3, r2, r3
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	6a3a      	ldr	r2, [r7, #32]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800dfba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d1ca      	bne.n	800df56 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800dfc0:	8b3b      	ldrh	r3, [r7, #24]
 800dfc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfc4:	4413      	add	r3, r2
 800dfc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800dfc8:	8afb      	ldrh	r3, [r7, #22]
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dfce:	4413      	add	r3, r2
 800dfd0:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800dfd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfd4:	3b01      	subs	r3, #1
 800dfd6:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800dfd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d1b1      	bne.n	800df42 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800dfe2:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	374c      	adds	r7, #76	@ 0x4c
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr

0800dff2 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800dff2:	b480      	push	{r7}
 800dff4:	b08b      	sub	sp, #44	@ 0x2c
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	60f8      	str	r0, [r7, #12]
 800dffa:	ed87 0a02 	vstr	s0, [r7, #8]
 800dffe:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	881b      	ldrh	r3, [r3, #0]
 800e010:	461a      	mov	r2, r3
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	885b      	ldrh	r3, [r3, #2]
 800e016:	fb02 f303 	mul.w	r3, r2, r3
 800e01a:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800e01c:	69bb      	ldr	r3, [r7, #24]
 800e01e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800e020:	e010      	b.n	800e044 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800e022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e024:	1d1a      	adds	r2, r3, #4
 800e026:	627a      	str	r2, [r7, #36]	@ 0x24
 800e028:	ed93 7a00 	vldr	s14, [r3]
 800e02c:	6a3b      	ldr	r3, [r7, #32]
 800e02e:	1d1a      	adds	r2, r3, #4
 800e030:	623a      	str	r2, [r7, #32]
 800e032:	edd7 7a02 	vldr	s15, [r7, #8]
 800e036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e03a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800e03e:	69fb      	ldr	r3, [r7, #28]
 800e040:	3b01      	subs	r3, #1
 800e042:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800e044:	69fb      	ldr	r3, [r7, #28]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d1eb      	bne.n	800e022 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800e04a:	2300      	movs	r3, #0
 800e04c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800e04e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e052:	4618      	mov	r0, r3
 800e054:	372c      	adds	r7, #44	@ 0x2c
 800e056:	46bd      	mov	sp, r7
 800e058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05c:	4770      	bx	lr
	...

0800e060 <malloc>:
 800e060:	4b02      	ldr	r3, [pc, #8]	@ (800e06c <malloc+0xc>)
 800e062:	4601      	mov	r1, r0
 800e064:	6818      	ldr	r0, [r3, #0]
 800e066:	f000 b825 	b.w	800e0b4 <_malloc_r>
 800e06a:	bf00      	nop
 800e06c:	20000100 	.word	0x20000100

0800e070 <sbrk_aligned>:
 800e070:	b570      	push	{r4, r5, r6, lr}
 800e072:	4e0f      	ldr	r6, [pc, #60]	@ (800e0b0 <sbrk_aligned+0x40>)
 800e074:	460c      	mov	r4, r1
 800e076:	6831      	ldr	r1, [r6, #0]
 800e078:	4605      	mov	r5, r0
 800e07a:	b911      	cbnz	r1, 800e082 <sbrk_aligned+0x12>
 800e07c:	f000 f8ae 	bl	800e1dc <_sbrk_r>
 800e080:	6030      	str	r0, [r6, #0]
 800e082:	4621      	mov	r1, r4
 800e084:	4628      	mov	r0, r5
 800e086:	f000 f8a9 	bl	800e1dc <_sbrk_r>
 800e08a:	1c43      	adds	r3, r0, #1
 800e08c:	d103      	bne.n	800e096 <sbrk_aligned+0x26>
 800e08e:	f04f 34ff 	mov.w	r4, #4294967295
 800e092:	4620      	mov	r0, r4
 800e094:	bd70      	pop	{r4, r5, r6, pc}
 800e096:	1cc4      	adds	r4, r0, #3
 800e098:	f024 0403 	bic.w	r4, r4, #3
 800e09c:	42a0      	cmp	r0, r4
 800e09e:	d0f8      	beq.n	800e092 <sbrk_aligned+0x22>
 800e0a0:	1a21      	subs	r1, r4, r0
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	f000 f89a 	bl	800e1dc <_sbrk_r>
 800e0a8:	3001      	adds	r0, #1
 800e0aa:	d1f2      	bne.n	800e092 <sbrk_aligned+0x22>
 800e0ac:	e7ef      	b.n	800e08e <sbrk_aligned+0x1e>
 800e0ae:	bf00      	nop
 800e0b0:	20002088 	.word	0x20002088

0800e0b4 <_malloc_r>:
 800e0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0b8:	1ccd      	adds	r5, r1, #3
 800e0ba:	f025 0503 	bic.w	r5, r5, #3
 800e0be:	3508      	adds	r5, #8
 800e0c0:	2d0c      	cmp	r5, #12
 800e0c2:	bf38      	it	cc
 800e0c4:	250c      	movcc	r5, #12
 800e0c6:	2d00      	cmp	r5, #0
 800e0c8:	4606      	mov	r6, r0
 800e0ca:	db01      	blt.n	800e0d0 <_malloc_r+0x1c>
 800e0cc:	42a9      	cmp	r1, r5
 800e0ce:	d904      	bls.n	800e0da <_malloc_r+0x26>
 800e0d0:	230c      	movs	r3, #12
 800e0d2:	6033      	str	r3, [r6, #0]
 800e0d4:	2000      	movs	r0, #0
 800e0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e1b0 <_malloc_r+0xfc>
 800e0de:	f000 f869 	bl	800e1b4 <__malloc_lock>
 800e0e2:	f8d8 3000 	ldr.w	r3, [r8]
 800e0e6:	461c      	mov	r4, r3
 800e0e8:	bb44      	cbnz	r4, 800e13c <_malloc_r+0x88>
 800e0ea:	4629      	mov	r1, r5
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	f7ff ffbf 	bl	800e070 <sbrk_aligned>
 800e0f2:	1c43      	adds	r3, r0, #1
 800e0f4:	4604      	mov	r4, r0
 800e0f6:	d158      	bne.n	800e1aa <_malloc_r+0xf6>
 800e0f8:	f8d8 4000 	ldr.w	r4, [r8]
 800e0fc:	4627      	mov	r7, r4
 800e0fe:	2f00      	cmp	r7, #0
 800e100:	d143      	bne.n	800e18a <_malloc_r+0xd6>
 800e102:	2c00      	cmp	r4, #0
 800e104:	d04b      	beq.n	800e19e <_malloc_r+0xea>
 800e106:	6823      	ldr	r3, [r4, #0]
 800e108:	4639      	mov	r1, r7
 800e10a:	4630      	mov	r0, r6
 800e10c:	eb04 0903 	add.w	r9, r4, r3
 800e110:	f000 f864 	bl	800e1dc <_sbrk_r>
 800e114:	4581      	cmp	r9, r0
 800e116:	d142      	bne.n	800e19e <_malloc_r+0xea>
 800e118:	6821      	ldr	r1, [r4, #0]
 800e11a:	1a6d      	subs	r5, r5, r1
 800e11c:	4629      	mov	r1, r5
 800e11e:	4630      	mov	r0, r6
 800e120:	f7ff ffa6 	bl	800e070 <sbrk_aligned>
 800e124:	3001      	adds	r0, #1
 800e126:	d03a      	beq.n	800e19e <_malloc_r+0xea>
 800e128:	6823      	ldr	r3, [r4, #0]
 800e12a:	442b      	add	r3, r5
 800e12c:	6023      	str	r3, [r4, #0]
 800e12e:	f8d8 3000 	ldr.w	r3, [r8]
 800e132:	685a      	ldr	r2, [r3, #4]
 800e134:	bb62      	cbnz	r2, 800e190 <_malloc_r+0xdc>
 800e136:	f8c8 7000 	str.w	r7, [r8]
 800e13a:	e00f      	b.n	800e15c <_malloc_r+0xa8>
 800e13c:	6822      	ldr	r2, [r4, #0]
 800e13e:	1b52      	subs	r2, r2, r5
 800e140:	d420      	bmi.n	800e184 <_malloc_r+0xd0>
 800e142:	2a0b      	cmp	r2, #11
 800e144:	d917      	bls.n	800e176 <_malloc_r+0xc2>
 800e146:	1961      	adds	r1, r4, r5
 800e148:	42a3      	cmp	r3, r4
 800e14a:	6025      	str	r5, [r4, #0]
 800e14c:	bf18      	it	ne
 800e14e:	6059      	strne	r1, [r3, #4]
 800e150:	6863      	ldr	r3, [r4, #4]
 800e152:	bf08      	it	eq
 800e154:	f8c8 1000 	streq.w	r1, [r8]
 800e158:	5162      	str	r2, [r4, r5]
 800e15a:	604b      	str	r3, [r1, #4]
 800e15c:	4630      	mov	r0, r6
 800e15e:	f000 f82f 	bl	800e1c0 <__malloc_unlock>
 800e162:	f104 000b 	add.w	r0, r4, #11
 800e166:	1d23      	adds	r3, r4, #4
 800e168:	f020 0007 	bic.w	r0, r0, #7
 800e16c:	1ac2      	subs	r2, r0, r3
 800e16e:	bf1c      	itt	ne
 800e170:	1a1b      	subne	r3, r3, r0
 800e172:	50a3      	strne	r3, [r4, r2]
 800e174:	e7af      	b.n	800e0d6 <_malloc_r+0x22>
 800e176:	6862      	ldr	r2, [r4, #4]
 800e178:	42a3      	cmp	r3, r4
 800e17a:	bf0c      	ite	eq
 800e17c:	f8c8 2000 	streq.w	r2, [r8]
 800e180:	605a      	strne	r2, [r3, #4]
 800e182:	e7eb      	b.n	800e15c <_malloc_r+0xa8>
 800e184:	4623      	mov	r3, r4
 800e186:	6864      	ldr	r4, [r4, #4]
 800e188:	e7ae      	b.n	800e0e8 <_malloc_r+0x34>
 800e18a:	463c      	mov	r4, r7
 800e18c:	687f      	ldr	r7, [r7, #4]
 800e18e:	e7b6      	b.n	800e0fe <_malloc_r+0x4a>
 800e190:	461a      	mov	r2, r3
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	42a3      	cmp	r3, r4
 800e196:	d1fb      	bne.n	800e190 <_malloc_r+0xdc>
 800e198:	2300      	movs	r3, #0
 800e19a:	6053      	str	r3, [r2, #4]
 800e19c:	e7de      	b.n	800e15c <_malloc_r+0xa8>
 800e19e:	230c      	movs	r3, #12
 800e1a0:	6033      	str	r3, [r6, #0]
 800e1a2:	4630      	mov	r0, r6
 800e1a4:	f000 f80c 	bl	800e1c0 <__malloc_unlock>
 800e1a8:	e794      	b.n	800e0d4 <_malloc_r+0x20>
 800e1aa:	6005      	str	r5, [r0, #0]
 800e1ac:	e7d6      	b.n	800e15c <_malloc_r+0xa8>
 800e1ae:	bf00      	nop
 800e1b0:	2000208c 	.word	0x2000208c

0800e1b4 <__malloc_lock>:
 800e1b4:	4801      	ldr	r0, [pc, #4]	@ (800e1bc <__malloc_lock+0x8>)
 800e1b6:	f000 b84b 	b.w	800e250 <__retarget_lock_acquire_recursive>
 800e1ba:	bf00      	nop
 800e1bc:	200021cc 	.word	0x200021cc

0800e1c0 <__malloc_unlock>:
 800e1c0:	4801      	ldr	r0, [pc, #4]	@ (800e1c8 <__malloc_unlock+0x8>)
 800e1c2:	f000 b846 	b.w	800e252 <__retarget_lock_release_recursive>
 800e1c6:	bf00      	nop
 800e1c8:	200021cc 	.word	0x200021cc

0800e1cc <memset>:
 800e1cc:	4402      	add	r2, r0
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d100      	bne.n	800e1d6 <memset+0xa>
 800e1d4:	4770      	bx	lr
 800e1d6:	f803 1b01 	strb.w	r1, [r3], #1
 800e1da:	e7f9      	b.n	800e1d0 <memset+0x4>

0800e1dc <_sbrk_r>:
 800e1dc:	b538      	push	{r3, r4, r5, lr}
 800e1de:	4d06      	ldr	r5, [pc, #24]	@ (800e1f8 <_sbrk_r+0x1c>)
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	4604      	mov	r4, r0
 800e1e4:	4608      	mov	r0, r1
 800e1e6:	602b      	str	r3, [r5, #0]
 800e1e8:	f7f7 fd62 	bl	8005cb0 <_sbrk>
 800e1ec:	1c43      	adds	r3, r0, #1
 800e1ee:	d102      	bne.n	800e1f6 <_sbrk_r+0x1a>
 800e1f0:	682b      	ldr	r3, [r5, #0]
 800e1f2:	b103      	cbz	r3, 800e1f6 <_sbrk_r+0x1a>
 800e1f4:	6023      	str	r3, [r4, #0]
 800e1f6:	bd38      	pop	{r3, r4, r5, pc}
 800e1f8:	200021c8 	.word	0x200021c8

0800e1fc <__errno>:
 800e1fc:	4b01      	ldr	r3, [pc, #4]	@ (800e204 <__errno+0x8>)
 800e1fe:	6818      	ldr	r0, [r3, #0]
 800e200:	4770      	bx	lr
 800e202:	bf00      	nop
 800e204:	20000100 	.word	0x20000100

0800e208 <__libc_init_array>:
 800e208:	b570      	push	{r4, r5, r6, lr}
 800e20a:	4d0d      	ldr	r5, [pc, #52]	@ (800e240 <__libc_init_array+0x38>)
 800e20c:	4c0d      	ldr	r4, [pc, #52]	@ (800e244 <__libc_init_array+0x3c>)
 800e20e:	1b64      	subs	r4, r4, r5
 800e210:	10a4      	asrs	r4, r4, #2
 800e212:	2600      	movs	r6, #0
 800e214:	42a6      	cmp	r6, r4
 800e216:	d109      	bne.n	800e22c <__libc_init_array+0x24>
 800e218:	4d0b      	ldr	r5, [pc, #44]	@ (800e248 <__libc_init_array+0x40>)
 800e21a:	4c0c      	ldr	r4, [pc, #48]	@ (800e24c <__libc_init_array+0x44>)
 800e21c:	f001 fe84 	bl	800ff28 <_init>
 800e220:	1b64      	subs	r4, r4, r5
 800e222:	10a4      	asrs	r4, r4, #2
 800e224:	2600      	movs	r6, #0
 800e226:	42a6      	cmp	r6, r4
 800e228:	d105      	bne.n	800e236 <__libc_init_array+0x2e>
 800e22a:	bd70      	pop	{r4, r5, r6, pc}
 800e22c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e230:	4798      	blx	r3
 800e232:	3601      	adds	r6, #1
 800e234:	e7ee      	b.n	800e214 <__libc_init_array+0xc>
 800e236:	f855 3b04 	ldr.w	r3, [r5], #4
 800e23a:	4798      	blx	r3
 800e23c:	3601      	adds	r6, #1
 800e23e:	e7f2      	b.n	800e226 <__libc_init_array+0x1e>
 800e240:	08010548 	.word	0x08010548
 800e244:	08010548 	.word	0x08010548
 800e248:	08010548 	.word	0x08010548
 800e24c:	0801054c 	.word	0x0801054c

0800e250 <__retarget_lock_acquire_recursive>:
 800e250:	4770      	bx	lr

0800e252 <__retarget_lock_release_recursive>:
 800e252:	4770      	bx	lr

0800e254 <memcpy>:
 800e254:	440a      	add	r2, r1
 800e256:	4291      	cmp	r1, r2
 800e258:	f100 33ff 	add.w	r3, r0, #4294967295
 800e25c:	d100      	bne.n	800e260 <memcpy+0xc>
 800e25e:	4770      	bx	lr
 800e260:	b510      	push	{r4, lr}
 800e262:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e26a:	4291      	cmp	r1, r2
 800e26c:	d1f9      	bne.n	800e262 <memcpy+0xe>
 800e26e:	bd10      	pop	{r4, pc}

0800e270 <sin>:
 800e270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e272:	ec53 2b10 	vmov	r2, r3, d0
 800e276:	4826      	ldr	r0, [pc, #152]	@ (800e310 <sin+0xa0>)
 800e278:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e27c:	4281      	cmp	r1, r0
 800e27e:	d807      	bhi.n	800e290 <sin+0x20>
 800e280:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800e308 <sin+0x98>
 800e284:	2000      	movs	r0, #0
 800e286:	b005      	add	sp, #20
 800e288:	f85d eb04 	ldr.w	lr, [sp], #4
 800e28c:	f000 b9d8 	b.w	800e640 <__kernel_sin>
 800e290:	4820      	ldr	r0, [pc, #128]	@ (800e314 <sin+0xa4>)
 800e292:	4281      	cmp	r1, r0
 800e294:	d908      	bls.n	800e2a8 <sin+0x38>
 800e296:	4610      	mov	r0, r2
 800e298:	4619      	mov	r1, r3
 800e29a:	f7f1 ffc1 	bl	8000220 <__aeabi_dsub>
 800e29e:	ec41 0b10 	vmov	d0, r0, r1
 800e2a2:	b005      	add	sp, #20
 800e2a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e2a8:	4668      	mov	r0, sp
 800e2aa:	f000 fa85 	bl	800e7b8 <__ieee754_rem_pio2>
 800e2ae:	f000 0003 	and.w	r0, r0, #3
 800e2b2:	2801      	cmp	r0, #1
 800e2b4:	d00c      	beq.n	800e2d0 <sin+0x60>
 800e2b6:	2802      	cmp	r0, #2
 800e2b8:	d011      	beq.n	800e2de <sin+0x6e>
 800e2ba:	b9e8      	cbnz	r0, 800e2f8 <sin+0x88>
 800e2bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e2c0:	ed9d 0b00 	vldr	d0, [sp]
 800e2c4:	2001      	movs	r0, #1
 800e2c6:	f000 f9bb 	bl	800e640 <__kernel_sin>
 800e2ca:	ec51 0b10 	vmov	r0, r1, d0
 800e2ce:	e7e6      	b.n	800e29e <sin+0x2e>
 800e2d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e2d4:	ed9d 0b00 	vldr	d0, [sp]
 800e2d8:	f000 f8ea 	bl	800e4b0 <__kernel_cos>
 800e2dc:	e7f5      	b.n	800e2ca <sin+0x5a>
 800e2de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e2e2:	ed9d 0b00 	vldr	d0, [sp]
 800e2e6:	2001      	movs	r0, #1
 800e2e8:	f000 f9aa 	bl	800e640 <__kernel_sin>
 800e2ec:	ec53 2b10 	vmov	r2, r3, d0
 800e2f0:	4610      	mov	r0, r2
 800e2f2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e2f6:	e7d2      	b.n	800e29e <sin+0x2e>
 800e2f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e2fc:	ed9d 0b00 	vldr	d0, [sp]
 800e300:	f000 f8d6 	bl	800e4b0 <__kernel_cos>
 800e304:	e7f2      	b.n	800e2ec <sin+0x7c>
 800e306:	bf00      	nop
	...
 800e310:	3fe921fb 	.word	0x3fe921fb
 800e314:	7fefffff 	.word	0x7fefffff

0800e318 <fmodf>:
 800e318:	b508      	push	{r3, lr}
 800e31a:	ed2d 8b02 	vpush	{d8}
 800e31e:	eef0 8a40 	vmov.f32	s17, s0
 800e322:	eeb0 8a60 	vmov.f32	s16, s1
 800e326:	f000 fceb 	bl	800ed00 <__ieee754_fmodf>
 800e32a:	eef4 8a48 	vcmp.f32	s17, s16
 800e32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e332:	d60c      	bvs.n	800e34e <fmodf+0x36>
 800e334:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800e354 <fmodf+0x3c>
 800e338:	eeb4 8a68 	vcmp.f32	s16, s17
 800e33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e340:	d105      	bne.n	800e34e <fmodf+0x36>
 800e342:	f7ff ff5b 	bl	800e1fc <__errno>
 800e346:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e34a:	2321      	movs	r3, #33	@ 0x21
 800e34c:	6003      	str	r3, [r0, #0]
 800e34e:	ecbd 8b02 	vpop	{d8}
 800e352:	bd08      	pop	{r3, pc}
 800e354:	00000000 	.word	0x00000000

0800e358 <sqrtf>:
 800e358:	b508      	push	{r3, lr}
 800e35a:	ed2d 8b02 	vpush	{d8}
 800e35e:	eeb0 8a40 	vmov.f32	s16, s0
 800e362:	f000 f8a1 	bl	800e4a8 <__ieee754_sqrtf>
 800e366:	eeb4 8a48 	vcmp.f32	s16, s16
 800e36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e36e:	d60c      	bvs.n	800e38a <sqrtf+0x32>
 800e370:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800e390 <sqrtf+0x38>
 800e374:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e37c:	d505      	bpl.n	800e38a <sqrtf+0x32>
 800e37e:	f7ff ff3d 	bl	800e1fc <__errno>
 800e382:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e386:	2321      	movs	r3, #33	@ 0x21
 800e388:	6003      	str	r3, [r0, #0]
 800e38a:	ecbd 8b02 	vpop	{d8}
 800e38e:	bd08      	pop	{r3, pc}
 800e390:	00000000 	.word	0x00000000

0800e394 <cosf>:
 800e394:	ee10 3a10 	vmov	r3, s0
 800e398:	b507      	push	{r0, r1, r2, lr}
 800e39a:	4a1e      	ldr	r2, [pc, #120]	@ (800e414 <cosf+0x80>)
 800e39c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d806      	bhi.n	800e3b2 <cosf+0x1e>
 800e3a4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800e418 <cosf+0x84>
 800e3a8:	b003      	add	sp, #12
 800e3aa:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3ae:	f000 bc07 	b.w	800ebc0 <__kernel_cosf>
 800e3b2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e3b6:	d304      	bcc.n	800e3c2 <cosf+0x2e>
 800e3b8:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e3bc:	b003      	add	sp, #12
 800e3be:	f85d fb04 	ldr.w	pc, [sp], #4
 800e3c2:	4668      	mov	r0, sp
 800e3c4:	f000 fd1e 	bl	800ee04 <__ieee754_rem_pio2f>
 800e3c8:	f000 0003 	and.w	r0, r0, #3
 800e3cc:	2801      	cmp	r0, #1
 800e3ce:	d009      	beq.n	800e3e4 <cosf+0x50>
 800e3d0:	2802      	cmp	r0, #2
 800e3d2:	d010      	beq.n	800e3f6 <cosf+0x62>
 800e3d4:	b9b0      	cbnz	r0, 800e404 <cosf+0x70>
 800e3d6:	eddd 0a01 	vldr	s1, [sp, #4]
 800e3da:	ed9d 0a00 	vldr	s0, [sp]
 800e3de:	f000 fbef 	bl	800ebc0 <__kernel_cosf>
 800e3e2:	e7eb      	b.n	800e3bc <cosf+0x28>
 800e3e4:	eddd 0a01 	vldr	s1, [sp, #4]
 800e3e8:	ed9d 0a00 	vldr	s0, [sp]
 800e3ec:	f000 fc40 	bl	800ec70 <__kernel_sinf>
 800e3f0:	eeb1 0a40 	vneg.f32	s0, s0
 800e3f4:	e7e2      	b.n	800e3bc <cosf+0x28>
 800e3f6:	eddd 0a01 	vldr	s1, [sp, #4]
 800e3fa:	ed9d 0a00 	vldr	s0, [sp]
 800e3fe:	f000 fbdf 	bl	800ebc0 <__kernel_cosf>
 800e402:	e7f5      	b.n	800e3f0 <cosf+0x5c>
 800e404:	eddd 0a01 	vldr	s1, [sp, #4]
 800e408:	ed9d 0a00 	vldr	s0, [sp]
 800e40c:	2001      	movs	r0, #1
 800e40e:	f000 fc2f 	bl	800ec70 <__kernel_sinf>
 800e412:	e7d3      	b.n	800e3bc <cosf+0x28>
 800e414:	3f490fd8 	.word	0x3f490fd8
 800e418:	00000000 	.word	0x00000000

0800e41c <sinf>:
 800e41c:	ee10 3a10 	vmov	r3, s0
 800e420:	b507      	push	{r0, r1, r2, lr}
 800e422:	4a1f      	ldr	r2, [pc, #124]	@ (800e4a0 <sinf+0x84>)
 800e424:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e428:	4293      	cmp	r3, r2
 800e42a:	d807      	bhi.n	800e43c <sinf+0x20>
 800e42c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800e4a4 <sinf+0x88>
 800e430:	2000      	movs	r0, #0
 800e432:	b003      	add	sp, #12
 800e434:	f85d eb04 	ldr.w	lr, [sp], #4
 800e438:	f000 bc1a 	b.w	800ec70 <__kernel_sinf>
 800e43c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e440:	d304      	bcc.n	800e44c <sinf+0x30>
 800e442:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e446:	b003      	add	sp, #12
 800e448:	f85d fb04 	ldr.w	pc, [sp], #4
 800e44c:	4668      	mov	r0, sp
 800e44e:	f000 fcd9 	bl	800ee04 <__ieee754_rem_pio2f>
 800e452:	f000 0003 	and.w	r0, r0, #3
 800e456:	2801      	cmp	r0, #1
 800e458:	d00a      	beq.n	800e470 <sinf+0x54>
 800e45a:	2802      	cmp	r0, #2
 800e45c:	d00f      	beq.n	800e47e <sinf+0x62>
 800e45e:	b9c0      	cbnz	r0, 800e492 <sinf+0x76>
 800e460:	eddd 0a01 	vldr	s1, [sp, #4]
 800e464:	ed9d 0a00 	vldr	s0, [sp]
 800e468:	2001      	movs	r0, #1
 800e46a:	f000 fc01 	bl	800ec70 <__kernel_sinf>
 800e46e:	e7ea      	b.n	800e446 <sinf+0x2a>
 800e470:	eddd 0a01 	vldr	s1, [sp, #4]
 800e474:	ed9d 0a00 	vldr	s0, [sp]
 800e478:	f000 fba2 	bl	800ebc0 <__kernel_cosf>
 800e47c:	e7e3      	b.n	800e446 <sinf+0x2a>
 800e47e:	eddd 0a01 	vldr	s1, [sp, #4]
 800e482:	ed9d 0a00 	vldr	s0, [sp]
 800e486:	2001      	movs	r0, #1
 800e488:	f000 fbf2 	bl	800ec70 <__kernel_sinf>
 800e48c:	eeb1 0a40 	vneg.f32	s0, s0
 800e490:	e7d9      	b.n	800e446 <sinf+0x2a>
 800e492:	eddd 0a01 	vldr	s1, [sp, #4]
 800e496:	ed9d 0a00 	vldr	s0, [sp]
 800e49a:	f000 fb91 	bl	800ebc0 <__kernel_cosf>
 800e49e:	e7f5      	b.n	800e48c <sinf+0x70>
 800e4a0:	3f490fd8 	.word	0x3f490fd8
 800e4a4:	00000000 	.word	0x00000000

0800e4a8 <__ieee754_sqrtf>:
 800e4a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e4ac:	4770      	bx	lr
	...

0800e4b0 <__kernel_cos>:
 800e4b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b4:	ec57 6b10 	vmov	r6, r7, d0
 800e4b8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e4bc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800e4c0:	ed8d 1b00 	vstr	d1, [sp]
 800e4c4:	d206      	bcs.n	800e4d4 <__kernel_cos+0x24>
 800e4c6:	4630      	mov	r0, r6
 800e4c8:	4639      	mov	r1, r7
 800e4ca:	f7f2 fafb 	bl	8000ac4 <__aeabi_d2iz>
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	f000 8088 	beq.w	800e5e4 <__kernel_cos+0x134>
 800e4d4:	4632      	mov	r2, r6
 800e4d6:	463b      	mov	r3, r7
 800e4d8:	4630      	mov	r0, r6
 800e4da:	4639      	mov	r1, r7
 800e4dc:	f7f2 f858 	bl	8000590 <__aeabi_dmul>
 800e4e0:	4b51      	ldr	r3, [pc, #324]	@ (800e628 <__kernel_cos+0x178>)
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	460d      	mov	r5, r1
 800e4e8:	f7f2 f852 	bl	8000590 <__aeabi_dmul>
 800e4ec:	a340      	add	r3, pc, #256	@ (adr r3, 800e5f0 <__kernel_cos+0x140>)
 800e4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f2:	4682      	mov	sl, r0
 800e4f4:	468b      	mov	fp, r1
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	4629      	mov	r1, r5
 800e4fa:	f7f2 f849 	bl	8000590 <__aeabi_dmul>
 800e4fe:	a33e      	add	r3, pc, #248	@ (adr r3, 800e5f8 <__kernel_cos+0x148>)
 800e500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e504:	f7f1 fe8e 	bl	8000224 <__adddf3>
 800e508:	4622      	mov	r2, r4
 800e50a:	462b      	mov	r3, r5
 800e50c:	f7f2 f840 	bl	8000590 <__aeabi_dmul>
 800e510:	a33b      	add	r3, pc, #236	@ (adr r3, 800e600 <__kernel_cos+0x150>)
 800e512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e516:	f7f1 fe83 	bl	8000220 <__aeabi_dsub>
 800e51a:	4622      	mov	r2, r4
 800e51c:	462b      	mov	r3, r5
 800e51e:	f7f2 f837 	bl	8000590 <__aeabi_dmul>
 800e522:	a339      	add	r3, pc, #228	@ (adr r3, 800e608 <__kernel_cos+0x158>)
 800e524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e528:	f7f1 fe7c 	bl	8000224 <__adddf3>
 800e52c:	4622      	mov	r2, r4
 800e52e:	462b      	mov	r3, r5
 800e530:	f7f2 f82e 	bl	8000590 <__aeabi_dmul>
 800e534:	a336      	add	r3, pc, #216	@ (adr r3, 800e610 <__kernel_cos+0x160>)
 800e536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53a:	f7f1 fe71 	bl	8000220 <__aeabi_dsub>
 800e53e:	4622      	mov	r2, r4
 800e540:	462b      	mov	r3, r5
 800e542:	f7f2 f825 	bl	8000590 <__aeabi_dmul>
 800e546:	a334      	add	r3, pc, #208	@ (adr r3, 800e618 <__kernel_cos+0x168>)
 800e548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54c:	f7f1 fe6a 	bl	8000224 <__adddf3>
 800e550:	4622      	mov	r2, r4
 800e552:	462b      	mov	r3, r5
 800e554:	f7f2 f81c 	bl	8000590 <__aeabi_dmul>
 800e558:	4622      	mov	r2, r4
 800e55a:	462b      	mov	r3, r5
 800e55c:	f7f2 f818 	bl	8000590 <__aeabi_dmul>
 800e560:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e564:	4604      	mov	r4, r0
 800e566:	460d      	mov	r5, r1
 800e568:	4630      	mov	r0, r6
 800e56a:	4639      	mov	r1, r7
 800e56c:	f7f2 f810 	bl	8000590 <__aeabi_dmul>
 800e570:	460b      	mov	r3, r1
 800e572:	4602      	mov	r2, r0
 800e574:	4629      	mov	r1, r5
 800e576:	4620      	mov	r0, r4
 800e578:	f7f1 fe52 	bl	8000220 <__aeabi_dsub>
 800e57c:	4b2b      	ldr	r3, [pc, #172]	@ (800e62c <__kernel_cos+0x17c>)
 800e57e:	4598      	cmp	r8, r3
 800e580:	4606      	mov	r6, r0
 800e582:	460f      	mov	r7, r1
 800e584:	d810      	bhi.n	800e5a8 <__kernel_cos+0xf8>
 800e586:	4602      	mov	r2, r0
 800e588:	460b      	mov	r3, r1
 800e58a:	4650      	mov	r0, sl
 800e58c:	4659      	mov	r1, fp
 800e58e:	f7f1 fe47 	bl	8000220 <__aeabi_dsub>
 800e592:	460b      	mov	r3, r1
 800e594:	4926      	ldr	r1, [pc, #152]	@ (800e630 <__kernel_cos+0x180>)
 800e596:	4602      	mov	r2, r0
 800e598:	2000      	movs	r0, #0
 800e59a:	f7f1 fe41 	bl	8000220 <__aeabi_dsub>
 800e59e:	ec41 0b10 	vmov	d0, r0, r1
 800e5a2:	b003      	add	sp, #12
 800e5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a8:	4b22      	ldr	r3, [pc, #136]	@ (800e634 <__kernel_cos+0x184>)
 800e5aa:	4921      	ldr	r1, [pc, #132]	@ (800e630 <__kernel_cos+0x180>)
 800e5ac:	4598      	cmp	r8, r3
 800e5ae:	bf8c      	ite	hi
 800e5b0:	4d21      	ldrhi	r5, [pc, #132]	@ (800e638 <__kernel_cos+0x188>)
 800e5b2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800e5b6:	2400      	movs	r4, #0
 800e5b8:	4622      	mov	r2, r4
 800e5ba:	462b      	mov	r3, r5
 800e5bc:	2000      	movs	r0, #0
 800e5be:	f7f1 fe2f 	bl	8000220 <__aeabi_dsub>
 800e5c2:	4622      	mov	r2, r4
 800e5c4:	4680      	mov	r8, r0
 800e5c6:	4689      	mov	r9, r1
 800e5c8:	462b      	mov	r3, r5
 800e5ca:	4650      	mov	r0, sl
 800e5cc:	4659      	mov	r1, fp
 800e5ce:	f7f1 fe27 	bl	8000220 <__aeabi_dsub>
 800e5d2:	4632      	mov	r2, r6
 800e5d4:	463b      	mov	r3, r7
 800e5d6:	f7f1 fe23 	bl	8000220 <__aeabi_dsub>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	460b      	mov	r3, r1
 800e5de:	4640      	mov	r0, r8
 800e5e0:	4649      	mov	r1, r9
 800e5e2:	e7da      	b.n	800e59a <__kernel_cos+0xea>
 800e5e4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800e620 <__kernel_cos+0x170>
 800e5e8:	e7db      	b.n	800e5a2 <__kernel_cos+0xf2>
 800e5ea:	bf00      	nop
 800e5ec:	f3af 8000 	nop.w
 800e5f0:	be8838d4 	.word	0xbe8838d4
 800e5f4:	bda8fae9 	.word	0xbda8fae9
 800e5f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800e5fc:	3e21ee9e 	.word	0x3e21ee9e
 800e600:	809c52ad 	.word	0x809c52ad
 800e604:	3e927e4f 	.word	0x3e927e4f
 800e608:	19cb1590 	.word	0x19cb1590
 800e60c:	3efa01a0 	.word	0x3efa01a0
 800e610:	16c15177 	.word	0x16c15177
 800e614:	3f56c16c 	.word	0x3f56c16c
 800e618:	5555554c 	.word	0x5555554c
 800e61c:	3fa55555 	.word	0x3fa55555
 800e620:	00000000 	.word	0x00000000
 800e624:	3ff00000 	.word	0x3ff00000
 800e628:	3fe00000 	.word	0x3fe00000
 800e62c:	3fd33332 	.word	0x3fd33332
 800e630:	3ff00000 	.word	0x3ff00000
 800e634:	3fe90000 	.word	0x3fe90000
 800e638:	3fd20000 	.word	0x3fd20000
 800e63c:	00000000 	.word	0x00000000

0800e640 <__kernel_sin>:
 800e640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e644:	ec55 4b10 	vmov	r4, r5, d0
 800e648:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e64c:	b085      	sub	sp, #20
 800e64e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800e652:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e656:	4680      	mov	r8, r0
 800e658:	d205      	bcs.n	800e666 <__kernel_sin+0x26>
 800e65a:	4620      	mov	r0, r4
 800e65c:	4629      	mov	r1, r5
 800e65e:	f7f2 fa31 	bl	8000ac4 <__aeabi_d2iz>
 800e662:	2800      	cmp	r0, #0
 800e664:	d052      	beq.n	800e70c <__kernel_sin+0xcc>
 800e666:	4622      	mov	r2, r4
 800e668:	462b      	mov	r3, r5
 800e66a:	4620      	mov	r0, r4
 800e66c:	4629      	mov	r1, r5
 800e66e:	f7f1 ff8f 	bl	8000590 <__aeabi_dmul>
 800e672:	4682      	mov	sl, r0
 800e674:	468b      	mov	fp, r1
 800e676:	4602      	mov	r2, r0
 800e678:	460b      	mov	r3, r1
 800e67a:	4620      	mov	r0, r4
 800e67c:	4629      	mov	r1, r5
 800e67e:	f7f1 ff87 	bl	8000590 <__aeabi_dmul>
 800e682:	a342      	add	r3, pc, #264	@ (adr r3, 800e78c <__kernel_sin+0x14c>)
 800e684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e688:	e9cd 0100 	strd	r0, r1, [sp]
 800e68c:	4650      	mov	r0, sl
 800e68e:	4659      	mov	r1, fp
 800e690:	f7f1 ff7e 	bl	8000590 <__aeabi_dmul>
 800e694:	a33f      	add	r3, pc, #252	@ (adr r3, 800e794 <__kernel_sin+0x154>)
 800e696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69a:	f7f1 fdc1 	bl	8000220 <__aeabi_dsub>
 800e69e:	4652      	mov	r2, sl
 800e6a0:	465b      	mov	r3, fp
 800e6a2:	f7f1 ff75 	bl	8000590 <__aeabi_dmul>
 800e6a6:	a33d      	add	r3, pc, #244	@ (adr r3, 800e79c <__kernel_sin+0x15c>)
 800e6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ac:	f7f1 fdba 	bl	8000224 <__adddf3>
 800e6b0:	4652      	mov	r2, sl
 800e6b2:	465b      	mov	r3, fp
 800e6b4:	f7f1 ff6c 	bl	8000590 <__aeabi_dmul>
 800e6b8:	a33a      	add	r3, pc, #232	@ (adr r3, 800e7a4 <__kernel_sin+0x164>)
 800e6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6be:	f7f1 fdaf 	bl	8000220 <__aeabi_dsub>
 800e6c2:	4652      	mov	r2, sl
 800e6c4:	465b      	mov	r3, fp
 800e6c6:	f7f1 ff63 	bl	8000590 <__aeabi_dmul>
 800e6ca:	a338      	add	r3, pc, #224	@ (adr r3, 800e7ac <__kernel_sin+0x16c>)
 800e6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d0:	f7f1 fda8 	bl	8000224 <__adddf3>
 800e6d4:	4606      	mov	r6, r0
 800e6d6:	460f      	mov	r7, r1
 800e6d8:	f1b8 0f00 	cmp.w	r8, #0
 800e6dc:	d11b      	bne.n	800e716 <__kernel_sin+0xd6>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	460b      	mov	r3, r1
 800e6e2:	4650      	mov	r0, sl
 800e6e4:	4659      	mov	r1, fp
 800e6e6:	f7f1 ff53 	bl	8000590 <__aeabi_dmul>
 800e6ea:	a325      	add	r3, pc, #148	@ (adr r3, 800e780 <__kernel_sin+0x140>)
 800e6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f0:	f7f1 fd96 	bl	8000220 <__aeabi_dsub>
 800e6f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6f8:	f7f1 ff4a 	bl	8000590 <__aeabi_dmul>
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	460b      	mov	r3, r1
 800e700:	4620      	mov	r0, r4
 800e702:	4629      	mov	r1, r5
 800e704:	f7f1 fd8e 	bl	8000224 <__adddf3>
 800e708:	4604      	mov	r4, r0
 800e70a:	460d      	mov	r5, r1
 800e70c:	ec45 4b10 	vmov	d0, r4, r5
 800e710:	b005      	add	sp, #20
 800e712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e71a:	4b1b      	ldr	r3, [pc, #108]	@ (800e788 <__kernel_sin+0x148>)
 800e71c:	2200      	movs	r2, #0
 800e71e:	f7f1 ff37 	bl	8000590 <__aeabi_dmul>
 800e722:	4632      	mov	r2, r6
 800e724:	4680      	mov	r8, r0
 800e726:	4689      	mov	r9, r1
 800e728:	463b      	mov	r3, r7
 800e72a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e72e:	f7f1 ff2f 	bl	8000590 <__aeabi_dmul>
 800e732:	4602      	mov	r2, r0
 800e734:	460b      	mov	r3, r1
 800e736:	4640      	mov	r0, r8
 800e738:	4649      	mov	r1, r9
 800e73a:	f7f1 fd71 	bl	8000220 <__aeabi_dsub>
 800e73e:	4652      	mov	r2, sl
 800e740:	465b      	mov	r3, fp
 800e742:	f7f1 ff25 	bl	8000590 <__aeabi_dmul>
 800e746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e74a:	f7f1 fd69 	bl	8000220 <__aeabi_dsub>
 800e74e:	a30c      	add	r3, pc, #48	@ (adr r3, 800e780 <__kernel_sin+0x140>)
 800e750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e754:	4606      	mov	r6, r0
 800e756:	460f      	mov	r7, r1
 800e758:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e75c:	f7f1 ff18 	bl	8000590 <__aeabi_dmul>
 800e760:	4602      	mov	r2, r0
 800e762:	460b      	mov	r3, r1
 800e764:	4630      	mov	r0, r6
 800e766:	4639      	mov	r1, r7
 800e768:	f7f1 fd5c 	bl	8000224 <__adddf3>
 800e76c:	4602      	mov	r2, r0
 800e76e:	460b      	mov	r3, r1
 800e770:	4620      	mov	r0, r4
 800e772:	4629      	mov	r1, r5
 800e774:	f7f1 fd54 	bl	8000220 <__aeabi_dsub>
 800e778:	e7c6      	b.n	800e708 <__kernel_sin+0xc8>
 800e77a:	bf00      	nop
 800e77c:	f3af 8000 	nop.w
 800e780:	55555549 	.word	0x55555549
 800e784:	3fc55555 	.word	0x3fc55555
 800e788:	3fe00000 	.word	0x3fe00000
 800e78c:	5acfd57c 	.word	0x5acfd57c
 800e790:	3de5d93a 	.word	0x3de5d93a
 800e794:	8a2b9ceb 	.word	0x8a2b9ceb
 800e798:	3e5ae5e6 	.word	0x3e5ae5e6
 800e79c:	57b1fe7d 	.word	0x57b1fe7d
 800e7a0:	3ec71de3 	.word	0x3ec71de3
 800e7a4:	19c161d5 	.word	0x19c161d5
 800e7a8:	3f2a01a0 	.word	0x3f2a01a0
 800e7ac:	1110f8a6 	.word	0x1110f8a6
 800e7b0:	3f811111 	.word	0x3f811111
 800e7b4:	00000000 	.word	0x00000000

0800e7b8 <__ieee754_rem_pio2>:
 800e7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7bc:	ec57 6b10 	vmov	r6, r7, d0
 800e7c0:	4bc5      	ldr	r3, [pc, #788]	@ (800ead8 <__ieee754_rem_pio2+0x320>)
 800e7c2:	b08d      	sub	sp, #52	@ 0x34
 800e7c4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e7c8:	4598      	cmp	r8, r3
 800e7ca:	4604      	mov	r4, r0
 800e7cc:	9704      	str	r7, [sp, #16]
 800e7ce:	d807      	bhi.n	800e7e0 <__ieee754_rem_pio2+0x28>
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	ed80 0b00 	vstr	d0, [r0]
 800e7d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e7dc:	2500      	movs	r5, #0
 800e7de:	e028      	b.n	800e832 <__ieee754_rem_pio2+0x7a>
 800e7e0:	4bbe      	ldr	r3, [pc, #760]	@ (800eadc <__ieee754_rem_pio2+0x324>)
 800e7e2:	4598      	cmp	r8, r3
 800e7e4:	d878      	bhi.n	800e8d8 <__ieee754_rem_pio2+0x120>
 800e7e6:	9b04      	ldr	r3, [sp, #16]
 800e7e8:	4dbd      	ldr	r5, [pc, #756]	@ (800eae0 <__ieee754_rem_pio2+0x328>)
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	a3ac      	add	r3, pc, #688	@ (adr r3, 800eaa0 <__ieee754_rem_pio2+0x2e8>)
 800e7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f4:	4639      	mov	r1, r7
 800e7f6:	dd38      	ble.n	800e86a <__ieee754_rem_pio2+0xb2>
 800e7f8:	f7f1 fd12 	bl	8000220 <__aeabi_dsub>
 800e7fc:	45a8      	cmp	r8, r5
 800e7fe:	4606      	mov	r6, r0
 800e800:	460f      	mov	r7, r1
 800e802:	d01a      	beq.n	800e83a <__ieee754_rem_pio2+0x82>
 800e804:	a3a8      	add	r3, pc, #672	@ (adr r3, 800eaa8 <__ieee754_rem_pio2+0x2f0>)
 800e806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80a:	f7f1 fd09 	bl	8000220 <__aeabi_dsub>
 800e80e:	4602      	mov	r2, r0
 800e810:	460b      	mov	r3, r1
 800e812:	4680      	mov	r8, r0
 800e814:	4689      	mov	r9, r1
 800e816:	4630      	mov	r0, r6
 800e818:	4639      	mov	r1, r7
 800e81a:	f7f1 fd01 	bl	8000220 <__aeabi_dsub>
 800e81e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800eaa8 <__ieee754_rem_pio2+0x2f0>)
 800e820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e824:	f7f1 fcfc 	bl	8000220 <__aeabi_dsub>
 800e828:	e9c4 8900 	strd	r8, r9, [r4]
 800e82c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e830:	2501      	movs	r5, #1
 800e832:	4628      	mov	r0, r5
 800e834:	b00d      	add	sp, #52	@ 0x34
 800e836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e83a:	a39d      	add	r3, pc, #628	@ (adr r3, 800eab0 <__ieee754_rem_pio2+0x2f8>)
 800e83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e840:	f7f1 fcee 	bl	8000220 <__aeabi_dsub>
 800e844:	a39c      	add	r3, pc, #624	@ (adr r3, 800eab8 <__ieee754_rem_pio2+0x300>)
 800e846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84a:	4606      	mov	r6, r0
 800e84c:	460f      	mov	r7, r1
 800e84e:	f7f1 fce7 	bl	8000220 <__aeabi_dsub>
 800e852:	4602      	mov	r2, r0
 800e854:	460b      	mov	r3, r1
 800e856:	4680      	mov	r8, r0
 800e858:	4689      	mov	r9, r1
 800e85a:	4630      	mov	r0, r6
 800e85c:	4639      	mov	r1, r7
 800e85e:	f7f1 fcdf 	bl	8000220 <__aeabi_dsub>
 800e862:	a395      	add	r3, pc, #596	@ (adr r3, 800eab8 <__ieee754_rem_pio2+0x300>)
 800e864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e868:	e7dc      	b.n	800e824 <__ieee754_rem_pio2+0x6c>
 800e86a:	f7f1 fcdb 	bl	8000224 <__adddf3>
 800e86e:	45a8      	cmp	r8, r5
 800e870:	4606      	mov	r6, r0
 800e872:	460f      	mov	r7, r1
 800e874:	d018      	beq.n	800e8a8 <__ieee754_rem_pio2+0xf0>
 800e876:	a38c      	add	r3, pc, #560	@ (adr r3, 800eaa8 <__ieee754_rem_pio2+0x2f0>)
 800e878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87c:	f7f1 fcd2 	bl	8000224 <__adddf3>
 800e880:	4602      	mov	r2, r0
 800e882:	460b      	mov	r3, r1
 800e884:	4680      	mov	r8, r0
 800e886:	4689      	mov	r9, r1
 800e888:	4630      	mov	r0, r6
 800e88a:	4639      	mov	r1, r7
 800e88c:	f7f1 fcc8 	bl	8000220 <__aeabi_dsub>
 800e890:	a385      	add	r3, pc, #532	@ (adr r3, 800eaa8 <__ieee754_rem_pio2+0x2f0>)
 800e892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e896:	f7f1 fcc5 	bl	8000224 <__adddf3>
 800e89a:	f04f 35ff 	mov.w	r5, #4294967295
 800e89e:	e9c4 8900 	strd	r8, r9, [r4]
 800e8a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e8a6:	e7c4      	b.n	800e832 <__ieee754_rem_pio2+0x7a>
 800e8a8:	a381      	add	r3, pc, #516	@ (adr r3, 800eab0 <__ieee754_rem_pio2+0x2f8>)
 800e8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ae:	f7f1 fcb9 	bl	8000224 <__adddf3>
 800e8b2:	a381      	add	r3, pc, #516	@ (adr r3, 800eab8 <__ieee754_rem_pio2+0x300>)
 800e8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b8:	4606      	mov	r6, r0
 800e8ba:	460f      	mov	r7, r1
 800e8bc:	f7f1 fcb2 	bl	8000224 <__adddf3>
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	4680      	mov	r8, r0
 800e8c6:	4689      	mov	r9, r1
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	4639      	mov	r1, r7
 800e8cc:	f7f1 fca8 	bl	8000220 <__aeabi_dsub>
 800e8d0:	a379      	add	r3, pc, #484	@ (adr r3, 800eab8 <__ieee754_rem_pio2+0x300>)
 800e8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d6:	e7de      	b.n	800e896 <__ieee754_rem_pio2+0xde>
 800e8d8:	4b82      	ldr	r3, [pc, #520]	@ (800eae4 <__ieee754_rem_pio2+0x32c>)
 800e8da:	4598      	cmp	r8, r3
 800e8dc:	f200 80d1 	bhi.w	800ea82 <__ieee754_rem_pio2+0x2ca>
 800e8e0:	f000 f966 	bl	800ebb0 <fabs>
 800e8e4:	ec57 6b10 	vmov	r6, r7, d0
 800e8e8:	a375      	add	r3, pc, #468	@ (adr r3, 800eac0 <__ieee754_rem_pio2+0x308>)
 800e8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	4639      	mov	r1, r7
 800e8f2:	f7f1 fe4d 	bl	8000590 <__aeabi_dmul>
 800e8f6:	4b7c      	ldr	r3, [pc, #496]	@ (800eae8 <__ieee754_rem_pio2+0x330>)
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	f7f1 fc93 	bl	8000224 <__adddf3>
 800e8fe:	f7f2 f8e1 	bl	8000ac4 <__aeabi_d2iz>
 800e902:	4605      	mov	r5, r0
 800e904:	f7f1 fdda 	bl	80004bc <__aeabi_i2d>
 800e908:	4602      	mov	r2, r0
 800e90a:	460b      	mov	r3, r1
 800e90c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e910:	a363      	add	r3, pc, #396	@ (adr r3, 800eaa0 <__ieee754_rem_pio2+0x2e8>)
 800e912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e916:	f7f1 fe3b 	bl	8000590 <__aeabi_dmul>
 800e91a:	4602      	mov	r2, r0
 800e91c:	460b      	mov	r3, r1
 800e91e:	4630      	mov	r0, r6
 800e920:	4639      	mov	r1, r7
 800e922:	f7f1 fc7d 	bl	8000220 <__aeabi_dsub>
 800e926:	a360      	add	r3, pc, #384	@ (adr r3, 800eaa8 <__ieee754_rem_pio2+0x2f0>)
 800e928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92c:	4682      	mov	sl, r0
 800e92e:	468b      	mov	fp, r1
 800e930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e934:	f7f1 fe2c 	bl	8000590 <__aeabi_dmul>
 800e938:	2d1f      	cmp	r5, #31
 800e93a:	4606      	mov	r6, r0
 800e93c:	460f      	mov	r7, r1
 800e93e:	dc0c      	bgt.n	800e95a <__ieee754_rem_pio2+0x1a2>
 800e940:	4b6a      	ldr	r3, [pc, #424]	@ (800eaec <__ieee754_rem_pio2+0x334>)
 800e942:	1e6a      	subs	r2, r5, #1
 800e944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e948:	4543      	cmp	r3, r8
 800e94a:	d006      	beq.n	800e95a <__ieee754_rem_pio2+0x1a2>
 800e94c:	4632      	mov	r2, r6
 800e94e:	463b      	mov	r3, r7
 800e950:	4650      	mov	r0, sl
 800e952:	4659      	mov	r1, fp
 800e954:	f7f1 fc64 	bl	8000220 <__aeabi_dsub>
 800e958:	e00e      	b.n	800e978 <__ieee754_rem_pio2+0x1c0>
 800e95a:	463b      	mov	r3, r7
 800e95c:	4632      	mov	r2, r6
 800e95e:	4650      	mov	r0, sl
 800e960:	4659      	mov	r1, fp
 800e962:	f7f1 fc5d 	bl	8000220 <__aeabi_dsub>
 800e966:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e96a:	9305      	str	r3, [sp, #20]
 800e96c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e970:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e974:	2b10      	cmp	r3, #16
 800e976:	dc02      	bgt.n	800e97e <__ieee754_rem_pio2+0x1c6>
 800e978:	e9c4 0100 	strd	r0, r1, [r4]
 800e97c:	e039      	b.n	800e9f2 <__ieee754_rem_pio2+0x23a>
 800e97e:	a34c      	add	r3, pc, #304	@ (adr r3, 800eab0 <__ieee754_rem_pio2+0x2f8>)
 800e980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e988:	f7f1 fe02 	bl	8000590 <__aeabi_dmul>
 800e98c:	4606      	mov	r6, r0
 800e98e:	460f      	mov	r7, r1
 800e990:	4602      	mov	r2, r0
 800e992:	460b      	mov	r3, r1
 800e994:	4650      	mov	r0, sl
 800e996:	4659      	mov	r1, fp
 800e998:	f7f1 fc42 	bl	8000220 <__aeabi_dsub>
 800e99c:	4602      	mov	r2, r0
 800e99e:	460b      	mov	r3, r1
 800e9a0:	4680      	mov	r8, r0
 800e9a2:	4689      	mov	r9, r1
 800e9a4:	4650      	mov	r0, sl
 800e9a6:	4659      	mov	r1, fp
 800e9a8:	f7f1 fc3a 	bl	8000220 <__aeabi_dsub>
 800e9ac:	4632      	mov	r2, r6
 800e9ae:	463b      	mov	r3, r7
 800e9b0:	f7f1 fc36 	bl	8000220 <__aeabi_dsub>
 800e9b4:	a340      	add	r3, pc, #256	@ (adr r3, 800eab8 <__ieee754_rem_pio2+0x300>)
 800e9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ba:	4606      	mov	r6, r0
 800e9bc:	460f      	mov	r7, r1
 800e9be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9c2:	f7f1 fde5 	bl	8000590 <__aeabi_dmul>
 800e9c6:	4632      	mov	r2, r6
 800e9c8:	463b      	mov	r3, r7
 800e9ca:	f7f1 fc29 	bl	8000220 <__aeabi_dsub>
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	4606      	mov	r6, r0
 800e9d4:	460f      	mov	r7, r1
 800e9d6:	4640      	mov	r0, r8
 800e9d8:	4649      	mov	r1, r9
 800e9da:	f7f1 fc21 	bl	8000220 <__aeabi_dsub>
 800e9de:	9a05      	ldr	r2, [sp, #20]
 800e9e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e9e4:	1ad3      	subs	r3, r2, r3
 800e9e6:	2b31      	cmp	r3, #49	@ 0x31
 800e9e8:	dc20      	bgt.n	800ea2c <__ieee754_rem_pio2+0x274>
 800e9ea:	e9c4 0100 	strd	r0, r1, [r4]
 800e9ee:	46c2      	mov	sl, r8
 800e9f0:	46cb      	mov	fp, r9
 800e9f2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e9f6:	4650      	mov	r0, sl
 800e9f8:	4642      	mov	r2, r8
 800e9fa:	464b      	mov	r3, r9
 800e9fc:	4659      	mov	r1, fp
 800e9fe:	f7f1 fc0f 	bl	8000220 <__aeabi_dsub>
 800ea02:	463b      	mov	r3, r7
 800ea04:	4632      	mov	r2, r6
 800ea06:	f7f1 fc0b 	bl	8000220 <__aeabi_dsub>
 800ea0a:	9b04      	ldr	r3, [sp, #16]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ea12:	f6bf af0e 	bge.w	800e832 <__ieee754_rem_pio2+0x7a>
 800ea16:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ea1a:	6063      	str	r3, [r4, #4]
 800ea1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ea20:	f8c4 8000 	str.w	r8, [r4]
 800ea24:	60a0      	str	r0, [r4, #8]
 800ea26:	60e3      	str	r3, [r4, #12]
 800ea28:	426d      	negs	r5, r5
 800ea2a:	e702      	b.n	800e832 <__ieee754_rem_pio2+0x7a>
 800ea2c:	a326      	add	r3, pc, #152	@ (adr r3, 800eac8 <__ieee754_rem_pio2+0x310>)
 800ea2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea36:	f7f1 fdab 	bl	8000590 <__aeabi_dmul>
 800ea3a:	4606      	mov	r6, r0
 800ea3c:	460f      	mov	r7, r1
 800ea3e:	4602      	mov	r2, r0
 800ea40:	460b      	mov	r3, r1
 800ea42:	4640      	mov	r0, r8
 800ea44:	4649      	mov	r1, r9
 800ea46:	f7f1 fbeb 	bl	8000220 <__aeabi_dsub>
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	4682      	mov	sl, r0
 800ea50:	468b      	mov	fp, r1
 800ea52:	4640      	mov	r0, r8
 800ea54:	4649      	mov	r1, r9
 800ea56:	f7f1 fbe3 	bl	8000220 <__aeabi_dsub>
 800ea5a:	4632      	mov	r2, r6
 800ea5c:	463b      	mov	r3, r7
 800ea5e:	f7f1 fbdf 	bl	8000220 <__aeabi_dsub>
 800ea62:	a31b      	add	r3, pc, #108	@ (adr r3, 800ead0 <__ieee754_rem_pio2+0x318>)
 800ea64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea68:	4606      	mov	r6, r0
 800ea6a:	460f      	mov	r7, r1
 800ea6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea70:	f7f1 fd8e 	bl	8000590 <__aeabi_dmul>
 800ea74:	4632      	mov	r2, r6
 800ea76:	463b      	mov	r3, r7
 800ea78:	f7f1 fbd2 	bl	8000220 <__aeabi_dsub>
 800ea7c:	4606      	mov	r6, r0
 800ea7e:	460f      	mov	r7, r1
 800ea80:	e764      	b.n	800e94c <__ieee754_rem_pio2+0x194>
 800ea82:	4b1b      	ldr	r3, [pc, #108]	@ (800eaf0 <__ieee754_rem_pio2+0x338>)
 800ea84:	4598      	cmp	r8, r3
 800ea86:	d935      	bls.n	800eaf4 <__ieee754_rem_pio2+0x33c>
 800ea88:	4632      	mov	r2, r6
 800ea8a:	463b      	mov	r3, r7
 800ea8c:	4630      	mov	r0, r6
 800ea8e:	4639      	mov	r1, r7
 800ea90:	f7f1 fbc6 	bl	8000220 <__aeabi_dsub>
 800ea94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ea98:	e9c4 0100 	strd	r0, r1, [r4]
 800ea9c:	e69e      	b.n	800e7dc <__ieee754_rem_pio2+0x24>
 800ea9e:	bf00      	nop
 800eaa0:	54400000 	.word	0x54400000
 800eaa4:	3ff921fb 	.word	0x3ff921fb
 800eaa8:	1a626331 	.word	0x1a626331
 800eaac:	3dd0b461 	.word	0x3dd0b461
 800eab0:	1a600000 	.word	0x1a600000
 800eab4:	3dd0b461 	.word	0x3dd0b461
 800eab8:	2e037073 	.word	0x2e037073
 800eabc:	3ba3198a 	.word	0x3ba3198a
 800eac0:	6dc9c883 	.word	0x6dc9c883
 800eac4:	3fe45f30 	.word	0x3fe45f30
 800eac8:	2e000000 	.word	0x2e000000
 800eacc:	3ba3198a 	.word	0x3ba3198a
 800ead0:	252049c1 	.word	0x252049c1
 800ead4:	397b839a 	.word	0x397b839a
 800ead8:	3fe921fb 	.word	0x3fe921fb
 800eadc:	4002d97b 	.word	0x4002d97b
 800eae0:	3ff921fb 	.word	0x3ff921fb
 800eae4:	413921fb 	.word	0x413921fb
 800eae8:	3fe00000 	.word	0x3fe00000
 800eaec:	0800ff90 	.word	0x0800ff90
 800eaf0:	7fefffff 	.word	0x7fefffff
 800eaf4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800eaf8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800eafc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800eb00:	4630      	mov	r0, r6
 800eb02:	460f      	mov	r7, r1
 800eb04:	f7f1 ffde 	bl	8000ac4 <__aeabi_d2iz>
 800eb08:	f7f1 fcd8 	bl	80004bc <__aeabi_i2d>
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	460b      	mov	r3, r1
 800eb10:	4630      	mov	r0, r6
 800eb12:	4639      	mov	r1, r7
 800eb14:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eb18:	f7f1 fb82 	bl	8000220 <__aeabi_dsub>
 800eb1c:	4b22      	ldr	r3, [pc, #136]	@ (800eba8 <__ieee754_rem_pio2+0x3f0>)
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f7f1 fd36 	bl	8000590 <__aeabi_dmul>
 800eb24:	460f      	mov	r7, r1
 800eb26:	4606      	mov	r6, r0
 800eb28:	f7f1 ffcc 	bl	8000ac4 <__aeabi_d2iz>
 800eb2c:	f7f1 fcc6 	bl	80004bc <__aeabi_i2d>
 800eb30:	4602      	mov	r2, r0
 800eb32:	460b      	mov	r3, r1
 800eb34:	4630      	mov	r0, r6
 800eb36:	4639      	mov	r1, r7
 800eb38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eb3c:	f7f1 fb70 	bl	8000220 <__aeabi_dsub>
 800eb40:	4b19      	ldr	r3, [pc, #100]	@ (800eba8 <__ieee754_rem_pio2+0x3f0>)
 800eb42:	2200      	movs	r2, #0
 800eb44:	f7f1 fd24 	bl	8000590 <__aeabi_dmul>
 800eb48:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800eb4c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800eb50:	f04f 0803 	mov.w	r8, #3
 800eb54:	2600      	movs	r6, #0
 800eb56:	2700      	movs	r7, #0
 800eb58:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800eb5c:	4632      	mov	r2, r6
 800eb5e:	463b      	mov	r3, r7
 800eb60:	46c2      	mov	sl, r8
 800eb62:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb66:	f7f1 ff7b 	bl	8000a60 <__aeabi_dcmpeq>
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	d1f4      	bne.n	800eb58 <__ieee754_rem_pio2+0x3a0>
 800eb6e:	4b0f      	ldr	r3, [pc, #60]	@ (800ebac <__ieee754_rem_pio2+0x3f4>)
 800eb70:	9301      	str	r3, [sp, #4]
 800eb72:	2302      	movs	r3, #2
 800eb74:	9300      	str	r3, [sp, #0]
 800eb76:	462a      	mov	r2, r5
 800eb78:	4653      	mov	r3, sl
 800eb7a:	4621      	mov	r1, r4
 800eb7c:	a806      	add	r0, sp, #24
 800eb7e:	f000 fb5b 	bl	800f238 <__kernel_rem_pio2>
 800eb82:	9b04      	ldr	r3, [sp, #16]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	4605      	mov	r5, r0
 800eb88:	f6bf ae53 	bge.w	800e832 <__ieee754_rem_pio2+0x7a>
 800eb8c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800eb90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eb94:	e9c4 2300 	strd	r2, r3, [r4]
 800eb98:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800eb9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eba0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800eba4:	e740      	b.n	800ea28 <__ieee754_rem_pio2+0x270>
 800eba6:	bf00      	nop
 800eba8:	41700000 	.word	0x41700000
 800ebac:	08010010 	.word	0x08010010

0800ebb0 <fabs>:
 800ebb0:	ec51 0b10 	vmov	r0, r1, d0
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ebba:	ec43 2b10 	vmov	d0, r2, r3
 800ebbe:	4770      	bx	lr

0800ebc0 <__kernel_cosf>:
 800ebc0:	ee10 3a10 	vmov	r3, s0
 800ebc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ebc8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ebcc:	eef0 6a40 	vmov.f32	s13, s0
 800ebd0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ebd4:	d204      	bcs.n	800ebe0 <__kernel_cosf+0x20>
 800ebd6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800ebda:	ee17 2a90 	vmov	r2, s15
 800ebde:	b342      	cbz	r2, 800ec32 <__kernel_cosf+0x72>
 800ebe0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ebe4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800ec50 <__kernel_cosf+0x90>
 800ebe8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800ec54 <__kernel_cosf+0x94>
 800ebec:	4a1a      	ldr	r2, [pc, #104]	@ (800ec58 <__kernel_cosf+0x98>)
 800ebee:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ec5c <__kernel_cosf+0x9c>
 800ebf8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ebfc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800ec60 <__kernel_cosf+0xa0>
 800ec00:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ec04:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800ec64 <__kernel_cosf+0xa4>
 800ec08:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ec0c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800ec68 <__kernel_cosf+0xa8>
 800ec10:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ec14:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800ec18:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ec1c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ec20:	eee7 0a06 	vfma.f32	s1, s14, s12
 800ec24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec28:	d804      	bhi.n	800ec34 <__kernel_cosf+0x74>
 800ec2a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ec2e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ec32:	4770      	bx	lr
 800ec34:	4a0d      	ldr	r2, [pc, #52]	@ (800ec6c <__kernel_cosf+0xac>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	bf9a      	itte	ls
 800ec3a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800ec3e:	ee07 3a10 	vmovls	s14, r3
 800ec42:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800ec46:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ec4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec4e:	e7ec      	b.n	800ec2a <__kernel_cosf+0x6a>
 800ec50:	ad47d74e 	.word	0xad47d74e
 800ec54:	310f74f6 	.word	0x310f74f6
 800ec58:	3e999999 	.word	0x3e999999
 800ec5c:	b493f27c 	.word	0xb493f27c
 800ec60:	37d00d01 	.word	0x37d00d01
 800ec64:	bab60b61 	.word	0xbab60b61
 800ec68:	3d2aaaab 	.word	0x3d2aaaab
 800ec6c:	3f480000 	.word	0x3f480000

0800ec70 <__kernel_sinf>:
 800ec70:	ee10 3a10 	vmov	r3, s0
 800ec74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ec78:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ec7c:	d204      	bcs.n	800ec88 <__kernel_sinf+0x18>
 800ec7e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ec82:	ee17 3a90 	vmov	r3, s15
 800ec86:	b35b      	cbz	r3, 800ece0 <__kernel_sinf+0x70>
 800ec88:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ec8c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ece4 <__kernel_sinf+0x74>
 800ec90:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800ece8 <__kernel_sinf+0x78>
 800ec94:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ec98:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800ecec <__kernel_sinf+0x7c>
 800ec9c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800eca0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800ecf0 <__kernel_sinf+0x80>
 800eca4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800eca8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800ecf4 <__kernel_sinf+0x84>
 800ecac:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ecb0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ecb4:	b930      	cbnz	r0, 800ecc4 <__kernel_sinf+0x54>
 800ecb6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800ecf8 <__kernel_sinf+0x88>
 800ecba:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ecbe:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ecc2:	4770      	bx	lr
 800ecc4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ecc8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800eccc:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ecd0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ecd4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800ecfc <__kernel_sinf+0x8c>
 800ecd8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ecdc:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop
 800ece4:	2f2ec9d3 	.word	0x2f2ec9d3
 800ece8:	b2d72f34 	.word	0xb2d72f34
 800ecec:	3638ef1b 	.word	0x3638ef1b
 800ecf0:	b9500d01 	.word	0xb9500d01
 800ecf4:	3c088889 	.word	0x3c088889
 800ecf8:	be2aaaab 	.word	0xbe2aaaab
 800ecfc:	3e2aaaab 	.word	0x3e2aaaab

0800ed00 <__ieee754_fmodf>:
 800ed00:	b570      	push	{r4, r5, r6, lr}
 800ed02:	ee10 6a90 	vmov	r6, s1
 800ed06:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800ed0a:	1e5a      	subs	r2, r3, #1
 800ed0c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ed10:	d206      	bcs.n	800ed20 <__ieee754_fmodf+0x20>
 800ed12:	ee10 4a10 	vmov	r4, s0
 800ed16:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800ed1a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ed1e:	d304      	bcc.n	800ed2a <__ieee754_fmodf+0x2a>
 800ed20:	ee60 0a20 	vmul.f32	s1, s0, s1
 800ed24:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800ed28:	bd70      	pop	{r4, r5, r6, pc}
 800ed2a:	4299      	cmp	r1, r3
 800ed2c:	dbfc      	blt.n	800ed28 <__ieee754_fmodf+0x28>
 800ed2e:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800ed32:	d105      	bne.n	800ed40 <__ieee754_fmodf+0x40>
 800ed34:	4b32      	ldr	r3, [pc, #200]	@ (800ee00 <__ieee754_fmodf+0x100>)
 800ed36:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800ed3a:	ed93 0a00 	vldr	s0, [r3]
 800ed3e:	e7f3      	b.n	800ed28 <__ieee754_fmodf+0x28>
 800ed40:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800ed44:	d146      	bne.n	800edd4 <__ieee754_fmodf+0xd4>
 800ed46:	020a      	lsls	r2, r1, #8
 800ed48:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800ed4c:	2a00      	cmp	r2, #0
 800ed4e:	dc3e      	bgt.n	800edce <__ieee754_fmodf+0xce>
 800ed50:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800ed54:	bf01      	itttt	eq
 800ed56:	021a      	lsleq	r2, r3, #8
 800ed58:	fab2 f282 	clzeq	r2, r2
 800ed5c:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800ed60:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800ed64:	bf16      	itet	ne
 800ed66:	15da      	asrne	r2, r3, #23
 800ed68:	3282      	addeq	r2, #130	@ 0x82
 800ed6a:	3a7f      	subne	r2, #127	@ 0x7f
 800ed6c:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800ed70:	bfbb      	ittet	lt
 800ed72:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800ed76:	1a24      	sublt	r4, r4, r0
 800ed78:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800ed7c:	40a1      	lsllt	r1, r4
 800ed7e:	bfa8      	it	ge
 800ed80:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800ed84:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800ed88:	bfb5      	itete	lt
 800ed8a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800ed8e:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800ed92:	1aa4      	sublt	r4, r4, r2
 800ed94:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800ed98:	bfb8      	it	lt
 800ed9a:	fa03 f404 	lsllt.w	r4, r3, r4
 800ed9e:	1a80      	subs	r0, r0, r2
 800eda0:	1b0b      	subs	r3, r1, r4
 800eda2:	b9d0      	cbnz	r0, 800edda <__ieee754_fmodf+0xda>
 800eda4:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800eda8:	bf28      	it	cs
 800edaa:	460b      	movcs	r3, r1
 800edac:	2b00      	cmp	r3, #0
 800edae:	d0c1      	beq.n	800ed34 <__ieee754_fmodf+0x34>
 800edb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800edb4:	db19      	blt.n	800edea <__ieee754_fmodf+0xea>
 800edb6:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800edba:	db19      	blt.n	800edf0 <__ieee754_fmodf+0xf0>
 800edbc:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800edc0:	327f      	adds	r2, #127	@ 0x7f
 800edc2:	432b      	orrs	r3, r5
 800edc4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800edc8:	ee00 3a10 	vmov	s0, r3
 800edcc:	e7ac      	b.n	800ed28 <__ieee754_fmodf+0x28>
 800edce:	3801      	subs	r0, #1
 800edd0:	0052      	lsls	r2, r2, #1
 800edd2:	e7bb      	b.n	800ed4c <__ieee754_fmodf+0x4c>
 800edd4:	15c8      	asrs	r0, r1, #23
 800edd6:	387f      	subs	r0, #127	@ 0x7f
 800edd8:	e7ba      	b.n	800ed50 <__ieee754_fmodf+0x50>
 800edda:	2b00      	cmp	r3, #0
 800eddc:	da02      	bge.n	800ede4 <__ieee754_fmodf+0xe4>
 800edde:	0049      	lsls	r1, r1, #1
 800ede0:	3801      	subs	r0, #1
 800ede2:	e7dd      	b.n	800eda0 <__ieee754_fmodf+0xa0>
 800ede4:	d0a6      	beq.n	800ed34 <__ieee754_fmodf+0x34>
 800ede6:	0059      	lsls	r1, r3, #1
 800ede8:	e7fa      	b.n	800ede0 <__ieee754_fmodf+0xe0>
 800edea:	005b      	lsls	r3, r3, #1
 800edec:	3a01      	subs	r2, #1
 800edee:	e7df      	b.n	800edb0 <__ieee754_fmodf+0xb0>
 800edf0:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800edf4:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800edf8:	3282      	adds	r2, #130	@ 0x82
 800edfa:	4113      	asrs	r3, r2
 800edfc:	432b      	orrs	r3, r5
 800edfe:	e7e3      	b.n	800edc8 <__ieee754_fmodf+0xc8>
 800ee00:	08010118 	.word	0x08010118

0800ee04 <__ieee754_rem_pio2f>:
 800ee04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee06:	ee10 6a10 	vmov	r6, s0
 800ee0a:	4b88      	ldr	r3, [pc, #544]	@ (800f02c <__ieee754_rem_pio2f+0x228>)
 800ee0c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800ee10:	429d      	cmp	r5, r3
 800ee12:	b087      	sub	sp, #28
 800ee14:	4604      	mov	r4, r0
 800ee16:	d805      	bhi.n	800ee24 <__ieee754_rem_pio2f+0x20>
 800ee18:	2300      	movs	r3, #0
 800ee1a:	ed80 0a00 	vstr	s0, [r0]
 800ee1e:	6043      	str	r3, [r0, #4]
 800ee20:	2000      	movs	r0, #0
 800ee22:	e022      	b.n	800ee6a <__ieee754_rem_pio2f+0x66>
 800ee24:	4b82      	ldr	r3, [pc, #520]	@ (800f030 <__ieee754_rem_pio2f+0x22c>)
 800ee26:	429d      	cmp	r5, r3
 800ee28:	d83a      	bhi.n	800eea0 <__ieee754_rem_pio2f+0x9c>
 800ee2a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800ee2e:	2e00      	cmp	r6, #0
 800ee30:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800f034 <__ieee754_rem_pio2f+0x230>
 800ee34:	4a80      	ldr	r2, [pc, #512]	@ (800f038 <__ieee754_rem_pio2f+0x234>)
 800ee36:	f023 030f 	bic.w	r3, r3, #15
 800ee3a:	dd18      	ble.n	800ee6e <__ieee754_rem_pio2f+0x6a>
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800ee42:	bf09      	itett	eq
 800ee44:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800f03c <__ieee754_rem_pio2f+0x238>
 800ee48:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800f040 <__ieee754_rem_pio2f+0x23c>
 800ee4c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800f044 <__ieee754_rem_pio2f+0x240>
 800ee50:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800ee54:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800ee58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee5c:	ed80 7a00 	vstr	s14, [r0]
 800ee60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ee64:	edc0 7a01 	vstr	s15, [r0, #4]
 800ee68:	2001      	movs	r0, #1
 800ee6a:	b007      	add	sp, #28
 800ee6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ee74:	bf09      	itett	eq
 800ee76:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800f03c <__ieee754_rem_pio2f+0x238>
 800ee7a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800f040 <__ieee754_rem_pio2f+0x23c>
 800ee7e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800f044 <__ieee754_rem_pio2f+0x240>
 800ee82:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800ee86:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ee8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee8e:	ed80 7a00 	vstr	s14, [r0]
 800ee92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee96:	edc0 7a01 	vstr	s15, [r0, #4]
 800ee9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ee9e:	e7e4      	b.n	800ee6a <__ieee754_rem_pio2f+0x66>
 800eea0:	4b69      	ldr	r3, [pc, #420]	@ (800f048 <__ieee754_rem_pio2f+0x244>)
 800eea2:	429d      	cmp	r5, r3
 800eea4:	d873      	bhi.n	800ef8e <__ieee754_rem_pio2f+0x18a>
 800eea6:	f000 f8dd 	bl	800f064 <fabsf>
 800eeaa:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800f04c <__ieee754_rem_pio2f+0x248>
 800eeae:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800eeb2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800eeb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eeba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eebe:	ee17 0a90 	vmov	r0, s15
 800eec2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f034 <__ieee754_rem_pio2f+0x230>
 800eec6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800eeca:	281f      	cmp	r0, #31
 800eecc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f040 <__ieee754_rem_pio2f+0x23c>
 800eed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eed4:	eeb1 6a47 	vneg.f32	s12, s14
 800eed8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800eedc:	ee16 1a90 	vmov	r1, s13
 800eee0:	dc09      	bgt.n	800eef6 <__ieee754_rem_pio2f+0xf2>
 800eee2:	4a5b      	ldr	r2, [pc, #364]	@ (800f050 <__ieee754_rem_pio2f+0x24c>)
 800eee4:	1e47      	subs	r7, r0, #1
 800eee6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800eeea:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800eeee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d107      	bne.n	800ef06 <__ieee754_rem_pio2f+0x102>
 800eef6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800eefa:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800eefe:	2a08      	cmp	r2, #8
 800ef00:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800ef04:	dc14      	bgt.n	800ef30 <__ieee754_rem_pio2f+0x12c>
 800ef06:	6021      	str	r1, [r4, #0]
 800ef08:	ed94 7a00 	vldr	s14, [r4]
 800ef0c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ef10:	2e00      	cmp	r6, #0
 800ef12:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ef16:	ed84 0a01 	vstr	s0, [r4, #4]
 800ef1a:	daa6      	bge.n	800ee6a <__ieee754_rem_pio2f+0x66>
 800ef1c:	eeb1 7a47 	vneg.f32	s14, s14
 800ef20:	eeb1 0a40 	vneg.f32	s0, s0
 800ef24:	ed84 7a00 	vstr	s14, [r4]
 800ef28:	ed84 0a01 	vstr	s0, [r4, #4]
 800ef2c:	4240      	negs	r0, r0
 800ef2e:	e79c      	b.n	800ee6a <__ieee754_rem_pio2f+0x66>
 800ef30:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800f03c <__ieee754_rem_pio2f+0x238>
 800ef34:	eef0 6a40 	vmov.f32	s13, s0
 800ef38:	eee6 6a25 	vfma.f32	s13, s12, s11
 800ef3c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800ef40:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ef44:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800f044 <__ieee754_rem_pio2f+0x240>
 800ef48:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800ef4c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800ef50:	ee15 2a90 	vmov	r2, s11
 800ef54:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ef58:	1a5b      	subs	r3, r3, r1
 800ef5a:	2b19      	cmp	r3, #25
 800ef5c:	dc04      	bgt.n	800ef68 <__ieee754_rem_pio2f+0x164>
 800ef5e:	edc4 5a00 	vstr	s11, [r4]
 800ef62:	eeb0 0a66 	vmov.f32	s0, s13
 800ef66:	e7cf      	b.n	800ef08 <__ieee754_rem_pio2f+0x104>
 800ef68:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800f054 <__ieee754_rem_pio2f+0x250>
 800ef6c:	eeb0 0a66 	vmov.f32	s0, s13
 800ef70:	eea6 0a25 	vfma.f32	s0, s12, s11
 800ef74:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ef78:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800f058 <__ieee754_rem_pio2f+0x254>
 800ef7c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ef80:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800ef84:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ef88:	ed84 7a00 	vstr	s14, [r4]
 800ef8c:	e7bc      	b.n	800ef08 <__ieee754_rem_pio2f+0x104>
 800ef8e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800ef92:	d306      	bcc.n	800efa2 <__ieee754_rem_pio2f+0x19e>
 800ef94:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ef98:	edc0 7a01 	vstr	s15, [r0, #4]
 800ef9c:	edc0 7a00 	vstr	s15, [r0]
 800efa0:	e73e      	b.n	800ee20 <__ieee754_rem_pio2f+0x1c>
 800efa2:	15ea      	asrs	r2, r5, #23
 800efa4:	3a86      	subs	r2, #134	@ 0x86
 800efa6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800efaa:	ee07 3a90 	vmov	s15, r3
 800efae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800efb2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800f05c <__ieee754_rem_pio2f+0x258>
 800efb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800efba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800efbe:	ed8d 7a03 	vstr	s14, [sp, #12]
 800efc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800efc6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800efca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800efce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800efd2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800efd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800efda:	eef5 7a40 	vcmp.f32	s15, #0.0
 800efde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efe2:	edcd 7a05 	vstr	s15, [sp, #20]
 800efe6:	d11e      	bne.n	800f026 <__ieee754_rem_pio2f+0x222>
 800efe8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800efec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff0:	bf0c      	ite	eq
 800eff2:	2301      	moveq	r3, #1
 800eff4:	2302      	movne	r3, #2
 800eff6:	491a      	ldr	r1, [pc, #104]	@ (800f060 <__ieee754_rem_pio2f+0x25c>)
 800eff8:	9101      	str	r1, [sp, #4]
 800effa:	2102      	movs	r1, #2
 800effc:	9100      	str	r1, [sp, #0]
 800effe:	a803      	add	r0, sp, #12
 800f000:	4621      	mov	r1, r4
 800f002:	f000 fc69 	bl	800f8d8 <__kernel_rem_pio2f>
 800f006:	2e00      	cmp	r6, #0
 800f008:	f6bf af2f 	bge.w	800ee6a <__ieee754_rem_pio2f+0x66>
 800f00c:	edd4 7a00 	vldr	s15, [r4]
 800f010:	eef1 7a67 	vneg.f32	s15, s15
 800f014:	edc4 7a00 	vstr	s15, [r4]
 800f018:	edd4 7a01 	vldr	s15, [r4, #4]
 800f01c:	eef1 7a67 	vneg.f32	s15, s15
 800f020:	edc4 7a01 	vstr	s15, [r4, #4]
 800f024:	e782      	b.n	800ef2c <__ieee754_rem_pio2f+0x128>
 800f026:	2303      	movs	r3, #3
 800f028:	e7e5      	b.n	800eff6 <__ieee754_rem_pio2f+0x1f2>
 800f02a:	bf00      	nop
 800f02c:	3f490fd8 	.word	0x3f490fd8
 800f030:	4016cbe3 	.word	0x4016cbe3
 800f034:	3fc90f80 	.word	0x3fc90f80
 800f038:	3fc90fd0 	.word	0x3fc90fd0
 800f03c:	37354400 	.word	0x37354400
 800f040:	37354443 	.word	0x37354443
 800f044:	2e85a308 	.word	0x2e85a308
 800f048:	43490f80 	.word	0x43490f80
 800f04c:	3f22f984 	.word	0x3f22f984
 800f050:	08010120 	.word	0x08010120
 800f054:	2e85a300 	.word	0x2e85a300
 800f058:	248d3132 	.word	0x248d3132
 800f05c:	43800000 	.word	0x43800000
 800f060:	080101a0 	.word	0x080101a0

0800f064 <fabsf>:
 800f064:	ee10 3a10 	vmov	r3, s0
 800f068:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f06c:	ee00 3a10 	vmov	s0, r3
 800f070:	4770      	bx	lr
 800f072:	0000      	movs	r0, r0
 800f074:	0000      	movs	r0, r0
	...

0800f078 <scalbn>:
 800f078:	b570      	push	{r4, r5, r6, lr}
 800f07a:	ec55 4b10 	vmov	r4, r5, d0
 800f07e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f082:	4606      	mov	r6, r0
 800f084:	462b      	mov	r3, r5
 800f086:	b991      	cbnz	r1, 800f0ae <scalbn+0x36>
 800f088:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f08c:	4323      	orrs	r3, r4
 800f08e:	d03b      	beq.n	800f108 <scalbn+0x90>
 800f090:	4b33      	ldr	r3, [pc, #204]	@ (800f160 <scalbn+0xe8>)
 800f092:	4620      	mov	r0, r4
 800f094:	4629      	mov	r1, r5
 800f096:	2200      	movs	r2, #0
 800f098:	f7f1 fa7a 	bl	8000590 <__aeabi_dmul>
 800f09c:	4b31      	ldr	r3, [pc, #196]	@ (800f164 <scalbn+0xec>)
 800f09e:	429e      	cmp	r6, r3
 800f0a0:	4604      	mov	r4, r0
 800f0a2:	460d      	mov	r5, r1
 800f0a4:	da0f      	bge.n	800f0c6 <scalbn+0x4e>
 800f0a6:	a326      	add	r3, pc, #152	@ (adr r3, 800f140 <scalbn+0xc8>)
 800f0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ac:	e01e      	b.n	800f0ec <scalbn+0x74>
 800f0ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f0b2:	4291      	cmp	r1, r2
 800f0b4:	d10b      	bne.n	800f0ce <scalbn+0x56>
 800f0b6:	4622      	mov	r2, r4
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	4629      	mov	r1, r5
 800f0bc:	f7f1 f8b2 	bl	8000224 <__adddf3>
 800f0c0:	4604      	mov	r4, r0
 800f0c2:	460d      	mov	r5, r1
 800f0c4:	e020      	b.n	800f108 <scalbn+0x90>
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f0cc:	3936      	subs	r1, #54	@ 0x36
 800f0ce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f0d2:	4296      	cmp	r6, r2
 800f0d4:	dd0d      	ble.n	800f0f2 <scalbn+0x7a>
 800f0d6:	2d00      	cmp	r5, #0
 800f0d8:	a11b      	add	r1, pc, #108	@ (adr r1, 800f148 <scalbn+0xd0>)
 800f0da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0de:	da02      	bge.n	800f0e6 <scalbn+0x6e>
 800f0e0:	a11b      	add	r1, pc, #108	@ (adr r1, 800f150 <scalbn+0xd8>)
 800f0e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0e6:	a318      	add	r3, pc, #96	@ (adr r3, 800f148 <scalbn+0xd0>)
 800f0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ec:	f7f1 fa50 	bl	8000590 <__aeabi_dmul>
 800f0f0:	e7e6      	b.n	800f0c0 <scalbn+0x48>
 800f0f2:	1872      	adds	r2, r6, r1
 800f0f4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f0f8:	428a      	cmp	r2, r1
 800f0fa:	dcec      	bgt.n	800f0d6 <scalbn+0x5e>
 800f0fc:	2a00      	cmp	r2, #0
 800f0fe:	dd06      	ble.n	800f10e <scalbn+0x96>
 800f100:	f36f 531e 	bfc	r3, #20, #11
 800f104:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f108:	ec45 4b10 	vmov	d0, r4, r5
 800f10c:	bd70      	pop	{r4, r5, r6, pc}
 800f10e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f112:	da08      	bge.n	800f126 <scalbn+0xae>
 800f114:	2d00      	cmp	r5, #0
 800f116:	a10a      	add	r1, pc, #40	@ (adr r1, 800f140 <scalbn+0xc8>)
 800f118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f11c:	dac3      	bge.n	800f0a6 <scalbn+0x2e>
 800f11e:	a10e      	add	r1, pc, #56	@ (adr r1, 800f158 <scalbn+0xe0>)
 800f120:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f124:	e7bf      	b.n	800f0a6 <scalbn+0x2e>
 800f126:	3236      	adds	r2, #54	@ 0x36
 800f128:	f36f 531e 	bfc	r3, #20, #11
 800f12c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f130:	4620      	mov	r0, r4
 800f132:	4b0d      	ldr	r3, [pc, #52]	@ (800f168 <scalbn+0xf0>)
 800f134:	4629      	mov	r1, r5
 800f136:	2200      	movs	r2, #0
 800f138:	e7d8      	b.n	800f0ec <scalbn+0x74>
 800f13a:	bf00      	nop
 800f13c:	f3af 8000 	nop.w
 800f140:	c2f8f359 	.word	0xc2f8f359
 800f144:	01a56e1f 	.word	0x01a56e1f
 800f148:	8800759c 	.word	0x8800759c
 800f14c:	7e37e43c 	.word	0x7e37e43c
 800f150:	8800759c 	.word	0x8800759c
 800f154:	fe37e43c 	.word	0xfe37e43c
 800f158:	c2f8f359 	.word	0xc2f8f359
 800f15c:	81a56e1f 	.word	0x81a56e1f
 800f160:	43500000 	.word	0x43500000
 800f164:	ffff3cb0 	.word	0xffff3cb0
 800f168:	3c900000 	.word	0x3c900000

0800f16c <scalbnf>:
 800f16c:	ee10 3a10 	vmov	r3, s0
 800f170:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f174:	d02b      	beq.n	800f1ce <scalbnf+0x62>
 800f176:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f17a:	d302      	bcc.n	800f182 <scalbnf+0x16>
 800f17c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f180:	4770      	bx	lr
 800f182:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f186:	d123      	bne.n	800f1d0 <scalbnf+0x64>
 800f188:	4b24      	ldr	r3, [pc, #144]	@ (800f21c <scalbnf+0xb0>)
 800f18a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800f220 <scalbnf+0xb4>
 800f18e:	4298      	cmp	r0, r3
 800f190:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f194:	db17      	blt.n	800f1c6 <scalbnf+0x5a>
 800f196:	ee10 3a10 	vmov	r3, s0
 800f19a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f19e:	3a19      	subs	r2, #25
 800f1a0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f1a4:	4288      	cmp	r0, r1
 800f1a6:	dd15      	ble.n	800f1d4 <scalbnf+0x68>
 800f1a8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800f224 <scalbnf+0xb8>
 800f1ac:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f228 <scalbnf+0xbc>
 800f1b0:	ee10 3a10 	vmov	r3, s0
 800f1b4:	eeb0 7a67 	vmov.f32	s14, s15
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	bfb8      	it	lt
 800f1bc:	eef0 7a66 	vmovlt.f32	s15, s13
 800f1c0:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f1c4:	4770      	bx	lr
 800f1c6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f22c <scalbnf+0xc0>
 800f1ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f1ce:	4770      	bx	lr
 800f1d0:	0dd2      	lsrs	r2, r2, #23
 800f1d2:	e7e5      	b.n	800f1a0 <scalbnf+0x34>
 800f1d4:	4410      	add	r0, r2
 800f1d6:	28fe      	cmp	r0, #254	@ 0xfe
 800f1d8:	dce6      	bgt.n	800f1a8 <scalbnf+0x3c>
 800f1da:	2800      	cmp	r0, #0
 800f1dc:	dd06      	ble.n	800f1ec <scalbnf+0x80>
 800f1de:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f1e2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f1e6:	ee00 3a10 	vmov	s0, r3
 800f1ea:	4770      	bx	lr
 800f1ec:	f110 0f16 	cmn.w	r0, #22
 800f1f0:	da09      	bge.n	800f206 <scalbnf+0x9a>
 800f1f2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800f22c <scalbnf+0xc0>
 800f1f6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f230 <scalbnf+0xc4>
 800f1fa:	ee10 3a10 	vmov	r3, s0
 800f1fe:	eeb0 7a67 	vmov.f32	s14, s15
 800f202:	2b00      	cmp	r3, #0
 800f204:	e7d9      	b.n	800f1ba <scalbnf+0x4e>
 800f206:	3019      	adds	r0, #25
 800f208:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f20c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f210:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f234 <scalbnf+0xc8>
 800f214:	ee07 3a90 	vmov	s15, r3
 800f218:	e7d7      	b.n	800f1ca <scalbnf+0x5e>
 800f21a:	bf00      	nop
 800f21c:	ffff3cb0 	.word	0xffff3cb0
 800f220:	4c000000 	.word	0x4c000000
 800f224:	7149f2ca 	.word	0x7149f2ca
 800f228:	f149f2ca 	.word	0xf149f2ca
 800f22c:	0da24260 	.word	0x0da24260
 800f230:	8da24260 	.word	0x8da24260
 800f234:	33000000 	.word	0x33000000

0800f238 <__kernel_rem_pio2>:
 800f238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f23c:	ed2d 8b02 	vpush	{d8}
 800f240:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800f244:	f112 0f14 	cmn.w	r2, #20
 800f248:	9306      	str	r3, [sp, #24]
 800f24a:	9104      	str	r1, [sp, #16]
 800f24c:	4bc2      	ldr	r3, [pc, #776]	@ (800f558 <__kernel_rem_pio2+0x320>)
 800f24e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800f250:	9008      	str	r0, [sp, #32]
 800f252:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f256:	9300      	str	r3, [sp, #0]
 800f258:	9b06      	ldr	r3, [sp, #24]
 800f25a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f25e:	bfa8      	it	ge
 800f260:	1ed4      	subge	r4, r2, #3
 800f262:	9305      	str	r3, [sp, #20]
 800f264:	bfb2      	itee	lt
 800f266:	2400      	movlt	r4, #0
 800f268:	2318      	movge	r3, #24
 800f26a:	fb94 f4f3 	sdivge	r4, r4, r3
 800f26e:	f06f 0317 	mvn.w	r3, #23
 800f272:	fb04 3303 	mla	r3, r4, r3, r3
 800f276:	eb03 0b02 	add.w	fp, r3, r2
 800f27a:	9b00      	ldr	r3, [sp, #0]
 800f27c:	9a05      	ldr	r2, [sp, #20]
 800f27e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800f548 <__kernel_rem_pio2+0x310>
 800f282:	eb03 0802 	add.w	r8, r3, r2
 800f286:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f288:	1aa7      	subs	r7, r4, r2
 800f28a:	ae20      	add	r6, sp, #128	@ 0x80
 800f28c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f290:	2500      	movs	r5, #0
 800f292:	4545      	cmp	r5, r8
 800f294:	dd12      	ble.n	800f2bc <__kernel_rem_pio2+0x84>
 800f296:	9b06      	ldr	r3, [sp, #24]
 800f298:	aa20      	add	r2, sp, #128	@ 0x80
 800f29a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f29e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800f2a2:	2700      	movs	r7, #0
 800f2a4:	9b00      	ldr	r3, [sp, #0]
 800f2a6:	429f      	cmp	r7, r3
 800f2a8:	dc2e      	bgt.n	800f308 <__kernel_rem_pio2+0xd0>
 800f2aa:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800f548 <__kernel_rem_pio2+0x310>
 800f2ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f2b2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f2b6:	46a8      	mov	r8, r5
 800f2b8:	2600      	movs	r6, #0
 800f2ba:	e01b      	b.n	800f2f4 <__kernel_rem_pio2+0xbc>
 800f2bc:	42ef      	cmn	r7, r5
 800f2be:	d407      	bmi.n	800f2d0 <__kernel_rem_pio2+0x98>
 800f2c0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f2c4:	f7f1 f8fa 	bl	80004bc <__aeabi_i2d>
 800f2c8:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f2cc:	3501      	adds	r5, #1
 800f2ce:	e7e0      	b.n	800f292 <__kernel_rem_pio2+0x5a>
 800f2d0:	ec51 0b18 	vmov	r0, r1, d8
 800f2d4:	e7f8      	b.n	800f2c8 <__kernel_rem_pio2+0x90>
 800f2d6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800f2da:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f2de:	f7f1 f957 	bl	8000590 <__aeabi_dmul>
 800f2e2:	4602      	mov	r2, r0
 800f2e4:	460b      	mov	r3, r1
 800f2e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2ea:	f7f0 ff9b 	bl	8000224 <__adddf3>
 800f2ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2f2:	3601      	adds	r6, #1
 800f2f4:	9b05      	ldr	r3, [sp, #20]
 800f2f6:	429e      	cmp	r6, r3
 800f2f8:	dded      	ble.n	800f2d6 <__kernel_rem_pio2+0x9e>
 800f2fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f2fe:	3701      	adds	r7, #1
 800f300:	ecaa 7b02 	vstmia	sl!, {d7}
 800f304:	3508      	adds	r5, #8
 800f306:	e7cd      	b.n	800f2a4 <__kernel_rem_pio2+0x6c>
 800f308:	9b00      	ldr	r3, [sp, #0]
 800f30a:	f8dd 8000 	ldr.w	r8, [sp]
 800f30e:	aa0c      	add	r2, sp, #48	@ 0x30
 800f310:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f314:	930a      	str	r3, [sp, #40]	@ 0x28
 800f316:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f318:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f31c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f31e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800f322:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f324:	ab98      	add	r3, sp, #608	@ 0x260
 800f326:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f32a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800f32e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f332:	ac0c      	add	r4, sp, #48	@ 0x30
 800f334:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f336:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800f33a:	46a1      	mov	r9, r4
 800f33c:	46c2      	mov	sl, r8
 800f33e:	f1ba 0f00 	cmp.w	sl, #0
 800f342:	dc77      	bgt.n	800f434 <__kernel_rem_pio2+0x1fc>
 800f344:	4658      	mov	r0, fp
 800f346:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f34a:	f7ff fe95 	bl	800f078 <scalbn>
 800f34e:	ec57 6b10 	vmov	r6, r7, d0
 800f352:	2200      	movs	r2, #0
 800f354:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f358:	4630      	mov	r0, r6
 800f35a:	4639      	mov	r1, r7
 800f35c:	f7f1 f918 	bl	8000590 <__aeabi_dmul>
 800f360:	ec41 0b10 	vmov	d0, r0, r1
 800f364:	f000 fd20 	bl	800fda8 <floor>
 800f368:	4b7c      	ldr	r3, [pc, #496]	@ (800f55c <__kernel_rem_pio2+0x324>)
 800f36a:	ec51 0b10 	vmov	r0, r1, d0
 800f36e:	2200      	movs	r2, #0
 800f370:	f7f1 f90e 	bl	8000590 <__aeabi_dmul>
 800f374:	4602      	mov	r2, r0
 800f376:	460b      	mov	r3, r1
 800f378:	4630      	mov	r0, r6
 800f37a:	4639      	mov	r1, r7
 800f37c:	f7f0 ff50 	bl	8000220 <__aeabi_dsub>
 800f380:	460f      	mov	r7, r1
 800f382:	4606      	mov	r6, r0
 800f384:	f7f1 fb9e 	bl	8000ac4 <__aeabi_d2iz>
 800f388:	9002      	str	r0, [sp, #8]
 800f38a:	f7f1 f897 	bl	80004bc <__aeabi_i2d>
 800f38e:	4602      	mov	r2, r0
 800f390:	460b      	mov	r3, r1
 800f392:	4630      	mov	r0, r6
 800f394:	4639      	mov	r1, r7
 800f396:	f7f0 ff43 	bl	8000220 <__aeabi_dsub>
 800f39a:	f1bb 0f00 	cmp.w	fp, #0
 800f39e:	4606      	mov	r6, r0
 800f3a0:	460f      	mov	r7, r1
 800f3a2:	dd6c      	ble.n	800f47e <__kernel_rem_pio2+0x246>
 800f3a4:	f108 31ff 	add.w	r1, r8, #4294967295
 800f3a8:	ab0c      	add	r3, sp, #48	@ 0x30
 800f3aa:	9d02      	ldr	r5, [sp, #8]
 800f3ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f3b0:	f1cb 0018 	rsb	r0, fp, #24
 800f3b4:	fa43 f200 	asr.w	r2, r3, r0
 800f3b8:	4415      	add	r5, r2
 800f3ba:	4082      	lsls	r2, r0
 800f3bc:	1a9b      	subs	r3, r3, r2
 800f3be:	aa0c      	add	r2, sp, #48	@ 0x30
 800f3c0:	9502      	str	r5, [sp, #8]
 800f3c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f3c6:	f1cb 0217 	rsb	r2, fp, #23
 800f3ca:	fa43 f902 	asr.w	r9, r3, r2
 800f3ce:	f1b9 0f00 	cmp.w	r9, #0
 800f3d2:	dd64      	ble.n	800f49e <__kernel_rem_pio2+0x266>
 800f3d4:	9b02      	ldr	r3, [sp, #8]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	3301      	adds	r3, #1
 800f3da:	9302      	str	r3, [sp, #8]
 800f3dc:	4615      	mov	r5, r2
 800f3de:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800f3e2:	4590      	cmp	r8, r2
 800f3e4:	f300 80a1 	bgt.w	800f52a <__kernel_rem_pio2+0x2f2>
 800f3e8:	f1bb 0f00 	cmp.w	fp, #0
 800f3ec:	dd07      	ble.n	800f3fe <__kernel_rem_pio2+0x1c6>
 800f3ee:	f1bb 0f01 	cmp.w	fp, #1
 800f3f2:	f000 80c1 	beq.w	800f578 <__kernel_rem_pio2+0x340>
 800f3f6:	f1bb 0f02 	cmp.w	fp, #2
 800f3fa:	f000 80c8 	beq.w	800f58e <__kernel_rem_pio2+0x356>
 800f3fe:	f1b9 0f02 	cmp.w	r9, #2
 800f402:	d14c      	bne.n	800f49e <__kernel_rem_pio2+0x266>
 800f404:	4632      	mov	r2, r6
 800f406:	463b      	mov	r3, r7
 800f408:	4955      	ldr	r1, [pc, #340]	@ (800f560 <__kernel_rem_pio2+0x328>)
 800f40a:	2000      	movs	r0, #0
 800f40c:	f7f0 ff08 	bl	8000220 <__aeabi_dsub>
 800f410:	4606      	mov	r6, r0
 800f412:	460f      	mov	r7, r1
 800f414:	2d00      	cmp	r5, #0
 800f416:	d042      	beq.n	800f49e <__kernel_rem_pio2+0x266>
 800f418:	4658      	mov	r0, fp
 800f41a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800f550 <__kernel_rem_pio2+0x318>
 800f41e:	f7ff fe2b 	bl	800f078 <scalbn>
 800f422:	4630      	mov	r0, r6
 800f424:	4639      	mov	r1, r7
 800f426:	ec53 2b10 	vmov	r2, r3, d0
 800f42a:	f7f0 fef9 	bl	8000220 <__aeabi_dsub>
 800f42e:	4606      	mov	r6, r0
 800f430:	460f      	mov	r7, r1
 800f432:	e034      	b.n	800f49e <__kernel_rem_pio2+0x266>
 800f434:	4b4b      	ldr	r3, [pc, #300]	@ (800f564 <__kernel_rem_pio2+0x32c>)
 800f436:	2200      	movs	r2, #0
 800f438:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f43c:	f7f1 f8a8 	bl	8000590 <__aeabi_dmul>
 800f440:	f7f1 fb40 	bl	8000ac4 <__aeabi_d2iz>
 800f444:	f7f1 f83a 	bl	80004bc <__aeabi_i2d>
 800f448:	4b47      	ldr	r3, [pc, #284]	@ (800f568 <__kernel_rem_pio2+0x330>)
 800f44a:	2200      	movs	r2, #0
 800f44c:	4606      	mov	r6, r0
 800f44e:	460f      	mov	r7, r1
 800f450:	f7f1 f89e 	bl	8000590 <__aeabi_dmul>
 800f454:	4602      	mov	r2, r0
 800f456:	460b      	mov	r3, r1
 800f458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f45c:	f7f0 fee0 	bl	8000220 <__aeabi_dsub>
 800f460:	f7f1 fb30 	bl	8000ac4 <__aeabi_d2iz>
 800f464:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800f468:	f849 0b04 	str.w	r0, [r9], #4
 800f46c:	4639      	mov	r1, r7
 800f46e:	4630      	mov	r0, r6
 800f470:	f7f0 fed8 	bl	8000224 <__adddf3>
 800f474:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f47c:	e75f      	b.n	800f33e <__kernel_rem_pio2+0x106>
 800f47e:	d107      	bne.n	800f490 <__kernel_rem_pio2+0x258>
 800f480:	f108 33ff 	add.w	r3, r8, #4294967295
 800f484:	aa0c      	add	r2, sp, #48	@ 0x30
 800f486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f48a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800f48e:	e79e      	b.n	800f3ce <__kernel_rem_pio2+0x196>
 800f490:	4b36      	ldr	r3, [pc, #216]	@ (800f56c <__kernel_rem_pio2+0x334>)
 800f492:	2200      	movs	r2, #0
 800f494:	f7f1 fb02 	bl	8000a9c <__aeabi_dcmpge>
 800f498:	2800      	cmp	r0, #0
 800f49a:	d143      	bne.n	800f524 <__kernel_rem_pio2+0x2ec>
 800f49c:	4681      	mov	r9, r0
 800f49e:	2200      	movs	r2, #0
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	4639      	mov	r1, r7
 800f4a6:	f7f1 fadb 	bl	8000a60 <__aeabi_dcmpeq>
 800f4aa:	2800      	cmp	r0, #0
 800f4ac:	f000 80c1 	beq.w	800f632 <__kernel_rem_pio2+0x3fa>
 800f4b0:	f108 33ff 	add.w	r3, r8, #4294967295
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	9900      	ldr	r1, [sp, #0]
 800f4b8:	428b      	cmp	r3, r1
 800f4ba:	da70      	bge.n	800f59e <__kernel_rem_pio2+0x366>
 800f4bc:	2a00      	cmp	r2, #0
 800f4be:	f000 808b 	beq.w	800f5d8 <__kernel_rem_pio2+0x3a0>
 800f4c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800f4c6:	ab0c      	add	r3, sp, #48	@ 0x30
 800f4c8:	f1ab 0b18 	sub.w	fp, fp, #24
 800f4cc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d0f6      	beq.n	800f4c2 <__kernel_rem_pio2+0x28a>
 800f4d4:	4658      	mov	r0, fp
 800f4d6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800f550 <__kernel_rem_pio2+0x318>
 800f4da:	f7ff fdcd 	bl	800f078 <scalbn>
 800f4de:	f108 0301 	add.w	r3, r8, #1
 800f4e2:	00da      	lsls	r2, r3, #3
 800f4e4:	9205      	str	r2, [sp, #20]
 800f4e6:	ec55 4b10 	vmov	r4, r5, d0
 800f4ea:	aa70      	add	r2, sp, #448	@ 0x1c0
 800f4ec:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800f564 <__kernel_rem_pio2+0x32c>
 800f4f0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800f4f4:	4646      	mov	r6, r8
 800f4f6:	f04f 0a00 	mov.w	sl, #0
 800f4fa:	2e00      	cmp	r6, #0
 800f4fc:	f280 80d1 	bge.w	800f6a2 <__kernel_rem_pio2+0x46a>
 800f500:	4644      	mov	r4, r8
 800f502:	2c00      	cmp	r4, #0
 800f504:	f2c0 80ff 	blt.w	800f706 <__kernel_rem_pio2+0x4ce>
 800f508:	4b19      	ldr	r3, [pc, #100]	@ (800f570 <__kernel_rem_pio2+0x338>)
 800f50a:	461f      	mov	r7, r3
 800f50c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f50e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f512:	9306      	str	r3, [sp, #24]
 800f514:	f04f 0a00 	mov.w	sl, #0
 800f518:	f04f 0b00 	mov.w	fp, #0
 800f51c:	2600      	movs	r6, #0
 800f51e:	eba8 0504 	sub.w	r5, r8, r4
 800f522:	e0e4      	b.n	800f6ee <__kernel_rem_pio2+0x4b6>
 800f524:	f04f 0902 	mov.w	r9, #2
 800f528:	e754      	b.n	800f3d4 <__kernel_rem_pio2+0x19c>
 800f52a:	f854 3b04 	ldr.w	r3, [r4], #4
 800f52e:	bb0d      	cbnz	r5, 800f574 <__kernel_rem_pio2+0x33c>
 800f530:	b123      	cbz	r3, 800f53c <__kernel_rem_pio2+0x304>
 800f532:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800f536:	f844 3c04 	str.w	r3, [r4, #-4]
 800f53a:	2301      	movs	r3, #1
 800f53c:	3201      	adds	r2, #1
 800f53e:	461d      	mov	r5, r3
 800f540:	e74f      	b.n	800f3e2 <__kernel_rem_pio2+0x1aa>
 800f542:	bf00      	nop
 800f544:	f3af 8000 	nop.w
	...
 800f554:	3ff00000 	.word	0x3ff00000
 800f558:	080104f8 	.word	0x080104f8
 800f55c:	40200000 	.word	0x40200000
 800f560:	3ff00000 	.word	0x3ff00000
 800f564:	3e700000 	.word	0x3e700000
 800f568:	41700000 	.word	0x41700000
 800f56c:	3fe00000 	.word	0x3fe00000
 800f570:	080104b8 	.word	0x080104b8
 800f574:	1acb      	subs	r3, r1, r3
 800f576:	e7de      	b.n	800f536 <__kernel_rem_pio2+0x2fe>
 800f578:	f108 32ff 	add.w	r2, r8, #4294967295
 800f57c:	ab0c      	add	r3, sp, #48	@ 0x30
 800f57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f582:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f586:	a90c      	add	r1, sp, #48	@ 0x30
 800f588:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f58c:	e737      	b.n	800f3fe <__kernel_rem_pio2+0x1c6>
 800f58e:	f108 32ff 	add.w	r2, r8, #4294967295
 800f592:	ab0c      	add	r3, sp, #48	@ 0x30
 800f594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f598:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f59c:	e7f3      	b.n	800f586 <__kernel_rem_pio2+0x34e>
 800f59e:	a90c      	add	r1, sp, #48	@ 0x30
 800f5a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f5a4:	3b01      	subs	r3, #1
 800f5a6:	430a      	orrs	r2, r1
 800f5a8:	e785      	b.n	800f4b6 <__kernel_rem_pio2+0x27e>
 800f5aa:	3401      	adds	r4, #1
 800f5ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f5b0:	2a00      	cmp	r2, #0
 800f5b2:	d0fa      	beq.n	800f5aa <__kernel_rem_pio2+0x372>
 800f5b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f5ba:	eb0d 0503 	add.w	r5, sp, r3
 800f5be:	9b06      	ldr	r3, [sp, #24]
 800f5c0:	aa20      	add	r2, sp, #128	@ 0x80
 800f5c2:	4443      	add	r3, r8
 800f5c4:	f108 0701 	add.w	r7, r8, #1
 800f5c8:	3d98      	subs	r5, #152	@ 0x98
 800f5ca:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800f5ce:	4444      	add	r4, r8
 800f5d0:	42bc      	cmp	r4, r7
 800f5d2:	da04      	bge.n	800f5de <__kernel_rem_pio2+0x3a6>
 800f5d4:	46a0      	mov	r8, r4
 800f5d6:	e6a2      	b.n	800f31e <__kernel_rem_pio2+0xe6>
 800f5d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5da:	2401      	movs	r4, #1
 800f5dc:	e7e6      	b.n	800f5ac <__kernel_rem_pio2+0x374>
 800f5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5e0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f5e4:	f7f0 ff6a 	bl	80004bc <__aeabi_i2d>
 800f5e8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800f8a8 <__kernel_rem_pio2+0x670>
 800f5ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f5f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f5f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f5f8:	46b2      	mov	sl, r6
 800f5fa:	f04f 0800 	mov.w	r8, #0
 800f5fe:	9b05      	ldr	r3, [sp, #20]
 800f600:	4598      	cmp	r8, r3
 800f602:	dd05      	ble.n	800f610 <__kernel_rem_pio2+0x3d8>
 800f604:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f608:	3701      	adds	r7, #1
 800f60a:	eca5 7b02 	vstmia	r5!, {d7}
 800f60e:	e7df      	b.n	800f5d0 <__kernel_rem_pio2+0x398>
 800f610:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800f614:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f618:	f7f0 ffba 	bl	8000590 <__aeabi_dmul>
 800f61c:	4602      	mov	r2, r0
 800f61e:	460b      	mov	r3, r1
 800f620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f624:	f7f0 fdfe 	bl	8000224 <__adddf3>
 800f628:	f108 0801 	add.w	r8, r8, #1
 800f62c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f630:	e7e5      	b.n	800f5fe <__kernel_rem_pio2+0x3c6>
 800f632:	f1cb 0000 	rsb	r0, fp, #0
 800f636:	ec47 6b10 	vmov	d0, r6, r7
 800f63a:	f7ff fd1d 	bl	800f078 <scalbn>
 800f63e:	ec55 4b10 	vmov	r4, r5, d0
 800f642:	4b9b      	ldr	r3, [pc, #620]	@ (800f8b0 <__kernel_rem_pio2+0x678>)
 800f644:	2200      	movs	r2, #0
 800f646:	4620      	mov	r0, r4
 800f648:	4629      	mov	r1, r5
 800f64a:	f7f1 fa27 	bl	8000a9c <__aeabi_dcmpge>
 800f64e:	b300      	cbz	r0, 800f692 <__kernel_rem_pio2+0x45a>
 800f650:	4b98      	ldr	r3, [pc, #608]	@ (800f8b4 <__kernel_rem_pio2+0x67c>)
 800f652:	2200      	movs	r2, #0
 800f654:	4620      	mov	r0, r4
 800f656:	4629      	mov	r1, r5
 800f658:	f7f0 ff9a 	bl	8000590 <__aeabi_dmul>
 800f65c:	f7f1 fa32 	bl	8000ac4 <__aeabi_d2iz>
 800f660:	4606      	mov	r6, r0
 800f662:	f7f0 ff2b 	bl	80004bc <__aeabi_i2d>
 800f666:	4b92      	ldr	r3, [pc, #584]	@ (800f8b0 <__kernel_rem_pio2+0x678>)
 800f668:	2200      	movs	r2, #0
 800f66a:	f7f0 ff91 	bl	8000590 <__aeabi_dmul>
 800f66e:	460b      	mov	r3, r1
 800f670:	4602      	mov	r2, r0
 800f672:	4629      	mov	r1, r5
 800f674:	4620      	mov	r0, r4
 800f676:	f7f0 fdd3 	bl	8000220 <__aeabi_dsub>
 800f67a:	f7f1 fa23 	bl	8000ac4 <__aeabi_d2iz>
 800f67e:	ab0c      	add	r3, sp, #48	@ 0x30
 800f680:	f10b 0b18 	add.w	fp, fp, #24
 800f684:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f688:	f108 0801 	add.w	r8, r8, #1
 800f68c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f690:	e720      	b.n	800f4d4 <__kernel_rem_pio2+0x29c>
 800f692:	4620      	mov	r0, r4
 800f694:	4629      	mov	r1, r5
 800f696:	f7f1 fa15 	bl	8000ac4 <__aeabi_d2iz>
 800f69a:	ab0c      	add	r3, sp, #48	@ 0x30
 800f69c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f6a0:	e718      	b.n	800f4d4 <__kernel_rem_pio2+0x29c>
 800f6a2:	ab0c      	add	r3, sp, #48	@ 0x30
 800f6a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f6a8:	f7f0 ff08 	bl	80004bc <__aeabi_i2d>
 800f6ac:	4622      	mov	r2, r4
 800f6ae:	462b      	mov	r3, r5
 800f6b0:	f7f0 ff6e 	bl	8000590 <__aeabi_dmul>
 800f6b4:	4652      	mov	r2, sl
 800f6b6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800f6ba:	465b      	mov	r3, fp
 800f6bc:	4620      	mov	r0, r4
 800f6be:	4629      	mov	r1, r5
 800f6c0:	f7f0 ff66 	bl	8000590 <__aeabi_dmul>
 800f6c4:	3e01      	subs	r6, #1
 800f6c6:	4604      	mov	r4, r0
 800f6c8:	460d      	mov	r5, r1
 800f6ca:	e716      	b.n	800f4fa <__kernel_rem_pio2+0x2c2>
 800f6cc:	9906      	ldr	r1, [sp, #24]
 800f6ce:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800f6d2:	9106      	str	r1, [sp, #24]
 800f6d4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800f6d8:	f7f0 ff5a 	bl	8000590 <__aeabi_dmul>
 800f6dc:	4602      	mov	r2, r0
 800f6de:	460b      	mov	r3, r1
 800f6e0:	4650      	mov	r0, sl
 800f6e2:	4659      	mov	r1, fp
 800f6e4:	f7f0 fd9e 	bl	8000224 <__adddf3>
 800f6e8:	3601      	adds	r6, #1
 800f6ea:	4682      	mov	sl, r0
 800f6ec:	468b      	mov	fp, r1
 800f6ee:	9b00      	ldr	r3, [sp, #0]
 800f6f0:	429e      	cmp	r6, r3
 800f6f2:	dc01      	bgt.n	800f6f8 <__kernel_rem_pio2+0x4c0>
 800f6f4:	42ae      	cmp	r6, r5
 800f6f6:	dde9      	ble.n	800f6cc <__kernel_rem_pio2+0x494>
 800f6f8:	ab48      	add	r3, sp, #288	@ 0x120
 800f6fa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f6fe:	e9c5 ab00 	strd	sl, fp, [r5]
 800f702:	3c01      	subs	r4, #1
 800f704:	e6fd      	b.n	800f502 <__kernel_rem_pio2+0x2ca>
 800f706:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f708:	2b02      	cmp	r3, #2
 800f70a:	dc0b      	bgt.n	800f724 <__kernel_rem_pio2+0x4ec>
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	dc35      	bgt.n	800f77c <__kernel_rem_pio2+0x544>
 800f710:	d059      	beq.n	800f7c6 <__kernel_rem_pio2+0x58e>
 800f712:	9b02      	ldr	r3, [sp, #8]
 800f714:	f003 0007 	and.w	r0, r3, #7
 800f718:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800f71c:	ecbd 8b02 	vpop	{d8}
 800f720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f724:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f726:	2b03      	cmp	r3, #3
 800f728:	d1f3      	bne.n	800f712 <__kernel_rem_pio2+0x4da>
 800f72a:	9b05      	ldr	r3, [sp, #20]
 800f72c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f730:	eb0d 0403 	add.w	r4, sp, r3
 800f734:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800f738:	4625      	mov	r5, r4
 800f73a:	46c2      	mov	sl, r8
 800f73c:	f1ba 0f00 	cmp.w	sl, #0
 800f740:	dc69      	bgt.n	800f816 <__kernel_rem_pio2+0x5de>
 800f742:	4645      	mov	r5, r8
 800f744:	2d01      	cmp	r5, #1
 800f746:	f300 8087 	bgt.w	800f858 <__kernel_rem_pio2+0x620>
 800f74a:	9c05      	ldr	r4, [sp, #20]
 800f74c:	ab48      	add	r3, sp, #288	@ 0x120
 800f74e:	441c      	add	r4, r3
 800f750:	2000      	movs	r0, #0
 800f752:	2100      	movs	r1, #0
 800f754:	f1b8 0f01 	cmp.w	r8, #1
 800f758:	f300 809c 	bgt.w	800f894 <__kernel_rem_pio2+0x65c>
 800f75c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800f760:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800f764:	f1b9 0f00 	cmp.w	r9, #0
 800f768:	f040 80a6 	bne.w	800f8b8 <__kernel_rem_pio2+0x680>
 800f76c:	9b04      	ldr	r3, [sp, #16]
 800f76e:	e9c3 5600 	strd	r5, r6, [r3]
 800f772:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f776:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f77a:	e7ca      	b.n	800f712 <__kernel_rem_pio2+0x4da>
 800f77c:	9d05      	ldr	r5, [sp, #20]
 800f77e:	ab48      	add	r3, sp, #288	@ 0x120
 800f780:	441d      	add	r5, r3
 800f782:	4644      	mov	r4, r8
 800f784:	2000      	movs	r0, #0
 800f786:	2100      	movs	r1, #0
 800f788:	2c00      	cmp	r4, #0
 800f78a:	da35      	bge.n	800f7f8 <__kernel_rem_pio2+0x5c0>
 800f78c:	f1b9 0f00 	cmp.w	r9, #0
 800f790:	d038      	beq.n	800f804 <__kernel_rem_pio2+0x5cc>
 800f792:	4602      	mov	r2, r0
 800f794:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f798:	9c04      	ldr	r4, [sp, #16]
 800f79a:	e9c4 2300 	strd	r2, r3, [r4]
 800f79e:	4602      	mov	r2, r0
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800f7a6:	f7f0 fd3b 	bl	8000220 <__aeabi_dsub>
 800f7aa:	ad4a      	add	r5, sp, #296	@ 0x128
 800f7ac:	2401      	movs	r4, #1
 800f7ae:	45a0      	cmp	r8, r4
 800f7b0:	da2b      	bge.n	800f80a <__kernel_rem_pio2+0x5d2>
 800f7b2:	f1b9 0f00 	cmp.w	r9, #0
 800f7b6:	d002      	beq.n	800f7be <__kernel_rem_pio2+0x586>
 800f7b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f7bc:	4619      	mov	r1, r3
 800f7be:	9b04      	ldr	r3, [sp, #16]
 800f7c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f7c4:	e7a5      	b.n	800f712 <__kernel_rem_pio2+0x4da>
 800f7c6:	9c05      	ldr	r4, [sp, #20]
 800f7c8:	ab48      	add	r3, sp, #288	@ 0x120
 800f7ca:	441c      	add	r4, r3
 800f7cc:	2000      	movs	r0, #0
 800f7ce:	2100      	movs	r1, #0
 800f7d0:	f1b8 0f00 	cmp.w	r8, #0
 800f7d4:	da09      	bge.n	800f7ea <__kernel_rem_pio2+0x5b2>
 800f7d6:	f1b9 0f00 	cmp.w	r9, #0
 800f7da:	d002      	beq.n	800f7e2 <__kernel_rem_pio2+0x5aa>
 800f7dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	9b04      	ldr	r3, [sp, #16]
 800f7e4:	e9c3 0100 	strd	r0, r1, [r3]
 800f7e8:	e793      	b.n	800f712 <__kernel_rem_pio2+0x4da>
 800f7ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f7ee:	f7f0 fd19 	bl	8000224 <__adddf3>
 800f7f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800f7f6:	e7eb      	b.n	800f7d0 <__kernel_rem_pio2+0x598>
 800f7f8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800f7fc:	f7f0 fd12 	bl	8000224 <__adddf3>
 800f800:	3c01      	subs	r4, #1
 800f802:	e7c1      	b.n	800f788 <__kernel_rem_pio2+0x550>
 800f804:	4602      	mov	r2, r0
 800f806:	460b      	mov	r3, r1
 800f808:	e7c6      	b.n	800f798 <__kernel_rem_pio2+0x560>
 800f80a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f80e:	f7f0 fd09 	bl	8000224 <__adddf3>
 800f812:	3401      	adds	r4, #1
 800f814:	e7cb      	b.n	800f7ae <__kernel_rem_pio2+0x576>
 800f816:	ed35 7b02 	vldmdb	r5!, {d7}
 800f81a:	ed8d 7b00 	vstr	d7, [sp]
 800f81e:	ed95 7b02 	vldr	d7, [r5, #8]
 800f822:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f826:	ec53 2b17 	vmov	r2, r3, d7
 800f82a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f82e:	f7f0 fcf9 	bl	8000224 <__adddf3>
 800f832:	4602      	mov	r2, r0
 800f834:	460b      	mov	r3, r1
 800f836:	4606      	mov	r6, r0
 800f838:	460f      	mov	r7, r1
 800f83a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f83e:	f7f0 fcef 	bl	8000220 <__aeabi_dsub>
 800f842:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f846:	f7f0 fced 	bl	8000224 <__adddf3>
 800f84a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f84e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800f852:	e9c5 6700 	strd	r6, r7, [r5]
 800f856:	e771      	b.n	800f73c <__kernel_rem_pio2+0x504>
 800f858:	ed34 7b02 	vldmdb	r4!, {d7}
 800f85c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800f860:	ec51 0b17 	vmov	r0, r1, d7
 800f864:	4652      	mov	r2, sl
 800f866:	465b      	mov	r3, fp
 800f868:	ed8d 7b00 	vstr	d7, [sp]
 800f86c:	f7f0 fcda 	bl	8000224 <__adddf3>
 800f870:	4602      	mov	r2, r0
 800f872:	460b      	mov	r3, r1
 800f874:	4606      	mov	r6, r0
 800f876:	460f      	mov	r7, r1
 800f878:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f87c:	f7f0 fcd0 	bl	8000220 <__aeabi_dsub>
 800f880:	4652      	mov	r2, sl
 800f882:	465b      	mov	r3, fp
 800f884:	f7f0 fcce 	bl	8000224 <__adddf3>
 800f888:	3d01      	subs	r5, #1
 800f88a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f88e:	e9c4 6700 	strd	r6, r7, [r4]
 800f892:	e757      	b.n	800f744 <__kernel_rem_pio2+0x50c>
 800f894:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f898:	f7f0 fcc4 	bl	8000224 <__adddf3>
 800f89c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f8a0:	e758      	b.n	800f754 <__kernel_rem_pio2+0x51c>
 800f8a2:	bf00      	nop
 800f8a4:	f3af 8000 	nop.w
	...
 800f8b0:	41700000 	.word	0x41700000
 800f8b4:	3e700000 	.word	0x3e700000
 800f8b8:	9b04      	ldr	r3, [sp, #16]
 800f8ba:	9a04      	ldr	r2, [sp, #16]
 800f8bc:	601d      	str	r5, [r3, #0]
 800f8be:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800f8c2:	605c      	str	r4, [r3, #4]
 800f8c4:	609f      	str	r7, [r3, #8]
 800f8c6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800f8ca:	60d3      	str	r3, [r2, #12]
 800f8cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f8d0:	6110      	str	r0, [r2, #16]
 800f8d2:	6153      	str	r3, [r2, #20]
 800f8d4:	e71d      	b.n	800f712 <__kernel_rem_pio2+0x4da>
 800f8d6:	bf00      	nop

0800f8d8 <__kernel_rem_pio2f>:
 800f8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8dc:	ed2d 8b04 	vpush	{d8-d9}
 800f8e0:	b0d9      	sub	sp, #356	@ 0x164
 800f8e2:	4690      	mov	r8, r2
 800f8e4:	9001      	str	r0, [sp, #4]
 800f8e6:	4ab6      	ldr	r2, [pc, #728]	@ (800fbc0 <__kernel_rem_pio2f+0x2e8>)
 800f8e8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800f8ea:	f118 0f04 	cmn.w	r8, #4
 800f8ee:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800f8f2:	460f      	mov	r7, r1
 800f8f4:	f103 3bff 	add.w	fp, r3, #4294967295
 800f8f8:	db26      	blt.n	800f948 <__kernel_rem_pio2f+0x70>
 800f8fa:	f1b8 0203 	subs.w	r2, r8, #3
 800f8fe:	bf48      	it	mi
 800f900:	f108 0204 	addmi.w	r2, r8, #4
 800f904:	10d2      	asrs	r2, r2, #3
 800f906:	1c55      	adds	r5, r2, #1
 800f908:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800f90a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800fbd0 <__kernel_rem_pio2f+0x2f8>
 800f90e:	00e8      	lsls	r0, r5, #3
 800f910:	eba2 060b 	sub.w	r6, r2, fp
 800f914:	9002      	str	r0, [sp, #8]
 800f916:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800f91a:	eb0a 0c0b 	add.w	ip, sl, fp
 800f91e:	ac1c      	add	r4, sp, #112	@ 0x70
 800f920:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800f924:	2000      	movs	r0, #0
 800f926:	4560      	cmp	r0, ip
 800f928:	dd10      	ble.n	800f94c <__kernel_rem_pio2f+0x74>
 800f92a:	a91c      	add	r1, sp, #112	@ 0x70
 800f92c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800f930:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800f934:	2600      	movs	r6, #0
 800f936:	4556      	cmp	r6, sl
 800f938:	dc24      	bgt.n	800f984 <__kernel_rem_pio2f+0xac>
 800f93a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f93e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800fbd0 <__kernel_rem_pio2f+0x2f8>
 800f942:	4684      	mov	ip, r0
 800f944:	2400      	movs	r4, #0
 800f946:	e016      	b.n	800f976 <__kernel_rem_pio2f+0x9e>
 800f948:	2200      	movs	r2, #0
 800f94a:	e7dc      	b.n	800f906 <__kernel_rem_pio2f+0x2e>
 800f94c:	42c6      	cmn	r6, r0
 800f94e:	bf5d      	ittte	pl
 800f950:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800f954:	ee07 1a90 	vmovpl	s15, r1
 800f958:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f95c:	eef0 7a47 	vmovmi.f32	s15, s14
 800f960:	ece4 7a01 	vstmia	r4!, {s15}
 800f964:	3001      	adds	r0, #1
 800f966:	e7de      	b.n	800f926 <__kernel_rem_pio2f+0x4e>
 800f968:	ecfe 6a01 	vldmia	lr!, {s13}
 800f96c:	ed3c 7a01 	vldmdb	ip!, {s14}
 800f970:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f974:	3401      	adds	r4, #1
 800f976:	455c      	cmp	r4, fp
 800f978:	ddf6      	ble.n	800f968 <__kernel_rem_pio2f+0x90>
 800f97a:	ece9 7a01 	vstmia	r9!, {s15}
 800f97e:	3601      	adds	r6, #1
 800f980:	3004      	adds	r0, #4
 800f982:	e7d8      	b.n	800f936 <__kernel_rem_pio2f+0x5e>
 800f984:	a908      	add	r1, sp, #32
 800f986:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f98a:	9104      	str	r1, [sp, #16]
 800f98c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800f98e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800fbcc <__kernel_rem_pio2f+0x2f4>
 800f992:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800fbc8 <__kernel_rem_pio2f+0x2f0>
 800f996:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800f99a:	9203      	str	r2, [sp, #12]
 800f99c:	4654      	mov	r4, sl
 800f99e:	00a2      	lsls	r2, r4, #2
 800f9a0:	9205      	str	r2, [sp, #20]
 800f9a2:	aa58      	add	r2, sp, #352	@ 0x160
 800f9a4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800f9a8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800f9ac:	a944      	add	r1, sp, #272	@ 0x110
 800f9ae:	aa08      	add	r2, sp, #32
 800f9b0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800f9b4:	4694      	mov	ip, r2
 800f9b6:	4626      	mov	r6, r4
 800f9b8:	2e00      	cmp	r6, #0
 800f9ba:	dc4c      	bgt.n	800fa56 <__kernel_rem_pio2f+0x17e>
 800f9bc:	4628      	mov	r0, r5
 800f9be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f9c2:	f7ff fbd3 	bl	800f16c <scalbnf>
 800f9c6:	eeb0 8a40 	vmov.f32	s16, s0
 800f9ca:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800f9ce:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f9d2:	f000 fa65 	bl	800fea0 <floorf>
 800f9d6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800f9da:	eea0 8a67 	vfms.f32	s16, s0, s15
 800f9de:	2d00      	cmp	r5, #0
 800f9e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f9e4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f9e8:	ee17 9a90 	vmov	r9, s15
 800f9ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f9f0:	ee38 8a67 	vsub.f32	s16, s16, s15
 800f9f4:	dd41      	ble.n	800fa7a <__kernel_rem_pio2f+0x1a2>
 800f9f6:	f104 3cff 	add.w	ip, r4, #4294967295
 800f9fa:	a908      	add	r1, sp, #32
 800f9fc:	f1c5 0e08 	rsb	lr, r5, #8
 800fa00:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800fa04:	fa46 f00e 	asr.w	r0, r6, lr
 800fa08:	4481      	add	r9, r0
 800fa0a:	fa00 f00e 	lsl.w	r0, r0, lr
 800fa0e:	1a36      	subs	r6, r6, r0
 800fa10:	f1c5 0007 	rsb	r0, r5, #7
 800fa14:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800fa18:	4106      	asrs	r6, r0
 800fa1a:	2e00      	cmp	r6, #0
 800fa1c:	dd3c      	ble.n	800fa98 <__kernel_rem_pio2f+0x1c0>
 800fa1e:	f04f 0e00 	mov.w	lr, #0
 800fa22:	f109 0901 	add.w	r9, r9, #1
 800fa26:	4670      	mov	r0, lr
 800fa28:	4574      	cmp	r4, lr
 800fa2a:	dc68      	bgt.n	800fafe <__kernel_rem_pio2f+0x226>
 800fa2c:	2d00      	cmp	r5, #0
 800fa2e:	dd03      	ble.n	800fa38 <__kernel_rem_pio2f+0x160>
 800fa30:	2d01      	cmp	r5, #1
 800fa32:	d074      	beq.n	800fb1e <__kernel_rem_pio2f+0x246>
 800fa34:	2d02      	cmp	r5, #2
 800fa36:	d07d      	beq.n	800fb34 <__kernel_rem_pio2f+0x25c>
 800fa38:	2e02      	cmp	r6, #2
 800fa3a:	d12d      	bne.n	800fa98 <__kernel_rem_pio2f+0x1c0>
 800fa3c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fa40:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fa44:	b340      	cbz	r0, 800fa98 <__kernel_rem_pio2f+0x1c0>
 800fa46:	4628      	mov	r0, r5
 800fa48:	9306      	str	r3, [sp, #24]
 800fa4a:	f7ff fb8f 	bl	800f16c <scalbnf>
 800fa4e:	9b06      	ldr	r3, [sp, #24]
 800fa50:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fa54:	e020      	b.n	800fa98 <__kernel_rem_pio2f+0x1c0>
 800fa56:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fa5a:	3e01      	subs	r6, #1
 800fa5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa64:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800fa68:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fa6c:	ecac 0a01 	vstmia	ip!, {s0}
 800fa70:	ed30 0a01 	vldmdb	r0!, {s0}
 800fa74:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fa78:	e79e      	b.n	800f9b8 <__kernel_rem_pio2f+0xe0>
 800fa7a:	d105      	bne.n	800fa88 <__kernel_rem_pio2f+0x1b0>
 800fa7c:	1e60      	subs	r0, r4, #1
 800fa7e:	a908      	add	r1, sp, #32
 800fa80:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800fa84:	11f6      	asrs	r6, r6, #7
 800fa86:	e7c8      	b.n	800fa1a <__kernel_rem_pio2f+0x142>
 800fa88:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fa8c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fa90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa94:	da31      	bge.n	800fafa <__kernel_rem_pio2f+0x222>
 800fa96:	2600      	movs	r6, #0
 800fa98:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fa9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faa0:	f040 8098 	bne.w	800fbd4 <__kernel_rem_pio2f+0x2fc>
 800faa4:	1e60      	subs	r0, r4, #1
 800faa6:	2200      	movs	r2, #0
 800faa8:	4550      	cmp	r0, sl
 800faaa:	da4b      	bge.n	800fb44 <__kernel_rem_pio2f+0x26c>
 800faac:	2a00      	cmp	r2, #0
 800faae:	d065      	beq.n	800fb7c <__kernel_rem_pio2f+0x2a4>
 800fab0:	3c01      	subs	r4, #1
 800fab2:	ab08      	add	r3, sp, #32
 800fab4:	3d08      	subs	r5, #8
 800fab6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d0f8      	beq.n	800fab0 <__kernel_rem_pio2f+0x1d8>
 800fabe:	4628      	mov	r0, r5
 800fac0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fac4:	f7ff fb52 	bl	800f16c <scalbnf>
 800fac8:	1c63      	adds	r3, r4, #1
 800faca:	aa44      	add	r2, sp, #272	@ 0x110
 800facc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800fbcc <__kernel_rem_pio2f+0x2f4>
 800fad0:	0099      	lsls	r1, r3, #2
 800fad2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fad6:	4623      	mov	r3, r4
 800fad8:	2b00      	cmp	r3, #0
 800fada:	f280 80a9 	bge.w	800fc30 <__kernel_rem_pio2f+0x358>
 800fade:	4623      	mov	r3, r4
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	f2c0 80c7 	blt.w	800fc74 <__kernel_rem_pio2f+0x39c>
 800fae6:	aa44      	add	r2, sp, #272	@ 0x110
 800fae8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800faec:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800fbc4 <__kernel_rem_pio2f+0x2ec>
 800faf0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800fbd0 <__kernel_rem_pio2f+0x2f8>
 800faf4:	2000      	movs	r0, #0
 800faf6:	1ae2      	subs	r2, r4, r3
 800faf8:	e0b1      	b.n	800fc5e <__kernel_rem_pio2f+0x386>
 800fafa:	2602      	movs	r6, #2
 800fafc:	e78f      	b.n	800fa1e <__kernel_rem_pio2f+0x146>
 800fafe:	f852 1b04 	ldr.w	r1, [r2], #4
 800fb02:	b948      	cbnz	r0, 800fb18 <__kernel_rem_pio2f+0x240>
 800fb04:	b121      	cbz	r1, 800fb10 <__kernel_rem_pio2f+0x238>
 800fb06:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800fb0a:	f842 1c04 	str.w	r1, [r2, #-4]
 800fb0e:	2101      	movs	r1, #1
 800fb10:	f10e 0e01 	add.w	lr, lr, #1
 800fb14:	4608      	mov	r0, r1
 800fb16:	e787      	b.n	800fa28 <__kernel_rem_pio2f+0x150>
 800fb18:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800fb1c:	e7f5      	b.n	800fb0a <__kernel_rem_pio2f+0x232>
 800fb1e:	f104 3cff 	add.w	ip, r4, #4294967295
 800fb22:	aa08      	add	r2, sp, #32
 800fb24:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fb28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fb2c:	a908      	add	r1, sp, #32
 800fb2e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800fb32:	e781      	b.n	800fa38 <__kernel_rem_pio2f+0x160>
 800fb34:	f104 3cff 	add.w	ip, r4, #4294967295
 800fb38:	aa08      	add	r2, sp, #32
 800fb3a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fb3e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fb42:	e7f3      	b.n	800fb2c <__kernel_rem_pio2f+0x254>
 800fb44:	a908      	add	r1, sp, #32
 800fb46:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800fb4a:	3801      	subs	r0, #1
 800fb4c:	430a      	orrs	r2, r1
 800fb4e:	e7ab      	b.n	800faa8 <__kernel_rem_pio2f+0x1d0>
 800fb50:	3201      	adds	r2, #1
 800fb52:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800fb56:	2e00      	cmp	r6, #0
 800fb58:	d0fa      	beq.n	800fb50 <__kernel_rem_pio2f+0x278>
 800fb5a:	9905      	ldr	r1, [sp, #20]
 800fb5c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800fb60:	eb0d 0001 	add.w	r0, sp, r1
 800fb64:	18e6      	adds	r6, r4, r3
 800fb66:	a91c      	add	r1, sp, #112	@ 0x70
 800fb68:	f104 0c01 	add.w	ip, r4, #1
 800fb6c:	384c      	subs	r0, #76	@ 0x4c
 800fb6e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800fb72:	4422      	add	r2, r4
 800fb74:	4562      	cmp	r2, ip
 800fb76:	da04      	bge.n	800fb82 <__kernel_rem_pio2f+0x2aa>
 800fb78:	4614      	mov	r4, r2
 800fb7a:	e710      	b.n	800f99e <__kernel_rem_pio2f+0xc6>
 800fb7c:	9804      	ldr	r0, [sp, #16]
 800fb7e:	2201      	movs	r2, #1
 800fb80:	e7e7      	b.n	800fb52 <__kernel_rem_pio2f+0x27a>
 800fb82:	9903      	ldr	r1, [sp, #12]
 800fb84:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fb88:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800fb8c:	9105      	str	r1, [sp, #20]
 800fb8e:	ee07 1a90 	vmov	s15, r1
 800fb92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb96:	2400      	movs	r4, #0
 800fb98:	ece6 7a01 	vstmia	r6!, {s15}
 800fb9c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800fbd0 <__kernel_rem_pio2f+0x2f8>
 800fba0:	46b1      	mov	r9, r6
 800fba2:	455c      	cmp	r4, fp
 800fba4:	dd04      	ble.n	800fbb0 <__kernel_rem_pio2f+0x2d8>
 800fba6:	ece0 7a01 	vstmia	r0!, {s15}
 800fbaa:	f10c 0c01 	add.w	ip, ip, #1
 800fbae:	e7e1      	b.n	800fb74 <__kernel_rem_pio2f+0x29c>
 800fbb0:	ecfe 6a01 	vldmia	lr!, {s13}
 800fbb4:	ed39 7a01 	vldmdb	r9!, {s14}
 800fbb8:	3401      	adds	r4, #1
 800fbba:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fbbe:	e7f0      	b.n	800fba2 <__kernel_rem_pio2f+0x2ca>
 800fbc0:	08010534 	.word	0x08010534
 800fbc4:	08010508 	.word	0x08010508
 800fbc8:	43800000 	.word	0x43800000
 800fbcc:	3b800000 	.word	0x3b800000
 800fbd0:	00000000 	.word	0x00000000
 800fbd4:	9b02      	ldr	r3, [sp, #8]
 800fbd6:	eeb0 0a48 	vmov.f32	s0, s16
 800fbda:	eba3 0008 	sub.w	r0, r3, r8
 800fbde:	f7ff fac5 	bl	800f16c <scalbnf>
 800fbe2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800fbc8 <__kernel_rem_pio2f+0x2f0>
 800fbe6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fbea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbee:	db19      	blt.n	800fc24 <__kernel_rem_pio2f+0x34c>
 800fbf0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800fbcc <__kernel_rem_pio2f+0x2f4>
 800fbf4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fbf8:	aa08      	add	r2, sp, #32
 800fbfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fbfe:	3508      	adds	r5, #8
 800fc00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc04:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800fc08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc0c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fc10:	ee10 3a10 	vmov	r3, s0
 800fc14:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800fc18:	ee17 3a90 	vmov	r3, s15
 800fc1c:	3401      	adds	r4, #1
 800fc1e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800fc22:	e74c      	b.n	800fabe <__kernel_rem_pio2f+0x1e6>
 800fc24:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fc28:	aa08      	add	r2, sp, #32
 800fc2a:	ee10 3a10 	vmov	r3, s0
 800fc2e:	e7f6      	b.n	800fc1e <__kernel_rem_pio2f+0x346>
 800fc30:	a808      	add	r0, sp, #32
 800fc32:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800fc36:	9001      	str	r0, [sp, #4]
 800fc38:	ee07 0a90 	vmov	s15, r0
 800fc3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc40:	3b01      	subs	r3, #1
 800fc42:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fc46:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fc4a:	ed62 7a01 	vstmdb	r2!, {s15}
 800fc4e:	e743      	b.n	800fad8 <__kernel_rem_pio2f+0x200>
 800fc50:	ecfc 6a01 	vldmia	ip!, {s13}
 800fc54:	ecb5 7a01 	vldmia	r5!, {s14}
 800fc58:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fc5c:	3001      	adds	r0, #1
 800fc5e:	4550      	cmp	r0, sl
 800fc60:	dc01      	bgt.n	800fc66 <__kernel_rem_pio2f+0x38e>
 800fc62:	4290      	cmp	r0, r2
 800fc64:	ddf4      	ble.n	800fc50 <__kernel_rem_pio2f+0x378>
 800fc66:	a858      	add	r0, sp, #352	@ 0x160
 800fc68:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800fc6c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800fc70:	3b01      	subs	r3, #1
 800fc72:	e735      	b.n	800fae0 <__kernel_rem_pio2f+0x208>
 800fc74:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800fc76:	2b02      	cmp	r3, #2
 800fc78:	dc09      	bgt.n	800fc8e <__kernel_rem_pio2f+0x3b6>
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	dc27      	bgt.n	800fcce <__kernel_rem_pio2f+0x3f6>
 800fc7e:	d040      	beq.n	800fd02 <__kernel_rem_pio2f+0x42a>
 800fc80:	f009 0007 	and.w	r0, r9, #7
 800fc84:	b059      	add	sp, #356	@ 0x164
 800fc86:	ecbd 8b04 	vpop	{d8-d9}
 800fc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc8e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800fc90:	2b03      	cmp	r3, #3
 800fc92:	d1f5      	bne.n	800fc80 <__kernel_rem_pio2f+0x3a8>
 800fc94:	aa30      	add	r2, sp, #192	@ 0xc0
 800fc96:	1f0b      	subs	r3, r1, #4
 800fc98:	4413      	add	r3, r2
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	dc50      	bgt.n	800fd44 <__kernel_rem_pio2f+0x46c>
 800fca2:	4622      	mov	r2, r4
 800fca4:	2a01      	cmp	r2, #1
 800fca6:	dc5d      	bgt.n	800fd64 <__kernel_rem_pio2f+0x48c>
 800fca8:	ab30      	add	r3, sp, #192	@ 0xc0
 800fcaa:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800fbd0 <__kernel_rem_pio2f+0x2f8>
 800fcae:	440b      	add	r3, r1
 800fcb0:	2c01      	cmp	r4, #1
 800fcb2:	dc67      	bgt.n	800fd84 <__kernel_rem_pio2f+0x4ac>
 800fcb4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800fcb8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800fcbc:	2e00      	cmp	r6, #0
 800fcbe:	d167      	bne.n	800fd90 <__kernel_rem_pio2f+0x4b8>
 800fcc0:	edc7 6a00 	vstr	s13, [r7]
 800fcc4:	ed87 7a01 	vstr	s14, [r7, #4]
 800fcc8:	edc7 7a02 	vstr	s15, [r7, #8]
 800fccc:	e7d8      	b.n	800fc80 <__kernel_rem_pio2f+0x3a8>
 800fcce:	ab30      	add	r3, sp, #192	@ 0xc0
 800fcd0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800fbd0 <__kernel_rem_pio2f+0x2f8>
 800fcd4:	440b      	add	r3, r1
 800fcd6:	4622      	mov	r2, r4
 800fcd8:	2a00      	cmp	r2, #0
 800fcda:	da24      	bge.n	800fd26 <__kernel_rem_pio2f+0x44e>
 800fcdc:	b34e      	cbz	r6, 800fd32 <__kernel_rem_pio2f+0x45a>
 800fcde:	eef1 7a47 	vneg.f32	s15, s14
 800fce2:	edc7 7a00 	vstr	s15, [r7]
 800fce6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800fcea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fcee:	aa31      	add	r2, sp, #196	@ 0xc4
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	429c      	cmp	r4, r3
 800fcf4:	da20      	bge.n	800fd38 <__kernel_rem_pio2f+0x460>
 800fcf6:	b10e      	cbz	r6, 800fcfc <__kernel_rem_pio2f+0x424>
 800fcf8:	eef1 7a67 	vneg.f32	s15, s15
 800fcfc:	edc7 7a01 	vstr	s15, [r7, #4]
 800fd00:	e7be      	b.n	800fc80 <__kernel_rem_pio2f+0x3a8>
 800fd02:	ab30      	add	r3, sp, #192	@ 0xc0
 800fd04:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800fbd0 <__kernel_rem_pio2f+0x2f8>
 800fd08:	440b      	add	r3, r1
 800fd0a:	2c00      	cmp	r4, #0
 800fd0c:	da05      	bge.n	800fd1a <__kernel_rem_pio2f+0x442>
 800fd0e:	b10e      	cbz	r6, 800fd14 <__kernel_rem_pio2f+0x43c>
 800fd10:	eef1 7a67 	vneg.f32	s15, s15
 800fd14:	edc7 7a00 	vstr	s15, [r7]
 800fd18:	e7b2      	b.n	800fc80 <__kernel_rem_pio2f+0x3a8>
 800fd1a:	ed33 7a01 	vldmdb	r3!, {s14}
 800fd1e:	3c01      	subs	r4, #1
 800fd20:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd24:	e7f1      	b.n	800fd0a <__kernel_rem_pio2f+0x432>
 800fd26:	ed73 7a01 	vldmdb	r3!, {s15}
 800fd2a:	3a01      	subs	r2, #1
 800fd2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fd30:	e7d2      	b.n	800fcd8 <__kernel_rem_pio2f+0x400>
 800fd32:	eef0 7a47 	vmov.f32	s15, s14
 800fd36:	e7d4      	b.n	800fce2 <__kernel_rem_pio2f+0x40a>
 800fd38:	ecb2 7a01 	vldmia	r2!, {s14}
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd42:	e7d6      	b.n	800fcf2 <__kernel_rem_pio2f+0x41a>
 800fd44:	ed72 7a01 	vldmdb	r2!, {s15}
 800fd48:	edd2 6a01 	vldr	s13, [r2, #4]
 800fd4c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fd50:	3801      	subs	r0, #1
 800fd52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd56:	ed82 7a00 	vstr	s14, [r2]
 800fd5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd5e:	edc2 7a01 	vstr	s15, [r2, #4]
 800fd62:	e79c      	b.n	800fc9e <__kernel_rem_pio2f+0x3c6>
 800fd64:	ed73 7a01 	vldmdb	r3!, {s15}
 800fd68:	edd3 6a01 	vldr	s13, [r3, #4]
 800fd6c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fd70:	3a01      	subs	r2, #1
 800fd72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd76:	ed83 7a00 	vstr	s14, [r3]
 800fd7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd7e:	edc3 7a01 	vstr	s15, [r3, #4]
 800fd82:	e78f      	b.n	800fca4 <__kernel_rem_pio2f+0x3cc>
 800fd84:	ed33 7a01 	vldmdb	r3!, {s14}
 800fd88:	3c01      	subs	r4, #1
 800fd8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd8e:	e78f      	b.n	800fcb0 <__kernel_rem_pio2f+0x3d8>
 800fd90:	eef1 6a66 	vneg.f32	s13, s13
 800fd94:	eeb1 7a47 	vneg.f32	s14, s14
 800fd98:	edc7 6a00 	vstr	s13, [r7]
 800fd9c:	ed87 7a01 	vstr	s14, [r7, #4]
 800fda0:	eef1 7a67 	vneg.f32	s15, s15
 800fda4:	e790      	b.n	800fcc8 <__kernel_rem_pio2f+0x3f0>
 800fda6:	bf00      	nop

0800fda8 <floor>:
 800fda8:	ec51 0b10 	vmov	r0, r1, d0
 800fdac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdb4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800fdb8:	2e13      	cmp	r6, #19
 800fdba:	460c      	mov	r4, r1
 800fdbc:	4605      	mov	r5, r0
 800fdbe:	4680      	mov	r8, r0
 800fdc0:	dc34      	bgt.n	800fe2c <floor+0x84>
 800fdc2:	2e00      	cmp	r6, #0
 800fdc4:	da17      	bge.n	800fdf6 <floor+0x4e>
 800fdc6:	a332      	add	r3, pc, #200	@ (adr r3, 800fe90 <floor+0xe8>)
 800fdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdcc:	f7f0 fa2a 	bl	8000224 <__adddf3>
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	f7f0 fe6c 	bl	8000ab0 <__aeabi_dcmpgt>
 800fdd8:	b150      	cbz	r0, 800fdf0 <floor+0x48>
 800fdda:	2c00      	cmp	r4, #0
 800fddc:	da55      	bge.n	800fe8a <floor+0xe2>
 800fdde:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800fde2:	432c      	orrs	r4, r5
 800fde4:	2500      	movs	r5, #0
 800fde6:	42ac      	cmp	r4, r5
 800fde8:	4c2b      	ldr	r4, [pc, #172]	@ (800fe98 <floor+0xf0>)
 800fdea:	bf08      	it	eq
 800fdec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800fdf0:	4621      	mov	r1, r4
 800fdf2:	4628      	mov	r0, r5
 800fdf4:	e023      	b.n	800fe3e <floor+0x96>
 800fdf6:	4f29      	ldr	r7, [pc, #164]	@ (800fe9c <floor+0xf4>)
 800fdf8:	4137      	asrs	r7, r6
 800fdfa:	ea01 0307 	and.w	r3, r1, r7
 800fdfe:	4303      	orrs	r3, r0
 800fe00:	d01d      	beq.n	800fe3e <floor+0x96>
 800fe02:	a323      	add	r3, pc, #140	@ (adr r3, 800fe90 <floor+0xe8>)
 800fe04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe08:	f7f0 fa0c 	bl	8000224 <__adddf3>
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	2300      	movs	r3, #0
 800fe10:	f7f0 fe4e 	bl	8000ab0 <__aeabi_dcmpgt>
 800fe14:	2800      	cmp	r0, #0
 800fe16:	d0eb      	beq.n	800fdf0 <floor+0x48>
 800fe18:	2c00      	cmp	r4, #0
 800fe1a:	bfbe      	ittt	lt
 800fe1c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800fe20:	4133      	asrlt	r3, r6
 800fe22:	18e4      	addlt	r4, r4, r3
 800fe24:	ea24 0407 	bic.w	r4, r4, r7
 800fe28:	2500      	movs	r5, #0
 800fe2a:	e7e1      	b.n	800fdf0 <floor+0x48>
 800fe2c:	2e33      	cmp	r6, #51	@ 0x33
 800fe2e:	dd0a      	ble.n	800fe46 <floor+0x9e>
 800fe30:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800fe34:	d103      	bne.n	800fe3e <floor+0x96>
 800fe36:	4602      	mov	r2, r0
 800fe38:	460b      	mov	r3, r1
 800fe3a:	f7f0 f9f3 	bl	8000224 <__adddf3>
 800fe3e:	ec41 0b10 	vmov	d0, r0, r1
 800fe42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe46:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800fe4a:	f04f 37ff 	mov.w	r7, #4294967295
 800fe4e:	40df      	lsrs	r7, r3
 800fe50:	4207      	tst	r7, r0
 800fe52:	d0f4      	beq.n	800fe3e <floor+0x96>
 800fe54:	a30e      	add	r3, pc, #56	@ (adr r3, 800fe90 <floor+0xe8>)
 800fe56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe5a:	f7f0 f9e3 	bl	8000224 <__adddf3>
 800fe5e:	2200      	movs	r2, #0
 800fe60:	2300      	movs	r3, #0
 800fe62:	f7f0 fe25 	bl	8000ab0 <__aeabi_dcmpgt>
 800fe66:	2800      	cmp	r0, #0
 800fe68:	d0c2      	beq.n	800fdf0 <floor+0x48>
 800fe6a:	2c00      	cmp	r4, #0
 800fe6c:	da0a      	bge.n	800fe84 <floor+0xdc>
 800fe6e:	2e14      	cmp	r6, #20
 800fe70:	d101      	bne.n	800fe76 <floor+0xce>
 800fe72:	3401      	adds	r4, #1
 800fe74:	e006      	b.n	800fe84 <floor+0xdc>
 800fe76:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	40b3      	lsls	r3, r6
 800fe7e:	441d      	add	r5, r3
 800fe80:	4545      	cmp	r5, r8
 800fe82:	d3f6      	bcc.n	800fe72 <floor+0xca>
 800fe84:	ea25 0507 	bic.w	r5, r5, r7
 800fe88:	e7b2      	b.n	800fdf0 <floor+0x48>
 800fe8a:	2500      	movs	r5, #0
 800fe8c:	462c      	mov	r4, r5
 800fe8e:	e7af      	b.n	800fdf0 <floor+0x48>
 800fe90:	8800759c 	.word	0x8800759c
 800fe94:	7e37e43c 	.word	0x7e37e43c
 800fe98:	bff00000 	.word	0xbff00000
 800fe9c:	000fffff 	.word	0x000fffff

0800fea0 <floorf>:
 800fea0:	ee10 3a10 	vmov	r3, s0
 800fea4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fea8:	3a7f      	subs	r2, #127	@ 0x7f
 800feaa:	2a16      	cmp	r2, #22
 800feac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800feb0:	dc2b      	bgt.n	800ff0a <floorf+0x6a>
 800feb2:	2a00      	cmp	r2, #0
 800feb4:	da12      	bge.n	800fedc <floorf+0x3c>
 800feb6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ff1c <floorf+0x7c>
 800feba:	ee30 0a27 	vadd.f32	s0, s0, s15
 800febe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fec6:	dd06      	ble.n	800fed6 <floorf+0x36>
 800fec8:	2b00      	cmp	r3, #0
 800feca:	da24      	bge.n	800ff16 <floorf+0x76>
 800fecc:	2900      	cmp	r1, #0
 800fece:	4b14      	ldr	r3, [pc, #80]	@ (800ff20 <floorf+0x80>)
 800fed0:	bf08      	it	eq
 800fed2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800fed6:	ee00 3a10 	vmov	s0, r3
 800feda:	4770      	bx	lr
 800fedc:	4911      	ldr	r1, [pc, #68]	@ (800ff24 <floorf+0x84>)
 800fede:	4111      	asrs	r1, r2
 800fee0:	420b      	tst	r3, r1
 800fee2:	d0fa      	beq.n	800feda <floorf+0x3a>
 800fee4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800ff1c <floorf+0x7c>
 800fee8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800feec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef4:	ddef      	ble.n	800fed6 <floorf+0x36>
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	bfbe      	ittt	lt
 800fefa:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800fefe:	fa40 f202 	asrlt.w	r2, r0, r2
 800ff02:	189b      	addlt	r3, r3, r2
 800ff04:	ea23 0301 	bic.w	r3, r3, r1
 800ff08:	e7e5      	b.n	800fed6 <floorf+0x36>
 800ff0a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ff0e:	d3e4      	bcc.n	800feda <floorf+0x3a>
 800ff10:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ff14:	4770      	bx	lr
 800ff16:	2300      	movs	r3, #0
 800ff18:	e7dd      	b.n	800fed6 <floorf+0x36>
 800ff1a:	bf00      	nop
 800ff1c:	7149f2ca 	.word	0x7149f2ca
 800ff20:	bf800000 	.word	0xbf800000
 800ff24:	007fffff 	.word	0x007fffff

0800ff28 <_init>:
 800ff28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff2a:	bf00      	nop
 800ff2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff2e:	bc08      	pop	{r3}
 800ff30:	469e      	mov	lr, r3
 800ff32:	4770      	bx	lr

0800ff34 <_fini>:
 800ff34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff36:	bf00      	nop
 800ff38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff3a:	bc08      	pop	{r3}
 800ff3c:	469e      	mov	lr, r3
 800ff3e:	4770      	bx	lr
